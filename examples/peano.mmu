(sort wff strict provable)

(term im ((p wff ()) (q wff ())) (wff ()))

(term not ((p wff ())) (wff ()))

(axiom ax_1 ((a wff ()) (b wff ())) ()
  (im a (im b a)))

(axiom ax_2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (im b c)) (im (im a b) (im a c))))

(axiom ax_3 ((a wff ()) (b wff ())) ()
  (im (im (not a) (not b)) (im b a)))

(axiom ax_mp ((a wff ()) (b wff ()))
  ((im a b)
   a)
  b)

(local theorem a1i ((a wff ()) (b wff ()))
  ((h b))
  (im a b)
()
(ax_mp (b (im a b))
  (ax_1 (b a))
  h))

(local theorem a2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im (im a b) (im a c))
()
(ax_mp ((im a (im b c)) (im (im a b) (im a c)))
  (ax_2 (a b c))
  h))

(local theorem mpd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im a (im b c))))
  (im a c)
()
(ax_mp ((im a b) (im a c))
  (ax_mp ((im a (im b c)) (im (im a b) (im a c)))
    (ax_2 (a b c))
    h2)
  h1))

(local theorem mpi ((a wff ()) (b wff ()) (c wff ()))
  ((h1 b)
   (h2 (im a (im b c))))
  (im a c)
()
(mpd (a b c)
  (a1i (a b)
    h1)
  h2))

(local theorem id ((a wff ())) ()
  (im a a)
()
(mpd (a (im a a) a)
  (ax_1 (a a))
  (ax_1 (a (im a a)))))

(local theorem idd ((a wff ()) (b wff ())) ()
  (im a (im b b))
()
(a1i (a (im b b))
  (id (b))))

(local theorem syl ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im b c))
   (h2 (im a b)))
  (im a c)
()
(mpd (a b c)
  h2
  (a1i (a (im b c))
    h1)))

(local theorem rsyl ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im b c)))
  (im a c)
()
(syl (a b c)
  h2
  h1))

(local theorem a1d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a b)))
  (im a (im c b))
()
(syl (a b (im c b))
  (ax_1 (b c))
  h))

(local theorem a2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b (im c d)))))
  (im a (im (im b c) (im b d)))
()
(syl (a (im b (im c d)) (im (im b c) (im b d)))
  (ax_2 (b c d))
  h))

(local theorem a3d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im (not b) (not c)))))
  (im a (im c b))
()
(syl (a (im (not b) (not c)) (im c b))
  (ax_3 (b c))
  h))

(local theorem sylc ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im b (im c d)))
   (h1 (im a b))
   (h2 (im a c)))
  (im a d)
()
(mpd (a c d)
  h2
  (syl (a b (im c d))
    h
    h1)))

(local theorem syld ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(mpd (a (im b c) (im b d))
  h1
  (a2d (a b c d)
    (a1d (a (im c d) b)
      h2))))

(local theorem syl5 ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im b c))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syld (a b c d)
  (a1i (a (im b c))
    h1)
  h2))

(local theorem syl6 ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im c d))
   (h2 (im a (im b c))))
  (im a (im b d))
()
(syld (a b c d)
  h2
  (a1i (a (im c d))
    h1)))

(local theorem imim2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im b c) (im (im a b) (im a c)))
()
(a2d ((im b c) a b c)
  (ax_1 ((im b c) a))))

(local theorem imim2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (im b c)))
  (im (im a b) (im a c))
()
(ax_mp ((im b c) (im (im a b) (im a c)))
  (imim2 (a b c))
  h))

(local theorem imim2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im c d))))
  (im a (im (im b c) (im b d)))
()
(syl (a (im c d) (im (im b c) (im b d)))
  (imim2 (b c d))
  h))

(local theorem absurd ((a wff ()) (b wff ())) ()
  (im (not a) (im a b))
()
(a3d ((not a) b a)
  (ax_1 ((not a) (not b)))))

(local theorem com12 ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im b (im a c))
()
(syl (b (im a b) (im a c))
  (a2i (a b c)
    h)
  (ax_1 (b a))))

(local theorem mpcom ((a wff ()) (b wff ())) ()
  (im a (im (im a b) b))
()
(com12 ((im a b) a b)
  (id ((im a b)))))

(local theorem com23 ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b (im c d)))))
  (im a (im c (im b d)))
()
(syl (a (im b (im c d)) (im c (im b d)))
  (com12 (c (im b (im c d)) (im b d))
    (imim2d (c b (im c d) d)
      (mpcom (c d))))
  h))

(local theorem eimd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a b))
   (h2 (im a (im c d))))
  (im a (im (im b c) d))
()
(syld (a (im b c) c d)
  (rsyl (a b (im (im b c) c))
    h1
    (mpcom (b c)))
  h2))

(local theorem absurdr ((a wff ()) (b wff ())) ()
  (im a (im (not a) b))
()
(com12 ((not a) a b)
  (absurd (a b))))

(local theorem imim1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a b) (im (im b c) (im a c)))
()
(com12 ((im b c) (im a b) (im a c))
  (imim2 (a b c))))

(local theorem imim1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a b)))
  (im (im b c) (im a c))
()
(ax_mp ((im a b) (im (im b c) (im a c)))
  (imim1 (a b c))
  h))

(local theorem imim1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b c))))
  (im a (im (im c d) (im b d)))
()
(syl (a (im b c) (im (im c d) (im b d)))
  (imim1 (b c d))
  h))

(local theorem imimd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im d e))))
  (im a (im (im c d) (im b e)))
()
(syld (a (im c d) (im b d) (im b e))
  (imim1d (a b c d)
    h1)
  (imim2d (a b d e)
    h2)))

(local theorem imim ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (im a b) (im (im c d) (im (im b c) (im a d))))
()
(syl5 ((im a b) (im c d) (im (im b c) (im b d)) (im (im b c) (im a d)))
  (imim2 (b c d))
  (imim2d ((im a b) (im b c) (im b d) (im a d))
    (imim1 (a b d)))))

(local theorem imidm ((a wff ()) (b wff ())) ()
  (im (im a (im a b)) (im a b))
()
(a2i (a (im a b) b)
  (mpcom (a b))))

(local theorem eim ((a wff ()) (b wff ()) (c wff ())) ()
  (im a (im (im b c) (im (im a b) c)))
()
(imim1d (a (im a b) b c)
  (mpcom (a b))))

(local theorem contra ((a wff ())) ()
  (im (im (not a) a) a)
()
(ax_mp ((im (im (not a) a) (im (im (not a) a) a)) (im (im (not a) a) a))
  (imidm ((im (not a) a) a))
  (a3d ((im (not a) a) a (im (not a) a))
    (a2i ((not a) a (not (im (not a) a)))
      (absurd (a (not (im (not a) a))))))))

(local theorem dne ((a wff ())) ()
  (im (not (not a)) a)
()
(syl ((not (not a)) (im (not a) a) a)
  (contra (a))
  (absurd ((not a) a))))

(local theorem inot ((a wff ())) ()
  (im (im a (not a)) (not a))
()
(syl ((im a (not a)) (im (not (not a)) (not a)) (not a))
  (contra ((not a)))
  (ax_mp ((im (not (not a)) a) (im (im a (not a)) (im (not (not a)) (not a))))
    (imim1 ((not (not a)) a (not a)))
    (dne (a)))))

(local theorem con2 ((a wff ()) (b wff ())) ()
  (im (im a (not b)) (im b (not a)))
()
(a3d ((im a (not b)) (not a) b)
  (syl5 ((im a (not b)) (not (not a)) a (not b))
    (dne (a))
    (id ((im a (not b)))))))

(local theorem notnot1 ((a wff ())) ()
  (im a (not (not a)))
()
(ax_mp ((im (not a) (not a)) (im a (not (not a))))
  (con2 ((not a) a))
  (id ((not a)))))

(local theorem con3 ((a wff ()) (b wff ())) ()
  (im (im a b) (im (not b) (not a)))
()
(syl ((im a b) (im a (not (not b))) (im (not b) (not a)))
  (con2 (a (not b)))
  (imim2i (a b (not (not b)))
    (notnot1 (b)))))

(local theorem con1 ((a wff ()) (b wff ())) ()
  (im (im (not a) b) (im (not b) a))
()
(a3d ((im (not a) b) a (not b))
  (imim2i ((not a) b (not (not b)))
    (notnot1 (b)))))

(local theorem cases ((a wff ()) (b wff ()))
  ((h1 (im a b))
   (h2 (im (not a) b)))
  b
()
(ax_mp ((im (not b) b) b)
  (contra (b))
  (syl ((not b) a b)
    h1
    (ax_mp ((im (not a) b) (im (not b) a))
      (con1 (a b))
      h2))))

(local theorem casesd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im (not b) c))))
  (im a c)
()
(cases (b (im a c))
  (com12 (a b c)
    h1)
  (com12 (a (not b) c)
    h2)))

(local theorem con1d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im (not b) c))))
  (im a (im (not c) b))
()
(syl (a (im (not b) c) (im (not c) b))
  (con1 (b c))
  h))

(local theorem con2d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b (not c)))))
  (im a (im c (not b)))
()
(syl (a (im b (not c)) (im c (not b)))
  (con2 (b c))
  h))

(local theorem con3d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im a (im (not c) (not b)))
()
(syl (a (im b c) (im (not c) (not b)))
  (con3 (b c))
  h))

(local theorem con4d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im (not b) (not c)))))
  (im a (im c b))
()
(syl (a (im (not b) (not c)) (im c b))
  (ax_3 (b c))
  h))

(local theorem mt ((a wff ()) (b wff ()))
  ((h1 (im b a))
   (h2 (not a)))
  (not b)
()
(ax_mp ((not a) (not b))
  (ax_mp ((im b a) (im (not a) (not b)))
    (con3 (b a))
    h1)
  h2))

(local theorem mt2 ((a wff ()) (b wff ()))
  ((h1 (im b (not a)))
   (h2 a))
  (not b)
()
(ax_mp (a (not b))
  (ax_mp ((im b (not a)) (im a (not b)))
    (con2 (b a))
    h1)
  h2))

(local theorem mtd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (not b)))
   (h2 (im a (im c b))))
  (im a (not c))
()
(mpd (a (not b) (not c))
  h1
  (con3d (a c b)
    h2)))

(local theorem mti ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (not b))
   (h2 (im a (im c b))))
  (im a (not c))
()
(mtd (a b c)
  (a1i (a (not b))
    h1)
  h2))

(local theorem mt2d ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a c))
   (h2 (im a (im b (not c)))))
  (im a (not b))
()
(sylc (a (im b (not c)) c (not b))
  (con2 (b c))
  h2
  h1))

(def an ((a wff ()) (b wff ())) (wff ())
()
(not (im a (not b))))

(local theorem anl ((a wff ()) (b wff ())) ()
  (im (an a b) a)
()
(ax_mp ((im (not a) (im a (not b))) (im (an a b) a))
  (:conv (im (im (not a) (im a (not b))) (im (an a b) a))
    (im
      (im (not a) (im a (not b)))
      (im
        (:unfold an (a b) ()
          (not (im a (not b))))
        a))
    (con1 (a (im a (not b)))))
  (absurd (a (not b)))))

(local theorem anr ((a wff ()) (b wff ())) ()
  (im (an a b) b)
()
(ax_mp ((im (not b) (im a (not b))) (im (an a b) b))
  (:conv (im (im (not b) (im a (not b))) (im (an a b) b))
    (im
      (im (not b) (im a (not b)))
      (im
        (:unfold an (a b) ()
          (not (im a (not b))))
        b))
    (con1 (b (im a (not b)))))
  (ax_1 ((not b) a))))

(local theorem anli ((a wff ()) (b wff ()))
  ((h (an a b)))
  a
()
(ax_mp ((an a b) a)
  (anl (a b))
  h))

(local theorem anri ((a wff ()) (b wff ()))
  ((h (an a b)))
  b
()
(ax_mp ((an a b) b)
  (anr (a b))
  h))

(local theorem ian ((a wff ()) (b wff ())) ()
  (im a (im b (an a b)))
()
(:conv (im a (im b (an a b)))
  (im
    a
    (im
      b
      (:unfold an (a b) ()
        (not (im a (not b))))))
  (con2d (a (im a (not b)) b)
    (mpcom (a (not b))))))

(local theorem iand ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im a c)))
  (im a (an b c))
()
(sylc (a b c (an b c))
  (ian (b c))
  h1
  h2))

(local theorem anld ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (an b c))))
  (im a b)
()
(syl (a (an b c) b)
  (anl (b c))
  h))

(local theorem anrd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (an b c))))
  (im a c)
()
(syl (a (an b c) c)
  (anr (b c))
  h))

(local theorem iani ((a wff ()) (b wff ()))
  ((h1 a)
   (h2 b))
  (an a b)
()
(ax_mp (b (an a b))
  (ax_mp (a (im b (an a b)))
    (ian (a b))
    h1)
  h2))

(local theorem anwl ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a c)))
  (im (an a b) c)
()
(syl ((an a b) a c)
  h
  (anl (a b))))

(local theorem anwr ((a wff ()) (b wff ()) (c wff ()))
  ((h (im b c)))
  (im (an a b) c)
()
(syl ((an a b) b c)
  h
  (anr (a b))))

(local theorem anll ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an (an a b) c) a)
()
(anwl ((an a b) c a)
  (anl (a b))))

(local theorem anlr ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an (an a b) c) b)
()
(anwl ((an a b) c b)
  (anr (a b))))

(local theorem anrl ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an a (an b c)) b)
()
(anwr (a (an b c) b)
  (anl (b c))))

(local theorem anrr ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an a (an b c)) c)
()
(anwr (a (an b c) c)
  (anr (b c))))

(local theorem anwll ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a d)))
  (im (an (an a b) c) d)
()
(anwl ((an a b) c d)
  (anwl (a b d)
    h)))

(local theorem anw3l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h (im a e)))
  (im (an (an (an a b) c) d) e)
()
(anwll ((an a b) c d e)
  (anwl (a b e)
    h)))

(local theorem anw4l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()))
  ((h (im a f)))
  (im (an (an (an (an a b) c) d) e) f)
()
(anw3l ((an a b) c d e f)
  (anwl (a b f)
    h)))

(local theorem anw5l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()) (g wff ()))
  ((h (im a g)))
  (im (an (an (an (an (an a b) c) d) e) f) g)
()
(anw4l ((an a b) c d e f g)
  (anwl (a b g)
    h)))

(local theorem anw6l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()) (g wff ()) (h wff ()))
  ((x (im a h)))
  (im (an (an (an (an (an (an a b) c) d) e) f) g) h)
()
(anw5l ((an a b) c d e f g h)
  (anwl (a b h)
    x)))

(local theorem anw7l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()) (g wff ()) (h wff ()) (i wff ()))
  ((x (im a i)))
  (im (an (an (an (an (an (an (an a b) c) d) e) f) g) h) i)
()
(anw6l ((an a b) c d e f g h i)
  (anwl (a b i)
    x)))

(local theorem anllr ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (an (an (an a b) c) d) b)
()
(anwll ((an a b) c d b)
  (anr (a b))))

(local theorem an3l ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (an (an (an a b) c) d) a)
()
(anwll ((an a b) c d a)
  (anl (a b))))

(local theorem an3lr ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ())) ()
  (im (an (an (an (an a b) c) d) e) b)
()
(anwl ((an (an (an a b) c) d) e b)
  (anllr (a b c d))))

(local theorem an4l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ())) ()
  (im (an (an (an (an a b) c) d) e) a)
()
(anwl ((an (an (an a b) c) d) e a)
  (an3l (a b c d))))

(local theorem an4lr ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ())) ()
  (im (an (an (an (an (an a b) c) d) e) f) b)
()
(anwl ((an (an (an (an a b) c) d) e) f b)
  (an3lr (a b c d e))))

(local theorem an5l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ())) ()
  (im (an (an (an (an (an a b) c) d) e) f) a)
()
(anwl ((an (an (an (an a b) c) d) e) f a)
  (an4l (a b c d e))))

(local theorem an5lr ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()) (g wff ())) ()
  (im (an (an (an (an (an (an a b) c) d) e) f) g) b)
()
(anwl ((an (an (an (an (an a b) c) d) e) f) g b)
  (an4lr (a b c d e f))))

(local theorem an6l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()) (g wff ())) ()
  (im (an (an (an (an (an (an a b) c) d) e) f) g) a)
()
(anwl ((an (an (an (an (an a b) c) d) e) f) g a)
  (an5l (a b c d e f))))

(local theorem an6lr ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()) (g wff ()) (h wff ())) ()
  (im (an (an (an (an (an (an (an a b) c) d) e) f) g) h) b)
()
(anwl ((an (an (an (an (an (an a b) c) d) e) f) g) h b)
  (an5lr (a b c d e f g))))

(local theorem imp ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im (an a b) c)
()
(sylc ((an a b) a b c)
  h
  (anl (a b))
  (anr (a b))))

(local theorem exp ((a wff ()) (b wff ()) (c wff ()))
  ((h (im (an a b) c)))
  (im a (im b c))
()
(syl6 (a b (an a b) c)
  h
  (ian (a b))))

(local theorem impcom ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im (an b a) c)
()
(imp (b a c)
  (com12 (a b c)
    h)))

(local theorem expcom ((a wff ()) (b wff ()) (c wff ()))
  ((h (im (an a b) c)))
  (im b (im a c))
()
(com12 (a b c)
  (exp (a b c)
    h)))

(local theorem syla ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im (im b c) d))
   (h2 (im (an a b) c)))
  (im a d)
()
(syl (a (im b c) d)
  h1
  (exp (a b c)
    h2)))

(local theorem sylan ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an b c) d))
   (h1 (im a b))
   (h2 (im a c)))
  (im a d)
()
(syl (a (an b c) d)
  h
  (iand (a b c)
    h1
    h2)))

(local theorem animd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im d e))))
  (im a (im (an b d) (an c e)))
()
(exp (a (an b d) (an c e))
  (iand ((an a (an b d)) c e)
    (imp (a (an b d) c)
      (syl5 (a (an b d) b c)
        (anl (b d))
        h1))
    (imp (a (an b d) e)
      (syl5 (a (an b d) d e)
        (anr (b d))
        h2)))))

(local theorem anim1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b c))))
  (im a (im (an b d) (an c d)))
()
(animd (a b c d d)
  h
  (idd (a d))))

(local theorem anim2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im c d))))
  (im a (im (an b c) (an b d)))
()
(animd (a b b c d)
  (idd (a b))
  h))

(local theorem anim1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a b) (im (an a c) (an b c)))
()
(anim1d ((im a b) a b c)
  (id ((im a b)))))

(local theorem anim2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im b c) (im (an a b) (an a c)))
()
(anim2d ((im b c) a b c)
  (id ((im b c)))))

(local theorem anim ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (im a b) (im (im c d) (im (an a c) (an b d))))
()
(exp ((im a b) (im c d) (im (an a c) (an b d)))
  (syld ((an (im a b) (im c d)) (an a c) (an b c) (an b d))
    (anim1d ((an (im a b) (im c d)) a b c)
      (anl ((im a b) (im c d))))
    (anim2d ((an (im a b) (im c d)) b c d)
      (anr ((im a b) (im c d)))))))

(local theorem anim2a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (im b c)) (im (an a b) (an a c)))
()
(:let H1 (anrl ((im a (im b c)) a b))
(exp ((im a (im b c)) (an a b) (an a c))
  (iand ((an (im a (im b c)) (an a b)) a c)
    H1
    (mpd ((an (im a (im b c)) (an a b)) b c)
      (anrr ((im a (im b c)) a b))
      (mpd ((an (im a (im b c)) (an a b)) a (im b c))
        H1
        (anl ((im a (im b c)) (an a b)))))))))

(local theorem ancom ((a wff ()) (b wff ())) ()
  (im (an a b) (an b a))
()
(iand ((an a b) b a)
  (anr (a b))
  (anl (a b))))

(local theorem anrasss ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an (an a b) c) d)))
  (im (an (an a c) b) d)
()
(sylan ((an (an a c) b) (an a b) c d)
  h
  (iand ((an (an a c) b) a b)
    (anll (a c b))
    (anr ((an a c) b)))
  (anlr (a c b))))

(local theorem anim1a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (im b c)) (im (an b a) (an c a)))
()
(syl6 ((im a (im b c)) (an b a) (an a c) (an c a))
  (ancom (a c))
  (syl5 ((im a (im b c)) (an b a) (an a b) (an a c))
    (ancom (b a))
    (anim2a (a b c)))))

(local theorem casesda ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im (an a b) c))
   (h2 (im (an a (not b)) c)))
  (im a c)
()
(casesd (a b c)
  (exp (a b c)
    h1)
  (exp (a (not b) c)
    h2)))

(local theorem inotda ((a wff ()) (b wff ()))
  ((h (im (an a b) (not b))))
  (im a (not b))
()
(syla (a b (not b) (not b))
  (inot (b))
  h))

(local theorem mpand ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im (an a b) c)))
  (im a c)
()
(mpd (a b c)
  h1
  (exp (a b c)
    h2)))

(local theorem mtand ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (not b)))
   (h2 (im (an a c) b)))
  (im a (not c))
()
(mtd (a b c)
  h1
  (exp (a c b)
    h2)))

(local theorem mtani ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (not b))
   (h2 (im (an a c) b)))
  (im a (not c))
()
(mtand (a b c)
  (a1i (a (not b))
    h1)
  h2))

(def iff ((a wff ()) (b wff ())) (wff ())
()
(an (im a b) (im b a)))

(local theorem bi1 ((a wff ()) (b wff ())) ()
  (im (iff a b) (im a b))
()
(:conv (im (iff a b) (im a b))
  (im
    (:unfold iff (a b) ()
      (an (im a b) (im b a)))
    (im a b))
  (anl ((im a b) (im b a)))))

(local theorem bi1i ((a wff ()) (b wff ()))
  ((h (iff a b)))
  (im a b)
()
(ax_mp ((iff a b) (im a b))
  (bi1 (a b))
  h))

(local theorem bi1d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (im b c))
()
(syl (a (iff b c) (im b c))
  (bi1 (b c))
  h))

(local theorem bi1a ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im (an a b) c)
()
(imp (a b c)
  (bi1d (a b c)
    h)))

(local theorem bi2 ((a wff ()) (b wff ())) ()
  (im (iff a b) (im b a))
()
(:conv (im (iff a b) (im b a))
  (im
    (:unfold iff (a b) ()
      (an (im a b) (im b a)))
    (im b a))
  (anr ((im a b) (im b a)))))

(local theorem bi2i ((a wff ()) (b wff ()))
  ((h (iff a b)))
  (im b a)
()
(ax_mp ((iff a b) (im b a))
  (bi2 (a b))
  h))

(local theorem bi2d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (im c b))
()
(syl (a (iff b c) (im c b))
  (bi2 (b c))
  h))

(local theorem bi2a ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im (an a c) b)
()
(imp (a c b)
  (bi2d (a b c)
    h)))

(local theorem ibii ((a wff ()) (b wff ()))
  ((h1 (im a b))
   (h2 (im b a)))
  (iff a b)
()
(:conv (iff a b)
  (:unfold iff (a b) ()
    (an (im a b) (im b a)))
  (iani ((im a b) (im b a))
    h1
    h2)))

(local theorem ibid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im c b))))
  (im a (iff b c))
()
(:conv (im a (iff b c))
  (im
    a
    (:unfold iff (b c) ()
      (an (im b c) (im c b))))
  (iand (a (im b c) (im c b))
    h1
    h2)))

(local theorem ibida ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im (an a b) c))
   (h2 (im (an a c) b)))
  (im a (iff b c))
()
(ibid (a b c)
  (exp (a b c)
    h1)
  (exp (a c b)
    h2)))

(local theorem biid ((a wff ())) ()
  (iff a a)
()
(:let H1 (id (a))
(ibii (a a)
  H1
  H1)))

(local theorem biidd ((a wff ()) (b wff ())) ()
  (im a (iff b b))
()
(a1i (a (iff b b))
  (biid (b))))

(local theorem mpbi ((a wff ()) (b wff ()))
  ((h1 (iff a b))
   (h2 a))
  b
()
(ax_mp (a b)
  (bi1i (a b)
    h1)
  h2))

(local theorem mpbir ((a wff ()) (b wff ()))
  ((h1 (iff b a))
   (h2 a))
  b
()
(ax_mp (a b)
  (bi2i (b a)
    h1)
  h2))

(local theorem mpbid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a b)))
  (im a c)
()
(mpd (a b c)
  h2
  (bi1d (a b c)
    h1)))

(local theorem mpbird ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff c b)))
   (h2 (im a b)))
  (im a c)
()
(mpd (a b c)
  h2
  (bi2d (a c b)
    h1)))

(local theorem mpbii ((a wff ()) (b wff ()) (c wff ()))
  ((h1 b)
   (h2 (im a (iff b c))))
  (im a c)
()
(mpbid (a b c)
  h2
  (a1i (a b)
    h1)))

(local theorem mpbiri ((a wff ()) (b wff ()) (c wff ()))
  ((h1 b)
   (h2 (im a (iff c b))))
  (im a c)
()
(mpbird (a b c)
  h2
  (a1i (a b)
    h1)))

(local theorem mtbi ((a wff ()) (b wff ()))
  ((h1 (iff a b))
   (h2 (not a)))
  (not b)
()
(mt (a b)
  (ax_mp ((iff a b) (im b a))
    (bi2 (a b))
    h1)
  h2))

(local theorem mtbir ((a wff ()) (b wff ()))
  ((h1 (iff b a))
   (h2 (not a)))
  (not b)
()
(mt (a b)
  (ax_mp ((iff b a) (im b a))
    (bi1 (b a))
    h1)
  h2))

(local theorem mtbid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (not b))))
  (im a (not c))
()
(mtd (a b c)
  h2
  (bi2d (a b c)
    h1)))

(local theorem mtbird ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff c b)))
   (h2 (im a (not b))))
  (im a (not c))
()
(mtd (a b c)
  h2
  (bi1d (a c b)
    h1)))

(local theorem con1b ((a wff ()) (b wff ())) ()
  (im (iff (not a) b) (iff (not b) a))
()
(ibid ((iff (not a) b) (not b) a)
  (con1d ((iff (not a) b) a b)
    (bi1 ((not a) b)))
  (con2d ((iff (not a) b) b a)
    (bi2 ((not a) b)))))

(local theorem con2b ((a wff ()) (b wff ())) ()
  (im (iff a (not b)) (iff b (not a)))
()
(ibid ((iff a (not b)) b (not a))
  (con2d ((iff a (not b)) a b)
    (bi1 (a (not b))))
  (con1d ((iff a (not b)) b a)
    (bi2 (a (not b))))))

(local theorem con3b ((a wff ()) (b wff ())) ()
  (im (iff a b) (iff (not a) (not b)))
()
(ibid ((iff a b) (not a) (not b))
  (con3d ((iff a b) b a)
    (bi2 (a b)))
  (con3d ((iff a b) a b)
    (bi1 (a b)))))

(local theorem con4b ((a wff ()) (b wff ())) ()
  (im (iff (not a) (not b)) (iff a b))
()
(ibid ((iff (not a) (not b)) a b)
  (con4d ((iff (not a) (not b)) b a)
    (bi2 ((not a) (not b))))
  (con4d ((iff (not a) (not b)) a b)
    (bi1 ((not a) (not b))))))

(local theorem con1bb ((a wff ()) (b wff ())) ()
  (iff (iff (not a) b) (iff (not b) a))
()
(ibii ((iff (not a) b) (iff (not b) a))
  (con1b (a b))
  (con1b (b a))))

(local theorem con2bb ((a wff ()) (b wff ())) ()
  (iff (iff a (not b)) (iff b (not a)))
()
(ibii ((iff a (not b)) (iff b (not a)))
  (con2b (a b))
  (con2b (b a))))

(local theorem con3bb ((a wff ()) (b wff ())) ()
  (iff (iff a b) (iff (not a) (not b)))
()
(ibii ((iff a b) (iff (not a) (not b)))
  (con3b (a b))
  (con4b (a b))))

(local theorem con1bi ((a wff ()) (b wff ())) ()
  (iff (im (not a) b) (im (not b) a))
()
(ibii ((im (not a) b) (im (not b) a))
  (con1 (a b))
  (con1 (b a))))

(local theorem con2bi ((a wff ()) (b wff ())) ()
  (iff (im a (not b)) (im b (not a)))
()
(ibii ((im a (not b)) (im b (not a)))
  (con2 (a b))
  (con2 (b a))))

(local theorem con3bi ((a wff ()) (b wff ())) ()
  (iff (im a b) (im (not b) (not a)))
()
(ibii ((im a b) (im (not b) (not a)))
  (con3 (a b))
  (ax_3 (b a))))

(local theorem notnot ((a wff ())) ()
  (iff a (not (not a)))
()
(ibii (a (not (not a)))
  (notnot1 (a))
  (dne (a))))

(local theorem bithd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im a c)))
  (im a (iff b c))
()
(ibid (a b c)
  (a1d (a c b)
    h2)
  (a1d (a b c)
    h1)))

(local theorem binthd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (not b)))
   (h2 (im a (not c))))
  (im a (iff b c))
()
(syl (a (iff (not b) (not c)) (iff b c))
  (con4b (b c))
  (bithd (a (not b) (not c))
    h1
    h2)))

(local theorem bith ((a wff ()) (b wff ())) ()
  (im a (im b (iff a b)))
()
(exp (a b (iff a b))
  (bithd ((an a b) a b)
    (anl (a b))
    (anr (a b)))))

(local theorem binth ((a wff ()) (b wff ())) ()
  (im (not a) (im (not b) (iff a b)))
()
(exp ((not a) (not b) (iff a b))
  (binthd ((an (not a) (not b)) a b)
    (anl ((not a) (not b)))
    (anr ((not a) (not b))))))

(local theorem bicom ((a wff ()) (b wff ())) ()
  (im (iff a b) (iff b a))
()
(ibid ((iff a b) b a)
  (bi2 (a b))
  (bi1 (a b))))

(local theorem bicomb ((a wff ()) (b wff ())) ()
  (iff (iff a b) (iff b a))
()
(ibii ((iff a b) (iff b a))
  (bicom (a b))
  (bicom (b a))))

(local theorem bicomd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (iff c b))
()
(syl (a (iff b c) (iff c b))
  (bicom (b c))
  h))

(local theorem bitrd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(ibid (a b d)
  (syld (a b c d)
    (bi1d (a b c)
      h1)
    (bi1d (a c d)
      h2))
  (syld (a d c b)
    (bi2d (a c d)
      h2)
    (bi2d (a b c)
      h1))))

(local theorem bitr2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff c d))))
  (im a (iff d b))
()
(bicomd (a b d)
  (bitrd (a b c d)
    h1
    h2)))

(local theorem bitr3d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff c b)))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(bitrd (a b c d)
  (bicomd (a c b)
    h1)
  h2))

(local theorem bitr4d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d c))))
  (im a (iff b d))
()
(bitrd (a b c d)
  h1
  (bicomd (a d c)
    h2)))

(local theorem bitr ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff a b) (im (iff b c) (iff a c)))
()
(exp ((iff a b) (iff b c) (iff a c))
  (bitrd ((an (iff a b) (iff b c)) a b c)
    (anl ((iff a b) (iff b c)))
    (anr ((iff a b) (iff b c))))))

(local theorem bitr2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff a b) (im (iff b c) (iff c a)))
()
(exp ((iff a b) (iff b c) (iff c a))
  (bitr2d ((an (iff a b) (iff b c)) a b c)
    (anl ((iff a b) (iff b c)))
    (anr ((iff a b) (iff b c))))))

(local theorem bitr3 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff b a) (im (iff b c) (iff a c)))
()
(exp ((iff b a) (iff b c) (iff a c))
  (bitr3d ((an (iff b a) (iff b c)) a b c)
    (anl ((iff b a) (iff b c)))
    (anr ((iff b a) (iff b c))))))

(local theorem bitr4 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff a b) (im (iff c b) (iff a c)))
()
(exp ((iff a b) (iff c b) (iff a c))
  (bitr4d ((an (iff a b) (iff c b)) a b c)
    (anl ((iff a b) (iff c b)))
    (anr ((iff a b) (iff c b))))))

(local theorem sylib ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff b c))
   (h2 (im a b)))
  (im a c)
()
(syl (a b c)
  (bi1i (b c)
    h1)
  h2))

(local theorem sylibr ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff c b))
   (h2 (im a b)))
  (im a c)
()
(syl (a b c)
  (bi2i (c b)
    h1)
  h2))

(local theorem sylbi ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff a b))
   (h2 (im b c)))
  (im a c)
()
(syl (a b c)
  h2
  (bi1i (a b)
    h1)))

(local theorem sylbir ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff b a))
   (h2 (im b c)))
  (im a c)
()
(syl (a b c)
  h2
  (bi2i (b a)
    h1)))

(local theorem syl5bb ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff b c))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(bitrd (a b c d)
  (a1i (a (iff b c))
    h1)
  h2))

(local theorem syl5bbr ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c b))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(syl5bb (a b c d)
  (ax_mp ((iff c b) (iff b c))
    (bicom (c b))
    h1)
  h2))

(local theorem syl6bb ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c d))
   (h2 (im a (iff b c))))
  (im a (iff b d))
()
(bitrd (a b c d)
  h2
  (a1i (a (iff c d))
    h1)))

(local theorem syl6bbr ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff d c))
   (h2 (im a (iff b c))))
  (im a (iff b d))
()
(syl6bb (a b c d)
  (ax_mp ((iff d c) (iff c d))
    (bicom (d c))
    h1)
  h2))

(local theorem syl5bi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff b c))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syl5 (a b c d)
  (ax_mp ((iff b c) (im b c))
    (bi1 (b c))
    h1)
  h2))

(local theorem syl5bir ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c b))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syl5bi (a b c d)
  (ax_mp ((iff c b) (iff b c))
    (bicom (c b))
    h1)
  h2))

(local theorem syl6ib ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c d))
   (h2 (im a (im b c))))
  (im a (im b d))
()
(syl6 (a b c d)
  (ax_mp ((iff c d) (im c d))
    (bi1 (c d))
    h1)
  h2))

(local theorem syl6ibr ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff d c))
   (h2 (im a (im b c))))
  (im a (im b d))
()
(syl6 (a b c d)
  (ax_mp ((iff d c) (im c d))
    (bi2 (d c))
    h1)
  h2))

(local theorem syl5ibrcom ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im c (iff b d)))
   (h2 (im a d)))
  (im a (im c b))
()
(com12 (c a b)
  (syl5 (c a d b)
    h2
    (bi2d (c b d)
      h1))))

(local theorem sylbid ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syld (a b c d)
  (bi1d (a b c)
    h1)
  h2))

(local theorem sylibd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (iff c d))))
  (im a (im b d))
()
(syld (a b c d)
  h1
  (bi1d (a c d)
    h2)))

(local theorem sylbird ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff c b)))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syld (a b c d)
  (bi2d (a c b)
    h1)
  h2))

(local theorem sylibrd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (iff d c))))
  (im a (im b d))
()
(syld (a b c d)
  h1
  (bi2d (a d c)
    h2)))

(local theorem bitr3g ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (iff b d))
   (h2 (iff c e))
   (h (im a (iff b c))))
  (im a (iff d e))
()
(syl5bb (a d b e)
  (ax_mp ((iff b d) (iff d b))
    (bicom (b d))
    h1)
  (syl6bb (a b c e)
    h2
    h)))

(local theorem bitr4g ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (iff d b))
   (h2 (iff e c))
   (h (im a (iff b c))))
  (im a (iff d e))
()
(syl5bb (a d b e)
  h1
  (syl6bb (a b c e)
    (ax_mp ((iff e c) (iff c e))
      (bicom (e c))
      h2)
    h)))

(local theorem bitr3gi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff a c))
   (h2 (iff b d))
   (h (iff a b)))
  (iff c d)
()
(ax_mp ((iff a d) (iff c d))
  (ax_mp ((iff a c) (im (iff a d) (iff c d)))
    (bitr3 (c a d))
    h1)
  (ax_mp ((iff b d) (iff a d))
    (ax_mp ((iff a b) (im (iff b d) (iff a d)))
      (bitr (a b d))
      h)
    h2)))

(local theorem bitr4gi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c a))
   (h2 (iff d b))
   (h (iff a b)))
  (iff c d)
()
(ax_mp ((iff a d) (iff c d))
  (ax_mp ((iff c a) (im (iff a d) (iff c d)))
    (bitr (c a d))
    h1)
  (ax_mp ((iff d b) (iff a d))
    (ax_mp ((iff a b) (im (iff d b) (iff a d)))
      (bitr4 (a b d))
      h)
    h2)))

(local theorem impbi ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im (an a b) c)
()
(imp (a b c)
  (bi1d (a b c)
    h)))

(local theorem impbir ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff c b))))
  (im (an a b) c)
()
(imp (a b c)
  (bi2d (a c b)
    h)))

(local theorem ancomb ((a wff ()) (b wff ())) ()
  (iff (an a b) (an b a))
()
(ibii ((an a b) (an b a))
  (ancom (a b))
  (ancom (b a))))

(local theorem anass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an (an a b) c) (an a (an b c)))
()
(ibii ((an (an a b) c) (an a (an b c)))
  (iand ((an (an a b) c) a (an b c))
    (anll (a b c))
    (ax_mp ((im (an a b) b) (im (an (an a b) c) (an b c)))
      (anim1 ((an a b) b c))
      (anr (a b))))
  (iand ((an a (an b c)) (an a b) c)
    (ax_mp ((im (an b c) b) (im (an a (an b c)) (an a b)))
      (anim2 (a (an b c) b))
      (anl (b c)))
    (anrr (a b c)))))

(local theorem bian2a ((a wff ()) (b wff ())) ()
  (im (im a b) (iff (an a b) a))
()
(ibid ((im a b) (an a b) a)
  (a1i ((im a b) (im (an a b) a))
    (anl (a b)))
  (a2i (a b (an a b))
    (ian (a b)))))

(local theorem bian1a ((a wff ()) (b wff ())) ()
  (im (im b a) (iff (an a b) b))
()
(syl5bb ((im b a) (an a b) (an b a) b)
  (ancomb (a b))
  (bian2a (b a))))

(local theorem bian1 ((a wff ()) (b wff ())) ()
  (im a (iff (an a b) b))
()
(syl (a (im b a) (iff (an a b) b))
  (bian1a (a b))
  (ax_1 (a b))))

(local theorem bian2 ((a wff ()) (b wff ())) ()
  (im b (iff (an a b) a))
()
(syl (b (im a b) (iff (an a b) a))
  (bian2a (a b))
  (ax_1 (b a))))

(local theorem bibi1 ((a wff ()) (b wff ())) ()
  (im a (iff (iff a b) b))
()
(ibid (a (iff a b) b)
  (com12 ((iff a b) a b)
    (bi1 (a b)))
  (bith (a b))))

(local theorem bibi2 ((a wff ()) (b wff ())) ()
  (im b (iff (iff a b) a))
()
(syl5bb (b (iff a b) (iff b a) a)
  (bicomb (a b))
  (bibi1 (b a))))

(local theorem noteq ((a wff ()) (b wff ())) ()
  (im (iff a b) (iff (not a) (not b)))
()
(con3b (a b)))

(local theorem noteqi ((a wff ()) (b wff ()))
  ((h (iff a b)))
  (iff (not a) (not b))
()
(ax_mp ((iff a b) (iff (not a) (not b)))
  (noteq (a b))
  h))

(local theorem noteqd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (iff (not b) (not c)))
()
(syl (a (iff b c) (iff (not b) (not c)))
  (noteq (b c))
  h))

(local theorem imeqd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d e))))
  (im a (iff (im b d) (im c e)))
()
(ibid (a (im b d) (im c e))
  (imimd (a c b d e)
    (bi2d (a b c)
      h1)
    (bi1d (a d e)
      h2))
  (imimd (a b c e d)
    (bi1d (a b c)
      h1)
    (bi2d (a d e)
      h2))))

(local theorem bibin1 ((a wff ()) (b wff ())) ()
  (im (not a) (iff (iff a b) (not b)))
()
(ibid ((not a) (iff a b) (not b))
  (com12 ((iff a b) (not a) (not b))
    (bi1d ((iff a b) (not a) (not b))
      (noteq (a b))))
  (binth (a b))))

(local theorem bibin2 ((a wff ()) (b wff ())) ()
  (im (not b) (iff (iff a b) (not a)))
()
(syl5bb ((not b) (iff a b) (iff b a) (not a))
  (bicomb (a b))
  (bibin1 (b a))))

(local theorem imeq1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff b c))))
  (im a (iff (im b d) (im c d)))
()
(imeqd (a b c d d)
  h
  (biidd (a d))))

(local theorem imeq2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff c d))))
  (im a (iff (im b c) (im b d)))
()
(imeqd (a b b c d)
  (biidd (a b))
  h))

(local theorem imeq1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff a b)))
  (iff (im a c) (im b c))
()
(ax_mp ((iff a b) (iff (im a c) (im b c)))
  (imeq1d ((iff a b) a b c)
    (id ((iff a b))))
  h))

(local theorem imeq2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff b c)))
  (iff (im a b) (im a c))
()
(ax_mp ((iff b c) (iff (im a b) (im a c)))
  (imeq2d ((iff b c) a b c)
    (id ((iff b c))))
  h))

(local theorem imeqi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff a b))
   (h2 (iff c d)))
  (iff (im a c) (im b d))
()
(ax_mp ((iff (im b c) (im b d)) (iff (im a c) (im b d)))
  (ax_mp ((iff (im a c) (im b c)) (im (iff (im b c) (im b d)) (iff (im a c) (im b d))))
    (bitr ((im a c) (im b c) (im b d)))
    (imeq1i (a b c)
      h1))
  (imeq2i (b c d)
    h2)))

(local theorem aneqd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d e))))
  (im a (iff (an b d) (an c e)))
()
(ibid (a (an b d) (an c e))
  (animd (a b c d e)
    (bi1d (a b c)
      h1)
    (bi1d (a d e)
      h2))
  (animd (a c b e d)
    (bi2d (a b c)
      h1)
    (bi2d (a d e)
      h2))))

(local theorem imeq2a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (iff b c)) (iff (im a b) (im a c)))
()
(ibid ((im a (iff b c)) (im a b) (im a c))
  (a2d ((im a (iff b c)) a b c)
    (imim2i (a (iff b c) (im b c))
      (bi1 (b c))))
  (a2d ((im a (iff b c)) a c b)
    (imim2i (a (iff b c) (im c b))
      (bi2 (b c))))))

(local theorem imeq1a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im (not c) (iff a b)) (iff (im a c) (im b c)))
()
(bitr4g ((im (not c) (iff a b)) (im (not c) (not a)) (im (not c) (not b)) (im a c) (im b c))
  (con3bi (a c))
  (con3bi (b c))
  (syl ((im (not c) (iff a b)) (im (not c) (iff (not a) (not b))) (iff (im (not c) (not a)) (im (not c) (not b))))
    (imeq2a ((not c) (not a) (not b)))
    (imim2i ((not c) (iff a b) (iff (not a) (not b)))
      (noteq (a b))))))

(local theorem imeq2da ((G wff ()) (a wff ()) (b wff ()) (c wff ()))
  ((h (im (an G a) (iff b c))))
  (im G (iff (im a b) (im a c)))
()
(syl (G (im a (iff b c)) (iff (im a b) (im a c)))
  (imeq2a (a b c))
  (exp (G a (iff b c))
    h)))

(local theorem aneq1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff b c))))
  (im a (iff (an b d) (an c d)))
()
(aneqd (a b c d d)
  h
  (biidd (a d))))

(local theorem aneq2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff c d))))
  (im a (iff (an b c) (an b d)))
()
(aneqd (a b b c d)
  (biidd (a b))
  h))

(local theorem aneq ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (iff a b) (im (iff c d) (iff (an a c) (an b d))))
()
(exp ((iff a b) (iff c d) (iff (an a c) (an b d)))
  (aneqd ((an (iff a b) (iff c d)) a b c d)
    (anl ((iff a b) (iff c d)))
    (anr ((iff a b) (iff c d))))))

(local theorem aneq1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff a b)))
  (iff (an a c) (an b c))
()
(ax_mp ((iff a b) (iff (an a c) (an b c)))
  (aneq1d ((iff a b) a b c)
    (id ((iff a b))))
  h))

(local theorem aneq2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff b c)))
  (iff (an a b) (an a c))
()
(ax_mp ((iff b c) (iff (an a b) (an a c)))
  (aneq2d ((iff b c) a b c)
    (id ((iff b c))))
  h))

(local theorem aneq2a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (iff b c)) (iff (an a b) (an a c)))
()
(ibid ((im a (iff b c)) (an a b) (an a c))
  (syl ((im a (iff b c)) (im a (im b c)) (im (an a b) (an a c)))
    (anim2a (a b c))
    (imim2i (a (iff b c) (im b c))
      (bi1 (b c))))
  (syl ((im a (iff b c)) (im a (im c b)) (im (an a c) (an a b)))
    (anim2a (a c b))
    (imim2i (a (iff b c) (im c b))
      (bi2 (b c))))))

(local theorem aneq1a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im c (iff a b)) (iff (an a c) (an b c)))
()
(syl5bb ((im c (iff a b)) (an a c) (an c a) (an b c))
  (ancomb (a c))
  (syl6bb ((im c (iff a b)) (an c a) (an c b) (an b c))
    (ancomb (c b))
    (aneq2a (c a b)))))

(local theorem aneq1da ((G wff ()) (a wff ()) (b wff ()) (c wff ()))
  ((h (im (an G c) (iff a b))))
  (im G (iff (an a c) (an b c)))
()
(syl (G (im c (iff a b)) (iff (an a c) (an b c)))
  (aneq1a (a b c))
  (exp (G c (iff a b))
    h)))

(local theorem aneq2da ((G wff ()) (a wff ()) (b wff ()) (c wff ()))
  ((h (im (an G a) (iff b c))))
  (im G (iff (an a b) (an a c)))
()
(syl (G (im a (iff b c)) (iff (an a b) (an a c)))
  (aneq2a (a b c))
  (exp (G a (iff b c))
    h)))

(local theorem anlass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an a (an b c)) (an b (an a c)))
()
(ax_mp ((iff (an (an a b) c) (an b (an a c))) (iff (an a (an b c)) (an b (an a c))))
  (ax_mp ((iff (an (an a b) c) (an a (an b c))) (im (iff (an (an a b) c) (an b (an a c))) (iff (an a (an b c)) (an b (an a c)))))
    (bitr3 ((an a (an b c)) (an (an a b) c) (an b (an a c))))
    (anass (a b c)))
  (ax_mp ((iff (an (an b a) c) (an b (an a c))) (iff (an (an a b) c) (an b (an a c))))
    (ax_mp ((iff (an (an a b) c) (an (an b a) c)) (im (iff (an (an b a) c) (an b (an a c))) (iff (an (an a b) c) (an b (an a c)))))
      (bitr ((an (an a b) c) (an (an b a) c) (an b (an a c))))
      (aneq1i ((an a b) (an b a) c)
        (ancomb (a b))))
    (anass (b a c)))))

(local theorem anrass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an (an a b) c) (an (an a c) b))
()
(ax_mp ((iff (an a (an b c)) (an (an a c) b)) (iff (an (an a b) c) (an (an a c) b)))
  (ax_mp ((iff (an (an a b) c) (an a (an b c))) (im (iff (an a (an b c)) (an (an a c) b)) (iff (an (an a b) c) (an (an a c) b))))
    (bitr ((an (an a b) c) (an a (an b c)) (an (an a c) b)))
    (anass (a b c)))
  (ax_mp ((iff (an (an a c) b) (an a (an c b))) (iff (an a (an b c)) (an (an a c) b)))
    (ax_mp ((iff (an a (an b c)) (an a (an c b))) (im (iff (an (an a c) b) (an a (an c b))) (iff (an a (an b c)) (an (an a c) b))))
      (bitr4 ((an a (an b c)) (an a (an c b)) (an (an a c) b)))
      (aneq2i (a (an b c) (an c b))
        (ancomb (b c))))
    (anass (a c b)))))

(local theorem an4 ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (iff (an (an a b) (an c d)) (an (an a c) (an b d)))
()
(ax_mp ((iff (an (an a c) (an b d)) (an a (an b (an c d)))) (iff (an (an a b) (an c d)) (an (an a c) (an b d))))
  (ax_mp ((iff (an (an a b) (an c d)) (an a (an b (an c d)))) (im (iff (an (an a c) (an b d)) (an a (an b (an c d)))) (iff (an (an a b) (an c d)) (an (an a c) (an b d)))))
    (bitr4 ((an (an a b) (an c d)) (an a (an b (an c d))) (an (an a c) (an b d))))
    (anass (a b (an c d))))
  (ax_mp ((iff (an a (an b (an c d))) (an a (an c (an b d)))) (iff (an (an a c) (an b d)) (an a (an b (an c d)))))
    (ax_mp ((iff (an (an a c) (an b d)) (an a (an c (an b d)))) (im (iff (an a (an b (an c d))) (an a (an c (an b d)))) (iff (an (an a c) (an b d)) (an a (an b (an c d))))))
      (bitr4 ((an (an a c) (an b d)) (an a (an c (an b d))) (an a (an b (an c d)))))
      (anass (a c (an b d))))
    (aneq2i (a (an b (an c d)) (an c (an b d)))
      (anlass (b c d))))))

(local theorem anroti ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (an b d))))
  (im (an a c) (an (an b c) d))
()
(sylib ((an a c) (an (an b d) c) (an (an b c) d))
  (anrass (b d c))
  (ax_mp ((im a (an b d)) (im (an a c) (an (an b d) c)))
    (anim1 (a (an b d) c))
    h)))

(local theorem anrotri ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an b d) a)))
  (im (an (an b c) d) (an a c))
()
(sylbi ((an (an b c) d) (an (an b d) c) (an a c))
  (anrass (b c d))
  (ax_mp ((im (an b d) a) (im (an (an b d) c) (an a c)))
    (anim1 ((an b d) a c))
    h)))

(local theorem bian11i ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (iff a (an b c))))
  (iff (an a d) (an b (an c d)))
()
(ax_mp ((iff (an (an b c) d) (an b (an c d))) (iff (an a d) (an b (an c d))))
  (ax_mp ((iff (an a d) (an (an b c) d)) (im (iff (an (an b c) d) (an b (an c d))) (iff (an a d) (an b (an c d)))))
    (bitr ((an a d) (an (an b c) d) (an b (an c d))))
    (aneq1i (a (an b c) d)
      h))
  (anass (b c d))))

(local theorem bian21i ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (iff a (an b c))))
  (iff (an a d) (an (an b d) c))
()
(ax_mp ((iff (an (an b c) d) (an (an b d) c)) (iff (an a d) (an (an b d) c)))
  (ax_mp ((iff (an a d) (an (an b c) d)) (im (iff (an (an b c) d) (an (an b d) c)) (iff (an a d) (an (an b d) c))))
    (bitr ((an a d) (an (an b c) d) (an (an b d) c)))
    (aneq1i (a (an b c) d)
      h))
  (anrass (b c d))))

(local theorem bian12i ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (iff a (an b c))))
  (iff (an d a) (an b (an d c)))
()
(ax_mp ((iff (an d (an b c)) (an b (an d c))) (iff (an d a) (an b (an d c))))
  (ax_mp ((iff (an d a) (an d (an b c))) (im (iff (an d (an b c)) (an b (an d c))) (iff (an d a) (an b (an d c)))))
    (bitr ((an d a) (an d (an b c)) (an b (an d c))))
    (aneq2i (d a (an b c))
      h))
  (anlass (d b c))))

(local theorem bian22i ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (iff a (an b c))))
  (iff (an d a) (an (an d b) c))
()
(ax_mp ((iff (an (an d b) c) (an d (an b c))) (iff (an d a) (an (an d b) c)))
  (ax_mp ((iff (an d a) (an d (an b c))) (im (iff (an (an d b) c) (an d (an b c))) (iff (an d a) (an (an d b) c))))
    (bitr4 ((an d a) (an d (an b c)) (an (an d b) c)))
    (aneq2i (d a (an b c))
      h))
  (anass (d b c))))

(local theorem bian11d ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im G (iff a (an b c)))))
  (im G (iff (an a d) (an b (an c d))))
()
(syl6bb (G (an a d) (an (an b c) d) (an b (an c d)))
  (anass (b c d))
  (aneq1d (G a (an b c) d)
    h)))

(local theorem bian21d ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im G (iff a (an b c)))))
  (im G (iff (an a d) (an (an b d) c)))
()
(syl6bb (G (an a d) (an (an b c) d) (an (an b d) c))
  (anrass (b c d))
  (aneq1d (G a (an b c) d)
    h)))

(local theorem bian12d ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im G (iff a (an b c)))))
  (im G (iff (an d a) (an b (an d c))))
()
(syl6bb (G (an d a) (an d (an b c)) (an b (an d c)))
  (anlass (d b c))
  (aneq2d (G d a (an b c))
    h)))

(local theorem bian22d ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im G (iff a (an b c)))))
  (im G (iff (an d a) (an (an d b) c)))
()
(syl6bbr (G (an d a) (an d (an b c)) (an (an d b) c))
  (anass (d b c))
  (aneq2d (G d a (an b c))
    h)))

(local theorem bian11da ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an G d) (iff a (an b c)))))
  (im G (iff (an a d) (an b (an c d))))
()
(syl6bb (G (an a d) (an (an b c) d) (an b (an c d)))
  (anass (b c d))
  (aneq1da (G a (an b c) d)
    h)))

(local theorem bian21da ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an G d) (iff a (an b c)))))
  (im G (iff (an a d) (an (an b d) c)))
()
(syl6bb (G (an a d) (an (an b c) d) (an (an b d) c))
  (anrass (b c d))
  (aneq1da (G a (an b c) d)
    h)))

(local theorem bian12da ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an G d) (iff a (an b c)))))
  (im G (iff (an d a) (an b (an d c))))
()
(syl6bb (G (an d a) (an d (an b c)) (an b (an d c)))
  (anlass (d b c))
  (aneq2da (G d a (an b c))
    h)))

(local theorem bian22da ((G wff ()) (a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an G d) (iff a (an b c)))))
  (im G (iff (an d a) (an (an d b) c)))
()
(syl6bbr (G (an d a) (an d (an b c)) (an (an d b) c))
  (anass (d b c))
  (aneq2da (G d a (an b c))
    h)))

(local theorem anidm ((a wff ())) ()
  (iff (an a a) a)
()
(:let H1 (id (a))
(ibii ((an a a) a)
  (anl (a a))
  (iand (a a a)
    H1
    H1))))

(local theorem anandi ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an a (an b c)) (an (an a b) (an a c)))
()
(ax_mp ((iff (an (an a a) (an b c)) (an (an a b) (an a c))) (iff (an a (an b c)) (an (an a b) (an a c))))
  (ax_mp ((iff (an (an a a) (an b c)) (an a (an b c))) (im (iff (an (an a a) (an b c)) (an (an a b) (an a c))) (iff (an a (an b c)) (an (an a b) (an a c)))))
    (bitr3 ((an a (an b c)) (an (an a a) (an b c)) (an (an a b) (an a c))))
    (aneq1i ((an a a) a (an b c))
      (anidm (a))))
  (an4 (a a b c))))

(local theorem anandir ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an (an a b) c) (an (an a c) (an b c)))
()
(ax_mp ((iff (an (an a b) (an c c)) (an (an a c) (an b c))) (iff (an (an a b) c) (an (an a c) (an b c))))
  (ax_mp ((iff (an (an a b) (an c c)) (an (an a b) c)) (im (iff (an (an a b) (an c c)) (an (an a c) (an b c))) (iff (an (an a b) c) (an (an a c) (an b c)))))
    (bitr3 ((an (an a b) c) (an (an a b) (an c c)) (an (an a c) (an b c))))
    (aneq2i ((an a b) (an c c) c)
      (anidm (c))))
  (an4 (a b c c))))

(local theorem imandi ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (im a (an b c)) (an (im a b) (im a c)))
()
(ibii ((im a (an b c)) (an (im a b) (im a c)))
  (iand ((im a (an b c)) (im a b) (im a c))
    (imim2i (a (an b c) b)
      (anl (b c)))
    (imim2i (a (an b c) c)
      (anr (b c))))
  (com12 (a (an (im a b) (im a c)) (an b c))
    (animd (a (im a b) b (im a c) c)
      (mpcom (a b))
      (mpcom (a c))))))

(local theorem imancom ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an a (im b c)) (im b (an a c)))
()
(com12 (b (an a (im b c)) (an a c))
  (anim2d (b a (im b c) c)
    (mpcom (b c)))))

(local theorem rbida ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im (an a c) b))
   (h2 (im (an a d) b))
   (h (im (an a b) (iff c d))))
  (im a (iff c d))
()
(bitr3d (a c (an c b) d)
  (syla (a c b (iff (an c b) c))
    (bian2a (c b))
    h1)
  (bitrd (a (an c b) (an d b) d)
    (syla (a b (iff c d) (iff (an c b) (an d b)))
      (aneq1a (c d b))
      h)
    (syla (a d b (iff (an d b) d))
      (bian2a (d b))
      h2))))

(local theorem rbid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im b a))
   (h2 (im c a))
   (h (im a (iff b c))))
  (iff b c)
()
(ax_mp ((iff (an b a) c) (iff b c))
  (ax_mp ((iff (an b a) b) (im (iff (an b a) c) (iff b c)))
    (bitr3 (b (an b a) c))
    (ax_mp ((im b a) (iff (an b a) b))
      (bian2a (b a))
      h1))
  (ax_mp ((iff (an c a) c) (iff (an b a) c))
    (ax_mp ((iff (an b a) (an c a)) (im (iff (an c a) c) (iff (an b a) c)))
      (bitr ((an b a) (an c a) c))
      (ax_mp ((im a (iff b c)) (iff (an b a) (an c a)))
        (aneq1a (b c a))
        h))
    (ax_mp ((im c a) (iff (an c a) c))
      (bian2a (c a))
      h2))))

(local theorem bieqd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d e))))
  (im a (iff (iff b d) (iff c e)))
()
(:conv (im a (iff (iff b d) (iff c e)))
  (im
    a
    (iff
      (:unfold iff (b d) ()
        (an (im b d) (im d b)))
      (:unfold iff (c e) ()
        (an (im c e) (im e c)))))
  (aneqd (a (im b d) (im c e) (im d b) (im e c))
    (imeqd (a b c d e)
      h1
      h2)
    (imeqd (a d e b c)
      h2
      h1))))

(local theorem bieq1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff b c))))
  (im a (iff (iff b d) (iff c d)))
()
(bieqd (a b c d d)
  h
  (biidd (a d))))

(local theorem bieq2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff c d))))
  (im a (iff (iff b c) (iff b d)))
()
(bieqd (a b b c d)
  (biidd (a b))
  h))

(local theorem bieq ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (iff a b) (im (iff c d) (iff (iff a c) (iff b d))))
()
(exp ((iff a b) (iff c d) (iff (iff a c) (iff b d)))
  (bieqd ((an (iff a b) (iff c d)) a b c d)
    (anl ((iff a b) (iff c d)))
    (anr ((iff a b) (iff c d))))))

(local theorem bieq1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff a b) (iff (iff a c) (iff b c)))
()
(bieq1d ((iff a b) a b c)
  (id ((iff a b)))))

(local theorem bieq2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff b c) (iff (iff a b) (iff a c)))
()
(bieq2d ((iff b c) a b c)
  (id ((iff b c)))))

(local theorem impexp ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (im (an a b) c) (im a (im b c)))
()
(ibii ((im (an a b) c) (im a (im b c)))
  (exp ((im (an a b) c) a (im b c))
    (exp ((an (im (an a b) c) a) b c)
      (mpd ((an (an (im (an a b) c) a) b) (an a b) c)
        (ax_mp ((im (an (im (an a b) c) a) a) (im (an (an (im (an a b) c) a) b) (an a b)))
          (anim1 ((an (im (an a b) c) a) a b))
          (anr ((im (an a b) c) a)))
        (anll ((im (an a b) c) a b)))))
  (exp ((im a (im b c)) (an a b) c)
    (mpd ((an (im a (im b c)) (an a b)) b c)
      (anrr ((im a (im b c)) a b))
      (mpd ((an (im a (im b c)) (an a b)) a (im b c))
        (anrl ((im a (im b c)) a b))
        (anl ((im a (im b c)) (an a b))))))))

(local theorem impd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b (im c d)))))
  (im a (im (an b c) d))
()
(sylibr (a (im b (im c d)) (im (an b c) d))
  (impexp (b c d))
  h))

(local theorem expd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im (an b c) d))))
  (im a (im b (im c d)))
()
(sylib (a (im (an b c) d) (im b (im c d)))
  (impexp (b c d))
  h))

(local theorem com12b ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (im a (im b c)) (im b (im a c)))
()
(ibii ((im a (im b c)) (im b (im a c)))
  (com23 ((im a (im b c)) a b c)
    (id ((im a (im b c)))))
  (com23 ((im b (im a c)) b a c)
    (id ((im b (im a c)))))))

(def or ((a wff ()) (b wff ())) (wff ())
()
(im (not a) b))

(local theorem oreqd ((_G wff ()) (_a1 wff ()) (_a2 wff ()) (_b1 wff ()) (_b2 wff ()))
  ((_ah (im _G (iff _a1 _a2)))
   (_bh (im _G (iff _b1 _b2))))
  (im _G (iff (or _a1 _b1) (or _a2 _b2)))
()
(:conv (im _G (iff (or _a1 _b1) (or _a2 _b2)))
  (im
    _G
    (iff
      (:unfold or (_a1 _b1) ()
        (im (not _a1) _b1))
      (:unfold or (_a2 _b2) ()
        (im (not _a2) _b2))))
  (imeqd (_G (not _a1) (not _a2) _b1 _b2)
    (noteqd (_G _a1 _a2)
      _ah)
    _bh)))

(local theorem oreq ((_a1 wff ()) (_a2 wff ()) (_b1 wff ()) (_b2 wff ())) ()
  (im (iff _a1 _a2) (im (iff _b1 _b2) (iff (or _a1 _b1) (or _a2 _b2))))
()
(exp ((iff _a1 _a2) (iff _b1 _b2) (iff (or _a1 _b1) (or _a2 _b2)))
  (oreqd ((an (iff _a1 _a2) (iff _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((iff _a1 _a2) (iff _b1 _b2)))
    (anr ((iff _a1 _a2) (iff _b1 _b2))))))

(local theorem oreq1d ((_G wff ()) (_a1 wff ()) (_a2 wff ()) (b wff ()))
  ((_h (im _G (iff _a1 _a2))))
  (im _G (iff (or _a1 b) (or _a2 b)))
()
(oreqd (_G _a1 _a2 b b)
  _h
  (biidd (_G b))))

(local theorem oreq1 ((_a1 wff ()) (_a2 wff ()) (b wff ())) ()
  (im (iff _a1 _a2) (iff (or _a1 b) (or _a2 b)))
()
(oreq1d ((iff _a1 _a2) _a1 _a2 b)
  (id ((iff _a1 _a2)))))

(local theorem oreq2d ((_G wff ()) (a wff ()) (_b1 wff ()) (_b2 wff ()))
  ((_h (im _G (iff _b1 _b2))))
  (im _G (iff (or a _b1) (or a _b2)))
()
(oreqd (_G a a _b1 _b2)
  (biidd (_G a))
  _h))

(local theorem oreq2 ((a wff ()) (_b1 wff ()) (_b2 wff ())) ()
  (im (iff _b1 _b2) (iff (or a _b1) (or a _b2)))
()
(oreq2d ((iff _b1 _b2) a _b1 _b2)
  (id ((iff _b1 _b2)))))

(local theorem orl ((a wff ()) (b wff ())) ()
  (im a (or a b))
()
(:conv (im a (or a b))
  (im
    a
    (:unfold or (a b) ()
      (im (not a) b)))
  (absurdr (a b))))

(local theorem orr ((a wff ()) (b wff ())) ()
  (im b (or a b))
()
(:conv (im b (or a b))
  (im
    b
    (:unfold or (a b) ()
      (im (not a) b)))
  (ax_1 (b (not a)))))

(local theorem eori ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a c))
   (h2 (im b c)))
  (im (or a b) c)
()
(casesd ((or a b) a c)
  (a1i ((or a b) (im a c))
    h1)
  (:conv (im (or a b) (im (not a) c))
    (im
      (:unfold or (a b) ()
        (im (not a) b))
      (im (not a) c))
    (imim2i ((not a) b c)
      h2))))

(local theorem eord ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (im b d)))
   (h2 (im a (im c d))))
  (im a (im (or b c) d))
()
(com12 ((or b c) a d)
  (eori (b c (im a d))
    (com12 (a b d)
      h1)
    (com12 (a c d)
      h2))))

(local theorem eorda ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im (an a b) d))
   (h2 (im (an a c) d)))
  (im a (im (or b c) d))
()
(eord (a b c d)
  (exp (a b d)
    h1)
  (exp (a c d)
    h2)))

(local theorem orld ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a b)))
  (im a (or b c))
()
(syl (a b (or b c))
  (orl (b c))
  h))

(local theorem orrd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a c)))
  (im a (or b c))
()
(syl (a c (or b c))
  (orr (b c))
  h))

(local theorem eor ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a c) (im (im b c) (im (or a b) c)))
()
(exp ((im a c) (im b c) (im (or a b) c))
  (eord ((an (im a c) (im b c)) a b c)
    (anl ((im a c) (im b c)))
    (anr ((im a c) (im b c))))))

(local theorem orimd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im d e))))
  (im a (im (or b d) (or c e)))
()
(eord (a b d (or c e))
  (syl6 (a b c (or c e))
    (orl (c e))
    h1)
  (syl6 (a d e (or c e))
    (orr (c e))
    h2)))

(local theorem orim1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b c))))
  (im a (im (or b d) (or c d)))
()
(orimd (a b c d d)
  h
  (idd (a d))))

(local theorem orim2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im c d))))
  (im a (im (or b c) (or b d)))
()
(orimd (a b b c d)
  (idd (a b))
  h))

(local theorem orim1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a b) (im (or a c) (or b c)))
()
(orim1d ((im a b) a b c)
  (id ((im a b)))))

(local theorem orim2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im b c) (im (or a b) (or a c)))
()
(orim2d ((im b c) a b c)
  (id ((im b c)))))

(local theorem oreq1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff a b)))
  (iff (or a c) (or b c))
()
(ax_mp ((iff a b) (iff (or a c) (or b c)))
  (oreq1d ((iff a b) a b c)
    (id ((iff a b))))
  h))

(local theorem oreq2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff b c)))
  (iff (or a b) (or a c))
()
(ax_mp ((iff b c) (iff (or a b) (or a c)))
  (oreq2d ((iff b c) a b c)
    (id ((iff b c))))
  h))

(local theorem orim ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (im a b) (im (im c d) (im (or a c) (or b d))))
()
(exp ((im a b) (im c d) (im (or a c) (or b d)))
  (syld ((an (im a b) (im c d)) (or a c) (or b c) (or b d))
    (anwl ((im a b) (im c d) (im (or a c) (or b c)))
      (orim1 (a b c)))
    (anwr ((im a b) (im c d) (im (or b c) (or b d)))
      (orim2 (b c d))))))

(local theorem oreqi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff a b))
   (h2 (iff c d)))
  (iff (or a c) (or b d))
()
(ax_mp ((iff (or b c) (or b d)) (iff (or a c) (or b d)))
  (ax_mp ((iff (or a c) (or b c)) (im (iff (or b c) (or b d)) (iff (or a c) (or b d))))
    (bitr ((or a c) (or b c) (or b d)))
    (oreq1i (a b c)
      h1))
  (oreq2i (b c d)
    h2)))

(local theorem orcom ((a wff ()) (b wff ())) ()
  (im (or a b) (or b a))
()
(:conv (im (or a b) (or b a))
  (im
    (:unfold or (a b) ()
      (im (not a) b))
    (:unfold or (b a) ()
      (im (not b) a)))
  (con1 (a b))))

(local theorem orcomb ((a wff ()) (b wff ())) ()
  (iff (or a b) (or b a))
()
(ibii ((or a b) (or b a))
  (orcom (a b))
  (orcom (b a))))

(local theorem or12 ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (or a (or b c)) (or b (or a c)))
()
(ax_mp ((iff (im (an (not a) (not b)) c) (or b (or a c))) (iff (or a (or b c)) (or b (or a c))))
  (ax_mp ((iff (im (an (not a) (not b)) c) (or a (or b c))) (im (iff (im (an (not a) (not b)) c) (or b (or a c))) (iff (or a (or b c)) (or b (or a c)))))
    (bitr3 ((or a (or b c)) (im (an (not a) (not b)) c) (or b (or a c))))
    (:conv (iff (im (an (not a) (not b)) c) (or a (or b c)))
      (iff
        (im (an (not a) (not b)) c)
        (:unfold or (a (or b c)) ()
          (im
            (not a)
            (:unfold or (b c) ()
              (im (not b) c)))))
      (impexp ((not a) (not b) c))))
  (ax_mp ((iff (im (an (not b) (not a)) c) (or b (or a c))) (iff (im (an (not a) (not b)) c) (or b (or a c))))
    (ax_mp ((iff (im (an (not a) (not b)) c) (im (an (not b) (not a)) c)) (im (iff (im (an (not b) (not a)) c) (or b (or a c))) (iff (im (an (not a) (not b)) c) (or b (or a c)))))
      (bitr ((im (an (not a) (not b)) c) (im (an (not b) (not a)) c) (or b (or a c))))
      (imeq1i ((an (not a) (not b)) (an (not b) (not a)) c)
        (ancomb ((not a) (not b)))))
    (:conv (iff (im (an (not b) (not a)) c) (or b (or a c)))
      (iff
        (im (an (not b) (not a)) c)
        (:unfold or (b (or a c)) ()
          (im
            (not b)
            (:unfold or (a c) ()
              (im (not a) c)))))
      (impexp ((not b) (not a) c))))))

(local theorem orass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (or (or a b) c) (or a (or b c)))
()
(ax_mp ((iff (or c (or a b)) (or a (or b c))) (iff (or (or a b) c) (or a (or b c))))
  (ax_mp ((iff (or (or a b) c) (or c (or a b))) (im (iff (or c (or a b)) (or a (or b c))) (iff (or (or a b) c) (or a (or b c)))))
    (bitr ((or (or a b) c) (or c (or a b)) (or a (or b c))))
    (orcomb ((or a b) c)))
  (ax_mp ((iff (or a (or c b)) (or a (or b c))) (iff (or c (or a b)) (or a (or b c))))
    (ax_mp ((iff (or c (or a b)) (or a (or c b))) (im (iff (or a (or c b)) (or a (or b c))) (iff (or c (or a b)) (or a (or b c)))))
      (bitr ((or c (or a b)) (or a (or c b)) (or a (or b c))))
      (or12 (c a b)))
    (ax_mp ((iff (or c b) (or b c)) (iff (or a (or c b)) (or a (or b c))))
      (oreq2 (a (or c b) (or b c)))
      (orcomb (c b))))))

(local theorem or4 ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (iff (or (or a b) (or c d)) (or (or a c) (or b d)))
()
(ax_mp ((iff (or (or a c) (or b d)) (or a (or b (or c d)))) (iff (or (or a b) (or c d)) (or (or a c) (or b d))))
  (ax_mp ((iff (or (or a b) (or c d)) (or a (or b (or c d)))) (im (iff (or (or a c) (or b d)) (or a (or b (or c d)))) (iff (or (or a b) (or c d)) (or (or a c) (or b d)))))
    (bitr4 ((or (or a b) (or c d)) (or a (or b (or c d))) (or (or a c) (or b d))))
    (orass (a b (or c d))))
  (ax_mp ((iff (or a (or b (or c d))) (or a (or c (or b d)))) (iff (or (or a c) (or b d)) (or a (or b (or c d)))))
    (ax_mp ((iff (or (or a c) (or b d)) (or a (or c (or b d)))) (im (iff (or a (or b (or c d))) (or a (or c (or b d)))) (iff (or (or a c) (or b d)) (or a (or b (or c d))))))
      (bitr4 ((or (or a c) (or b d)) (or a (or c (or b d))) (or a (or b (or c d)))))
      (orass (a c (or b d))))
    (ax_mp ((iff (or b (or c d)) (or c (or b d))) (iff (or a (or b (or c d))) (or a (or c (or b d)))))
      (oreq2 (a (or b (or c d)) (or c (or b d))))
      (or12 (b c d))))))

(local theorem oridm ((a wff ())) ()
  (iff (or a a) a)
()
(:let H1 (id (a))
(ibii ((or a a) a)
  (ax_mp ((im a a) (im (or a a) a))
    (ax_mp ((im a a) (im (im a a) (im (or a a) a)))
      (eor (a a a))
      H1)
    H1)
  (orl (a a)))))

(local theorem notan2 ((a wff ()) (b wff ())) ()
  (iff (not (an a b)) (im a (not b)))
()
(ax_mp ((iff (im a (not b)) (not (an a b))) (iff (not (an a b)) (im a (not b))))
  (bicom ((im a (not b)) (not (an a b))))
  (:conv (iff (im a (not b)) (not (an a b)))
    (iff
      (im a (not b))
      (not
        (:unfold an (a b) ()
          (not (im a (not b))))))
    (notnot ((im a (not b)))))))

(local theorem notan ((a wff ()) (b wff ())) ()
  (iff (not (an a b)) (or (not a) (not b)))
()
(ax_mp ((iff (im a (not b)) (or (not a) (not b))) (iff (not (an a b)) (or (not a) (not b))))
  (ax_mp ((iff (not (an a b)) (im a (not b))) (im (iff (im a (not b)) (or (not a) (not b))) (iff (not (an a b)) (or (not a) (not b)))))
    (bitr ((not (an a b)) (im a (not b)) (or (not a) (not b))))
    (notan2 (a b)))
  (:conv (iff (im a (not b)) (or (not a) (not b)))
    (iff
      (im a (not b))
      (:unfold or ((not a) (not b)) ()
        (im (not (not a)) (not b))))
    (imeq1i (a (not (not a)) (not b))
      (notnot (a))))))

(local theorem notor ((a wff ()) (b wff ())) ()
  (iff (not (or a b)) (an (not a) (not b)))
()
(ax_mp ((iff (not (an (not a) (not b))) (or a b)) (iff (not (or a b)) (an (not a) (not b))))
  (con1b ((an (not a) (not b)) (or a b)))
  (ax_mp ((iff (or a b) (or (not (not a)) (not (not b)))) (iff (not (an (not a) (not b))) (or a b)))
    (ax_mp ((iff (not (an (not a) (not b))) (or (not (not a)) (not (not b)))) (im (iff (or a b) (or (not (not a)) (not (not b)))) (iff (not (an (not a) (not b))) (or a b))))
      (bitr4 ((not (an (not a) (not b))) (or (not (not a)) (not (not b))) (or a b)))
      (notan ((not a) (not b))))
    (oreqi (a (not (not a)) b (not (not b)))
      (notnot (a))
      (notnot (b))))))

(local theorem iman ((a wff ()) (b wff ())) ()
  (iff (im a b) (not (an a (not b))))
()
(ax_mp ((iff (not (an a (not b))) (im a (not (not b)))) (iff (im a b) (not (an a (not b)))))
  (ax_mp ((iff (im a b) (im a (not (not b)))) (im (iff (not (an a (not b))) (im a (not (not b)))) (iff (im a b) (not (an a (not b))))))
    (bitr4 ((im a b) (im a (not (not b))) (not (an a (not b)))))
    (imeq2i (a b (not (not b)))
      (notnot (b))))
  (notan2 (a (not b)))))

(local theorem imor ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (im (or a b) c) (an (im a c) (im b c)))
()
(ibii ((im (or a b) c) (an (im a c) (im b c)))
  (iand ((im (or a b) c) (im a c) (im b c))
    (imim1i (a (or a b) c)
      (orl (a b)))
    (imim1i (b (or a b) c)
      (orr (a b))))
  (imp ((im a c) (im b c) (im (or a b) c))
    (eor (a b c)))))

(local theorem andi ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an a (or b c)) (or (an a b) (an a c)))
()
(ibii ((an a (or b c)) (or (an a b) (an a c)))
  (imp (a (or b c) (or (an a b) (an a c)))
    (orimd (a b (an a b) c (an a c))
      (ian (a b))
      (ian (a c))))
  (ax_mp ((im (an a c) (an a (or b c))) (im (or (an a b) (an a c)) (an a (or b c))))
    (ax_mp ((im (an a b) (an a (or b c))) (im (im (an a c) (an a (or b c))) (im (or (an a b) (an a c)) (an a (or b c)))))
      (eor ((an a b) (an a c) (an a (or b c))))
      (ax_mp ((im b (or b c)) (im (an a b) (an a (or b c))))
        (anim2 (a b (or b c)))
        (orl (b c))))
    (ax_mp ((im c (or b c)) (im (an a c) (an a (or b c))))
      (anim2 (a c (or b c)))
      (orr (b c))))))

(local theorem andir ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an (or a b) c) (or (an a c) (an b c)))
()
(ax_mp ((iff (an c (or a b)) (or (an a c) (an b c))) (iff (an (or a b) c) (or (an a c) (an b c))))
  (ax_mp ((iff (an (or a b) c) (an c (or a b))) (im (iff (an c (or a b)) (or (an a c) (an b c))) (iff (an (or a b) c) (or (an a c) (an b c)))))
    (bitr ((an (or a b) c) (an c (or a b)) (or (an a c) (an b c))))
    (ancomb ((or a b) c)))
  (ax_mp ((iff (or (an c a) (an c b)) (or (an a c) (an b c))) (iff (an c (or a b)) (or (an a c) (an b c))))
    (ax_mp ((iff (an c (or a b)) (or (an c a) (an c b))) (im (iff (or (an c a) (an c b)) (or (an a c) (an b c))) (iff (an c (or a b)) (or (an a c) (an b c)))))
      (bitr ((an c (or a b)) (or (an c a) (an c b)) (or (an a c) (an b c))))
      (andi (c a b)))
    (oreqi ((an c a) (an a c) (an c b) (an b c))
      (ancomb (c a))
      (ancomb (c b))))))

(local theorem ordi ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (or a (an b c)) (an (or a b) (or a c)))
()
(ibii ((or a (an b c)) (an (or a b) (or a c)))
  (iand ((or a (an b c)) (or a b) (or a c))
    (ax_mp ((im (an b c) b) (im (or a (an b c)) (or a b)))
      (orim2 (a (an b c) b))
      (anl (b c)))
    (ax_mp ((im (an b c) c) (im (or a (an b c)) (or a c)))
      (orim2 (a (an b c) c))
      (anr (b c))))
  (:conv (im (an (or a b) (or a c)) (or a (an b c)))
    (im
      (an (or a b) (or a c))
      (:unfold or (a (an b c)) ()
        (im (not a) (an b c))))
    (com12 ((not a) (an (or a b) (or a c)) (an b c))
      (animd ((not a) (or a b) b (or a c) c)
        (:conv (im (not a) (im (or a b) b))
          (im
            (not a)
            (im
              (:unfold or (a b) ()
                (im (not a) b))
              b))
          (mpcom ((not a) b)))
        (:conv (im (not a) (im (or a c) c))
          (im
            (not a)
            (im
              (:unfold or (a c) ()
                (im (not a) c))
              c))
          (mpcom ((not a) c))))))))

(local theorem ordir ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (or (an a b) c) (an (or a c) (or b c)))
()
(ax_mp ((iff (or c (an a b)) (an (or a c) (or b c))) (iff (or (an a b) c) (an (or a c) (or b c))))
  (ax_mp ((iff (or (an a b) c) (or c (an a b))) (im (iff (or c (an a b)) (an (or a c) (or b c))) (iff (or (an a b) c) (an (or a c) (or b c)))))
    (bitr ((or (an a b) c) (or c (an a b)) (an (or a c) (or b c))))
    (orcomb ((an a b) c)))
  (ax_mp ((iff (an (or c a) (or c b)) (an (or a c) (or b c))) (iff (or c (an a b)) (an (or a c) (or b c))))
    (ax_mp ((iff (or c (an a b)) (an (or c a) (or c b))) (im (iff (an (or c a) (or c b)) (an (or a c) (or b c))) (iff (or c (an a b)) (an (or a c) (or b c)))))
      (bitr ((or c (an a b)) (an (or c a) (or c b)) (an (or a c) (or b c))))
      (ordi (c a b)))
    (ax_mp ((iff (or c b) (or b c)) (iff (an (or c a) (or c b)) (an (or a c) (or b c))))
      (ax_mp ((iff (or c a) (or a c)) (im (iff (or c b) (or b c)) (iff (an (or c a) (or c b)) (an (or a c) (or b c)))))
        (aneq ((or c a) (or a c) (or c b) (or b c)))
        (orcomb (c a)))
      (orcomb (c b))))))

(local theorem oreq2a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im (not a) (iff b c)) (iff (or a b) (or a c)))
()
(:conv (im (im (not a) (iff b c)) (iff (or a b) (or a c)))
  (im
    (im (not a) (iff b c))
    (iff
      (:unfold or (a b) ()
        (im (not a) b))
      (:unfold or (a c) ()
        (im (not a) c))))
  (imeq2a ((not a) b c))))

(local theorem oreq1a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im (not c) (iff a b)) (iff (or a c) (or b c)))
()
(syl5bb ((im (not c) (iff a b)) (or a c) (or c a) (or b c))
  (orcomb (a c))
  (syl6bb ((im (not c) (iff a b)) (or c a) (or c b) (or b c))
    (orcomb (c b))
    (oreq2a (c a b)))))

(local theorem biim1a ((a wff ()) (b wff ())) ()
  (im (im (not a) b) (iff (im a b) b))
()
(ibid ((im (not a) b) (im a b) b)
  (exp ((im (not a) b) (im a b) b)
    (casesd ((an (im (not a) b) (im a b)) a b)
      (anr ((im (not a) b) (im a b)))
      (anl ((im (not a) b) (im a b)))))
  (a1i ((im (not a) b) (im b (im a b)))
    (ax_1 (b a)))))

(local theorem biim2a ((a wff ()) (b wff ())) ()
  (im (im b (not a)) (iff (im a b) (not a)))
()
(ibid ((im b (not a)) (im a b) (not a))
  (exp ((im b (not a)) (im a b) (not a))
    (syl ((an (im b (not a)) (im a b)) (im a (not a)) (not a))
      (inot (a))
      (imp ((im b (not a)) (im a b) (im a (not a)))
        (imim2 (a b (not a))))))
  (a1i ((im b (not a)) (im (not a) (im a b)))
    (absurd (a b)))))

(local theorem bior1a ((a wff ()) (b wff ())) ()
  (im (im a b) (iff (or a b) b))
()
(sylbi ((im a b) (im (not (not a)) b) (iff (or a b) b))
  (imeq1i (a (not (not a)) b)
    (notnot (a)))
  (:conv (im (im (not (not a)) b) (iff (or a b) b))
    (im
      (im (not (not a)) b)
      (iff
        (:unfold or (a b) ()
          (im (not a) b))
        b))
    (biim1a ((not a) b)))))

(local theorem bior2a ((a wff ()) (b wff ())) ()
  (im (im b a) (iff (or a b) a))
()
(syl5bb ((im b a) (or a b) (or b a) a)
  (orcomb (a b))
  (bior1a (b a))))

(local theorem biim1 ((a wff ()) (b wff ())) ()
  (im a (iff (im a b) b))
()
(syl (a (im (not a) b) (iff (im a b) b))
  (biim1a (a b))
  (absurdr (a b))))

(local theorem biim2 ((a wff ()) (b wff ())) ()
  (im (not b) (iff (im a b) (not a)))
()
(syl ((not b) (im b (not a)) (iff (im a b) (not a)))
  (biim2a (a b))
  (absurd (b (not a)))))

(local theorem bior1 ((a wff ()) (b wff ())) ()
  (im (not a) (iff (or a b) b))
()
(syl ((not a) (im a b) (iff (or a b) b))
  (bior1a (a b))
  (absurd (a b))))

(local theorem bior2 ((a wff ()) (b wff ())) ()
  (im (not b) (iff (or a b) a))
()
(syl ((not b) (im b a) (iff (or a b) a))
  (bior2a (a b))
  (absurd (b a))))

(local theorem em ((p wff ())) ()
  (or p (not p))
()
(:conv (or p (not p))
  (:unfold or (p (not p)) ()
    (im (not p) (not p)))
  (id ((not p)))))

(local theorem emr ((p wff ())) ()
  (or (not p) p)
()
(ax_mp ((or p (not p)) (or (not p) p))
  (orcom (p (not p)))
  (em (p))))

(def ifp ((p wff ()) (a wff ()) (b wff ())) (wff ())
()
(or (an p a) (an (not p) b)))

(local theorem ifpeqd ((_G wff ()) (_p1 wff ()) (_p2 wff ()) (_a1 wff ()) (_a2 wff ()) (_b1 wff ()) (_b2 wff ()))
  ((_ph (im _G (iff _p1 _p2)))
   (_ah (im _G (iff _a1 _a2)))
   (_bh (im _G (iff _b1 _b2))))
  (im _G (iff (ifp _p1 _a1 _b1) (ifp _p2 _a2 _b2)))
()
(:conv (im _G (iff (ifp _p1 _a1 _b1) (ifp _p2 _a2 _b2)))
  (im
    _G
    (iff
      (:unfold ifp (_p1 _a1 _b1) ()
        (or (an _p1 _a1) (an (not _p1) _b1)))
      (:unfold ifp (_p2 _a2 _b2) ()
        (or (an _p2 _a2) (an (not _p2) _b2)))))
  (oreqd (_G (an _p1 _a1) (an _p2 _a2) (an (not _p1) _b1) (an (not _p2) _b2))
    (aneqd (_G _p1 _p2 _a1 _a2)
      _ph
      _ah)
    (aneqd (_G (not _p1) (not _p2) _b1 _b2)
      (noteqd (_G _p1 _p2)
        _ph)
      _bh))))

(local theorem ifpeq ((_p1 wff ()) (_p2 wff ()) (_a1 wff ()) (_a2 wff ()) (_b1 wff ()) (_b2 wff ())) ()
  (im (iff _p1 _p2) (im (iff _a1 _a2) (im (iff _b1 _b2) (iff (ifp _p1 _a1 _b1) (ifp _p2 _a2 _b2)))))
()
(exp ((iff _p1 _p2) (iff _a1 _a2) (im (iff _b1 _b2) (iff (ifp _p1 _a1 _b1) (ifp _p2 _a2 _b2))))
  (exp ((an (iff _p1 _p2) (iff _a1 _a2)) (iff _b1 _b2) (iff (ifp _p1 _a1 _b1) (ifp _p2 _a2 _b2)))
    (ifpeqd ((an (an (iff _p1 _p2) (iff _a1 _a2)) (iff _b1 _b2)) _p1 _p2 _a1 _a2 _b1 _b2)
      (anwl ((an (iff _p1 _p2) (iff _a1 _a2)) (iff _b1 _b2) (iff _p1 _p2))
        (anl ((iff _p1 _p2) (iff _a1 _a2))))
      (anwl ((an (iff _p1 _p2) (iff _a1 _a2)) (iff _b1 _b2) (iff _a1 _a2))
        (anr ((iff _p1 _p2) (iff _a1 _a2))))
      (anr ((an (iff _p1 _p2) (iff _a1 _a2)) (iff _b1 _b2)))))))

(local theorem ifpeq1d ((_G wff ()) (_p1 wff ()) (_p2 wff ()) (a wff ()) (b wff ()))
  ((_h (im _G (iff _p1 _p2))))
  (im _G (iff (ifp _p1 a b) (ifp _p2 a b)))
()
(ifpeqd (_G _p1 _p2 a a b b)
  _h
  (biidd (_G a))
  (biidd (_G b))))

(local theorem ifpeq1 ((_p1 wff ()) (_p2 wff ()) (a wff ()) (b wff ())) ()
  (im (iff _p1 _p2) (iff (ifp _p1 a b) (ifp _p2 a b)))
()
(ifpeq1d ((iff _p1 _p2) _p1 _p2 a b)
  (id ((iff _p1 _p2)))))

(local theorem ifpeq2d ((_G wff ()) (p wff ()) (_a1 wff ()) (_a2 wff ()) (b wff ()))
  ((_h (im _G (iff _a1 _a2))))
  (im _G (iff (ifp p _a1 b) (ifp p _a2 b)))
()
(ifpeqd (_G p p _a1 _a2 b b)
  (biidd (_G p))
  _h
  (biidd (_G b))))

(local theorem ifpeq2 ((p wff ()) (_a1 wff ()) (_a2 wff ()) (b wff ())) ()
  (im (iff _a1 _a2) (iff (ifp p _a1 b) (ifp p _a2 b)))
()
(ifpeq2d ((iff _a1 _a2) p _a1 _a2 b)
  (id ((iff _a1 _a2)))))

(local theorem ifpeq3d ((_G wff ()) (p wff ()) (a wff ()) (_b1 wff ()) (_b2 wff ()))
  ((_h (im _G (iff _b1 _b2))))
  (im _G (iff (ifp p a _b1) (ifp p a _b2)))
()
(ifpeqd (_G p p a a _b1 _b2)
  (biidd (_G p))
  (biidd (_G a))
  _h))

(local theorem ifpeq3 ((p wff ()) (a wff ()) (_b1 wff ()) (_b2 wff ())) ()
  (im (iff _b1 _b2) (iff (ifp p a _b1) (ifp p a _b2)))
()
(ifpeq3d ((iff _b1 _b2) p a _b1 _b2)
  (id ((iff _b1 _b2)))))

(theorem ifppos ((p wff ()) (a wff ()) (b wff ())) ()
  (im p (iff (ifp p a b) a))
()
(bitrd (p (ifp p a b) (an p a) a)
  (syl (p (not (an (not p) b)) (iff (ifp p a b) (an p a)))
    (:conv (im (not (an (not p) b)) (iff (ifp p a b) (an p a)))
      (im
        (not (an (not p) b))
        (iff
          (:unfold ifp (p a b) ()
            (or (an p a) (an (not p) b)))
          (an p a)))
      (bior2 ((an p a) (an (not p) b))))
    (ax_mp ((im (an (not p) b) (not p)) (im p (not (an (not p) b))))
      (con2 ((an (not p) b) p))
      (anl ((not p) b))))
  (bian1 (p a))))

(theorem ifpneg ((p wff ()) (a wff ()) (b wff ())) ()
  (im (not p) (iff (ifp p a b) b))
()
(bitrd ((not p) (ifp p a b) (an (not p) b) b)
  (syl ((not p) (not (an p a)) (iff (ifp p a b) (an (not p) b)))
    (:conv (im (not (an p a)) (iff (ifp p a b) (an (not p) b)))
      (im
        (not (an p a))
        (iff
          (:unfold ifp (p a b) ()
            (or (an p a) (an (not p) b)))
          (an (not p) b)))
      (bior1 ((an p a) (an (not p) b))))
    (ax_mp ((im (an p a) p) (im (not p) (not (an p a))))
      (con3 ((an p a) p))
      (anl (p a))))
  (bian1 ((not p) b))))

(local theorem ifpid ((a wff ()) (p wff ())) ()
  (iff (ifp p a a) a)
()
(cases (p (iff (ifp p a a) a))
  (ifppos (p a a))
  (ifpneg (p a a))))

(local theorem ifpnot ((a wff ()) (b wff ()) (p wff ())) ()
  (iff (ifp (not p) a b) (ifp p b a))
()
(ax_mp ((iff (ifp p b a) (or (an (not (not p)) b) (an (not p) a))) (iff (ifp (not p) a b) (ifp p b a)))
  (ax_mp ((iff (ifp (not p) a b) (or (an (not (not p)) b) (an (not p) a))) (im (iff (ifp p b a) (or (an (not (not p)) b) (an (not p) a))) (iff (ifp (not p) a b) (ifp p b a))))
    (bitr4 ((ifp (not p) a b) (or (an (not (not p)) b) (an (not p) a)) (ifp p b a)))
    (:conv (iff (ifp (not p) a b) (or (an (not (not p)) b) (an (not p) a)))
      (iff
        (:unfold ifp ((not p) a b) ()
          (or (an (not p) a) (an (not (not p)) b)))
        (or (an (not (not p)) b) (an (not p) a)))
      (orcomb ((an (not p) a) (an (not (not p)) b)))))
  (ax_mp ((iff (an p b) (an (not (not p)) b)) (iff (ifp p b a) (or (an (not (not p)) b) (an (not p) a))))
    (:conv (im (iff (an p b) (an (not (not p)) b)) (iff (ifp p b a) (or (an (not (not p)) b) (an (not p) a))))
      (im
        (iff (an p b) (an (not (not p)) b))
        (iff
          (:unfold ifp (p b a) ()
            (or (an p b) (an (not p) a)))
          (or (an (not (not p)) b) (an (not p) a))))
      (oreq1 ((an p b) (an (not (not p)) b) (an (not p) a))))
    (aneq1i (p (not (not p)) b)
      (notnot (p))))))

(local theorem ifpan1 ((a wff ()) (b wff ()) (c wff ()) (p wff ())) ()
  (iff (an (ifp p a b) c) (ifp p (an a c) (an b c)))
()
(ax_mp ((iff (or (an (an p a) c) (an (an (not p) b) c)) (ifp p (an a c) (an b c))) (iff (an (ifp p a b) c) (ifp p (an a c) (an b c))))
  (ax_mp ((iff (an (ifp p a b) c) (or (an (an p a) c) (an (an (not p) b) c))) (im (iff (or (an (an p a) c) (an (an (not p) b) c)) (ifp p (an a c) (an b c))) (iff (an (ifp p a b) c) (ifp p (an a c) (an b c)))))
    (bitr ((an (ifp p a b) c) (or (an (an p a) c) (an (an (not p) b) c)) (ifp p (an a c) (an b c))))
    (:conv (iff (an (ifp p a b) c) (or (an (an p a) c) (an (an (not p) b) c)))
      (iff
        (an
          (:unfold ifp (p a b) ()
            (or (an p a) (an (not p) b)))
          c)
        (or (an (an p a) c) (an (an (not p) b) c)))
      (andir ((an p a) (an (not p) b) c))))
  (ax_mp ((iff (an (an (not p) b) c) (an (not p) (an b c))) (iff (or (an (an p a) c) (an (an (not p) b) c)) (ifp p (an a c) (an b c))))
    (ax_mp ((iff (an (an p a) c) (an p (an a c))) (im (iff (an (an (not p) b) c) (an (not p) (an b c))) (iff (or (an (an p a) c) (an (an (not p) b) c)) (ifp p (an a c) (an b c)))))
      (:conv (im (iff (an (an p a) c) (an p (an a c))) (im (iff (an (an (not p) b) c) (an (not p) (an b c))) (iff (or (an (an p a) c) (an (an (not p) b) c)) (ifp p (an a c) (an b c)))))
        (im
          (iff (an (an p a) c) (an p (an a c)))
          (im
            (iff (an (an (not p) b) c) (an (not p) (an b c)))
            (iff
              (or (an (an p a) c) (an (an (not p) b) c))
              (:unfold ifp (p (an a c) (an b c)) ()
                (or (an p (an a c)) (an (not p) (an b c)))))))
        (oreq ((an (an p a) c) (an p (an a c)) (an (an (not p) b) c) (an (not p) (an b c)))))
      (anass (p a c)))
    (anass ((not p) b c)))))

(local theorem ifpan2 ((a wff ()) (b wff ()) (c wff ()) (p wff ())) ()
  (iff (an c (ifp p a b)) (ifp p (an c a) (an c b)))
()
(ax_mp ((iff (or (an c (an p a)) (an c (an (not p) b))) (ifp p (an c a) (an c b))) (iff (an c (ifp p a b)) (ifp p (an c a) (an c b))))
  (ax_mp ((iff (an c (ifp p a b)) (or (an c (an p a)) (an c (an (not p) b)))) (im (iff (or (an c (an p a)) (an c (an (not p) b))) (ifp p (an c a) (an c b))) (iff (an c (ifp p a b)) (ifp p (an c a) (an c b)))))
    (bitr ((an c (ifp p a b)) (or (an c (an p a)) (an c (an (not p) b))) (ifp p (an c a) (an c b))))
    (:conv (iff (an c (ifp p a b)) (or (an c (an p a)) (an c (an (not p) b))))
      (iff
        (an
          c
          (:unfold ifp (p a b) ()
            (or (an p a) (an (not p) b))))
        (or (an c (an p a)) (an c (an (not p) b))))
      (andi (c (an p a) (an (not p) b)))))
  (ax_mp ((iff (an c (an (not p) b)) (an (not p) (an c b))) (iff (or (an c (an p a)) (an c (an (not p) b))) (ifp p (an c a) (an c b))))
    (ax_mp ((iff (an c (an p a)) (an p (an c a))) (im (iff (an c (an (not p) b)) (an (not p) (an c b))) (iff (or (an c (an p a)) (an c (an (not p) b))) (ifp p (an c a) (an c b)))))
      (:conv (im (iff (an c (an p a)) (an p (an c a))) (im (iff (an c (an (not p) b)) (an (not p) (an c b))) (iff (or (an c (an p a)) (an c (an (not p) b))) (ifp p (an c a) (an c b)))))
        (im
          (iff (an c (an p a)) (an p (an c a)))
          (im
            (iff (an c (an (not p) b)) (an (not p) (an c b)))
            (iff
              (or (an c (an p a)) (an c (an (not p) b)))
              (:unfold ifp (p (an c a) (an c b)) ()
                (or (an p (an c a)) (an (not p) (an c b)))))))
        (oreq ((an c (an p a)) (an p (an c a)) (an c (an (not p) b)) (an (not p) (an c b)))))
      (anlass (c p a)))
    (anlass (c (not p) b)))))

(local theorem ifpor ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (p wff ())) ()
  (iff (ifp p (or a b) (or c d)) (or (ifp p a c) (ifp p b d)))
()
(cases (p (iff (ifp p (or a b) (or c d)) (or (ifp p a c) (ifp p b d))))
  (bitr4d (p (ifp p (or a b) (or c d)) (or a b) (or (ifp p a c) (ifp p b d)))
    (ifppos (p (or a b) (or c d)))
    (oreqd (p (ifp p a c) a (ifp p b d) b)
      (ifppos (p a c))
      (ifppos (p b d))))
  (bitr4d ((not p) (ifp p (or a b) (or c d)) (or c d) (or (ifp p a c) (ifp p b d)))
    (ifpneg (p (or a b) (or c d)))
    (oreqd ((not p) (ifp p a c) c (ifp p b d) d)
      (ifpneg (p a c))
      (ifpneg (p b d))))))

(local theorem ifpeq1a ((a1 wff ()) (a2 wff ()) (b wff ()) (p wff ())) ()
  (im (im p (iff a1 a2)) (iff (ifp p a1 b) (ifp p a2 b)))
()
(:conv (im (im p (iff a1 a2)) (iff (ifp p a1 b) (ifp p a2 b)))
  (im
    (im p (iff a1 a2))
    (iff
      (:unfold ifp (p a1 b) ()
        (or (an p a1) (an (not p) b)))
      (:unfold ifp (p a2 b) ()
        (or (an p a2) (an (not p) b)))))
  (oreq1d ((im p (iff a1 a2)) (an p a1) (an p a2) (an (not p) b))
    (aneq2a (p a1 a2)))))

(local theorem ifpeq2a ((a wff ()) (b1 wff ()) (b2 wff ()) (p wff ())) ()
  (im (im (not p) (iff b1 b2)) (iff (ifp p a b1) (ifp p a b2)))
()
(:conv (im (im (not p) (iff b1 b2)) (iff (ifp p a b1) (ifp p a b2)))
  (im
    (im (not p) (iff b1 b2))
    (iff
      (:unfold ifp (p a b1) ()
        (or (an p a) (an (not p) b1)))
      (:unfold ifp (p a b2) ()
        (or (an p a) (an (not p) b2)))))
  (oreq2d ((im (not p) (iff b1 b2)) (an p a) (an (not p) b1) (an (not p) b2))
    (aneq2a ((not p) b1 b2)))))

(local theorem ifptreq ((G wff ()) (a wff ()) (p wff ()) (p0 wff ()) (p1 wff ()) (q0 wff ()) (q1 wff ()))
  ((h (im G (iff p (ifp a p0 p1))))
   (h0 (im (an G a) (iff p0 q0)))
   (h1 (im (an G (not a)) (iff p1 q1))))
  (im G (iff p (ifp a q0 q1)))
()
(bitrd (G p (ifp a p0 p1) (ifp a q0 q1))
  h
  (bitrd (G (ifp a p0 p1) (ifp a q0 p1) (ifp a q0 q1))
    (syl (G (im a (iff p0 q0)) (iff (ifp a p0 p1) (ifp a q0 p1)))
      (ifpeq1a (p0 q0 p1 a))
      (exp (G a (iff p0 q0))
        h0))
    (syl (G (im (not a) (iff p1 q1)) (iff (ifp a q0 p1) (ifp a q0 q1)))
      (ifpeq2a (q0 p1 q1 a))
      (exp (G (not a) (iff p1 q1))
        h1)))))

(local theorem ifppos2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im b (iff (ifp a b c) (or a c)))
()
(syl6bb (b (ifp a b c) (or a (an (not a) c)) (or a c))
  (ax_mp ((im (not a) (iff (an (not a) c) c)) (iff (or a (an (not a) c)) (or a c)))
    (oreq2a (a (an (not a) c) c))
    (bian1 ((not a) c)))
  (:conv (im b (iff (ifp a b c) (or a (an (not a) c))))
    (im
      b
      (iff
        (:unfold ifp (a b c) ()
          (or (an a b) (an (not a) c)))
        (or a (an (not a) c))))
    (oreq1d (b (an a b) a (an (not a) c))
      (bian2 (a b))))))

(local theorem ifppos3 ((a wff ()) (b wff ()) (c wff ())) ()
  (im c (iff (ifp a b c) (or (not a) b)))
()
(syl5bbr (c (ifp a b c) (ifp (not a) c b) (or (not a) b))
  (ifpnot (c b a))
  (ifppos2 ((not a) c b))))

(local theorem ifpneg3 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (not c) (iff (ifp a b c) (an a b)))
()
(syl ((not c) (not (an (not a) c)) (iff (ifp a b c) (an a b)))
  (:conv (im (not (an (not a) c)) (iff (ifp a b c) (an a b)))
    (im
      (not (an (not a) c))
      (iff
        (:unfold ifp (a b c) ()
          (or (an a b) (an (not a) c)))
        (an a b)))
    (bior2 ((an a b) (an (not a) c))))
  (ax_mp ((im (an (not a) c) c) (im (not c) (not (an (not a) c))))
    (con3 ((an (not a) c) c))
    (anr ((not a) c)))))

(local theorem ifpneg2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (not b) (iff (ifp a b c) (an (not a) c)))
()
(syl5bbr ((not b) (ifp a b c) (ifp (not a) c b) (an (not a) c))
  (ifpnot (c b a))
  (ifpneg3 ((not a) c b))))

(term tru () (wff ()))

(axiom itru () ()
  (tru))

(def fal () (wff ())
()
(not (tru)))

(local theorem trud ((a wff ()))
  ((h (im (tru) a)))
  a
()
(ax_mp ((tru) a)
  h
  (itru ())))

(local theorem eqtru ((a wff ())) ()
  (iff (iff a (tru)) a)
()
(:let H1 (itru ())
(ibii ((iff a (tru)) a)
  (mpbiri ((iff a (tru)) (tru) a)
    H1
    (id ((iff a (tru)))))
  (bithd (a a (tru))
    (id (a))
    (a1i (a (tru))
      H1)))))

(local theorem notfal () ()
  (not (fal))
()
(ax_mp ((tru) (not (fal)))
  (:conv (im (tru) (not (fal)))
    (im
      (tru)
      (not
        (:unfold fal () ()
          (not (tru)))))
    (notnot1 ((tru))))
  (itru ())))

(local theorem efal ((a wff ())) ()
  (im (fal) a)
()
(ax_mp ((not (fal)) (im (fal) a))
  (absurd ((fal) a))
  (notfal ())))

(local theorem imfal ((a wff ())) ()
  (iff (im a (fal)) (not a))
()
(ibii ((im a (fal)) (not a))
  (mpi ((im a (fal)) (not (fal)) (not a))
    (notfal ())
    (con3 (a (fal))))
  (absurd (a (fal)))))

(local theorem eqfal ((a wff ())) ()
  (iff (iff a (fal)) (not a))
()
(ax_mp ((iff (im a (fal)) (not a)) (iff (iff a (fal)) (not a)))
  (ax_mp ((iff (iff a (fal)) (im a (fal))) (im (iff (im a (fal)) (not a)) (iff (iff a (fal)) (not a))))
    (bitr ((iff a (fal)) (im a (fal)) (not a)))
    (ax_mp ((im (fal) a) (iff (iff a (fal)) (im a (fal))))
      (:conv (im (im (fal) a) (iff (iff a (fal)) (im a (fal))))
        (im
          (im (fal) a)
          (iff
            (:unfold iff (a (fal)) ()
              (an (im a (fal)) (im (fal) a)))
            (im a (fal))))
        (bian2 ((im a (fal)) (im (fal) a))))
      (efal (a))))
  (imfal (a))))

(local theorem neqfal ((a wff ())) ()
  (iff (iff (not a) (fal)) a)
()
(ax_mp ((iff a (not (not a))) (iff (iff (not a) (fal)) a))
  (ax_mp ((iff (iff (not a) (fal)) (not (not a))) (im (iff a (not (not a))) (iff (iff (not a) (fal)) a)))
    (bitr4 ((iff (not a) (fal)) (not (not a)) a))
    (eqfal ((not a))))
  (notnot (a))))

(sort nat)

(term al ((x nat) (p wff (x))) (wff ()))

(def ex ((x nat) (p wff (x))) (wff ())
()
(not (al x (not p))))

(term eq ((a nat ()) (b nat ())) (wff ()))

(axiom ax_gen ((x nat) (p wff (x)))
  (p)
  (al x p))

(axiom ax_4 ((x nat) (p wff (x)) (q wff (x))) ()
  (im (al x (im p q)) (im (al x p) (al x q))))

(local theorem alim ((x nat) (p wff (x)) (q wff (x))) ()
  (im (al x (im p q)) (im (al x p) (al x q)))
()
(ax_4 (x p q)))

(axiom ax_5 ((x nat) (p wff ())) ()
  (im p (al x p)))

(local theorem ial ((x nat) (p wff ())) ()
  (im p (al x p))
()
(ax_5 (x p)))

(axiom ax_6 ((a nat ()) (x nat)) ()
  (ex x (eq x a)))

(axiom ax_7 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (im (eq a c) (eq b c))))

(local theorem eqtr3 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq b a) (im (eq b c) (eq a c)))
()
(ax_7 (b a c)))

(axiom ax_10 ((x nat) (p wff (x))) ()
  (im (not (al x p)) (al x (not (al x p)))))

(axiom ax_11 ((x nat) (y nat) (p wff (x y))) ()
  (im (al x (al y p)) (al y (al x p))))

(local theorem alcom ((x nat) (y nat) (p wff (x y))) ()
  (im (al x (al y p)) (al y (al x p)))
()
(ax_11 (x y p)))

(axiom ax_12 ((x nat) (a nat ()) (p wff (x))) ()
  (im (eq x a) (im p (al x (im (eq x a) p)))))

(local theorem alimi ((x nat) (a wff (x)) (b wff (x)))
  ((h (im a b)))
  (im (al x a) (al x b))
()
(ax_mp ((al x (im a b)) (im (al x a) (al x b)))
  (ax_4 (x a b))
  (ax_gen (x (im a b))
    h)))

(local theorem iald ((x nat) (a wff ()) (b wff (x)))
  ((h (im a b)))
  (im a (al x b))
()
(syl (a (al x a) (al x b))
  (alimi (x a b)
    h)
  (ax_5 (x a))))

(local theorem eex ((x nat) (a wff (x)) (b wff ()))
  ((h (im a b)))
  (im (ex x a) b)
()
(ax_mp ((im (not b) (al x (not a))) (im (ex x a) b))
  (:conv (im (im (not b) (al x (not a))) (im (ex x a) b))
    (im
      (im (not b) (al x (not a)))
      (im
        (:unfold ex (x a) ()
          (not (al x (not a))))
        b))
    (con1 (b (al x (not a)))))
  (iald (x (not b) (not a))
    (ax_mp ((im a b) (im (not b) (not a)))
      (con3 (a b))
      h))))

(local theorem eqid ((a nat ())) ()
  (eq a a)
((x nat))
(ax_mp ((ex x (eq x a)) (eq a a))
  (eex (x (eq x a) (eq a a))
    (ax_mp ((im (eq x a) (im (eq x a) (eq a a))) (im (eq x a) (eq a a)))
      (imidm ((eq x a) (eq a a)))
      (ax_7 (x a a))))
  (ax_6 (a x))))

(local theorem eqcom ((a nat ()) (b nat ())) ()
  (im (eq a b) (eq b a))
()
(mpi ((eq a b) (eq a a) (eq b a))
  (eqid (a))
  (ax_7 (a b a))))

(local theorem eqtr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (im (eq b c) (eq a c)))
()
(syl ((eq a b) (eq b a) (im (eq b c) (eq a c)))
  (ax_7 (b a c))
  (eqcom (a b))))

(local theorem eqtr2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (im (eq b c) (eq c a)))
()
(syl6 ((eq a b) (eq b c) (eq a c) (eq c a))
  (eqcom (a c))
  (eqtr (a b c))))

(local theorem eqtr4 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (im (eq c b) (eq a c)))
()
(syl5 ((eq a b) (eq c b) (eq b c) (eq a c))
  (eqcom (c b))
  (eqtr (a b c))))

(local theorem eqcomb ((a nat ()) (b nat ())) ()
  (iff (eq a b) (eq b a))
()
(ibii ((eq a b) (eq b a))
  (eqcom (a b))
  (eqcom (b a))))

(local theorem eqeq1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (iff (eq a c) (eq b c)))
()
(ibid ((eq a b) (eq a c) (eq b c))
  (eqtr3 (b a c))
  (eqtr (a b c))))

(local theorem eqeq2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq b c) (iff (eq a b) (eq a c)))
()
(ibid ((eq b c) (eq a b) (eq a c))
  (com12 ((eq a b) (eq b c) (eq a c))
    (eqtr (a b c)))
  (com12 ((eq a c) (eq b c) (eq a b))
    (eqtr4 (a c b)))))

(local theorem eqeq1d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h (im G (eq a b))))
  (im G (iff (eq a c) (eq b c)))
()
(syl (G (eq a b) (iff (eq a c) (eq b c)))
  (eqeq1 (a b c))
  h))

(local theorem eqeq2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h (im G (eq b c))))
  (im G (iff (eq a b) (eq a c)))
()
(syl (G (eq b c) (iff (eq a b) (eq a c)))
  (eqeq2 (a b c))
  h))

(local theorem eqeqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (iff (eq a c) (eq b d)))
()
(bitrd (G (eq a c) (eq b c) (eq b d))
  (eqeq1d (G a b c)
    h1)
  (eqeq2d (G b c d)
    h2)))

(local theorem eqeq ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (eq a b) (im (eq c d) (iff (eq a c) (eq b d))))
()
(exp ((eq a b) (eq c d) (iff (eq a c) (eq b d)))
  (eqeqd ((an (eq a b) (eq c d)) a b c d)
    (anl ((eq a b) (eq c d)))
    (anr ((eq a b) (eq c d))))))

(local theorem eqtr2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq b c))))
  (im G (eq c a))
()
(sylc (G (eq a b) (eq b c) (eq c a))
  (eqtr2 (a b c))
  h1
  h2))

(local theorem eqtr3d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (eq b a)))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(sylc (G (eq b a) (eq b c) (eq a c))
  (eqtr3 (a b c))
  h1
  h2))

(local theorem eqidd ((G wff ()) (a nat ())) ()
  (im G (eq a a))
()
(a1i (G (eq a a))
  (eqid (a))))

(local theorem eqcomi ((a nat ()) (b nat ()))
  ((h (eq a b)))
  (eq b a)
()
(ax_mp ((eq a b) (eq b a))
  (eqcom (a b))
  h))

(local theorem eqcomd ((G wff ()) (a nat ()) (b nat ()))
  ((h (im G (eq a b))))
  (im G (eq b a))
()
(syl (G (eq a b) (eq b a))
  (eqcom (a b))
  h))

(local theorem eqtrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(sylc (G (eq a b) (eq b c) (eq a c))
  (eqtr (a b c))
  h1
  h2))

(local theorem eqtr4i ((a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq a b))
   (h2 (eq c b)))
  (eq a c)
()
(ax_mp ((eq c b) (eq a c))
  (ax_mp ((eq a b) (im (eq c b) (eq a c)))
    (eqtr4 (a b c))
    h1)
  h2))

(local theorem eqtr4d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c b))))
  (im G (eq a c))
()
(sylc (G (eq a b) (eq c b) (eq a c))
  (eqtr4 (a b c))
  h1
  h2))

(local theorem syl5eq ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq a b))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(eqtrd (G a b c)
  (a1i (G (eq a b))
    h1)
  h2))

(local theorem syl5eqr ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq b a))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(eqtr3d (G a b c)
  (a1i (G (eq b a))
    h1)
  h2))

(local theorem syl6eq ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq b c))
   (h2 (im G (eq a b))))
  (im G (eq a c))
()
(eqtrd (G a b c)
  h2
  (a1i (G (eq b c))
    h1)))

(local theorem syl6eqr ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq c b))
   (h2 (im G (eq a b))))
  (im G (eq a c))
()
(eqtr4d (G a b c)
  h2
  (a1i (G (eq c b))
    h1)))

(local theorem eqtr3g ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (eq a c))
   (h2 (eq b d))
   (h (im G (eq a b))))
  (im G (eq c d))
()
(syl5eqr (G c a d)
  h1
  (syl6eq (G a b d)
    h2
    h)))

(local theorem eqtr4g ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (eq c a))
   (h2 (eq d b))
   (h (im G (eq a b))))
  (im G (eq c d))
()
(syl5eq (G c a d)
  h1
  (syl6eqr (G a b d)
    h2
    h)))

(local theorem aleq ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x (iff a b)) (iff (al x a) (al x b)))
()
(ibid ((al x (iff a b)) (al x a) (al x b))
  (syl ((al x (iff a b)) (al x (im a b)) (im (al x a) (al x b)))
    (ax_4 (x a b))
    (alimi (x (iff a b) (im a b))
      (bi1 (a b))))
  (syl ((al x (iff a b)) (al x (im b a)) (im (al x b) (al x a)))
    (ax_4 (x b a))
    (alimi (x (iff a b) (im b a))
      (bi2 (a b))))))

(local theorem aleqi ((x nat) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (al x a) (al x b))
()
(ax_mp ((al x (iff a b)) (iff (al x a) (al x b)))
  (aleq (x a b))
  (ax_gen (x (iff a b))
    h)))

(local theorem alimd ((x nat) (G wff ()) (a wff (x)) (b wff (x)))
  ((h (im G (im a b))))
  (im G (im (al x a) (al x b)))
()
(syl (G (al x (im a b)) (im (al x a) (al x b)))
  (ax_4 (x a b))
  (syl (G (al x G) (al x (im a b)))
    (alimi (x G (im a b))
      h)
    (ax_5 (x G)))))

(local theorem raleqi ((x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (al x (im p a)) (al x (im p b)))
()
(aleqi (x (im p a) (im p b))
  (imeq2i (p a b)
    h)))

(local theorem al2imi ((x nat) (a wff (x)) (b wff (x)) (c wff (x)))
  ((h (im a (im b c))))
  (im (al x a) (im (al x b) (al x c)))
()
(syl ((al x a) (al x (im b c)) (im (al x b) (al x c)))
  (alim (x b c))
  (alimi (x a (im b c))
    h)))

(local theorem aleqd ((G wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (im G (iff a b))))
  (im G (iff (al x a) (al x b)))
()
(syl (G (al x (iff a b)) (iff (al x a) (al x b)))
  (aleq (x a b))
  (iald (x G (iff a b))
    h)))

(local theorem ialda ((x nat) (G wff ()) (a wff (x)) (b wff (x)))
  ((h (im (an G a) b)))
  (im G (al x (im a b)))
()
(iald (x G (im a b))
  (exp (G a b)
    h)))

(local theorem alcomb ((x nat) (y nat) (a wff (x y))) ()
  (iff (al x (al y a)) (al y (al x a)))
()
(ibii ((al x (al y a)) (al y (al x a)))
  (alcom (x y a))
  (alcom (y x a))))

(local theorem alan ((x nat) (a wff (x)) (b wff (x))) ()
  (iff (al x (an a b)) (an (al x a) (al x b)))
()
(ibii ((al x (an a b)) (an (al x a) (al x b)))
  (iand ((al x (an a b)) (al x a) (al x b))
    (alimi (x (an a b) a)
      (anl (a b)))
    (alimi (x (an a b) b)
      (anr (a b))))
  (imp ((al x a) (al x b) (al x (an a b)))
    (al2imi (x a b (an a b))
      (ian (a b))))))

(local theorem ralan ((x nat) (a wff (x)) (b wff (x)) (c wff (x))) ()
  (iff (al x (im a (an b c))) (an (al x (im a b)) (al x (im a c))))
()
(ax_mp ((iff (al x (an (im a b) (im a c))) (an (al x (im a b)) (al x (im a c)))) (iff (al x (im a (an b c))) (an (al x (im a b)) (al x (im a c)))))
  (ax_mp ((iff (al x (im a (an b c))) (al x (an (im a b) (im a c)))) (im (iff (al x (an (im a b) (im a c))) (an (al x (im a b)) (al x (im a c)))) (iff (al x (im a (an b c))) (an (al x (im a b)) (al x (im a c))))))
    (bitr ((al x (im a (an b c))) (al x (an (im a b) (im a c))) (an (al x (im a b)) (al x (im a c)))))
    (aleqi (x (im a (an b c)) (an (im a b) (im a c)))
      (imandi (a b c))))
  (alan (x (im a b) (im a c)))))

(local theorem exim ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x (im a b)) (im (ex x a) (ex x b)))
()
(syl ((al x (im a b)) (im (al x (not b)) (al x (not a))) (im (ex x a) (ex x b)))
  (:conv (im (im (al x (not b)) (al x (not a))) (im (ex x a) (ex x b)))
    (im
      (im (al x (not b)) (al x (not a)))
      (im
        (:unfold ex (x a) ()
          (not (al x (not a))))
        (:unfold ex (x b) ()
          (not (al x (not b))))))
    (con3 ((al x (not b)) (al x (not a)))))
  (al2imi (x (im a b) (not b) (not a))
    (con3 (a b)))))

(local theorem eximi ((x nat) (a wff (x)) (b wff (x)))
  ((h (im a b)))
  (im (ex x a) (ex x b))
()
(ax_mp ((al x (im a b)) (im (ex x a) (ex x b)))
  (exim (x a b))
  (ax_gen (x (im a b))
    h)))

(local theorem exeq ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x (iff a b)) (iff (ex x a) (ex x b)))
()
(:conv (im (al x (iff a b)) (iff (ex x a) (ex x b)))
  (im
    (al x (iff a b))
    (iff
      (:unfold ex (x a) ()
        (not (al x (not a))))
      (:unfold ex (x b) ()
        (not (al x (not b))))))
  (noteqd ((al x (iff a b)) (al x (not a)) (al x (not b)))
    (syl ((al x (iff a b)) (al x (iff (not a) (not b))) (iff (al x (not a)) (al x (not b))))
      (aleq (x (not a) (not b)))
      (alimi (x (iff a b) (iff (not a) (not b)))
        (noteq (a b)))))))

(local theorem exeqd ((G wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (im G (iff a b))))
  (im G (iff (ex x a) (ex x b)))
()
(syl (G (al x (iff a b)) (iff (ex x a) (ex x b)))
  (exeq (x a b))
  (iald (x G (iff a b))
    h)))

(local theorem exeqi ((x nat) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (ex x a) (ex x b))
()
(ax_mp ((al x (iff a b)) (iff (ex x a) (ex x b)))
  (exeq (x a b))
  (ax_gen (x (iff a b))
    h)))

(local theorem rexeqi ((x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (ex x (an p a)) (ex x (an p b)))
()
(exeqi (x (an p a) (an p b))
  (aneq2i (p a b)
    h)))

(local theorem rexeqa ((x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (im p (iff a b))))
  (iff (ex x (an p a)) (ex x (an p b)))
()
(exeqi (x (an p a) (an p b))
  (ax_mp ((im p (iff a b)) (iff (an p a) (an p b)))
    (aneq2a (p a b))
    h)))

(local theorem rexeqd ((G wff ()) (x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (im G (iff a b))))
  (im G (iff (ex x (an p a)) (ex x (an p b))))
()
(exeqd (G x (an p a) (an p b))
  (aneq2d (G p a b)
    h)))

(local theorem rexeqda ((G wff ()) (x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (im (an G p) (iff a b))))
  (im G (iff (ex x (an p a)) (ex x (an p b))))
()
(exeqd (G x (an p a) (an p b))
  (aneq2da (G p a b)
    h)))

(local theorem iex ((x nat) (a wff (x))) ()
  (im a (ex x a))
((y nat))
(ax_mp ((ex y (eq y x)) (im a (ex x a)))
  (eex (y (eq y x) (im a (ex x a)))
    (rsyl ((eq y x) (eq x y) (im a (ex x a)))
      (eqcom (y x))
      (syl6 ((eq x y) a (al x (im (eq x y) a)) (ex x a))
        (mpi ((al x (im (eq x y) a)) (ex x (eq x y)) (ex x a))
          (ax_6 (y x))
          (exim (x (eq x y) a)))
        (ax_12 (x y a)))))
  (ax_6 (x y))))

(local theorem alanex ((x nat) (a wff (x)) (b wff (x))) ()
  (im (an (al x a) (ex x b)) (ex x (an a b)))
()
(imp ((al x a) (ex x b) (ex x (an a b)))
  (syl ((al x a) (al x (im b (an a b))) (im (ex x b) (ex x (an a b))))
    (exim (x b (an a b)))
    (alimi (x a (im b (an a b)))
      (ian (a b))))))

(local theorem exanal ((x nat) (a wff (x)) (b wff (x))) ()
  (im (an (ex x a) (al x b)) (ex x (an a b)))
()
(impcom ((al x b) (ex x a) (ex x (an a b)))
  (syl ((al x b) (al x (im a (an a b))) (im (ex x a) (ex x (an a b))))
    (exim (x a (an a b)))
    (alimi (x b (im a (an a b)))
      (com12 (a b (an a b))
        (ian (a b)))))))

(local theorem alnex ((x nat) (a wff (x))) ()
  (iff (al x (not a)) (not (ex x a)))
()
(:conv (iff (al x (not a)) (not (ex x a)))
  (iff
    (al x (not a))
    (not
      (:unfold ex (x a) ()
        (not (al x (not a))))))
  (notnot ((al x (not a))))))

(local theorem ngen ((x nat) (a wff (x)))
  ((h (not a)))
  (not (ex x a))
()
(ax_mp ((al x (not a)) (not (ex x a)))
  (:conv (im (al x (not a)) (not (ex x a)))
    (im
      (al x (not a))
      (not
        (:unfold ex (x a) ()
          (not (al x (not a))))))
    (notnot1 ((al x (not a)))))
  (ax_gen (x (not a))
    h)))

(local theorem alex ((x nat) (a wff (x))) ()
  (iff (al x a) (not (ex x (not a))))
()
(ax_mp ((iff (al x (not (not a))) (not (ex x (not a)))) (iff (al x a) (not (ex x (not a)))))
  (ax_mp ((iff (al x a) (al x (not (not a)))) (im (iff (al x (not (not a))) (not (ex x (not a)))) (iff (al x a) (not (ex x (not a))))))
    (bitr ((al x a) (al x (not (not a))) (not (ex x (not a)))))
    (aleqi (x a (not (not a)))
      (notnot (a))))
  (alnex (x (not a)))))

(local theorem exnal ((x nat) (a wff (x))) ()
  (iff (ex x (not a)) (not (al x a)))
()
(ax_mp ((iff (al x a) (not (ex x (not a)))) (iff (ex x (not a)) (not (al x a))))
  (con2b ((al x a) (ex x (not a))))
  (alex (x a))))

(local theorem eal ((x nat) (a wff (x))) ()
  (im (al x a) a)
()
(ax_mp ((im (not a) (not (al x a))) (im (al x a) a))
  (ax_3 (a (al x a)))
  (sylib ((not a) (ex x (not a)) (not (al x a)))
    (exnal (x a))
    (iex (x (not a))))))

(local theorem albi ((a wff ()) (x nat)) ()
  (iff (al x a) a)
()
(ibii ((al x a) a)
  (eal (x a))
  (ial (x a))))

(local theorem exbi ((a wff ()) (x nat)) ()
  (iff (ex x a) a)
()
(ax_mp ((iff (not a) (al x (not a))) (iff (ex x a) a))
  (:conv (im (iff (not a) (al x (not a))) (iff (ex x a) a))
    (im
      (iff (not a) (al x (not a)))
      (iff
        (:unfold ex (x a) ()
          (not (al x (not a))))
        a))
    (con1b (a (al x (not a)))))
  (ax_mp ((iff (al x (not a)) (not a)) (iff (not a) (al x (not a))))
    (bicom ((al x (not a)) (not a)))
    (albi ((not a) x)))))

(local theorem alan1 ((a wff ()) (x nat) (b wff (x))) ()
  (iff (al x (an a b)) (an a (al x b)))
()
(ax_mp ((iff (an (al x a) (al x b)) (an a (al x b))) (iff (al x (an a b)) (an a (al x b))))
  (ax_mp ((iff (al x (an a b)) (an (al x a) (al x b))) (im (iff (an (al x a) (al x b)) (an a (al x b))) (iff (al x (an a b)) (an a (al x b)))))
    (bitr ((al x (an a b)) (an (al x a) (al x b)) (an a (al x b))))
    (alan (x a b)))
  (aneq1i ((al x a) a (al x b))
    (albi (a x)))))

(local theorem alan2 ((b wff ()) (x nat) (a wff (x))) ()
  (iff (al x (an a b)) (an (al x a) b))
()
(ax_mp ((iff (an (al x a) (al x b)) (an (al x a) b)) (iff (al x (an a b)) (an (al x a) b)))
  (ax_mp ((iff (al x (an a b)) (an (al x a) (al x b))) (im (iff (an (al x a) (al x b)) (an (al x a) b)) (iff (al x (an a b)) (an (al x a) b))))
    (bitr ((al x (an a b)) (an (al x a) (al x b)) (an (al x a) b)))
    (alan (x a b)))
  (aneq2i ((al x a) (al x b) b)
    (albi (b x)))))

(local theorem exor ((x nat) (a wff (x)) (b wff (x))) ()
  (iff (ex x (or a b)) (or (ex x a) (ex x b)))
()
(ax_mp ((iff (not (an (al x (not a)) (al x (not b)))) (or (ex x a) (ex x b))) (iff (ex x (or a b)) (or (ex x a) (ex x b))))
  (ax_mp ((iff (ex x (or a b)) (not (an (al x (not a)) (al x (not b))))) (im (iff (not (an (al x (not a)) (al x (not b)))) (or (ex x a) (ex x b))) (iff (ex x (or a b)) (or (ex x a) (ex x b)))))
    (bitr ((ex x (or a b)) (not (an (al x (not a)) (al x (not b)))) (or (ex x a) (ex x b))))
    (:conv (iff (ex x (or a b)) (not (an (al x (not a)) (al x (not b)))))
      (iff
        (:unfold ex (x (or a b)) ()
          (not (al x (not (or a b)))))
        (not (an (al x (not a)) (al x (not b)))))
      (noteqi ((al x (not (or a b))) (an (al x (not a)) (al x (not b))))
        (ax_mp ((iff (al x (an (not a) (not b))) (an (al x (not a)) (al x (not b)))) (iff (al x (not (or a b))) (an (al x (not a)) (al x (not b)))))
          (ax_mp ((iff (al x (not (or a b))) (al x (an (not a) (not b)))) (im (iff (al x (an (not a) (not b))) (an (al x (not a)) (al x (not b)))) (iff (al x (not (or a b))) (an (al x (not a)) (al x (not b))))))
            (bitr ((al x (not (or a b))) (al x (an (not a) (not b))) (an (al x (not a)) (al x (not b)))))
            (aleqi (x (not (or a b)) (an (not a) (not b)))
              (notor (a b))))
          (alan (x (not a) (not b)))))))
  (:conv (iff (not (an (al x (not a)) (al x (not b)))) (or (ex x a) (ex x b)))
    (iff
      (not (an (al x (not a)) (al x (not b))))
      (or
        (:unfold ex (x a) ()
          (not (al x (not a))))
        (:unfold ex (x b) ()
          (not (al x (not b))))))
    (notan ((al x (not a)) (al x (not b)))))))

(local theorem eximd ((x nat) (G wff ()) (a wff (x)) (b wff (x)))
  ((h (im G (im a b))))
  (im G (im (ex x a) (ex x b)))
()
(syl (G (al x (im a b)) (im (ex x a) (ex x b)))
  (exim (x a b))
  (iald (x G (im a b))
    h)))

(local theorem excomb ((x nat) (y nat) (a wff (x y))) ()
  (iff (ex x (ex y a)) (ex y (ex x a)))
()
(ax_mp ((iff (al x (not (ex y a))) (al y (not (ex x a)))) (iff (ex x (ex y a)) (ex y (ex x a))))
  (:conv (im (iff (al x (not (ex y a))) (al y (not (ex x a)))) (iff (ex x (ex y a)) (ex y (ex x a))))
    (im
      (iff (al x (not (ex y a))) (al y (not (ex x a))))
      (iff
        (:unfold ex (x (ex y a)) ()
          (not (al x (not (ex y a)))))
        (:unfold ex (y (ex x a)) ()
          (not (al y (not (ex x a)))))))
    (noteq ((al x (not (ex y a))) (al y (not (ex x a))))))
  (ax_mp ((iff (al x (al y (not a))) (al y (not (ex x a)))) (iff (al x (not (ex y a))) (al y (not (ex x a)))))
    (ax_mp ((iff (al x (al y (not a))) (al x (not (ex y a)))) (im (iff (al x (al y (not a))) (al y (not (ex x a)))) (iff (al x (not (ex y a))) (al y (not (ex x a))))))
      (bitr3 ((al x (not (ex y a))) (al x (al y (not a))) (al y (not (ex x a)))))
      (aleqi (x (al y (not a)) (not (ex y a)))
        (alnex (y a))))
    (ax_mp ((iff (al y (al x (not a))) (al y (not (ex x a)))) (iff (al x (al y (not a))) (al y (not (ex x a)))))
      (ax_mp ((iff (al x (al y (not a))) (al y (al x (not a)))) (im (iff (al y (al x (not a))) (al y (not (ex x a)))) (iff (al x (al y (not a))) (al y (not (ex x a))))))
        (bitr ((al x (al y (not a))) (al y (al x (not a))) (al y (not (ex x a)))))
        (alcomb (x y (not a))))
      (aleqi (y (al x (not a)) (not (ex x a)))
        (alnex (x a)))))))

(local theorem excom ((x nat) (y nat) (a wff (x y))) ()
  (im (ex x (ex y a)) (ex y (ex x a)))
()
(ax_mp ((iff (ex x (ex y a)) (ex y (ex x a))) (im (ex x (ex y a)) (ex y (ex x a))))
  (bi1 ((ex x (ex y a)) (ex y (ex x a))))
  (excomb (x y a))))

(local theorem nexi ((x nat) (a wff (x)))
  ((h (not a)))
  (not (ex x a))
()
(mpbi ((al x (not a)) (not (ex x a)))
  (alnex (x a))
  (ax_gen (x (not a))
    h)))

(local theorem nexd ((G wff ()) (x nat) (a wff (x)))
  ((h (im G (not a))))
  (im G (not (ex x a)))
()
(sylib (G (al x (not a)) (not (ex x a)))
  (alnex (x a))
  (iald (x G (not a))
    h)))

(local theorem exim1 ((x nat) (a wff ()) (b wff (x))) ()
  (im (ex x (im a b)) (im a (ex x b)))
()
(com12 (a (ex x (im a b)) (ex x b))
  (eximd (x a (im a b) b)
    (mpcom (a b)))))

(local def nf ((x nat) (a wff (x))) (wff ())
()
(al x (im a (al x a))))

(local theorem nfeqd ((_G wff ()) (x nat) (_a1 wff (x)) (_a2 wff (x)))
  ((_ah (im _G (iff _a1 _a2))))
  (im _G (iff (nf x _a1) (nf x _a2)))
()
(:conv (im _G (iff (nf x _a1) (nf x _a2)))
  (im
    _G
    (iff
      (:unfold nf (x _a1) ()
        (al x (im _a1 (al x _a1))))
      (:unfold nf (x _a2) ()
        (al x (im _a2 (al x _a2))))))
  (aleqd (_G x (im _a1 (al x _a1)) (im _a2 (al x _a2)))
    (imeqd (_G _a1 _a2 (al x _a1) (al x _a2))
      _ah
      (aleqd (_G x _a1 _a2)
        _ah)))))

(local theorem nfv ((a wff ()) (x nat)) ()
  (nf x a)
()
(:conv (nf x a)
  (:unfold nf (x a) ()
    (al x (im a (al x a))))
  (ax_gen (x (im a (al x a)))
    (ax_5 (x a)))))

(local theorem nfi ((x nat) (a wff (x)))
  ((h (nf x a)))
  (im a (al x a))
()
(ax_mp ((al x (im a (al x a))) (im a (al x a)))
  (eal (x (im a (al x a))))
  (:conv (al x (im a (al x a)))
    (:sym (:unfold nf (x a) ()
      (al x (im a (al x a)))))
    h)))

(local theorem nfri ((x nat) (a wff (x)))
  ((h (im a (al x a))))
  (nf x a)
()
(:conv (nf x a)
  (:unfold nf (x a) ()
    (al x (im a (al x a))))
  (ax_gen (x (im a (al x a)))
    h)))

(local theorem nfeqi ((x nat) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (nf x a) (nf x b))
()
(trud ((iff (nf x a) (nf x b)))
  (nfeqd ((tru) x a b)
    (a1i ((tru) (iff a b))
      h))))

(local theorem nfx ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (iff a b))
   (h2 (nf x b)))
  (nf x a)
()
(ax_mp ((nf x b) (nf x a))
  (bi2i ((nf x a) (nf x b))
    (nfeqi (x a b)
      h1))
  h2))

(local theorem nfal ((x nat) (y nat) (a wff (x y)))
  ((h (nf x a)))
  (nf x (al y a))
()
(nfri (x (al y a))
  (syl ((al y a) (al y (al x a)) (al x (al y a)))
    (ax_11 (y x a))
    (alimi (y a (al x a))
      (nfi (x a)
        h)))))

(local theorem nfnot ((x nat) (a wff (x)))
  ((h (nf x a)))
  (nf x (not a))
()
(nfri (x (not a))
  (ax_mp ((im (not (al x (not a))) a) (im (not a) (al x (not a))))
    (con1 ((al x (not a)) a))
    (syl ((not (al x (not a))) (al x a) a)
      (eal (x a))
      (syl ((not (al x (not a))) (not (al x (not (al x a)))) (al x a))
        (ax_mp ((im (not (al x a)) (al x (not (al x a)))) (im (not (al x (not (al x a)))) (al x a)))
          (con1 ((al x a) (al x (not (al x a)))))
          (ax_10 (x a)))
        (:conv (im (not (al x (not a))) (not (al x (not (al x a)))))
          (im
            (:sym (:unfold ex (x a) ()
              (not (al x (not a)))))
            (:sym (:unfold ex (x (al x a)) ()
              (not (al x (not (al x a)))))))
          (eximi (x a (al x a))
            (nfi (x a)
              h))))))))

(local theorem nfim ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (im a b))
()
(nfri (x (im a b))
  (cases (a (im (im a b) (al x (im a b))))
    (syl6 (a (im a b) b (al x (im a b)))
      (syl (b (al x b) (al x (im a b)))
        (alimi (x b (im a b))
          (ax_1 (b a)))
        (nfi (x b)
          h2))
      (mpcom (a b)))
    (a1d ((not a) (al x (im a b)) (im a b))
      (syl ((not a) (al x (not a)) (al x (im a b)))
        (alimi (x (not a) (im a b))
          (absurd (a b)))
        (nfi (x (not a))
          (nfnot (x a)
            h1)))))))

(local theorem nfan ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (an a b))
()
(:conv (nf x (an a b))
  (nf
    x
    (:unfold an (a b) ()
      (not (im a (not b)))))
  (nfnot (x (im a (not b)))
    (nfim (x a (not b))
      h1
      (nfnot (x b)
        h2)))))

(local theorem nfor ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (or a b))
()
(:conv (nf x (or a b))
  (nf
    x
    (:unfold or (a b) ()
      (im (not a) b)))
  (nfim (x (not a) b)
    (nfnot (x a)
      h1)
    h2)))

(local theorem nfbi ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (iff a b))
()
(:conv (nf x (iff a b))
  (nf
    x
    (:unfold iff (a b) ()
      (an (im a b) (im b a))))
  (nfan (x (im a b) (im b a))
    (nfim (x a b)
      h1
      h2)
    (nfim (x b a)
      h2
      h1))))

(local theorem nfex1 ((x nat) (a wff (x))) ()
  (nf x (ex x a))
()
(:conv (nf x (ex x a))
  (:unfold nf (x (ex x a)) ()
    (al x (im (ex x a) (al x (ex x a)))))
  (ax_gen (x (im (ex x a) (al x (ex x a))))
    (:conv (im (ex x a) (al x (ex x a)))
      (im
        (:unfold ex (x a) ()
          (not (al x (not a))))
        (al
          x
          (:unfold ex (x a) ()
            (not (al x (not a))))))
      (ax_10 (x (not a)))))))

(local theorem nfex ((x nat) (y nat) (a wff (x y)))
  ((h (nf x a)))
  (nf x (ex y a))
()
(:conv (nf x (ex y a))
  (nf
    x
    (:unfold ex (y a) ()
      (not (al y (not a)))))
  (nfnot (x (al y (not a)))
    (nfal (x y (not a))
      (nfnot (x a)
        h)))))

(local theorem nfal1 ((x nat) (a wff (x))) ()
  (nf x (al x a))
()
(nfx (x (al x a) (not (ex x (not a))))
  (alex (x a))
  (nfnot (x (ex x (not a)))
    (nfex1 (x (not a))))))

(local theorem ialdh ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (im a b)))
  (im a (al x b))
()
(syl (a (al x a) (al x b))
  (alimi (x a b)
    h2)
  (nfi (x a)
    h1)))

(local theorem eexh ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x b))
   (h2 (im a b)))
  (im (ex x a) b)
()
(ax_mp ((im (not b) (al x (not a))) (im (ex x a) b))
  (:conv (im (im (not b) (al x (not a))) (im (ex x a) b))
    (im
      (im (not b) (al x (not a)))
      (im
        (:unfold ex (x a) ()
          (not (al x (not a))))
        b))
    (con1 (b (al x (not a)))))
  (ialdh (x (not b) (not a))
    (nfnot (x b)
      h1)
    (ax_mp ((im a b) (im (not b) (not a)))
      (con3 (a b))
      h2))))

(local theorem eexdh ((x nat) (a wff (x)) (b wff (x)) (c wff (x)))
  ((h1 (nf x a))
   (h2 (nf x c))
   (h3 (im a (im b c))))
  (im a (im (ex x b) c))
()
(:conv (im a (im (ex x b) c))
  (im
    a
    (im
      (:unfold ex (x b) ()
        (not (al x (not b))))
      c))
  (con1d (a c (al x (not b)))
    (exp (a (not c) (al x (not b)))
      (ialdh (x (an a (not c)) (not b))
        (nfan (x a (not c))
          h1
          (nfnot (x c)
            h2))
        (imp (a (not c) (not b))
          (con3d (a b c)
            h3)))))))

(local theorem alimdh ((x nat) (a wff (x)) (b wff (x)) (c wff (x)))
  ((h1 (nf x a))
   (h2 (im a (im b c))))
  (im a (im (al x b) (al x c)))
()
(syl (a (al x (im b c)) (im (al x b) (al x c)))
  (alim (x b c))
  (ialdh (x a (im b c))
    h1
    h2)))

(local theorem aleqdh ((x nat) (G wff (x)) (a wff (x)) (b wff (x)))
  ((h1 (nf x G))
   (h (im G (iff a b))))
  (im G (iff (al x a) (al x b)))
()
(syl (G (al x (iff a b)) (iff (al x a) (al x b)))
  (aleq (x a b))
  (ialdh (x G (iff a b))
    h1
    h)))

(local theorem eexd ((x nat) (a wff ()) (b wff (x)) (c wff ()))
  ((h (im a (im b c))))
  (im a (im (ex x b) c))
()
(eexdh (x a b c)
  (nfv (a x))
  (nfv (c x))
  h))

(local theorem eexda ((x nat) (a wff ()) (b wff (x)) (c wff ()))
  ((h (im (an a b) c)))
  (im a (im (ex x b) c))
()
(eexd (x a b c)
  (exp (a b c)
    h)))

(local theorem eexb ((x nat) (a wff (x)) (b wff ())) ()
  (iff (im (ex x a) b) (al x (im a b)))
()
(:let H1 (nfv (b x))
(ibii ((im (ex x a) b) (al x (im a b)))
  (ialdh (x (im (ex x a) b) (im a b))
    (nfim (x (ex x a) b)
      (nfex1 (x a))
      H1)
    (imim1i (a (ex x a) b)
      (iex (x a))))
  (eexdh (x (al x (im a b)) a b)
    (nfal1 (x (im a b)))
    H1
    (eal (x (im a b)))))))

(local theorem erexb ((x nat) (a wff (x)) (b wff (x)) (c wff ())) ()
  (iff (im (ex x (an a b)) c) (al x (im a (im b c))))
()
(ax_mp ((iff (al x (im (an a b) c)) (al x (im a (im b c)))) (iff (im (ex x (an a b)) c) (al x (im a (im b c)))))
  (ax_mp ((iff (im (ex x (an a b)) c) (al x (im (an a b) c))) (im (iff (al x (im (an a b) c)) (al x (im a (im b c)))) (iff (im (ex x (an a b)) c) (al x (im a (im b c))))))
    (bitr ((im (ex x (an a b)) c) (al x (im (an a b) c)) (al x (im a (im b c)))))
    (eexb (x (an a b) c)))
  (aleqi (x (im (an a b) c) (im a (im b c)))
    (impexp (a b c)))))

(local theorem iexeh ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (iff b c))))
  (im c (ex x b))
()
(mpi (c (ex x (eq x a)) (ex x b))
  (ax_6 (a x))
  (syl (c (al x (im (eq x a) b)) (im (ex x (eq x a)) (ex x b)))
    (exim (x (eq x a) b))
    (ialdh (x c (im (eq x a) b))
      h
      (com12 ((eq x a) c b)
        (bi2d ((eq x a) b c)
          e))))))

(local theorem ealeh ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (iff b c))))
  (im (al x b) c)
()
(ax_mp ((im (not c) (not (al x b))) (im (al x b) c))
  (ax_3 (c (al x b)))
  (sylib ((not c) (ex x (not b)) (not (al x b)))
    (exnal (x b))
    (iexeh (x a (not b) (not c))
      (nfnot (x c)
        h)
      (noteqd ((eq x a) b c)
        e)))))

(local theorem alim1 ((x nat) (a wff ()) (b wff (x))) ()
  (iff (al x (im a b)) (im a (al x b)))
()
(ibii ((al x (im a b)) (im a (al x b)))
  (com12 (a (al x (im a b)) (al x b))
    (alimd (x a (im a b) b)
      (mpcom (a b))))
  (ialdh (x (im a (al x b)) (im a b))
    (nfim (x a (al x b))
      (nfv (a x))
      (nfal1 (x b)))
    (imim2i (a (al x b) b)
      (eal (x b))))))

(local theorem ralim1 ((x nat) (a wff ()) (p wff (x)) (b wff (x))) ()
  (iff (al x (im p (im a b))) (im a (al x (im p b))))
()
(ax_mp ((iff (al x (im a (im p b))) (im a (al x (im p b)))) (iff (al x (im p (im a b))) (im a (al x (im p b)))))
  (ax_mp ((iff (al x (im p (im a b))) (al x (im a (im p b)))) (im (iff (al x (im a (im p b))) (im a (al x (im p b)))) (iff (al x (im p (im a b))) (im a (al x (im p b))))))
    (bitr ((al x (im p (im a b))) (al x (im a (im p b))) (im a (al x (im p b)))))
    (aleqi (x (im p (im a b)) (im a (im p b)))
      (com12b (p a b))))
  (alim1 (x a (im p b)))))

(local theorem ralalcomb ((x nat) (y nat) (p wff (x)) (a wff (x y))) ()
  (iff (al x (im p (al y a))) (al y (al x (im p a))))
()
(ax_mp ((iff (al x (al y (im p a))) (al y (al x (im p a)))) (iff (al x (im p (al y a))) (al y (al x (im p a)))))
  (ax_mp ((iff (al x (al y (im p a))) (al x (im p (al y a)))) (im (iff (al x (al y (im p a))) (al y (al x (im p a)))) (iff (al x (im p (al y a))) (al y (al x (im p a))))))
    (bitr3 ((al x (im p (al y a))) (al x (al y (im p a))) (al y (al x (im p a)))))
    (aleqi (x (al y (im p a)) (im p (al y a)))
      (alim1 (y p a))))
  (alcomb (x y (im p a)))))

(local theorem ralcomb ((x nat) (y nat) (p wff (x)) (q wff (y)) (a wff (x y))) ()
  (iff (al x (im p (al y (im q a)))) (al y (im q (al x (im p a)))))
()
(ax_mp ((iff (al y (al x (im p (im q a)))) (al y (im q (al x (im p a))))) (iff (al x (im p (al y (im q a)))) (al y (im q (al x (im p a))))))
  (ax_mp ((iff (al x (im p (al y (im q a)))) (al y (al x (im p (im q a))))) (im (iff (al y (al x (im p (im q a)))) (al y (im q (al x (im p a))))) (iff (al x (im p (al y (im q a)))) (al y (im q (al x (im p a)))))))
    (bitr ((al x (im p (al y (im q a)))) (al y (al x (im p (im q a)))) (al y (im q (al x (im p a))))))
    (ralalcomb (x y p (im q a))))
  (aleqi (y (al x (im p (im q a))) (im q (al x (im p a))))
    (ralim1 (x q p a)))))

(local theorem exal ((x nat) (y nat) (a wff (x y))) ()
  (im (ex x (al y a)) (al y (ex x a)))
()
(eexh (x (al y a) (al y (ex x a)))
  (nfal (x y (ex x a))
    (nfex1 (x a)))
  (alimi (y a (ex x a))
    (iex (x a)))))

(local theorem exral ((x nat) (y nat) (a wff (y)) (b wff (x y))) ()
  (im (ex x (al y (im a b))) (al y (im a (ex x b))))
()
(rsyl ((ex x (al y (im a b))) (al y (ex x (im a b))) (al y (im a (ex x b))))
  (exal (x y (im a b)))
  (alimi (y (ex x (im a b)) (im a (ex x b)))
    (exim1 (x a b)))))

(local theorem rexal ((x nat) (y nat) (a wff (x)) (b wff (x y))) ()
  (im (ex x (an a (al y b))) (al y (ex x (an a b))))
()
(sylbir ((ex x (an a (al y b))) (ex x (al y (an a b))) (al y (ex x (an a b))))
  (exeqi (x (al y (an a b)) (an a (al y b)))
    (alan1 (a y b)))
  (exal (x y (an a b)))))

(local theorem rexim1 ((b wff ()) (x nat) (a wff (x)) (c wff (x))) ()
  (im (ex x (an a (im b c))) (im b (ex x (an a c))))
()
(com12 (b (ex x (an a (im b c))) (ex x (an a c)))
  (eximd (x b (an a (im b c)) (an a c))
    (anim2d (b a (im b c) c)
      (mpcom (b c))))))

(local theorem rexral ((x nat) (y nat) (a wff (x)) (b wff (y)) (c wff (x y))) ()
  (im (ex x (an a (al y (im b c)))) (al y (im b (ex x (an a c)))))
()
(syl ((ex x (an a (al y (im b c)))) (ex x (al y (im b (an a c)))) (al y (im b (ex x (an a c)))))
  (exral (x y b (an a c)))
  (eximi (x (an a (al y (im b c))) (al y (im b (an a c))))
    (sylbir ((an a (al y (im b c))) (al y (an a (im b c))) (al y (im b (an a c))))
      (alan1 (a y (im b c)))
      (alimi (y (an a (im b c)) (im b (an a c)))
        (imancom (a b c)))))))

(local theorem eqerd ((G wff ()) (a nat ()) (p wff ()) (x nat))
  ((h (im G (im (eq a x) p))))
  (im G p)
()
(mpi (G (ex x (eq x a)) p)
  (ax_6 (a x))
  (eexd (x G (eq x a) p)
    (syl5 (G (eq x a) (eq a x) p)
      (eqcom (x a))
      h))))

(local theorem eale ((x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (eq x a) (iff b c))))
  (im (al x b) c)
()
(ealeh (x a b c)
  (nfv (c x))
  e))

(local theorem iexdeh ((x nat) (a nat ()) (G wff (x)) (b wff (x)))
  ((h (nf x G))
   (e (im (an G (eq x a)) b)))
  (im G (ex x b))
()
(mpi (G (ex x (eq x a)) (ex x b))
  (ax_6 (a x))
  (syl (G (al x (im (eq x a) b)) (im (ex x (eq x a)) (ex x b)))
    (exim (x (eq x a) b))
    (ialdh (x G (im (eq x a) b))
      h
      (exp (G (eq x a) b)
        e)))))

(local theorem iexde ((x nat) (G wff ()) (a nat ()) (b wff (x)))
  ((e (im (an G (eq x a)) b)))
  (im G (ex x b))
()
(iexdeh (x a G b)
  (nfv (G x))
  e))

(local theorem iexdde ((x nat) (G wff ()) (b wff ()) (a nat ()) (c wff (x)))
  ((e (im (an G (eq x a)) (im b c))))
  (im G (im b (ex x c)))
()
(exp (G b (ex x c))
  (iexde (x (an G b) a c)
    (imp ((an G b) (eq x a) c)
      (imp (G b (im (eq x a) c))
        (com23 (G (eq x a) b c)
          (exp (G (eq x a) (im b c))
            e)))))))

(local theorem iexie ((x nat) (a nat ()) (b wff (x)))
  ((e (im (eq x a) b)))
  (ex x b)
()
(trud ((ex x b))
  (iexde (x (tru) a b)
    (anwr ((tru) (eq x a) b)
      e))))

(local theorem iexe ((x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (eq x a) (iff b c))))
  (im c (ex x b))
()
(iexde (x c a b)
  (mpbird ((an c (eq x a)) c b)
    (anwr (c (eq x a) (iff b c))
      e)
    (anl (c (eq x a))))))

(local theorem ealdeh ((x nat) (a nat ()) (G wff (x)) (b wff (x)) (c wff (x)))
  ((h1 (nf x G))
   (h2 (nf x c))
   (e (im (an G (eq x a)) (im b c))))
  (im G (im (al x b) c))
()
(con4d (G c (al x b))
  (exp (G (not c) (not (al x b)))
    (sylib ((an G (not c)) (ex x (not b)) (not (al x b)))
      (exnal (x b))
      (iexdeh (x a (an G (not c)) (not b))
        (nfan (x G (not c))
          h1
          (nfnot (x c)
            h2))
        (anrasss (G (eq x a) (not c) (not b))
          (imp ((an G (eq x a)) (not c) (not b))
            (con3d ((an G (eq x a)) b c)
              e))))))))

(local theorem ealieh ((c wff ()) (x nat) (a nat ()) (b wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (im b c))))
  (im (al x b) c)
()
(trud ((im (al x b) c))
  (ealdeh (x a (tru) b c)
    (nfv ((tru) x))
    h
    (anwr ((tru) (eq x a) (im b c))
      e))))

(local theorem ealde ((c wff ()) (x nat) (G wff ()) (a nat ()) (b wff (x)))
  ((e (im (an G (eq x a)) (im b c))))
  (im G (im (al x b) c))
()
(ealdeh (x a G b c)
  (nfv (G x))
  (nfv (c x))
  e))

(local theorem ealie ((c wff ()) (x nat) (a nat ()) (b wff (x)))
  ((e (im (eq x a) (im b c))))
  (im (al x b) c)
()
(ealieh (c x a b)
  (nfv (c x))
  e))

(local theorem exan1 ((x nat) (a wff ()) (b wff (x))) ()
  (iff (ex x (an a b)) (an a (ex x b)))
()
(ibii ((ex x (an a b)) (an a (ex x b)))
  (iand ((ex x (an a b)) a (ex x b))
    (eex (x (an a b) a)
      (anl (a b)))
    (eximi (x (an a b) b)
      (anr (a b))))
  (imp (a (ex x b) (ex x (an a b)))
    (eximd (x a b (an a b))
      (ian (a b))))))

(local theorem exan2 ((x nat) (a wff (x)) (b wff ())) ()
  (iff (ex x (an a b)) (an (ex x a) b))
()
(ax_mp ((iff (ex x (an b a)) (an (ex x a) b)) (iff (ex x (an a b)) (an (ex x a) b)))
  (ax_mp ((iff (ex x (an a b)) (ex x (an b a))) (im (iff (ex x (an b a)) (an (ex x a) b)) (iff (ex x (an a b)) (an (ex x a) b))))
    (bitr ((ex x (an a b)) (ex x (an b a)) (an (ex x a) b)))
    (exeqi (x (an a b) (an b a))
      (ancomb (a b))))
  (ax_mp ((iff (an b (ex x a)) (an (ex x a) b)) (iff (ex x (an b a)) (an (ex x a) b)))
    (ax_mp ((iff (ex x (an b a)) (an b (ex x a))) (im (iff (an b (ex x a)) (an (ex x a) b)) (iff (ex x (an b a)) (an (ex x a) b))))
      (bitr ((ex x (an b a)) (an b (ex x a)) (an (ex x a) b)))
      (exan1 (x b a)))
    (ancomb (b (ex x a))))))

(local theorem bian1exi ((b wff ()) (x nat) (a wff (x)) (c wff (x)))
  ((h (iff a (an b c))))
  (iff (ex x a) (an b (ex x c)))
()
(ax_mp ((iff (ex x (an b c)) (an b (ex x c))) (iff (ex x a) (an b (ex x c))))
  (ax_mp ((iff (ex x a) (ex x (an b c))) (im (iff (ex x (an b c)) (an b (ex x c))) (iff (ex x a) (an b (ex x c)))))
    (bitr ((ex x a) (ex x (an b c)) (an b (ex x c))))
    (exeqi (x a (an b c))
      h))
  (exan1 (x b c))))

(local theorem bian2exi ((c wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (iff a (an b c))))
  (iff (ex x a) (an (ex x b) c))
()
(ax_mp ((iff (ex x (an b c)) (an (ex x b) c)) (iff (ex x a) (an (ex x b) c)))
  (ax_mp ((iff (ex x a) (ex x (an b c))) (im (iff (ex x (an b c)) (an (ex x b) c)) (iff (ex x a) (an (ex x b) c))))
    (bitr ((ex x a) (ex x (an b c)) (an (ex x b) c)))
    (exeqi (x a (an b c))
      h))
  (exan2 (x b c))))

(local theorem bian1exd ((G wff ()) (b wff ()) (x nat) (a wff (x)) (c wff (x)))
  ((h (im G (iff a (an b c)))))
  (im G (iff (ex x a) (an b (ex x c))))
()
(syl6bb (G (ex x a) (ex x (an b c)) (an b (ex x c)))
  (exan1 (x b c))
  (exeqd (G x a (an b c))
    h)))

(local theorem bian2exd ((G wff ()) (c wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (im G (iff a (an b c)))))
  (im G (iff (ex x a) (an (ex x b) c)))
()
(syl6bb (G (ex x a) (ex x (an b c)) (an (ex x b) c))
  (exan2 (x b c))
  (exeqd (G x a (an b c))
    h)))

(local theorem biexexi ((x nat) (y nat) (a wff (x y)) (b wff (x y)))
  ((h (iff a (ex y b))))
  (iff (ex x a) (ex y (ex x b)))
()
(ax_mp ((iff (ex y (ex x b)) (ex x (ex y b))) (iff (ex x a) (ex y (ex x b))))
  (ax_mp ((iff (ex x a) (ex x (ex y b))) (im (iff (ex y (ex x b)) (ex x (ex y b))) (iff (ex x a) (ex y (ex x b)))))
    (bitr4 ((ex x a) (ex x (ex y b)) (ex y (ex x b))))
    (exeqi (x a (ex y b))
      h))
  (excomb (y x b))))

(local theorem biexan1a ((c wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (im c (iff a (ex x b)))))
  (iff (an a c) (ex x (an b c)))
()
(ax_mp ((iff (ex x (an b c)) (an (ex x b) c)) (iff (an a c) (ex x (an b c))))
  (ax_mp ((iff (an a c) (an (ex x b) c)) (im (iff (ex x (an b c)) (an (ex x b) c)) (iff (an a c) (ex x (an b c)))))
    (bitr4 ((an a c) (an (ex x b) c) (ex x (an b c))))
    (ax_mp ((im c (iff a (ex x b))) (iff (an a c) (an (ex x b) c)))
      (aneq1a (a (ex x b) c))
      h))
  (exan2 (x b c))))

(local theorem biexan2a ((a wff ()) (x nat) (b wff (x)) (c wff (x)))
  ((h (im a (iff b (ex x c)))))
  (iff (an a b) (ex x (an a c)))
()
(ax_mp ((iff (ex x (an a c)) (an a (ex x c))) (iff (an a b) (ex x (an a c))))
  (ax_mp ((iff (an a b) (an a (ex x c))) (im (iff (ex x (an a c)) (an a (ex x c))) (iff (an a b) (ex x (an a c)))))
    (bitr4 ((an a b) (an a (ex x c)) (ex x (an a c))))
    (ax_mp ((im a (iff b (ex x c))) (iff (an a b) (an a (ex x c))))
      (aneq2a (a b (ex x c)))
      h))
  (exan1 (x a c))))

(local theorem biexan1i ((c wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (iff a (ex x b))))
  (iff (an a c) (ex x (an b c)))
()
(biexan1a (c x a b)
  (a1i (c (iff a (ex x b)))
    h)))

(local theorem biexan2i ((a wff ()) (x nat) (b wff (x)) (c wff (x)))
  ((h (iff b (ex x c))))
  (iff (an a b) (ex x (an a c)))
()
(biexan2a (a x b c)
  (a1i (a (iff b (ex x c)))
    h)))

(local theorem rexexcomb ((x nat) (y nat) (p wff (x)) (a wff (x y))) ()
  (iff (ex x (an p (ex y a))) (ex y (ex x (an p a))))
()
(ax_mp ((iff (ex x (ex y (an p a))) (ex y (ex x (an p a)))) (iff (ex x (an p (ex y a))) (ex y (ex x (an p a)))))
  (ax_mp ((iff (ex x (ex y (an p a))) (ex x (an p (ex y a)))) (im (iff (ex x (ex y (an p a))) (ex y (ex x (an p a)))) (iff (ex x (an p (ex y a))) (ex y (ex x (an p a))))))
    (bitr3 ((ex x (an p (ex y a))) (ex x (ex y (an p a))) (ex y (ex x (an p a)))))
    (exeqi (x (ex y (an p a)) (an p (ex y a)))
      (exan1 (y p a))))
  (excomb (x y (an p a)))))

(local theorem birexexi ((x nat) (y nat) (a wff (x y)) (b wff (x y)) (q wff (y)))
  ((h (iff a (ex y (an q b)))))
  (iff (ex x a) (ex y (an q (ex x b))))
()
(ax_mp ((iff (ex y (an q (ex x b))) (ex x (ex y (an q b)))) (iff (ex x a) (ex y (an q (ex x b)))))
  (ax_mp ((iff (ex x a) (ex x (ex y (an q b)))) (im (iff (ex y (an q (ex x b))) (ex x (ex y (an q b)))) (iff (ex x a) (ex y (an q (ex x b))))))
    (bitr4 ((ex x a) (ex x (ex y (an q b))) (ex y (an q (ex x b)))))
    (exeqi (x a (ex y (an q b)))
      h))
  (rexexcomb (y x q b))))

(local theorem biexrexa ((x nat) (y nat) (p wff (x)) (a wff (x y)) (b wff (x y)))
  ((h (im p (iff a (ex y b)))))
  (iff (ex x (an p a)) (ex y (ex x (an p b))))
()
(ax_mp ((iff (ex x (an p (ex y b))) (ex y (ex x (an p b)))) (iff (ex x (an p a)) (ex y (ex x (an p b)))))
  (ax_mp ((iff (ex x (an p a)) (ex x (an p (ex y b)))) (im (iff (ex x (an p (ex y b))) (ex y (ex x (an p b)))) (iff (ex x (an p a)) (ex y (ex x (an p b))))))
    (bitr ((ex x (an p a)) (ex x (an p (ex y b))) (ex y (ex x (an p b)))))
    (rexeqa (x p a (ex y b))
      h))
  (rexexcomb (x y p b))))

(local theorem biexrexi ((x nat) (y nat) (p wff (x)) (a wff (x y)) (b wff (x y)))
  ((h (iff a (ex y b))))
  (iff (ex x (an p a)) (ex y (ex x (an p b))))
()
(biexrexa (x y p a b)
  (a1i (p (iff a (ex y b)))
    h)))

(local theorem rexcomb ((x nat) (y nat) (p wff (x)) (q wff (y)) (a wff (x y))) ()
  (iff (ex x (an p (ex y (an q a)))) (ex y (an q (ex x (an p a)))))
()
(ax_mp ((iff (ex y (ex x (an p (an q a)))) (ex y (an q (ex x (an p a))))) (iff (ex x (an p (ex y (an q a)))) (ex y (an q (ex x (an p a))))))
  (ax_mp ((iff (ex x (an p (ex y (an q a)))) (ex y (ex x (an p (an q a))))) (im (iff (ex y (ex x (an p (an q a)))) (ex y (an q (ex x (an p a))))) (iff (ex x (an p (ex y (an q a)))) (ex y (an q (ex x (an p a)))))))
    (bitr ((ex x (an p (ex y (an q a)))) (ex y (ex x (an p (an q a)))) (ex y (an q (ex x (an p a))))))
    (rexexcomb (x y p (an q a))))
  (exeqi (y (ex x (an p (an q a))) (an q (ex x (an p a))))
    (ax_mp ((iff (ex x (an q (an p a))) (an q (ex x (an p a)))) (iff (ex x (an p (an q a))) (an q (ex x (an p a)))))
      (ax_mp ((iff (ex x (an p (an q a))) (ex x (an q (an p a)))) (im (iff (ex x (an q (an p a))) (an q (ex x (an p a)))) (iff (ex x (an p (an q a))) (an q (ex x (an p a))))))
        (bitr ((ex x (an p (an q a))) (ex x (an q (an p a))) (an q (ex x (an p a)))))
        (exeqi (x (an p (an q a)) (an q (an p a)))
          (anlass (p q a))))
      (exan1 (x q (an p a)))))))

(local theorem birexan1a ((c wff ()) (x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (im c (iff a (ex x (an p b))))))
  (iff (an a c) (ex x (an p (an b c))))
()
(ax_mp ((iff (ex x (an (an p b) c)) (ex x (an p (an b c)))) (iff (an a c) (ex x (an p (an b c)))))
  (ax_mp ((iff (an a c) (ex x (an (an p b) c))) (im (iff (ex x (an (an p b) c)) (ex x (an p (an b c)))) (iff (an a c) (ex x (an p (an b c))))))
    (bitr ((an a c) (ex x (an (an p b) c)) (ex x (an p (an b c)))))
    (biexan1a (c x a (an p b))
      h))
  (exeqi (x (an (an p b) c) (an p (an b c)))
    (anass (p b c)))))

(local theorem birexan2a ((a wff ()) (x nat) (p wff (x)) (b wff (x)) (c wff (x)))
  ((h (im a (iff b (ex x (an p c))))))
  (iff (an a b) (ex x (an p (an a c))))
()
(ax_mp ((iff (ex x (an a (an p c))) (ex x (an p (an a c)))) (iff (an a b) (ex x (an p (an a c)))))
  (ax_mp ((iff (an a b) (ex x (an a (an p c)))) (im (iff (ex x (an a (an p c))) (ex x (an p (an a c)))) (iff (an a b) (ex x (an p (an a c))))))
    (bitr ((an a b) (ex x (an a (an p c))) (ex x (an p (an a c)))))
    (biexan2a (a x b (an p c))
      h))
  (exeqi (x (an a (an p c)) (an p (an a c)))
    (anlass (a p c)))))

(local theorem birexrexa ((x nat) (y nat) (q wff (y)) (p wff (x)) (a wff (x y)) (b wff (x y)))
  ((h (im p (iff a (ex y (an q b))))))
  (iff (ex x (an p a)) (ex y (an q (ex x (an p b)))))
()
(birexexi (x y (an p a) (an p b) q)
  (birexan2a (p y q a b)
    h)))

(local theorem birexan1i ((c wff ()) (x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (iff a (ex x (an p b)))))
  (iff (an a c) (ex x (an p (an b c))))
()
(birexan1a (c x p a b)
  (a1i (c (iff a (ex x (an p b))))
    h)))

(local theorem birexan2i ((a wff ()) (x nat) (p wff (x)) (b wff (x)) (c wff (x)))
  ((h (iff b (ex x (an p c)))))
  (iff (an a b) (ex x (an p (an a c))))
()
(birexan2a (a x p b c)
  (a1i (a (iff b (ex x (an p c))))
    h)))

(local theorem birexrexi ((x nat) (y nat) (q wff (y)) (p wff (x)) (a wff (x y)) (b wff (x y)))
  ((h (iff a (ex y (an q b)))))
  (iff (ex x (an p a)) (ex y (an q (ex x (an p b)))))
()
(birexrexa (x y q p a b)
  (a1i (p (iff a (ex y (an q b))))
    h)))

(local theorem rexan1 ((x nat) (a wff ()) (p wff (x)) (b wff (x))) ()
  (iff (ex x (an p (an a b))) (an a (ex x (an p b))))
()
(ax_mp ((iff (ex x (an a (an p b))) (an a (ex x (an p b)))) (iff (ex x (an p (an a b))) (an a (ex x (an p b)))))
  (ax_mp ((iff (ex x (an p (an a b))) (ex x (an a (an p b)))) (im (iff (ex x (an a (an p b))) (an a (ex x (an p b)))) (iff (ex x (an p (an a b))) (an a (ex x (an p b))))))
    (bitr ((ex x (an p (an a b))) (ex x (an a (an p b))) (an a (ex x (an p b)))))
    (exeqi (x (an p (an a b)) (an a (an p b)))
      (anlass (p a b))))
  (exan1 (x a (an p b)))))

(local theorem rexan2 ((x nat) (p wff (x)) (a wff (x)) (b wff ())) ()
  (iff (ex x (an p (an a b))) (an (ex x (an p a)) b))
()
(ax_mp ((iff (ex x (an (an p a) b)) (an (ex x (an p a)) b)) (iff (ex x (an p (an a b))) (an (ex x (an p a)) b)))
  (ax_mp ((iff (ex x (an (an p a) b)) (ex x (an p (an a b)))) (im (iff (ex x (an (an p a) b)) (an (ex x (an p a)) b)) (iff (ex x (an p (an a b))) (an (ex x (an p a)) b))))
    (bitr3 ((ex x (an p (an a b))) (ex x (an (an p a) b)) (an (ex x (an p a)) b)))
    (exeqi (x (an (an p a) b) (an p (an a b)))
      (anass (p a b))))
  (exan2 (x (an p a) b))))

(local theorem bian1rexa ((b wff ()) (x nat) (p wff (x)) (a wff (x)) (c wff (x)))
  ((h (im p (iff a (an b c)))))
  (iff (ex x (an p a)) (an b (ex x (an p c))))
()
(ax_mp ((iff (ex x (an p (an b c))) (an b (ex x (an p c)))) (iff (ex x (an p a)) (an b (ex x (an p c)))))
  (ax_mp ((iff (ex x (an p a)) (ex x (an p (an b c)))) (im (iff (ex x (an p (an b c))) (an b (ex x (an p c)))) (iff (ex x (an p a)) (an b (ex x (an p c))))))
    (bitr ((ex x (an p a)) (ex x (an p (an b c))) (an b (ex x (an p c)))))
    (rexeqa (x p a (an b c))
      h))
  (rexan1 (x b p c))))

(local theorem bian2rexa ((c wff ()) (x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (im p (iff a (an b c)))))
  (iff (ex x (an p a)) (an (ex x (an p b)) c))
()
(ax_mp ((iff (ex x (an p (an b c))) (an (ex x (an p b)) c)) (iff (ex x (an p a)) (an (ex x (an p b)) c)))
  (ax_mp ((iff (ex x (an p a)) (ex x (an p (an b c)))) (im (iff (ex x (an p (an b c))) (an (ex x (an p b)) c)) (iff (ex x (an p a)) (an (ex x (an p b)) c))))
    (bitr ((ex x (an p a)) (ex x (an p (an b c))) (an (ex x (an p b)) c)))
    (rexeqa (x p a (an b c))
      h))
  (rexan2 (x p b c))))

(local theorem bian1rexi ((b wff ()) (x nat) (p wff (x)) (a wff (x)) (c wff (x)))
  ((h (iff a (an b c))))
  (iff (ex x (an p a)) (an b (ex x (an p c))))
()
(bian1rexa (b x p a c)
  (a1i (p (iff a (an b c)))
    h)))

(local theorem bian2rexi ((c wff ()) (x nat) (p wff (x)) (a wff (x)) (b wff (x)))
  ((h (iff a (an b c))))
  (iff (ex x (an p a)) (an (ex x (an p b)) c))
()
(bian2rexa (c x p a b)
  (a1i (p (iff a (an b c)))
    h)))

(local theorem alexan ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x a) (im (ex x b) (ex x (an a b))))
()
(syl ((al x a) (al x (im b (an a b))) (im (ex x b) (ex x (an a b))))
  (exim (x b (an a b)))
  (alimi (x a (im b (an a b)))
    (ian (a b)))))

(local theorem exifp ((p wff ()) (x nat) (a wff (x)) (b wff (x))) ()
  (iff (ex x (ifp p a b)) (ifp p (ex x a) (ex x b)))
()
(ax_mp ((iff (or (ex x (an p a)) (ex x (an (not p) b))) (ifp p (ex x a) (ex x b))) (iff (ex x (ifp p a b)) (ifp p (ex x a) (ex x b))))
  (ax_mp ((iff (ex x (ifp p a b)) (or (ex x (an p a)) (ex x (an (not p) b)))) (im (iff (or (ex x (an p a)) (ex x (an (not p) b))) (ifp p (ex x a) (ex x b))) (iff (ex x (ifp p a b)) (ifp p (ex x a) (ex x b)))))
    (bitr ((ex x (ifp p a b)) (or (ex x (an p a)) (ex x (an (not p) b))) (ifp p (ex x a) (ex x b))))
    (:conv (iff (ex x (ifp p a b)) (or (ex x (an p a)) (ex x (an (not p) b))))
      (iff
        (ex
          x
          (:unfold ifp (p a b) ()
            (or (an p a) (an (not p) b))))
        (or (ex x (an p a)) (ex x (an (not p) b))))
      (exor (x (an p a) (an (not p) b)))))
  (ax_mp ((iff (ex x (an (not p) b)) (an (not p) (ex x b))) (iff (or (ex x (an p a)) (ex x (an (not p) b))) (ifp p (ex x a) (ex x b))))
    (ax_mp ((iff (ex x (an p a)) (an p (ex x a))) (im (iff (ex x (an (not p) b)) (an (not p) (ex x b))) (iff (or (ex x (an p a)) (ex x (an (not p) b))) (ifp p (ex x a) (ex x b)))))
      (:conv (im (iff (ex x (an p a)) (an p (ex x a))) (im (iff (ex x (an (not p) b)) (an (not p) (ex x b))) (iff (or (ex x (an p a)) (ex x (an (not p) b))) (ifp p (ex x a) (ex x b)))))
        (im
          (iff (ex x (an p a)) (an p (ex x a)))
          (im
            (iff (ex x (an (not p) b)) (an (not p) (ex x b)))
            (iff
              (or (ex x (an p a)) (ex x (an (not p) b)))
              (:unfold ifp (p (ex x a) (ex x b)) ()
                (or (an p (ex x a)) (an (not p) (ex x b)))))))
        (oreq ((ex x (an p a)) (an p (ex x a)) (ex x (an (not p) b)) (an (not p) (ex x b)))))
      (exan1 (x p a)))
    (exan1 (x (not p) b)))))

(local theorem cbvalh ((x nat) (y nat) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (iff (al x p) (al y q))
()
(ibii ((al x p) (al y q))
  (ialdh (y (al x p) q)
    (nfal (y x p)
      h1)
    (ealeh (x y p q)
      h2
      e))
  (ialdh (x (al y q) p)
    (nfal (x y q)
      h2)
    (ealeh (y x q p)
      h1
      (bicomd ((eq y x) p q)
        (syl ((eq y x) (eq x y) (iff p q))
          e
          (eqcom (y x))))))))

(local theorem cbval ((x nat) (y nat) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (iff (al x p) (al y q))
()
(cbvalh (x y p q)
  (nfv (p y))
  (nfv (q x))
  e))

(local theorem cbvexh ((x nat) (y nat) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (iff (ex x p) (ex y q))
()
(ax_mp ((iff (al x (not p)) (al y (not q))) (iff (ex x p) (ex y q)))
  (:conv (im (iff (al x (not p)) (al y (not q))) (iff (ex x p) (ex y q)))
    (im
      (iff (al x (not p)) (al y (not q)))
      (iff
        (:unfold ex (x p) ()
          (not (al x (not p))))
        (:unfold ex (y q) ()
          (not (al y (not q))))))
    (noteq ((al x (not p)) (al y (not q)))))
  (cbvalh (x y (not p) (not q))
    (nfnot (y p)
      h1)
    (nfnot (x q)
      h2)
    (noteqd ((eq x y) p q)
      e))))

(local theorem cbvex ((x nat) (y nat) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (iff (ex x p) (ex y q))
()
(cbvexh (x y p q)
  (nfv (p y))
  (nfv (q x))
  e))

(local def pim ((x nat) (p wff (x)) (q wff (x))) (wff ())
()
(an (ex x p) (al x (im p q))))

(local theorem pimex ((x nat) (p wff (x)) (q wff (x))) ()
  (im (pim x p q) (ex x p))
()
(:conv (im (pim x p q) (ex x p))
  (im
    (:unfold pim (x p q) ()
      (an (ex x p) (al x (im p q))))
    (ex x p))
  (anl ((ex x p) (al x (im p q))))))

(local theorem pimal ((x nat) (p wff (x)) (q wff (x))) ()
  (im (pim x p q) (al x (im p q)))
()
(:conv (im (pim x p q) (al x (im p q)))
  (im
    (:unfold pim (x p q) ()
      (an (ex x p) (al x (im p q))))
    (al x (im p q)))
  (anr ((ex x p) (al x (im p q))))))

(local theorem pimex2 ((x nat) (p wff (x)) (q wff (x))) ()
  (im (pim x p q) (ex x q))
()
(:conv (im (pim x p q) (ex x q))
  (im
    (:unfold pim (x p q) ()
      (an (ex x p) (al x (im p q))))
    (ex x q))
  (impcom ((al x (im p q)) (ex x p) (ex x q))
    (exim (x p q)))))

(local theorem pimex12 ((x nat) (p wff (x)) (q wff (x))) ()
  (im (pim x p q) (ex x (an p q)))
()
(:conv (im (pim x p q) (ex x (an p q)))
  (im
    (:unfold pim (x p q) ()
      (an (ex x p) (al x (im p q))))
    (ex x (an p q)))
  (impcom ((al x (im p q)) (ex x p) (ex x (an p q)))
    (syl ((al x (im p q)) (al x (im p (an p q))) (im (ex x p) (ex x (an p q))))
      (exim (x p (an p q)))
      (alimi (x (im p q) (im p (an p q)))
        (a2i (p q (an p q))
          (ian (p q))))))))

(local theorem pimeq ((p wff ()) (q wff ()) (x nat)) ()
  (im (pim x p q) (al x (im p q)))
()
(:conv (im (pim x p q) (al x (im p q)))
  (im
    (:unfold pim (x p q) ()
      (an (ex x p) (al x (im p q))))
    (al x (im p q)))
  (anr ((ex x p) (al x (im p q))))))

(local theorem pimeq1 ((x nat) (p1 wff (x)) (p2 wff (x)) (q wff (x))) ()
  (im (al x (iff p1 p2)) (iff (pim x p1 q) (pim x p2 q)))
()
(:conv (im (al x (iff p1 p2)) (iff (pim x p1 q) (pim x p2 q)))
  (im
    (al x (iff p1 p2))
    (iff
      (:unfold pim (x p1 q) ()
        (an (ex x p1) (al x (im p1 q))))
      (:unfold pim (x p2 q) ()
        (an (ex x p2) (al x (im p2 q))))))
  (aneqd ((al x (iff p1 p2)) (ex x p1) (ex x p2) (al x (im p1 q)) (al x (im p2 q)))
    (exeq (x p1 p2))
    (syl ((al x (iff p1 p2)) (al x (iff (im p1 q) (im p2 q))) (iff (al x (im p1 q)) (al x (im p2 q))))
      (aleq (x (im p1 q) (im p2 q)))
      (alimi (x (iff p1 p2) (iff (im p1 q) (im p2 q)))
        (imeq1d ((iff p1 p2) p1 p2 q)
          (id ((iff p1 p2)))))))))

(local theorem pimim2 ((x nat) (p wff (x)) (q1 wff (x)) (q2 wff (x))) ()
  (im (al x (im q1 q2)) (im (pim x p q1) (pim x p q2)))
()
(:conv (im (al x (im q1 q2)) (im (pim x p q1) (pim x p q2)))
  (im
    (al x (im q1 q2))
    (im
      (:unfold pim (x p q1) ()
        (an (ex x p) (al x (im p q1))))
      (:unfold pim (x p q2) ()
        (an (ex x p) (al x (im p q2))))))
  (anim2d ((al x (im q1 q2)) (ex x p) (al x (im p q1)) (al x (im p q2)))
    (al2imi (x (im q1 q2) (im p q1) (im p q2))
      (imim2 (p q1 q2))))))

(local theorem pimim2i ((x nat) (p wff (x)) (q1 wff (x)) (q2 wff (x)))
  ((h (im q1 q2)))
  (im (pim x p q1) (pim x p q2))
()
(ax_mp ((al x (im q1 q2)) (im (pim x p q1) (pim x p q2)))
  (pimim2 (x p q1 q2))
  (ax_gen (x (im q1 q2))
    h)))

(local theorem pimim2d ((G wff ()) (x nat) (p wff (x)) (q1 wff (x)) (q2 wff (x)))
  ((h (im G (im q1 q2))))
  (im G (im (pim x p q1) (pim x p q2)))
()
(syl (G (al x (im q1 q2)) (im (pim x p q1) (pim x p q2)))
  (pimim2 (x p q1 q2))
  (iald (x G (im q1 q2))
    h)))

(local theorem pimeq2a ((x nat) (p wff (x)) (q1 wff (x)) (q2 wff (x))) ()
  (im (al x (im p (iff q1 q2))) (iff (pim x p q1) (pim x p q2)))
()
(:conv (im (al x (im p (iff q1 q2))) (iff (pim x p q1) (pim x p q2)))
  (im
    (al x (im p (iff q1 q2)))
    (iff
      (:unfold pim (x p q1) ()
        (an (ex x p) (al x (im p q1))))
      (:unfold pim (x p q2) ()
        (an (ex x p) (al x (im p q2))))))
  (aneq2d ((al x (im p (iff q1 q2))) (ex x p) (al x (im p q1)) (al x (im p q2)))
    (syl ((al x (im p (iff q1 q2))) (al x (iff (im p q1) (im p q2))) (iff (al x (im p q1)) (al x (im p q2))))
      (aleq (x (im p q1) (im p q2)))
      (alimi (x (im p (iff q1 q2)) (iff (im p q1) (im p q2)))
        (imeq2a (p q1 q2)))))))

(local theorem pimeq2 ((x nat) (p wff (x)) (q1 wff (x)) (q2 wff (x))) ()
  (im (al x (iff q1 q2)) (iff (pim x p q1) (pim x p q2)))
()
(syl ((al x (iff q1 q2)) (al x (im p (iff q1 q2))) (iff (pim x p q1) (pim x p q2)))
  (pimeq2a (x p q1 q2))
  (alimi (x (iff q1 q2) (im p (iff q1 q2)))
    (ax_1 ((iff q1 q2) p)))))

(local theorem pimeq1d ((G wff ()) (x nat) (p1 wff (x)) (p2 wff (x)) (q wff (x)))
  ((h1 (im G (iff p1 p2))))
  (im G (iff (pim x p1 q) (pim x p2 q)))
()
(syl (G (al x (iff p1 p2)) (iff (pim x p1 q) (pim x p2 q)))
  (pimeq1 (x p1 p2 q))
  (iald (x G (iff p1 p2))
    h1)))

(local theorem pimeq2d ((G wff ()) (x nat) (p wff (x)) (q1 wff (x)) (q2 wff (x)))
  ((h1 (im G (iff q1 q2))))
  (im G (iff (pim x p q1) (pim x p q2)))
()
(syl (G (al x (iff q1 q2)) (iff (pim x p q1) (pim x p q2)))
  (pimeq2 (x p q1 q2))
  (iald (x G (iff q1 q2))
    h1)))

(local theorem pimeq1i ((x nat) (p1 wff (x)) (p2 wff (x)) (q wff (x)))
  ((h1 (iff p1 p2)))
  (iff (pim x p1 q) (pim x p2 q))
()
(trud ((iff (pim x p1 q) (pim x p2 q)))
  (pimeq1d ((tru) x p1 p2 q)
    (a1i ((tru) (iff p1 p2))
      h1))))

(local theorem pimeq2i ((x nat) (p wff (x)) (q1 wff (x)) (q2 wff (x)))
  ((h1 (iff q1 q2)))
  (iff (pim x p q1) (pim x p q2))
()
(trud ((iff (pim x p q1) (pim x p q2)))
  (pimeq2d ((tru) x p q1 q2)
    (a1i ((tru) (iff q1 q2))
      h1))))

(local theorem pimeqd ((G wff ()) (x nat) (p1 wff (x)) (p2 wff (x)) (q1 wff (x)) (q2 wff (x)))
  ((h1 (im G (iff p1 p2)))
   (h2 (im G (iff q1 q2))))
  (im G (iff (pim x p1 q1) (pim x p2 q2)))
()
(bitrd (G (pim x p1 q1) (pim x p2 q1) (pim x p2 q2))
  (pimeq1d (G x p1 p2 q1)
    h1)
  (pimeq2d (G x p2 q1 q2)
    h2)))

(local theorem cbvpimh ((x nat) (y nat) (p1 wff (x y)) (p2 wff (x y)) (q1 wff (x y)) (q2 wff (x y)))
  ((h1 (nf y p1))
   (h2 (nf y q1))
   (h3 (nf x p2))
   (h4 (nf x q2))
   (e1 (im (eq x y) (iff p1 p2)))
   (e2 (im (eq x y) (iff q1 q2))))
  (iff (pim x p1 q1) (pim y p2 q2))
()
(ax_mp ((iff (al x (im p1 q1)) (al y (im p2 q2))) (iff (pim x p1 q1) (pim y p2 q2)))
  (ax_mp ((iff (ex x p1) (ex y p2)) (im (iff (al x (im p1 q1)) (al y (im p2 q2))) (iff (pim x p1 q1) (pim y p2 q2))))
    (:conv (im (iff (ex x p1) (ex y p2)) (im (iff (al x (im p1 q1)) (al y (im p2 q2))) (iff (pim x p1 q1) (pim y p2 q2))))
      (im
        (iff (ex x p1) (ex y p2))
        (im
          (iff (al x (im p1 q1)) (al y (im p2 q2)))
          (iff
            (:unfold pim (x p1 q1) ()
              (an (ex x p1) (al x (im p1 q1))))
            (:unfold pim (y p2 q2) ()
              (an (ex y p2) (al y (im p2 q2)))))))
      (aneq ((ex x p1) (ex y p2) (al x (im p1 q1)) (al y (im p2 q2)))))
    (cbvexh (x y p1 p2)
      h1
      h3
      e1))
  (cbvalh (x y (im p1 q1) (im p2 q2))
    (nfim (y p1 q1)
      h1
      h2)
    (nfim (x p2 q2)
      h3
      h4)
    (imeqd ((eq x y) p1 p2 q1 q2)
      e1
      e2))))

(local theorem cbvpim ((x nat) (y nat) (p1 wff (x)) (q1 wff (x)) (p2 wff (y)) (q2 wff (y)))
  ((e1 (im (eq x y) (iff p1 p2)))
   (e2 (im (eq x y) (iff q1 q2))))
  (iff (pim x p1 q1) (pim y p2 q2))
()
(cbvpimh (x y p1 p2 q1 q2)
  (nfv (p1 y))
  (nfv (q1 y))
  (nfv (p2 x))
  (nfv (q2 x))
  e1
  e2))

(local theorem piman ((x nat) (a wff (x)) (b wff (x)) (c wff (x))) ()
  (im (an (pim x a b) (pim x a c)) (pim x a (an b c)))
()
(:conv (im (an (pim x a b) (pim x a c)) (pim x a (an b c)))
  (im
    (an (pim x a b) (pim x a c))
    (:unfold pim (x a (an b c)) ()
      (an (ex x a) (al x (im a (an b c))))))
  (iand ((an (pim x a b) (pim x a c)) (ex x a) (al x (im a (an b c))))
    (:conv (im (an (pim x a b) (pim x a c)) (ex x a))
      (im
        (an
          (:unfold pim (x a b) ()
            (an (ex x a) (al x (im a b))))
          (pim x a c))
        (ex x a))
      (anll ((ex x a) (al x (im a b)) (pim x a c))))
    (sylibr ((an (pim x a b) (pim x a c)) (an (al x (im a b)) (al x (im a c))) (al x (im a (an b c))))
      (ralan (x a b c))
      (ax_mp ((im (pim x a c) (al x (im a c))) (im (an (pim x a b) (pim x a c)) (an (al x (im a b)) (al x (im a c)))))
        (ax_mp ((im (pim x a b) (al x (im a b))) (im (im (pim x a c) (al x (im a c))) (im (an (pim x a b) (pim x a c)) (an (al x (im a b)) (al x (im a c))))))
          (anim ((pim x a b) (al x (im a b)) (pim x a c) (al x (im a c))))
          (:conv (im (pim x a b) (al x (im a b)))
            (im
              (:unfold pim (x a b) ()
                (an (ex x a) (al x (im a b))))
              (al x (im a b)))
            (anr ((ex x a) (al x (im a b))))))
        (:conv (im (pim x a c) (al x (im a c)))
          (im
            (:unfold pim (x a c) ()
              (an (ex x a) (al x (im a c))))
            (al x (im a c)))
          (anr ((ex x a) (al x (im a c))))))))))

(local theorem impim ((b wff ()) (x nat) (a wff (x)) (c wff (x))) ()
  (im (pim x a (im b c)) (im b (pim x a c)))
()
(com12 (b (pim x a (im b c)) (pim x a c))
  (:conv (im b (im (pim x a (im b c)) (pim x a c)))
    (im
      b
      (im
        (:unfold pim (x a (im b c)) ()
          (an (ex x a) (al x (im a (im b c)))))
        (:unfold pim (x a c) ()
          (an (ex x a) (al x (im a c))))))
    (anim2d (b (ex x a) (al x (im a (im b c))) (al x (im a c)))
      (alimd (x b (im a (im b c)) (im a c))
        (imim2d (b a (im b c) c)
          (mpcom (b c))))))))

(local theorem expim ((x nat) (y nat) (p wff (x)) (q wff (x y))) ()
  (im (ex y (pim x p q)) (pim x p (ex y q)))
()
(:conv (im (ex y (pim x p q)) (pim x p (ex y q)))
  (im
    (ex y (pim x p q))
    (:unfold pim (x p (ex y q)) ()
      (an (ex x p) (al x (im p (ex y q))))))
  (iand ((ex y (pim x p q)) (ex x p) (al x (im p (ex y q))))
    (rsyl ((ex y (pim x p q)) (ex y (ex x p)) (ex x p))
      (eximi (y (pim x p q) (ex x p))
        (:conv (im (pim x p q) (ex x p))
          (im
            (:unfold pim (x p q) ()
              (an (ex x p) (al x (im p q))))
            (ex x p))
          (anl ((ex x p) (al x (im p q))))))
      (rsyl ((ex y (ex x p)) (ex x (ex y p)) (ex x p))
        (excom (y x p))
        (eximi (x (ex y p) p)
          (eex (y p p)
            (id (p))))))
    (syl ((ex y (pim x p q)) (ex y (al x (im p q))) (al x (im p (ex y q))))
      (exral (y x p q))
      (eximi (y (pim x p q) (al x (im p q)))
        (:conv (im (pim x p q) (al x (im p q)))
          (im
            (:unfold pim (x p q) ()
              (an (ex x p) (al x (im p q))))
            (al x (im p q)))
          (anr ((ex x p) (al x (im p q))))))))))

(local theorem rexpim ((x nat) (y nat) (a wff (y)) (p wff (x)) (q wff (x y))) ()
  (im (ex y (an a (pim x p q))) (pim x p (ex y (an a q))))
()
(syl ((ex y (an a (pim x p q))) (ex y (pim x p (an a q))) (pim x p (ex y (an a q))))
  (expim (x y p (an a q)))
  (eximi (y (an a (pim x p q)) (pim x p (an a q)))
    (bi2a (a (pim x p (an a q)) (pim x p q))
      (pimeq2d (a x p (an a q) q)
        (bian1 (a q)))))))

(local theorem rexpim1 ((x nat) (y nat) (a wff (x)) (b wff (y)) (c wff (x y))) ()
  (im (ex x (an a (pim y b c))) (pim y b (ex x (an a c))))
()
(:conv (im (ex x (an a (pim y b c))) (pim y b (ex x (an a c))))
  (im
    (ex x (an a (pim y b c)))
    (:unfold pim (y b (ex x (an a c))) ()
      (an (ex y b) (al y (im b (ex x (an a c)))))))
  (iand ((ex x (an a (pim y b c))) (ex y b) (al y (im b (ex x (an a c)))))
    (eex (x (an a (pim y b c)) (ex y b))
      (:conv (im (an a (pim y b c)) (ex y b))
        (im
          (an
            a
            (:unfold pim (y b c) ()
              (an (ex y b) (al y (im b c)))))
          (ex y b))
        (anrl (a (ex y b) (al y (im b c))))))
    (rsyl ((ex x (an a (pim y b c))) (ex x (an a (al y (im b c)))) (al y (im b (ex x (an a c)))))
      (eximi (x (an a (pim y b c)) (an a (al y (im b c))))
        (ax_mp ((im (pim y b c) (al y (im b c))) (im (an a (pim y b c)) (an a (al y (im b c)))))
          (anim2 (a (pim y b c) (al y (im b c))))
          (:conv (im (pim y b c) (al y (im b c)))
            (im
              (:unfold pim (y b c) ()
                (an (ex y b) (al y (im b c))))
              (al y (im b c)))
            (anr ((ex y b) (al y (im b c)))))))
      (rexral (x y a b c))))))

(local theorem pim2im ((x nat) (y nat) (p1 wff (x)) (q1 wff (x)) (p2 wff (y)) (q2 wff (y))) ()
  (im (al x (im p1 (pim y p2 (im q1 q2)))) (im (pim x p1 q1) (pim y p2 q2)))
()
(:conv (im (al x (im p1 (pim y p2 (im q1 q2)))) (im (pim x p1 q1) (pim y p2 q2)))
  (im
    (al x (im p1 (pim y p2 (im q1 q2))))
    (im
      (:unfold pim (x p1 q1) ()
        (an (ex x p1) (al x (im p1 q1))))
      (pim y p2 q2)))
  (impd ((al x (im p1 (pim y p2 (im q1 q2)))) (ex x p1) (al x (im p1 q1)) (pim y p2 q2))
    (com23 ((al x (im p1 (pim y p2 (im q1 q2)))) (al x (im p1 q1)) (ex x p1) (pim y p2 q2))
      (syl6ibr ((al x (im p1 (pim y p2 (im q1 q2)))) (al x (im p1 q1)) (al x (im p1 (pim y p2 q2))) (im (ex x p1) (pim y p2 q2)))
        (eexb (x p1 (pim y p2 q2)))
        (al2imi (x (im p1 (pim y p2 (im q1 q2))) (im p1 q1) (im p1 (pim y p2 q2)))
          (a2d ((im p1 (pim y p2 (im q1 q2))) p1 q1 (pim y p2 q2))
            (imim2i (p1 (pim y p2 (im q1 q2)) (im q1 (pim y p2 q2)))
              (impim (q1 y p2 q2))))))))))

(local theorem pimtr ((x nat) (y nat) (p wff (x)) (q wff (x y)) (a wff (x y)) (b wff (y))) ()
  (im (pim x p a) (im (al x (im a (pim y q b))) (pim y (ex x (an p q)) b)))
()
(exp ((pim x p a) (al x (im a (pim y q b))) (pim y (ex x (an p q)) b))
  (:conv (im (an (pim x p a) (al x (im a (pim y q b)))) (pim y (ex x (an p q)) b))
    (im
      (an (pim x p a) (al x (im a (pim y q b))))
      (:unfold pim (y (ex x (an p q)) b) ()
        (an (ex y (ex x (an p q))) (al y (im (ex x (an p q)) b)))))
    (iand ((an (pim x p a) (al x (im a (pim y q b)))) (ex y (ex x (an p q))) (al y (im (ex x (an p q)) b)))
      (syl ((an (pim x p a) (al x (im a (pim y q b)))) (ex x (ex y (an p q))) (ex y (ex x (an p q))))
        (excom (x y (an p q)))
        (impcom ((al x (im a (pim y q b))) (pim x p a) (ex x (ex y (an p q))))
          (syl5 ((al x (im a (pim y q b))) (pim x p a) (ex x (an p a)) (ex x (ex y (an p q))))
            (pimex12 (x p a))
            (syl ((al x (im a (pim y q b))) (al x (im (an p a) (ex y (an p q)))) (im (ex x (an p a)) (ex x (ex y (an p q)))))
              (exim (x (an p a) (ex y (an p q))))
              (alimi (x (im a (pim y q b)) (im (an p a) (ex y (an p q))))
                (impd ((im a (pim y q b)) p a (ex y (an p q)))
                  (com12 (p (im a (pim y q b)) (im a (ex y (an p q))))
                    (imim2d (p a (pim y q b) (ex y (an p q)))
                      (syl5 (p (pim y q b) (ex y q) (ex y (an p q)))
                        (:conv (im (pim y q b) (ex y q))
                          (im
                            (:unfold pim (y q b) ()
                              (an (ex y q) (al y (im q b))))
                            (ex y q))
                          (anl ((ex y q) (al y (im q b)))))
                        (eximd (y p q (an p q))
                          (ian (p q))))))))))))
      (rsyl ((an (pim x p a) (al x (im a (pim y q b)))) (an (al x (im p a)) (al x (im a (al y (im q b))))) (al y (im (ex x (an p q)) b)))
        (ax_mp ((im (al x (im a (pim y q b))) (al x (im a (al y (im q b))))) (im (an (pim x p a) (al x (im a (pim y q b)))) (an (al x (im p a)) (al x (im a (al y (im q b)))))))
          (ax_mp ((im (pim x p a) (al x (im p a))) (im (im (al x (im a (pim y q b))) (al x (im a (al y (im q b))))) (im (an (pim x p a) (al x (im a (pim y q b)))) (an (al x (im p a)) (al x (im a (al y (im q b))))))))
            (anim ((pim x p a) (al x (im p a)) (al x (im a (pim y q b))) (al x (im a (al y (im q b))))))
            (:conv (im (pim x p a) (al x (im p a)))
              (im
                (:unfold pim (x p a) ()
                  (an (ex x p) (al x (im p a))))
                (al x (im p a)))
              (anr ((ex x p) (al x (im p a))))))
          (alimi (x (im a (pim y q b)) (im a (al y (im q b))))
            (imim2i (a (pim y q b) (al y (im q b)))
              (:conv (im (pim y q b) (al y (im q b)))
                (im
                  (:unfold pim (y q b) ()
                    (an (ex y q) (al y (im q b))))
                  (al y (im q b)))
                (anr ((ex y q) (al y (im q b))))))))
        (sylibr ((an (al x (im p a)) (al x (im a (al y (im q b))))) (al y (al x (im p (im q b)))) (al y (im (ex x (an p q)) b)))
          (aleqi (y (im (ex x (an p q)) b) (al x (im p (im q b))))
            (ax_mp ((iff (al x (im (an p q) b)) (al x (im p (im q b)))) (iff (im (ex x (an p q)) b) (al x (im p (im q b)))))
              (ax_mp ((iff (im (ex x (an p q)) b) (al x (im (an p q) b))) (im (iff (al x (im (an p q) b)) (al x (im p (im q b)))) (iff (im (ex x (an p q)) b) (al x (im p (im q b))))))
                (bitr ((im (ex x (an p q)) b) (al x (im (an p q) b)) (al x (im p (im q b)))))
                (eexb (x (an p q) b)))
              (aleqi (x (im (an p q) b) (im p (im q b)))
                (impexp (p q b)))))
          (sylib ((an (al x (im p a)) (al x (im a (al y (im q b))))) (al x (im p (al y (im q b)))) (al y (al x (im p (im q b)))))
            (ralalcomb (x y p (im q b)))
            (imp ((al x (im p a)) (al x (im a (al y (im q b)))) (al x (im p (al y (im q b)))))
              (al2imi (x (im p a) (im a (al y (im q b))) (im p (al y (im q b))))
                (com12 ((im a (al y (im q b))) (im p a) (im p (al y (im q b))))
                  (imim2 (p a (al y (im q b))))))))))))))

(def ne ((a nat ()) (b nat ())) (wff ())
()
(not (eq a b)))

(local theorem neeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (iff (ne _a1 _b1) (ne _a2 _b2)))
()
(:conv (im _G (iff (ne _a1 _b1) (ne _a2 _b2)))
  (im
    _G
    (iff
      (:unfold ne (_a1 _b1) ()
        (not (eq _a1 _b1)))
      (:unfold ne (_a2 _b2) ()
        (not (eq _a2 _b2)))))
  (noteqd (_G (eq _a1 _b1) (eq _a2 _b2))
    (eqeqd (_G _a1 _a2 _b1 _b2)
      _ah
      _bh))))

(local theorem neeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (iff (ne _a1 _b1) (ne _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (iff (ne _a1 _b1) (ne _a2 _b2)))
  (neeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem neeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (ne _a1 b) (ne _a2 b)))
()
(neeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem neeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (iff (ne _a1 b) (ne _a2 b)))
()
(neeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem neeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (iff (ne a _b1) (ne a _b2)))
()
(neeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem neeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (iff (ne a _b1) (ne a _b2)))
()
(neeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem necom ((a nat ()) (b nat ())) ()
  (im (ne a b) (ne b a))
()
(ax_mp ((im (eq b a) (eq a b)) (im (ne a b) (ne b a)))
  (:conv (im (im (eq b a) (eq a b)) (im (ne a b) (ne b a)))
    (im
      (im (eq b a) (eq a b))
      (im
        (:unfold ne (a b) ()
          (not (eq a b)))
        (:unfold ne (b a) ()
          (not (eq b a)))))
    (con3 ((eq b a) (eq a b))))
  (eqcom (b a))))

(def sb ((a nat ()) (x nat) (p wff (x))) (wff ())
((y nat))
(al y (im (eq y a) (al x (im (eq x y) p)))))

(local theorem sbq ((x nat) (a nat ()) (b wff (x))) ()
  (im (eq x a) (iff b (sb a x b)))
((y nat))
(:conv (im (eq x a) (iff b (sb a x b)))
  (im
    (eq x a)
    (iff
      b
      (:unfold sb (a x b) (y)
        (al y (im (eq y a) (al x (im (eq x y) b)))))))
  (ibid ((eq x a) b (al y (im (eq y a) (al x (im (eq x y) b)))))
    (exp ((eq x a) b (al y (im (eq y a) (al x (im (eq x y) b)))))
      (ialda (y (an (eq x a) b) (eq y a) (al x (im (eq x y) b)))
        (sylc ((an (an (eq x a) b) (eq y a)) (eq x y) b (al x (im (eq x y) b)))
          (ax_12 (x y b))
          (eqtr4d ((an (an (eq x a) b) (eq y a)) x a y)
            (anll ((eq x a) b (eq y a)))
            (anr ((an (eq x a) b) (eq y a))))
          (anlr ((eq x a) b (eq y a))))))
    (mpi ((eq x a) (ex y (eq y a)) (im (al y (im (eq y a) (al x (im (eq x y) b)))) b))
      (ax_6 (a y))
      (eexdh (y (eq x a) (eq y a) (im (al y (im (eq y a) (al x (im (eq x y) b)))) b))
        (nfv ((eq x a) y))
        (nfim (y (al y (im (eq y a) (al x (im (eq x y) b)))) b)
          (nfal1 (y (im (eq y a) (al x (im (eq x y) b)))))
          (nfv (b y)))
        (exp ((eq x a) (eq y a) (im (al y (im (eq y a) (al x (im (eq x y) b)))) b))
          (syl5 ((an (eq x a) (eq y a)) (al y (im (eq y a) (al x (im (eq x y) b)))) (im (eq y a) (al x (im (eq x y) b))) b)
            (eal (y (im (eq y a) (al x (im (eq x y) b)))))
            (syld ((an (eq x a) (eq y a)) (im (eq y a) (al x (im (eq x y) b))) (al x (im (eq x y) b)) b)
              (com12 ((im (eq y a) (al x (im (eq x y) b))) (an (eq x a) (eq y a)) (al x (im (eq x y) b)))
                (imim1i ((an (eq x a) (eq y a)) (eq y a) (al x (im (eq x y) b)))
                  (anr ((eq x a) (eq y a)))))
              (syl ((an (eq x a) (eq y a)) (eq x y) (im (al x (im (eq x y) b)) b))
                (com12 ((al x (im (eq x y) b)) (eq x y) b)
                  (eal (x (im (eq x y) b))))
                (imp ((eq x a) (eq y a) (eq x y))
                  (eqtr4 (x a y))))))))))))

(local theorem sbqcom ((x nat) (a nat ()) (b wff (x))) ()
  (im (eq a x) (iff (sb a x b) b))
()
(bicomd ((eq a x) b (sb a x b))
  (rsyl ((eq a x) (eq x a) (iff b (sb a x b)))
    (eqcom (a x))
    (sbq (x a b)))))

(local theorem nfsb1 ((x nat) (a nat ()) (b wff (x))) ()
  (nf x (sb a x b))
((y nat))
(:conv (nf x (sb a x b))
  (nf
    x
    (:unfold sb (a x b) (y)
      (al y (im (eq y a) (al x (im (eq x y) b))))))
  (nfal (x y (im (eq y a) (al x (im (eq x y) b))))
    (nfim (x (eq y a) (al x (im (eq x y) b)))
      (nfv ((eq y a) x))
      (nfal1 (x (im (eq x y) b)))))))

(local theorem nfsb ((x nat) (y nat) (a nat (y)) (b wff (x y)))
  ((h (nf x b)))
  (nf x (sb a y b))
((z nat))
(:conv (nf x (sb a y b))
  (nf
    x
    (:unfold sb (a y b) (z)
      (al z (im (eq z a) (al y (im (eq y z) b))))))
  (nfal (x z (im (eq z a) (al y (im (eq y z) b))))
    (nfim (x (eq z a) (al y (im (eq y z) b)))
      (nfv ((eq z a) x))
      (nfal (x y (im (eq y z) b))
        (nfim (x (eq y z) b)
          (nfv ((eq y z) x))
          h))))))

(local theorem sbeq1 ((x nat) (a nat (x)) (b nat (x)) (c wff (x))) ()
  (im (eq a b) (iff (sb a x c) (sb b x c)))
((y nat))
(:conv (im (eq a b) (iff (sb a x c) (sb b x c)))
  (im
    (eq a b)
    (iff
      (:unfold sb (a x c) (y)
        (al y (im (eq y a) (al x (im (eq x y) c)))))
      (:unfold sb (b x c) (y)
        (al y (im (eq y b) (al x (im (eq x y) c)))))))
  (aleqd ((eq a b) y (im (eq y a) (al x (im (eq x y) c))) (im (eq y b) (al x (im (eq x y) c))))
    (imeq1d ((eq a b) (eq y a) (eq y b) (al x (im (eq x y) c)))
      (eqeq2 (y a b))))))

(local theorem sbeq1d ((x nat) (G wff (x)) (a nat (x)) (b nat (x)) (c wff (x)))
  ((h (im G (eq a b))))
  (im G (iff (sb a x c) (sb b x c)))
()
(syl (G (eq a b) (iff (sb a x c) (sb b x c)))
  (sbeq1 (x a b c))
  h))

(local theorem sbeqd ((_G wff ()) (x nat) (_a1 nat (x)) (_a2 nat (x)) (_p1 wff (x)) (_p2 wff (x)))
  ((_ah (im _G (eq _a1 _a2)))
   (_ph (im _G (iff _p1 _p2))))
  (im _G (iff (sb _a1 x _p1) (sb _a2 x _p2)))
((y nat))
(:conv (im _G (iff (sb _a1 x _p1) (sb _a2 x _p2)))
  (im
    _G
    (iff
      (:unfold sb (_a1 x _p1) (y)
        (al y (im (eq y _a1) (al x (im (eq x y) _p1)))))
      (:unfold sb (_a2 x _p2) (y)
        (al y (im (eq y _a2) (al x (im (eq x y) _p2)))))))
  (aleqd (_G y (im (eq y _a1) (al x (im (eq x y) _p1))) (im (eq y _a2) (al x (im (eq x y) _p2))))
    (imeqd (_G (eq y _a1) (eq y _a2) (al x (im (eq x y) _p1)) (al x (im (eq x y) _p2)))
      (eqeqd (_G y y _a1 _a2)
        (eqidd (_G y))
        _ah)
      (aleqd (_G x (im (eq x y) _p1) (im (eq x y) _p2))
        (imeqd (_G (eq x y) (eq x y) _p1 _p2)
          (biidd (_G (eq x y)))
          _ph))))))

(local theorem sbeq2d ((_G wff ()) (x nat) (a nat (x)) (_p1 wff (x)) (_p2 wff (x)))
  ((_h (im _G (iff _p1 _p2))))
  (im _G (iff (sb a x _p1) (sb a x _p2)))
()
(sbeqd (_G x a a _p1 _p2)
  (eqidd (_G a))
  _h))

(local theorem sbeq2i ((x nat) (a nat (x)) (b wff (x)) (c wff (x)))
  ((h (iff b c)))
  (iff (sb a x b) (sb a x c))
()
(trud ((iff (sb a x b) (sb a x c)))
  (sbeq2d ((tru) x a b c)
    (a1i ((tru) (iff b c))
      h))))

(local theorem sbeht ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c)))
  (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
()
(ax_mp ((ex x (eq x a)) (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c)))
  (eexh (x (eq x a) (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c)))
    (nfim (x (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
      (nfal1 (x (im (eq x a) (iff b c))))
      (nfbi (x (sb a x b) c)
        (nfsb1 (x a b))
        h))
    (exp ((eq x a) (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
      (bitr3d ((an (eq x a) (al x (im (eq x a) (iff b c)))) (sb a x b) b c)
        (anwl ((eq x a) (al x (im (eq x a) (iff b c))) (iff b (sb a x b)))
          (sbq (x a b)))
        (impcom ((al x (im (eq x a) (iff b c))) (eq x a) (iff b c))
          (eal (x (im (eq x a) (iff b c))))))))
  (ax_6 (a x))))

(local theorem sbeh ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (iff b c))))
  (iff (sb a x b) c)
()
(ax_mp ((al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
  (sbeht (x a b c)
    h)
  (ax_gen (x (im (eq x a) (iff b c)))
    e)))

(local theorem sbet ((x nat) (a nat ()) (b wff (x)) (c wff ())) ()
  (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
()
(sbeht (x a b c)
  (nfv (c x))))

(local theorem sbe ((x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (eq x a) (iff b c))))
  (iff (sb a x b) c)
()
(sbeh (x a b c)
  (nfv (c x))
  e))

(local theorem sbed ((G wff ()) (x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (an G (eq x a)) (iff b c))))
  (im G (iff (sb a x b) c))
()
(syl (G (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
  (sbet (x a b c))
  (ialda (x G (eq x a) (iff b c))
    e)))

(local theorem dfsb2 ((x nat) (a nat ()) (b wff (x))) ()
  (iff (sb a x b) (al x (im (eq x a) b)))
((y nat))
(:conv (iff (sb a x b) (al x (im (eq x a) b)))
  (iff
    (:unfold sb (a x b) (y)
      (al y (im (eq y a) (al x (im (eq x y) b)))))
    (al x (im (eq x a) b)))
  (ibii ((al y (im (eq y a) (al x (im (eq x y) b)))) (al x (im (eq x a) b)))
    (mpi ((al y (im (eq y a) (al x (im (eq x y) b)))) (ex y (eq y a)) (al x (im (eq x a) b)))
      (ax_6 (a y))
      (eexdh (y (al y (im (eq y a) (al x (im (eq x y) b)))) (eq y a) (al x (im (eq x a) b)))
        (nfal1 (y (im (eq y a) (al x (im (eq x y) b)))))
        (nfv ((al x (im (eq x a) b)) y))
        (syl ((al y (im (eq y a) (al x (im (eq x y) b)))) (im (eq y a) (al x (im (eq x y) b))) (im (eq y a) (al x (im (eq x a) b))))
          (a2i ((eq y a) (al x (im (eq x y) b)) (al x (im (eq x a) b)))
            (alimd (x (eq y a) (im (eq x y) b) (im (eq x a) b))
              (imim1d ((eq y a) (eq x a) (eq x y) b)
                (com12 ((eq x a) (eq y a) (eq x y))
                  (eqtr4 (x a y))))))
          (eal (y (im (eq y a) (al x (im (eq x y) b))))))))
    (iald (y (al x (im (eq x a) b)) (im (eq y a) (al x (im (eq x y) b))))
      (com12 ((eq y a) (al x (im (eq x a) b)) (al x (im (eq x y) b)))
        (alimd (x (eq y a) (im (eq x a) b) (im (eq x y) b))
          (imim1d ((eq y a) (eq x y) (eq x a) b)
            (com12 ((eq x y) (eq y a) (eq x a))
              (eqtr (x y a))))))))))

(local theorem dfsb3 ((x nat) (a nat ()) (b wff (x))) ()
  (iff (sb a x b) (ex x (an (eq x a) b)))
()
(sbeh (x a b (ex x (an (eq x a) b)))
  (nfex1 (x (an (eq x a) b)))
  (syl ((eq x a) (iff (al x (not (an (eq x a) b))) (not b)) (iff b (ex x (an (eq x a) b))))
    (:conv (im (iff (al x (not (an (eq x a) b))) (not b)) (iff b (ex x (an (eq x a) b))))
      (im
        (iff (al x (not (an (eq x a) b))) (not b))
        (iff
          b
          (:unfold ex (x (an (eq x a) b)) ()
            (not (al x (not (an (eq x a) b)))))))
      (con2b ((al x (not (an (eq x a) b))) b)))
    (syl5bb ((eq x a) (al x (not (an (eq x a) b))) (sb a x (not b)) (not b))
      (ax_mp ((iff (sb a x (not b)) (al x (im (eq x a) (not b)))) (iff (al x (not (an (eq x a) b))) (sb a x (not b))))
        (ax_mp ((iff (al x (not (an (eq x a) b))) (al x (im (eq x a) (not b)))) (im (iff (sb a x (not b)) (al x (im (eq x a) (not b)))) (iff (al x (not (an (eq x a) b))) (sb a x (not b)))))
          (bitr4 ((al x (not (an (eq x a) b))) (al x (im (eq x a) (not b))) (sb a x (not b))))
          (aleqi (x (not (an (eq x a) b)) (im (eq x a) (not b)))
            (notan2 ((eq x a) b))))
        (dfsb2 (x a (not b))))
      (bicomd ((eq x a) (not b) (sb a x (not b)))
        (sbq (x a (not b))))))))

(local theorem sbco ((x nat) (y nat) (a nat (x)) (b wff (x))) ()
  (iff (sb a y (sb y x b)) (sb a x b))
()
(ax_mp ((iff (al y (im (eq y a) (sb y x b))) (sb a x b)) (iff (sb a y (sb y x b)) (sb a x b)))
  (ax_mp ((iff (sb a y (sb y x b)) (al y (im (eq y a) (sb y x b)))) (im (iff (al y (im (eq y a) (sb y x b))) (sb a x b)) (iff (sb a y (sb y x b)) (sb a x b))))
    (bitr ((sb a y (sb y x b)) (al y (im (eq y a) (sb y x b))) (sb a x b)))
    (dfsb2 (y a (sb y x b))))
  (:conv (iff (al y (im (eq y a) (sb y x b))) (sb a x b))
    (iff
      (al y (im (eq y a) (sb y x b)))
      (:unfold sb (a x b) (y)
        (al y (im (eq y a) (al x (im (eq x y) b))))))
    (aleqi (y (im (eq y a) (sb y x b)) (im (eq y a) (al x (im (eq x y) b))))
      (imeq2i ((eq y a) (sb y x b) (al x (im (eq x y) b)))
        (dfsb2 (x y b)))))))

(local theorem sbid ((x nat) (a wff (x))) ()
  (iff (sb x x a) a)
((y nat))
(:let H1 (eqcom (y x))
(:conv (iff (sb x x a) a)
  (iff
    (:unfold sb (x x a) (y)
      (al y (im (eq y x) (al x (im (eq x y) a)))))
    a)
  (ibii ((al y (im (eq y x) (al x (im (eq x y) a)))) a)
    (mpi ((al y (im (eq y x) (al x (im (eq x y) a)))) (ex y (eq y x)) a)
      (ax_6 (x y))
      (eexdh (y (al y (im (eq y x) (al x (im (eq x y) a)))) (eq y x) a)
        (nfal1 (y (im (eq y x) (al x (im (eq x y) a)))))
        (nfv (a y))
        (rsyl ((al y (im (eq y x) (al x (im (eq x y) a)))) (im (eq y x) (al x (im (eq x y) a))) (im (eq y x) a))
          (eal (y (im (eq y x) (al x (im (eq x y) a)))))
          (a2i ((eq y x) (al x (im (eq x y) a)) a)
            (rsyl ((eq y x) (eq x y) (im (al x (im (eq x y) a)) a))
              H1
              (com12 ((al x (im (eq x y) a)) (eq x y) a)
                (eal (x (im (eq x y) a)))))))))
    (iald (y a (im (eq y x) (al x (im (eq x y) a))))
      (com12 ((eq y x) a (al x (im (eq x y) a)))
        (bi1d ((eq y x) a (al x (im (eq x y) a)))
          (syl6bb ((eq y x) a (sb y x a) (al x (im (eq x y) a)))
            (dfsb2 (x y a))
            (syl ((eq y x) (eq x y) (iff a (sb y x a)))
              (sbq (x y a))
              H1)))))))))

(local theorem sbcom ((a nat ()) (b nat ()) (x nat) (y nat) (p wff (x y))) ()
  (iff (sb a x (sb b y p)) (sb b y (sb a x p)))
()
(ax_mp ((iff (al x (im (eq x a) (sb b y p))) (sb b y (sb a x p))) (iff (sb a x (sb b y p)) (sb b y (sb a x p))))
  (ax_mp ((iff (sb a x (sb b y p)) (al x (im (eq x a) (sb b y p)))) (im (iff (al x (im (eq x a) (sb b y p))) (sb b y (sb a x p))) (iff (sb a x (sb b y p)) (sb b y (sb a x p)))))
    (bitr ((sb a x (sb b y p)) (al x (im (eq x a) (sb b y p))) (sb b y (sb a x p))))
    (dfsb2 (x a (sb b y p))))
  (ax_mp ((iff (sb b y (sb a x p)) (al x (im (eq x a) (al y (im (eq y b) p))))) (iff (al x (im (eq x a) (sb b y p))) (sb b y (sb a x p))))
    (ax_mp ((iff (al x (im (eq x a) (sb b y p))) (al x (im (eq x a) (al y (im (eq y b) p))))) (im (iff (sb b y (sb a x p)) (al x (im (eq x a) (al y (im (eq y b) p))))) (iff (al x (im (eq x a) (sb b y p))) (sb b y (sb a x p)))))
      (bitr4 ((al x (im (eq x a) (sb b y p))) (al x (im (eq x a) (al y (im (eq y b) p)))) (sb b y (sb a x p))))
      (raleqi (x (eq x a) (sb b y p) (al y (im (eq y b) p)))
        (dfsb2 (y b p))))
    (ax_mp ((iff (al y (im (eq y b) (sb a x p))) (al x (im (eq x a) (al y (im (eq y b) p))))) (iff (sb b y (sb a x p)) (al x (im (eq x a) (al y (im (eq y b) p))))))
      (ax_mp ((iff (sb b y (sb a x p)) (al y (im (eq y b) (sb a x p)))) (im (iff (al y (im (eq y b) (sb a x p))) (al x (im (eq x a) (al y (im (eq y b) p))))) (iff (sb b y (sb a x p)) (al x (im (eq x a) (al y (im (eq y b) p)))))))
        (bitr ((sb b y (sb a x p)) (al y (im (eq y b) (sb a x p))) (al x (im (eq x a) (al y (im (eq y b) p))))))
        (dfsb2 (y b (sb a x p))))
      (ax_mp ((iff (al x (im (eq x a) (al y (im (eq y b) p)))) (al y (im (eq y b) (al x (im (eq x a) p))))) (iff (al y (im (eq y b) (sb a x p))) (al x (im (eq x a) (al y (im (eq y b) p))))))
        (ax_mp ((iff (al y (im (eq y b) (sb a x p))) (al y (im (eq y b) (al x (im (eq x a) p))))) (im (iff (al x (im (eq x a) (al y (im (eq y b) p)))) (al y (im (eq y b) (al x (im (eq x a) p))))) (iff (al y (im (eq y b) (sb a x p))) (al x (im (eq x a) (al y (im (eq y b) p)))))))
          (bitr4 ((al y (im (eq y b) (sb a x p))) (al y (im (eq y b) (al x (im (eq x a) p)))) (al x (im (eq x a) (al y (im (eq y b) p))))))
          (raleqi (y (eq y b) (sb a x p) (al x (im (eq x a) p)))
            (dfsb2 (x a p))))
        (ralcomb (x y (eq x a) (eq y b) p)))))))

(local theorem sbth ((x nat) (a nat (x)) (p wff (x)))
  ((h p))
  (sb a x p)
((y nat))
(:conv (sb a x p)
  (:unfold sb (a x p) (y)
    (al y (im (eq y a) (al x (im (eq x y) p)))))
  (ax_gen (y (im (eq y a) (al x (im (eq x y) p))))
    (a1i ((eq y a) (al x (im (eq x y) p)))
      (ax_gen (x (im (eq x y) p))
        (a1i ((eq x y) p)
          h))))))

(local theorem sbthd ((G wff ()) (a nat ()) (x nat) (p wff (x)))
  ((h (im (an G (eq x a)) p)))
  (im G (sb a x p))
()
(:let H1 (itru ())
(mpbiri (G (tru) (sb a x p))
  H1
  (sbed (G x a p (tru))
    (syl ((an G (eq x a)) p (iff p (tru)))
      (mpi (p (tru) (iff p (tru)))
        H1
        (bith (p (tru))))
      h)))))

(local theorem sbeth ((a nat ()) (q wff ()) (x nat) (p wff (x)))
  ((h p)
   (e (im (eq x a) (iff p q))))
  q
()
(mpbi ((sb a x p) q)
  (sbe (x a p q)
    e)
  (sbth (x a p)
    h)))

(local theorem sbethh ((a nat ()) (x nat) (p wff (x)) (q wff (x)))
  ((h (nf x q))
   (hp p)
   (e (im (eq x a) (iff p q))))
  q
()
(mpbi ((sb a x p) q)
  (sbeh (x a p q)
    h
    e)
  (sbth (x a p)
    hp)))

(local theorem cbvsbh ((x nat) (y nat) (a nat ()) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (iff (sb a x p) (sb a y q))
((z nat))
(:conv (iff (sb a x p) (sb a y q))
  (iff
    (:unfold sb (a x p) (z)
      (al z (im (eq z a) (al x (im (eq x z) p)))))
    (:unfold sb (a y q) (z)
      (al z (im (eq z a) (al y (im (eq y z) q))))))
  (aleqi (z (im (eq z a) (al x (im (eq x z) p))) (im (eq z a) (al y (im (eq y z) q))))
    (imeq2i ((eq z a) (al x (im (eq x z) p)) (al y (im (eq y z) q)))
      (cbvalh (x y (im (eq x z) p) (im (eq y z) q))
        (nfim (y (eq x z) p)
          (nfv ((eq x z) y))
          h1)
        (nfim (x (eq y z) q)
          (nfv ((eq y z) x))
          h2)
        (imeqd ((eq x y) (eq x z) (eq y z) p q)
          (eqeq1 (x y z))
          e))))))

(local theorem cbvsb ((x nat) (y nat) (a nat ()) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (iff (sb a x p) (sb a y q))
()
(cbvsbh (x y a p q)
  (nfv (p y))
  (nfv (q x))
  e))

(local theorem aleqe ((x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (eq x a) (iff p q))))
  (iff (al x (im (eq x a) p)) q)
()
(ax_mp ((iff (sb a x p) q) (iff (al x (im (eq x a) p)) q))
  (ax_mp ((iff (sb a x p) (al x (im (eq x a) p))) (im (iff (sb a x p) q) (iff (al x (im (eq x a) p)) q)))
    (bitr3 ((al x (im (eq x a) p)) (sb a x p) q))
    (dfsb2 (x a p)))
  (sbe (x a p q)
    e)))

(local theorem aleqed ((G wff ()) (x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (an G (eq x a)) (iff p q))))
  (im G (iff (al x (im (eq x a) p)) q))
()
(syl5bbr (G (al x (im (eq x a) p)) (sb a x p) q)
  (dfsb2 (x a p))
  (sbed (G x a p q)
    e)))

(local theorem exeqe ((x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (eq x a) (iff p q))))
  (iff (ex x (an (eq x a) p)) q)
()
(ax_mp ((iff (sb a x p) q) (iff (ex x (an (eq x a) p)) q))
  (ax_mp ((iff (sb a x p) (ex x (an (eq x a) p))) (im (iff (sb a x p) q) (iff (ex x (an (eq x a) p)) q)))
    (bitr3 ((ex x (an (eq x a) p)) (sb a x p) q))
    (dfsb3 (x a p)))
  (sbe (x a p q)
    e)))

(local theorem exeqed ((G wff ()) (x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (an G (eq x a)) (iff p q))))
  (im G (iff (ex x (an (eq x a) p)) q))
()
(syl5bbr (G (ex x (an (eq x a) p)) (sb a x p) q)
  (dfsb3 (x a p))
  (sbed (G x a p q)
    e)))

(local theorem pimeqed ((G wff ()) (x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (an G (eq x a)) (iff p q))))
  (im G (iff (pim x (eq x a) p) q))
()
(syl5bb (G (pim x (eq x a) p) (al x (im (eq x a) p)) q)
  (ax_mp ((ex x (eq x a)) (iff (pim x (eq x a) p) (al x (im (eq x a) p))))
    (:conv (im (ex x (eq x a)) (iff (pim x (eq x a) p) (al x (im (eq x a) p))))
      (im
        (ex x (eq x a))
        (iff
          (:unfold pim (x (eq x a) p) ()
            (an (ex x (eq x a)) (al x (im (eq x a) p))))
          (al x (im (eq x a) p))))
      (bian1 ((ex x (eq x a)) (al x (im (eq x a) p)))))
    (ax_6 (a x)))
  (aleqed (G x a p q)
    e)))

(local theorem pimeqe ((x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (eq x a) (iff p q))))
  (iff (pim x (eq x a) p) q)
()
(trud ((iff (pim x (eq x a) p) q))
  (pimeqed ((tru) x a p q)
    (anwr ((tru) (eq x a) (iff p q))
      e))))

(local theorem cbvals ((x nat) (y nat) (p wff (x))) ()
  (iff (al x p) (al y (sb y x p)))
()
(cbvalh (x y p (sb y x p))
  (nfv (p y))
  (nfsb1 (x y p))
  (sbq (x y p))))

(local theorem cbvexs ((x nat) (y nat) (p wff (x))) ()
  (iff (ex x p) (ex y (sb y x p)))
()
(cbvexh (x y p (sb y x p))
  (nfv (p y))
  (nfsb1 (x y p))
  (sbq (x y p))))

(local theorem cbvald ((x nat) (y nat) (G wff ()) (p wff (x)) (q wff (y)))
  ((h (im (an G (eq x y)) (iff p q))))
  (im G (iff (al x p) (al y q)))
()
(bitrd (G (al x p) (al y (sb y x p)) (al y q))
  (a1i (G (iff (al x p) (al y (sb y x p))))
    (cbvals (x y p)))
  (aleqd (G y (sb y x p) q)
    (syl (G (al x (im (eq x y) (iff p q))) (iff (sb y x p) q))
      (sbet (x y p q))
      (ialda (x G (eq x y) (iff p q))
        h)))))

(local theorem cbvexd ((x nat) (y nat) (G wff ()) (p wff (x)) (q wff (y)))
  ((h (im (an G (eq x y)) (iff p q))))
  (im G (iff (ex x p) (ex y q)))
()
(bitrd (G (ex x p) (ex y (sb y x p)) (ex y q))
  (a1i (G (iff (ex x p) (ex y (sb y x p))))
    (cbvexs (x y p)))
  (exeqd (G y (sb y x p) q)
    (syl (G (al x (im (eq x y) (iff p q))) (iff (sb y x p) q))
      (sbet (x y p q))
      (ialda (x G (eq x y) (iff p q))
        h)))))

(local theorem pimexeqed ((G wff ()) (x nat) (y nat) (a nat ()) (p wff (x y)) (q wff (x)) (p2 wff (y)) (q2 wff (y)))
  ((e1 (im (an G (eq x a)) (iff p p2)))
   (e2 (im (an G (eq x a)) (iff q q2))))
  (im G (iff (pim x (ex y (an (eq x a) p)) q) (pim y p2 q2)))
()
(:conv (im G (iff (pim x (ex y (an (eq x a) p)) q) (pim y p2 q2)))
  (im
    G
    (iff
      (:unfold pim (x (ex y (an (eq x a) p)) q) ()
        (an (ex x (ex y (an (eq x a) p))) (al x (im (ex y (an (eq x a) p)) q))))
      (:unfold pim (y p2 q2) ()
        (an (ex y p2) (al y (im p2 q2))))))
  (aneqd (G (ex x (ex y (an (eq x a) p))) (ex y p2) (al x (im (ex y (an (eq x a) p)) q)) (al y (im p2 q2)))
    (syl5bb (G (ex x (ex y (an (eq x a) p))) (ex y (ex x (an (eq x a) p))) (ex y p2))
      (excomb (x y (an (eq x a) p)))
      (exeqd (G y (ex x (an (eq x a) p)) p2)
        (exeqed (G x a p p2)
          e1)))
    (syl5bb (G (al x (im (ex y (an (eq x a) p)) q)) (al x (al y (im (an (eq x a) p) q))) (al y (im p2 q2)))
      (aleqi (x (im (ex y (an (eq x a) p)) q) (al y (im (an (eq x a) p) q)))
        (eexb (y (an (eq x a) p) q)))
      (syl5bb (G (al x (al y (im (an (eq x a) p) q))) (al y (al x (im (an (eq x a) p) q))) (al y (im p2 q2)))
        (alcomb (x y (im (an (eq x a) p) q)))
        (aleqd (G y (al x (im (an (eq x a) p) q)) (im p2 q2))
          (syl5bb (G (al x (im (an (eq x a) p) q)) (al x (im (eq x a) (im p q))) (im p2 q2))
            (aleqi (x (im (an (eq x a) p) q) (im (eq x a) (im p q)))
              (impexp ((eq x a) p q)))
            (aleqed (G x a (im p q) (im p2 q2))
              (imeqd ((an G (eq x a)) p p2 q q2)
                e1
                e2)))))))))

(sort set strict)

(term ab ((x nat) (p wff (x))) (set ()))

(term el ((a nat ()) (A set ())) (wff ()))

(axiom elab ((a nat ()) (x nat) (p wff (x))) ()
  (iff (el a (ab x p)) (sb a x p)))

(axiom ax_8 ((a nat ()) (b nat ()) (A set ())) ()
  (im (eq a b) (im (el a A) (el b A))))

(def eqs ((A set ()) (B set ())) (wff ())
((x nat))
(al x (iff (el x A) (el x B))))

(local theorem eqsid ((A set ())) ()
  (eqs A A)
((x nat))
(:conv (eqs A A)
  (:unfold eqs (A A) (x)
    (al x (iff (el x A) (el x A))))
  (ax_gen (x (iff (el x A) (el x A)))
    (biid ((el x A))))))

(local theorem eqscom ((A set ()) (B set ())) ()
  (im (eqs A B) (eqs B A))
((x nat))
(:conv (im (eqs A B) (eqs B A))
  (im
    (:unfold eqs (A B) (x)
      (al x (iff (el x A) (el x B))))
    (:unfold eqs (B A) (x)
      (al x (iff (el x B) (el x A)))))
  (alimi (x (iff (el x A) (el x B)) (iff (el x B) (el x A)))
    (bicom ((el x A) (el x B))))))

(local theorem eqscomb ((A set ()) (B set ())) ()
  (iff (eqs A B) (eqs B A))
()
(ibii ((eqs A B) (eqs B A))
  (eqscom (A B))
  (eqscom (B A))))

(local theorem eqstr ((A set ()) (B set ()) (C set ())) ()
  (im (eqs A B) (im (eqs B C) (eqs A C)))
((x nat))
(:conv (im (eqs A B) (im (eqs B C) (eqs A C)))
  (im
    (:unfold eqs (A B) (x)
      (al x (iff (el x A) (el x B))))
    (im
      (:unfold eqs (B C) (x)
        (al x (iff (el x B) (el x C))))
      (:unfold eqs (A C) (x)
        (al x (iff (el x A) (el x C))))))
  (al2imi (x (iff (el x A) (el x B)) (iff (el x B) (el x C)) (iff (el x A) (el x C)))
    (bitr ((el x A) (el x B) (el x C))))))

(local theorem eqstr2 ((A set ()) (B set ()) (C set ())) ()
  (im (eqs A B) (im (eqs B C) (eqs C A)))
()
(syl6 ((eqs A B) (eqs B C) (eqs A C) (eqs C A))
  (eqscom (A C))
  (eqstr (A B C))))

(local theorem eqstr3 ((A set ()) (B set ()) (C set ())) ()
  (im (eqs B A) (im (eqs B C) (eqs A C)))
()
(syl ((eqs B A) (eqs A B) (im (eqs B C) (eqs A C)))
  (eqstr (A B C))
  (eqscom (B A))))

(local theorem eqstr4 ((A set ()) (B set ()) (C set ())) ()
  (im (eqs A B) (im (eqs C B) (eqs A C)))
()
(syl5 ((eqs A B) (eqs C B) (eqs B C) (eqs A C))
  (eqscom (C B))
  (eqstr (A B C))))

(local theorem eqstr3d ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (im G (eqs B A)))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(sylc (G (eqs B A) (eqs B C) (eqs A C))
  (eqstr3 (A B C))
  h1
  h2))

(local theorem eqsidd ((G wff ()) (A set ())) ()
  (im G (eqs A A))
()
(a1i (G (eqs A A))
  (eqsid (A))))

(local theorem eqscomd ((A set ()) (B set ()) (G wff ()))
  ((h (im G (eqs A B))))
  (im G (eqs B A))
()
(syl (G (eqs A B) (eqs B A))
  (eqscom (A B))
  h))

(local theorem eqstrd ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (im G (eqs A B)))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(sylc (G (eqs A B) (eqs B C) (eqs A C))
  (eqstr (A B C))
  h1
  h2))

(local theorem eqstr4d ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (im G (eqs A B)))
   (h2 (im G (eqs C B))))
  (im G (eqs A C))
()
(sylc (G (eqs A B) (eqs C B) (eqs A C))
  (eqstr4 (A B C))
  h1
  h2))

(local theorem syl5eqs ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs A B))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(eqstrd (A B C G)
  (a1i (G (eqs A B))
    h1)
  h2))

(local theorem syl5eqsr ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs B A))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(eqstr3d (A B C G)
  (a1i (G (eqs B A))
    h1)
  h2))

(local theorem syl6eqs ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs B C))
   (h2 (im G (eqs A B))))
  (im G (eqs A C))
()
(eqstrd (A B C G)
  h2
  (a1i (G (eqs B C))
    h1)))

(local theorem syl6eqsr ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs C B))
   (h2 (im G (eqs A B))))
  (im G (eqs A C))
()
(eqstr4d (A B C G)
  h2
  (a1i (G (eqs C B))
    h1)))

(local theorem eqstr3g ((A set ()) (B set ()) (C set ()) (D set ()) (G wff ()))
  ((h1 (eqs A C))
   (h2 (eqs B D))
   (h (im G (eqs A B))))
  (im G (eqs C D))
()
(syl5eqsr (C A D G)
  h1
  (syl6eqs (A B D G)
    h2
    h)))

(local theorem eqstr4g ((A set ()) (B set ()) (C set ()) (D set ()) (G wff ()))
  ((h1 (eqs C A))
   (h2 (eqs D B))
   (h (im G (eqs A B))))
  (im G (eqs C D))
()
(syl5eqs (C A D G)
  h1
  (syl6eqsr (A B D G)
    h2
    h)))

(local theorem eleq1 ((A set ()) (a nat ()) (b nat ())) ()
  (im (eq a b) (iff (el a A) (el b A)))
()
(ibid ((eq a b) (el a A) (el b A))
  (ax_8 (a b A))
  (syl ((eq a b) (eq b a) (im (el b A) (el a A)))
    (ax_8 (b a A))
    (eqcom (a b)))))

(local theorem eleq2 ((A set ()) (B set ()) (a nat ())) ()
  (im (eqs A B) (iff (el a A) (el a B)))
((x nat))
(:conv (im (eqs A B) (iff (el a A) (el a B)))
  (im
    (:unfold eqs (A B) (x)
      (al x (iff (el x A) (el x B))))
    (iff (el a A) (el a B)))
  (eale (x a (iff (el x A) (el x B)) (iff (el a A) (el a B)))
    (bieqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem eleq1d ((A set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h (im G (eq a b))))
  (im G (iff (el a A) (el b A)))
()
(syl (G (eq a b) (iff (el a A) (el b A)))
  (eleq1 (A a b))
  h))

(local theorem eleq2d ((A set ()) (B set ()) (G wff ()) (a nat ()))
  ((h (im G (eqs A B))))
  (im G (iff (el a A) (el a B)))
()
(syl (G (eqs A B) (iff (el a A) (el a B)))
  (eleq2 (A B a))
  h))

(local theorem eleqd ((G wff ()) (a nat ()) (b nat ()) (A set ()) (B set ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eqs A B))))
  (im G (iff (el a A) (el b B)))
()
(bitrd (G (el a A) (el b A) (el b B))
  (eleq1d (A G a b)
    h1)
  (eleq2d (A B G b)
    h2)))

(local theorem eqseqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (iff (eqs _A1 _B1) (eqs _A2 _B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (iff (eqs _A1 _B1) (eqs _A2 _B2)))
  (im
    _G
    (iff
      (:unfold eqs (_A1 _B1) (x)
        (al x (iff (el x _A1) (el x _B1))))
      (:unfold eqs (_A2 _B2) (x)
        (al x (iff (el x _A2) (el x _B2))))))
  (aleqd (_G x (iff (el x _A1) (el x _B1)) (iff (el x _A2) (el x _B2)))
    (bieqd (_G (el x _A1) (el x _A2) (el x _B1) (el x _B2))
      (eleqd (_G x x _A1 _A2)
        H1
        _Ah)
      (eleqd (_G x x _B1 _B2)
        H1
        _Bh))))))

(local theorem eqseq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (iff (eqs _A1 _B1) (eqs _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (iff (eqs _A1 _B1) (eqs _A2 _B2)))
  (eqseqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem eqseq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (iff (eqs _A1 B) (eqs _A2 B)))
()
(eqseqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem eqseq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (iff (eqs _A1 B) (eqs _A2 B)))
()
(eqseq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem eqseq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (iff (eqs A _B1) (eqs A _B2)))
()
(eqseqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem eqseq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (iff (eqs A _B1) (eqs A _B2)))
()
(eqseq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem abeq ((x nat) (p wff (x)) (q wff (x))) ()
  (im (al x (iff p q)) (eqs (ab x p) (ab x q)))
((y nat))
(:conv (im (al x (iff p q)) (eqs (ab x p) (ab x q)))
  (im
    (al x (iff p q))
    (:unfold eqs ((ab x p) (ab x q)) (y)
      (al y (iff (el y (ab x p)) (el y (ab x q))))))
  (iald (y (al x (iff p q)) (iff (el y (ab x p)) (el y (ab x q))))
    (bitr4g ((al x (iff p q)) (sb y x p) (sb y x q) (el y (ab x p)) (el y (ab x q)))
      (elab (y x p))
      (elab (y x q))
      (ealeh (x y (iff p q) (iff (sb y x p) (sb y x q)))
        (nfbi (x (sb y x p) (sb y x q))
          (nfsb1 (x y p))
          (nfsb1 (x y q)))
        (bieqd ((eq x y) p (sb y x p) q (sb y x q))
          (sbq (x y p))
          (sbq (x y q))))))))

(local theorem abeqd ((G wff ()) (x nat) (p wff (x)) (q wff (x)))
  ((h (im G (iff p q))))
  (im G (eqs (ab x p) (ab x q)))
()
(syl (G (al x (iff p q)) (eqs (ab x p) (ab x q)))
  (abeq (x p q))
  (iald (x G (iff p q))
    h)))

(local theorem abeqi ((x nat) (p wff (x)) (q wff (x)))
  ((h (iff p q)))
  (eqs (ab x p) (ab x q))
()
(trud ((eqs (ab x p) (ab x q)))
  (abeqd ((tru) x p q)
    (a1i ((tru) (iff p q))
      h))))

(local theorem eqri ((A set ()) (B set ()) (x nat))
  ((h (iff (el x A) (el x B))))
  (eqs A B)
()
(:conv (eqs A B)
  (:unfold eqs (A B) (x)
    (al x (iff (el x A) (el x B))))
  (ax_gen (x (iff (el x A) (el x B)))
    h)))

(local theorem eqrd ((A set ()) (B set ()) (G wff ()) (x nat))
  ((h (im G (iff (el x A) (el x B)))))
  (im G (eqs A B))
()
(:conv (im G (eqs A B))
  (im
    G
    (:unfold eqs (A B) (x)
      (al x (iff (el x A) (el x B)))))
  (iald (x G (iff (el x A) (el x B)))
    h)))

(local theorem cbvabh ((x nat) (y nat) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (eqs (ab x p) (ab y q))
((z nat))
(eqri ((ab x p) (ab y q) z)
  (bitr4gi ((sb z x p) (sb z y q) (el z (ab x p)) (el z (ab y q)))
    (elab (z x p))
    (elab (z y q))
    (cbvsbh (x y z p q)
      h1
      h2
      e))))

(local theorem cbvab ((x nat) (y nat) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (eqs (ab x p) (ab y q))
()
(cbvabh (x y p q)
  (nfv (p y))
  (nfv (q x))
  e))

(local theorem cbvabs ((x nat) (y nat) (p wff (x))) ()
  (eqs (ab x p) (ab y (sb y x p)))
()
(cbvabh (x y p (sb y x p))
  (nfv (p y))
  (nfsb1 (x y p))
  (sbq (x y p))))

(local theorem cbvabd ((x nat) (y nat) (G wff ()) (p wff (x)) (q wff (y)))
  ((h (im (an G (eq x y)) (iff p q))))
  (im G (eqs (ab x p) (ab y q)))
()
(eqstrd ((ab x p) (ab y (sb y x p)) (ab y q) G)
  (a1i (G (eqs (ab x p) (ab y (sb y x p))))
    (cbvabs (x y p)))
  (abeqd (G y (sb y x p) q)
    (syl (G (al x (im (eq x y) (iff p q))) (iff (sb y x p) q))
      (sbet (x y p q))
      (ialda (x G (eq x y) (iff p q))
        h)))))

(local theorem elab2 ((x nat) (a nat (x)) (p wff (x))) ()
  (iff (el a (ab x p)) (sb a x p))
((y nat))
(ax_mp ((iff (sb a y (sb y x p)) (sb a x p)) (iff (el a (ab x p)) (sb a x p)))
  (ax_mp ((iff (el a (ab x p)) (sb a y (sb y x p))) (im (iff (sb a y (sb y x p)) (sb a x p)) (iff (el a (ab x p)) (sb a x p))))
    (bitr ((el a (ab x p)) (sb a y (sb y x p)) (sb a x p)))
    (ax_mp ((iff (el a (ab y (sb y x p))) (sb a y (sb y x p))) (iff (el a (ab x p)) (sb a y (sb y x p))))
      (ax_mp ((iff (el a (ab x p)) (el a (ab y (sb y x p)))) (im (iff (el a (ab y (sb y x p))) (sb a y (sb y x p))) (iff (el a (ab x p)) (sb a y (sb y x p)))))
        (bitr ((el a (ab x p)) (el a (ab y (sb y x p))) (sb a y (sb y x p))))
        (ax_mp ((eqs (ab x p) (ab y (sb y x p))) (iff (el a (ab x p)) (el a (ab y (sb y x p)))))
          (eleq2 ((ab x p) (ab y (sb y x p)) a))
          (cbvabh (x y p (sb y x p))
            (nfv (p y))
            (nfsb1 (x y p))
            (sbq (x y p)))))
      (elab (a y (sb y x p)))))
  (sbco (x y a p))))

(local theorem elabe ((x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (eq x a) (iff p q))))
  (iff (el a (ab x p)) q)
()
(ax_mp ((iff (sb a x p) q) (iff (el a (ab x p)) q))
  (ax_mp ((iff (el a (ab x p)) (sb a x p)) (im (iff (sb a x p) q) (iff (el a (ab x p)) q)))
    (bitr ((el a (ab x p)) (sb a x p) q))
    (elab2 (x a p)))
  (sbe (x a p q)
    e)))

(local theorem elabed ((G wff ()) (x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (an G (eq x a)) (iff p q))))
  (im G (iff (el a (ab x p)) q))
()
(syl5bb (G (el a (ab x p)) (sb a x p) q)
  (elab2 (x a p))
  (sbed (G x a p q)
    e)))

(local theorem ssabed ((G wff ()) (x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((h (im (an G (eq x a)) (im p q))))
  (im G (im (el a (ab x p)) q))
()
(syl5bi (G (el a (ab x p)) (sb a x p) q)
  (elab2 (x a p))
  (mpi (G (ex x (eq x a)) (im (sb a x p) q))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (im (sb a x p) q))
      (nfv (G x))
      (nfim (x (sb a x p) q)
        (nfsb1 (x a p))
        (nfv (q x)))
      (exp (G (eq x a) (im (sb a x p) q))
        (syld ((an G (eq x a)) (sb a x p) p q)
          (bi2d ((an G (eq x a)) p (sb a x p))
            (anwr (G (eq x a) (iff p (sb a x p)))
              (sbq (x a p))))
          h))))))

(local theorem eelabd ((G wff ()) (x nat) (a nat (x)) (p wff (x)) (q wff ()))
  ((h (im G (im p q))))
  (im G (im (el a (ab x p)) q))
((y nat))
(syl5 (G (el a (ab x p)) (ex y (el y (ab x p))) q)
  (iexe (y a (el y (ab x p)) (el a (ab x p)))
    (eleq1 ((ab x p) y a)))
  (eexd (y G (el y (ab x p)) q)
    (ssabed (G x y p q)
      (anwl (G (eq x y) (im p q))
        h)))))

(local theorem ssabeled ((A set ()) (G wff ()) (x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((h (im (an G (eq x a)) (im p (an q (el x A))))))
  (im G (im (el a (ab x p)) (an q (el a A))))
()
(ssabed (G x a p (an q (el a A)))
  (syld ((an G (eq x a)) p (an q (el x A)) (an q (el a A)))
    h
    (bi1d ((an G (eq x a)) (an q (el x A)) (an q (el a A)))
      (aneq2d ((an G (eq x a)) q (el x A) (el a A))
        (eleq1d (A (an G (eq x a)) x a)
          (anr (G (eq x a)))))))))

(local theorem abid ((x nat) (p wff (x))) ()
  (iff (el x (ab x p)) p)
()
(ax_mp ((iff (sb x x p) p) (iff (el x (ab x p)) p))
  (ax_mp ((iff (el x (ab x p)) (sb x x p)) (im (iff (sb x x p) p) (iff (el x (ab x p)) p)))
    (bitr ((el x (ab x p)) (sb x x p) p))
    (elab2 (x x p)))
  (sbid (x p))))

(local theorem abid2 ((A set ()) (x nat)) ()
  (eqs (ab x (el x A)) A)
((y nat))
(eqri ((ab x (el x A)) A y)
  (elabe (x y (el x A) (el y A))
    (eleq1 (A x y)))))

(def subset ((A set ()) (B set ())) (wff ())
((x nat))
(al x (im (el x A) (el x B))))

(local theorem sseqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (iff (subset _A1 _B1) (subset _A2 _B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (iff (subset _A1 _B1) (subset _A2 _B2)))
  (im
    _G
    (iff
      (:unfold subset (_A1 _B1) (x)
        (al x (im (el x _A1) (el x _B1))))
      (:unfold subset (_A2 _B2) (x)
        (al x (im (el x _A2) (el x _B2))))))
  (aleqd (_G x (im (el x _A1) (el x _B1)) (im (el x _A2) (el x _B2)))
    (imeqd (_G (el x _A1) (el x _A2) (el x _B1) (el x _B2))
      (eleqd (_G x x _A1 _A2)
        H1
        _Ah)
      (eleqd (_G x x _B1 _B2)
        H1
        _Bh))))))

(local theorem sseq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (iff (subset _A1 _B1) (subset _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (iff (subset _A1 _B1) (subset _A2 _B2)))
  (sseqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem sseq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (iff (subset _A1 B) (subset _A2 B)))
()
(sseqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem sseq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (iff (subset _A1 B) (subset _A2 B)))
()
(sseq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem sseq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (iff (subset A _B1) (subset A _B2)))
()
(sseqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem sseq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (iff (subset A _B1) (subset A _B2)))
()
(sseq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem dfss ((A set ()) (B set ()) (x nat)) ()
  (iff (subset A B) (al x (im (el x A) (el x B))))
()
(:conv (iff (subset A B) (al x (im (el x A) (el x B))))
  (iff
    (subset A B)
    (:sym (:unfold subset (A B) (x)
      (al x (im (el x A) (el x B))))))
  (biid ((subset A B)))))

(local theorem ssel ((A set ()) (B set ()) (a nat ())) ()
  (im (subset A B) (im (el a A) (el a B)))
((x nat))
(:conv (im (subset A B) (im (el a A) (el a B)))
  (im
    (:unfold subset (A B) (x)
      (al x (im (el x A) (el x B))))
    (im (el a A) (el a B)))
  (eale (x a (im (el x A) (el x B)) (im (el a A) (el a B)))
    (imeqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem sseld ((A set ()) (B set ()) (G wff ()) (a nat ()))
  ((h1 (im G (subset A B)))
   (h2 (im G (el a A))))
  (im G (el a B))
()
(sylc (G (subset A B) (el a A) (el a B))
  (ssel (A B a))
  h1
  h2))

(local theorem ssid ((A set ())) ()
  (subset A A)
((x nat))
(:conv (subset A A)
  (:unfold subset (A A) (x)
    (al x (im (el x A) (el x A))))
  (ax_gen (x (im (el x A) (el x A)))
    (id ((el x A))))))

(local theorem sstr ((A set ()) (B set ()) (C set ())) ()
  (im (subset A B) (im (subset B C) (subset A C)))
((x nat))
(exp ((subset A B) (subset B C) (subset A C))
  (:conv (im (an (subset A B) (subset B C)) (subset A C))
    (im
      (an (subset A B) (subset B C))
      (:unfold subset (A C) (x)
        (al x (im (el x A) (el x C)))))
    (iald (x (an (subset A B) (subset B C)) (im (el x A) (el x C)))
      (syld ((an (subset A B) (subset B C)) (el x A) (el x B) (el x C))
        (anwl ((subset A B) (subset B C) (im (el x A) (el x B)))
          (ssel (A B x)))
        (anwr ((subset A B) (subset B C) (im (el x B) (el x C)))
          (ssel (B C x))))))))

(local theorem eqss ((A set ()) (B set ())) ()
  (im (eqs A B) (subset A B))
()
(mpbii ((eqs A B) (subset A A) (subset A B))
  (ssid (A))
  (sseq2 (A A B))))

(local theorem eqssr ((A set ()) (B set ())) ()
  (im (eqs A B) (subset B A))
()
(mpbii ((eqs A B) (subset A A) (subset B A))
  (ssid (A))
  (sseq1 (A B A))))

(local theorem ssasym ((A set ()) (B set ())) ()
  (im (subset A B) (im (subset B A) (eqs A B)))
((x nat))
(:conv (im (subset A B) (im (subset B A) (eqs A B)))
  (im
    (:unfold subset (A B) (x)
      (al x (im (el x A) (el x B))))
    (im
      (:unfold subset (B A) (x)
        (al x (im (el x B) (el x A))))
      (:unfold eqs (A B) (x)
        (al x (iff (el x A) (el x B))))))
  (al2imi (x (im (el x A) (el x B)) (im (el x B) (el x A)) (iff (el x A) (el x B)))
    (:conv (im (im (el x A) (el x B)) (im (im (el x B) (el x A)) (iff (el x A) (el x B))))
      (im
        (im (el x A) (el x B))
        (im
          (im (el x B) (el x A))
          (:unfold iff ((el x A) (el x B)) ()
            (an (im (el x A) (el x B)) (im (el x B) (el x A))))))
      (ian ((im (el x A) (el x B)) (im (el x B) (el x A))))))))

(local theorem ssasymd ((A set ()) (B set ()) (G wff ()))
  ((h1 (im G (subset A B)))
   (h2 (im G (subset B A))))
  (im G (eqs A B))
()
(sylc (G (subset A B) (subset B A) (eqs A B))
  (ssasym (A B))
  h1
  h2))

(local theorem ssasymb ((A set ()) (B set ())) ()
  (iff (eqs A B) (an (subset A B) (subset B A)))
()
(ibii ((eqs A B) (an (subset A B) (subset B A)))
  (iand ((eqs A B) (subset A B) (subset B A))
    (eqss (A B))
    (eqssr (A B)))
  (imp ((subset A B) (subset B A) (eqs A B))
    (ssasym (A B)))))

(def Inter ((A set ()) (B set ())) (set ())
((x nat))
(ab x (an (el x A) (el x B))))

(local theorem ineqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (Inter _A1 _B1) (Inter _A2 _B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eqs (Inter _A1 _B1) (Inter _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold Inter (_A1 _B1) (x)
        (ab x (an (el x _A1) (el x _B1))))
      (:unfold Inter (_A2 _B2) (x)
        (ab x (an (el x _A2) (el x _B2))))))
  (abeqd (_G x (an (el x _A1) (el x _B1)) (an (el x _A2) (el x _B2)))
    (aneqd (_G (el x _A1) (el x _A2) (el x _B1) (el x _B2))
      (eleqd (_G x x _A1 _A2)
        H1
        _Ah)
      (eleqd (_G x x _B1 _B2)
        H1
        _Bh))))))

(local theorem ineq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (eqs (Inter _A1 _B1) (Inter _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (eqs (Inter _A1 _B1) (Inter _A2 _B2)))
  (ineqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem ineq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (Inter _A1 B) (Inter _A2 B)))
()
(ineqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem ineq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (eqs (Inter _A1 B) (Inter _A2 B)))
()
(ineq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem ineq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (Inter A _B1) (Inter A _B2)))
()
(ineqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem ineq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (eqs (Inter A _B1) (Inter A _B2)))
()
(ineq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem elin ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (Inter A B)) (an (el a A) (el a B)))
((x nat))
(:conv (iff (el a (Inter A B)) (an (el a A) (el a B)))
  (iff
    (el
      a
      (:unfold Inter (A B) (x)
        (ab x (an (el x A) (el x B)))))
    (an (el a A) (el a B)))
  (elabe (x a (an (el x A) (el x B)) (an (el a A) (el a B)))
    (aneqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem incom ((A set ()) (B set ())) ()
  (eqs (Inter A B) (Inter B A))
((x nat))
(eqri ((Inter A B) (Inter B A) x)
  (ax_mp ((iff (an (el x A) (el x B)) (el x (Inter B A))) (iff (el x (Inter A B)) (el x (Inter B A))))
    (ax_mp ((iff (el x (Inter A B)) (an (el x A) (el x B))) (im (iff (an (el x A) (el x B)) (el x (Inter B A))) (iff (el x (Inter A B)) (el x (Inter B A)))))
      (bitr ((el x (Inter A B)) (an (el x A) (el x B)) (el x (Inter B A))))
      (elin (A B x)))
    (ax_mp ((iff (el x (Inter B A)) (an (el x B) (el x A))) (iff (an (el x A) (el x B)) (el x (Inter B A))))
      (ax_mp ((iff (an (el x A) (el x B)) (an (el x B) (el x A))) (im (iff (el x (Inter B A)) (an (el x B) (el x A))) (iff (an (el x A) (el x B)) (el x (Inter B A)))))
        (bitr4 ((an (el x A) (el x B)) (an (el x B) (el x A)) (el x (Inter B A))))
        (ancomb ((el x A) (el x B))))
      (elin (B A x))))))

(local theorem inass ((A set ()) (B set ()) (C set ())) ()
  (eqs (Inter (Inter A B) C) (Inter A (Inter B C)))
((x nat))
(eqri ((Inter (Inter A B) C) (Inter A (Inter B C)) x)
  (ax_mp ((iff (el x (Inter A (Inter B C))) (an (el x (Inter A B)) (el x C))) (iff (el x (Inter (Inter A B) C)) (el x (Inter A (Inter B C)))))
    (ax_mp ((iff (el x (Inter (Inter A B) C)) (an (el x (Inter A B)) (el x C))) (im (iff (el x (Inter A (Inter B C))) (an (el x (Inter A B)) (el x C))) (iff (el x (Inter (Inter A B) C)) (el x (Inter A (Inter B C))))))
      (bitr4 ((el x (Inter (Inter A B) C)) (an (el x (Inter A B)) (el x C)) (el x (Inter A (Inter B C)))))
      (elin ((Inter A B) C x)))
    (ax_mp ((iff (an (el x (Inter A B)) (el x C)) (an (el x A) (el x (Inter B C)))) (iff (el x (Inter A (Inter B C))) (an (el x (Inter A B)) (el x C))))
      (ax_mp ((iff (el x (Inter A (Inter B C))) (an (el x A) (el x (Inter B C)))) (im (iff (an (el x (Inter A B)) (el x C)) (an (el x A) (el x (Inter B C)))) (iff (el x (Inter A (Inter B C))) (an (el x (Inter A B)) (el x C)))))
        (bitr4 ((el x (Inter A (Inter B C))) (an (el x A) (el x (Inter B C))) (an (el x (Inter A B)) (el x C))))
        (elin (A (Inter B C) x)))
      (ax_mp ((iff (an (el x A) (el x (Inter B C))) (an (an (el x A) (el x B)) (el x C))) (iff (an (el x (Inter A B)) (el x C)) (an (el x A) (el x (Inter B C)))))
        (ax_mp ((iff (an (el x (Inter A B)) (el x C)) (an (an (el x A) (el x B)) (el x C))) (im (iff (an (el x A) (el x (Inter B C))) (an (an (el x A) (el x B)) (el x C))) (iff (an (el x (Inter A B)) (el x C)) (an (el x A) (el x (Inter B C))))))
          (bitr4 ((an (el x (Inter A B)) (el x C)) (an (an (el x A) (el x B)) (el x C)) (an (el x A) (el x (Inter B C)))))
          (aneq1i ((el x (Inter A B)) (an (el x A) (el x B)) (el x C))
            (elin (A B x))))
        (ax_mp ((iff (an (an (el x A) (el x B)) (el x C)) (an (el x A) (an (el x B) (el x C)))) (iff (an (el x A) (el x (Inter B C))) (an (an (el x A) (el x B)) (el x C))))
          (ax_mp ((iff (an (el x A) (el x (Inter B C))) (an (el x A) (an (el x B) (el x C)))) (im (iff (an (an (el x A) (el x B)) (el x C)) (an (el x A) (an (el x B) (el x C)))) (iff (an (el x A) (el x (Inter B C))) (an (an (el x A) (el x B)) (el x C)))))
            (bitr4 ((an (el x A) (el x (Inter B C))) (an (el x A) (an (el x B) (el x C))) (an (an (el x A) (el x B)) (el x C))))
            (aneq2i ((el x A) (el x (Inter B C)) (an (el x B) (el x C)))
              (elin (B C x))))
          (anass ((el x A) (el x B) (el x C)))))))))

(local theorem inss1 ((A set ()) (B set ())) ()
  (subset (Inter A B) A)
((x nat))
(:conv (subset (Inter A B) A)
  (:unfold subset ((Inter A B) A) (x)
    (al x (im (el x (Inter A B)) (el x A))))
  (ax_gen (x (im (el x (Inter A B)) (el x A)))
    (sylbi ((el x (Inter A B)) (an (el x A) (el x B)) (el x A))
      (elin (A B x))
      (anl ((el x A) (el x B)))))))

(local theorem inss2 ((A set ()) (B set ())) ()
  (subset (Inter A B) B)
()
(mpbi ((subset (Inter B A) B) (subset (Inter A B) B))
  (ax_mp ((eqs (Inter B A) (Inter A B)) (iff (subset (Inter B A) B) (subset (Inter A B) B)))
    (sseq1 ((Inter B A) (Inter A B) B))
    (incom (B A)))
  (inss1 (B A))))

(local theorem ssin ((A set ()) (B set ()) (C set ())) ()
  (iff (subset A (Inter B C)) (an (subset A B) (subset A C)))
((x nat))
(:let H1 (anr ((an (subset A B) (subset A C)) (el x A)))
(ibii ((subset A (Inter B C)) (an (subset A B) (subset A C)))
  (iand ((subset A (Inter B C)) (subset A B) (subset A C))
    (mpi ((subset A (Inter B C)) (subset (Inter B C) B) (subset A B))
      (inss1 (B C))
      (sstr (A (Inter B C) B)))
    (mpi ((subset A (Inter B C)) (subset (Inter B C) C) (subset A C))
      (inss2 (B C))
      (sstr (A (Inter B C) C))))
  (:conv (im (an (subset A B) (subset A C)) (subset A (Inter B C)))
    (im
      (an (subset A B) (subset A C))
      (:unfold subset (A (Inter B C)) (x)
        (al x (im (el x A) (el x (Inter B C))))))
    (iald (x (an (subset A B) (subset A C)) (im (el x A) (el x (Inter B C))))
      (exp ((an (subset A B) (subset A C)) (el x A) (el x (Inter B C)))
        (sylibr ((an (an (subset A B) (subset A C)) (el x A)) (an (el x B) (el x C)) (el x (Inter B C)))
          (elin (B C x))
          (iand ((an (an (subset A B) (subset A C)) (el x A)) (el x B) (el x C))
            (sseld (A B (an (an (subset A B) (subset A C)) (el x A)) x)
              (anll ((subset A B) (subset A C) (el x A)))
              H1)
            (sseld (A C (an (an (subset A B) (subset A C)) (el x A)) x)
              (anlr ((subset A B) (subset A C) (el x A)))
              H1)))))))))

(local theorem ssin1 ((A set ()) (B set ()) (C set ())) ()
  (im (subset A B) (subset (Inter A C) (Inter B C)))
()
(sylibr ((subset A B) (an (subset (Inter A C) B) (subset (Inter A C) C)) (subset (Inter A C) (Inter B C)))
  (ssin ((Inter A C) B C))
  (iand ((subset A B) (subset (Inter A C) B) (subset (Inter A C) C))
    (ax_mp ((subset (Inter A C) A) (im (subset A B) (subset (Inter A C) B)))
      (sstr ((Inter A C) A B))
      (inss1 (A C)))
    (a1i ((subset A B) (subset (Inter A C) C))
      (inss2 (A C))))))

(local theorem ssin2 ((A set ()) (B set ()) (C set ())) ()
  (im (subset B C) (subset (Inter A B) (Inter A C)))
()
(sylibr ((subset B C) (an (subset (Inter A B) A) (subset (Inter A B) C)) (subset (Inter A B) (Inter A C)))
  (ssin ((Inter A B) A C))
  (iand ((subset B C) (subset (Inter A B) A) (subset (Inter A B) C))
    (a1i ((subset B C) (subset (Inter A B) A))
      (inss1 (A B)))
    (ax_mp ((subset (Inter A B) B) (im (subset B C) (subset (Inter A B) C)))
      (sstr ((Inter A B) B C))
      (inss2 (A B))))))

(local theorem eqin1 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Inter A B) A))
()
(ibii ((subset A B) (eqs (Inter A B) A))
  (ssasymd ((Inter A B) A (subset A B))
    (a1i ((subset A B) (subset (Inter A B) A))
      (inss1 (A B)))
    (sylibr ((subset A B) (an (subset A A) (subset A B)) (subset A (Inter A B)))
      (ssin (A A B))
      (iand ((subset A B) (subset A A) (subset A B))
        (a1i ((subset A B) (subset A A))
          (ssid (A)))
        (id ((subset A B))))))
  (mpbii ((eqs (Inter A B) A) (subset (Inter A B) B) (subset A B))
    (inss2 (A B))
    (sseq1 ((Inter A B) A B)))))

(local theorem eqin2 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Inter B A) A))
()
(ax_mp ((iff (eqs (Inter A B) A) (eqs (Inter B A) A)) (iff (subset A B) (eqs (Inter B A) A)))
  (ax_mp ((iff (subset A B) (eqs (Inter A B) A)) (im (iff (eqs (Inter A B) A) (eqs (Inter B A) A)) (iff (subset A B) (eqs (Inter B A) A))))
    (bitr ((subset A B) (eqs (Inter A B) A) (eqs (Inter B A) A)))
    (eqin1 (A B)))
  (ax_mp ((eqs (Inter A B) (Inter B A)) (iff (eqs (Inter A B) A) (eqs (Inter B A) A)))
    (eqseq1 ((Inter A B) (Inter B A) A))
    (incom (A B)))))

(def Union ((A set ()) (B set ())) (set ())
((x nat))
(ab x (or (el x A) (el x B))))

(local theorem uneqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (Union _A1 _B1) (Union _A2 _B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eqs (Union _A1 _B1) (Union _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold Union (_A1 _B1) (x)
        (ab x (or (el x _A1) (el x _B1))))
      (:unfold Union (_A2 _B2) (x)
        (ab x (or (el x _A2) (el x _B2))))))
  (abeqd (_G x (or (el x _A1) (el x _B1)) (or (el x _A2) (el x _B2)))
    (oreqd (_G (el x _A1) (el x _A2) (el x _B1) (el x _B2))
      (eleqd (_G x x _A1 _A2)
        H1
        _Ah)
      (eleqd (_G x x _B1 _B2)
        H1
        _Bh))))))

(local theorem uneq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (eqs (Union _A1 _B1) (Union _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (eqs (Union _A1 _B1) (Union _A2 _B2)))
  (uneqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem uneq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (Union _A1 B) (Union _A2 B)))
()
(uneqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem uneq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (eqs (Union _A1 B) (Union _A2 B)))
()
(uneq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem uneq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (Union A _B1) (Union A _B2)))
()
(uneqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem uneq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (eqs (Union A _B1) (Union A _B2)))
()
(uneq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem elun ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (Union A B)) (or (el a A) (el a B)))
((x nat))
(:conv (iff (el a (Union A B)) (or (el a A) (el a B)))
  (iff
    (el
      a
      (:unfold Union (A B) (x)
        (ab x (or (el x A) (el x B)))))
    (or (el a A) (el a B)))
  (elabe (x a (or (el x A) (el x B)) (or (el a A) (el a B)))
    (oreqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem uncom ((A set ()) (B set ())) ()
  (eqs (Union A B) (Union B A))
((x nat))
(eqri ((Union A B) (Union B A) x)
  (ax_mp ((iff (or (el x A) (el x B)) (el x (Union B A))) (iff (el x (Union A B)) (el x (Union B A))))
    (ax_mp ((iff (el x (Union A B)) (or (el x A) (el x B))) (im (iff (or (el x A) (el x B)) (el x (Union B A))) (iff (el x (Union A B)) (el x (Union B A)))))
      (bitr ((el x (Union A B)) (or (el x A) (el x B)) (el x (Union B A))))
      (elun (A B x)))
    (ax_mp ((iff (el x (Union B A)) (or (el x B) (el x A))) (iff (or (el x A) (el x B)) (el x (Union B A))))
      (ax_mp ((iff (or (el x A) (el x B)) (or (el x B) (el x A))) (im (iff (el x (Union B A)) (or (el x B) (el x A))) (iff (or (el x A) (el x B)) (el x (Union B A)))))
        (bitr4 ((or (el x A) (el x B)) (or (el x B) (el x A)) (el x (Union B A))))
        (orcomb ((el x A) (el x B))))
      (elun (B A x))))))

(local theorem unass ((A set ()) (B set ()) (C set ())) ()
  (eqs (Union (Union A B) C) (Union A (Union B C)))
((x nat))
(eqri ((Union (Union A B) C) (Union A (Union B C)) x)
  (ax_mp ((iff (el x (Union A (Union B C))) (or (el x (Union A B)) (el x C))) (iff (el x (Union (Union A B) C)) (el x (Union A (Union B C)))))
    (ax_mp ((iff (el x (Union (Union A B) C)) (or (el x (Union A B)) (el x C))) (im (iff (el x (Union A (Union B C))) (or (el x (Union A B)) (el x C))) (iff (el x (Union (Union A B) C)) (el x (Union A (Union B C))))))
      (bitr4 ((el x (Union (Union A B) C)) (or (el x (Union A B)) (el x C)) (el x (Union A (Union B C)))))
      (elun ((Union A B) C x)))
    (ax_mp ((iff (or (el x (Union A B)) (el x C)) (or (el x A) (el x (Union B C)))) (iff (el x (Union A (Union B C))) (or (el x (Union A B)) (el x C))))
      (ax_mp ((iff (el x (Union A (Union B C))) (or (el x A) (el x (Union B C)))) (im (iff (or (el x (Union A B)) (el x C)) (or (el x A) (el x (Union B C)))) (iff (el x (Union A (Union B C))) (or (el x (Union A B)) (el x C)))))
        (bitr4 ((el x (Union A (Union B C))) (or (el x A) (el x (Union B C))) (or (el x (Union A B)) (el x C))))
        (elun (A (Union B C) x)))
      (ax_mp ((iff (or (el x A) (el x (Union B C))) (or (or (el x A) (el x B)) (el x C))) (iff (or (el x (Union A B)) (el x C)) (or (el x A) (el x (Union B C)))))
        (ax_mp ((iff (or (el x (Union A B)) (el x C)) (or (or (el x A) (el x B)) (el x C))) (im (iff (or (el x A) (el x (Union B C))) (or (or (el x A) (el x B)) (el x C))) (iff (or (el x (Union A B)) (el x C)) (or (el x A) (el x (Union B C))))))
          (bitr4 ((or (el x (Union A B)) (el x C)) (or (or (el x A) (el x B)) (el x C)) (or (el x A) (el x (Union B C)))))
          (oreq1i ((el x (Union A B)) (or (el x A) (el x B)) (el x C))
            (elun (A B x))))
        (ax_mp ((iff (or (or (el x A) (el x B)) (el x C)) (or (el x A) (or (el x B) (el x C)))) (iff (or (el x A) (el x (Union B C))) (or (or (el x A) (el x B)) (el x C))))
          (ax_mp ((iff (or (el x A) (el x (Union B C))) (or (el x A) (or (el x B) (el x C)))) (im (iff (or (or (el x A) (el x B)) (el x C)) (or (el x A) (or (el x B) (el x C)))) (iff (or (el x A) (el x (Union B C))) (or (or (el x A) (el x B)) (el x C)))))
            (bitr4 ((or (el x A) (el x (Union B C))) (or (el x A) (or (el x B) (el x C))) (or (or (el x A) (el x B)) (el x C))))
            (oreq2i ((el x A) (el x (Union B C)) (or (el x B) (el x C)))
              (elun (B C x))))
          (orass ((el x A) (el x B) (el x C)))))))))

(local theorem indi ((A set ()) (B set ()) (C set ())) ()
  (eqs (Inter A (Union B C)) (Union (Inter A B) (Inter A C)))
((x nat))
(eqri ((Inter A (Union B C)) (Union (Inter A B) (Inter A C)) x)
  (ax_mp ((iff (el x (Union (Inter A B) (Inter A C))) (an (el x A) (el x (Union B C)))) (iff (el x (Inter A (Union B C))) (el x (Union (Inter A B) (Inter A C)))))
    (ax_mp ((iff (el x (Inter A (Union B C))) (an (el x A) (el x (Union B C)))) (im (iff (el x (Union (Inter A B) (Inter A C))) (an (el x A) (el x (Union B C)))) (iff (el x (Inter A (Union B C))) (el x (Union (Inter A B) (Inter A C))))))
      (bitr4 ((el x (Inter A (Union B C))) (an (el x A) (el x (Union B C))) (el x (Union (Inter A B) (Inter A C)))))
      (elin (A (Union B C) x)))
    (ax_mp ((iff (an (el x A) (el x (Union B C))) (or (el x (Inter A B)) (el x (Inter A C)))) (iff (el x (Union (Inter A B) (Inter A C))) (an (el x A) (el x (Union B C)))))
      (ax_mp ((iff (el x (Union (Inter A B) (Inter A C))) (or (el x (Inter A B)) (el x (Inter A C)))) (im (iff (an (el x A) (el x (Union B C))) (or (el x (Inter A B)) (el x (Inter A C)))) (iff (el x (Union (Inter A B) (Inter A C))) (an (el x A) (el x (Union B C))))))
        (bitr4 ((el x (Union (Inter A B) (Inter A C))) (or (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (el x (Union B C)))))
        (elun ((Inter A B) (Inter A C) x)))
      (ax_mp ((iff (or (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (or (el x B) (el x C)))) (iff (an (el x A) (el x (Union B C))) (or (el x (Inter A B)) (el x (Inter A C)))))
        (ax_mp ((iff (an (el x A) (el x (Union B C))) (an (el x A) (or (el x B) (el x C)))) (im (iff (or (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (or (el x B) (el x C)))) (iff (an (el x A) (el x (Union B C))) (or (el x (Inter A B)) (el x (Inter A C))))))
          (bitr4 ((an (el x A) (el x (Union B C))) (an (el x A) (or (el x B) (el x C))) (or (el x (Inter A B)) (el x (Inter A C)))))
          (aneq2i ((el x A) (el x (Union B C)) (or (el x B) (el x C)))
            (elun (B C x))))
        (ax_mp ((iff (an (el x A) (or (el x B) (el x C))) (or (an (el x A) (el x B)) (an (el x A) (el x C)))) (iff (or (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (or (el x B) (el x C)))))
          (ax_mp ((iff (or (el x (Inter A B)) (el x (Inter A C))) (or (an (el x A) (el x B)) (an (el x A) (el x C)))) (im (iff (an (el x A) (or (el x B) (el x C))) (or (an (el x A) (el x B)) (an (el x A) (el x C)))) (iff (or (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (or (el x B) (el x C))))))
            (bitr4 ((or (el x (Inter A B)) (el x (Inter A C))) (or (an (el x A) (el x B)) (an (el x A) (el x C))) (an (el x A) (or (el x B) (el x C)))))
            (ax_mp ((iff (el x (Inter A C)) (an (el x A) (el x C))) (iff (or (el x (Inter A B)) (el x (Inter A C))) (or (an (el x A) (el x B)) (an (el x A) (el x C)))))
              (ax_mp ((iff (el x (Inter A B)) (an (el x A) (el x B))) (im (iff (el x (Inter A C)) (an (el x A) (el x C))) (iff (or (el x (Inter A B)) (el x (Inter A C))) (or (an (el x A) (el x B)) (an (el x A) (el x C))))))
                (oreq ((el x (Inter A B)) (an (el x A) (el x B)) (el x (Inter A C)) (an (el x A) (el x C))))
                (elin (A B x)))
              (elin (A C x))))
          (andi ((el x A) (el x B) (el x C)))))))))

(local theorem indir ((A set ()) (B set ()) (C set ())) ()
  (eqs (Inter (Union A B) C) (Union (Inter A C) (Inter B C)))
()
(ax_mp ((eqs (Union (Inter A C) (Inter B C)) (Inter C (Union A B))) (eqs (Inter (Union A B) C) (Union (Inter A C) (Inter B C))))
  (ax_mp ((eqs (Inter (Union A B) C) (Inter C (Union A B))) (im (eqs (Union (Inter A C) (Inter B C)) (Inter C (Union A B))) (eqs (Inter (Union A B) C) (Union (Inter A C) (Inter B C)))))
    (eqstr4 ((Inter (Union A B) C) (Inter C (Union A B)) (Union (Inter A C) (Inter B C))))
    (incom ((Union A B) C)))
  (ax_mp ((eqs (Inter C (Union A B)) (Union (Inter C A) (Inter C B))) (eqs (Union (Inter A C) (Inter B C)) (Inter C (Union A B))))
    (ax_mp ((eqs (Union (Inter A C) (Inter B C)) (Union (Inter C A) (Inter C B))) (im (eqs (Inter C (Union A B)) (Union (Inter C A) (Inter C B))) (eqs (Union (Inter A C) (Inter B C)) (Inter C (Union A B)))))
      (eqstr4 ((Union (Inter A C) (Inter B C)) (Union (Inter C A) (Inter C B)) (Inter C (Union A B))))
      (ax_mp ((eqs (Inter B C) (Inter C B)) (eqs (Union (Inter A C) (Inter B C)) (Union (Inter C A) (Inter C B))))
        (ax_mp ((eqs (Inter A C) (Inter C A)) (im (eqs (Inter B C) (Inter C B)) (eqs (Union (Inter A C) (Inter B C)) (Union (Inter C A) (Inter C B)))))
          (uneq ((Inter A C) (Inter C A) (Inter B C) (Inter C B)))
          (incom (A C)))
        (incom (B C))))
    (indi (C A B)))))

(local theorem inindi ((A set ()) (B set ()) (C set ())) ()
  (eqs (Inter A (Inter B C)) (Inter (Inter A B) (Inter A C)))
((x nat))
(eqri ((Inter A (Inter B C)) (Inter (Inter A B) (Inter A C)) x)
  (ax_mp ((iff (el x (Inter (Inter A B) (Inter A C))) (an (el x A) (el x (Inter B C)))) (iff (el x (Inter A (Inter B C))) (el x (Inter (Inter A B) (Inter A C)))))
    (ax_mp ((iff (el x (Inter A (Inter B C))) (an (el x A) (el x (Inter B C)))) (im (iff (el x (Inter (Inter A B) (Inter A C))) (an (el x A) (el x (Inter B C)))) (iff (el x (Inter A (Inter B C))) (el x (Inter (Inter A B) (Inter A C))))))
      (bitr4 ((el x (Inter A (Inter B C))) (an (el x A) (el x (Inter B C))) (el x (Inter (Inter A B) (Inter A C)))))
      (elin (A (Inter B C) x)))
    (ax_mp ((iff (an (el x A) (el x (Inter B C))) (an (el x (Inter A B)) (el x (Inter A C)))) (iff (el x (Inter (Inter A B) (Inter A C))) (an (el x A) (el x (Inter B C)))))
      (ax_mp ((iff (el x (Inter (Inter A B) (Inter A C))) (an (el x (Inter A B)) (el x (Inter A C)))) (im (iff (an (el x A) (el x (Inter B C))) (an (el x (Inter A B)) (el x (Inter A C)))) (iff (el x (Inter (Inter A B) (Inter A C))) (an (el x A) (el x (Inter B C))))))
        (bitr4 ((el x (Inter (Inter A B) (Inter A C))) (an (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (el x (Inter B C)))))
        (elin ((Inter A B) (Inter A C) x)))
      (ax_mp ((iff (an (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (an (el x B) (el x C)))) (iff (an (el x A) (el x (Inter B C))) (an (el x (Inter A B)) (el x (Inter A C)))))
        (ax_mp ((iff (an (el x A) (el x (Inter B C))) (an (el x A) (an (el x B) (el x C)))) (im (iff (an (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (an (el x B) (el x C)))) (iff (an (el x A) (el x (Inter B C))) (an (el x (Inter A B)) (el x (Inter A C))))))
          (bitr4 ((an (el x A) (el x (Inter B C))) (an (el x A) (an (el x B) (el x C))) (an (el x (Inter A B)) (el x (Inter A C)))))
          (aneq2i ((el x A) (el x (Inter B C)) (an (el x B) (el x C)))
            (elin (B C x))))
        (ax_mp ((iff (an (el x A) (an (el x B) (el x C))) (an (an (el x A) (el x B)) (an (el x A) (el x C)))) (iff (an (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (an (el x B) (el x C)))))
          (ax_mp ((iff (an (el x (Inter A B)) (el x (Inter A C))) (an (an (el x A) (el x B)) (an (el x A) (el x C)))) (im (iff (an (el x A) (an (el x B) (el x C))) (an (an (el x A) (el x B)) (an (el x A) (el x C)))) (iff (an (el x (Inter A B)) (el x (Inter A C))) (an (el x A) (an (el x B) (el x C))))))
            (bitr4 ((an (el x (Inter A B)) (el x (Inter A C))) (an (an (el x A) (el x B)) (an (el x A) (el x C))) (an (el x A) (an (el x B) (el x C)))))
            (ax_mp ((iff (el x (Inter A C)) (an (el x A) (el x C))) (iff (an (el x (Inter A B)) (el x (Inter A C))) (an (an (el x A) (el x B)) (an (el x A) (el x C)))))
              (ax_mp ((iff (el x (Inter A B)) (an (el x A) (el x B))) (im (iff (el x (Inter A C)) (an (el x A) (el x C))) (iff (an (el x (Inter A B)) (el x (Inter A C))) (an (an (el x A) (el x B)) (an (el x A) (el x C))))))
                (aneq ((el x (Inter A B)) (an (el x A) (el x B)) (el x (Inter A C)) (an (el x A) (el x C))))
                (elin (A B x)))
              (elin (A C x))))
          (anandi ((el x A) (el x B) (el x C)))))))))

(local theorem undi ((A set ()) (B set ()) (C set ())) ()
  (eqs (Union A (Inter B C)) (Inter (Union A B) (Union A C)))
((x nat))
(eqri ((Union A (Inter B C)) (Inter (Union A B) (Union A C)) x)
  (ax_mp ((iff (el x (Inter (Union A B) (Union A C))) (or (el x A) (el x (Inter B C)))) (iff (el x (Union A (Inter B C))) (el x (Inter (Union A B) (Union A C)))))
    (ax_mp ((iff (el x (Union A (Inter B C))) (or (el x A) (el x (Inter B C)))) (im (iff (el x (Inter (Union A B) (Union A C))) (or (el x A) (el x (Inter B C)))) (iff (el x (Union A (Inter B C))) (el x (Inter (Union A B) (Union A C))))))
      (bitr4 ((el x (Union A (Inter B C))) (or (el x A) (el x (Inter B C))) (el x (Inter (Union A B) (Union A C)))))
      (elun (A (Inter B C) x)))
    (ax_mp ((iff (or (el x A) (el x (Inter B C))) (an (el x (Union A B)) (el x (Union A C)))) (iff (el x (Inter (Union A B) (Union A C))) (or (el x A) (el x (Inter B C)))))
      (ax_mp ((iff (el x (Inter (Union A B) (Union A C))) (an (el x (Union A B)) (el x (Union A C)))) (im (iff (or (el x A) (el x (Inter B C))) (an (el x (Union A B)) (el x (Union A C)))) (iff (el x (Inter (Union A B) (Union A C))) (or (el x A) (el x (Inter B C))))))
        (bitr4 ((el x (Inter (Union A B) (Union A C))) (an (el x (Union A B)) (el x (Union A C))) (or (el x A) (el x (Inter B C)))))
        (elin ((Union A B) (Union A C) x)))
      (ax_mp ((iff (an (el x (Union A B)) (el x (Union A C))) (or (el x A) (an (el x B) (el x C)))) (iff (or (el x A) (el x (Inter B C))) (an (el x (Union A B)) (el x (Union A C)))))
        (ax_mp ((iff (or (el x A) (el x (Inter B C))) (or (el x A) (an (el x B) (el x C)))) (im (iff (an (el x (Union A B)) (el x (Union A C))) (or (el x A) (an (el x B) (el x C)))) (iff (or (el x A) (el x (Inter B C))) (an (el x (Union A B)) (el x (Union A C))))))
          (bitr4 ((or (el x A) (el x (Inter B C))) (or (el x A) (an (el x B) (el x C))) (an (el x (Union A B)) (el x (Union A C)))))
          (oreq2i ((el x A) (el x (Inter B C)) (an (el x B) (el x C)))
            (elin (B C x))))
        (ax_mp ((iff (or (el x A) (an (el x B) (el x C))) (an (or (el x A) (el x B)) (or (el x A) (el x C)))) (iff (an (el x (Union A B)) (el x (Union A C))) (or (el x A) (an (el x B) (el x C)))))
          (ax_mp ((iff (an (el x (Union A B)) (el x (Union A C))) (an (or (el x A) (el x B)) (or (el x A) (el x C)))) (im (iff (or (el x A) (an (el x B) (el x C))) (an (or (el x A) (el x B)) (or (el x A) (el x C)))) (iff (an (el x (Union A B)) (el x (Union A C))) (or (el x A) (an (el x B) (el x C))))))
            (bitr4 ((an (el x (Union A B)) (el x (Union A C))) (an (or (el x A) (el x B)) (or (el x A) (el x C))) (or (el x A) (an (el x B) (el x C)))))
            (ax_mp ((iff (el x (Union A C)) (or (el x A) (el x C))) (iff (an (el x (Union A B)) (el x (Union A C))) (an (or (el x A) (el x B)) (or (el x A) (el x C)))))
              (ax_mp ((iff (el x (Union A B)) (or (el x A) (el x B))) (im (iff (el x (Union A C)) (or (el x A) (el x C))) (iff (an (el x (Union A B)) (el x (Union A C))) (an (or (el x A) (el x B)) (or (el x A) (el x C))))))
                (aneq ((el x (Union A B)) (or (el x A) (el x B)) (el x (Union A C)) (or (el x A) (el x C))))
                (elun (A B x)))
              (elun (A C x))))
          (ordi ((el x A) (el x B) (el x C)))))))))

(local theorem undir ((A set ()) (B set ()) (C set ())) ()
  (eqs (Union (Inter A B) C) (Inter (Union A C) (Union B C)))
()
(ax_mp ((eqs (Inter (Union A C) (Union B C)) (Union C (Inter A B))) (eqs (Union (Inter A B) C) (Inter (Union A C) (Union B C))))
  (ax_mp ((eqs (Union (Inter A B) C) (Union C (Inter A B))) (im (eqs (Inter (Union A C) (Union B C)) (Union C (Inter A B))) (eqs (Union (Inter A B) C) (Inter (Union A C) (Union B C)))))
    (eqstr4 ((Union (Inter A B) C) (Union C (Inter A B)) (Inter (Union A C) (Union B C))))
    (uncom ((Inter A B) C)))
  (ax_mp ((eqs (Union C (Inter A B)) (Inter (Union C A) (Union C B))) (eqs (Inter (Union A C) (Union B C)) (Union C (Inter A B))))
    (ax_mp ((eqs (Inter (Union A C) (Union B C)) (Inter (Union C A) (Union C B))) (im (eqs (Union C (Inter A B)) (Inter (Union C A) (Union C B))) (eqs (Inter (Union A C) (Union B C)) (Union C (Inter A B)))))
      (eqstr4 ((Inter (Union A C) (Union B C)) (Inter (Union C A) (Union C B)) (Union C (Inter A B))))
      (ax_mp ((eqs (Union B C) (Union C B)) (eqs (Inter (Union A C) (Union B C)) (Inter (Union C A) (Union C B))))
        (ax_mp ((eqs (Union A C) (Union C A)) (im (eqs (Union B C) (Union C B)) (eqs (Inter (Union A C) (Union B C)) (Inter (Union C A) (Union C B)))))
          (ineq ((Union A C) (Union C A) (Union B C) (Union C B)))
          (uncom (A C)))
        (uncom (B C))))
    (undi (C A B)))))

(local theorem ssun1 ((A set ()) (B set ())) ()
  (subset A (Union A B))
((x nat))
(:conv (subset A (Union A B))
  (:unfold subset (A (Union A B)) (x)
    (al x (im (el x A) (el x (Union A B)))))
  (ax_gen (x (im (el x A) (el x (Union A B))))
    (sylibr ((el x A) (or (el x A) (el x B)) (el x (Union A B)))
      (elun (A B x))
      (orl ((el x A) (el x B)))))))

(local theorem ssun2 ((A set ()) (B set ())) ()
  (subset B (Union A B))
()
(mpbi ((subset B (Union B A)) (subset B (Union A B)))
  (ax_mp ((eqs (Union B A) (Union A B)) (iff (subset B (Union B A)) (subset B (Union A B))))
    (sseq2 (B (Union B A) (Union A B)))
    (uncom (B A)))
  (ssun1 (B A))))

(local theorem elun1 ((A set ()) (B set ()) (a nat ())) ()
  (im (el a A) (el a (Union A B)))
()
(ax_mp ((subset A (Union A B)) (im (el a A) (el a (Union A B))))
  (ssel (A (Union A B) a))
  (ssun1 (A B))))

(local theorem elun2 ((A set ()) (B set ()) (a nat ())) ()
  (im (el a B) (el a (Union A B)))
()
(ax_mp ((subset B (Union A B)) (im (el a B) (el a (Union A B))))
  (ssel (B (Union A B) a))
  (ssun2 (A B))))

(local theorem unss ((A set ()) (B set ()) (C set ())) ()
  (iff (subset (Union A B) C) (an (subset A C) (subset B C)))
((x nat))
(ibii ((subset (Union A B) C) (an (subset A C) (subset B C)))
  (iand ((subset (Union A B) C) (subset A C) (subset B C))
    (ax_mp ((subset A (Union A B)) (im (subset (Union A B) C) (subset A C)))
      (sstr (A (Union A B) C))
      (ssun1 (A B)))
    (ax_mp ((subset B (Union A B)) (im (subset (Union A B) C) (subset B C)))
      (sstr (B (Union A B) C))
      (ssun2 (A B))))
  (:conv (im (an (subset A C) (subset B C)) (subset (Union A B) C))
    (im
      (an (subset A C) (subset B C))
      (:unfold subset ((Union A B) C) (x)
        (al x (im (el x (Union A B)) (el x C)))))
    (iald (x (an (subset A C) (subset B C)) (im (el x (Union A B)) (el x C)))
      (syl5bi ((an (subset A C) (subset B C)) (el x (Union A B)) (or (el x A) (el x B)) (el x C))
        (elun (A B x))
        (eord ((an (subset A C) (subset B C)) (el x A) (el x B) (el x C))
          (anwl ((subset A C) (subset B C) (im (el x A) (el x C)))
            (ssel (A C x)))
          (anwr ((subset A C) (subset B C) (im (el x B) (el x C)))
            (ssel (B C x)))))))))

(local theorem unss1 ((A set ()) (B set ()) (C set ())) ()
  (im (subset A B) (subset (Union A C) (Union B C)))
()
(sylibr ((subset A B) (an (subset A (Union B C)) (subset C (Union B C))) (subset (Union A C) (Union B C)))
  (unss (A C (Union B C)))
  (iand ((subset A B) (subset A (Union B C)) (subset C (Union B C)))
    (mpi ((subset A B) (subset B (Union B C)) (subset A (Union B C)))
      (ssun1 (B C))
      (sstr (A B (Union B C))))
    (a1i ((subset A B) (subset C (Union B C)))
      (ssun2 (B C))))))

(local theorem unss2 ((A set ()) (B set ()) (C set ())) ()
  (im (subset B C) (subset (Union A B) (Union A C)))
()
(sylibr ((subset B C) (an (subset A (Union A C)) (subset B (Union A C))) (subset (Union A B) (Union A C)))
  (unss (A B (Union A C)))
  (iand ((subset B C) (subset A (Union A C)) (subset B (Union A C)))
    (a1i ((subset B C) (subset A (Union A C)))
      (ssun1 (A C)))
    (mpi ((subset B C) (subset C (Union A C)) (subset B (Union A C)))
      (ssun2 (A C))
      (sstr (B C (Union A C)))))))

(local theorem equn1 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Union A B) B))
()
(ibii ((subset A B) (eqs (Union A B) B))
  (ssasymd ((Union A B) B (subset A B))
    (sylibr ((subset A B) (an (subset A B) (subset B B)) (subset (Union A B) B))
      (unss (A B B))
      (iand ((subset A B) (subset A B) (subset B B))
        (id ((subset A B)))
        (a1i ((subset A B) (subset B B))
          (ssid (B)))))
    (a1i ((subset A B) (subset B (Union A B)))
      (ssun2 (A B))))
  (mpbii ((eqs (Union A B) B) (subset A (Union A B)) (subset A B))
    (ssun1 (A B))
    (sseq2 (A (Union A B) B)))))

(local theorem equn2 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Union B A) B))
()
(ax_mp ((iff (eqs (Union A B) B) (eqs (Union B A) B)) (iff (subset A B) (eqs (Union B A) B)))
  (ax_mp ((iff (subset A B) (eqs (Union A B) B)) (im (iff (eqs (Union A B) B) (eqs (Union B A) B)) (iff (subset A B) (eqs (Union B A) B))))
    (bitr ((subset A B) (eqs (Union A B) B) (eqs (Union B A) B)))
    (equn1 (A B)))
  (ax_mp ((eqs (Union A B) (Union B A)) (iff (eqs (Union A B) B) (eqs (Union B A) B)))
    (eqseq1 ((Union A B) (Union B A) B))
    (uncom (A B)))))

(def Compl ((A set ())) (set ())
((x nat))
(ab x (not (el x A))))

(local theorem cpleqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Compl _A1) (Compl _A2)))
((x nat))
(:conv (im _G (eqs (Compl _A1) (Compl _A2)))
  (im
    _G
    (eqs
      (:unfold Compl (_A1) (x)
        (ab x (not (el x _A1))))
      (:unfold Compl (_A2) (x)
        (ab x (not (el x _A2))))))
  (abeqd (_G x (not (el x _A1)) (not (el x _A2)))
    (noteqd (_G (el x _A1) (el x _A2))
      (eleqd (_G x x _A1 _A2)
        (eqidd (_G x))
        _Ah)))))

(local theorem cpleq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Compl _A1) (Compl _A2)))
()
(cpleqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem elcpl ((A set ()) (a nat ())) ()
  (iff (el a (Compl A)) (not (el a A)))
((x nat))
(:conv (iff (el a (Compl A)) (not (el a A)))
  (iff
    (el
      a
      (:unfold Compl (A) (x)
        (ab x (not (el x A)))))
    (not (el a A)))
  (elabe (x a (not (el x A)) (not (el a A)))
    (noteqd ((eq x a) (el x A) (el a A))
      (eleq1 (A x a))))))

(local theorem sscpl ((A set ()) (B set ())) ()
  (iff (subset B A) (subset (Compl A) (Compl B)))
((x nat))
(:conv (iff (subset B A) (subset (Compl A) (Compl B)))
  (iff
    (:unfold subset (B A) (x)
      (al x (im (el x B) (el x A))))
    (:unfold subset ((Compl A) (Compl B)) (x)
      (al x (im (el x (Compl A)) (el x (Compl B))))))
  (aleqi (x (im (el x B) (el x A)) (im (el x (Compl A)) (el x (Compl B))))
    (ax_mp ((iff (im (el x (Compl A)) (el x (Compl B))) (im (not (el x A)) (not (el x B)))) (iff (im (el x B) (el x A)) (im (el x (Compl A)) (el x (Compl B)))))
      (ax_mp ((iff (im (el x B) (el x A)) (im (not (el x A)) (not (el x B)))) (im (iff (im (el x (Compl A)) (el x (Compl B))) (im (not (el x A)) (not (el x B)))) (iff (im (el x B) (el x A)) (im (el x (Compl A)) (el x (Compl B))))))
        (bitr4 ((im (el x B) (el x A)) (im (not (el x A)) (not (el x B))) (im (el x (Compl A)) (el x (Compl B)))))
        (con3bi ((el x B) (el x A))))
      (imeqi ((el x (Compl A)) (not (el x A)) (el x (Compl B)) (not (el x B)))
        (elcpl (A x))
        (elcpl (B x)))))))

(local theorem cplcpl ((A set ())) ()
  (eqs (Compl (Compl A)) A)
((x nat))
(eqri ((Compl (Compl A)) A x)
  (ax_mp ((iff (not (el x (Compl A))) (el x A)) (iff (el x (Compl (Compl A))) (el x A)))
    (ax_mp ((iff (el x (Compl (Compl A))) (not (el x (Compl A)))) (im (iff (not (el x (Compl A))) (el x A)) (iff (el x (Compl (Compl A))) (el x A))))
      (bitr ((el x (Compl (Compl A))) (not (el x (Compl A))) (el x A)))
      (elcpl ((Compl A) x)))
    (ax_mp ((iff (el x A) (not (not (el x A)))) (iff (not (el x (Compl A))) (el x A)))
      (ax_mp ((iff (not (el x (Compl A))) (not (not (el x A)))) (im (iff (el x A) (not (not (el x A)))) (iff (not (el x (Compl A))) (el x A))))
        (bitr4 ((not (el x (Compl A))) (not (not (el x A))) (el x A)))
        (ax_mp ((iff (el x (Compl A)) (not (el x A))) (iff (not (el x (Compl A))) (not (not (el x A)))))
          (noteq ((el x (Compl A)) (not (el x A))))
          (elcpl (A x))))
      (notnot ((el x A)))))))

(local theorem cplinj ((A set ()) (B set ())) ()
  (iff (eqs A B) (eqs (Compl A) (Compl B)))
()
(ibii ((eqs A B) (eqs (Compl A) (Compl B)))
  (cpleq (A B))
  (sylib ((eqs (Compl A) (Compl B)) (eqs (Compl (Compl A)) (Compl (Compl B))) (eqs A B))
    (ax_mp ((eqs (Compl (Compl B)) B) (iff (eqs (Compl (Compl A)) (Compl (Compl B))) (eqs A B)))
      (ax_mp ((eqs (Compl (Compl A)) A) (im (eqs (Compl (Compl B)) B) (iff (eqs (Compl (Compl A)) (Compl (Compl B))) (eqs A B))))
        (eqseq ((Compl (Compl A)) A (Compl (Compl B)) B))
        (cplcpl (A)))
      (cplcpl (B)))
    (cpleq ((Compl A) (Compl B))))))

(local theorem cplin ((A set ()) (B set ())) ()
  (eqs (Compl (Inter A B)) (Union (Compl A) (Compl B)))
((x nat))
(eqri ((Compl (Inter A B)) (Union (Compl A) (Compl B)) x)
  (ax_mp ((iff (not (el x (Inter A B))) (el x (Union (Compl A) (Compl B)))) (iff (el x (Compl (Inter A B))) (el x (Union (Compl A) (Compl B)))))
    (ax_mp ((iff (el x (Compl (Inter A B))) (not (el x (Inter A B)))) (im (iff (not (el x (Inter A B))) (el x (Union (Compl A) (Compl B)))) (iff (el x (Compl (Inter A B))) (el x (Union (Compl A) (Compl B))))))
      (bitr ((el x (Compl (Inter A B))) (not (el x (Inter A B))) (el x (Union (Compl A) (Compl B)))))
      (elcpl ((Inter A B) x)))
    (ax_mp ((iff (el x (Union (Compl A) (Compl B))) (not (an (el x A) (el x B)))) (iff (not (el x (Inter A B))) (el x (Union (Compl A) (Compl B)))))
      (ax_mp ((iff (not (el x (Inter A B))) (not (an (el x A) (el x B)))) (im (iff (el x (Union (Compl A) (Compl B))) (not (an (el x A) (el x B)))) (iff (not (el x (Inter A B))) (el x (Union (Compl A) (Compl B))))))
        (bitr4 ((not (el x (Inter A B))) (not (an (el x A) (el x B))) (el x (Union (Compl A) (Compl B)))))
        (ax_mp ((iff (el x (Inter A B)) (an (el x A) (el x B))) (iff (not (el x (Inter A B))) (not (an (el x A) (el x B)))))
          (noteq ((el x (Inter A B)) (an (el x A) (el x B))))
          (elin (A B x))))
      (ax_mp ((iff (or (el x (Compl A)) (el x (Compl B))) (not (an (el x A) (el x B)))) (iff (el x (Union (Compl A) (Compl B))) (not (an (el x A) (el x B)))))
        (ax_mp ((iff (el x (Union (Compl A) (Compl B))) (or (el x (Compl A)) (el x (Compl B)))) (im (iff (or (el x (Compl A)) (el x (Compl B))) (not (an (el x A) (el x B)))) (iff (el x (Union (Compl A) (Compl B))) (not (an (el x A) (el x B))))))
          (bitr ((el x (Union (Compl A) (Compl B))) (or (el x (Compl A)) (el x (Compl B))) (not (an (el x A) (el x B)))))
          (elun ((Compl A) (Compl B) x)))
        (ax_mp ((iff (not (an (el x A) (el x B))) (or (not (el x A)) (not (el x B)))) (iff (or (el x (Compl A)) (el x (Compl B))) (not (an (el x A) (el x B)))))
          (ax_mp ((iff (or (el x (Compl A)) (el x (Compl B))) (or (not (el x A)) (not (el x B)))) (im (iff (not (an (el x A) (el x B))) (or (not (el x A)) (not (el x B)))) (iff (or (el x (Compl A)) (el x (Compl B))) (not (an (el x A) (el x B))))))
            (bitr4 ((or (el x (Compl A)) (el x (Compl B))) (or (not (el x A)) (not (el x B))) (not (an (el x A) (el x B)))))
            (ax_mp ((iff (el x (Compl B)) (not (el x B))) (iff (or (el x (Compl A)) (el x (Compl B))) (or (not (el x A)) (not (el x B)))))
              (ax_mp ((iff (el x (Compl A)) (not (el x A))) (im (iff (el x (Compl B)) (not (el x B))) (iff (or (el x (Compl A)) (el x (Compl B))) (or (not (el x A)) (not (el x B))))))
                (oreq ((el x (Compl A)) (not (el x A)) (el x (Compl B)) (not (el x B))))
                (elcpl (A x)))
              (elcpl (B x))))
          (notan ((el x A) (el x B)))))))))

(local theorem cplun ((A set ()) (B set ())) ()
  (eqs (Compl (Union A B)) (Inter (Compl A) (Compl B)))
()
(ax_mp ((eqs (Compl (Compl (Inter (Compl A) (Compl B)))) (Inter (Compl A) (Compl B))) (eqs (Compl (Union A B)) (Inter (Compl A) (Compl B))))
  (ax_mp ((eqs (Compl (Union A B)) (Compl (Compl (Inter (Compl A) (Compl B))))) (im (eqs (Compl (Compl (Inter (Compl A) (Compl B)))) (Inter (Compl A) (Compl B))) (eqs (Compl (Union A B)) (Inter (Compl A) (Compl B)))))
    (eqstr ((Compl (Union A B)) (Compl (Compl (Inter (Compl A) (Compl B)))) (Inter (Compl A) (Compl B))))
    (ax_mp ((eqs (Union A B) (Compl (Inter (Compl A) (Compl B)))) (eqs (Compl (Union A B)) (Compl (Compl (Inter (Compl A) (Compl B))))))
      (cpleq ((Union A B) (Compl (Inter (Compl A) (Compl B)))))
      (ax_mp ((eqs (Union (Compl (Compl A)) (Compl (Compl B))) (Union A B)) (eqs (Union A B) (Compl (Inter (Compl A) (Compl B)))))
        (ax_mp ((eqs (Compl (Inter (Compl A) (Compl B))) (Union (Compl (Compl A)) (Compl (Compl B)))) (im (eqs (Union (Compl (Compl A)) (Compl (Compl B))) (Union A B)) (eqs (Union A B) (Compl (Inter (Compl A) (Compl B))))))
          (eqstr2 ((Compl (Inter (Compl A) (Compl B))) (Union (Compl (Compl A)) (Compl (Compl B))) (Union A B)))
          (cplin ((Compl A) (Compl B))))
        (ax_mp ((eqs (Compl (Compl B)) B) (eqs (Union (Compl (Compl A)) (Compl (Compl B))) (Union A B)))
          (ax_mp ((eqs (Compl (Compl A)) A) (im (eqs (Compl (Compl B)) B) (eqs (Union (Compl (Compl A)) (Compl (Compl B))) (Union A B))))
            (uneq ((Compl (Compl A)) A (Compl (Compl B)) B))
            (cplcpl (A)))
          (cplcpl (B))))))
  (cplcpl ((Inter (Compl A) (Compl B))))))

(def Univ () (set ())
((x nat))
(ab x (tru)))

(local theorem elv ((a nat ())) ()
  (el a (Univ))
((x nat))
(mpbir ((tru) (el a (Univ)))
  (:conv (iff (el a (Univ)) (tru))
    (iff
      (el
        a
        (:unfold Univ () (x)
          (ab x (tru))))
      (tru))
    (elabe (x a (tru) (tru))
      (biidd ((eq x a) (tru)))))
  (itru ())))

(local theorem inv1 ((A set ())) ()
  (eqs (Inter (Univ) A) A)
((x nat))
(eqri ((Inter (Univ) A) A x)
  (ax_mp ((iff (an (el x (Univ)) (el x A)) (el x A)) (iff (el x (Inter (Univ) A)) (el x A)))
    (ax_mp ((iff (el x (Inter (Univ) A)) (an (el x (Univ)) (el x A))) (im (iff (an (el x (Univ)) (el x A)) (el x A)) (iff (el x (Inter (Univ) A)) (el x A))))
      (bitr ((el x (Inter (Univ) A)) (an (el x (Univ)) (el x A)) (el x A)))
      (elin ((Univ) A x)))
    (ax_mp ((el x (Univ)) (iff (an (el x (Univ)) (el x A)) (el x A)))
      (bian1 ((el x (Univ)) (el x A)))
      (elv (x))))))

(local theorem inv2 ((A set ())) ()
  (eqs (Inter A (Univ)) A)
()
(ax_mp ((eqs (Inter (Univ) A) A) (eqs (Inter A (Univ)) A))
  (ax_mp ((eqs (Inter A (Univ)) (Inter (Univ) A)) (im (eqs (Inter (Univ) A) A) (eqs (Inter A (Univ)) A)))
    (eqstr ((Inter A (Univ)) (Inter (Univ) A) A))
    (incom (A (Univ))))
  (inv1 (A))))

(local theorem uncpl2 ((A set ())) ()
  (eqs (Union A (Compl A)) (Univ))
((x nat))
(eqri ((Union A (Compl A)) (Univ) x)
  (ax_mp ((el x (Univ)) (iff (el x (Union A (Compl A))) (el x (Univ))))
    (ax_mp ((el x (Union A (Compl A))) (im (el x (Univ)) (iff (el x (Union A (Compl A))) (el x (Univ)))))
      (bith ((el x (Union A (Compl A))) (el x (Univ))))
      (mpbir ((or (el x A) (el x (Compl A))) (el x (Union A (Compl A))))
        (elun (A (Compl A) x))
        (mpbir ((or (el x A) (not (el x A))) (or (el x A) (el x (Compl A))))
          (oreq2i ((el x A) (el x (Compl A)) (not (el x A)))
            (elcpl (A x)))
          (em ((el x A))))))
    (elv (x)))))

(local theorem uncpl1 ((A set ())) ()
  (eqs (Union (Compl A) A) (Univ))
()
(ax_mp ((eqs (Union A (Compl A)) (Univ)) (eqs (Union (Compl A) A) (Univ)))
  (ax_mp ((eqs (Union (Compl A) A) (Union A (Compl A))) (im (eqs (Union A (Compl A)) (Univ)) (eqs (Union (Compl A) A) (Univ))))
    (eqstr ((Union (Compl A) A) (Union A (Compl A)) (Univ)))
    (uncom ((Compl A) A)))
  (uncpl2 (A))))

(local theorem ssv2 ((A set ())) ()
  (subset A (Univ))
((x nat))
(:conv (subset A (Univ))
  (:unfold subset (A (Univ)) (x)
    (al x (im (el x A) (el x (Univ)))))
  (ax_gen (x (im (el x A) (el x (Univ))))
    (a1i ((el x A) (el x (Univ)))
      (elv (x))))))

(local theorem ssv1 ((A set ())) ()
  (iff (subset (Univ) A) (eqs A (Univ)))
()
(ibii ((subset (Univ) A) (eqs A (Univ)))
  (ax_mp ((subset A (Univ)) (im (subset (Univ) A) (eqs A (Univ))))
    (ssasym (A (Univ)))
    (ssv2 (A)))
  (mpbiri ((eqs A (Univ)) (subset (Univ) (Univ)) (subset (Univ) A))
    (ssid ((Univ)))
    (sseq2 ((Univ) A (Univ))))))

(local def nfs ((x nat) (A set (x))) (wff ())
((y nat))
(al y (nf x (el y A))))

(local def nfn ((x nat) (a nat (x))) (wff ())
((y nat))
(al y (nf x (eq y a))))

(local theorem nfsbid ((G wff ()) (x nat) (A set (x)) (B set (x)))
  ((h (im G (eqs A B))))
  (im G (iff (nfs x A) (nfs x B)))
((y nat))
(:conv (im G (iff (nfs x A) (nfs x B)))
  (im
    G
    (iff
      (:unfold nfs (x A) (y)
        (al y (nf x (el y A))))
      (:unfold nfs (x B) (y)
        (al y (nf x (el y B))))))
  (aleqd (G y (nf x (el y A)) (nf x (el y B)))
    (nfeqd (G x (el y A) (el y B))
      (eleq2d (A B G y)
        h)))))

(local theorem nfnbid ((G wff ()) (x nat) (a nat (x)) (b nat (x)))
  ((h (im G (eq a b))))
  (im G (iff (nfn x a) (nfn x b)))
((y nat))
(:conv (im G (iff (nfn x a) (nfn x b)))
  (im
    G
    (iff
      (:unfold nfn (x a) (y)
        (al y (nf x (eq y a))))
      (:unfold nfn (x b) (y)
        (al y (nf x (eq y b))))))
  (aleqd (G y (nf x (eq y a)) (nf x (eq y b)))
    (nfeqd (G x (eq y a) (eq y b))
      (eqeq2d (G y a b)
        h)))))

(local theorem nfsv ((A set ()) (x nat)) ()
  (nfs x A)
((y nat))
(:conv (nfs x A)
  (:unfold nfs (x A) (y)
    (al y (nf x (el y A))))
  (ax_gen (y (nf x (el y A)))
    (nfv ((el y A) x)))))

(local theorem nfnv ((a nat ()) (x nat)) ()
  (nfn x a)
((y nat))
(:conv (nfn x a)
  (:unfold nfn (x a) (y)
    (al y (nf x (eq y a))))
  (ax_gen (y (nf x (eq y a)))
    (nfv ((eq y a) x)))))

(local theorem nfsri ((x nat) (y nat) (A set (x)))
  ((h (nf x (el y A))))
  (nfs x A)
()
(:conv (nfs x A)
  (:unfold nfs (x A) (y)
    (al y (nf x (el y A))))
  (ax_gen (y (nf x (el y A)))
    h)))

(local theorem nfnri ((x nat) (y nat) (a nat (x)))
  ((h (nf x (eq y a))))
  (nfn x a)
()
(:conv (nfn x a)
  (:unfold nfn (x a) (y)
    (al y (nf x (eq y a))))
  (ax_gen (y (nf x (eq y a)))
    h)))

(local theorem nfel2 ((x nat) (a nat ()) (A set (x)))
  ((h (nfs x A)))
  (nf x (el a A))
((y nat))
(ax_mp ((al y (nf x (el y A))) (nf x (el a A)))
  (eale (y a (nf x (el y A)) (nf x (el a A)))
    (nfeqd ((eq y a) x (el y A) (el a A))
      (eleq1 (A y a))))
  (:conv (al y (nf x (el y A)))
    (:sym (:unfold nfs (x A) (y)
      (al y (nf x (el y A)))))
    h)))

(local theorem nfsx ((x nat) (A set (x)) (B set (x)))
  ((h1 (eqs A B))
   (h2 (nfs x B)))
  (nfs x A)
((y nat))
(:conv (nfs x A)
  (:unfold nfs (x A) (y)
    (al y (nf x (el y A))))
  (ax_gen (y (nf x (el y A)))
    (nfx (x (el y A) (el y B))
      (ax_mp ((eqs A B) (iff (el y A) (el y B)))
        (eleq2 (A B y))
        h1)
      (nfel2 (x y B)
        h2)))))

(local theorem nf_eq ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nf x (eq a b))
((y nat))
(nfx (x (eq a b) (ex y (an (eq y a) (eq y b))))
  (ax_mp ((iff (ex y (an (eq y a) (eq y b))) (eq a b)) (iff (eq a b) (ex y (an (eq y a) (eq y b)))))
    (bicom ((ex y (an (eq y a) (eq y b))) (eq a b)))
    (exeqe (y a (eq y b) (eq a b))
      (eqeq1 (y a b))))
  (nfex (x y (an (eq y a) (eq y b)))
    (nfan (x (eq y a) (eq y b))
      (ax_mp ((al y (nf x (eq y a))) (nf x (eq y a)))
        (eal (y (nf x (eq y a))))
        (:conv (al y (nf x (eq y a)))
          (:sym (:unfold nfn (x a) (y)
            (al y (nf x (eq y a)))))
          h1))
      (ax_mp ((al y (nf x (eq y b))) (nf x (eq y b)))
        (eal (y (nf x (eq y b))))
        (:conv (al y (nf x (eq y b)))
          (:sym (:unfold nfn (x b) (y)
            (al y (nf x (eq y b)))))
          h2))))))

(local theorem nfeq2 ((a nat ()) (x nat) (b nat (x)))
  ((h (nfn x b)))
  (nf x (eq a b))
()
(nf_eq (x a b)
  (nfnv (a x))
  h))

(local theorem nfsb1h ((x nat) (a nat (x)) (b wff (x)))
  ((h (nfn x a)))
  (nf x (sb a x b))
((z nat))
(:conv (nf x (sb a x b))
  (nf
    x
    (:unfold sb (a x b) (z)
      (al z (im (eq z a) (al x (im (eq x z) b))))))
  (nfal (x z (im (eq z a) (al x (im (eq x z) b))))
    (nfim (x (eq z a) (al x (im (eq x z) b)))
      (nfeq2 (z x a)
        h)
      (nfal1 (x (im (eq x z) b)))))))

(local theorem nfsbh ((x nat) (y nat) (a nat (x y)) (b wff (x y)))
  ((h1 (nfn x a))
   (h2 (nf x b)))
  (nf x (sb a y b))
((z nat))
(:conv (nf x (sb a y b))
  (nf
    x
    (:unfold sb (a y b) (z)
      (al z (im (eq z a) (al y (im (eq y z) b))))))
  (nfal (x z (im (eq z a) (al y (im (eq y z) b))))
    (nfim (x (eq z a) (al y (im (eq y z) b)))
      (nfeq2 (z x a)
        h1)
      (nfal (x y (im (eq y z) b))
        (nfim (x (eq y z) b)
          (nfv ((eq y z) x))
          h2))))))

(local theorem nfel ((x nat) (a nat (x)) (A set (x)))
  ((h1 (nfn x a))
   (h2 (nfs x A)))
  (nf x (el a A))
((y nat))
(nfx (x (el a A) (ex y (an (eq y a) (el y A))))
  (ax_mp ((iff (ex y (an (eq y a) (el y A))) (el a A)) (iff (el a A) (ex y (an (eq y a) (el y A)))))
    (bicom ((ex y (an (eq y a) (el y A))) (el a A)))
    (exeqe (y a (el y A) (el a A))
      (eleq1 (A y a))))
  (nfex (x y (an (eq y a) (el y A)))
    (nfan (x (eq y a) (el y A))
      (ax_mp ((al y (nf x (eq y a))) (nf x (eq y a)))
        (eal (y (nf x (eq y a))))
        (:conv (al y (nf x (eq y a)))
          (:sym (:unfold nfn (x a) (y)
            (al y (nf x (eq y a)))))
          h1))
      (ax_mp ((al y (nf x (el y A))) (nf x (el y A)))
        (eal (y (nf x (el y A))))
        (:conv (al y (nf x (el y A)))
          (:sym (:unfold nfs (x A) (y)
            (al y (nf x (el y A)))))
          h2))))))

(local theorem nfab1 ((x nat) (p wff (x))) ()
  (nfs x (ab x p))
((y nat))
(nfsri (x y (ab x p))
  (nfx (x (el y (ab x p)) (sb y x p))
    (elab (y x p))
    (nfsb1 (x y p)))))

(local theorem nfab ((x nat) (y nat) (p wff (x y)))
  ((h (nf x p)))
  (nfs x (ab y p))
((z nat))
(nfsri (x z (ab y p))
  (nfx (x (el z (ab y p)) (sb z y p))
    (elab (z y p))
    (nfsb (x y z p)
      h))))

(local theorem nfeqs ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nf x (eqs A B))
((y nat))
(:conv (nf x (eqs A B))
  (nf
    x
    (:unfold eqs (A B) (y)
      (al y (iff (el y A) (el y B)))))
  (nfal (x y (iff (el y A) (el y B)))
    (nfbi (x (el y A) (el y B))
      (nfel2 (x y A)
        h1)
      (nfel2 (x y B)
        h2)))))

(local theorem nfnx ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (eq a b))
   (h2 (nfn x b)))
  (nfn x a)
((y nat))
(nfnri (x y a)
  (nfx (x (eq y a) (eq y b))
    (ax_mp ((eq a b) (iff (eq y a) (eq y b)))
      (eqeq2 (y a b))
      h1)
    (nfeq2 (y x b)
      h2))))

(local theorem nfin ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nfs x (Inter A B))
((y nat))
(:conv (nfs x (Inter A B))
  (nfs
    x
    (:unfold Inter (A B) (y)
      (ab y (an (el y A) (el y B)))))
  (nfab (x y (an (el y A) (el y B)))
    (nfan (x (el y A) (el y B))
      (nfel2 (x y A)
        h1)
      (nfel2 (x y B)
        h2)))))

(local theorem nfss ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nf x (subset A B))
((y nat))
(:conv (nf x (subset A B))
  (nf
    x
    (:unfold subset (A B) (y)
      (al y (im (el y A) (el y B)))))
  (nfal (x y (im (el y A) (el y B)))
    (nfim (x (el y A) (el y B))
      (nfel2 (x y A)
        h1)
      (nfel2 (x y B)
        h2)))))

(local theorem abeqb ((x nat) (p wff (x)) (q wff (x))) ()
  (iff (al x (iff p q)) (eqs (ab x p) (ab x q)))
()
(ibii ((al x (iff p q)) (eqs (ab x p) (ab x q)))
  (abeq (x p q))
  (ialdh (x (eqs (ab x p) (ab x q)) (iff p q))
    (nfeqs (x (ab x p) (ab x q))
      (nfab1 (x p))
      (nfab1 (x q)))
    (sylib ((eqs (ab x p) (ab x q)) (iff (el x (ab x p)) (el x (ab x q))) (iff p q))
      (ax_mp ((iff (el x (ab x q)) q) (iff (iff (el x (ab x p)) (el x (ab x q))) (iff p q)))
        (ax_mp ((iff (el x (ab x p)) p) (im (iff (el x (ab x q)) q) (iff (iff (el x (ab x p)) (el x (ab x q))) (iff p q))))
          (bieq ((el x (ab x p)) p (el x (ab x q)) q))
          (abid (x p)))
        (abid (x q)))
      (eleq2 ((ab x p) (ab x q) x))))))

(local theorem eqab2d ((A set ()) (G wff ()) (x nat) (p wff (x)))
  ((h (im G (iff (el x A) p))))
  (im G (eqs A (ab x p)))
((y nat))
(sylib (G (al x (iff (el x A) p)) (eqs A (ab x p)))
  (:conv (iff (al x (iff (el x A) p)) (eqs A (ab x p)))
    (iff
      (al x (iff (el x A) p))
      (:unfold eqs (A (ab x p)) (y)
        (al y (iff (el y A) (el y (ab x p))))))
    (cbvalh (x y (iff (el x A) p) (iff (el y A) (el y (ab x p))))
      (nfv ((iff (el x A) p) y))
      (nfbi (x (el y A) (el y (ab x p)))
        (nfv ((el y A) x))
        (nfel2 (x y (ab x p))
          (nfab1 (x p))))
      (bieqd ((eq x y) (el x A) (el y A) p (el y (ab x p)))
        (eleq1 (A x y))
        (syl5bbr ((eq x y) p (el x (ab x p)) (el y (ab x p)))
          (abid (x p))
          (eleq1 ((ab x p) x y))))))
  (iald (x G (iff (el x A) p))
    h)))

(local theorem eqab2i ((A set ()) (x nat) (p wff (x)))
  ((h (iff (el x A) p)))
  (eqs A (ab x p))
()
(trud ((eqs A (ab x p)))
  (eqab2d (A (tru) x p)
    (a1i ((tru) (iff (el x A) p))
      h))))

(local theorem eqab1d ((A set ()) (G wff ()) (x nat) (p wff (x)))
  ((h (im G (iff p (el x A)))))
  (im G (eqs (ab x p) A))
()
(eqscomd (A (ab x p) G)
  (eqab2d (A G x p)
    (bicomd (G p (el x A))
      h))))

(local theorem eqab1i ((A set ()) (x nat) (p wff (x)))
  ((h (iff p (el x A))))
  (eqs (ab x p) A)
()
(trud ((eqs (ab x p) A))
  (eqab1d (A (tru) x p)
    (a1i ((tru) (iff p (el x A)))
      h))))

(local theorem ssab ((x nat) (p wff (x)) (q wff (x))) ()
  (iff (al x (im p q)) (subset (ab x p) (ab x q)))
((y nat))
(:conv (iff (al x (im p q)) (subset (ab x p) (ab x q)))
  (iff
    (al x (im p q))
    (:unfold subset ((ab x p) (ab x q)) (y)
      (al y (im (el y (ab x p)) (el y (ab x q))))))
  (cbvalh (x y (im p q) (im (el y (ab x p)) (el y (ab x q))))
    (nfv ((im p q) y))
    (nfim (x (el y (ab x p)) (el y (ab x q)))
      (nfel2 (x y (ab x p))
        (nfab1 (x p)))
      (nfel2 (x y (ab x q))
        (nfab1 (x q))))
    (imeqd ((eq x y) p (el y (ab x p)) q (el y (ab x q)))
      (syl6bbr ((eq x y) p (sb y x p) (el y (ab x p)))
        (elab (y x p))
        (sbq (x y p)))
      (syl6bbr ((eq x y) q (sb y x q) (el y (ab x q)))
        (elab (y x q))
        (sbq (x y q)))))))

(local theorem ssabi ((x nat) (p wff (x)) (q wff (x)))
  ((h (im p q)))
  (subset (ab x p) (ab x q))
()
(mpbi ((al x (im p q)) (subset (ab x p) (ab x q)))
  (ssab (x p q))
  (ax_gen (x (im p q))
    h)))

(local theorem ssabd ((G wff ()) (x nat) (p wff (x)) (q wff (x)))
  ((h (im G (im p q))))
  (im G (subset (ab x p) (ab x q)))
()
(sylib (G (al x (im p q)) (subset (ab x p) (ab x q)))
  (ssab (x p q))
  (iald (x G (im p q))
    h)))

(local theorem ssab1 ((A set ()) (x nat) (p wff (x))) ()
  (iff (al x (im p (el x A))) (subset (ab x p) A))
((y nat))
(:conv (iff (al x (im p (el x A))) (subset (ab x p) A))
  (iff
    (al x (im p (el x A)))
    (:unfold subset ((ab x p) A) (y)
      (al y (im (el y (ab x p)) (el y A)))))
  (cbvalh (x y (im p (el x A)) (im (el y (ab x p)) (el y A)))
    (nfv ((im p (el x A)) y))
    (nfim (x (el y (ab x p)) (el y A))
      (nfel2 (x y (ab x p))
        (nfab1 (x p)))
      (nfv ((el y A) x)))
    (imeqd ((eq x y) p (el y (ab x p)) (el x A) (el y A))
      (syl6bbr ((eq x y) p (sb y x p) (el y (ab x p)))
        (elab (y x p))
        (sbq (x y p)))
      (eleq1 (A x y))))))

(local theorem ssab2 ((A set ()) (x nat) (p wff (x))) ()
  (iff (al x (im (el x A) p)) (subset A (ab x p)))
((y nat))
(:conv (iff (al x (im (el x A) p)) (subset A (ab x p)))
  (iff
    (al x (im (el x A) p))
    (:unfold subset (A (ab x p)) (y)
      (al y (im (el y A) (el y (ab x p))))))
  (cbvalh (x y (im (el x A) p) (im (el y A) (el y (ab x p))))
    (nfv ((im (el x A) p) y))
    (nfim (x (el y A) (el y (ab x p)))
      (nfv ((el y A) x))
      (nfel2 (x y (ab x p))
        (nfab1 (x p))))
    (imeqd ((eq x y) (el x A) (el y A) p (el y (ab x p)))
      (eleq1 (A x y))
      (syl6bbr ((eq x y) p (sb y x p) (el y (ab x p)))
        (elab (y x p))
        (sbq (x y p)))))))

(local theorem elabed1 ((A set ()) (G wff ()) (P wff ()) (a nat ()) (x nat) (p wff (x)))
  ((e (im (an G (eq x a)) (im (iff (el a A) p) P))))
  (im G (im (eqs A (ab x p)) P))
()
(mpi (G (ex x (eq x a)) (im (eqs A (ab x p)) P))
  (ax_6 (a x))
  (eexdh (x G (eq x a) (im (eqs A (ab x p)) P))
    (nfv (G x))
    (nfim (x (eqs A (ab x p)) P)
      (nfeqs (x A (ab x p))
        (nfsv (A x))
        (nfab1 (x p)))
      (nfv (P x)))
    (exp (G (eq x a) (im (eqs A (ab x p)) P))
      (syld ((an G (eq x a)) (eqs A (ab x p)) (iff (el a A) p) P)
        (syl5ibrcom ((an G (eq x a)) (iff (el a A) p) (eqs A (ab x p)) (iff (el a (ab x p)) p))
          (bieq1d ((eqs A (ab x p)) (el a A) (el a (ab x p)) p)
            (eleq2 (A (ab x p) a)))
          (bitr3d ((an G (eq x a)) (el a (ab x p)) (el x (ab x p)) p)
            (eleq1d ((ab x p) (an G (eq x a)) x a)
              (anr (G (eq x a))))
            (a1i ((an G (eq x a)) (iff (el x (ab x p)) p))
              (abid (x p)))))
        e)))))

(local theorem elabed2 ((A set ()) (G wff ()) (a nat ()) (q wff ()) (x nat) (p wff (x)))
  ((e (im (an G (eq x a)) (iff p q))))
  (im G (im (eqs A (ab x p)) (iff (el a A) q)))
()
(elabed1 (A G (iff (el a A) q) a x p)
  (bi1d ((an G (eq x a)) (iff (el a A) p) (iff (el a A) q))
    (bieq2d ((an G (eq x a)) (el a A) p q)
      e))))

(def sbs ((a nat ()) (x nat) (A set (x))) (set ())
((y nat))
(ab y (sb a x (el y A))))

(local theorem elsbs ((x nat) (a nat (x)) (b nat ()) (A set (x))) ()
  (iff (el b (sbs a x A)) (sb a x (el b A)))
((y nat))
(ax_mp ((iff (sb b y (sb a x (el y A))) (sb a x (el b A))) (iff (el b (sbs a x A)) (sb a x (el b A))))
  (ax_mp ((iff (el b (sbs a x A)) (sb b y (sb a x (el y A)))) (im (iff (sb b y (sb a x (el y A))) (sb a x (el b A))) (iff (el b (sbs a x A)) (sb a x (el b A)))))
    (bitr ((el b (sbs a x A)) (sb b y (sb a x (el y A))) (sb a x (el b A))))
    (:conv (iff (el b (sbs a x A)) (sb b y (sb a x (el y A))))
      (iff
        (el
          b
          (:unfold sbs (a x A) (y)
            (ab y (sb a x (el y A)))))
        (sb b y (sb a x (el y A))))
      (elab (b y (sb a x (el y A))))))
  (sbe (y b (sb a x (el y A)) (sb a x (el b A)))
    (sbeq2d ((eq y b) x a (el y A) (el b A))
      (eleq1 (A y b))))))

(local theorem sbsq ((x nat) (a nat ()) (A set (x))) ()
  (im (eq x a) (eqs A (sbs a x A)))
((y nat))
(eqrd (A (sbs a x A) (eq x a) y)
  (syl6bbr ((eq x a) (el y A) (sb a x (el y A)) (el y (sbs a x A)))
    (elsbs (x a y A))
    (sbq (x a (el y A))))))

(local theorem nfsbs1h ((x nat) (a nat (x)) (A set (x)))
  ((h (nfn x a)))
  (nfs x (sbs a x A))
((y nat))
(nfsri (x y (sbs a x A))
  (nfx (x (el y (sbs a x A)) (sb a x (el y A)))
    (elsbs (x a y A))
    (nfsb1h (x a (el y A))
      h))))

(local theorem nfsbs1 ((x nat) (a nat ()) (A set (x))) ()
  (nfs x (sbs a x A))
()
(nfsbs1h (x a A)
  (nfnv (a x))))

(local theorem nfsbsh ((x nat) (y nat) (a nat (x)) (A set (x y)))
  ((h1 (nfn x a))
   (h2 (nfs x A)))
  (nfs x (sbs a y A))
((z nat))
(nfsri (x z (sbs a y A))
  (nfx (x (el z (sbs a y A)) (sb a y (el z A)))
    (elsbs (y a z A))
    (nfsbh (x y a (el z A))
      h1
      (nfel2 (x z A)
        h2)))))

(local theorem nfsbs ((x nat) (y nat) (a nat ()) (A set (x y)))
  ((h (nfs x A)))
  (nfs x (sbs a y A))
()
(nfsbsh (x y a A)
  (nfnv (a x))
  h))

(local theorem sbseq1d ((x nat) (G wff ()) (a nat ()) (b nat ()) (A set (x)))
  ((h (im G (eq a b))))
  (im G (eqs (sbs a x A) (sbs b x A)))
((y nat))
(:conv (im G (eqs (sbs a x A) (sbs b x A)))
  (im
    G
    (eqs
      (:unfold sbs (a x A) (y)
        (ab y (sb a x (el y A))))
      (:unfold sbs (b x A) (y)
        (ab y (sb b x (el y A))))))
  (abeqd (G y (sb a x (el y A)) (sb b x (el y A)))
    (sbeq1d (x G a b (el y A))
      h))))

(local theorem sbseq2d ((x nat) (G wff ()) (a nat (x)) (A set (x)) (B set (x)))
  ((h (im G (eqs A B))))
  (im G (eqs (sbs a x A) (sbs a x B)))
((y nat))
(:conv (im G (eqs (sbs a x A) (sbs a x B)))
  (im
    G
    (eqs
      (:unfold sbs (a x A) (y)
        (ab y (sb a x (el y A))))
      (:unfold sbs (a x B) (y)
        (ab y (sb a x (el y B))))))
  (abeqd (G y (sb a x (el y A)) (sb a x (el y B)))
    (sbeq2d (G x a (el y A) (el y B))
      (eleq2d (A B G y)
        h)))))

(local theorem sbseqd ((G wff ()) (x nat) (a nat ()) (b nat ()) (A set (x)) (B set (x)))
  ((h1 (im G (eq a b)))
   (h2 (im G (eqs A B))))
  (im G (eqs (sbs a x A) (sbs b x B)))
()
(eqstrd ((sbs a x A) (sbs b x A) (sbs b x B) G)
  (sbseq1d (x G a b A)
    h1)
  (sbseq2d (x G b A B)
    h2)))

(local theorem sbseht ((x nat) (a nat ()) (A set (x)) (B set (x)))
  ((h (nfs x B)))
  (im (al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
((y nat))
(eqrd ((sbs a x A) B (al x (im (eq x a) (eqs A B))) y)
  (syl5bb ((al x (im (eq x a) (eqs A B))) (el y (sbs a x A)) (sb a x (el y A)) (el y B))
    (elsbs (x a y A))
    (syl ((al x (im (eq x a) (eqs A B))) (al x (im (eq x a) (iff (el y A) (el y B)))) (iff (sb a x (el y A)) (el y B)))
      (sbeht (x a (el y A) (el y B))
        (nfel2 (x y B)
          h))
      (alimi (x (im (eq x a) (eqs A B)) (im (eq x a) (iff (el y A) (el y B))))
        (ax_mp ((im (eqs A B) (iff (el y A) (el y B))) (im (im (eq x a) (eqs A B)) (im (eq x a) (iff (el y A) (el y B)))))
          (imim2 ((eq x a) (eqs A B) (iff (el y A) (el y B))))
          (eleq2 (A B y))))))))

(local theorem sbsco ((x nat) (y nat) (a nat ()) (A set (x))) ()
  (eqs (sbs a y (sbs y x A)) (sbs a x A))
((z nat))
(:conv (eqs (sbs a y (sbs y x A)) (sbs a x A))
  (eqs
    (:unfold sbs (a y (sbs y x A)) (z)
      (ab z (sb a y (el z (sbs y x A)))))
    (:unfold sbs (a x A) (z)
      (ab z (sb a x (el z A)))))
  (abeqi (z (sb a y (el z (sbs y x A))) (sb a x (el z A)))
    (ax_mp ((iff (sb a y (sb y x (el z A))) (sb a x (el z A))) (iff (sb a y (el z (sbs y x A))) (sb a x (el z A))))
      (ax_mp ((iff (sb a y (el z (sbs y x A))) (sb a y (sb y x (el z A)))) (im (iff (sb a y (sb y x (el z A))) (sb a x (el z A))) (iff (sb a y (el z (sbs y x A))) (sb a x (el z A)))))
        (bitr ((sb a y (el z (sbs y x A))) (sb a y (sb y x (el z A))) (sb a x (el z A))))
        (sbeq2i (y a (el z (sbs y x A)) (sb y x (el z A)))
          (elsbs (x y z A))))
      (sbco (x y a (el z A)))))))

(local theorem sbseh ((x nat) (a nat ()) (A set (x)) (B set (x)))
  ((h (nfs x B))
   (e (im (eq x a) (eqs A B))))
  (eqs (sbs a x A) B)
()
(ax_mp ((al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
  (sbseht (x a A B)
    h)
  (ax_gen (x (im (eq x a) (eqs A B)))
    e)))

(local theorem sbset ((x nat) (a nat ()) (A set (x)) (B set ())) ()
  (im (al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
()
(sbseht (x a A B)
  (nfsv (B x))))

(local theorem sbse ((x nat) (a nat ()) (A set (x)) (B set ()))
  ((e (im (eq x a) (eqs A B))))
  (eqs (sbs a x A) B)
()
(sbseh (x a A B)
  (nfsv (B x))
  e))

(local theorem sbsed ((G wff ()) (x nat) (a nat ()) (A set (x)) (B set ()))
  ((e (im (an G (eq x a)) (eqs A B))))
  (im G (eqs (sbs a x A) B))
()
(syl (G (al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
  (sbset (x a A B))
  (ialda (x G (eq x a) (eqs A B))
    e)))

(local theorem sbsid ((A set ()) (x nat) (a set (x))) ()
  (eqs (sbs x x A) A)
((y nat))
(eqri ((sbs x x A) A y)
  (ax_mp ((iff (sb x x (el y A)) (el y A)) (iff (el y (sbs x x A)) (el y A)))
    (ax_mp ((iff (el y (sbs x x A)) (sb x x (el y A))) (im (iff (sb x x (el y A)) (el y A)) (iff (el y (sbs x x A)) (el y A))))
      (bitr ((el y (sbs x x A)) (sb x x (el y A)) (el y A)))
      (elsbs (x x y A)))
    (sbid (x (el y A))))))

(local theorem nfslem ((x nat) (y nat) (A set (y)) (a nat (x)) (B set (x)))
  ((e (im (eq y a) (eqs A B)))
   (h (nfn x a)))
  (nfs x B)
()
(nfsx (x B (sbs a y A))
  (ax_mp ((eqs (sbs a y A) B) (eqs B (sbs a y A)))
    (eqscom ((sbs a y A) B))
    (sbse (y a A B)
      e))
  (nfsbsh (x y a A)
    h
    (nfsv (A x)))))

(local def eu ((x nat) (p wff (x))) (wff ())
((y nat))
(ex y (al x (iff p (eq x y)))))

(local theorem eueqd ((_G wff ()) (x nat) (_p1 wff (x)) (_p2 wff (x)))
  ((_ph (im _G (iff _p1 _p2))))
  (im _G (iff (eu x _p1) (eu x _p2)))
((y nat))
(:conv (im _G (iff (eu x _p1) (eu x _p2)))
  (im
    _G
    (iff
      (:unfold eu (x _p1) (y)
        (ex y (al x (iff _p1 (eq x y)))))
      (:unfold eu (x _p2) (y)
        (ex y (al x (iff _p2 (eq x y)))))))
  (exeqd (_G y (al x (iff _p1 (eq x y))) (al x (iff _p2 (eq x y))))
    (aleqd (_G x (iff _p1 (eq x y)) (iff _p2 (eq x y)))
      (bieqd (_G _p1 _p2 (eq x y) (eq x y))
        _ph
        (biidd (_G (eq x y))))))))

(term d0 () (nat ()))

(term suc ((n nat ())) (nat ()))

(def d1 () (nat ())
()
(suc (d0)))

(def d2 () (nat ())
()
(suc (d1)))

(def d3 () (nat ())
()
(suc (d2)))

(def d4 () (nat ())
()
(suc (d3)))

(def d5 () (nat ())
()
(suc (d4)))

(def d6 () (nat ())
()
(suc (d5)))

(def d7 () (nat ())
()
(suc (d6)))

(def d8 () (nat ())
()
(suc (d7)))

(def d9 () (nat ())
()
(suc (d8)))

(def d10 () (nat ())
()
(suc (d9)))

(axiom peano1 ((a nat ())) ()
  (ne (suc a) (d0)))

(axiom peano2 ((a nat ()) (b nat ())) ()
  (iff (eq (suc a) (suc b)) (eq a b)))

(axiom peano5 ((x nat) (p wff (x))) ()
  (im (sb (d0) x p) (im (al x (im p (sb (suc x) x p))) (al x p))))

(local theorem d1ne0 () ()
  (ne (d1) (d0))
()
(:conv (ne (d1) (d0))
  (ne
    (:unfold d1 () ()
      (suc (d0)))
    (d0))
  (peano1 ((d0)))))

(local theorem d2ne0 () ()
  (ne (d2) (d0))
()
(:conv (ne (d2) (d0))
  (ne
    (:unfold d2 () ()
      (suc (d1)))
    (d0))
  (peano1 ((d1)))))

(local theorem suceq ((a nat ()) (b nat ())) ()
  (im (eq a b) (eq (suc a) (suc b)))
()
(ax_mp ((iff (eq (suc a) (suc b)) (eq a b)) (im (eq a b) (eq (suc a) (suc b))))
  (bi2 ((eq (suc a) (suc b)) (eq a b)))
  (peano2 (a b))))

(local theorem suceqd ((G wff ()) (a nat ()) (b nat ()))
  ((h (im G (eq a b))))
  (im G (eq (suc a) (suc b)))
()
(syl (G (eq a b) (eq (suc a) (suc b)))
  (suceq (a b))
  h))

(local theorem ind ((x nat) (y nat) (a nat (y)) (px wff (x)) (p0 wff (y)) (pa wff (y)) (py wff (y)) (ps wff (y)))
  ((ha (im (eq x a) (iff px pa)))
   (h0 (im (eq x (d0)) (iff px p0)))
   (hy (im (eq x y) (iff px py)))
   (hs (im (eq x (suc y)) (iff px ps)))
   (h1 p0)
   (h2 (im py ps)))
  pa
()
(ax_mp ((al x px) pa)
  (eale (x a px pa)
    ha)
  (ax_mp ((al x (im px (sb (suc x) x px))) (al x px))
    (ax_mp ((sb (d0) x px) (im (al x (im px (sb (suc x) x px))) (al x px)))
      (peano5 (x px))
      (mpbir (p0 (sb (d0) x px))
        (sbe (x (d0) px p0)
          h0)
        h1))
    (mpbir ((al y (im py (sb (suc y) x px))) (al x (im px (sb (suc x) x px))))
      (cbvalh (x y (im px (sb (suc x) x px)) (im py (sb (suc y) x px)))
        (nfv ((im px (sb (suc x) x px)) y))
        (nfim (x py (sb (suc y) x px))
          (nfv (py x))
          (nfsb1 (x (suc y) px)))
        (imeqd ((eq x y) px py (sb (suc x) x px) (sb (suc y) x px))
          hy
          (sbeq1d (x (eq x y) (suc x) (suc y) px)
            (suceq (x y)))))
      (ax_gen (y (im py (sb (suc y) x px)))
        (rsyl (py ps (sb (suc y) x px))
          h2
          (bi2i ((sb (suc y) x px) ps)
            (sbe (x (suc y) px ps)
              hs))))))))

(local theorem indd ((G wff ()) (x nat) (y nat) (a nat (y)) (px wff (x)) (p0 wff (y)) (pa wff (y)) (py wff (y)) (ps wff (y)))
  ((ha (im (eq x a) (iff px pa)))
   (h0 (im (eq x (d0)) (iff px p0)))
   (hy (im (eq x y) (iff px py)))
   (hs (im (eq x (suc y)) (iff px ps)))
   (h1 (im G p0))
   (h2 (im (an G py) ps)))
  (im G pa)
()
(ind (x y a (im G px) (im G p0) (im G pa) (im G py) (im G ps))
  (imeq2d ((eq x a) G px pa)
    ha)
  (imeq2d ((eq x (d0)) G px p0)
    h0)
  (imeq2d ((eq x y) G px py)
    hy)
  (imeq2d ((eq x (suc y)) G px ps)
    hs)
  h1
  (a2i (G py ps)
    (exp (G py ps)
      h2))))

(local theorem sucne0 ((a nat ()) (b nat ())) ()
  (im (eq a (suc b)) (ne a (d0)))
()
(mpbiri ((eq a (suc b)) (ne (suc b) (d0)) (ne a (d0)))
  (peano1 (b))
  (neeq1 (a (suc b) (d0)))))

(local theorem exsuc ((x nat) (a nat ())) ()
  (iff (ne a (d0)) (ex x (eq a (suc x))))
((y nat) (z nat))
(ibii ((ne a (d0)) (ex x (eq a (suc x))))
  (ind (y z a (im (ne y (d0)) (ex x (eq y (suc x)))) (im (not (eq (d0) (d0))) (ex x (eq (d0) (suc x)))) (im (ne a (d0)) (ex x (eq a (suc x)))) (im (not (eq z (d0))) (ex x (eq z (suc x)))) (im (not (eq (suc z) (d0))) (ex x (eq (suc z) (suc x)))))
    (imeqd ((eq y a) (ne y (d0)) (ne a (d0)) (ex x (eq y (suc x))) (ex x (eq a (suc x))))
      (:conv (im (eq y a) (iff (ne y (d0)) (ne a (d0))))
        (im
          (eq y a)
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (:unfold ne (a (d0)) ()
              (not (eq a (d0))))))
        (noteqd ((eq y a) (eq y (d0)) (eq a (d0)))
          (eqeq1 (y a (d0)))))
      (exeqd ((eq y a) x (eq y (suc x)) (eq a (suc x)))
        (eqeq1 (y a (suc x)))))
    (imeqd ((eq y (d0)) (ne y (d0)) (not (eq (d0) (d0))) (ex x (eq y (suc x))) (ex x (eq (d0) (suc x))))
      (:conv (im (eq y (d0)) (iff (ne y (d0)) (not (eq (d0) (d0)))))
        (im
          (eq y (d0))
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (not (eq (d0) (d0)))))
        (noteqd ((eq y (d0)) (eq y (d0)) (eq (d0) (d0)))
          (eqeq1 (y (d0) (d0)))))
      (exeqd ((eq y (d0)) x (eq y (suc x)) (eq (d0) (suc x)))
        (eqeq1 (y (d0) (suc x)))))
    (imeqd ((eq y z) (ne y (d0)) (not (eq z (d0))) (ex x (eq y (suc x))) (ex x (eq z (suc x))))
      (:conv (im (eq y z) (iff (ne y (d0)) (not (eq z (d0)))))
        (im
          (eq y z)
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (not (eq z (d0)))))
        (noteqd ((eq y z) (eq y (d0)) (eq z (d0)))
          (eqeq1 (y z (d0)))))
      (exeqd ((eq y z) x (eq y (suc x)) (eq z (suc x)))
        (eqeq1 (y z (suc x)))))
    (imeqd ((eq y (suc z)) (ne y (d0)) (not (eq (suc z) (d0))) (ex x (eq y (suc x))) (ex x (eq (suc z) (suc x))))
      (:conv (im (eq y (suc z)) (iff (ne y (d0)) (not (eq (suc z) (d0)))))
        (im
          (eq y (suc z))
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (not (eq (suc z) (d0)))))
        (noteqd ((eq y (suc z)) (eq y (d0)) (eq (suc z) (d0)))
          (eqeq1 (y (suc z) (d0)))))
      (exeqd ((eq y (suc z)) x (eq y (suc x)) (eq (suc z) (suc x)))
        (eqeq1 (y (suc z) (suc x)))))
    (ax_mp ((eq (d0) (d0)) (im (not (eq (d0) (d0))) (ex x (eq (d0) (suc x)))))
      (absurdr ((eq (d0) (d0)) (ex x (eq (d0) (suc x)))))
      (eqid ((d0))))
    (a1i ((im (not (eq z (d0))) (ex x (eq z (suc x)))) (im (not (eq (suc z) (d0))) (ex x (eq (suc z) (suc x)))))
      (a1i ((not (eq (suc z) (d0))) (ex x (eq (suc z) (suc x))))
        (ax_mp ((eq (suc z) (suc z)) (ex x (eq (suc z) (suc x))))
          (iexe (x z (eq (suc z) (suc x)) (eq (suc z) (suc z)))
            (eqeq2d ((eq x z) (suc z) (suc x) (suc z))
              (suceq (x z))))
          (eqid ((suc z)))))))
  (eex (x (eq a (suc x)) (ne a (d0)))
    (sucne0 (a x)))))

(local theorem eqsucext ((a nat ()) (b nat ()) (x nat)) ()
  (iff (eq a b) (al x (iff (eq a (suc x)) (eq b (suc x)))))
()
(:let H1 (exsuc (x a))
(:let H2 (:conv (iff (not (eq a (d0))) (ex x (eq a (suc x))))
  (iff
    (:sym (:unfold ne (a (d0)) ()
      (not (eq a (d0)))))
    (ex x (eq a (suc x))))
  H1)
(ibii ((eq a b) (al x (iff (eq a (suc x)) (eq b (suc x)))))
  (iald (x (eq a b) (iff (eq a (suc x)) (eq b (suc x))))
    (eqeq1 (a b (suc x))))
  (casesd ((al x (iff (eq a (suc x)) (eq b (suc x)))) (eq a (d0)) (eq a b))
    (exp ((al x (iff (eq a (suc x)) (eq b (suc x)))) (eq a (d0)) (eq a b))
      (eqtr4d ((an (al x (iff (eq a (suc x)) (eq b (suc x)))) (eq a (d0))) a (d0) b)
        (anr ((al x (iff (eq a (suc x)) (eq b (suc x)))) (eq a (d0))))
        (imp ((al x (iff (eq a (suc x)) (eq b (suc x)))) (eq a (d0)) (eq b (d0)))
          (con4d ((al x (iff (eq a (suc x)) (eq b (suc x)))) (eq b (d0)) (eq a (d0)))
            (bi2d ((al x (iff (eq a (suc x)) (eq b (suc x)))) (not (eq a (d0))) (not (eq b (d0))))
              (bitr4g ((al x (iff (eq a (suc x)) (eq b (suc x)))) (ex x (eq a (suc x))) (ex x (eq b (suc x))) (not (eq a (d0))) (not (eq b (d0))))
                H2
                (:conv (iff (not (eq b (d0))) (ex x (eq b (suc x))))
                  (iff
                    (:sym (:unfold ne (b (d0)) ()
                      (not (eq b (d0)))))
                    (ex x (eq b (suc x))))
                  (exsuc (x b)))
                (exeq (x (eq a (suc x)) (eq b (suc x))))))))))
    (syl5bi ((al x (iff (eq a (suc x)) (eq b (suc x)))) (not (eq a (d0))) (ex x (eq a (suc x))) (eq a b))
      H2
      (sylibr ((al x (iff (eq a (suc x)) (eq b (suc x)))) (al x (im (eq a (suc x)) (eq a b))) (im (ex x (eq a (suc x))) (eq a b)))
        (eexb (x (eq a (suc x)) (eq a b)))
        (alimi (x (iff (eq a (suc x)) (eq b (suc x))) (im (eq a (suc x)) (eq a b)))
          (exp ((iff (eq a (suc x)) (eq b (suc x))) (eq a (suc x)) (eq a b))
            (eqtr4d ((an (iff (eq a (suc x)) (eq b (suc x))) (eq a (suc x))) a (suc x) b)
              (anr ((iff (eq a (suc x)) (eq b (suc x))) (eq a (suc x))))
              (imp ((iff (eq a (suc x)) (eq b (suc x))) (eq a (suc x)) (eq b (suc x)))
                (bi1 ((eq a (suc x)) (eq b (suc x)))))))))))))))

(term the ((A set ())) (nat ()))

(axiom theid ((x nat) (A set ()) (a nat ())) ()
  (im (eqs A (ab x (eq x a))) (eq (the A) a)))

(axiom the0 ((x nat) (y nat) (A set ())) ()
  (im (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (d0))))

(local theorem theeqd ((G wff ()) (A set ()) (B set ()))
  ((h (im G (eqs A B))))
  (im G (eq (the A) (the B)))
((x nat) (y nat))
(casesd (G (ex y (eqs A (ab x (eq x y)))) (eq (the A) (the B)))
  (eexda (y G (eqs A (ab x (eq x y))) (eq (the A) (the B)))
    (eqtr4d ((an G (eqs A (ab x (eq x y)))) (the A) y (the B))
      (anwr (G (eqs A (ab x (eq x y))) (eq (the A) y))
        (theid (x A y)))
      (syl ((an G (eqs A (ab x (eq x y)))) (eqs B (ab x (eq x y))) (eq (the B) y))
        (theid (x B y))
        (imp (G (eqs A (ab x (eq x y))) (eqs B (ab x (eq x y))))
          (syl (G (eqs A B) (im (eqs A (ab x (eq x y))) (eqs B (ab x (eq x y)))))
            (eqstr3 (B A (ab x (eq x y))))
            h)))))
  (exp (G (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (the B)))
    (eqtr4d ((an G (not (ex y (eqs A (ab x (eq x y)))))) (the A) (d0) (the B))
      (anwr (G (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (d0)))
        (the0 (x y A)))
      (syl ((an G (not (ex y (eqs A (ab x (eq x y)))))) (not (ex y (eqs B (ab x (eq x y))))) (eq (the B) (d0)))
        (the0 (x y B))
        (impbi (G (not (ex y (eqs A (ab x (eq x y))))) (not (ex y (eqs B (ab x (eq x y))))))
          (noteqd (G (ex y (eqs A (ab x (eq x y)))) (ex y (eqs B (ab x (eq x y)))))
            (exeqd (G y (eqs A (ab x (eq x y))) (eqs B (ab x (eq x y))))
              (eqseq1d (G A B (ab x (eq x y)))
                h)))))))))

(local theorem theeq ((A set ()) (B set ())) ()
  (im (eqs A B) (eq (the A) (the B)))
()
(theeqd ((eqs A B) A B)
  (id ((eqs A B)))))

(local theorem eqthed ((A set ()) (G wff ()) (a nat ()) (x nat))
  ((h (im G (iff (el x A) (eq x a)))))
  (im G (eq (the A) a))
((z nat))
(syl (G (eqs A (ab z (eq z a))) (eq (the A) a))
  (theid (z A a))
  (eqrd (A (ab z (eq z a)) G x)
    (syl6bbr (G (el x A) (eq x a) (el x (ab z (eq z a))))
      (elabe (z x (eq z a) (eq x a))
        (eqeq1 (z x a)))
      h))))

(local theorem eqtheabd ((G wff ()) (a nat ()) (x nat) (p wff (x)))
  ((h (im G (iff p (eq x a)))))
  (im G (eq (the (ab x p)) a))
((y nat))
(eqthed ((ab x p) G a y)
  (syl5bb (G (el y (ab x p)) (sb y x p) (eq y a))
    (elab (y x p))
    (rsyl (G (al x (iff p (eq x a))) (iff (sb y x p) (eq y a)))
      (iald (x G (iff p (eq x a)))
        h)
      (ealeh (x y (iff p (eq x a)) (iff (sb y x p) (eq y a)))
        (nfbi (x (sb y x p) (eq y a))
          (nfsb1 (x y p))
          (nfv ((eq y a) x)))
        (bieqd ((eq x y) p (sb y x p) (eq x a) (eq y a))
          (sbq (x y p))
          (eqeq1 (x y a))))))))

(local theorem eqthe0d ((A set ()) (G wff ()) (x nat))
  ((h (im G (im (el x A) (eq x (d0))))))
  (im G (eq (the A) (d0)))
((y nat))
(casesd (G (ex x (eqs A (ab y (eq y x)))) (eq (the A) (d0)))
  (eexda (x G (eqs A (ab y (eq y x))) (eq (the A) (d0)))
    (syl ((an G (eqs A (ab y (eq y x)))) (eqs A (ab y (eq y (d0)))) (eq (the A) (d0)))
      (theid (y A (d0)))
      (eqstrd (A (ab y (eq y x)) (ab y (eq y (d0))) (an G (eqs A (ab y (eq y x)))))
        (anr (G (eqs A (ab y (eq y x)))))
        (syl ((an G (eqs A (ab y (eq y x)))) (eq x (d0)) (eqs (ab y (eq y x)) (ab y (eq y (d0)))))
          (abeqd ((eq x (d0)) y (eq y x) (eq y (d0)))
            (eqeq2 (y x (d0))))
          (mpd ((an G (eqs A (ab y (eq y x)))) (el x A) (eq x (d0)))
            (mpbiri ((an G (eqs A (ab y (eq y x)))) (el x (ab y (eq y x))) (el x A))
              (mpbir ((eq x x) (el x (ab y (eq y x))))
                (elabe (y x (eq y x) (eq x x))
                  (eqeq1 (y x x)))
                (eqid (x)))
              (anwr (G (eqs A (ab y (eq y x))) (iff (el x A) (el x (ab y (eq y x)))))
                (eleq2 (A (ab y (eq y x)) x))))
            (anwl (G (eqs A (ab y (eq y x))) (im (el x A) (eq x (d0))))
              h))))))
  (a1i (G (im (not (ex x (eqs A (ab y (eq y x))))) (eq (the A) (d0))))
    (the0 (y x A)))))

(local theorem eqthe0abd ((G wff ()) (x nat) (p wff (x)))
  ((h (im G (im p (eq x (d0))))))
  (im G (eq (the (ab x p)) (d0)))
((y nat))
(eqthe0d ((ab x p) G y)
  (syl5bi (G (el y (ab x p)) (sb y x p) (eq y (d0)))
    (elab (y x p))
    (rsyl (G (al x (im p (eq x (d0)))) (im (sb y x p) (eq y (d0))))
      (iald (x G (im p (eq x (d0))))
        h)
      (ealeh (x y (im p (eq x (d0))) (im (sb y x p) (eq y (d0))))
        (nfim (x (sb y x p) (eq y (d0)))
          (nfsb1 (x y p))
          (nfv ((eq y (d0)) x)))
        (imeqd ((eq x y) p (sb y x p) (eq x (d0)) (eq y (d0)))
          (sbq (x y p))
          (eqeq1 (x y (d0)))))))))

(local theorem eqtheb ((A set ()) (a nat ()) (x nat) (y nat)) ()
  (iff (eq a (the A)) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
()
(:let H1 (the0 (x y A))
(ibii ((eq a (the A)) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
  (casesda ((eq a (the A)) (ex y (eqs A (ab x (eq x y)))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
    (imp ((eq a (the A)) (ex y (eqs A (ab x (eq x y)))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
      (eexdh (y (eq a (the A)) (eqs A (ab x (eq x y))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
        (nfv ((eq a (the A)) y))
        (nfor (y (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
          (nfv ((eqs A (ab x (eq x a))) y))
          (nfan (y (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))
            (nfnot (y (ex y (eqs A (ab x (eq x y)))))
              (nfex1 (y (eqs A (ab x (eq x y))))))
            (nfv ((eq a (d0)) y))))
        (exp ((eq a (the A)) (eqs A (ab x (eq x y))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
          (orld ((an (eq a (the A)) (eqs A (ab x (eq x y)))) (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
            (mpbird ((an (eq a (the A)) (eqs A (ab x (eq x y)))) (eqs A (ab x (eq x y))) (eqs A (ab x (eq x a))))
              (syl ((an (eq a (the A)) (eqs A (ab x (eq x y)))) (eq a y) (iff (eqs A (ab x (eq x a))) (eqs A (ab x (eq x y)))))
                (eqseq2d ((eq a y) A (ab x (eq x a)) (ab x (eq x y)))
                  (abeqd ((eq a y) x (eq x a) (eq x y))
                    (eqeq2 (x a y))))
                (eqtrd ((an (eq a (the A)) (eqs A (ab x (eq x y)))) a (the A) y)
                  (anl ((eq a (the A)) (eqs A (ab x (eq x y)))))
                  (anwr ((eq a (the A)) (eqs A (ab x (eq x y))) (eq (the A) y))
                    (theid (x A y)))))
              (anr ((eq a (the A)) (eqs A (ab x (eq x y))))))))))
    (orrd ((an (eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))) (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
      (iand ((an (eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))) (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))
        (anr ((eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))))
        (eqtrd ((an (eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))) a (the A) (d0))
          (anl ((eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))))
          (anwr ((eq a (the A)) (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (d0)))
            H1)))))
  (ax_mp ((im (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) (eq a (the A))) (im (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))) (eq a (the A))))
    (ax_mp ((im (eqs A (ab x (eq x a))) (eq a (the A))) (im (im (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) (eq a (the A))) (im (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))) (eq a (the A)))))
      (eor ((eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) (eq a (the A))))
      (eqcomd ((eqs A (ab x (eq x a))) (the A) a)
        (theid (x A a))))
    (eqtrd ((an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) a (d0) (the A))
      (anr ((not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
      (anwl ((not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)) (eq (d0) (the A)))
        (eqcomd ((not (ex y (eqs A (ab x (eq x y))))) (the A) (d0))
          H1)))))))

(local theorem nfthe ((x nat) (A set (x)))
  ((h (nfs x A)))
  (nfn x (the A))
((u nat) (v nat) (y nat))
(nfnri (x y (the A))
  (nfx (x (eq y (the A)) (or (eqs A (ab u (eq u y))) (an (not (ex v (eqs A (ab u (eq u v))))) (eq y (d0)))))
    (eqtheb (A y u v))
    (nfor (x (eqs A (ab u (eq u y))) (an (not (ex v (eqs A (ab u (eq u v))))) (eq y (d0))))
      (nfeqs (x A (ab u (eq u y)))
        h
        (nfsv ((ab u (eq u y)) x)))
      (nfan (x (not (ex v (eqs A (ab u (eq u v))))) (eq y (d0)))
        (nfnot (x (ex v (eqs A (ab u (eq u v)))))
          (nfex (x v (eqs A (ab u (eq u v))))
            (nfeqs (x A (ab u (eq u v)))
              h
              (nfsv ((ab u (eq u v)) x)))))
        (nfv ((eq y (d0)) x)))))))

(local def theo ((A set ())) (nat ())
((x nat) (y nat))
(the (ab x (ex y (an (eq x (suc y)) (el y A))))))

(local theorem theoeqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eq (theo _A1) (theo _A2)))
((x nat) (y nat))
(:conv (im _G (eq (theo _A1) (theo _A2)))
  (im
    _G
    (eq
      (:unfold theo (_A1) (x y)
        (the (ab x (ex y (an (eq x (suc y)) (el y _A1))))))
      (:unfold theo (_A2) (x y)
        (the (ab x (ex y (an (eq x (suc y)) (el y _A2))))))))
  (theeqd (_G (ab x (ex y (an (eq x (suc y)) (el y _A1)))) (ab x (ex y (an (eq x (suc y)) (el y _A2)))))
    (abeqd (_G x (ex y (an (eq x (suc y)) (el y _A1))) (ex y (an (eq x (suc y)) (el y _A2))))
      (exeqd (_G y (an (eq x (suc y)) (el y _A1)) (an (eq x (suc y)) (el y _A2)))
        (aneqd (_G (eq x (suc y)) (eq x (suc y)) (el y _A1) (el y _A2))
          (biidd (_G (eq x (suc y))))
          (eleqd (_G y y _A1 _A2)
            (eqidd (_G y))
            _Ah)))))))

(local theorem theoeq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eq (theo _A1) (theo _A2)))
()
(theoeqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem theoid1 ((x nat) (A set ()) (a nat ())) ()
  (im (eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
((x1 nat) (x2 nat))
(:conv (im (eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
  (im
    (eqs A (ab x (eq x a)))
    (eq
      (:unfold theo (A) (x1 x2)
        (the (ab x1 (ex x2 (an (eq x1 (suc x2)) (el x2 A))))))
      (suc a)))
  (eqtheabd ((eqs A (ab x (eq x a))) (suc a) x1 (ex x2 (an (eq x1 (suc x2)) (el x2 A))))
    (ibid ((eqs A (ab x (eq x a))) (ex x2 (an (eq x1 (suc x2)) (el x2 A))) (eq x1 (suc a)))
      (eexda (x2 (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A)) (eq x1 (suc a)))
        (eqtrd ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) x1 (suc x2) (suc a))
          (anrl ((eqs A (ab x (eq x a))) (eq x1 (suc x2)) (el x2 A)))
          (suceqd ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) x2 a)
            (sylib ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) (el x2 (ab x (eq x a))) (eq x2 a))
              (elabe (x x2 (eq x a) (eq x2 a))
                (eqeq1 (x x2 a)))
              (mpbid ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) (el x2 A) (el x2 (ab x (eq x a))))
                (eleq2d (A (ab x (eq x a)) (an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) x2)
                  (anl ((eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A)))))
                (anrr ((eqs A (ab x (eq x a))) (eq x1 (suc x2)) (el x2 A))))))))
      (exp ((eqs A (ab x (eq x a))) (eq x1 (suc a)) (ex x2 (an (eq x1 (suc x2)) (el x2 A))))
        (sylan ((an (eqs A (ab x (eq x a))) (eq x1 (suc a))) (eq x1 (suc a)) (el a A) (ex x2 (an (eq x1 (suc x2)) (el x2 A))))
          (iexe (x2 a (an (eq x1 (suc x2)) (el x2 A)) (an (eq x1 (suc a)) (el a A)))
            (aneqd ((eq x2 a) (eq x1 (suc x2)) (eq x1 (suc a)) (el x2 A) (el a A))
              (eqeq2d ((eq x2 a) x1 (suc x2) (suc a))
                (suceq (x2 a)))
              (eleq1 (A x2 a))))
          (anr ((eqs A (ab x (eq x a))) (eq x1 (suc a))))
          (mpbiri ((an (eqs A (ab x (eq x a))) (eq x1 (suc a))) (el a (ab x (eq x a))) (el a A))
            (mpbir ((eq a a) (el a (ab x (eq x a))))
              (elabe (x a (eq x a) (eq a a))
                (eqeq1 (x a a)))
              (eqid (a)))
            (eleq2d (A (ab x (eq x a)) (an (eqs A (ab x (eq x a))) (eq x1 (suc a))) a)
              (anl ((eqs A (ab x (eq x a))) (eq x1 (suc a))))))))))))

(local theorem theo01 ((y nat) (x nat) (A set ())) ()
  (im (not (ex y (eqs A (ab x (eq x y))))) (eq (theo A) (d0)))
((n nat) (x1 nat) (x2 nat) (x3 nat))
(:let H1 (anwll ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A)) (el x A) (al x2 (im (el x2 A) (eq (suc x2) n))))
  (rsyl ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (al x3 (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))) (al x2 (im (el x2 A) (eq (suc x2) n))))
    (alimi (x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))))
      (sylib ((iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (im (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))))
        (eexb (x2 (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))
        (bi1 ((ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)))))
    (rsyl ((al x3 (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))) (al x2 (al x3 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))) (al x2 (im (el x2 A) (eq (suc x2) n))))
      (ax_11 (x3 x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))))
      (alimi (x2 (al x3 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))) (im (el x2 A) (eq (suc x2) n)))
        (syl ((al x3 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))) (im (an (eq (suc x2) (suc x2)) (el x2 A)) (eq (suc x2) n)) (im (el x2 A) (eq (suc x2) n)))
          (imim1i ((el x2 A) (an (eq (suc x2) (suc x2)) (el x2 A)) (eq (suc x2) n))
            (ax_mp ((eq (suc x2) (suc x2)) (im (el x2 A) (an (eq (suc x2) (suc x2)) (el x2 A))))
              (ian ((eq (suc x2) (suc x2)) (el x2 A)))
              (eqid ((suc x2)))))
          (eale (x3 (suc x2) (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)) (im (an (eq (suc x2) (suc x2)) (el x2 A)) (eq (suc x2) n)))
            (imeqd ((eq x3 (suc x2)) (an (eq x3 (suc x2)) (el x2 A)) (an (eq (suc x2) (suc x2)) (el x2 A)) (eq x3 n) (eq (suc x2) n))
              (aneq1d ((eq x3 (suc x2)) (eq x3 (suc x2)) (eq (suc x2) (suc x2)) (el x2 A))
                (eqeq1 (x3 (suc x2) (suc x2))))
              (eqeq1 (x3 (suc x2) n)))))))))
(:let H2 (anrr ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eq n (suc y)) (el y A)))
(syl ((not (ex y (eqs A (ab x (eq x y))))) (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))))) (eq (theo A) (d0)))
  (:conv (im (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))))) (eq (theo A) (d0)))
    (im
      (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
      (eq
        (:unfold theo (A) (x3 x2)
          (the (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A))))))
        (d0)))
    (the0 (x1 n (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))))))
  (ax_mp ((im (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (ex y (eqs A (ab x (eq x y))))) (im (not (ex y (eqs A (ab x (eq x y))))) (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))))
    (con3 ((ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (ex y (eqs A (ab x (eq x y))))))
    (eex (n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))) (ex y (eqs A (ab x (eq x y)))))
      (sylbir ((eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))) (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (ex y (eqs A (ab x (eq x y)))))
        (ax_mp ((iff (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (iff (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
          (ax_mp ((iff (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n)))) (im (iff (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (iff (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))))))
            (bitr ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
            (abeqb (x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))))
          (ax_mp ((eqs (ab x3 (eq x3 n)) (ab x1 (eq x1 n))) (iff (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
            (eqseq2 ((ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n)) (ab x1 (eq x1 n))))
            (cbvab (x3 x1 (eq x3 n) (eq x1 n))
              (eqeq1 (x3 x1 n)))))
        (mpd ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (ex y (an (eq n (suc y)) (el y A))) (ex y (eqs A (ab x (eq x y)))))
          (rsyl ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)) (ex y (an (eq n (suc y)) (el y A))))
            (eale (x3 n (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)))
              (bieqd ((eq x3 n) (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq x3 n) (eq n n))
                (exeqd ((eq x3 n) x2 (an (eq x3 (suc x2)) (el x2 A)) (an (eq n (suc x2)) (el x2 A)))
                  (aneq1d ((eq x3 n) (eq x3 (suc x2)) (eq n (suc x2)) (el x2 A))
                    (eqeq1 (x3 n (suc x2)))))
                (eqeq1 (x3 n n))))
            (sylibr ((iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)) (ex x2 (an (eq n (suc x2)) (el x2 A))) (ex y (an (eq n (suc y)) (el y A))))
              (cbvex (y x2 (an (eq n (suc y)) (el y A)) (an (eq n (suc x2)) (el x2 A)))
                (aneqd ((eq y x2) (eq n (suc y)) (eq n (suc x2)) (el y A) (el x2 A))
                  (eqeq2d ((eq y x2) n (suc y) (suc x2))
                    (suceq (y x2)))
                  (eleq1 (A y x2))))
              (mpi ((iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)) (eq n n) (ex x2 (an (eq n (suc x2)) (el x2 A))))
                (eqid (n))
                (bi2 ((ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n))))))
          (eximd (y (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A)) (eqs A (ab x (eq x y))))
            (exp ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A)) (eqs A (ab x (eq x y))))
              (eqab2d (A (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) x (eq x y))
                (ibida ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A) (eq x y))
                  (sylib ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (eq (suc x) (suc y)) (eq x y))
                    (peano2 (x y))
                    (eqtr4d ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (suc x) n (suc y))
                      (sylc ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (al x2 (im (el x2 A) (eq (suc x2) n))) (el x A) (eq (suc x) n))
                        (eale (x2 x (im (el x2 A) (eq (suc x2) n)) (im (el x A) (eq (suc x) n)))
                          (imeqd ((eq x2 x) (el x2 A) (el x A) (eq (suc x2) n) (eq (suc x) n))
                            (eleq1 (A x2 x))
                            (eqeq1d ((eq x2 x) (suc x2) (suc x) n)
                              (suceq (x2 x)))))
                        H1
                        (anr ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A))))
                      (sylc ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (al x2 (im (el x2 A) (eq (suc x2) n))) (el y A) (eq (suc y) n))
                        (eale (x2 y (im (el x2 A) (eq (suc x2) n)) (im (el y A) (eq (suc y) n)))
                          (imeqd ((eq x2 y) (el x2 A) (el y A) (eq (suc x2) n) (eq (suc y) n))
                            (eleq1 (A x2 y))
                            (eqeq1d ((eq x2 y) (suc x2) (suc y) n)
                              (suceq (x2 y)))))
                        H1
                        (anwl ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A) (el y A))
                          H2))))
                  (mpbird ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y)) (el y A) (el x A))
                    (eleq1d (A (an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y)) x y)
                      (anr ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y))))
                    (anwl ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y) (el y A))
                      H2))))))))))))))

(local theorem theoid ((x nat) (A set ()) (a nat ())) ()
  (iff (eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
((x1 nat))
(ibii ((eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
  (theoid1 (x A a))
  (mpd ((eq (theo A) (suc a)) (ex x1 (eqs A (ab x (eq x x1)))) (eqs A (ab x (eq x a))))
    (rsyl ((eq (theo A) (suc a)) (ne (theo A) (d0)) (ex x1 (eqs A (ab x (eq x x1)))))
      (sucne0 ((theo A) a))
      (ax_mp ((im (not (ex x1 (eqs A (ab x (eq x x1))))) (eq (theo A) (d0))) (im (ne (theo A) (d0)) (ex x1 (eqs A (ab x (eq x x1))))))
        (:conv (im (im (not (ex x1 (eqs A (ab x (eq x x1))))) (eq (theo A) (d0))) (im (ne (theo A) (d0)) (ex x1 (eqs A (ab x (eq x x1))))))
          (im
            (im (not (ex x1 (eqs A (ab x (eq x x1))))) (eq (theo A) (d0)))
            (im
              (:unfold ne ((theo A) (d0)) ()
                (not (eq (theo A) (d0))))
              (ex x1 (eqs A (ab x (eq x x1))))))
          (con1 ((ex x1 (eqs A (ab x (eq x x1)))) (eq (theo A) (d0)))))
        (theo01 (x1 x A))))
    (eexda (x1 (eq (theo A) (suc a)) (eqs A (ab x (eq x x1))) (eqs A (ab x (eq x a))))
      (eqstrd (A (ab x (eq x x1)) (ab x (eq x a)) (an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))))
        (anr ((eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))))
        (syl ((an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))) (eq x1 a) (eqs (ab x (eq x x1)) (ab x (eq x a))))
          (abeqd ((eq x1 a) x (eq x x1) (eq x a))
            (eqeq2 (x x1 a)))
          (sylib ((an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))) (eq (suc x1) (suc a)) (eq x1 a))
            (peano2 (x1 a))
            (eqtr3d ((an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))) (suc x1) (theo A) (suc a))
              (anwr ((eq (theo A) (suc a)) (eqs A (ab x (eq x x1))) (eq (theo A) (suc x1)))
                (theoid1 (x A x1)))
              (anl ((eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))))))))))))

(local theorem theo0 ((x nat) (y nat) (A set ())) ()
  (iff (not (ex y (eqs A (ab x (eq x y))))) (eq (theo A) (d0)))
()
(ibii ((not (ex y (eqs A (ab x (eq x y))))) (eq (theo A) (d0)))
  (theo01 (y x A))
  (ax_mp ((im (ex y (eqs A (ab x (eq x y)))) (not (eq (theo A) (d0)))) (im (eq (theo A) (d0)) (not (ex y (eqs A (ab x (eq x y)))))))
    (con2 ((ex y (eqs A (ab x (eq x y)))) (eq (theo A) (d0))))
    (eex (y (eqs A (ab x (eq x y))) (not (eq (theo A) (d0))))
      (syl ((eqs A (ab x (eq x y))) (eq (theo A) (suc y)) (not (eq (theo A) (d0))))
        (:conv (im (eq (theo A) (suc y)) (not (eq (theo A) (d0))))
          (im
            (eq (theo A) (suc y))
            (:sym (:unfold ne ((theo A) (d0)) ()
              (not (eq (theo A) (d0))))))
          (sucne0 ((theo A) y)))
        (theoid1 (x A y)))))))

(local def subsn ((A set ())) (wff ())
((x nat) (y nat))
(al x (al y (im (el x A) (im (el y A) (eq x y))))))

(local theorem subsneqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (iff (subsn _A1) (subsn _A2)))
((x nat) (y nat))
(:conv (im _G (iff (subsn _A1) (subsn _A2)))
  (im
    _G
    (iff
      (:unfold subsn (_A1) (x y)
        (al x (al y (im (el x _A1) (im (el y _A1) (eq x y))))))
      (:unfold subsn (_A2) (x y)
        (al x (al y (im (el x _A2) (im (el y _A2) (eq x y))))))))
  (aleqd (_G x (al y (im (el x _A1) (im (el y _A1) (eq x y)))) (al y (im (el x _A2) (im (el y _A2) (eq x y)))))
    (aleqd (_G y (im (el x _A1) (im (el y _A1) (eq x y))) (im (el x _A2) (im (el y _A2) (eq x y))))
      (imeqd (_G (el x _A1) (el x _A2) (im (el y _A1) (eq x y)) (im (el y _A2) (eq x y)))
        (eleqd (_G x x _A1 _A2)
          (eqidd (_G x))
          _Ah)
        (imeqd (_G (el y _A1) (el y _A2) (eq x y) (eq x y))
          (eleqd (_G y y _A1 _A2)
            (eqidd (_G y))
            _Ah)
          (biidd (_G (eq x y)))))))))

(local theorem subsneq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (iff (subsn _A1) (subsn _A2)))
()
(subsneqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem subsni ((A set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h (im G (subsn A)))
   (h1 (im G (el a A)))
   (h2 (im G (el b A))))
  (im G (eq a b))
((x nat) (y nat))
(:let H1 (anlr (G (eq x a) (eq y b)))
(:let H2 (anr ((an G (eq x a)) (eq y b)))
(mpd (G (el b A) (eq a b))
  h2
  (mpd (G (el a A) (im (el b A) (eq a b)))
    h1
    (mpd (G (subsn A) (im (el a A) (im (el b A) (eq a b))))
      h
      (:conv (im G (im (subsn A) (im (el a A) (im (el b A) (eq a b)))))
        (im
          G
          (im
            (:unfold subsn (A) (x y)
              (al x (al y (im (el x A) (im (el y A) (eq x y))))))
            (im (el a A) (im (el b A) (eq a b)))))
        (ealde ((im (el a A) (im (el b A) (eq a b))) x G a (al y (im (el x A) (im (el y A) (eq x y)))))
          (ealde ((im (el a A) (im (el b A) (eq a b))) y (an G (eq x a)) b (im (el x A) (im (el y A) (eq x y))))
            (bi1d ((an (an G (eq x a)) (eq y b)) (im (el x A) (im (el y A) (eq x y))) (im (el a A) (im (el b A) (eq a b))))
              (imeqd ((an (an G (eq x a)) (eq y b)) (el x A) (el a A) (im (el y A) (eq x y)) (im (el b A) (eq a b)))
                (eleq1d (A (an (an G (eq x a)) (eq y b)) x a)
                  H1)
                (imeqd ((an (an G (eq x a)) (eq y b)) (el y A) (el b A) (eq x y) (eq a b))
                  (eleq1d (A (an (an G (eq x a)) (eq y b)) y b)
                    H2)
                  (eqeqd ((an (an G (eq x a)) (eq y b)) x a y b)
                    H1
                    H2)))))))))))))

(local theorem subsnss ((A set ()) (B set ())) ()
  (im (subset A B) (im (subsn B) (subsn A)))
((x nat) (y nat))
(:conv (im (subset A B) (im (subsn B) (subsn A)))
  (im
    (subset A B)
    (im
      (:unfold subsn (B) (x y)
        (al x (al y (im (el x B) (im (el y B) (eq x y))))))
      (:unfold subsn (A) (x y)
        (al x (al y (im (el x A) (im (el y A) (eq x y))))))))
  (alimd (x (subset A B) (al y (im (el x B) (im (el y B) (eq x y)))) (al y (im (el x A) (im (el y A) (eq x y)))))
    (alimd (y (subset A B) (im (el x B) (im (el y B) (eq x y))) (im (el x A) (im (el y A) (eq x y))))
      (imimd ((subset A B) (el x A) (el x B) (im (el y B) (eq x y)) (im (el y A) (eq x y)))
        (ssel (A B x))
        (imim1d ((subset A B) (el y A) (el y B) (eq x y))
          (ssel (A B y))))))))

(local theorem subsnsn2 ((a nat ()) (x nat)) ()
  (subsn (ab x (eq x a)))
((u nat) (v nat))
(:conv (subsn (ab x (eq x a)))
  (:unfold subsn ((ab x (eq x a))) (u v)
    (al u (al v (im (el u (ab x (eq x a))) (im (el v (ab x (eq x a))) (eq u v))))))
  (ax_gen (u (al v (im (el u (ab x (eq x a))) (im (el v (ab x (eq x a))) (eq u v)))))
    (ax_gen (v (im (el u (ab x (eq x a))) (im (el v (ab x (eq x a))) (eq u v))))
      (exp ((el u (ab x (eq x a))) (el v (ab x (eq x a))) (eq u v))
        (eqtr4d ((an (el u (ab x (eq x a))) (el v (ab x (eq x a)))) u a v)
          (sylib ((an (el u (ab x (eq x a))) (el v (ab x (eq x a)))) (el u (ab x (eq x a))) (eq u a))
            (elabe (x u (eq x a) (eq u a))
              (eqeq1 (x u a)))
            (anl ((el u (ab x (eq x a))) (el v (ab x (eq x a))))))
          (sylib ((an (el u (ab x (eq x a))) (el v (ab x (eq x a)))) (el v (ab x (eq x a))) (eq v a))
            (elabe (x v (eq x a) (eq v a))
              (eqeq1 (x v a)))
            (anr ((el u (ab x (eq x a))) (el v (ab x (eq x a))))))))))))

(local theorem eqsubsnd ((A set ()) (G wff ()) (a nat ()) (x nat))
  ((h (im G (im (el x A) (eq x a)))))
  (im G (subsn A))
()
(sylc (G (subset A (ab x (eq x a))) (subsn (ab x (eq x a))) (subsn A))
  (subsnss (A (ab x (eq x a))))
  (sylib (G (al x (im (el x A) (eq x a))) (subset A (ab x (eq x a))))
    (ssab2 (A x (eq x a)))
    (iald (x G (im (el x A) (eq x a)))
      h))
  (a1i (G (subsn (ab x (eq x a))))
    (subsnsn2 (a x)))))

(local theorem eqsubsnabd ((G wff ()) (a nat ()) (x nat) (p wff (x)))
  ((h (im G (im p (eq x a)))))
  (im G (subsn (ab x p)))
()
(sylc (G (subset (ab x p) (ab x (eq x a))) (subsn (ab x (eq x a))) (subsn (ab x p)))
  (subsnss ((ab x p) (ab x (eq x a))))
  (ssabd (G x p (eq x a))
    h)
  (a1i (G (subsn (ab x (eq x a))))
    (subsnsn2 (a x)))))

(local theorem subsnthe ((A set ()) (a nat ())) ()
  (im (subsn A) (im (el a A) (eq (the A) a)))
((x1 nat))
(exp ((subsn A) (el a A) (eq (the A) a))
  (eqthed (A (an (subsn A) (el a A)) a x1)
    (ibida ((an (subsn A) (el a A)) (el x1 A) (eq x1 a))
      (subsni (A (an (an (subsn A) (el a A)) (el x1 A)) x1 a)
        (anll ((subsn A) (el a A) (el x1 A)))
        (anr ((an (subsn A) (el a A)) (el x1 A)))
        (anlr ((subsn A) (el a A) (el x1 A))))
      (mpbird ((an (an (subsn A) (el a A)) (eq x1 a)) (el a A) (el x1 A))
        (eleq1d (A (an (an (subsn A) (el a A)) (eq x1 a)) x1 a)
          (anr ((an (subsn A) (el a A)) (eq x1 a))))
        (anlr ((subsn A) (el a A) (eq x1 a))))))))

(local theorem subsnex ((A set ()) (a nat) (x nat)) ()
  (iff (subsn A) (ex a (al x (im (el x A) (eq x a)))))
((x1 nat))
(:let H1 (id ((eq x x1)))
(ibii ((subsn A) (ex a (al x (im (el x A) (eq x a)))))
  (syl ((subsn A) (al x (im (el x A) (eq x (the A)))) (ex a (al x (im (el x A) (eq x a)))))
    (iexe (a (the A) (al x (im (el x A) (eq x a))) (al x (im (el x A) (eq x (the A)))))
      (aleqd ((eq a (the A)) x (im (el x A) (eq x a)) (im (el x A) (eq x (the A))))
        (imeqd ((eq a (the A)) (el x A) (el x A) (eq x a) (eq x (the A)))
          (biidd ((eq a (the A)) (el x A)))
          (eqeqd ((eq a (the A)) x x a (the A))
            (eqidd ((eq a (the A)) x))
            (id ((eq a (the A))))))))
    (iald (x (subsn A) (im (el x A) (eq x (the A))))
      (syl6 ((subsn A) (el x A) (eq (the A) x) (eq x (the A)))
        (eqcom ((the A) x))
        (subsnthe (A x)))))
  (eex (a (al x (im (el x A) (eq x a))) (subsn A))
    (eqsubsnd (A (al x (im (el x A) (eq x a))) a x1)
      (eale (x x1 (im (el x A) (eq x a)) (im (el x1 A) (eq x1 a)))
        (imeqd ((eq x x1) (el x A) (el x1 A) (eq x a) (eq x1 a))
          (eleqd ((eq x x1) x x1 A A)
            H1
            (eqsidd ((eq x x1) A)))
          (eqeqd ((eq x x1) x x1 a a)
            H1
            (eqidd ((eq x x1) a))))))))))

(local theorem subsntheo ((A set ()) (a nat ())) ()
  (im (subsn A) (iff (eq (theo A) (suc a)) (el a A)))
((x nat))
(syl5bbr ((subsn A) (eq (theo A) (suc a)) (eqs A (ab x (eq x a))) (el a A))
  (theoid (x A a))
  (ibid ((subsn A) (eqs A (ab x (eq x a))) (el a A))
    (a1i ((subsn A) (im (eqs A (ab x (eq x a))) (el a A)))
      (mpbiri ((eqs A (ab x (eq x a))) (el a (ab x (eq x a))) (el a A))
        (mpbir ((eq a a) (el a (ab x (eq x a))))
          (elabe (x a (eq x a) (eq a a))
            (eqeq1 (x a a)))
          (eqid (a)))
        (eleq2 (A (ab x (eq x a)) a))))
    (exp ((subsn A) (el a A) (eqs A (ab x (eq x a))))
      (eqab2d (A (an (subsn A) (el a A)) x (eq x a))
        (ibida ((an (subsn A) (el a A)) (el x A) (eq x a))
          (subsni (A (an (an (subsn A) (el a A)) (el x A)) x a)
            (anll ((subsn A) (el a A) (el x A)))
            (anr ((an (subsn A) (el a A)) (el x A)))
            (anlr ((subsn A) (el a A) (el x A))))
          (mpbird ((an (an (subsn A) (el a A)) (eq x a)) (el a A) (el x A))
            (eleq1d (A (an (an (subsn A) (el a A)) (eq x a)) x a)
              (anr ((an (subsn A) (el a A)) (eq x a))))
            (anlr ((subsn A) (el a A) (eq x a))))))))))

(def sbn ((a nat ()) (x nat) (b nat (x))) (nat ())
((y nat))
(the (ab y (sb a x (eq y b)))))

(local theorem sbneqd ((_G wff ()) (x nat) (_a1 nat (x)) (_a2 nat (x)) (_b1 nat (x)) (_b2 nat (x)))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (sbn _a1 x _b1) (sbn _a2 x _b2)))
((y nat))
(:conv (im _G (eq (sbn _a1 x _b1) (sbn _a2 x _b2)))
  (im
    _G
    (eq
      (:unfold sbn (_a1 x _b1) (y)
        (the (ab y (sb _a1 x (eq y _b1)))))
      (:unfold sbn (_a2 x _b2) (y)
        (the (ab y (sb _a2 x (eq y _b2)))))))
  (theeqd (_G (ab y (sb _a1 x (eq y _b1))) (ab y (sb _a2 x (eq y _b2))))
    (abeqd (_G y (sb _a1 x (eq y _b1)) (sb _a2 x (eq y _b2)))
      (sbeqd (_G x _a1 _a2 (eq y _b1) (eq y _b2))
        _ah
        (eqeqd (_G y y _b1 _b2)
          (eqidd (_G y))
          _bh))))))

(local theorem sbnq ((x nat) (a nat ()) (b nat (x))) ()
  (im (eq x a) (eq b (sbn a x b)))
((y nat))
(eqcomd ((eq x a) (sbn a x b) b)
  (:conv (im (eq x a) (eq (sbn a x b) b))
    (im
      (eq x a)
      (eq
        (:unfold sbn (a x b) (y)
          (the (ab y (sb a x (eq y b)))))
        b))
    (eqtheabd ((eq x a) b y (sb a x (eq y b)))
      (bicomd ((eq x a) (eq y b) (sb a x (eq y b)))
        (sbq (x a (eq y b))))))))

(local theorem nfsbn1h ((x nat) (a nat (x)) (b nat (x)))
  ((h (nfn x a)))
  (nfn x (sbn a x b))
((y nat))
(:conv (nfn x (sbn a x b))
  (nfn
    x
    (:unfold sbn (a x b) (y)
      (the (ab y (sb a x (eq y b))))))
  (nfthe (x (ab y (sb a x (eq y b))))
    (nfab (x y (sb a x (eq y b)))
      (nfsb1h (x a (eq y b))
        h)))))

(local theorem nfsbn1 ((x nat) (a nat ()) (b nat (x))) ()
  (nfn x (sbn a x b))
()
(nfsbn1h (x a b)
  (nfnv (a x))))

(local theorem nfsbnh ((x nat) (y nat) (a nat (x y)) (b nat (x y)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (sbn a y b))
((z nat))
(:conv (nfn x (sbn a y b))
  (nfn
    x
    (:unfold sbn (a y b) (z)
      (the (ab z (sb a y (eq z b))))))
  (nfthe (x (ab z (sb a y (eq z b))))
    (nfab (x z (sb a y (eq z b)))
      (nfsbh (x y a (eq z b))
        h1
        (nfeq2 (z x b)
          h2))))))

(local theorem nfsbn ((x nat) (y nat) (a nat ()) (b nat (x y)))
  ((h (nfn x b)))
  (nfn x (sbn a y b))
()
(nfsbnh (x y a b)
  (nfnv (a x))
  h))

(local theorem sbneq2d ((x nat) (G wff ()) (a nat (x)) (b nat (x)) (c nat (x)))
  ((h (im G (eq b c))))
  (im G (eq (sbn a x b) (sbn a x c)))
((y nat) (z nat))
(:conv (im G (eq (sbn a x b) (sbn a x c)))
  (im
    G
    (eq
      (:unfold sbn (a x b) (y)
        (the (ab y (sb a x (eq y b)))))
      (:unfold sbn (a x c) (z)
        (the (ab z (sb a x (eq z c)))))))
  (theeqd (G (ab y (sb a x (eq y b))) (ab z (sb a x (eq z c))))
    (cbvabd (y z G (sb a x (eq y b)) (sb a x (eq z c)))
      (sbeq2d ((an G (eq y z)) x a (eq y b) (eq z c))
        (eqeqd ((an G (eq y z)) y z b c)
          (anr (G (eq y z)))
          (anwl (G (eq y z) (eq b c))
            h)))))))

(local theorem sbneht ((x nat) (a nat ()) (b nat (x)) (c nat (x)))
  ((h (nfn x c)))
  (im (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
((y nat))
(:conv (im (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
  (im
    (al x (im (eq x a) (eq b c)))
    (eq
      (:unfold sbn (a x b) (y)
        (the (ab y (sb a x (eq y b)))))
      c))
  (eqtheabd ((al x (im (eq x a) (eq b c))) c y (sb a x (eq y b)))
    (syl ((al x (im (eq x a) (eq b c))) (al x (im (eq x a) (iff (eq y b) (eq y c)))) (iff (sb a x (eq y b)) (eq y c)))
      (sbeht (x a (eq y b) (eq y c))
        (nfeq2 (y x c)
          h))
      (alimi (x (im (eq x a) (eq b c)) (im (eq x a) (iff (eq y b) (eq y c))))
        (ax_mp ((im (eq b c) (iff (eq y b) (eq y c))) (im (im (eq x a) (eq b c)) (im (eq x a) (iff (eq y b) (eq y c)))))
          (imim2 ((eq x a) (eq b c) (iff (eq y b) (eq y c))))
          (eqeq2 (y b c))))))))

(local theorem sbneh ((x nat) (a nat ()) (b nat (x)) (c nat (x)))
  ((h (nfn x c))
   (e (im (eq x a) (eq b c))))
  (eq (sbn a x b) c)
()
(ax_mp ((al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
  (sbneht (x a b c)
    h)
  (ax_gen (x (im (eq x a) (eq b c)))
    e)))

(local theorem sbnet ((x nat) (a nat ()) (b nat (x)) (c nat ())) ()
  (im (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
()
(sbneht (x a b c)
  (nfnv (c x))))

(local theorem sbne ((x nat) (a nat ()) (b nat (x)) (c nat ()))
  ((e (im (eq x a) (eq b c))))
  (eq (sbn a x b) c)
()
(sbneh (x a b c)
  (nfnv (c x))
  e))

(local theorem sbned ((G wff ()) (x nat) (a nat ()) (b nat (x)) (c nat ()))
  ((e (im (an G (eq x a)) (eq b c))))
  (im G (eq (sbn a x b) c))
()
(syl (G (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
  (sbnet (x a b c))
  (ialda (x G (eq x a) (eq b c))
    e)))

(local theorem sbneq1 ((x nat) (a nat (x)) (b nat (x)) (c nat (x))) ()
  (im (eq a b) (eq (sbn a x c) (sbn b x c)))
((y nat))
(:conv (im (eq a b) (eq (sbn a x c) (sbn b x c)))
  (im
    (eq a b)
    (eq
      (:unfold sbn (a x c) (y)
        (the (ab y (sb a x (eq y c)))))
      (:unfold sbn (b x c) (y)
        (the (ab y (sb b x (eq y c)))))))
  (theeqd ((eq a b) (ab y (sb a x (eq y c))) (ab y (sb b x (eq y c))))
    (abeqd ((eq a b) y (sb a x (eq y c)) (sb b x (eq y c)))
      (sbeq1 (x a b (eq y c)))))))

(local theorem sbneq1d ((x nat) (G wff (x)) (a nat (x)) (b nat (x)) (c nat (x)))
  ((h (im G (eq a b))))
  (im G (eq (sbn a x c) (sbn b x c)))
()
(syl (G (eq a b) (eq (sbn a x c) (sbn b x c)))
  (sbneq1 (x a b c))
  h))

(local theorem sbnid ((x nat) (a nat (x))) ()
  (eq (sbn x x a) a)
((y nat))
(trud ((eq (sbn x x a) a))
  (:conv (im (tru) (eq (sbn x x a) a))
    (im
      (tru)
      (eq
        (:unfold sbn (x x a) (y)
          (the (ab y (sb x x (eq y a)))))
        a))
    (eqtheabd ((tru) a y (sb x x (eq y a)))
      (a1i ((tru) (iff (sb x x (eq y a)) (eq y a)))
        (sbid (x (eq y a))))))))

(local theorem nfnlem ((x nat) (y nat) (b nat (y)) (a nat (x)) (c nat (x)))
  ((e (im (eq y a) (eq b c)))
   (h (nfn x a)))
  (nfn x c)
()
(nfnx (x c (sbn a y b))
  (ax_mp ((eq (sbn a y b) c) (eq c (sbn a y b)))
    (eqcom ((sbn a y b) c))
    (sbne (y a b c)
      e))
  (nfsbnh (x y a b)
    h
    (nfnv (b x)))))

(local theorem nfnlem2 ((x nat) (y nat) (z nat) (c nat (y z)) (a nat (x)) (b nat (x)) (d nat (x)))
  ((e (im (an (eq y a) (eq z b)) (eq c d)))
   (h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x d)
()
(nfnx (x d (sbn a y (sbn b z c)))
  (ax_mp ((eq (sbn a y (sbn b z c)) d) (eq d (sbn a y (sbn b z c))))
    (eqcom ((sbn a y (sbn b z c)) d))
    (sbne (y a (sbn b z c) d)
      (sbned ((eq y a) z b c d)
        e)))
  (nfsbnh (x y a (sbn b z c))
    h1
    (nfsbnh (x z b c)
      h2
      (nfnv (c x))))))

(local theorem nfsuc ((x nat) (a nat (x)))
  ((h (nfn x a)))
  (nfn x (suc a))
((y nat))
(nfnlem (x y (suc y) a (suc a))
  (suceq (y a))
  h))

(term add ((a nat ()) (b nat ())) (nat ()))

(term mul ((a nat ()) (b nat ())) (nat ()))

(axiom addeq ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (eq a b) (im (eq c d) (eq (add a c) (add b d)))))

(axiom muleq ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (eq a b) (im (eq c d) (eq (mul a c) (mul b d)))))

(axiom add0 ((a nat ())) ()
  (eq (add a (d0)) a))

(axiom addS ((a nat ()) (b nat ())) ()
  (eq (add a (suc b)) (suc (add a b))))

(axiom mul0 ((a nat ())) ()
  (eq (mul a (d0)) (d0)))

(axiom mulS ((a nat ()) (b nat ())) ()
  (eq (mul a (suc b)) (add (mul a b) a)))

(local theorem addeqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (eq (add a c) (add b d)))
()
(sylc (G (eq a b) (eq c d) (eq (add a c) (add b d)))
  (addeq (a b c d))
  h1
  h2))

(local theorem muleqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (eq (mul a c) (mul b d)))
()
(sylc (G (eq a b) (eq c d) (eq (mul a c) (mul b d)))
  (muleq (a b c d))
  h1
  h2))

(local theorem addeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (add _a1 b) (add _a2 b)))
()
(addeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem addeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (add _a1 b) (add _a2 b)))
()
(addeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem addeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (add a _b1) (add a _b2)))
()
(addeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem addeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (add a _b1) (add a _b2)))
()
(addeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem muleq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (mul _a1 b) (mul _a2 b)))
()
(muleqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem muleq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (mul _a1 b) (mul _a2 b)))
()
(muleq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem muleq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (mul a _b1) (mul a _b2)))
()
(muleqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem muleq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (mul a _b1) (mul a _b2)))
()
(muleq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem nfadd ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (add a b))
((y nat) (z nat))
(nfnlem2 (x y z (add y z) a b (add a b))
  (addeqd ((an (eq y a) (eq z b)) y a z b)
    (anl ((eq y a) (eq z b)))
    (anr ((eq y a) (eq z b))))
  h1
  h2))

(local theorem nfmul ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (mul a b))
((y nat) (z nat))
(nfnlem2 (x y z (mul y z) a b (mul a b))
  (muleqd ((an (eq y a) (eq z b)) y a z b)
    (anl ((eq y a) (eq z b)))
    (anr ((eq y a) (eq z b))))
  h1
  h2))

(local theorem add02 ((a nat ())) ()
  (eq (add a (d0)) a)
()
(add0 (a)))

(local theorem add01 ((a nat ())) ()
  (eq (add (d0) a) a)
((x nat) (y nat))
(ind (x y a (eq (add (d0) x) x) (eq (add (d0) (d0)) (d0)) (eq (add (d0) a) a) (eq (add (d0) y) y) (eq (add (d0) (suc y)) (suc y)))
  (eqeqd ((eq x a) (add (d0) x) (add (d0) a) x a)
    (addeq2 ((d0) x a))
    (id ((eq x a))))
  (eqeqd ((eq x (d0)) (add (d0) x) (add (d0) (d0)) x (d0))
    (addeq2 ((d0) x (d0)))
    (id ((eq x (d0)))))
  (eqeqd ((eq x y) (add (d0) x) (add (d0) y) x y)
    (addeq2 ((d0) x y))
    (id ((eq x y))))
  (eqeqd ((eq x (suc y)) (add (d0) x) (add (d0) (suc y)) x (suc y))
    (addeq2 ((d0) x (suc y)))
    (id ((eq x (suc y)))))
  (add0 ((d0)))
  (syl5eq ((eq (add (d0) y) y) (add (d0) (suc y)) (suc (add (d0) y)) (suc y))
    (addS ((d0) y))
    (suceq ((add (d0) y) y)))))

(local theorem addS2 ((a nat ()) (b nat ())) ()
  (eq (add a (suc b)) (suc (add a b)))
()
(addS (a b)))

(local theorem addS1 ((a nat ()) (b nat ())) ()
  (eq (add (suc a) b) (suc (add a b)))
((x nat) (y nat))
(ind (x y b (eq (add (suc a) x) (suc (add a x))) (eq (add (suc a) (d0)) (suc (add a (d0)))) (eq (add (suc a) b) (suc (add a b))) (eq (add (suc a) y) (suc (add a y))) (eq (add (suc a) (suc y)) (suc (add a (suc y)))))
  (eqeqd ((eq x b) (add (suc a) x) (add (suc a) b) (suc (add a x)) (suc (add a b)))
    (addeq2 ((suc a) x b))
    (suceqd ((eq x b) (add a x) (add a b))
      (addeq2 (a x b))))
  (eqeqd ((eq x (d0)) (add (suc a) x) (add (suc a) (d0)) (suc (add a x)) (suc (add a (d0))))
    (addeq2 ((suc a) x (d0)))
    (suceqd ((eq x (d0)) (add a x) (add a (d0)))
      (addeq2 (a x (d0)))))
  (eqeqd ((eq x y) (add (suc a) x) (add (suc a) y) (suc (add a x)) (suc (add a y)))
    (addeq2 ((suc a) x y))
    (suceqd ((eq x y) (add a x) (add a y))
      (addeq2 (a x y))))
  (eqeqd ((eq x (suc y)) (add (suc a) x) (add (suc a) (suc y)) (suc (add a x)) (suc (add a (suc y))))
    (addeq2 ((suc a) x (suc y)))
    (suceqd ((eq x (suc y)) (add a x) (add a (suc y)))
      (addeq2 (a x (suc y)))))
  (ax_mp ((eq (suc (add a (d0))) (suc a)) (eq (add (suc a) (d0)) (suc (add a (d0)))))
    (ax_mp ((eq (add (suc a) (d0)) (suc a)) (im (eq (suc (add a (d0))) (suc a)) (eq (add (suc a) (d0)) (suc (add a (d0))))))
      (eqtr4 ((add (suc a) (d0)) (suc a) (suc (add a (d0)))))
      (add0 ((suc a))))
    (ax_mp ((eq (add a (d0)) a) (eq (suc (add a (d0))) (suc a)))
      (suceq ((add a (d0)) a))
      (add0 (a))))
  (syl5eq ((eq (add (suc a) y) (suc (add a y))) (add (suc a) (suc y)) (suc (add (suc a) y)) (suc (add a (suc y))))
    (addS ((suc a) y))
    (suceqd ((eq (add (suc a) y) (suc (add a y))) (add (suc a) y) (add a (suc y)))
      (syl6eqr ((eq (add (suc a) y) (suc (add a y))) (add (suc a) y) (suc (add a y)) (add a (suc y)))
        (addS (a y))
        (id ((eq (add (suc a) y) (suc (add a y))))))))))

(local theorem addSass ((a nat ()) (b nat ())) ()
  (eq (add (suc a) b) (add a (suc b)))
()
(ax_mp ((eq (add a (suc b)) (suc (add a b))) (eq (add (suc a) b) (add a (suc b))))
  (ax_mp ((eq (add (suc a) b) (suc (add a b))) (im (eq (add a (suc b)) (suc (add a b))) (eq (add (suc a) b) (add a (suc b)))))
    (eqtr4 ((add (suc a) b) (suc (add a b)) (add a (suc b))))
    (addS1 (a b)))
  (addS2 (a b))))

(local theorem add12 ((a nat ())) ()
  (eq (add a (d1)) (suc a))
()
(ax_mp ((eq (suc (add a (d0))) (suc a)) (eq (add a (d1)) (suc a)))
  (ax_mp ((eq (add a (d1)) (suc (add a (d0)))) (im (eq (suc (add a (d0))) (suc a)) (eq (add a (d1)) (suc a))))
    (eqtr ((add a (d1)) (suc (add a (d0))) (suc a)))
    (:conv (eq (add a (d1)) (suc (add a (d0))))
      (eq
        (add
          a
          (:unfold d1 () ()
            (suc (d0))))
        (suc (add a (d0))))
      (addS (a (d0)))))
  (ax_mp ((eq (add a (d0)) a) (eq (suc (add a (d0))) (suc a)))
    (suceq ((add a (d0)) a))
    (add0 (a)))))

(local theorem add11 ((a nat ())) ()
  (eq (add (d1) a) (suc a))
()
(ax_mp ((eq (suc (add (d0) a)) (suc a)) (eq (add (d1) a) (suc a)))
  (ax_mp ((eq (add (d1) a) (suc (add (d0) a))) (im (eq (suc (add (d0) a)) (suc a)) (eq (add (d1) a) (suc a))))
    (eqtr ((add (d1) a) (suc (add (d0) a)) (suc a)))
    (:conv (eq (add (d1) a) (suc (add (d0) a)))
      (eq
        (add
          (:unfold d1 () ()
            (suc (d0)))
          a)
        (suc (add (d0) a)))
      (addS1 ((d0) a))))
  (ax_mp ((eq (add (d0) a) a) (eq (suc (add (d0) a)) (suc a)))
    (suceq ((add (d0) a) a))
    (add01 (a)))))

(local theorem add22 ((a nat ())) ()
  (eq (add a (d2)) (suc (suc a)))
()
(ax_mp ((eq (suc (add a (d1))) (suc (suc a))) (eq (add a (d2)) (suc (suc a))))
  (ax_mp ((eq (add a (d2)) (suc (add a (d1)))) (im (eq (suc (add a (d1))) (suc (suc a))) (eq (add a (d2)) (suc (suc a)))))
    (eqtr ((add a (d2)) (suc (add a (d1))) (suc (suc a))))
    (:conv (eq (add a (d2)) (suc (add a (d1))))
      (eq
        (add
          a
          (:unfold d2 () ()
            (suc (d1))))
        (suc (add a (d1))))
      (addS (a (d1)))))
  (ax_mp ((eq (add a (d1)) (suc a)) (eq (suc (add a (d1))) (suc (suc a))))
    (suceq ((add a (d1)) (suc a)))
    (add12 (a)))))

(local theorem addcom ((a nat ()) (b nat ())) ()
  (eq (add a b) (add b a))
((x nat) (y nat))
(ind (x y b (eq (add a x) (add x a)) (eq (add a (d0)) (add (d0) a)) (eq (add a b) (add b a)) (eq (add a y) (add y a)) (eq (add a (suc y)) (add (suc y) a)))
  (eqeqd ((eq x b) (add a x) (add a b) (add x a) (add b a))
    (addeq2 (a x b))
    (addeq1 (x b a)))
  (eqeqd ((eq x (d0)) (add a x) (add a (d0)) (add x a) (add (d0) a))
    (addeq2 (a x (d0)))
    (addeq1 (x (d0) a)))
  (eqeqd ((eq x y) (add a x) (add a y) (add x a) (add y a))
    (addeq2 (a x y))
    (addeq1 (x y a)))
  (eqeqd ((eq x (suc y)) (add a x) (add a (suc y)) (add x a) (add (suc y) a))
    (addeq2 (a x (suc y)))
    (addeq1 (x (suc y) a)))
  (ax_mp ((eq (add (d0) a) a) (eq (add a (d0)) (add (d0) a)))
    (ax_mp ((eq (add a (d0)) a) (im (eq (add (d0) a) a) (eq (add a (d0)) (add (d0) a))))
      (eqtr4 ((add a (d0)) a (add (d0) a)))
      (add0 (a)))
    (add01 (a)))
  (eqtr4g ((eq (add a y) (add y a)) (suc (add a y)) (suc (add y a)) (add a (suc y)) (add (suc y) a))
    (addS (a y))
    (addS1 (y a))
    (suceq ((add a y) (add y a))))))

(local theorem addass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (add a b) c) (add a (add b c)))
((x nat) (y nat))
(ind (x y c (eq (add (add a b) x) (add a (add b x))) (eq (add (add a b) (d0)) (add a (add b (d0)))) (eq (add (add a b) c) (add a (add b c))) (eq (add (add a b) y) (add a (add b y))) (eq (add (add a b) (suc y)) (add a (add b (suc y)))))
  (eqeqd ((eq x c) (add (add a b) x) (add (add a b) c) (add a (add b x)) (add a (add b c)))
    (addeq2 ((add a b) x c))
    (addeq2d ((eq x c) a (add b x) (add b c))
      (addeq2 (b x c))))
  (eqeqd ((eq x (d0)) (add (add a b) x) (add (add a b) (d0)) (add a (add b x)) (add a (add b (d0))))
    (addeq2 ((add a b) x (d0)))
    (addeq2d ((eq x (d0)) a (add b x) (add b (d0)))
      (addeq2 (b x (d0)))))
  (eqeqd ((eq x y) (add (add a b) x) (add (add a b) y) (add a (add b x)) (add a (add b y)))
    (addeq2 ((add a b) x y))
    (addeq2d ((eq x y) a (add b x) (add b y))
      (addeq2 (b x y))))
  (eqeqd ((eq x (suc y)) (add (add a b) x) (add (add a b) (suc y)) (add a (add b x)) (add a (add b (suc y))))
    (addeq2 ((add a b) x (suc y)))
    (addeq2d ((eq x (suc y)) a (add b x) (add b (suc y)))
      (addeq2 (b x (suc y)))))
  (ax_mp ((eq (add a (add b (d0))) (add a b)) (eq (add (add a b) (d0)) (add a (add b (d0)))))
    (ax_mp ((eq (add (add a b) (d0)) (add a b)) (im (eq (add a (add b (d0))) (add a b)) (eq (add (add a b) (d0)) (add a (add b (d0))))))
      (eqtr4 ((add (add a b) (d0)) (add a b) (add a (add b (d0)))))
      (add0 ((add a b))))
    (ax_mp ((eq (add b (d0)) b) (eq (add a (add b (d0))) (add a b)))
      (addeq2 (a (add b (d0)) b))
      (add0 (b))))
  (eqtr4g ((eq (add (add a b) y) (add a (add b y))) (suc (add (add a b) y)) (suc (add a (add b y))) (add (add a b) (suc y)) (add a (add b (suc y))))
    (addS ((add a b) y))
    (ax_mp ((eq (add a (suc (add b y))) (suc (add a (add b y)))) (eq (add a (add b (suc y))) (suc (add a (add b y)))))
      (ax_mp ((eq (add a (add b (suc y))) (add a (suc (add b y)))) (im (eq (add a (suc (add b y))) (suc (add a (add b y)))) (eq (add a (add b (suc y))) (suc (add a (add b y))))))
        (eqtr ((add a (add b (suc y))) (add a (suc (add b y))) (suc (add a (add b y)))))
        (ax_mp ((eq (add b (suc y)) (suc (add b y))) (eq (add a (add b (suc y))) (add a (suc (add b y)))))
          (addeq2 (a (add b (suc y)) (suc (add b y))))
          (addS (b y))))
      (addS (a (add b y))))
    (suceq ((add (add a b) y) (add a (add b y)))))))

(local theorem addlass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add a (add b c)) (add b (add a c)))
()
(ax_mp ((eq (add (add a b) c) (add b (add a c))) (eq (add a (add b c)) (add b (add a c))))
  (ax_mp ((eq (add (add a b) c) (add a (add b c))) (im (eq (add (add a b) c) (add b (add a c))) (eq (add a (add b c)) (add b (add a c)))))
    (eqtr3 ((add a (add b c)) (add (add a b) c) (add b (add a c))))
    (addass (a b c)))
  (ax_mp ((eq (add (add b a) c) (add b (add a c))) (eq (add (add a b) c) (add b (add a c))))
    (ax_mp ((eq (add (add a b) c) (add (add b a) c)) (im (eq (add (add b a) c) (add b (add a c))) (eq (add (add a b) c) (add b (add a c)))))
      (eqtr ((add (add a b) c) (add (add b a) c) (add b (add a c))))
      (ax_mp ((eq (add a b) (add b a)) (eq (add (add a b) c) (add (add b a) c)))
        (addeq1 ((add a b) (add b a) c))
        (addcom (a b))))
    (addass (b a c)))))

(local theorem addrass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (add a b) c) (add (add a c) b))
()
(ax_mp ((eq (add a (add b c)) (add (add a c) b)) (eq (add (add a b) c) (add (add a c) b)))
  (ax_mp ((eq (add (add a b) c) (add a (add b c))) (im (eq (add a (add b c)) (add (add a c) b)) (eq (add (add a b) c) (add (add a c) b))))
    (eqtr ((add (add a b) c) (add a (add b c)) (add (add a c) b)))
    (addass (a b c)))
  (ax_mp ((eq (add (add a c) b) (add a (add c b))) (eq (add a (add b c)) (add (add a c) b)))
    (ax_mp ((eq (add a (add b c)) (add a (add c b))) (im (eq (add (add a c) b) (add a (add c b))) (eq (add a (add b c)) (add (add a c) b))))
      (eqtr4 ((add a (add b c)) (add a (add c b)) (add (add a c) b)))
      (ax_mp ((eq (add b c) (add c b)) (eq (add a (add b c)) (add a (add c b))))
        (addeq2 (a (add b c) (add c b)))
        (addcom (b c))))
    (addass (a c b)))))

(local theorem add4 ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (add (add a b) (add c d)) (add (add a c) (add b d)))
()
(ax_mp ((eq (add (add (add a b) c) d) (add (add a c) (add b d))) (eq (add (add a b) (add c d)) (add (add a c) (add b d))))
  (ax_mp ((eq (add (add (add a b) c) d) (add (add a b) (add c d))) (im (eq (add (add (add a b) c) d) (add (add a c) (add b d))) (eq (add (add a b) (add c d)) (add (add a c) (add b d)))))
    (eqtr3 ((add (add a b) (add c d)) (add (add (add a b) c) d) (add (add a c) (add b d))))
    (addass ((add a b) c d)))
  (ax_mp ((eq (add (add (add a c) b) d) (add (add a c) (add b d))) (eq (add (add (add a b) c) d) (add (add a c) (add b d))))
    (ax_mp ((eq (add (add (add a b) c) d) (add (add (add a c) b) d)) (im (eq (add (add (add a c) b) d) (add (add a c) (add b d))) (eq (add (add (add a b) c) d) (add (add a c) (add b d)))))
      (eqtr ((add (add (add a b) c) d) (add (add (add a c) b) d) (add (add a c) (add b d))))
      (ax_mp ((eq (add (add a b) c) (add (add a c) b)) (eq (add (add (add a b) c) d) (add (add (add a c) b) d)))
        (addeq1 ((add (add a b) c) (add (add a c) b) d))
        (addrass (a b c))))
    (addass ((add a c) b d)))))

(local theorem addcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (add a c) (add b c)) (eq a b))
((x nat) (y nat))
(ind (x y c (iff (eq (add a x) (add b x)) (eq a b)) (iff (eq (add a (d0)) (add b (d0))) (eq a b)) (iff (eq (add a c) (add b c)) (eq a b)) (iff (eq (add a y) (add b y)) (eq a b)) (iff (eq (add a (suc y)) (add b (suc y))) (eq a b)))
  (bieq1d ((eq x c) (eq (add a x) (add b x)) (eq (add a c) (add b c)) (eq a b))
    (eqeqd ((eq x c) (add a x) (add a c) (add b x) (add b c))
      (addeq2 (a x c))
      (addeq2 (b x c))))
  (bieq1d ((eq x (d0)) (eq (add a x) (add b x)) (eq (add a (d0)) (add b (d0))) (eq a b))
    (eqeqd ((eq x (d0)) (add a x) (add a (d0)) (add b x) (add b (d0)))
      (addeq2 (a x (d0)))
      (addeq2 (b x (d0)))))
  (bieq1d ((eq x y) (eq (add a x) (add b x)) (eq (add a y) (add b y)) (eq a b))
    (eqeqd ((eq x y) (add a x) (add a y) (add b x) (add b y))
      (addeq2 (a x y))
      (addeq2 (b x y))))
  (bieq1d ((eq x (suc y)) (eq (add a x) (add b x)) (eq (add a (suc y)) (add b (suc y))) (eq a b))
    (eqeqd ((eq x (suc y)) (add a x) (add a (suc y)) (add b x) (add b (suc y)))
      (addeq2 (a x (suc y)))
      (addeq2 (b x (suc y)))))
  (ax_mp ((eq (add b (d0)) b) (iff (eq (add a (d0)) (add b (d0))) (eq a b)))
    (ax_mp ((eq (add a (d0)) a) (im (eq (add b (d0)) b) (iff (eq (add a (d0)) (add b (d0))) (eq a b))))
      (eqeq ((add a (d0)) a (add b (d0)) b))
      (add0 (a)))
    (add0 (b)))
  (syl5bb ((iff (eq (add a y) (add b y)) (eq a b)) (eq (add a (suc y)) (add b (suc y))) (eq (add a y) (add b y)) (eq a b))
    (ax_mp ((iff (eq (suc (add a y)) (suc (add b y))) (eq (add a y) (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (add a y) (add b y))))
      (ax_mp ((iff (eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y)))) (im (iff (eq (suc (add a y)) (suc (add b y))) (eq (add a y) (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (add a y) (add b y)))))
        (bitr ((eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y))) (eq (add a y) (add b y))))
        (ax_mp ((eq (add b (suc y)) (suc (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y)))))
          (ax_mp ((eq (add a (suc y)) (suc (add a y))) (im (eq (add b (suc y)) (suc (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y))))))
            (eqeq ((add a (suc y)) (suc (add a y)) (add b (suc y)) (suc (add b y))))
            (addS (a y)))
          (addS (b y))))
      (peano2 ((add a y) (add b y))))
    (id ((iff (eq (add a y) (add b y)) (eq a b)))))))

(local theorem addcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (add a b) (add a c)) (eq b c))
()
(ax_mp ((iff (eq (add b a) (add c a)) (eq b c)) (iff (eq (add a b) (add a c)) (eq b c)))
  (ax_mp ((iff (eq (add a b) (add a c)) (eq (add b a) (add c a))) (im (iff (eq (add b a) (add c a)) (eq b c)) (iff (eq (add a b) (add a c)) (eq b c))))
    (bitr ((eq (add a b) (add a c)) (eq (add b a) (add c a)) (eq b c)))
    (ax_mp ((eq (add a c) (add c a)) (iff (eq (add a b) (add a c)) (eq (add b a) (add c a))))
      (ax_mp ((eq (add a b) (add b a)) (im (eq (add a c) (add c a)) (iff (eq (add a b) (add a c)) (eq (add b a) (add c a)))))
        (eqeq ((add a b) (add b a) (add a c) (add c a)))
        (addcom (a b)))
      (addcom (a c))))
  (addcan1 (b c a))))

(local theorem mul02 ((a nat ())) ()
  (eq (mul a (d0)) (d0))
()
(mul0 (a)))

(local theorem mul01 ((a nat ())) ()
  (eq (mul (d0) a) (d0))
((x nat) (y nat))
(ind (x y a (eq (mul (d0) x) (d0)) (eq (mul (d0) (d0)) (d0)) (eq (mul (d0) a) (d0)) (eq (mul (d0) y) (d0)) (eq (mul (d0) (suc y)) (d0)))
  (eqeq1d ((eq x a) (mul (d0) x) (mul (d0) a) (d0))
    (muleq2 ((d0) x a)))
  (eqeq1d ((eq x (d0)) (mul (d0) x) (mul (d0) (d0)) (d0))
    (muleq2 ((d0) x (d0))))
  (eqeq1d ((eq x y) (mul (d0) x) (mul (d0) y) (d0))
    (muleq2 ((d0) x y)))
  (eqeq1d ((eq x (suc y)) (mul (d0) x) (mul (d0) (suc y)) (d0))
    (muleq2 ((d0) x (suc y))))
  (mul0 ((d0)))
  (syl5eq ((eq (mul (d0) y) (d0)) (mul (d0) (suc y)) (mul (d0) y) (d0))
    (ax_mp ((eq (add (mul (d0) y) (d0)) (mul (d0) y)) (eq (mul (d0) (suc y)) (mul (d0) y)))
      (ax_mp ((eq (mul (d0) (suc y)) (add (mul (d0) y) (d0))) (im (eq (add (mul (d0) y) (d0)) (mul (d0) y)) (eq (mul (d0) (suc y)) (mul (d0) y))))
        (eqtr ((mul (d0) (suc y)) (add (mul (d0) y) (d0)) (mul (d0) y)))
        (mulS ((d0) y)))
      (add0 ((mul (d0) y))))
    (id ((eq (mul (d0) y) (d0)))))))

(local theorem mulS2 ((a nat ()) (b nat ())) ()
  (eq (mul a (suc b)) (add (mul a b) a))
()
(mulS (a b)))

(local theorem mulS1 ((a nat ()) (b nat ())) ()
  (eq (mul (suc a) b) (add (mul a b) b))
((x nat) (y nat))
(ind (x y b (eq (mul (suc a) x) (add (mul a x) x)) (eq (mul (suc a) (d0)) (add (mul a (d0)) (d0))) (eq (mul (suc a) b) (add (mul a b) b)) (eq (mul (suc a) y) (add (mul a y) y)) (eq (mul (suc a) (suc y)) (add (mul a (suc y)) (suc y))))
  (eqeqd ((eq x b) (mul (suc a) x) (mul (suc a) b) (add (mul a x) x) (add (mul a b) b))
    (muleq2 ((suc a) x b))
    (addeqd ((eq x b) (mul a x) (mul a b) x b)
      (muleq2 (a x b))
      (id ((eq x b)))))
  (eqeqd ((eq x (d0)) (mul (suc a) x) (mul (suc a) (d0)) (add (mul a x) x) (add (mul a (d0)) (d0)))
    (muleq2 ((suc a) x (d0)))
    (addeqd ((eq x (d0)) (mul a x) (mul a (d0)) x (d0))
      (muleq2 (a x (d0)))
      (id ((eq x (d0))))))
  (eqeqd ((eq x y) (mul (suc a) x) (mul (suc a) y) (add (mul a x) x) (add (mul a y) y))
    (muleq2 ((suc a) x y))
    (addeqd ((eq x y) (mul a x) (mul a y) x y)
      (muleq2 (a x y))
      (id ((eq x y)))))
  (eqeqd ((eq x (suc y)) (mul (suc a) x) (mul (suc a) (suc y)) (add (mul a x) x) (add (mul a (suc y)) (suc y)))
    (muleq2 ((suc a) x (suc y)))
    (addeqd ((eq x (suc y)) (mul a x) (mul a (suc y)) x (suc y))
      (muleq2 (a x (suc y)))
      (id ((eq x (suc y))))))
  (ax_mp ((eq (add (mul a (d0)) (d0)) (d0)) (eq (mul (suc a) (d0)) (add (mul a (d0)) (d0))))
    (ax_mp ((eq (mul (suc a) (d0)) (d0)) (im (eq (add (mul a (d0)) (d0)) (d0)) (eq (mul (suc a) (d0)) (add (mul a (d0)) (d0)))))
      (eqtr4 ((mul (suc a) (d0)) (d0) (add (mul a (d0)) (d0))))
      (mul0 ((suc a))))
    (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0)))
      (ax_mp ((eq (add (mul a (d0)) (d0)) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0))))
        (eqtr ((add (mul a (d0)) (d0)) (mul a (d0)) (d0)))
        (add0 ((mul a (d0)))))
      (mul0 (a))))
  (eqtr4g ((eq (mul (suc a) y) (add (mul a y) y)) (add (mul (suc a) y) (suc a)) (add (add (mul a y) y) (suc a)) (mul (suc a) (suc y)) (add (mul a (suc y)) (suc y)))
    (mulS ((suc a) y))
    (ax_mp ((eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))) (eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) y) (suc a))))
      (ax_mp ((eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) a) (suc y))) (im (eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))) (eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) y) (suc a)))))
        (eqtr ((add (mul a (suc y)) (suc y)) (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))))
        (ax_mp ((eq (mul a (suc y)) (add (mul a y) a)) (eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) a) (suc y))))
          (addeq1 ((mul a (suc y)) (add (mul a y) a) (suc y)))
          (mulS (a y))))
      (ax_mp ((eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))) (eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))))
        (ax_mp ((eq (add (add (mul a y) a) (suc y)) (suc (add (add (mul a y) a) y))) (im (eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))) (eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a)))))
          (eqtr ((add (add (mul a y) a) (suc y)) (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))))
          (addS ((add (mul a y) a) y)))
        (ax_mp ((eq (add (add (mul a y) y) (suc a)) (suc (add (add (mul a y) y) a))) (eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))))
          (ax_mp ((eq (suc (add (add (mul a y) a) y)) (suc (add (add (mul a y) y) a))) (im (eq (add (add (mul a y) y) (suc a)) (suc (add (add (mul a y) y) a))) (eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a)))))
            (eqtr4 ((suc (add (add (mul a y) a) y)) (suc (add (add (mul a y) y) a)) (add (add (mul a y) y) (suc a))))
            (ax_mp ((eq (add (add (mul a y) a) y) (add (add (mul a y) y) a)) (eq (suc (add (add (mul a y) a) y)) (suc (add (add (mul a y) y) a))))
              (suceq ((add (add (mul a y) a) y) (add (add (mul a y) y) a)))
              (addrass ((mul a y) a y))))
          (addS ((add (mul a y) y) a)))))
    (addeq1 ((mul (suc a) y) (add (mul a y) y) (suc a))))))

(local theorem mulcom ((a nat ()) (b nat ())) ()
  (eq (mul a b) (mul b a))
((x nat) (y nat))
(ind (x y b (eq (mul a x) (mul x a)) (eq (mul a (d0)) (mul (d0) a)) (eq (mul a b) (mul b a)) (eq (mul a y) (mul y a)) (eq (mul a (suc y)) (mul (suc y) a)))
  (eqeqd ((eq x b) (mul a x) (mul a b) (mul x a) (mul b a))
    (muleq2 (a x b))
    (muleq1 (x b a)))
  (eqeqd ((eq x (d0)) (mul a x) (mul a (d0)) (mul x a) (mul (d0) a))
    (muleq2 (a x (d0)))
    (muleq1 (x (d0) a)))
  (eqeqd ((eq x y) (mul a x) (mul a y) (mul x a) (mul y a))
    (muleq2 (a x y))
    (muleq1 (x y a)))
  (eqeqd ((eq x (suc y)) (mul a x) (mul a (suc y)) (mul x a) (mul (suc y) a))
    (muleq2 (a x (suc y)))
    (muleq1 (x (suc y) a)))
  (ax_mp ((eq (mul (d0) a) (d0)) (eq (mul a (d0)) (mul (d0) a)))
    (ax_mp ((eq (mul a (d0)) (d0)) (im (eq (mul (d0) a) (d0)) (eq (mul a (d0)) (mul (d0) a))))
      (eqtr4 ((mul a (d0)) (d0) (mul (d0) a)))
      (mul0 (a)))
    (mul01 (a)))
  (eqtr4g ((eq (mul a y) (mul y a)) (add (mul a y) a) (add (mul y a) a) (mul a (suc y)) (mul (suc y) a))
    (mulS (a y))
    (mulS1 (y a))
    (addeq1 ((mul a y) (mul y a) a)))))

(local theorem mul12 ((a nat ())) ()
  (eq (mul a (d1)) a)
()
(ax_mp ((eq (add (mul a (d0)) a) a) (eq (mul a (d1)) a))
  (ax_mp ((eq (mul a (d1)) (add (mul a (d0)) a)) (im (eq (add (mul a (d0)) a) a) (eq (mul a (d1)) a)))
    (eqtr ((mul a (d1)) (add (mul a (d0)) a) a))
    (:conv (eq (mul a (d1)) (add (mul a (d0)) a))
      (eq
        (mul
          a
          (:unfold d1 () ()
            (suc (d0))))
        (add (mul a (d0)) a))
      (mulS (a (d0)))))
  (ax_mp ((eq (add (d0) a) a) (eq (add (mul a (d0)) a) a))
    (ax_mp ((eq (add (mul a (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul a (d0)) a) a)))
      (eqtr ((add (mul a (d0)) a) (add (d0) a) a))
      (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) a) (add (d0) a)))
        (addeq1 ((mul a (d0)) (d0) a))
        (mul0 (a))))
    (add01 (a)))))

(local theorem mul11 ((a nat ())) ()
  (eq (mul (d1) a) a)
()
(ax_mp ((eq (mul a (d1)) a) (eq (mul (d1) a) a))
  (ax_mp ((eq (mul (d1) a) (mul a (d1))) (im (eq (mul a (d1)) a) (eq (mul (d1) a) a)))
    (eqtr ((mul (d1) a) (mul a (d1)) a))
    (mulcom ((d1) a)))
  (mul12 (a))))

(local theorem mul22 ((a nat ())) ()
  (eq (mul a (d2)) (add a a))
()
(ax_mp ((eq (add (mul a (d1)) a) (add a a)) (eq (mul a (d2)) (add a a)))
  (ax_mp ((eq (mul a (d2)) (add (mul a (d1)) a)) (im (eq (add (mul a (d1)) a) (add a a)) (eq (mul a (d2)) (add a a))))
    (eqtr ((mul a (d2)) (add (mul a (d1)) a) (add a a)))
    (:conv (eq (mul a (d2)) (add (mul a (d1)) a))
      (eq
        (mul
          a
          (:unfold d2 () ()
            (suc (d1))))
        (add (mul a (d1)) a))
      (mulS2 (a (d1)))))
  (ax_mp ((eq (mul a (d1)) a) (eq (add (mul a (d1)) a) (add a a)))
    (addeq1 ((mul a (d1)) a a))
    (mul12 (a)))))

(local theorem mul21 ((a nat ())) ()
  (eq (mul (d2) a) (add a a))
()
(ax_mp ((eq (mul a (d2)) (add a a)) (eq (mul (d2) a) (add a a)))
  (ax_mp ((eq (mul (d2) a) (mul a (d2))) (im (eq (mul a (d2)) (add a a)) (eq (mul (d2) a) (add a a))))
    (eqtr ((mul (d2) a) (mul a (d2)) (add a a)))
    (mulcom ((d2) a)))
  (mul22 (a))))

(local theorem muladd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul a (add b c)) (add (mul a b) (mul a c)))
((x nat) (y nat))
(ind (x y c (eq (mul a (add b x)) (add (mul a b) (mul a x))) (eq (mul a (add b (d0))) (add (mul a b) (mul a (d0)))) (eq (mul a (add b c)) (add (mul a b) (mul a c))) (eq (mul a (add b y)) (add (mul a b) (mul a y))) (eq (mul a (add b (suc y))) (add (mul a b) (mul a (suc y)))))
  (eqeqd ((eq x c) (mul a (add b x)) (mul a (add b c)) (add (mul a b) (mul a x)) (add (mul a b) (mul a c)))
    (muleq2d ((eq x c) a (add b x) (add b c))
      (addeq2 (b x c)))
    (addeq2d ((eq x c) (mul a b) (mul a x) (mul a c))
      (muleq2 (a x c))))
  (eqeqd ((eq x (d0)) (mul a (add b x)) (mul a (add b (d0))) (add (mul a b) (mul a x)) (add (mul a b) (mul a (d0))))
    (muleq2d ((eq x (d0)) a (add b x) (add b (d0)))
      (addeq2 (b x (d0))))
    (addeq2d ((eq x (d0)) (mul a b) (mul a x) (mul a (d0)))
      (muleq2 (a x (d0)))))
  (eqeqd ((eq x y) (mul a (add b x)) (mul a (add b y)) (add (mul a b) (mul a x)) (add (mul a b) (mul a y)))
    (muleq2d ((eq x y) a (add b x) (add b y))
      (addeq2 (b x y)))
    (addeq2d ((eq x y) (mul a b) (mul a x) (mul a y))
      (muleq2 (a x y))))
  (eqeqd ((eq x (suc y)) (mul a (add b x)) (mul a (add b (suc y))) (add (mul a b) (mul a x)) (add (mul a b) (mul a (suc y))))
    (muleq2d ((eq x (suc y)) a (add b x) (add b (suc y)))
      (addeq2 (b x (suc y))))
    (addeq2d ((eq x (suc y)) (mul a b) (mul a x) (mul a (suc y)))
      (muleq2 (a x (suc y)))))
  (ax_mp ((eq (add (mul a b) (mul a (d0))) (mul a b)) (eq (mul a (add b (d0))) (add (mul a b) (mul a (d0)))))
    (ax_mp ((eq (mul a (add b (d0))) (mul a b)) (im (eq (add (mul a b) (mul a (d0))) (mul a b)) (eq (mul a (add b (d0))) (add (mul a b) (mul a (d0))))))
      (eqtr4 ((mul a (add b (d0))) (mul a b) (add (mul a b) (mul a (d0)))))
      (ax_mp ((eq (add b (d0)) b) (eq (mul a (add b (d0))) (mul a b)))
        (muleq2 (a (add b (d0)) b))
        (add0 (b))))
    (ax_mp ((eq (add (mul a b) (d0)) (mul a b)) (eq (add (mul a b) (mul a (d0))) (mul a b)))
      (ax_mp ((eq (add (mul a b) (mul a (d0))) (add (mul a b) (d0))) (im (eq (add (mul a b) (d0)) (mul a b)) (eq (add (mul a b) (mul a (d0))) (mul a b))))
        (eqtr ((add (mul a b) (mul a (d0))) (add (mul a b) (d0)) (mul a b)))
        (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a b) (mul a (d0))) (add (mul a b) (d0))))
          (addeq2 ((mul a b) (mul a (d0)) (d0)))
          (mul0 (a))))
      (add0 ((mul a b)))))
  (eqtr4g ((eq (mul a (add b y)) (add (mul a b) (mul a y))) (add (mul a (add b y)) a) (add (add (mul a b) (mul a y)) a) (mul a (add b (suc y))) (add (mul a b) (mul a (suc y))))
    (ax_mp ((eq (mul a (suc (add b y))) (add (mul a (add b y)) a)) (eq (mul a (add b (suc y))) (add (mul a (add b y)) a)))
      (ax_mp ((eq (mul a (add b (suc y))) (mul a (suc (add b y)))) (im (eq (mul a (suc (add b y))) (add (mul a (add b y)) a)) (eq (mul a (add b (suc y))) (add (mul a (add b y)) a))))
        (eqtr ((mul a (add b (suc y))) (mul a (suc (add b y))) (add (mul a (add b y)) a)))
        (ax_mp ((eq (add b (suc y)) (suc (add b y))) (eq (mul a (add b (suc y))) (mul a (suc (add b y)))))
          (muleq2 (a (add b (suc y)) (suc (add b y))))
          (addS (b y))))
      (mulS (a (add b y))))
    (ax_mp ((eq (add (add (mul a b) (mul a y)) a) (add (mul a b) (add (mul a y) a))) (eq (add (mul a b) (mul a (suc y))) (add (add (mul a b) (mul a y)) a)))
      (ax_mp ((eq (add (mul a b) (mul a (suc y))) (add (mul a b) (add (mul a y) a))) (im (eq (add (add (mul a b) (mul a y)) a) (add (mul a b) (add (mul a y) a))) (eq (add (mul a b) (mul a (suc y))) (add (add (mul a b) (mul a y)) a))))
        (eqtr4 ((add (mul a b) (mul a (suc y))) (add (mul a b) (add (mul a y) a)) (add (add (mul a b) (mul a y)) a)))
        (ax_mp ((eq (mul a (suc y)) (add (mul a y) a)) (eq (add (mul a b) (mul a (suc y))) (add (mul a b) (add (mul a y) a))))
          (addeq2 ((mul a b) (mul a (suc y)) (add (mul a y) a)))
          (mulS (a y))))
      (addass ((mul a b) (mul a y) a)))
    (addeq1 ((mul a (add b y)) (add (mul a b) (mul a y)) a)))))

(local theorem addmul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (add a b) c) (add (mul a c) (mul b c)))
()
(ax_mp ((eq (mul c (add a b)) (add (mul a c) (mul b c))) (eq (mul (add a b) c) (add (mul a c) (mul b c))))
  (ax_mp ((eq (mul (add a b) c) (mul c (add a b))) (im (eq (mul c (add a b)) (add (mul a c) (mul b c))) (eq (mul (add a b) c) (add (mul a c) (mul b c)))))
    (eqtr ((mul (add a b) c) (mul c (add a b)) (add (mul a c) (mul b c))))
    (mulcom ((add a b) c)))
  (ax_mp ((eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c))) (eq (mul c (add a b)) (add (mul a c) (mul b c))))
    (ax_mp ((eq (mul c (add a b)) (add (mul c a) (mul c b))) (im (eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c))) (eq (mul c (add a b)) (add (mul a c) (mul b c)))))
      (eqtr ((mul c (add a b)) (add (mul c a) (mul c b)) (add (mul a c) (mul b c))))
      (muladd (c a b)))
    (ax_mp ((eq (mul c b) (mul b c)) (eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c))))
      (ax_mp ((eq (mul c a) (mul a c)) (im (eq (mul c b) (mul b c)) (eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c)))))
        (addeq ((mul c a) (mul a c) (mul c b) (mul b c)))
        (mulcom (c a)))
      (mulcom (c b))))))

(local theorem mulass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (mul a b) c) (mul a (mul b c)))
((x nat) (y nat))
(ind (x y c (eq (mul (mul a b) x) (mul a (mul b x))) (eq (mul (mul a b) (d0)) (mul a (mul b (d0)))) (eq (mul (mul a b) c) (mul a (mul b c))) (eq (mul (mul a b) y) (mul a (mul b y))) (eq (mul (mul a b) (suc y)) (mul a (mul b (suc y)))))
  (eqeqd ((eq x c) (mul (mul a b) x) (mul (mul a b) c) (mul a (mul b x)) (mul a (mul b c)))
    (muleq2 ((mul a b) x c))
    (muleq2d ((eq x c) a (mul b x) (mul b c))
      (muleq2 (b x c))))
  (eqeqd ((eq x (d0)) (mul (mul a b) x) (mul (mul a b) (d0)) (mul a (mul b x)) (mul a (mul b (d0))))
    (muleq2 ((mul a b) x (d0)))
    (muleq2d ((eq x (d0)) a (mul b x) (mul b (d0)))
      (muleq2 (b x (d0)))))
  (eqeqd ((eq x y) (mul (mul a b) x) (mul (mul a b) y) (mul a (mul b x)) (mul a (mul b y)))
    (muleq2 ((mul a b) x y))
    (muleq2d ((eq x y) a (mul b x) (mul b y))
      (muleq2 (b x y))))
  (eqeqd ((eq x (suc y)) (mul (mul a b) x) (mul (mul a b) (suc y)) (mul a (mul b x)) (mul a (mul b (suc y))))
    (muleq2 ((mul a b) x (suc y)))
    (muleq2d ((eq x (suc y)) a (mul b x) (mul b (suc y)))
      (muleq2 (b x (suc y)))))
  (ax_mp ((eq (mul a (mul b (d0))) (d0)) (eq (mul (mul a b) (d0)) (mul a (mul b (d0)))))
    (ax_mp ((eq (mul (mul a b) (d0)) (d0)) (im (eq (mul a (mul b (d0))) (d0)) (eq (mul (mul a b) (d0)) (mul a (mul b (d0))))))
      (eqtr4 ((mul (mul a b) (d0)) (d0) (mul a (mul b (d0)))))
      (mul0 ((mul a b))))
    (ax_mp ((eq (mul a (d0)) (d0)) (eq (mul a (mul b (d0))) (d0)))
      (ax_mp ((eq (mul a (mul b (d0))) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (mul a (mul b (d0))) (d0))))
        (eqtr ((mul a (mul b (d0))) (mul a (d0)) (d0)))
        (ax_mp ((eq (mul b (d0)) (d0)) (eq (mul a (mul b (d0))) (mul a (d0))))
          (muleq2 (a (mul b (d0)) (d0)))
          (mul0 (b))))
      (mul0 (a))))
  (eqtr4g ((eq (mul (mul a b) y) (mul a (mul b y))) (add (mul (mul a b) y) (mul a b)) (add (mul a (mul b y)) (mul a b)) (mul (mul a b) (suc y)) (mul a (mul b (suc y))))
    (mulS ((mul a b) y))
    (ax_mp ((eq (mul a (add (mul b y) b)) (add (mul a (mul b y)) (mul a b))) (eq (mul a (mul b (suc y))) (add (mul a (mul b y)) (mul a b))))
      (ax_mp ((eq (mul a (mul b (suc y))) (mul a (add (mul b y) b))) (im (eq (mul a (add (mul b y) b)) (add (mul a (mul b y)) (mul a b))) (eq (mul a (mul b (suc y))) (add (mul a (mul b y)) (mul a b)))))
        (eqtr ((mul a (mul b (suc y))) (mul a (add (mul b y) b)) (add (mul a (mul b y)) (mul a b))))
        (ax_mp ((eq (mul b (suc y)) (add (mul b y) b)) (eq (mul a (mul b (suc y))) (mul a (add (mul b y) b))))
          (muleq2 (a (mul b (suc y)) (add (mul b y) b)))
          (mulS (b y))))
      (muladd (a (mul b y) b)))
    (addeq1 ((mul (mul a b) y) (mul a (mul b y)) (mul a b))))))

(local theorem mullass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul a (mul b c)) (mul b (mul a c)))
()
(ax_mp ((eq (mul (mul a b) c) (mul b (mul a c))) (eq (mul a (mul b c)) (mul b (mul a c))))
  (ax_mp ((eq (mul (mul a b) c) (mul a (mul b c))) (im (eq (mul (mul a b) c) (mul b (mul a c))) (eq (mul a (mul b c)) (mul b (mul a c)))))
    (eqtr3 ((mul a (mul b c)) (mul (mul a b) c) (mul b (mul a c))))
    (mulass (a b c)))
  (ax_mp ((eq (mul (mul b a) c) (mul b (mul a c))) (eq (mul (mul a b) c) (mul b (mul a c))))
    (ax_mp ((eq (mul (mul a b) c) (mul (mul b a) c)) (im (eq (mul (mul b a) c) (mul b (mul a c))) (eq (mul (mul a b) c) (mul b (mul a c)))))
      (eqtr ((mul (mul a b) c) (mul (mul b a) c) (mul b (mul a c))))
      (ax_mp ((eq (mul a b) (mul b a)) (eq (mul (mul a b) c) (mul (mul b a) c)))
        (muleq1 ((mul a b) (mul b a) c))
        (mulcom (a b))))
    (mulass (b a c)))))

(local theorem mulrass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (mul a b) c) (mul (mul a c) b))
()
(ax_mp ((eq (mul a (mul b c)) (mul (mul a c) b)) (eq (mul (mul a b) c) (mul (mul a c) b)))
  (ax_mp ((eq (mul (mul a b) c) (mul a (mul b c))) (im (eq (mul a (mul b c)) (mul (mul a c) b)) (eq (mul (mul a b) c) (mul (mul a c) b))))
    (eqtr ((mul (mul a b) c) (mul a (mul b c)) (mul (mul a c) b)))
    (mulass (a b c)))
  (ax_mp ((eq (mul (mul a c) b) (mul a (mul c b))) (eq (mul a (mul b c)) (mul (mul a c) b)))
    (ax_mp ((eq (mul a (mul b c)) (mul a (mul c b))) (im (eq (mul (mul a c) b) (mul a (mul c b))) (eq (mul a (mul b c)) (mul (mul a c) b))))
      (eqtr4 ((mul a (mul b c)) (mul a (mul c b)) (mul (mul a c) b)))
      (ax_mp ((eq (mul b c) (mul c b)) (eq (mul a (mul b c)) (mul a (mul c b))))
        (muleq2 (a (mul b c) (mul c b)))
        (mulcom (b c))))
    (mulass (a c b)))))

(def sub ((a nat ()) (b nat ())) (nat ())
((x nat))
(the (ab x (eq (add b x) a))))

(local theorem subeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (sub _a1 _b1) (sub _a2 _b2)))
((x nat))
(:conv (im _G (eq (sub _a1 _b1) (sub _a2 _b2)))
  (im
    _G
    (eq
      (:unfold sub (_a1 _b1) (x)
        (the (ab x (eq (add _b1 x) _a1))))
      (:unfold sub (_a2 _b2) (x)
        (the (ab x (eq (add _b2 x) _a2))))))
  (theeqd (_G (ab x (eq (add _b1 x) _a1)) (ab x (eq (add _b2 x) _a2)))
    (abeqd (_G x (eq (add _b1 x) _a1) (eq (add _b2 x) _a2))
      (eqeqd (_G (add _b1 x) (add _b2 x) _a1 _a2)
        (addeqd (_G _b1 _b2 x x)
          _bh
          (eqidd (_G x)))
        _ah)))))

(local theorem subeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (sub _a1 _b1) (sub _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (sub _a1 _b1) (sub _a2 _b2)))
  (subeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem subeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (sub _a1 b) (sub _a2 b)))
()
(subeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem subeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (sub _a1 b) (sub _a2 b)))
()
(subeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem subeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (sub a _b1) (sub a _b2)))
()
(subeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem subeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (sub a _b1) (sub a _b2)))
()
(subeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem eqsub2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (add a b) c) (eq (sub c a) b))
((x nat) (y nat))
(:conv (im (eq (add a b) c) (eq (sub c a) b))
  (im
    (eq (add a b) c)
    (eq
      (:unfold sub (c a) (y)
        (the (ab y (eq (add a y) c))))
      b))
  (eqthed ((ab y (eq (add a y) c)) (eq (add a b) c) b x)
    (syl5bb ((eq (add a b) c) (el x (ab y (eq (add a y) c))) (eq (add a x) c) (eq x b))
      (elabe (y x (eq (add a y) c) (eq (add a x) c))
        (eqeq1d ((eq y x) (add a y) (add a x) c)
          (addeq2 (a y x))))
      (syl6bb ((eq (add a b) c) (eq (add a x) c) (eq (add a x) (add a b)) (eq x b))
        (addcan2 (a x b))
        (bicomd ((eq (add a b) c) (eq (add a x) (add a b)) (eq (add a x) c))
          (eqeq2 ((add a x) (add a b) c))))))))

(local theorem eqsub1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (add a b) c) (eq (sub c b) a))
()
(sylbi ((eq (add a b) c) (eq (add b a) c) (eq (sub c b) a))
  (ax_mp ((eq (add a b) (add b a)) (iff (eq (add a b) c) (eq (add b a) c)))
    (eqeq1 ((add a b) (add b a) c))
    (addcom (a b)))
  (eqsub2 (b a c))))

(local theorem pncan ((a nat ()) (b nat ())) ()
  (eq (sub (add a b) b) a)
()
(ax_mp ((eq (add a b) (add a b)) (eq (sub (add a b) b) a))
  (eqsub1 (a b (add a b)))
  (eqid ((add a b)))))

(local theorem pncan2 ((a nat ()) (b nat ())) ()
  (eq (sub (add a b) a) b)
()
(ax_mp ((eq (add a b) (add a b)) (eq (sub (add a b) a) b))
  (eqsub2 (a b (add a b)))
  (eqid ((add a b)))))

(local theorem sub02 ((a nat ())) ()
  (eq (sub a (d0)) a)
()
(ax_mp ((eq (add a (d0)) a) (eq (sub a (d0)) a))
  (eqsub1 (a (d0) a))
  (add0 (a))))

(local theorem subid ((a nat ())) ()
  (eq (sub a a) (d0))
()
(ax_mp ((eq (add (d0) a) a) (eq (sub a a) (d0)))
  (eqsub1 ((d0) a a))
  (add01 (a))))

(local theorem sucsub1 ((a nat ())) ()
  (eq (sub (suc a) (d1)) a)
()
(ax_mp ((eq (sub (add a (d1)) (d1)) a) (eq (sub (suc a) (d1)) a))
  (ax_mp ((eq (sub (add a (d1)) (d1)) (sub (suc a) (d1))) (im (eq (sub (add a (d1)) (d1)) a) (eq (sub (suc a) (d1)) a)))
    (eqtr3 ((sub (suc a) (d1)) (sub (add a (d1)) (d1)) a))
    (ax_mp ((eq (add a (d1)) (suc a)) (eq (sub (add a (d1)) (d1)) (sub (suc a) (d1))))
      (subeq1 ((add a (d1)) (suc a) (d1)))
      (add12 (a))))
  (pncan (a (d1)))))

(def le ((a nat ()) (b nat ())) (wff ())
((x nat))
(ex x (eq (add a x) b)))

(local theorem leeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (iff (le _a1 _b1) (le _a2 _b2)))
((x nat))
(:conv (im _G (iff (le _a1 _b1) (le _a2 _b2)))
  (im
    _G
    (iff
      (:unfold le (_a1 _b1) (x)
        (ex x (eq (add _a1 x) _b1)))
      (:unfold le (_a2 _b2) (x)
        (ex x (eq (add _a2 x) _b2)))))
  (exeqd (_G x (eq (add _a1 x) _b1) (eq (add _a2 x) _b2))
    (eqeqd (_G (add _a1 x) (add _a2 x) _b1 _b2)
      (addeqd (_G _a1 _a2 x x)
        _ah
        (eqidd (_G x)))
      _bh))))

(local theorem leeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (iff (le _a1 _b1) (le _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (iff (le _a1 _b1) (le _a2 _b2)))
  (leeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem leeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (le _a1 b) (le _a2 b)))
()
(leeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem leeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (iff (le _a1 b) (le _a2 b)))
()
(leeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem leeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (iff (le a _b1) (le a _b2)))
()
(leeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem leeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (iff (le a _b1) (le a _b2)))
()
(leeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem dfle ((a nat ()) (b nat ()) (x nat)) ()
  (iff (le a b) (ex x (eq (add a x) b)))
((y nat))
(:conv (iff (le a b) (ex x (eq (add a x) b)))
  (iff
    (:unfold le (a b) (y)
      (ex y (eq (add a y) b)))
    (ex x (eq (add a x) b)))
  (cbvex (y x (eq (add a y) b) (eq (add a x) b))
    (eqeq1d ((eq y x) (add a y) (add a x) b)
      (addeq2 (a y x))))))

(local theorem leid ((a nat ())) ()
  (le a a)
((x nat))
(ax_mp ((eq (add a (d0)) a) (le a a))
  (:conv (im (eq (add a (d0)) a) (le a a))
    (im
      (eq (add a (d0)) a)
      (:unfold le (a a) (x)
        (ex x (eq (add a x) a))))
    (iexe (x (d0) (eq (add a x) a) (eq (add a (d0)) a))
      (eqeq1d ((eq x (d0)) (add a x) (add a (d0)) a)
        (addeq2 (a x (d0))))))
  (add0 (a))))

(local theorem eqle ((a nat ()) (b nat ())) ()
  (im (eq a b) (le a b))
()
(mpbii ((eq a b) (le a a) (le a b))
  (leid (a))
  (leeq2 (a a b))))

(local theorem eqler ((a nat ()) (b nat ())) ()
  (im (eq a b) (le b a))
()
(syl ((eq a b) (eq b a) (le b a))
  (eqle (b a))
  (eqcom (a b))))

(local theorem pncan3 ((a nat ()) (b nat ())) ()
  (im (le a b) (eq (add a (sub b a)) b))
((x nat))
(:conv (im (le a b) (eq (add a (sub b a)) b))
  (im
    (:unfold le (a b) (x)
      (ex x (eq (add a x) b)))
    (eq (add a (sub b a)) b))
  (eex (x (eq (add a x) b) (eq (add a (sub b a)) b))
    (mpbii ((eq (add a x) b) (eq (add a (sub (add a x) a)) (add a x)) (eq (add a (sub b a)) b))
      (ax_mp ((eq (sub (add a x) a) x) (eq (add a (sub (add a x) a)) (add a x)))
        (addeq2 (a (sub (add a x) a) x))
        (pncan2 (a x)))
      (eqeqd ((eq (add a x) b) (add a (sub (add a x) a)) (add a (sub b a)) (add a x) b)
        (addeq2d ((eq (add a x) b) a (sub (add a x) a) (sub b a))
          (subeq1 ((add a x) b a)))
        (id ((eq (add a x) b))))))))

(local theorem npcan ((a nat ()) (b nat ())) ()
  (im (le b a) (eq (add (sub a b) b) a))
()
(syl5eq ((le b a) (add (sub a b) b) (add b (sub a b)) a)
  (addcom ((sub a b) b))
  (pncan3 (b a))))

(local theorem subadd ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b a) (iff (eq (sub a b) c) (eq (add b c) a)))
()
(ibid ((le b a) (eq (sub a b) c) (eq (add b c) a))
  (syl5ibrcom ((le b a) (eq (add b c) a) (eq (sub a b) c) (eq (add b (sub a b)) a))
    (rsyl ((eq (sub a b) c) (eq c (sub a b)) (iff (eq (add b c) a) (eq (add b (sub a b)) a)))
      (eqcom ((sub a b) c))
      (eqeq1d ((eq c (sub a b)) (add b c) (add b (sub a b)) a)
        (addeq2 (b c (sub a b)))))
    (pncan3 (b a)))
  (a1i ((le b a) (im (eq (add b c) a) (eq (sub a b) c)))
    (eqsub2 (b c a)))))

(local theorem addsub ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le c a) (eq (sub (add a b) c) (add (sub a c) b)))
()
(syl6eq ((le c a) (sub (add a b) c) (sub (add (add (sub a c) b) c) c) (add (sub a c) b))
  (pncan ((add (sub a c) b) c))
  (subeq1d ((le c a) (add a b) (add (add (sub a c) b) c) c)
    (syl6eq ((le c a) (add a b) (add (add (sub a c) c) b) (add (add (sub a c) b) c))
      (addrass ((sub a c) c b))
      (addeq1d ((le c a) a (add (sub a c) c) b)
        (eqcomd ((le c a) (add (sub a c) c) a)
          (npcan (a c))))))))

(local theorem leaddid1 ((a nat ()) (b nat ())) ()
  (le a (add a b))
((x nat))
(ax_mp ((eq (add a b) (add a b)) (le a (add a b)))
  (:conv (im (eq (add a b) (add a b)) (le a (add a b)))
    (im
      (eq (add a b) (add a b))
      (:unfold le (a (add a b)) (x)
        (ex x (eq (add a x) (add a b)))))
    (iexe (x b (eq (add a x) (add a b)) (eq (add a b) (add a b)))
      (eqeq1d ((eq x b) (add a x) (add a b) (add a b))
        (addeq2 (a x b)))))
  (eqid ((add a b)))))

(local theorem leaddid2 ((a nat ()) (b nat ())) ()
  (le a (add b a))
()
(mpbi ((le a (add a b)) (le a (add b a)))
  (ax_mp ((eq (add a b) (add b a)) (iff (le a (add a b)) (le a (add b a))))
    (ax_mp ((eq a a) (im (eq (add a b) (add b a)) (iff (le a (add a b)) (le a (add b a)))))
      (leeq (a a (add a b) (add b a)))
      (eqid (a)))
    (addcom (a b)))
  (leaddid1 (a b))))

(local theorem lesucid ((a nat ())) ()
  (le a (suc a))
()
(mpbi ((le a (add a (d1))) (le a (suc a)))
  (ax_mp ((eq (add a (d1)) (suc a)) (iff (le a (add a (d1))) (le a (suc a))))
    (leeq2 (a (add a (d1)) (suc a)))
    (add12 (a)))
  (leaddid1 (a (d1)))))

(local theorem le01 ((a nat ())) ()
  (le (d0) a)
()
(mpbi ((le (d0) (add a (d0))) (le (d0) a))
  (ax_mp ((eq (add a (d0)) a) (iff (le (d0) (add a (d0))) (le (d0) a)))
    (leeq2 ((d0) (add a (d0)) a))
    (add0 (a)))
  (leaddid2 ((d0) a))))

(local theorem leadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a b) (le (add a c) (add b c)))
((x nat))
(ax_mp ((iff (ex x (eq (add a x) b)) (le (add a c) (add b c))) (iff (le a b) (le (add a c) (add b c))))
  (ax_mp ((iff (le a b) (ex x (eq (add a x) b))) (im (iff (ex x (eq (add a x) b)) (le (add a c) (add b c))) (iff (le a b) (le (add a c) (add b c)))))
    (bitr ((le a b) (ex x (eq (add a x) b)) (le (add a c) (add b c))))
    (dfle (a b x)))
  (:conv (iff (ex x (eq (add a x) b)) (le (add a c) (add b c)))
    (iff
      (ex x (eq (add a x) b))
      (:unfold le ((add a c) (add b c)) (x)
        (ex x (eq (add (add a c) x) (add b c)))))
    (exeqi (x (eq (add a x) b) (eq (add (add a c) x) (add b c)))
      (ax_mp ((iff (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))) (iff (eq (add a x) b) (eq (add (add a c) x) (add b c))))
        (ax_mp ((iff (eq (add (add a x) c) (add b c)) (eq (add a x) b)) (im (iff (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))) (iff (eq (add a x) b) (eq (add (add a c) x) (add b c)))))
          (bitr3 ((eq (add a x) b) (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))))
          (addcan1 ((add a x) b c)))
        (ax_mp ((eq (add (add a x) c) (add (add a c) x)) (iff (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))))
          (eqeq1 ((add (add a x) c) (add (add a c) x) (add b c)))
          (addrass (a x c))))))))

(local theorem leadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (add a b) (add a c)))
()
(ax_mp ((iff (le (add b a) (add c a)) (le (add a b) (add a c))) (iff (le b c) (le (add a b) (add a c))))
  (ax_mp ((iff (le b c) (le (add b a) (add c a))) (im (iff (le (add b a) (add c a)) (le (add a b) (add a c))) (iff (le b c) (le (add a b) (add a c)))))
    (bitr ((le b c) (le (add b a) (add c a)) (le (add a b) (add a c))))
    (leadd1 (b c a)))
  (ax_mp ((eq (add c a) (add a c)) (iff (le (add b a) (add c a)) (le (add a b) (add a c))))
    (ax_mp ((eq (add b a) (add a b)) (im (eq (add c a) (add a c)) (iff (le (add b a) (add c a)) (le (add a b) (add a c)))))
      (leeq ((add b a) (add a b) (add c a) (add a c)))
      (addcom (b a)))
    (addcom (c a)))))

(local theorem lesuc ((a nat ()) (b nat ())) ()
  (iff (le a b) (le (suc a) (suc b)))
()
(ax_mp ((iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))) (iff (le a b) (le (suc a) (suc b))))
  (ax_mp ((iff (le a b) (le (add a (d1)) (add b (d1)))) (im (iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))) (iff (le a b) (le (suc a) (suc b)))))
    (bitr ((le a b) (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))))
    (leadd1 (a b (d1))))
  (ax_mp ((eq (add b (d1)) (suc b)) (iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))))
    (ax_mp ((eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b)))))
      (leeq ((add a (d1)) (suc a) (add b (d1)) (suc b)))
      (add12 (a)))
    (add12 (b)))))

(local theorem letrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le b c))))
  (im G (le a c))
((x nat) (y nat) (z nat))
(mpd (G (le a b) (le a c))
  h1
  (:conv (im G (im (le a b) (le a c)))
    (im
      G
      (im
        (:unfold le (a b) (x)
          (ex x (eq (add a x) b)))
        (le a c)))
    (eexda (x G (eq (add a x) b) (le a c))
      (mpd ((an G (eq (add a x) b)) (le b c) (le a c))
        (anwl (G (eq (add a x) b) (le b c))
          h2)
        (:conv (im (an G (eq (add a x) b)) (im (le b c) (le a c)))
          (im
            (an G (eq (add a x) b))
            (im
              (:unfold le (b c) (y)
                (ex y (eq (add b y) c)))
              (le a c)))
          (eexda (y (an G (eq (add a x) b)) (eq (add b y) c) (le a c))
            (syl ((an (an G (eq (add a x) b)) (eq (add b y) c)) (eq (add a (add x y)) c) (le a c))
              (:conv (im (eq (add a (add x y)) c) (le a c))
                (im
                  (eq (add a (add x y)) c)
                  (:unfold le (a c) (z)
                    (ex z (eq (add a z) c))))
                (iexe (z (add x y) (eq (add a z) c) (eq (add a (add x y)) c))
                  (eqeq1d ((eq z (add x y)) (add a z) (add a (add x y)) c)
                    (addeq2 (a z (add x y))))))
              (syl5eqr ((an (an G (eq (add a x) b)) (eq (add b y) c)) (add a (add x y)) (add (add a x) y) c)
                (addass (a x y))
                (eqtrd ((an (an G (eq (add a x) b)) (eq (add b y) c)) (add (add a x) y) (add b y) c)
                  (addeq1d ((an (an G (eq (add a x) b)) (eq (add b y) c)) (add a x) b y)
                    (anlr (G (eq (add a x) b) (eq (add b y) c))))
                  (anr ((an G (eq (add a x) b)) (eq (add b y) c)))))))))))))

(local theorem letr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (im (le b c) (le a c)))
()
(exp ((le a b) (le b c) (le a c))
  (letrd ((an (le a b) (le b c)) a b c)
    (anl ((le a b) (le b c)))
    (anr ((le a b) (le b c))))))

(local theorem leasymd ((G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le b a))))
  (im G (eq a b))
((x nat) (y nat) (z nat))
(:let H1 (add0 (a))
(mpd (G (le a b) (eq a b))
  h1
  (:conv (im G (im (le a b) (eq a b)))
    (im
      G
      (im
        (:unfold le (a b) (x)
          (ex x (eq (add a x) b)))
        (eq a b)))
    (eexda (x G (eq (add a x) b) (eq a b))
      (casesda ((an G (eq (add a x) b)) (eq x (d0)) (eq a b))
        (syl5eqr ((an (an G (eq (add a x) b)) (eq x (d0))) a (add a (d0)) b)
          H1
          (eqtr3d ((an (an G (eq (add a x) b)) (eq x (d0))) (add a (d0)) (add a x) b)
            (anwr ((an G (eq (add a x) b)) (eq x (d0)) (eq (add a x) (add a (d0))))
              (addeq2 (a x (d0))))
            (anlr (G (eq (add a x) b) (eq x (d0))))))
        (imp ((an G (eq (add a x) b)) (not (eq x (d0))) (eq a b))
          (syl5bi ((an G (eq (add a x) b)) (not (eq x (d0))) (ex y (eq x (suc y))) (eq a b))
            (:conv (iff (not (eq x (d0))) (ex y (eq x (suc y))))
              (iff
                (:sym (:unfold ne (x (d0)) ()
                  (not (eq x (d0)))))
                (ex y (eq x (suc y))))
              (exsuc (y x)))
            (eexda (y (an G (eq (add a x) b)) (eq x (suc y)) (eq a b))
              (mpd ((an (an G (eq (add a x) b)) (eq x (suc y))) (le b a) (eq a b))
                (anwl ((an G (eq (add a x) b)) (eq x (suc y)) (le b a))
                  (anwl (G (eq (add a x) b) (le b a))
                    h2))
                (:conv (im (an (an G (eq (add a x) b)) (eq x (suc y))) (im (le b a) (eq a b)))
                  (im
                    (an (an G (eq (add a x) b)) (eq x (suc y)))
                    (im
                      (:unfold le (b a) (z)
                        (ex z (eq (add b z) a)))
                      (eq a b)))
                  (eexda (z (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a) (eq a b))
                    (sylc ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (not (eq (suc (add y z)) (d0))) (eq (suc (add y z)) (d0)) (eq a b))
                      (absurd ((eq (suc (add y z)) (d0)) (eq a b)))
                      (a1i ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (not (eq (suc (add y z)) (d0))))
                        (:conv (not (eq (suc (add y z)) (d0)))
                          (:sym (:unfold ne ((suc (add y z)) (d0)) ()
                            (not (eq (suc (add y z)) (d0)))))
                          (peano1 ((add y z)))))
                      (syl5eqr ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (suc (add y z)) (add (suc y) z) (d0))
                        (addS1 (y z))
                        (eqtr3d ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add (suc y) z) (add x z) (d0))
                          (addeq1d ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) x (suc y) z)
                            (anlr ((an G (eq (add a x) b)) (eq x (suc y)) (eq (add b z) a))))
                          (sylib ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (eq (add a (add x z)) (add a (d0))) (eq (add x z) (d0)))
                            (addcan2 (a (add x z) (d0)))
                            (eqtr4g ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add (add a x) z) a (add a (add x z)) (add a (d0)))
                              (ax_mp ((eq (add (add a x) z) (add a (add x z))) (eq (add a (add x z)) (add (add a x) z)))
                                (eqcom ((add (add a x) z) (add a (add x z))))
                                (addass (a x z)))
                              H1
                              (eqtrd ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add (add a x) z) (add b z) a)
                                (addeq1d ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add a x) b z)
                                  (anwl ((an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a) (eq (add a x) b))
                                    (anlr (G (eq (add a x) b) (eq x (suc y))))))
                                (anr ((an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)))))))))))))))))))))

(local theorem leasym ((a nat ()) (b nat ())) ()
  (im (le a b) (im (le b a) (eq a b)))
()
(exp ((le a b) (le b a) (eq a b))
  (leasymd ((an (le a b) (le b a)) a b)
    (anl ((le a b) (le b a)))
    (anr ((le a b) (le b a))))))

(local theorem eqlele ((a nat ()) (b nat ())) ()
  (iff (eq a b) (an (le a b) (le b a)))
()
(ibii ((eq a b) (an (le a b) (le b a)))
  (iand ((eq a b) (le a b) (le b a))
    (eqle (a b))
    (eqler (a b)))
  (imp ((le a b) (le b a) (eq a b))
    (leasym (a b)))))

(local theorem le02 ((a nat ())) ()
  (iff (le a (d0)) (eq a (d0)))
()
(ibii ((le a (d0)) (eq a (d0)))
  (mpi ((le a (d0)) (le (d0) a) (eq a (d0)))
    (le01 (a))
    (leasym (a (d0))))
  (eqle (a (d0)))))

(local theorem le11 ((a nat ())) ()
  (iff (le (d1) a) (ne a (d0)))
((x nat))
(ax_mp ((iff (ne a (d0)) (ex x (eq a (suc x)))) (iff (le (d1) a) (ne a (d0))))
  (ax_mp ((iff (le (d1) a) (ex x (eq a (suc x)))) (im (iff (ne a (d0)) (ex x (eq a (suc x)))) (iff (le (d1) a) (ne a (d0)))))
    (bitr4 ((le (d1) a) (ex x (eq a (suc x))) (ne a (d0))))
    (:conv (iff (le (d1) a) (ex x (eq a (suc x))))
      (iff
        (:unfold le ((d1) a) (x)
          (ex x (eq (add (d1) x) a)))
        (ex x (eq a (suc x))))
      (exeqi (x (eq (add (d1) x) a) (eq a (suc x)))
        (ax_mp ((iff (eq a (add (d1) x)) (eq a (suc x))) (iff (eq (add (d1) x) a) (eq a (suc x))))
          (ax_mp ((iff (eq (add (d1) x) a) (eq a (add (d1) x))) (im (iff (eq a (add (d1) x)) (eq a (suc x))) (iff (eq (add (d1) x) a) (eq a (suc x)))))
            (bitr ((eq (add (d1) x) a) (eq a (add (d1) x)) (eq a (suc x))))
            (eqcomb ((add (d1) x) a)))
          (ax_mp ((eq (add (d1) x) (suc x)) (iff (eq a (add (d1) x)) (eq a (suc x))))
            (eqeq2 (a (add (d1) x) (suc x)))
            (add11 (x)))))))
  (exsuc (x a))))

(local theorem addeq0 ((a nat ()) (b nat ())) ()
  (iff (eq (add a b) (d0)) (an (eq a (d0)) (eq b (d0))))
()
(ibii ((eq (add a b) (d0)) (an (eq a (d0)) (eq b (d0))))
  (iand ((eq (add a b) (d0)) (eq a (d0)) (eq b (d0)))
    (sylib ((eq (add a b) (d0)) (le a (d0)) (eq a (d0)))
      (le02 (a))
      (mpbii ((eq (add a b) (d0)) (le a (add a b)) (le a (d0)))
        (leaddid1 (a b))
        (leeq2 (a (add a b) (d0)))))
    (sylib ((eq (add a b) (d0)) (le b (d0)) (eq b (d0)))
      (le02 (b))
      (mpbii ((eq (add a b) (d0)) (le b (add a b)) (le b (d0)))
        (leaddid2 (b a))
        (leeq2 (b (add a b) (d0))))))
  (syl6eq ((an (eq a (d0)) (eq b (d0))) (add a b) (add (d0) (d0)) (d0))
    (add0 ((d0)))
    (imp ((eq a (d0)) (eq b (d0)) (eq (add a b) (add (d0) (d0))))
      (addeq (a (d0) b (d0)))))))

(local theorem sub1can ((a nat ())) ()
  (im (ne a (d0)) (eq (suc (sub a (d1))) a))
()
(sylbir ((ne a (d0)) (le (d1) a) (eq (suc (sub a (d1))) a))
  (le11 (a))
  (syl5eqr ((le (d1) a) (suc (sub a (d1))) (add (sub a (d1)) (d1)) a)
    (add12 ((sub a (d1))))
    (npcan (a (d1))))))

(local theorem leaddd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le c d))))
  (im G (le (add a c) (add b d)))
()
(letrd (G (add a c) (add b c) (add b d))
  (sylib (G (le a b) (le (add a c) (add b c)))
    (leadd1 (a b c))
    h1)
  (sylib (G (le c d) (le (add b c) (add b d)))
    (leadd2 (b c d))
    h2)))

(local theorem leadd ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (le a b) (im (le c d) (le (add a c) (add b d))))
()
(exp ((le a b) (le c d) (le (add a c) (add b d)))
  (leaddd ((an (le a b) (le c d)) a b c d)
    (anl ((le a b) (le c d)))
    (anr ((le a b) (le c d))))))

(local theorem lemul1a ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (le (mul a c) (mul b c)))
((x nat) (y nat))
(:let H1 (id ((eq x c)))
(:let H2 (id ((eq x (d0))))
(:let H3 (id ((eq x y)))
(:let H4 (id ((eq x (suc y))))
(indd ((le a b) x y c (le (mul a x) (mul b x)) (le (mul a (d0)) (mul b (d0))) (le (mul a c) (mul b c)) (le (mul a y) (mul b y)) (le (mul a (suc y)) (mul b (suc y))))
  (leeqd ((eq x c) (mul a x) (mul a c) (mul b x) (mul b c))
    (muleqd ((eq x c) a a x c)
      (eqidd ((eq x c) a))
      H1)
    (muleqd ((eq x c) b b x c)
      (eqidd ((eq x c) b))
      H1))
  (leeqd ((eq x (d0)) (mul a x) (mul a (d0)) (mul b x) (mul b (d0)))
    (muleqd ((eq x (d0)) a a x (d0))
      (eqidd ((eq x (d0)) a))
      H2)
    (muleqd ((eq x (d0)) b b x (d0))
      (eqidd ((eq x (d0)) b))
      H2))
  (leeqd ((eq x y) (mul a x) (mul a y) (mul b x) (mul b y))
    (muleqd ((eq x y) a a x y)
      (eqidd ((eq x y) a))
      H3)
    (muleqd ((eq x y) b b x y)
      (eqidd ((eq x y) b))
      H3))
  (leeqd ((eq x (suc y)) (mul a x) (mul a (suc y)) (mul b x) (mul b (suc y)))
    (muleqd ((eq x (suc y)) a a x (suc y))
      (eqidd ((eq x (suc y)) a))
      H4)
    (muleqd ((eq x (suc y)) b b x (suc y))
      (eqidd ((eq x (suc y)) b))
      H4))
  (a1i ((le a b) (le (mul a (d0)) (mul b (d0))))
    (ax_mp ((eq (mul a (d0)) (mul b (d0))) (le (mul a (d0)) (mul b (d0))))
      (eqle ((mul a (d0)) (mul b (d0))))
      (ax_mp ((eq (mul b (d0)) (d0)) (eq (mul a (d0)) (mul b (d0))))
        (ax_mp ((eq (mul a (d0)) (d0)) (im (eq (mul b (d0)) (d0)) (eq (mul a (d0)) (mul b (d0)))))
          (eqtr4 ((mul a (d0)) (d0) (mul b (d0))))
          (mul0 (a)))
        (mul0 (b)))))
  (sylibr ((an (le a b) (le (mul a y) (mul b y))) (le (add (mul a y) a) (add (mul b y) b)) (le (mul a (suc y)) (mul b (suc y))))
    (ax_mp ((eq (mul b (suc y)) (add (mul b y) b)) (iff (le (mul a (suc y)) (mul b (suc y))) (le (add (mul a y) a) (add (mul b y) b))))
      (ax_mp ((eq (mul a (suc y)) (add (mul a y) a)) (im (eq (mul b (suc y)) (add (mul b y) b)) (iff (le (mul a (suc y)) (mul b (suc y))) (le (add (mul a y) a) (add (mul b y) b)))))
        (leeq ((mul a (suc y)) (add (mul a y) a) (mul b (suc y)) (add (mul b y) b)))
        (mulS (a y)))
      (mulS (b y)))
    (leaddd ((an (le a b) (le (mul a y) (mul b y))) (mul a y) (mul b y) a b)
      (anr ((le a b) (le (mul a y) (mul b y))))
      (anl ((le a b) (le (mul a y) (mul b y))))))))))))

(local theorem lemul2a ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b c) (le (mul a b) (mul a c)))
()
(sylib ((le b c) (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c))))
    (ax_mp ((eq (mul b a) (mul a b)) (im (eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))))
      (leeq ((mul b a) (mul a b) (mul c a) (mul a c)))
      (mulcom (b a)))
    (mulcom (c a)))
  (lemul1a (b c a))))

(local theorem lemuld ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le c d))))
  (im G (le (mul a c) (mul b d)))
()
(letrd (G (mul a c) (mul b c) (mul b d))
  (syl (G (le a b) (le (mul a c) (mul b c)))
    (lemul1a (a b c))
    h1)
  (syl (G (le c d) (le (mul b c) (mul b d)))
    (lemul2a (b c d))
    h2)))

(def lt ((a nat ()) (b nat ())) (wff ())
()
(le (suc a) b))

(local theorem lteqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (iff (lt _a1 _b1) (lt _a2 _b2)))
()
(:conv (im _G (iff (lt _a1 _b1) (lt _a2 _b2)))
  (im
    _G
    (iff
      (:unfold lt (_a1 _b1) ()
        (le (suc _a1) _b1))
      (:unfold lt (_a2 _b2) ()
        (le (suc _a2) _b2))))
  (leeqd (_G (suc _a1) (suc _a2) _b1 _b2)
    (suceqd (_G _a1 _a2)
      _ah)
    _bh)))

(local theorem lteq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (iff (lt _a1 _b1) (lt _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (iff (lt _a1 _b1) (lt _a2 _b2)))
  (lteqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem lteq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (lt _a1 b) (lt _a2 b)))
()
(lteqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem lteq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (iff (lt _a1 b) (lt _a2 b)))
()
(lteq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem lteq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (iff (lt a _b1) (lt a _b2)))
()
(lteqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem lteq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (iff (lt a _b1) (lt a _b2)))
()
(lteq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem ltletr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt a b) (im (le b c) (lt a c)))
()
(:conv (im (lt a b) (im (le b c) (lt a c)))
  (im
    (:unfold lt (a b) ()
      (le (suc a) b))
    (im
      (le b c)
      (:unfold lt (a c) ()
        (le (suc a) c))))
  (letr ((suc a) b c))))

(local theorem ltletrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (lt a b)))
   (h2 (im G (le b c))))
  (im G (lt a c))
()
(:conv (im G (lt a c))
  (im
    G
    (:unfold lt (a c) ()
      (le (suc a) c)))
  (letrd (G (suc a) b c)
    (:conv (im G (le (suc a) b))
      (im
        G
        (:sym (:unfold lt (a b) ()
          (le (suc a) b))))
      h1)
    h2)))

(local theorem ltle ((a nat ()) (b nat ())) ()
  (im (lt a b) (le a b))
()
(letrd ((lt a b) a (suc a) b)
  (a1i ((lt a b) (le a (suc a)))
    (lesucid (a)))
  (:conv (im (lt a b) (le (suc a) b))
    (im
      (lt a b)
      (:sym (:unfold lt (a b) ()
        (le (suc a) b))))
    (id ((lt a b))))))

(local theorem ltlei ((a nat ()) (b nat ()))
  ((h (lt a b)))
  (le a b)
()
(ax_mp ((lt a b) (le a b))
  (ltle (a b))
  h))

(local theorem ltled ((G wff ()) (a nat ()) (b nat ()))
  ((h (im G (lt a b))))
  (im G (le a b))
()
(syl (G (lt a b) (le a b))
  (ltle (a b))
  h))

(local theorem lelttr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (im (lt b c) (lt a c)))
()
(sylbi ((le a b) (le (suc a) (suc b)) (im (lt b c) (lt a c)))
  (lesuc (a b))
  (:conv (im (le (suc a) (suc b)) (im (lt b c) (lt a c)))
    (im
      (le (suc a) (suc b))
      (im
        (:unfold lt (b c) ()
          (le (suc b) c))
        (:unfold lt (a c) ()
          (le (suc a) c))))
    (letr ((suc a) (suc b) c)))))

(local theorem lelttrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (lt b c))))
  (im G (lt a c))
()
(sylc (G (le a b) (lt b c) (lt a c))
  (lelttr (a b c))
  h1
  h2))

(local theorem lttr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt a b) (im (lt b c) (lt a c)))
()
(syl ((lt a b) (le a b) (im (lt b c) (lt a c)))
  (lelttr (a b c))
  (ltle (a b))))

(local theorem lttri ((a nat ()) (b nat ()) (c nat ()))
  ((h1 (lt a b))
   (h2 (lt b c)))
  (lt a c)
()
(ax_mp ((lt b c) (lt a c))
  (ax_mp ((lt a b) (im (lt b c) (lt a c)))
    (lttr (a b c))
    h1)
  h2))

(local theorem lttrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (lt a b)))
   (h2 (im G (lt b c))))
  (im G (lt a c))
()
(sylc (G (lt a b) (lt b c) (lt a c))
  (lttr (a b c))
  h1
  h2))

(local theorem ltsucid ((a nat ())) ()
  (lt a (suc a))
()
(:conv (lt a (suc a))
  (:unfold lt (a (suc a)) ()
    (le (suc a) (suc a)))
  (leid ((suc a)))))

(local theorem lt01 ((a nat ())) ()
  (iff (lt (d0) a) (ne a (d0)))
()
(:conv (iff (lt (d0) a) (ne a (d0)))
  (iff
    (:unfold lt ((d0) a) ()
      (le
        (:sym (:unfold d1 () ()
          (suc (d0))))
        a))
    (ne a (d0)))
  (le11 (a))))

(local theorem lt02 ((a nat ())) ()
  (not (lt a (d0)))
()
(ax_mp ((not (eq (suc a) (d0))) (not (lt a (d0))))
  (ax_mp ((im (lt a (d0)) (eq (suc a) (d0))) (im (not (eq (suc a) (d0))) (not (lt a (d0)))))
    (con3 ((lt a (d0)) (eq (suc a) (d0))))
    (ax_mp ((iff (lt a (d0)) (eq (suc a) (d0))) (im (lt a (d0)) (eq (suc a) (d0))))
      (bi1 ((lt a (d0)) (eq (suc a) (d0))))
      (:conv (iff (lt a (d0)) (eq (suc a) (d0)))
        (iff
          (:unfold lt (a (d0)) ()
            (le (suc a) (d0)))
          (eq (suc a) (d0)))
        (le02 ((suc a))))))
  (:conv (not (eq (suc a) (d0)))
    (:sym (:unfold ne ((suc a) (d0)) ()
      (not (eq (suc a) (d0)))))
    (peano1 (a)))))

(local theorem lt01S ((a nat ())) ()
  (lt (d0) (suc a))
()
(mpbir ((ne (suc a) (d0)) (lt (d0) (suc a)))
  (lt01 ((suc a)))
  (peano1 (a))))

(local theorem le11S ((a nat ())) ()
  (le (d1) (suc a))
()
(:conv (le (d1) (suc a))
  (:sym (:unfold lt ((d0) (suc a)) ()
    (le
      (:sym (:unfold d1 () ()
        (suc (d0))))
      (suc a))))
  (lt01S (a))))

(local theorem ltadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a b) (lt (add a c) (add b c)))
()
(ax_mp ((iff (le (add (suc a) c) (add b c)) (lt (add a c) (add b c))) (iff (lt a b) (lt (add a c) (add b c))))
  (ax_mp ((iff (lt a b) (le (add (suc a) c) (add b c))) (im (iff (le (add (suc a) c) (add b c)) (lt (add a c) (add b c))) (iff (lt a b) (lt (add a c) (add b c)))))
    (bitr ((lt a b) (le (add (suc a) c) (add b c)) (lt (add a c) (add b c))))
    (:conv (iff (lt a b) (le (add (suc a) c) (add b c)))
      (iff
        (:unfold lt (a b) ()
          (le (suc a) b))
        (le (add (suc a) c) (add b c)))
      (leadd1 ((suc a) b c))))
  (ax_mp ((eq (add (suc a) c) (suc (add a c))) (iff (le (add (suc a) c) (add b c)) (lt (add a c) (add b c))))
    (:conv (im (eq (add (suc a) c) (suc (add a c))) (iff (le (add (suc a) c) (add b c)) (lt (add a c) (add b c))))
      (im
        (eq (add (suc a) c) (suc (add a c)))
        (iff
          (le (add (suc a) c) (add b c))
          (:unfold lt ((add a c) (add b c)) ()
            (le (suc (add a c)) (add b c)))))
      (leeq1 ((add (suc a) c) (suc (add a c)) (add b c))))
    (addS1 (a c)))))

(local theorem ltadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt b c) (lt (add a b) (add a c)))
()
(ax_mp ((iff (lt (add b a) (add c a)) (lt (add a b) (add a c))) (iff (lt b c) (lt (add a b) (add a c))))
  (ax_mp ((iff (lt b c) (lt (add b a) (add c a))) (im (iff (lt (add b a) (add c a)) (lt (add a b) (add a c))) (iff (lt b c) (lt (add a b) (add a c)))))
    (bitr ((lt b c) (lt (add b a) (add c a)) (lt (add a b) (add a c))))
    (ltadd1 (b c a)))
  (ax_mp ((eq (add c a) (add a c)) (iff (lt (add b a) (add c a)) (lt (add a b) (add a c))))
    (ax_mp ((eq (add b a) (add a b)) (im (eq (add c a) (add a c)) (iff (lt (add b a) (add c a)) (lt (add a b) (add a c)))))
      (lteq ((add b a) (add a b) (add c a) (add a c)))
      (addcom (b a)))
    (addcom (c a)))))

(local theorem ltsuc ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (suc a) (suc b)))
()
(ax_mp ((iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))) (iff (lt a b) (lt (suc a) (suc b))))
  (ax_mp ((iff (lt a b) (lt (add a (d1)) (add b (d1)))) (im (iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))) (iff (lt a b) (lt (suc a) (suc b)))))
    (bitr ((lt a b) (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))))
    (ltadd1 (a b (d1))))
  (ax_mp ((eq (add b (d1)) (suc b)) (iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))))
    (ax_mp ((eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b)))))
      (lteq ((add a (d1)) (suc a) (add b (d1)) (suc b)))
      (add12 (a)))
    (add12 (b)))))

(local theorem leltsuc ((a nat ()) (b nat ())) ()
  (iff (le a b) (lt a (suc b)))
()
(:conv (iff (le a b) (lt a (suc b)))
  (iff
    (le a b)
    (:unfold lt (a (suc b)) ()
      (le (suc a) (suc b))))
  (lesuc (a b))))

(local theorem leltaddd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (lt c d))))
  (im G (lt (add a c) (add b d)))
()
(lelttrd (G (add a c) (add b c) (add b d))
  (sylib (G (le a b) (le (add a c) (add b c)))
    (leadd1 (a b c))
    h1)
  (sylib (G (lt c d) (lt (add b c) (add b d)))
    (ltadd2 (b c d))
    h2)))

(local theorem ltleaddd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (lt a b)))
   (h2 (im G (le c d))))
  (im G (lt (add a c) (add b d)))
()
(ltletrd (G (add a c) (add b c) (add b d))
  (sylib (G (lt a b) (lt (add a c) (add b c)))
    (ltadd1 (a b c))
    h1)
  (sylib (G (le c d) (le (add b c) (add b d)))
    (leadd2 (b c d))
    h2)))

(local theorem ltirr ((a nat ())) ()
  (not (lt a a))
()
(:let H1 (add01 (a))
(mtbi ((lt (d0) (d0)) (lt a a))
  (ax_mp ((iff (lt (add (d0) a) (add (d0) a)) (lt a a)) (iff (lt (d0) (d0)) (lt a a)))
    (ax_mp ((iff (lt (d0) (d0)) (lt (add (d0) a) (add (d0) a))) (im (iff (lt (add (d0) a) (add (d0) a)) (lt a a)) (iff (lt (d0) (d0)) (lt a a))))
      (bitr ((lt (d0) (d0)) (lt (add (d0) a) (add (d0) a)) (lt a a)))
      (ltadd1 ((d0) (d0) a)))
    (ax_mp ((eq (add (d0) a) a) (iff (lt (add (d0) a) (add (d0) a)) (lt a a)))
      (ax_mp ((eq (add (d0) a) a) (im (eq (add (d0) a) a) (iff (lt (add (d0) a) (add (d0) a)) (lt a a))))
        (lteq ((add (d0) a) a (add (d0) a) a))
        H1)
      H1))
  (lt02 ((d0))))))

(local theorem ltne ((a nat ()) (b nat ())) ()
  (im (lt a b) (ne a b))
()
(mpi ((lt a b) (not (lt b b)) (ne a b))
  (ltirr (b))
  (:conv (im (lt a b) (im (not (lt b b)) (ne a b)))
    (im
      (lt a b)
      (im
        (not (lt b b))
        (:unfold ne (a b) ()
          (not (eq a b)))))
    (con3d ((lt a b) (eq a b) (lt b b))
      (com12 ((eq a b) (lt a b) (lt b b))
        (bi1d ((eq a b) (lt a b) (lt b b))
          (lteq1 (a b b))))))))

(local theorem ltner ((a nat ()) (b nat ())) ()
  (im (lt a b) (ne b a))
()
(syl ((lt a b) (ne a b) (ne b a))
  (necom (a b))
  (ltne (a b))))

(local theorem ltnei ((a nat ()) (b nat ()))
  ((h (lt a b)))
  (ne a b)
()
(ax_mp ((lt a b) (ne a b))
  (ltne (a b))
  h))

(local theorem ltneri ((a nat ()) (b nat ()))
  ((h (lt a b)))
  (ne b a)
()
(ax_mp ((lt a b) (ne b a))
  (ltner (a b))
  h))

(local theorem d0lt1 () ()
  (lt (d0) (d1))
()
(:conv (lt (d0) (d1))
  (lt
    (d0)
    (:unfold d1 () ()
      (suc (d0))))
  (lt01S ((d0)))))

(local theorem d0lt2 () ()
  (lt (d0) (d2))
()
(:conv (lt (d0) (d2))
  (lt
    (d0)
    (:unfold d2 () ()
      (suc (d1))))
  (lt01S ((d1)))))

(local theorem d1lt2 () ()
  (lt (d1) (d2))
()
(mpbi ((lt (d0) (d1)) (lt (d1) (d2)))
  (:conv (iff (lt (d0) (d1)) (lt (d1) (d2)))
    (iff
      (lt (d0) (d1))
      (lt
        (:unfold d1 () ()
          (suc (d0)))
        (:unfold d2 () ()
          (suc (d1)))))
    (ltsuc ((d0) (d1))))
  (d0lt1 ())))

(local theorem lt12 ((a nat ())) ()
  (iff (lt a (d1)) (eq a (d0)))
()
(ax_mp ((iff (le a (d0)) (eq a (d0))) (iff (lt a (d1)) (eq a (d0))))
  (ax_mp ((iff (le a (d0)) (lt a (d1))) (im (iff (le a (d0)) (eq a (d0))) (iff (lt a (d1)) (eq a (d0)))))
    (bitr3 ((lt a (d1)) (le a (d0)) (eq a (d0))))
    (:conv (iff (le a (d0)) (lt a (d1)))
      (iff
        (le a (d0))
        (lt
          a
          (:unfold d1 () ()
            (suc (d0)))))
      (leltsuc (a (d0)))))
  (le02 (a))))

(local theorem nlesubeq0 ((a nat ()) (b nat ())) ()
  (im (not (le b a)) (eq (sub a b) (d0)))
((x nat))
(:conv (im (not (le b a)) (eq (sub a b) (d0)))
  (im
    (not (le b a))
    (eq
      (:unfold sub (a b) (x)
        (the (ab x (eq (add b x) a))))
      (d0)))
  (eqthe0abd ((not (le b a)) x (eq (add b x) a))
    (syl5 ((not (le b a)) (eq (add b x) a) (le b a) (eq x (d0)))
      (mpbii ((eq (add b x) a) (le b (add b x)) (le b a))
        (leaddid1 (b x))
        (leeq2 (b (add b x) a)))
      (absurd ((le b a) (eq x (d0))))))))

(local theorem subleid ((a nat ()) (b nat ())) ()
  (le (sub a b) a)
()
(cases ((le b a) (le (sub a b) a))
  (mpbii ((le b a) (le (sub a b) (add (sub a b) b)) (le (sub a b) a))
    (leaddid1 ((sub a b) b))
    (leeq2d ((le b a) (sub a b) (add (sub a b) b) a)
      (npcan (a b))))
  (mpbiri ((not (le b a)) (le (d0) a) (le (sub a b) a))
    (le01 (a))
    (leeq1d ((not (le b a)) (sub a b) (d0) a)
      (nlesubeq0 (a b))))))

(local theorem subltid ((a nat ()) (b nat ())) ()
  (im (an (lt (d0) a) (lt (d0) b)) (lt (sub a b) a))
()
(casesda ((an (lt (d0) a) (lt (d0) b)) (le b a) (lt (sub a b) a))
  (sylibr ((an (an (lt (d0) a) (lt (d0) b)) (le b a)) (lt (add (sub a b) b) (add a b)) (lt (sub a b) a))
    (ltadd1 ((sub a b) a b))
    (mpbird ((an (an (lt (d0) a) (lt (d0) b)) (le b a)) (lt (add a (d0)) (add a b)) (lt (add (sub a b) b) (add a b)))
      (anwr ((an (lt (d0) a) (lt (d0) b)) (le b a) (iff (lt (add (sub a b) b) (add a b)) (lt (add a (d0)) (add a b))))
        (lteq1d ((le b a) (add (sub a b) b) (add a (d0)) (add a b))
          (syl6eqr ((le b a) (add (sub a b) b) a (add a (d0)))
            (add0 (a))
            (npcan (a b)))))
      (sylib ((an (an (lt (d0) a) (lt (d0) b)) (le b a)) (lt (d0) b) (lt (add a (d0)) (add a b)))
        (ltadd2 (a (d0) b))
        (anlr ((lt (d0) a) (lt (d0) b) (le b a))))))
  (mpbird ((an (an (lt (d0) a) (lt (d0) b)) (not (le b a))) (lt (d0) a) (lt (sub a b) a))
    (anwr ((an (lt (d0) a) (lt (d0) b)) (not (le b a)) (iff (lt (sub a b) a) (lt (d0) a)))
      (lteq1d ((not (le b a)) (sub a b) (d0) a)
        (nlesubeq0 (a b))))
    (anll ((lt (d0) a) (lt (d0) b) (not (le b a)))))))

(local theorem lesub1i ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (le (sub a c) (sub b c)))
()
(cases ((le c a) (im (le a b) (le (sub a c) (sub b c))))
  (exp ((le c a) (le a b) (le (sub a c) (sub b c)))
    (sylibr ((an (le c a) (le a b)) (le (add (sub a c) c) (add (sub b c) c)) (le (sub a c) (sub b c)))
      (leadd1 ((sub a c) (sub b c) c))
      (mpbird ((an (le c a) (le a b)) (le a b) (le (add (sub a c) c) (add (sub b c) c)))
        (leeqd ((an (le c a) (le a b)) (add (sub a c) c) a (add (sub b c) c) b)
          (anwl ((le c a) (le a b) (eq (add (sub a c) c) a))
            (npcan (a c)))
          (syl ((an (le c a) (le a b)) (le c b) (eq (add (sub b c) c) b))
            (npcan (b c))
            (imp ((le c a) (le a b) (le c b))
              (letr (c a b)))))
        (anr ((le c a) (le a b))))))
  (a1d ((not (le c a)) (le (sub a c) (sub b c)) (le a b))
    (mpbiri ((not (le c a)) (le (d0) (sub b c)) (le (sub a c) (sub b c)))
      (le01 ((sub b c)))
      (leeq1d ((not (le c a)) (sub a c) (d0) (sub b c))
        (nlesubeq0 (a c)))))))

(local theorem leloe ((a nat ()) (b nat ())) ()
  (iff (le a b) (or (lt a b) (eq a b)))
((x nat) (y nat))
(ibii ((le a b) (or (lt a b) (eq a b)))
  (:conv (im (le a b) (or (lt a b) (eq a b)))
    (im
      (:unfold le (a b) (x)
        (ex x (eq (add a x) b)))
      (or (lt a b) (eq a b)))
    (eex (x (eq (add a x) b) (or (lt a b) (eq a b)))
      (casesd ((eq (add a x) b) (eq x (d0)) (or (lt a b) (eq a b)))
        (exp ((eq (add a x) b) (eq x (d0)) (or (lt a b) (eq a b)))
          (orrd ((an (eq (add a x) b) (eq x (d0))) (lt a b) (eq a b))
            (syl5eqr ((an (eq (add a x) b) (eq x (d0))) a (add a (d0)) b)
              (add0 (a))
              (eqtr3d ((an (eq (add a x) b) (eq x (d0))) (add a (d0)) (add a x) b)
                (anwr ((eq (add a x) b) (eq x (d0)) (eq (add a x) (add a (d0))))
                  (addeq2 (a x (d0))))
                (anl ((eq (add a x) b) (eq x (d0))))))))
        (syl5bi ((eq (add a x) b) (not (eq x (d0))) (ex y (eq x (suc y))) (or (lt a b) (eq a b)))
          (:conv (iff (not (eq x (d0))) (ex y (eq x (suc y))))
            (iff
              (:sym (:unfold ne (x (d0)) ()
                (not (eq x (d0)))))
              (ex y (eq x (suc y))))
            (exsuc (y x)))
          (eexda (y (eq (add a x) b) (eq x (suc y)) (or (lt a b) (eq a b)))
            (orld ((an (eq (add a x) b) (eq x (suc y))) (lt a b) (eq a b))
              (mpbii ((an (eq (add a x) b) (eq x (suc y))) (le (suc a) (add (suc a) y)) (lt a b))
                (leaddid1 ((suc a) y))
                (:conv (im (an (eq (add a x) b) (eq x (suc y))) (iff (le (suc a) (add (suc a) y)) (lt a b)))
                  (im
                    (an (eq (add a x) b) (eq x (suc y)))
                    (iff
                      (le (suc a) (add (suc a) y))
                      (:unfold lt (a b) ()
                        (le (suc a) b))))
                  (leeq2d ((an (eq (add a x) b) (eq x (suc y))) (suc a) (add (suc a) y) b)
                    (syl5eq ((an (eq (add a x) b) (eq x (suc y))) (add (suc a) y) (add a (suc y)) b)
                      (addSass (a y))
                      (eqtr3d ((an (eq (add a x) b) (eq x (suc y))) (add a (suc y)) (add a x) b)
                        (anwr ((eq (add a x) b) (eq x (suc y)) (eq (add a x) (add a (suc y))))
                          (addeq2 (a x (suc y))))
                        (anl ((eq (add a x) b) (eq x (suc y)))))))))))))))
  (ax_mp ((im (eq a b) (le a b)) (im (or (lt a b) (eq a b)) (le a b)))
    (ax_mp ((im (lt a b) (le a b)) (im (im (eq a b) (le a b)) (im (or (lt a b) (eq a b)) (le a b))))
      (eor ((lt a b) (eq a b) (le a b)))
      (ltle (a b)))
    (eqle (a b)))))

(local theorem ltlene ((a nat ()) (b nat ())) ()
  (iff (lt a b) (an (le a b) (ne a b)))
()
(ibii ((lt a b) (an (le a b) (ne a b)))
  (iand ((lt a b) (le a b) (ne a b))
    (ltle (a b))
    (ltne (a b)))
  (imp ((le a b) (ne a b) (lt a b))
    (:conv (im (le a b) (im (ne a b) (lt a b)))
      (im
        (le a b)
        (im
          (:unfold ne (a b) ()
            (not (eq a b)))
          (lt a b)))
      (con1d ((le a b) (lt a b) (eq a b))
        (ax_mp ((iff (le a b) (im (not (lt a b)) (eq a b))) (im (le a b) (im (not (lt a b)) (eq a b))))
          (bi1 ((le a b) (im (not (lt a b)) (eq a b))))
          (:conv (iff (le a b) (im (not (lt a b)) (eq a b)))
            (iff
              (le a b)
              (:sym (:unfold or ((lt a b) (eq a b)) ()
                (im (not (lt a b)) (eq a b)))))
            (leloe (a b)))))))))

(local theorem ltlenle ((a nat ()) (b nat ())) ()
  (iff (lt a b) (an (le a b) (not (le b a))))
()
(ibii ((lt a b) (an (le a b) (not (le b a))))
  (iand ((lt a b) (le a b) (not (le b a)))
    (ltle (a b))
    (mtd ((lt a b) (lt a a) (le b a))
      (a1i ((lt a b) (not (lt a a)))
        (ltirr (a)))
      (ltletr (a b a))))
  (sylibr ((an (le a b) (not (le b a))) (an (le a b) (ne a b)) (lt a b))
    (ltlene (a b))
    (iand ((an (le a b) (not (le b a))) (le a b) (ne a b))
      (anl ((le a b) (not (le b a))))
      (anwr ((le a b) (not (le b a)) (ne a b))
        (ax_mp ((im (eq a b) (le b a)) (im (not (le b a)) (ne a b)))
          (:conv (im (im (eq a b) (le b a)) (im (not (le b a)) (ne a b)))
            (im
              (im (eq a b) (le b a))
              (im
                (not (le b a))
                (:unfold ne (a b) ()
                  (not (eq a b)))))
            (con3 ((eq a b) (le b a))))
          (eqler (a b))))))))

(local theorem ltorle ((a nat ()) (b nat ())) ()
  (or (lt a b) (le b a))
((x nat) (y nat))
(ind (x y b (or (lt a x) (le x a)) (or (lt a (d0)) (le (d0) a)) (or (lt a b) (le b a)) (or (lt a y) (le y a)) (or (lt a (suc y)) (le (suc y) a)))
  (oreqd ((eq x b) (lt a x) (lt a b) (le x a) (le b a))
    (lteq2 (a x b))
    (leeq1 (x b a)))
  (oreqd ((eq x (d0)) (lt a x) (lt a (d0)) (le x a) (le (d0) a))
    (lteq2 (a x (d0)))
    (leeq1 (x (d0) a)))
  (oreqd ((eq x y) (lt a x) (lt a y) (le x a) (le y a))
    (lteq2 (a x y))
    (leeq1 (x y a)))
  (oreqd ((eq x (suc y)) (lt a x) (lt a (suc y)) (le x a) (le (suc y) a))
    (lteq2 (a x (suc y)))
    (leeq1 (x (suc y) a)))
  (ax_mp ((le (d0) a) (or (lt a (d0)) (le (d0) a)))
    (orr ((lt a (d0)) (le (d0) a)))
    (le01 (a)))
  (ax_mp ((im (le y a) (or (lt a (suc y)) (le (suc y) a))) (im (or (lt a y) (le y a)) (or (lt a (suc y)) (le (suc y) a))))
    (ax_mp ((im (lt a y) (or (lt a (suc y)) (le (suc y) a))) (im (im (le y a) (or (lt a (suc y)) (le (suc y) a))) (im (or (lt a y) (le y a)) (or (lt a (suc y)) (le (suc y) a)))))
      (eor ((lt a y) (le y a) (or (lt a (suc y)) (le (suc y) a))))
      (orld ((lt a y) (lt a (suc y)) (le (suc y) a))
        (mpi ((lt a y) (lt y (suc y)) (lt a (suc y)))
          (ltsucid (y))
          (lttr (a y (suc y))))))
    (:conv (im (le y a) (or (lt a (suc y)) (le (suc y) a)))
      (im
        (le y a)
        (:unfold or ((lt a (suc y)) (le (suc y) a)) ()
          (im (not (lt a (suc y))) (le (suc y) a))))
      (syl5 ((le y a) (not (lt a (suc y))) (not (le a y)) (le (suc y) a))
        (ax_mp ((im (le a y) (lt a (suc y))) (im (not (lt a (suc y))) (not (le a y))))
          (con3 ((le a y) (lt a (suc y))))
          (ax_mp ((iff (le a y) (lt a (suc y))) (im (le a y) (lt a (suc y))))
            (bi1 ((le a y) (lt a (suc y))))
            (:conv (iff (le a y) (lt a (suc y)))
              (iff
                (le a y)
                (:unfold lt (a (suc y)) ()
                  (le (suc a) (suc y))))
              (lesuc (a y)))))
        (exp ((le y a) (not (le a y)) (le (suc y) a))
          (ax_mp ((iff (le (suc y) a) (an (le y a) (not (le a y)))) (im (an (le y a) (not (le a y))) (le (suc y) a)))
            (bi2 ((le (suc y) a) (an (le y a) (not (le a y)))))
            (:conv (iff (le (suc y) a) (an (le y a) (not (le a y))))
              (iff
                (:sym (:unfold lt (y a) ()
                  (le (suc y) a)))
                (an (le y a) (not (le a y))))
              (ltlenle (y a))))))))))

(local theorem leorlt ((a nat ()) (b nat ())) ()
  (or (le a b) (lt b a))
()
(ax_mp ((or (lt b a) (le a b)) (or (le a b) (lt b a)))
  (orcom ((lt b a) (le a b)))
  (ltorle (b a))))

(local theorem ltnle ((a nat ()) (b nat ())) ()
  (iff (lt a b) (not (le b a)))
()
(ibii ((lt a b) (not (le b a)))
  (sylbi ((lt a b) (an (le a b) (not (le b a))) (not (le b a)))
    (ltlenle (a b))
    (anr ((le a b) (not (le b a)))))
  (:conv (im (not (le b a)) (lt a b))
    (:sym (:unfold or ((le b a) (lt a b)) ()
      (im (not (le b a)) (lt a b))))
    (leorlt (b a)))))

(local theorem lenlt ((a nat ()) (b nat ())) ()
  (iff (le a b) (not (lt b a)))
()
(ax_mp ((iff (lt b a) (not (le a b))) (iff (le a b) (not (lt b a))))
  (con2b ((lt b a) (le a b)))
  (ltnle (b a))))

(local theorem ltnlt ((a nat ()) (b nat ())) ()
  (im (lt a b) (not (lt b a)))
()
(sylbi ((lt a b) (not (le b a)) (not (lt b a)))
  (ltnle (a b))
  (ax_mp ((im (lt b a) (le b a)) (im (not (le b a)) (not (lt b a))))
    (con3 ((lt b a) (le b a)))
    (ltle (b a)))))

(local theorem leorle ((a nat ()) (b nat ())) ()
  (or (le a b) (le b a))
()
(:conv (or (le a b) (le b a))
  (:unfold or ((le a b) (le b a)) ()
    (im (not (le a b)) (le b a)))
  (syl ((not (le a b)) (lt b a) (le b a))
    (ltle (b a))
    (:conv (im (not (le a b)) (lt b a))
      (:sym (:unfold or ((le a b) (lt b a)) ()
        (im (not (le a b)) (lt b a))))
      (leorlt (a b))))))

(local theorem neltlt ((a nat ()) (b nat ())) ()
  (iff (ne a b) (or (lt a b) (lt b a)))
()
(ibii ((ne a b) (or (lt a b) (lt b a)))
  (mpi ((ne a b) (or (lt a b) (le b a)) (or (lt a b) (lt b a)))
    (ltorle (a b))
    (:conv (im (ne a b) (im (or (lt a b) (le b a)) (or (lt a b) (lt b a))))
      (im
        (ne a b)
        (im
          (:unfold or ((lt a b) (le b a)) ()
            (im (not (lt a b)) (le b a)))
          (:unfold or ((lt a b) (lt b a)) ()
            (im (not (lt a b)) (lt b a)))))
      (imim2d ((ne a b) (not (lt a b)) (le b a) (lt b a))
        (rsyl ((ne a b) (ne b a) (im (le b a) (lt b a)))
          (necom (a b))
          (com12 ((le b a) (ne b a) (lt b a))
            (exp ((le b a) (ne b a) (lt b a))
              (bi2i ((lt b a) (an (le b a) (ne b a)))
                (ltlene (b a)))))))))
  (ax_mp ((im (lt b a) (ne a b)) (im (or (lt a b) (lt b a)) (ne a b)))
    (ax_mp ((im (lt a b) (ne a b)) (im (im (lt b a) (ne a b)) (im (or (lt a b) (lt b a)) (ne a b))))
      (eor ((lt a b) (lt b a) (ne a b)))
      (ltne (a b)))
    (ltner (b a)))))

(local theorem eqalle2 ((a nat ()) (b nat ()) (i nat)) ()
  (iff (eq a b) (al i (iff (le a i) (le b i))))
()
(ibii ((eq a b) (al i (iff (le a i) (le b i))))
  (iald (i (eq a b) (iff (le a i) (le b i)))
    (leeq1 (a b i)))
  (leasymd ((al i (iff (le a i) (le b i))) a b)
    (mpbiri ((al i (iff (le a i) (le b i))) (le b b) (le a b))
      (leid (b))
      (eale (i b (iff (le a i) (le b i)) (iff (le a b) (le b b)))
        (bieqd ((eq i b) (le a i) (le a b) (le b i) (le b b))
          (leeq2 (a i b))
          (leeq2 (b i b)))))
    (mpbii ((al i (iff (le a i) (le b i))) (le a a) (le b a))
      (leid (a))
      (eale (i a (iff (le a i) (le b i)) (iff (le a a) (le b a)))
        (bieqd ((eq i a) (le a i) (le a a) (le b i) (le b a))
          (leeq2 (a i a))
          (leeq2 (b i a))))))))

(local theorem eqallt1 ((a nat ()) (b nat ()) (i nat)) ()
  (iff (eq a b) (al i (iff (lt i a) (lt i b))))
()
(ax_mp ((iff (al i (iff (le a i) (le b i))) (al i (iff (lt i a) (lt i b)))) (iff (eq a b) (al i (iff (lt i a) (lt i b)))))
  (ax_mp ((iff (eq a b) (al i (iff (le a i) (le b i)))) (im (iff (al i (iff (le a i) (le b i))) (al i (iff (lt i a) (lt i b)))) (iff (eq a b) (al i (iff (lt i a) (lt i b))))))
    (bitr ((eq a b) (al i (iff (le a i) (le b i))) (al i (iff (lt i a) (lt i b)))))
    (eqalle2 (a b i)))
  (aleqi (i (iff (le a i) (le b i)) (iff (lt i a) (lt i b)))
    (ax_mp ((iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i)))) (iff (iff (le a i) (le b i)) (iff (lt i a) (lt i b))))
      (ax_mp ((iff (iff (le a i) (le b i)) (iff (not (le a i)) (not (le b i)))) (im (iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i)))) (iff (iff (le a i) (le b i)) (iff (lt i a) (lt i b)))))
        (bitr4 ((iff (le a i) (le b i)) (iff (not (le a i)) (not (le b i))) (iff (lt i a) (lt i b))))
        (con3bb ((le a i) (le b i))))
      (ax_mp ((iff (lt i b) (not (le b i))) (iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i)))))
        (ax_mp ((iff (lt i a) (not (le a i))) (im (iff (lt i b) (not (le b i))) (iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i))))))
          (bieq ((lt i a) (not (le a i)) (lt i b) (not (le b i))))
          (ltnle (i a)))
        (ltnle (i b)))))))

(local theorem ltsubeq0 ((a nat ()) (b nat ())) ()
  (im (lt a b) (eq (sub a b) (d0)))
()
(sylbi ((lt a b) (not (le b a)) (eq (sub a b) (d0)))
  (ltnle (a b))
  (nlesubeq0 (a b))))

(local theorem lesubeq0 ((a nat ()) (b nat ())) ()
  (iff (le a b) (eq (sub a b) (d0)))
()
(ibii ((le a b) (eq (sub a b) (d0)))
  (sylbi ((le a b) (or (lt a b) (eq a b)) (eq (sub a b) (d0)))
    (leloe (a b))
    (ax_mp ((im (eq a b) (eq (sub a b) (d0))) (im (or (lt a b) (eq a b)) (eq (sub a b) (d0))))
      (ax_mp ((im (lt a b) (eq (sub a b) (d0))) (im (im (eq a b) (eq (sub a b) (d0))) (im (or (lt a b) (eq a b)) (eq (sub a b) (d0)))))
        (eor ((lt a b) (eq a b) (eq (sub a b) (d0))))
        (ltsubeq0 (a b)))
      (syl6eq ((eq a b) (sub a b) (sub b b) (d0))
        (subid (b))
        (subeq1 (a b b)))))
  (syla ((eq (sub a b) (d0)) (not (le a b)) (le a b) (le a b))
    (contra ((le a b)))
    (syl ((an (eq (sub a b) (d0)) (not (le a b))) (eq a b) (le a b))
      (eqle (a b))
      (eqtr3d ((an (eq (sub a b) (d0)) (not (le a b))) a (add (sub a b) b) b)
        (syl ((an (eq (sub a b) (d0)) (not (le a b))) (le b a) (eq (add (sub a b) b) a))
          (npcan (a b))
          (anwr ((eq (sub a b) (d0)) (not (le a b)) (le b a))
            (:conv (im (not (le a b)) (le b a))
              (:sym (:unfold or ((le a b) (le b a)) ()
                (im (not (le a b)) (le b a))))
              (leorle (a b)))))
        (syl6eq ((an (eq (sub a b) (d0)) (not (le a b))) (add (sub a b) b) (add (d0) b) b)
          (add01 (b))
          (anwl ((eq (sub a b) (d0)) (not (le a b)) (eq (add (sub a b) b) (add (d0) b)))
            (addeq1 ((sub a b) (d0) b)))))))))

(local theorem subpos ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (d0) (sub b a)))
()
(ax_mp ((iff (not (le b a)) (lt (d0) (sub b a))) (iff (lt a b) (lt (d0) (sub b a))))
  (ax_mp ((iff (lt a b) (not (le b a))) (im (iff (not (le b a)) (lt (d0) (sub b a))) (iff (lt a b) (lt (d0) (sub b a)))))
    (bitr ((lt a b) (not (le b a)) (lt (d0) (sub b a))))
    (ltnle (a b)))
  (ax_mp ((iff (lt (d0) (sub b a)) (not (eq (sub b a) (d0)))) (iff (not (le b a)) (lt (d0) (sub b a))))
    (ax_mp ((iff (not (le b a)) (not (eq (sub b a) (d0)))) (im (iff (lt (d0) (sub b a)) (not (eq (sub b a) (d0)))) (iff (not (le b a)) (lt (d0) (sub b a)))))
      (bitr4 ((not (le b a)) (not (eq (sub b a) (d0))) (lt (d0) (sub b a))))
      (ax_mp ((iff (le b a) (eq (sub b a) (d0))) (iff (not (le b a)) (not (eq (sub b a) (d0)))))
        (noteq ((le b a) (eq (sub b a) (d0))))
        (lesubeq0 (b a))))
    (:conv (iff (lt (d0) (sub b a)) (not (eq (sub b a) (d0))))
      (iff
        (lt (d0) (sub b a))
        (:sym (:unfold ne ((sub b a) (d0)) ()
          (not (eq (sub b a) (d0))))))
      (lt01 ((sub b a)))))))

(local theorem lesubadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le (sub a b) c) (le a (add b c)))
()
(ibii ((le (sub a b) c) (le a (add b c)))
  (ax_mp ((or (le a b) (le b a)) (im (le (sub a b) c) (le a (add b c))))
    (ax_mp ((im (le b a) (im (le (sub a b) c) (le a (add b c)))) (im (or (le a b) (le b a)) (im (le (sub a b) c) (le a (add b c)))))
      (ax_mp ((im (le a b) (im (le (sub a b) c) (le a (add b c)))) (im (im (le b a) (im (le (sub a b) c) (le a (add b c)))) (im (or (le a b) (le b a)) (im (le (sub a b) c) (le a (add b c))))))
        (eor ((le a b) (le b a) (im (le (sub a b) c) (le a (add b c)))))
        (a1d ((le a b) (le a (add b c)) (le (sub a b) c))
          (mpi ((le a b) (le b (add b c)) (le a (add b c)))
            (leaddid1 (b c))
            (letr (a b (add b c))))))
      (bi1d ((le b a) (le (sub a b) c) (le a (add b c)))
        (syl5bb ((le b a) (le (sub a b) c) (le (add b (sub a b)) (add b c)) (le a (add b c)))
          (leadd2 (b (sub a b) c))
          (leeq1d ((le b a) (add b (sub a b)) a (add b c))
            (pncan3 (b a))))))
    (leorle (a b)))
  (sylib ((le a (add b c)) (le (sub a b) (sub (add b c) b)) (le (sub a b) c))
    (ax_mp ((eq (sub (add b c) b) c) (iff (le (sub a b) (sub (add b c) b)) (le (sub a b) c)))
      (leeq2 ((sub a b) (sub (add b c) b) c))
      (pncan2 (b c)))
    (lesub1i (a (add b c) b)))))

(local theorem lesubadd ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le (sub a b) c) (le a (add c b)))
()
(ax_mp ((iff (le a (add b c)) (le a (add c b))) (iff (le (sub a b) c) (le a (add c b))))
  (ax_mp ((iff (le (sub a b) c) (le a (add b c))) (im (iff (le a (add b c)) (le a (add c b))) (iff (le (sub a b) c) (le a (add c b)))))
    (bitr ((le (sub a b) c) (le a (add b c)) (le a (add c b))))
    (lesubadd2 (a b c)))
  (ax_mp ((eq (add b c) (add c b)) (iff (le a (add b c)) (le a (add c b))))
    (leeq2 (a (add b c) (add c b)))
    (addcom (b c)))))

(local theorem ltaddsub ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt (add a b) c) (lt a (sub c b)))
()
(ax_mp ((iff (lt a (sub c b)) (not (le c (add a b)))) (iff (lt (add a b) c) (lt a (sub c b))))
  (ax_mp ((iff (lt (add a b) c) (not (le c (add a b)))) (im (iff (lt a (sub c b)) (not (le c (add a b)))) (iff (lt (add a b) c) (lt a (sub c b)))))
    (bitr4 ((lt (add a b) c) (not (le c (add a b))) (lt a (sub c b))))
    (ltnle ((add a b) c)))
  (ax_mp ((iff (not (le (sub c b) a)) (not (le c (add a b)))) (iff (lt a (sub c b)) (not (le c (add a b)))))
    (ax_mp ((iff (lt a (sub c b)) (not (le (sub c b) a))) (im (iff (not (le (sub c b) a)) (not (le c (add a b)))) (iff (lt a (sub c b)) (not (le c (add a b))))))
      (bitr ((lt a (sub c b)) (not (le (sub c b) a)) (not (le c (add a b)))))
      (ltnle (a (sub c b))))
    (noteqi ((le (sub c b) a) (le c (add a b)))
      (lesubadd (c b a))))))

(local theorem ltaddsub2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt (add a b) c) (lt b (sub c a)))
()
(ax_mp ((iff (lt (add b a) c) (lt b (sub c a))) (iff (lt (add a b) c) (lt b (sub c a))))
  (ax_mp ((iff (lt (add a b) c) (lt (add b a) c)) (im (iff (lt (add b a) c) (lt b (sub c a))) (iff (lt (add a b) c) (lt b (sub c a)))))
    (bitr ((lt (add a b) c) (lt (add b a) c) (lt b (sub c a))))
    (ax_mp ((eq (add a b) (add b a)) (iff (lt (add a b) c) (lt (add b a) c)))
      (lteq1 ((add a b) (add b a) c))
      (addcom (a b))))
  (ltaddsub (b a c))))

(local theorem ltsubadd ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b a) (iff (lt (sub a b) c) (lt a (add c b))))
()
(syl5bb ((le b a) (lt (sub a b) c) (lt (add (sub a b) b) (add c b)) (lt a (add c b)))
  (ltadd1 ((sub a b) c b))
  (lteq1d ((le b a) (add (sub a b) b) a (add c b))
    (npcan (a b)))))

(local theorem ltsubadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b a) (iff (lt (sub a b) c) (lt a (add b c))))
()
(syl6bb ((le b a) (lt (sub a b) c) (lt a (add c b)) (lt a (add b c)))
  (ax_mp ((eq (add c b) (add b c)) (iff (lt a (add c b)) (lt a (add b c))))
    (lteq2 (a (add c b) (add b c)))
    (addcom (c b)))
  (ltsubadd (a b c))))

(local theorem leaddsub ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b c) (iff (le (add a b) c) (le a (sub c b))))
()
(bitr4g ((le b c) (not (lt c (add a b))) (not (lt (sub c b) a)) (le (add a b) c) (le a (sub c b)))
  (lenlt ((add a b) c))
  (lenlt (a (sub c b)))
  (noteqd ((le b c) (lt c (add a b)) (lt (sub c b) a))
    (bicomd ((le b c) (lt (sub c b) a) (lt c (add a b)))
      (ltsubadd (c b a))))))

(local theorem leaddsub2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a c) (iff (le (add a b) c) (le b (sub c a))))
()
(syl5bb ((le a c) (le (add a b) c) (le (add b a) c) (le b (sub c a)))
  (ax_mp ((eq (add a b) (add b a)) (iff (le (add a b) c) (le (add b a) c)))
    (leeq1 ((add a b) (add b a) c))
    (addcom (a b)))
  (leaddsub (b a c))))

(local theorem leaddsubi ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le (add a b) c) (le a (sub c b)))
()
(mpbid ((le (add a b) c) (le (add a b) c) (le a (sub c b)))
  (syl ((le (add a b) c) (le b c) (iff (le (add a b) c) (le a (sub c b))))
    (leaddsub (a b c))
    (ax_mp ((le b (add a b)) (im (le (add a b) c) (le b c)))
      (letr (b (add a b) c))
      (leaddid2 (b a))))
  (id ((le (add a b) c)))))

(local theorem leaddsub2i ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le (add a b) c) (le b (sub c a)))
()
(sylbi ((le (add a b) c) (le (add b a) c) (le b (sub c a)))
  (ax_mp ((eq (add a b) (add b a)) (iff (le (add a b) c) (le (add b a) c)))
    (leeq1 ((add a b) (add b a) c))
    (addcom (a b)))
  (leaddsubi (b a c))))

(local theorem mulsub ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))
()
(ax_mp ((or (le c b) (le b c)) (eq (mul a (sub b c)) (sub (mul a b) (mul a c))))
  (ax_mp ((im (le b c) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))) (im (or (le c b) (le b c)) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))))
    (ax_mp ((im (le c b) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))) (im (im (le b c) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))) (im (or (le c b) (le b c)) (eq (mul a (sub b c)) (sub (mul a b) (mul a c))))))
      (eor ((le c b) (le b c) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))))
      (eqcomd ((le c b) (sub (mul a b) (mul a c)) (mul a (sub b c)))
        (syl ((le c b) (eq (add (mul a (sub b c)) (mul a c)) (mul a b)) (eq (sub (mul a b) (mul a c)) (mul a (sub b c))))
          (eqsub1 ((mul a (sub b c)) (mul a c) (mul a b)))
          (syl5eqr ((le c b) (add (mul a (sub b c)) (mul a c)) (mul a (add (sub b c) c)) (mul a b))
            (muladd (a (sub b c) c))
            (muleq2d ((le c b) a (add (sub b c) c) b)
              (npcan (b c)))))))
    (eqtr4d ((le b c) (mul a (sub b c)) (d0) (sub (mul a b) (mul a c)))
      (syl6eq ((le b c) (mul a (sub b c)) (mul a (d0)) (d0))
        (mul02 (a))
        (sylbi ((le b c) (eq (sub b c) (d0)) (eq (mul a (sub b c)) (mul a (d0))))
          (lesubeq0 (b c))
          (muleq2 (a (sub b c) (d0)))))
      (sylib ((le b c) (le (mul a b) (mul a c)) (eq (sub (mul a b) (mul a c)) (d0)))
        (lesubeq0 ((mul a b) (mul a c)))
        (lemul2a (a b c)))))
  (leorle (c b))))

(local theorem submul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (sub a b) c) (sub (mul a c) (mul b c)))
()
(ax_mp ((eq (mul c (sub a b)) (sub (mul a c) (mul b c))) (eq (mul (sub a b) c) (sub (mul a c) (mul b c))))
  (ax_mp ((eq (mul (sub a b) c) (mul c (sub a b))) (im (eq (mul c (sub a b)) (sub (mul a c) (mul b c))) (eq (mul (sub a b) c) (sub (mul a c) (mul b c)))))
    (eqtr ((mul (sub a b) c) (mul c (sub a b)) (sub (mul a c) (mul b c))))
    (mulcom ((sub a b) c)))
  (ax_mp ((eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))) (eq (mul c (sub a b)) (sub (mul a c) (mul b c))))
    (ax_mp ((eq (mul c (sub a b)) (sub (mul c a) (mul c b))) (im (eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))) (eq (mul c (sub a b)) (sub (mul a c) (mul b c)))))
      (eqtr ((mul c (sub a b)) (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))))
      (mulsub (c a b)))
    (ax_mp ((eq (mul c b) (mul b c)) (eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))))
      (ax_mp ((eq (mul c a) (mul a c)) (im (eq (mul c b) (mul b c)) (eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c)))))
        (subeq ((mul c a) (mul a c) (mul c b) (mul b c)))
        (mulcom (c a)))
      (mulcom (c b))))))

(local theorem ltmul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) c) (iff (lt a b) (lt (mul a c) (mul b c))))
((_1 nat) (x1 nat))
(:let H1 (id ((eq _1 c)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x1)))
(:let H4 (id ((eq _1 (suc x1))))
(ibid ((lt (d0) c) (lt a b) (lt (mul a c) (mul b c)))
  (com12 ((lt a b) (lt (d0) c) (lt (mul a c) (mul b c)))
    (indd ((lt a b) _1 x1 c (im (lt (d0) _1) (lt (mul a _1) (mul b _1))) (im (lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))) (im (lt (d0) c) (lt (mul a c) (mul b c))) (im (lt (d0) x1) (lt (mul a x1) (mul b x1))) (im (lt (d0) (suc x1)) (lt (mul a (suc x1)) (mul b (suc x1)))))
      (imeqd ((eq _1 c) (lt (d0) _1) (lt (d0) c) (lt (mul a _1) (mul b _1)) (lt (mul a c) (mul b c)))
        (lteqd ((eq _1 c) (d0) (d0) _1 c)
          (eqidd ((eq _1 c) (d0)))
          H1)
        (lteqd ((eq _1 c) (mul a _1) (mul a c) (mul b _1) (mul b c))
          (muleqd ((eq _1 c) a a _1 c)
            (eqidd ((eq _1 c) a))
            H1)
          (muleqd ((eq _1 c) b b _1 c)
            (eqidd ((eq _1 c) b))
            H1)))
      (imeqd ((eq _1 (d0)) (lt (d0) _1) (lt (d0) (d0)) (lt (mul a _1) (mul b _1)) (lt (mul a (d0)) (mul b (d0))))
        (lteqd ((eq _1 (d0)) (d0) (d0) _1 (d0))
          (eqidd ((eq _1 (d0)) (d0)))
          H2)
        (lteqd ((eq _1 (d0)) (mul a _1) (mul a (d0)) (mul b _1) (mul b (d0)))
          (muleqd ((eq _1 (d0)) a a _1 (d0))
            (eqidd ((eq _1 (d0)) a))
            H2)
          (muleqd ((eq _1 (d0)) b b _1 (d0))
            (eqidd ((eq _1 (d0)) b))
            H2)))
      (imeqd ((eq _1 x1) (lt (d0) _1) (lt (d0) x1) (lt (mul a _1) (mul b _1)) (lt (mul a x1) (mul b x1)))
        (lteqd ((eq _1 x1) (d0) (d0) _1 x1)
          (eqidd ((eq _1 x1) (d0)))
          H3)
        (lteqd ((eq _1 x1) (mul a _1) (mul a x1) (mul b _1) (mul b x1))
          (muleqd ((eq _1 x1) a a _1 x1)
            (eqidd ((eq _1 x1) a))
            H3)
          (muleqd ((eq _1 x1) b b _1 x1)
            (eqidd ((eq _1 x1) b))
            H3)))
      (imeqd ((eq _1 (suc x1)) (lt (d0) _1) (lt (d0) (suc x1)) (lt (mul a _1) (mul b _1)) (lt (mul a (suc x1)) (mul b (suc x1))))
        (lteqd ((eq _1 (suc x1)) (d0) (d0) _1 (suc x1))
          (eqidd ((eq _1 (suc x1)) (d0)))
          H4)
        (lteqd ((eq _1 (suc x1)) (mul a _1) (mul a (suc x1)) (mul b _1) (mul b (suc x1)))
          (muleqd ((eq _1 (suc x1)) a a _1 (suc x1))
            (eqidd ((eq _1 (suc x1)) a))
            H4)
          (muleqd ((eq _1 (suc x1)) b b _1 (suc x1))
            (eqidd ((eq _1 (suc x1)) b))
            H4)))
      (a1i ((lt a b) (im (lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))))
        (ax_mp ((not (lt (d0) (d0))) (im (lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))))
          (absurd ((lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))))
          (lt02 ((d0)))))
      (a1d ((an (lt a b) (im (lt (d0) x1) (lt (mul a x1) (mul b x1)))) (lt (mul a (suc x1)) (mul b (suc x1))) (lt (d0) (suc x1)))
        (anwl ((lt a b) (im (lt (d0) x1) (lt (mul a x1) (mul b x1))) (lt (mul a (suc x1)) (mul b (suc x1))))
          (sylibr ((lt a b) (lt (add (mul a x1) a) (add (mul b x1) b)) (lt (mul a (suc x1)) (mul b (suc x1))))
            (ax_mp ((eq (mul b (suc x1)) (add (mul b x1) b)) (iff (lt (mul a (suc x1)) (mul b (suc x1))) (lt (add (mul a x1) a) (add (mul b x1) b))))
              (ax_mp ((eq (mul a (suc x1)) (add (mul a x1) a)) (im (eq (mul b (suc x1)) (add (mul b x1) b)) (iff (lt (mul a (suc x1)) (mul b (suc x1))) (lt (add (mul a x1) a) (add (mul b x1) b)))))
                (lteq ((mul a (suc x1)) (add (mul a x1) a) (mul b (suc x1)) (add (mul b x1) b)))
                (mulS (a x1)))
              (mulS (b x1)))
            (ltletrd ((lt a b) (add (mul a x1) a) (add (mul a x1) b) (add (mul b x1) b))
              (ax_mp ((iff (lt a b) (lt (add (mul a x1) a) (add (mul a x1) b))) (im (lt a b) (lt (add (mul a x1) a) (add (mul a x1) b))))
                (bi1 ((lt a b) (lt (add (mul a x1) a) (add (mul a x1) b))))
                (ltadd2 ((mul a x1) a b)))
              (sylib ((lt a b) (le (mul a x1) (mul b x1)) (le (add (mul a x1) b) (add (mul b x1) b)))
                (leadd1 ((mul a x1) (mul b x1) b))
                (syl ((lt a b) (le a b) (le (mul a x1) (mul b x1)))
                  (lemul1a (a b x1))
                  (ltle (a b))))))))))
  (a1i ((lt (d0) c) (im (lt (mul a c) (mul b c)) (lt a b)))
    (mpbir ((im (not (le (mul b c) (mul a c))) (not (le b a))) (im (lt (mul a c) (mul b c)) (lt a b)))
      (imeqi ((lt (mul a c) (mul b c)) (not (le (mul b c) (mul a c))) (lt a b) (not (le b a)))
        (ltnle ((mul a c) (mul b c)))
        (ltnle (a b)))
      (ax_mp ((im (le b a) (le (mul b c) (mul a c))) (im (not (le (mul b c) (mul a c))) (not (le b a))))
        (con3 ((le b a) (le (mul b c) (mul a c))))
        (lemul1a (b a c)))))))))))

(local theorem ltmul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) a) (iff (lt b c) (lt (mul a b) (mul a c))))
()
(syl6bb ((lt (d0) a) (lt b c) (lt (mul b a) (mul c a)) (lt (mul a b) (mul a c)))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (lt (mul b a) (mul c a)) (lt (mul a b) (mul a c))))
    (ax_mp ((eq (mul b a) (mul a b)) (im (eq (mul c a) (mul a c)) (iff (lt (mul b a) (mul c a)) (lt (mul a b) (mul a c)))))
      (lteq ((mul b a) (mul a b) (mul c a) (mul a c)))
      (mulcom (b a)))
    (mulcom (c a)))
  (ltmul1 (b c a))))

(local theorem lemul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) c) (iff (le a b) (le (mul a c) (mul b c))))
()
(sylibr ((lt (d0) c) (iff (not (lt b a)) (not (lt (mul b c) (mul a c)))) (iff (le a b) (le (mul a c) (mul b c))))
  (ax_mp ((iff (le (mul a c) (mul b c)) (not (lt (mul b c) (mul a c)))) (iff (iff (le a b) (le (mul a c) (mul b c))) (iff (not (lt b a)) (not (lt (mul b c) (mul a c))))))
    (ax_mp ((iff (le a b) (not (lt b a))) (im (iff (le (mul a c) (mul b c)) (not (lt (mul b c) (mul a c)))) (iff (iff (le a b) (le (mul a c) (mul b c))) (iff (not (lt b a)) (not (lt (mul b c) (mul a c)))))))
      (bieq ((le a b) (not (lt b a)) (le (mul a c) (mul b c)) (not (lt (mul b c) (mul a c)))))
      (lenlt (a b)))
    (lenlt ((mul a c) (mul b c))))
  (noteqd ((lt (d0) c) (lt b a) (lt (mul b c) (mul a c)))
    (ltmul1 (b a c)))))

(local theorem lemul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) a) (iff (le b c) (le (mul a b) (mul a c))))
()
(syl6bb ((lt (d0) a) (le b c) (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c))))
    (ax_mp ((eq (mul b a) (mul a b)) (im (eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))))
      (leeq ((mul b a) (mul a b) (mul c a) (mul a c)))
      (mulcom (b a)))
    (mulcom (c a)))
  (lemul1 (b c a))))

(local theorem ltmuld ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (lt a b)))
   (h2 (im G (lt c d))))
  (im G (lt (mul a c) (mul b d)))
()
(lelttrd (G (mul a c) (mul b c) (mul b d))
  (syl (G (le a b) (le (mul a c) (mul b c)))
    (lemul1a (a b c))
    (syl (G (lt a b) (le a b))
      (ltle (a b))
      h1))
  (mpbid (G (lt c d) (lt (mul b c) (mul b d)))
    (syl (G (lt (d0) b) (iff (lt c d) (lt (mul b c) (mul b d))))
      (ltmul2 (b c d))
      (syl (G (lt a b) (lt (d0) b))
        (ax_mp ((le (d0) a) (im (lt a b) (lt (d0) b)))
          (lelttr ((d0) a b))
          (le01 (a)))
        h1))
    h2)))

(local theorem mulcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne c (d0)) (iff (eq (mul a c) (mul b c)) (eq a b)))
()
(ibid ((ne c (d0)) (eq (mul a c) (mul b c)) (eq a b))
  (sylbir ((ne c (d0)) (lt (d0) c) (im (eq (mul a c) (mul b c)) (eq a b)))
    (lt01 (c))
    (exp ((lt (d0) c) (eq (mul a c) (mul b c)) (eq a b))
      (leasymd ((an (lt (d0) c) (eq (mul a c) (mul b c))) a b)
        (mpbird ((an (lt (d0) c) (eq (mul a c) (mul b c))) (le (mul a c) (mul b c)) (le a b))
          (anwl ((lt (d0) c) (eq (mul a c) (mul b c)) (iff (le a b) (le (mul a c) (mul b c))))
            (lemul1 (a b c)))
          (anwr ((lt (d0) c) (eq (mul a c) (mul b c)) (le (mul a c) (mul b c)))
            (eqle ((mul a c) (mul b c)))))
        (mpbird ((an (lt (d0) c) (eq (mul a c) (mul b c))) (le (mul b c) (mul a c)) (le b a))
          (anwl ((lt (d0) c) (eq (mul a c) (mul b c)) (iff (le b a) (le (mul b c) (mul a c))))
            (lemul1 (b a c)))
          (anwr ((lt (d0) c) (eq (mul a c) (mul b c)) (le (mul b c) (mul a c)))
            (eqler ((mul a c) (mul b c))))))))
  (a1i ((ne c (d0)) (im (eq a b) (eq (mul a c) (mul b c))))
    (muleq1 (a b c)))))

(local theorem mulcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne a (d0)) (iff (eq (mul a b) (mul a c)) (eq b c)))
()
(syl5bb ((ne a (d0)) (eq (mul a b) (mul a c)) (eq (mul b a) (mul c a)) (eq b c))
  (ax_mp ((eq (mul a c) (mul c a)) (iff (eq (mul a b) (mul a c)) (eq (mul b a) (mul c a))))
    (ax_mp ((eq (mul a b) (mul b a)) (im (eq (mul a c) (mul c a)) (iff (eq (mul a b) (mul a c)) (eq (mul b a) (mul c a)))))
      (eqeq ((mul a b) (mul b a) (mul a c) (mul c a)))
      (mulcom (a b)))
    (mulcom (a c)))
  (mulcan1 (b c a))))

(local theorem mulpos ((a nat ()) (b nat ())) ()
  (iff (lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b)))
()
(:let H1 (lt01 ((mul a b)))
(ibii ((lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b)))
  (iand ((lt (d0) (mul a b)) (lt (d0) a) (lt (d0) b))
    (sylbi ((lt (d0) (mul a b)) (ne (mul a b) (d0)) (lt (d0) a))
      H1
      (sylibr ((ne (mul a b) (d0)) (ne a (d0)) (lt (d0) a))
        (lt01 (a))
        (ax_mp ((im (eq a (d0)) (eq (mul a b) (d0))) (im (ne (mul a b) (d0)) (ne a (d0))))
          (:conv (im (im (eq a (d0)) (eq (mul a b) (d0))) (im (ne (mul a b) (d0)) (ne a (d0))))
            (im
              (im (eq a (d0)) (eq (mul a b) (d0)))
              (im
                (:unfold ne ((mul a b) (d0)) ()
                  (not (eq (mul a b) (d0))))
                (:unfold ne (a (d0)) ()
                  (not (eq a (d0))))))
            (con3 ((eq a (d0)) (eq (mul a b) (d0)))))
          (syl6eq ((eq a (d0)) (mul a b) (mul (d0) b) (d0))
            (mul01 (b))
            (muleq1 (a (d0) b))))))
    (sylbi ((lt (d0) (mul a b)) (ne (mul a b) (d0)) (lt (d0) b))
      H1
      (sylibr ((ne (mul a b) (d0)) (ne b (d0)) (lt (d0) b))
        (lt01 (b))
        (ax_mp ((im (eq b (d0)) (eq (mul a b) (d0))) (im (ne (mul a b) (d0)) (ne b (d0))))
          (:conv (im (im (eq b (d0)) (eq (mul a b) (d0))) (im (ne (mul a b) (d0)) (ne b (d0))))
            (im
              (im (eq b (d0)) (eq (mul a b) (d0)))
              (im
                (:unfold ne ((mul a b) (d0)) ()
                  (not (eq (mul a b) (d0))))
                (:unfold ne (b (d0)) ()
                  (not (eq b (d0))))))
            (con3 ((eq b (d0)) (eq (mul a b) (d0)))))
          (syl6eq ((eq b (d0)) (mul a b) (mul a (d0)) (d0))
            (mul02 (a))
            (muleq2 (a b (d0))))))))
  (sylib ((an (lt (d0) a) (lt (d0) b)) (lt (mul a (d0)) (mul a b)) (lt (d0) (mul a b)))
    (ax_mp ((eq (mul a (d0)) (d0)) (iff (lt (mul a (d0)) (mul a b)) (lt (d0) (mul a b))))
      (lteq1 ((mul a (d0)) (d0) (mul a b)))
      (mul0 (a)))
    (mpbid ((an (lt (d0) a) (lt (d0) b)) (lt (d0) b) (lt (mul a (d0)) (mul a b)))
      (anwl ((lt (d0) a) (lt (d0) b) (iff (lt (d0) b) (lt (mul a (d0)) (mul a b))))
        (ltmul2 (a (d0) b)))
      (anr ((lt (d0) a) (lt (d0) b))))))))

(local theorem mulne0 ((a nat ()) (b nat ())) ()
  (iff (ne (mul a b) (d0)) (an (ne a (d0)) (ne b (d0))))
()
(ax_mp ((iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))) (iff (ne (mul a b) (d0)) (an (ne a (d0)) (ne b (d0)))))
  (ax_mp ((iff (lt (d0) (mul a b)) (ne (mul a b) (d0))) (im (iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))) (iff (ne (mul a b) (d0)) (an (ne a (d0)) (ne b (d0))))))
    (bitr3 ((ne (mul a b) (d0)) (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))))
    (lt01 ((mul a b))))
  (ax_mp ((iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))) (iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))))
    (ax_mp ((iff (lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b))) (im (iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))) (iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0))))))
      (bitr ((lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))))
      (mulpos (a b)))
    (ax_mp ((iff (lt (d0) b) (ne b (d0))) (iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))))
      (ax_mp ((iff (lt (d0) a) (ne a (d0))) (im (iff (lt (d0) b) (ne b (d0))) (iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0))))))
        (aneq ((lt (d0) a) (ne a (d0)) (lt (d0) b) (ne b (d0))))
        (lt01 (a)))
      (lt01 (b))))))

(local theorem sub01 ((a nat ())) ()
  (eq (sub (d0) a) (d0))
()
(cases ((le a (d0)) (eq (sub (d0) a) (d0)))
  (sylbi ((le a (d0)) (eq a (d0)) (eq (sub (d0) a) (d0)))
    (le02 (a))
    (syl6eq ((eq a (d0)) (sub (d0) a) (sub (d0) (d0)) (d0))
      (sub02 ((d0)))
      (subeq2 ((d0) a (d0)))))
  (nlesubeq0 ((d0) a))))

(local theorem pnpcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (sub (add a c) (add b c)) (sub a b))
()
(cases ((le b a) (eq (sub (add a c) (add b c)) (sub a b)))
  (syl ((le b a) (eq (add (sub a b) (add b c)) (add a c)) (eq (sub (add a c) (add b c)) (sub a b)))
    (eqsub1 ((sub a b) (add b c) (add a c)))
    (syl5eqr ((le b a) (add (sub a b) (add b c)) (add (add (sub a b) b) c) (add a c))
      (addass ((sub a b) b c))
      (addeq1d ((le b a) (add (sub a b) b) a c)
        (npcan (a b)))))
  (eqtr4d ((not (le b a)) (sub (add a c) (add b c)) (d0) (sub a b))
    (sylbi ((not (le b a)) (not (le (add b c) (add a c))) (eq (sub (add a c) (add b c)) (d0)))
      (ax_mp ((iff (le b a) (le (add b c) (add a c))) (iff (not (le b a)) (not (le (add b c) (add a c)))))
        (noteq ((le b a) (le (add b c) (add a c))))
        (leadd1 (b a c)))
      (nlesubeq0 ((add a c) (add b c))))
    (nlesubeq0 (a b)))))

(local theorem pnpcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (sub (add a b) (add a c)) (sub b c))
()
(ax_mp ((eq (sub (add b a) (add c a)) (sub b c)) (eq (sub (add a b) (add a c)) (sub b c)))
  (ax_mp ((eq (sub (add a b) (add a c)) (sub (add b a) (add c a))) (im (eq (sub (add b a) (add c a)) (sub b c)) (eq (sub (add a b) (add a c)) (sub b c))))
    (eqtr ((sub (add a b) (add a c)) (sub (add b a) (add c a)) (sub b c)))
    (ax_mp ((eq (add a c) (add c a)) (eq (sub (add a b) (add a c)) (sub (add b a) (add c a))))
      (ax_mp ((eq (add a b) (add b a)) (im (eq (add a c) (add c a)) (eq (sub (add a b) (add a c)) (sub (add b a) (add c a)))))
        (subeq ((add a b) (add b a) (add a c) (add c a)))
        (addcom (a b)))
      (addcom (a c))))
  (pnpcan2 (b c a))))

(local theorem subSS ((a nat ()) (b nat ())) ()
  (eq (sub (suc a) (suc b)) (sub a b))
()
(ax_mp ((eq (sub (add a (d1)) (add b (d1))) (sub a b)) (eq (sub (suc a) (suc b)) (sub a b)))
  (ax_mp ((eq (sub (add a (d1)) (add b (d1))) (sub (suc a) (suc b))) (im (eq (sub (add a (d1)) (add b (d1))) (sub a b)) (eq (sub (suc a) (suc b)) (sub a b))))
    (eqtr3 ((sub (suc a) (suc b)) (sub (add a (d1)) (add b (d1))) (sub a b)))
    (ax_mp ((eq (add b (d1)) (suc b)) (eq (sub (add a (d1)) (add b (d1))) (sub (suc a) (suc b))))
      (ax_mp ((eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (eq (sub (add a (d1)) (add b (d1))) (sub (suc a) (suc b)))))
        (subeq ((add a (d1)) (suc a) (add b (d1)) (suc b)))
        (add12 (a)))
      (add12 (b))))
  (pnpcan2 (a b (d1)))))

(local theorem subsub ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (sub (sub a b) c) (sub a (add b c)))
()
(ax_mp ((or (le a (add b c)) (le (add b c) a)) (eq (sub (sub a b) c) (sub a (add b c))))
  (ax_mp ((im (le (add b c) a) (eq (sub (sub a b) c) (sub a (add b c)))) (im (or (le a (add b c)) (le (add b c) a)) (eq (sub (sub a b) c) (sub a (add b c)))))
    (ax_mp ((im (le a (add b c)) (eq (sub (sub a b) c) (sub a (add b c)))) (im (im (le (add b c) a) (eq (sub (sub a b) c) (sub a (add b c)))) (im (or (le a (add b c)) (le (add b c) a)) (eq (sub (sub a b) c) (sub a (add b c))))))
      (eor ((le a (add b c)) (le (add b c) a) (eq (sub (sub a b) c) (sub a (add b c)))))
      (eqtr4d ((le a (add b c)) (sub (sub a b) c) (d0) (sub a (add b c)))
        (sylib ((le a (add b c)) (le (sub a b) c) (eq (sub (sub a b) c) (d0)))
          (lesubeq0 ((sub a b) c))
          (bi2i ((le (sub a b) c) (le a (add b c)))
            (lesubadd2 (a b c))))
        (bi1i ((le a (add b c)) (eq (sub a (add b c)) (d0)))
          (lesubeq0 (a (add b c))))))
    (eqcomd ((le (add b c) a) (sub a (add b c)) (sub (sub a b) c))
      (syl ((le (add b c) a) (eq (add (sub (sub a b) c) (add b c)) a) (eq (sub a (add b c)) (sub (sub a b) c)))
        (eqsub1 ((sub (sub a b) c) (add b c) a))
        (syl5eq ((le (add b c) a) (add (sub (sub a b) c) (add b c)) (add b (add (sub (sub a b) c) c)) a)
          (addlass ((sub (sub a b) c) b c))
          (eqtrd ((le (add b c) a) (add b (add (sub (sub a b) c) c)) (add b (sub a b)) a)
            (addeq2d ((le (add b c) a) b (add (sub (sub a b) c) c) (sub a b))
              (syl ((le (add b c) a) (le c (sub a b)) (eq (add (sub (sub a b) c) c) (sub a b)))
                (npcan ((sub a b) c))
                (leaddsub2i (b c a))))
            (syl ((le (add b c) a) (le b a) (eq (add b (sub a b)) a))
              (pncan3 (b a))
              (ax_mp ((le b (add b c)) (im (le (add b c) a) (le b a)))
                (letr (b (add b c) a))
                (leaddid1 (b c)))))))))
  (leorle (a (add b c)))))

(local theorem indlt ((G wff ()) (x nat) (y nat) (a nat ()) (px wff (x)) (p0 wff (y)) (pa wff (y)) (py wff (y)) (ps wff (y)))
  ((ha (im (eq x a) (iff px pa)))
   (h0 (im (eq x (d0)) (iff px p0)))
   (hy (im (eq x y) (iff px py)))
   (hs (im (eq x (suc y)) (iff px ps)))
   (h1 (im G p0))
   (h2 (im (an (an G (lt y a)) py) ps)))
  (im G pa)
()
(mpi (G (le a a) pa)
  (leid (a))
  (indd (G x y a (im (le x a) px) (im (le (d0) a) p0) (im (le a a) pa) (im (le y a) py) (im (le (suc y) a) ps))
    (imeqd ((eq x a) (le x a) (le a a) px pa)
      (leeq1 (x a a))
      ha)
    (imeqd ((eq x (d0)) (le x a) (le (d0) a) px p0)
      (leeq1 (x (d0) a))
      h0)
    (imeqd ((eq x y) (le x a) (le y a) px py)
      (leeq1 (x y a))
      hy)
    (imeqd ((eq x (suc y)) (le x a) (le (suc y) a) px ps)
      (leeq1 (x (suc y) a))
      hs)
    (a1d (G p0 (le (d0) a))
      h1)
    (imp (G (im (le y a) py) (im (le (suc y) a) ps))
      (syl5 (G (im (le y a) py) (im (lt y a) py) (im (le (suc y) a) ps))
        (imim1i ((lt y a) (le y a) py)
          (ltle (y a)))
        (:conv (im G (im (im (lt y a) py) (im (le (suc y) a) ps)))
          (im
            G
            (im
              (im (lt y a) py)
              (im
                (:sym (:unfold lt (y a) ()
                  (le (suc y) a)))
                ps)))
          (a2d (G (lt y a) py ps)
            (exp (G (lt y a) (im py ps))
              (exp ((an G (lt y a)) py ps)
                h2)))))))))

(local theorem indstr ((G wff ()) (x nat) (y nat) (a nat (y)) (px wff (x)) (pa wff (y)) (py wff (y)))
  ((ha (im (eq x a) (iff px pa)))
   (hy (im (eq x y) (iff px py)))
   (h (im (an G (al x (im (lt x y) px))) py)))
  (im G pa)
((z nat))
(syl (G (al x (im (lt x (suc a)) px)) pa)
  (mpi ((al x (im (lt x (suc a)) px)) (lt a (suc a)) pa)
    (ltsucid (a))
    (eale (x a (im (lt x (suc a)) px) (im (lt a (suc a)) pa))
      (imeqd ((eq x a) (lt x (suc a)) (lt a (suc a)) px pa)
        (lteq1 (x a (suc a)))
        ha)))
  (indd (G z y (suc a) (al x (im (lt x z) px)) (al x (im (lt x (d0)) px)) (al x (im (lt x (suc a)) px)) (al x (im (lt x y) px)) (al x (im (lt x (suc y)) px)))
    (aleqd ((eq z (suc a)) x (im (lt x z) px) (im (lt x (suc a)) px))
      (imeqd ((eq z (suc a)) (lt x z) (lt x (suc a)) px px)
        (lteqd ((eq z (suc a)) x x z (suc a))
          (eqidd ((eq z (suc a)) x))
          (id ((eq z (suc a)))))
        (biidd ((eq z (suc a)) px))))
    (aleqd ((eq z (d0)) x (im (lt x z) px) (im (lt x (d0)) px))
      (imeqd ((eq z (d0)) (lt x z) (lt x (d0)) px px)
        (lteqd ((eq z (d0)) x x z (d0))
          (eqidd ((eq z (d0)) x))
          (id ((eq z (d0)))))
        (biidd ((eq z (d0)) px))))
    (aleqd ((eq z y) x (im (lt x z) px) (im (lt x y) px))
      (imeqd ((eq z y) (lt x z) (lt x y) px px)
        (lteqd ((eq z y) x x z y)
          (eqidd ((eq z y) x))
          (id ((eq z y))))
        (biidd ((eq z y) px))))
    (aleqd ((eq z (suc y)) x (im (lt x z) px) (im (lt x (suc y)) px))
      (imeqd ((eq z (suc y)) (lt x z) (lt x (suc y)) px px)
        (lteqd ((eq z (suc y)) x x z (suc y))
          (eqidd ((eq z (suc y)) x))
          (id ((eq z (suc y)))))
        (biidd ((eq z (suc y)) px))))
    (a1i (G (al x (im (lt x (d0)) px)))
      (ax_gen (x (im (lt x (d0)) px))
        (ax_mp ((not (lt x (d0))) (im (lt x (d0)) px))
          (absurd ((lt x (d0)) px))
          (lt02 (x)))))
    (mpd ((an G (al x (im (lt x y) px))) (al x (im (eq x y) px)) (al x (im (lt x (suc y)) px)))
      (rsyl ((an G (al x (im (lt x y) px))) py (al x (im (eq x y) px)))
        h
        (iald (x py (im (eq x y) px))
          (com12 ((eq x y) py px)
            (bi2d ((eq x y) px py)
              hy))))
      (anwr (G (al x (im (lt x y) px)) (im (al x (im (eq x y) px)) (al x (im (lt x (suc y)) px))))
        (al2imi (x (im (lt x y) px) (im (eq x y) px) (im (lt x (suc y)) px))
          (syl6 ((im (lt x y) px) (im (eq x y) px) (im (or (lt x y) (eq x y)) px) (im (lt x (suc y)) px))
            (imim1i ((lt x (suc y)) (or (lt x y) (eq x y)) px)
              (bi1i ((lt x (suc y)) (or (lt x y) (eq x y)))
                (ax_mp ((iff (le x y) (or (lt x y) (eq x y))) (iff (lt x (suc y)) (or (lt x y) (eq x y))))
                  (ax_mp ((iff (le x y) (lt x (suc y))) (im (iff (le x y) (or (lt x y) (eq x y))) (iff (lt x (suc y)) (or (lt x y) (eq x y)))))
                    (bitr3 ((lt x (suc y)) (le x y) (or (lt x y) (eq x y))))
                    (leltsuc (x y)))
                  (leloe (x y)))))
            (eor ((lt x y) (eq x y) px)))))))))

(def finite ((A set ())) (wff ())
((n nat) (x nat))
(ex n (al x (im (el x A) (lt x n)))))

(local theorem fineqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (iff (finite _A1) (finite _A2)))
((n nat) (x nat))
(:conv (im _G (iff (finite _A1) (finite _A2)))
  (im
    _G
    (iff
      (:unfold finite (_A1) (n x)
        (ex n (al x (im (el x _A1) (lt x n)))))
      (:unfold finite (_A2) (n x)
        (ex n (al x (im (el x _A2) (lt x n)))))))
  (exeqd (_G n (al x (im (el x _A1) (lt x n))) (al x (im (el x _A2) (lt x n))))
    (aleqd (_G x (im (el x _A1) (lt x n)) (im (el x _A2) (lt x n)))
      (imeqd (_G (el x _A1) (el x _A2) (lt x n) (lt x n))
        (eleqd (_G x x _A1 _A2)
          (eqidd (_G x))
          _Ah)
        (biidd (_G (lt x n))))))))

(local theorem fineq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (iff (finite _A1) (finite _A2)))
()
(fineqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem nffin ((x nat) (A set (x)))
  ((h (nfs x A)))
  (nf x (finite A))
((x1 nat) (x2 nat))
(:conv (nf x (finite A))
  (nf
    x
    (:unfold finite (A) (x1 x2)
      (ex x1 (al x2 (im (el x2 A) (lt x2 x1))))))
  (nfex (x x1 (al x2 (im (el x2 A) (lt x2 x1))))
    (nfal (x x2 (im (el x2 A) (lt x2 x1)))
      (nfim (x (el x2 A) (lt x2 x1))
        (nfel2 (x x2 A)
          h)
        (nfv ((lt x2 x1) x)))))))

(local theorem finss ((A set ()) (B set ())) ()
  (im (subset A B) (im (finite B) (finite A)))
((n nat) (x nat))
(:conv (im (subset A B) (im (finite B) (finite A)))
  (im
    (subset A B)
    (im
      (:unfold finite (B) (n x)
        (ex n (al x (im (el x B) (lt x n)))))
      (:unfold finite (A) (n x)
        (ex n (al x (im (el x A) (lt x n)))))))
  (eximd (n (subset A B) (al x (im (el x B) (lt x n))) (al x (im (el x A) (lt x n))))
    (alimd (x (subset A B) (im (el x B) (lt x n)) (im (el x A) (lt x n)))
      (imim1d ((subset A B) (el x A) (el x B) (lt x n))
        (ssel (A B x)))))))

(local theorem ltfin ((n nat ()) (x nat)) ()
  (finite (ab x (lt x n)))
((m nat) (y nat))
(ax_mp ((al y (im (el y (ab x (lt x n))) (lt y n))) (finite (ab x (lt x n))))
  (:conv (im (al y (im (el y (ab x (lt x n))) (lt y n))) (finite (ab x (lt x n))))
    (im
      (al y (im (el y (ab x (lt x n))) (lt y n)))
      (:unfold finite ((ab x (lt x n))) (m y)
        (ex m (al y (im (el y (ab x (lt x n))) (lt y m))))))
    (iexe (m n (al y (im (el y (ab x (lt x n))) (lt y m))) (al y (im (el y (ab x (lt x n))) (lt y n))))
      (aleqd ((eq m n) y (im (el y (ab x (lt x n))) (lt y m)) (im (el y (ab x (lt x n))) (lt y n)))
        (imeq2d ((eq m n) (el y (ab x (lt x n))) (lt y m) (lt y n))
          (lteq2 (y m n))))))
  (ax_gen (y (im (el y (ab x (lt x n))) (lt y n)))
    (bi1i ((el y (ab x (lt x n))) (lt y n))
      (elabe (x y (lt x n) (lt y n))
        (lteq1 (x y n)))))))

(local theorem lefin ((n nat ()) (x nat)) ()
  (finite (ab x (le x n)))
((m nat) (y nat))
(ax_mp ((al y (im (el y (ab x (le x n))) (lt y (suc n)))) (finite (ab x (le x n))))
  (:conv (im (al y (im (el y (ab x (le x n))) (lt y (suc n)))) (finite (ab x (le x n))))
    (im
      (al y (im (el y (ab x (le x n))) (lt y (suc n))))
      (:unfold finite ((ab x (le x n))) (m y)
        (ex m (al y (im (el y (ab x (le x n))) (lt y m))))))
    (iexe (m (suc n) (al y (im (el y (ab x (le x n))) (lt y m))) (al y (im (el y (ab x (le x n))) (lt y (suc n)))))
      (aleqd ((eq m (suc n)) y (im (el y (ab x (le x n))) (lt y m)) (im (el y (ab x (le x n))) (lt y (suc n))))
        (imeq2d ((eq m (suc n)) (el y (ab x (le x n))) (lt y m) (lt y (suc n)))
          (lteq2 (y m (suc n)))))))
  (ax_gen (y (im (el y (ab x (le x n))) (lt y (suc n))))
    (sylbi ((el y (ab x (le x n))) (le y n) (lt y (suc n)))
      (elabe (x y (le x n) (le y n))
        (leeq1 (x y n)))
      (bi1i ((le y n) (lt y (suc n)))
        (leltsuc (y n)))))))

(local theorem snfin ((n nat ()) (x nat)) ()
  (finite (ab x (eq x n)))
()
(ax_mp ((finite (ab x (le x n))) (finite (ab x (eq x n))))
  (ax_mp ((subset (ab x (eq x n)) (ab x (le x n))) (im (finite (ab x (le x n))) (finite (ab x (eq x n)))))
    (finss ((ab x (eq x n)) (ab x (le x n))))
    (mpbi ((al x (im (eq x n) (le x n))) (subset (ab x (eq x n)) (ab x (le x n))))
      (ssab (x (eq x n) (le x n)))
      (ax_gen (x (im (eq x n) (le x n)))
        (eqle (x n)))))
  (lefin (n x))))

(local theorem infin1 ((A set ()) (B set ())) ()
  (im (finite A) (finite (Inter A B)))
()
(ax_mp ((subset (Inter A B) A) (im (finite A) (finite (Inter A B))))
  (finss ((Inter A B) A))
  (inss1 (A B))))

(local theorem infin2 ((A set ()) (B set ())) ()
  (im (finite B) (finite (Inter A B)))
()
(ax_mp ((subset (Inter A B) B) (im (finite B) (finite (Inter A B))))
  (finss ((Inter A B) B))
  (inss2 (A B))))

(def if ((p wff ()) (a nat ()) (b nat ())) (nat ())
((n nat))
(the (ab n (ifp p (eq n a) (eq n b)))))

(local theorem ifeqd ((_G wff ()) (_p1 wff ()) (_p2 wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ph (im _G (iff _p1 _p2)))
   (_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (if _p1 _a1 _b1) (if _p2 _a2 _b2)))
((n nat))
(:let H1 (eqidd (_G n))
(:conv (im _G (eq (if _p1 _a1 _b1) (if _p2 _a2 _b2)))
  (im
    _G
    (eq
      (:unfold if (_p1 _a1 _b1) (n)
        (the (ab n (ifp _p1 (eq n _a1) (eq n _b1)))))
      (:unfold if (_p2 _a2 _b2) (n)
        (the (ab n (ifp _p2 (eq n _a2) (eq n _b2)))))))
  (theeqd (_G (ab n (ifp _p1 (eq n _a1) (eq n _b1))) (ab n (ifp _p2 (eq n _a2) (eq n _b2))))
    (abeqd (_G n (ifp _p1 (eq n _a1) (eq n _b1)) (ifp _p2 (eq n _a2) (eq n _b2)))
      (ifpeqd (_G _p1 _p2 (eq n _a1) (eq n _a2) (eq n _b1) (eq n _b2))
        _ph
        (eqeqd (_G n n _a1 _a2)
          H1
          _ah)
        (eqeqd (_G n n _b1 _b2)
          H1
          _bh)))))))

(local theorem ifeq ((_p1 wff ()) (_p2 wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (iff _p1 _p2) (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (if _p1 _a1 _b1) (if _p2 _a2 _b2)))))
()
(exp ((iff _p1 _p2) (eq _a1 _a2) (im (eq _b1 _b2) (eq (if _p1 _a1 _b1) (if _p2 _a2 _b2))))
  (exp ((an (iff _p1 _p2) (eq _a1 _a2)) (eq _b1 _b2) (eq (if _p1 _a1 _b1) (if _p2 _a2 _b2)))
    (ifeqd ((an (an (iff _p1 _p2) (eq _a1 _a2)) (eq _b1 _b2)) _p1 _p2 _a1 _a2 _b1 _b2)
      (anwl ((an (iff _p1 _p2) (eq _a1 _a2)) (eq _b1 _b2) (iff _p1 _p2))
        (anl ((iff _p1 _p2) (eq _a1 _a2))))
      (anwl ((an (iff _p1 _p2) (eq _a1 _a2)) (eq _b1 _b2) (eq _a1 _a2))
        (anr ((iff _p1 _p2) (eq _a1 _a2))))
      (anr ((an (iff _p1 _p2) (eq _a1 _a2)) (eq _b1 _b2)))))))

(local theorem ifeq1d ((_G wff ()) (_p1 wff ()) (_p2 wff ()) (a nat ()) (b nat ()))
  ((_h (im _G (iff _p1 _p2))))
  (im _G (eq (if _p1 a b) (if _p2 a b)))
()
(ifeqd (_G _p1 _p2 a a b b)
  _h
  (eqidd (_G a))
  (eqidd (_G b))))

(local theorem ifeq1 ((_p1 wff ()) (_p2 wff ()) (a nat ()) (b nat ())) ()
  (im (iff _p1 _p2) (eq (if _p1 a b) (if _p2 a b)))
()
(ifeq1d ((iff _p1 _p2) _p1 _p2 a b)
  (id ((iff _p1 _p2)))))

(local theorem ifeq2d ((_G wff ()) (p wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (if p _a1 b) (if p _a2 b)))
()
(ifeqd (_G p p _a1 _a2 b b)
  (biidd (_G p))
  _h
  (eqidd (_G b))))

(local theorem ifeq2 ((p wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (if p _a1 b) (if p _a2 b)))
()
(ifeq2d ((eq _a1 _a2) p _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem ifeq3d ((_G wff ()) (p wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (if p a _b1) (if p a _b2)))
()
(ifeqd (_G p p a a _b1 _b2)
  (biidd (_G p))
  (eqidd (_G a))
  _h))

(local theorem ifeq3 ((p wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (if p a _b1) (if p a _b2)))
()
(ifeq3d ((eq _b1 _b2) p a _b1 _b2)
  (id ((eq _b1 _b2)))))

(theorem ifpos ((p wff ()) (a nat ()) (b nat ())) ()
  (im p (eq (if p a b) a))
((n nat))
(:conv (im p (eq (if p a b) a))
  (im
    p
    (eq
      (:unfold if (p a b) (n)
        (the (ab n (ifp p (eq n a) (eq n b)))))
      a))
  (eqtheabd (p a n (ifp p (eq n a) (eq n b)))
    (ifppos (p (eq n a) (eq n b))))))

(theorem ifneg ((p wff ()) (a nat ()) (b nat ())) ()
  (im (not p) (eq (if p a b) b))
((n nat))
(:conv (im (not p) (eq (if p a b) b))
  (im
    (not p)
    (eq
      (:unfold if (p a b) (n)
        (the (ab n (ifp p (eq n a) (eq n b)))))
      b))
  (eqtheabd ((not p) b n (ifp p (eq n a) (eq n b)))
    (ifpneg (p (eq n a) (eq n b))))))

(local theorem ifid ((a nat ()) (p wff ())) ()
  (eq (if p a a) a)
()
(cases (p (eq (if p a a) a))
  (ifpos (p a a))
  (ifneg (p a a))))

(local theorem ifeq2a ((a nat ()) (b nat ()) (c nat ()) (p wff ())) ()
  (im (im p (eq a b)) (eq (if p a c) (if p b c)))
()
(casesd ((im p (eq a b)) p (eq (if p a c) (if p b c)))
  (imim2i (p (eq a b) (eq (if p a c) (if p b c)))
    (ifeq2 (p a b c)))
  (a1i ((im p (eq a b)) (im (not p) (eq (if p a c) (if p b c))))
    (eqtr4d ((not p) (if p a c) c (if p b c))
      (ifneg (p a c))
      (ifneg (p b c))))))

(local theorem ifeq3a ((a nat ()) (b nat ()) (c nat ()) (p wff ())) ()
  (im (im (not p) (eq b c)) (eq (if p a b) (if p a c)))
()
(casesd ((im (not p) (eq b c)) p (eq (if p a b) (if p a c)))
  (a1i ((im (not p) (eq b c)) (im p (eq (if p a b) (if p a c))))
    (eqtr4d (p (if p a b) a (if p a c))
      (ifpos (p a b))
      (ifpos (p a c))))
  (imim2i ((not p) (eq b c) (eq (if p a b) (if p a c)))
    (ifeq3 (p a b c)))))

(local theorem ifbothd ((G wff ()) (a nat ()) (b nat ()) (p wff ()) (q wff ()) (qa wff ()) (qb wff ()))
  ((ea (im (eq (if p a b) a) (iff q qa)))
   (eb (im (eq (if p a b) b) (iff q qb)))
   (h1 (im (an G p) qa))
   (h2 (im (an G (not p)) qb)))
  (im G q)
()
(casesda (G p q)
  (mpbird ((an G p) qa q)
    (syl ((an G p) (eq (if p a b) a) (iff q qa))
      ea
      (anwr (G p (eq (if p a b) a))
        (ifpos (p a b))))
    h1)
  (mpbird ((an G (not p)) qb q)
    (syl ((an G (not p)) (eq (if p a b) b) (iff q qb))
      eb
      (anwr (G (not p) (eq (if p a b) b))
        (ifneg (p a b))))
    h2)))

(local theorem ifT ((A set ()) (a nat ()) (b nat ()) (p wff ())) ()
  (im (an (el a A) (el b A)) (el (if p a b) A))
()
(ifbothd ((an (el a A) (el b A)) a b p (el (if p a b) A) (el a A) (el b A))
  (eleq1 (A (if p a b) a))
  (eleq1 (A (if p a b) b))
  (anll ((el a A) (el b A) p))
  (anlr ((el a A) (el b A) (not p)))))

(def true ((n nat ())) (wff ())
()
(ne n (d0)))

(local theorem trueeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (iff (true _n1) (true _n2)))
()
(:conv (im _G (iff (true _n1) (true _n2)))
  (im
    _G
    (iff
      (:unfold true (_n1) ()
        (ne _n1 (d0)))
      (:unfold true (_n2) ()
        (ne _n2 (d0)))))
  (neeqd (_G _n1 _n2 (d0) (d0))
    _nh
    (eqidd (_G (d0))))))

(local theorem trueeq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (iff (true _n1) (true _n2)))
()
(trueeqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def bool ((n nat ())) (wff ())
()
(lt n (d2)))

(local theorem booleqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (iff (bool _n1) (bool _n2)))
()
(:conv (im _G (iff (bool _n1) (bool _n2)))
  (im
    _G
    (iff
      (:unfold bool (_n1) ()
        (lt _n1 (d2)))
      (:unfold bool (_n2) ()
        (lt _n2 (d2)))))
  (lteqd (_G _n1 _n2 (d2) (d2))
    _nh
    (eqidd (_G (d2))))))

(local theorem booleq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (iff (bool _n1) (bool _n2)))
()
(booleqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def nat ((p wff ())) (nat ())
()
(if p (d1) (d0)))

(local theorem nateqd ((_G wff ()) (_p1 wff ()) (_p2 wff ()))
  ((_ph (im _G (iff _p1 _p2))))
  (im _G (eq (nat _p1) (nat _p2)))
()
(:conv (im _G (eq (nat _p1) (nat _p2)))
  (im
    _G
    (eq
      (:unfold nat (_p1) ()
        (if _p1 (d1) (d0)))
      (:unfold nat (_p2) ()
        (if _p2 (d1) (d0)))))
  (ifeqd (_G _p1 _p2 (d1) (d1) (d0) (d0))
    _ph
    (eqidd (_G (d1)))
    (eqidd (_G (d0))))))

(local theorem nateq ((_p1 wff ()) (_p2 wff ())) ()
  (im (iff _p1 _p2) (eq (nat _p1) (nat _p2)))
()
(nateqd ((iff _p1 _p2) _p1 _p2)
  (id ((iff _p1 _p2)))))

(local theorem true1 () ()
  (true (d1))
()
(:conv (true (d1))
  (:unfold true ((d1)) ()
    (ne (d1) (d0)))
  (d1ne0 ())))

(local theorem true0 () ()
  (not (true (d0)))
()
(ax_mp ((eq (d0) (d0)) (not (true (d0))))
  (:conv (im (eq (d0) (d0)) (not (true (d0))))
    (im
      (eq (d0) (d0))
      (not
        (:unfold true ((d0)) ()
          (:unfold ne ((d0) (d0)) ()
            (not (eq (d0) (d0)))))))
    (notnot1 ((eq (d0) (d0)))))
  (eqid ((d0)))))

(local theorem letrue ((a nat ()) (b nat ())) ()
  (im (le a b) (im (true a) (true b)))
()
(sylib ((le a b) (im (lt (d0) a) (lt (d0) b)) (im (true a) (true b)))
  (imeqi ((lt (d0) a) (true a) (lt (d0) b) (true b))
    (:conv (iff (lt (d0) a) (true a))
      (iff
        (lt (d0) a)
        (:unfold true (a) ()
          (ne a (d0))))
      (lt01 (a)))
    (:conv (iff (lt (d0) b) (true b))
      (iff
        (lt (d0) b)
        (:unfold true (b) ()
          (ne b (d0))))
      (lt01 (b))))
  (com12 ((lt (d0) a) (le a b) (lt (d0) b))
    (ltletr ((d0) a b)))))

(local theorem truemul ((a nat ()) (b nat ())) ()
  (iff (true (mul a b)) (an (true a) (true b)))
()
(:conv (iff (true (mul a b)) (an (true a) (true b)))
  (iff
    (:unfold true ((mul a b)) ()
      (ne (mul a b) (d0)))
    (an
      (:unfold true (a) ()
        (ne a (d0)))
      (:unfold true (b) ()
        (ne b (d0)))))
  (mulne0 (a b))))

(local theorem bool0 () ()
  (bool (d0))
()
(:conv (bool (d0))
  (:unfold bool ((d0)) ()
    (lt (d0) (d2)))
  (d0lt2 ())))

(local theorem bool1 () ()
  (bool (d1))
()
(:conv (bool (d1))
  (:unfold bool ((d1)) ()
    (lt (d1) (d2)))
  (d1lt2 ())))

(local theorem bool01 ((n nat ())) ()
  (iff (bool n) (or (eq n (d0)) (eq n (d1))))
()
(ax_mp ((iff (le n (d1)) (or (eq n (d0)) (eq n (d1)))) (iff (bool n) (or (eq n (d0)) (eq n (d1)))))
  (ax_mp ((iff (le n (d1)) (bool n)) (im (iff (le n (d1)) (or (eq n (d0)) (eq n (d1)))) (iff (bool n) (or (eq n (d0)) (eq n (d1))))))
    (bitr3 ((bool n) (le n (d1)) (or (eq n (d0)) (eq n (d1)))))
    (:conv (iff (le n (d1)) (bool n))
      (iff
        (le n (d1))
        (:unfold bool (n) ()
          (lt
            n
            (:unfold d2 () ()
              (suc (d1))))))
      (leltsuc (n (d1)))))
  (ax_mp ((iff (or (lt n (d1)) (eq n (d1))) (or (eq n (d0)) (eq n (d1)))) (iff (le n (d1)) (or (eq n (d0)) (eq n (d1)))))
    (ax_mp ((iff (le n (d1)) (or (lt n (d1)) (eq n (d1)))) (im (iff (or (lt n (d1)) (eq n (d1))) (or (eq n (d0)) (eq n (d1)))) (iff (le n (d1)) (or (eq n (d0)) (eq n (d1))))))
      (bitr ((le n (d1)) (or (lt n (d1)) (eq n (d1))) (or (eq n (d0)) (eq n (d1)))))
      (leloe (n (d1))))
    (oreq1i ((lt n (d1)) (eq n (d0)) (eq n (d1)))
      (lt12 (n))))))

(local theorem boolle1 ((n nat ())) ()
  (iff (bool n) (le n (d1)))
()
(ax_mp ((iff (le n (d1)) (bool n)) (iff (bool n) (le n (d1))))
  (bicom ((le n (d1)) (bool n)))
  (:conv (iff (le n (d1)) (bool n))
    (iff
      (le n (d1))
      (:unfold bool (n) ()
        (lt
          n
          (:unfold d2 () ()
            (suc (d1))))))
    (leltsuc (n (d1))))))

(local theorem lebool ((a nat ()) (b nat ())) ()
  (im (le a b) (im (bool b) (bool a)))
()
(:conv (im (le a b) (im (bool b) (bool a)))
  (im
    (le a b)
    (im
      (:unfold bool (b) ()
        (lt b (d2)))
      (:unfold bool (a) ()
        (lt a (d2)))))
  (lelttr (a b (d2)))))

(local theorem letrueb ((a nat ()) (b nat ())) ()
  (im (bool a) (iff (le a b) (im (true a) (true b))))
()
(ibid ((bool a) (le a b) (im (true a) (true b)))
  (a1i ((bool a) (im (le a b) (im (true a) (true b))))
    (letrue (a b)))
  (sylbi ((bool a) (or (eq a (d0)) (eq a (d1))) (im (im (true a) (true b)) (le a b)))
    (bool01 (a))
    (ax_mp ((im (eq a (d1)) (im (im (true a) (true b)) (le a b))) (im (or (eq a (d0)) (eq a (d1))) (im (im (true a) (true b)) (le a b))))
      (ax_mp ((im (eq a (d0)) (im (im (true a) (true b)) (le a b))) (im (im (eq a (d1)) (im (im (true a) (true b)) (le a b))) (im (or (eq a (d0)) (eq a (d1))) (im (im (true a) (true b)) (le a b)))))
        (eor ((eq a (d0)) (eq a (d1)) (im (im (true a) (true b)) (le a b))))
        (a1d ((eq a (d0)) (le a b) (im (true a) (true b)))
          (mpbiri ((eq a (d0)) (le (d0) b) (le a b))
            (le01 (b))
            (leeq1 (a (d0) b)))))
      (mpbiri ((eq a (d1)) (im (ne b (d0)) (le (d1) b)) (im (im (true a) (true b)) (le a b)))
        (bi2i ((le (d1) b) (ne b (d0)))
          (le11 (b)))
        (imeqd ((eq a (d1)) (im (true a) (true b)) (ne b (d0)) (le a b) (le (d1) b))
          (syl ((eq a (d1)) (true a) (iff (im (true a) (true b)) (ne b (d0))))
            (:conv (im (true a) (iff (im (true a) (true b)) (ne b (d0))))
              (im
                (true a)
                (iff
                  (im (true a) (true b))
                  (:sym (:unfold true (b) ()
                    (ne b (d0))))))
              (biim1 ((true a) (true b))))
            (mpbiri ((eq a (d1)) (true (d1)) (true a))
              (true1 ())
              (trueeq (a (d1)))))
          (leeq1 (a (d1) b))))))))

(local theorem dftrue2 ((n nat ())) ()
  (im (bool n) (iff (true n) (eq n (d1))))
()
(ibid ((bool n) (true n) (eq n (d1)))
  (ax_mp ((iff (bool n) (im (true n) (eq n (d1)))) (im (bool n) (im (true n) (eq n (d1)))))
    (bi1 ((bool n) (im (true n) (eq n (d1)))))
    (:conv (iff (bool n) (im (true n) (eq n (d1))))
      (iff
        (bool n)
        (:sym (:unfold or ((eq n (d0)) (eq n (d1))) ()
          (im
            (:sym (:unfold true (n) ()
              (:unfold ne (n (d0)) ()
                (not (eq n (d0))))))
            (eq n (d1))))))
      (bool01 (n))))
  (a1i ((bool n) (im (eq n (d1)) (true n)))
    (mpbiri ((eq n (d1)) (ne (d1) (d0)) (true n))
      (d1ne0 ())
      (:conv (im (eq n (d1)) (iff (true n) (ne (d1) (d0))))
        (im
          (eq n (d1))
          (iff
            (:unfold true (n) ()
              (ne n (d0)))
            (ne (d1) (d0))))
        (neeq1 (n (d1) (d0))))))))

(local theorem boolnat ((p wff ())) ()
  (bool (nat p))
()
(cases (p (bool (nat p)))
  (mpbiri (p (lt (d1) (d2)) (bool (nat p)))
    (d1lt2 ())
    (:conv (im p (iff (bool (nat p)) (lt (d1) (d2))))
      (im
        p
        (iff
          (:unfold bool ((nat p)) ()
            (lt (nat p) (d2)))
          (lt (d1) (d2))))
      (lteq1d (p (nat p) (d1) (d2))
        (:conv (im p (eq (nat p) (d1)))
          (im
            p
            (eq
              (:unfold nat (p) ()
                (if p (d1) (d0)))
              (d1)))
          (ifpos (p (d1) (d0)))))))
  (mpbiri ((not p) (lt (d0) (d2)) (bool (nat p)))
    (d0lt2 ())
    (:conv (im (not p) (iff (bool (nat p)) (lt (d0) (d2))))
      (im
        (not p)
        (iff
          (:unfold bool ((nat p)) ()
            (lt (nat p) (d2)))
          (lt (d0) (d2))))
      (lteq1d ((not p) (nat p) (d0) (d2))
        (:conv (im (not p) (eq (nat p) (d0)))
          (im
            (not p)
            (eq
              (:unfold nat (p) ()
                (if p (d1) (d0)))
              (d0)))
          (ifneg (p (d1) (d0)))))))))

(local theorem truenat ((p wff ())) ()
  (iff (true (nat p)) p)
()
(ibii ((true (nat p)) p)
  (ax_mp ((im (not p) (eq (nat p) (d0))) (im (true (nat p)) p))
    (:conv (im (im (not p) (eq (nat p) (d0))) (im (true (nat p)) p))
      (im
        (im (not p) (eq (nat p) (d0)))
        (im
          (:unfold true ((nat p)) ()
            (:unfold ne ((nat p) (d0)) ()
              (not (eq (nat p) (d0)))))
          p))
      (con1 (p (eq (nat p) (d0)))))
    (:conv (im (not p) (eq (nat p) (d0)))
      (im
        (not p)
        (eq
          (:unfold nat (p) ()
            (if p (d1) (d0)))
          (d0)))
      (ifneg (p (d1) (d0)))))
  (mpbiri (p (ne (d1) (d0)) (true (nat p)))
    (d1ne0 ())
    (:conv (im p (iff (true (nat p)) (ne (d1) (d0))))
      (im
        p
        (iff
          (:unfold true ((nat p)) ()
            (ne (nat p) (d0)))
          (ne (d1) (d0))))
      (neeq1d (p (nat p) (d1) (d0))
        (:conv (im p (eq (nat p) (d1)))
          (im
            p
            (eq
              (:unfold nat (p) ()
                (if p (d1) (d0)))
              (d1)))
          (ifpos (p (d1) (d0)))))))))

(local theorem nateq1 ((p wff ())) ()
  (iff (eq (nat p) (d1)) p)
()
(ax_mp ((iff (true (nat p)) p) (iff (eq (nat p) (d1)) p))
  (ax_mp ((iff (true (nat p)) (eq (nat p) (d1))) (im (iff (true (nat p)) p) (iff (eq (nat p) (d1)) p)))
    (bitr3 ((eq (nat p) (d1)) (true (nat p)) p))
    (ax_mp ((bool (nat p)) (iff (true (nat p)) (eq (nat p) (d1))))
      (dftrue2 ((nat p)))
      (boolnat (p))))
  (truenat (p))))

(local theorem nateq0 ((p wff ())) ()
  (iff (eq (nat p) (d0)) (not p))
()
(ax_mp ((iff p (not (eq (nat p) (d0)))) (iff (eq (nat p) (d0)) (not p)))
  (con2b (p (eq (nat p) (d0))))
  (ax_mp ((iff (not (eq (nat p) (d0))) p) (iff p (not (eq (nat p) (d0)))))
    (bicom ((not (eq (nat p) (d0))) p))
    (:conv (iff (not (eq (nat p) (d0))) p)
      (iff
        (:sym (:unfold true ((nat p)) ()
          (:unfold ne ((nat p) (d0)) ()
            (not (eq (nat p) (d0))))))
        p)
      (truenat (p))))))

(local theorem nat1 () ()
  (eq (nat (tru)) (d1))
()
(mpbir ((tru) (eq (nat (tru)) (d1)))
  (nateq1 ((tru)))
  (itru ())))

(local theorem nat0 () ()
  (eq (nat (fal)) (d0))
()
(mpbir ((not (fal)) (eq (nat (fal)) (d0)))
  (nateq0 ((fal)))
  (notfal ())))

(local theorem nattrue ((n nat ())) ()
  (im (bool n) (eq (nat (true n)) n))
()
(sylbi ((bool n) (or (eq n (d0)) (eq n (d1))) (eq (nat (true n)) n))
  (bool01 (n))
  (ax_mp ((im (eq n (d1)) (eq (nat (true n)) n)) (im (or (eq n (d0)) (eq n (d1))) (eq (nat (true n)) n)))
    (ax_mp ((im (eq n (d0)) (eq (nat (true n)) n)) (im (im (eq n (d1)) (eq (nat (true n)) n)) (im (or (eq n (d0)) (eq n (d1))) (eq (nat (true n)) n))))
      (eor ((eq n (d0)) (eq n (d1)) (eq (nat (true n)) n)))
      (eqtr4d ((eq n (d0)) (nat (true n)) (nat (true (d0))) n)
        (nateqd ((eq n (d0)) (true n) (true (d0)))
          (trueeq (n (d0))))
        (syl6eqr ((eq n (d0)) n (d0) (nat (true (d0))))
          (ax_mp ((not (true (d0))) (eq (nat (true (d0))) (d0)))
            (:conv (im (not (true (d0))) (eq (nat (true (d0))) (d0)))
              (im
                (not (true (d0)))
                (eq
                  (:unfold nat ((true (d0))) ()
                    (if (true (d0)) (d1) (d0)))
                  (d0)))
              (ifneg ((true (d0)) (d1) (d0))))
            (true0 ()))
          (id ((eq n (d0)))))))
    (eqtr4d ((eq n (d1)) (nat (true n)) (nat (true (d1))) n)
      (nateqd ((eq n (d1)) (true n) (true (d1)))
        (trueeq (n (d1))))
      (syl6eqr ((eq n (d1)) n (d1) (nat (true (d1))))
        (ax_mp ((true (d1)) (eq (nat (true (d1))) (d1)))
          (:conv (im (true (d1)) (eq (nat (true (d1))) (d1)))
            (im
              (true (d1))
              (eq
                (:unfold nat ((true (d1))) ()
                  (if (true (d1)) (d1) (d0)))
                (d1)))
            (ifpos ((true (d1)) (d1) (d0))))
          (true1 ()))
        (id ((eq n (d1)))))))))

(local theorem natle ((p wff ()) (q wff ())) ()
  (iff (im p q) (le (nat p) (nat q)))
()
(ax_mp ((iff (le (nat p) (nat q)) (im p q)) (iff (im p q) (le (nat p) (nat q))))
  (bicom ((le (nat p) (nat q)) (im p q)))
  (ax_mp ((iff (im (true (nat p)) (true (nat q))) (im p q)) (iff (le (nat p) (nat q)) (im p q)))
    (ax_mp ((iff (le (nat p) (nat q)) (im (true (nat p)) (true (nat q)))) (im (iff (im (true (nat p)) (true (nat q))) (im p q)) (iff (le (nat p) (nat q)) (im p q))))
      (bitr ((le (nat p) (nat q)) (im (true (nat p)) (true (nat q))) (im p q)))
      (ax_mp ((bool (nat p)) (iff (le (nat p) (nat q)) (im (true (nat p)) (true (nat q)))))
        (letrueb ((nat p) (nat q)))
        (boolnat (p))))
    (imeqi ((true (nat p)) p (true (nat q)) q)
      (truenat (p))
      (truenat (q))))))

(local theorem natinj ((p wff ()) (q wff ())) ()
  (iff (iff p q) (eq (nat p) (nat q)))
()
(ax_mp ((iff (eq (nat p) (nat q)) (an (le (nat p) (nat q)) (le (nat q) (nat p)))) (iff (iff p q) (eq (nat p) (nat q))))
  (ax_mp ((iff (iff p q) (an (le (nat p) (nat q)) (le (nat q) (nat p)))) (im (iff (eq (nat p) (nat q)) (an (le (nat p) (nat q)) (le (nat q) (nat p)))) (iff (iff p q) (eq (nat p) (nat q)))))
    (bitr4 ((iff p q) (an (le (nat p) (nat q)) (le (nat q) (nat p))) (eq (nat p) (nat q))))
    (ax_mp ((iff (im q p) (le (nat q) (nat p))) (iff (iff p q) (an (le (nat p) (nat q)) (le (nat q) (nat p)))))
      (ax_mp ((iff (im p q) (le (nat p) (nat q))) (im (iff (im q p) (le (nat q) (nat p))) (iff (iff p q) (an (le (nat p) (nat q)) (le (nat q) (nat p))))))
        (:conv (im (iff (im p q) (le (nat p) (nat q))) (im (iff (im q p) (le (nat q) (nat p))) (iff (iff p q) (an (le (nat p) (nat q)) (le (nat q) (nat p))))))
          (im
            (iff (im p q) (le (nat p) (nat q)))
            (im
              (iff (im q p) (le (nat q) (nat p)))
              (iff
                (:unfold iff (p q) ()
                  (an (im p q) (im q p)))
                (an (le (nat p) (nat q)) (le (nat q) (nat p))))))
          (aneq ((im p q) (le (nat p) (nat q)) (im q p) (le (nat q) (nat p)))))
        (natle (p q)))
      (natle (q p))))
  (eqlele ((nat p) (nat q)))))

(local theorem natle1 ((p wff ())) ()
  (le (nat p) (d1))
()
(mpbi ((bool (nat p)) (le (nat p) (d1)))
  (boolle1 ((nat p)))
  (boolnat (p))))

(local theorem nattruele ((n nat ())) ()
  (le (nat (true n)) n)
()
(ax_mp ((or (le (nat (true n)) n) (le n (nat (true n)))) (le (nat (true n)) n))
  (ax_mp ((im (le n (nat (true n))) (le (nat (true n)) n)) (im (or (le (nat (true n)) n) (le n (nat (true n)))) (le (nat (true n)) n)))
    (ax_mp ((im (le (nat (true n)) n) (le (nat (true n)) n)) (im (im (le n (nat (true n))) (le (nat (true n)) n)) (im (or (le (nat (true n)) n) (le n (nat (true n)))) (le (nat (true n)) n))))
      (eor ((le (nat (true n)) n) (le n (nat (true n))) (le (nat (true n)) n)))
      (id ((le (nat (true n)) n))))
    (syl ((le n (nat (true n))) (eq (nat (true n)) n) (le (nat (true n)) n))
      (eqle ((nat (true n)) n))
      (syl ((le n (nat (true n))) (bool n) (eq (nat (true n)) n))
        (nattrue (n))
        (mpi ((le n (nat (true n))) (bool (nat (true n))) (bool n))
          (boolnat ((true n)))
          (lebool (n (nat (true n))))))))
  (leorle ((nat (true n)) n))))

(local theorem boolext ((a nat ()) (b nat ())) ()
  (im (bool a) (im (bool b) (iff (iff (true a) (true b)) (eq a b))))
()
(exp ((bool a) (bool b) (iff (iff (true a) (true b)) (eq a b)))
  (ibid ((an (bool a) (bool b)) (iff (true a) (true b)) (eq a b))
    (exp ((an (bool a) (bool b)) (iff (true a) (true b)) (eq a b))
      (mpbid ((an (an (bool a) (bool b)) (iff (true a) (true b))) (eq (nat (true a)) (nat (true b))) (eq a b))
        (eqeqd ((an (an (bool a) (bool b)) (iff (true a) (true b))) (nat (true a)) a (nat (true b)) b)
          (syl ((an (an (bool a) (bool b)) (iff (true a) (true b))) (bool a) (eq (nat (true a)) a))
            (nattrue (a))
            (anll ((bool a) (bool b) (iff (true a) (true b)))))
          (syl ((an (an (bool a) (bool b)) (iff (true a) (true b))) (bool b) (eq (nat (true b)) b))
            (nattrue (b))
            (anlr ((bool a) (bool b) (iff (true a) (true b))))))
        (anwr ((an (bool a) (bool b)) (iff (true a) (true b)) (eq (nat (true a)) (nat (true b))))
          (nateq ((true a) (true b))))))
    (a1i ((an (bool a) (bool b)) (im (eq a b) (iff (true a) (true b))))
      (trueeq (a b))))))

(def min ((a nat ()) (b nat ())) (nat ())
()
(if (lt a b) a b))

(local theorem mineqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (min _a1 _b1) (min _a2 _b2)))
()
(:conv (im _G (eq (min _a1 _b1) (min _a2 _b2)))
  (im
    _G
    (eq
      (:unfold min (_a1 _b1) ()
        (if (lt _a1 _b1) _a1 _b1))
      (:unfold min (_a2 _b2) ()
        (if (lt _a2 _b2) _a2 _b2))))
  (ifeqd (_G (lt _a1 _b1) (lt _a2 _b2) _a1 _a2 _b1 _b2)
    (lteqd (_G _a1 _a2 _b1 _b2)
      _ah
      _bh)
    _ah
    _bh)))

(local theorem mineq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (min _a1 _b1) (min _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (min _a1 _b1) (min _a2 _b2)))
  (mineqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem mineq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (min _a1 b) (min _a2 b)))
()
(mineqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem mineq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (min _a1 b) (min _a2 b)))
()
(mineq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem mineq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (min a _b1) (min a _b2)))
()
(mineqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem mineq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (min a _b1) (min a _b2)))
()
(mineq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(def max ((a nat ()) (b nat ())) (nat ())
()
(if (lt a b) b a))

(local theorem maxeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (max _a1 _b1) (max _a2 _b2)))
()
(:conv (im _G (eq (max _a1 _b1) (max _a2 _b2)))
  (im
    _G
    (eq
      (:unfold max (_a1 _b1) ()
        (if (lt _a1 _b1) _b1 _a1))
      (:unfold max (_a2 _b2) ()
        (if (lt _a2 _b2) _b2 _a2))))
  (ifeqd (_G (lt _a1 _b1) (lt _a2 _b2) _b1 _b2 _a1 _a2)
    (lteqd (_G _a1 _a2 _b1 _b2)
      _ah
      _bh)
    _bh
    _ah)))

(local theorem maxeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (max _a1 _b1) (max _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (max _a1 _b1) (max _a2 _b2)))
  (maxeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem maxeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (max _a1 b) (max _a2 b)))
()
(maxeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem maxeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (max _a1 b) (max _a2 b)))
()
(maxeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem maxeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (max a _b1) (max a _b2)))
()
(maxeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem maxeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (max a _b1) (max a _b2)))
()
(maxeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem nfmax ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (max a b))
((u nat) (v nat))
(nfnlem2 (x u v (max u v) a b (max a b))
  (maxeqd ((an (eq u a) (eq v b)) u a v b)
    (anl ((eq u a) (eq v b)))
    (anr ((eq u a) (eq v b))))
  h1
  h2))

(local theorem eqmin1 ((a nat ()) (b nat ())) ()
  (im (le a b) (eq (min a b) a))
()
(sylbi ((le a b) (or (lt a b) (eq a b)) (eq (min a b) a))
  (leloe (a b))
  (ax_mp ((im (eq a b) (eq (min a b) a)) (im (or (lt a b) (eq a b)) (eq (min a b) a)))
    (ax_mp ((im (lt a b) (eq (min a b) a)) (im (im (eq a b) (eq (min a b) a)) (im (or (lt a b) (eq a b)) (eq (min a b) a))))
      (eor ((lt a b) (eq a b) (eq (min a b) a)))
      (:conv (im (lt a b) (eq (min a b) a))
        (im
          (lt a b)
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            a))
        (ifpos ((lt a b) a b))))
    (syl6eq ((eq a b) (min a b) (if (lt a b) a a) a)
      (ifid (a (lt a b)))
      (:conv (im (eq a b) (eq (min a b) (if (lt a b) a a)))
        (im
          (eq a b)
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            (if (lt a b) a a)))
        (ifeq3d ((eq a b) (lt a b) a b a)
          (eqcom (a b))))))))

(local theorem eqmax2 ((a nat ()) (b nat ())) ()
  (im (le a b) (eq (max a b) b))
()
(sylbi ((le a b) (or (lt a b) (eq a b)) (eq (max a b) b))
  (leloe (a b))
  (ax_mp ((im (eq a b) (eq (max a b) b)) (im (or (lt a b) (eq a b)) (eq (max a b) b)))
    (ax_mp ((im (lt a b) (eq (max a b) b)) (im (im (eq a b) (eq (max a b) b)) (im (or (lt a b) (eq a b)) (eq (max a b) b))))
      (eor ((lt a b) (eq a b) (eq (max a b) b)))
      (:conv (im (lt a b) (eq (max a b) b))
        (im
          (lt a b)
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            b))
        (ifpos ((lt a b) b a))))
    (syl6eq ((eq a b) (max a b) (if (lt a b) b b) b)
      (ifid (b (lt a b)))
      (:conv (im (eq a b) (eq (max a b) (if (lt a b) b b)))
        (im
          (eq a b)
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            (if (lt a b) b b)))
        (ifeq3d ((eq a b) (lt a b) b a b)
          (id ((eq a b)))))))))

(local theorem mincom ((a nat ()) (b nat ())) ()
  (eq (min a b) (min b a))
()
(cases ((lt a b) (eq (min a b) (min b a)))
  (eqtr4d ((lt a b) (min a b) a (min b a))
    (:conv (im (lt a b) (eq (min a b) a))
      (im
        (lt a b)
        (eq
          (:unfold min (a b) ()
            (if (lt a b) a b))
          a))
      (ifpos ((lt a b) a b)))
    (syl ((lt a b) (not (lt b a)) (eq (min b a) a))
      (:conv (im (not (lt b a)) (eq (min b a) a))
        (im
          (not (lt b a))
          (eq
            (:unfold min (b a) ()
              (if (lt b a) b a))
            a))
        (ifneg ((lt b a) b a)))
      (ltnlt (a b))))
  (eqtr4d ((not (lt a b)) (min a b) b (min b a))
    (:conv (im (not (lt a b)) (eq (min a b) b))
      (im
        (not (lt a b))
        (eq
          (:unfold min (a b) ()
            (if (lt a b) a b))
          b))
      (ifneg ((lt a b) a b)))
    (sylbir ((not (lt a b)) (le b a) (eq (min b a) b))
      (lenlt (b a))
      (eqmin1 (b a))))))

(local theorem maxcom ((a nat ()) (b nat ())) ()
  (eq (max a b) (max b a))
()
(cases ((lt a b) (eq (max a b) (max b a)))
  (eqtr4d ((lt a b) (max a b) b (max b a))
    (:conv (im (lt a b) (eq (max a b) b))
      (im
        (lt a b)
        (eq
          (:unfold max (a b) ()
            (if (lt a b) b a))
          b))
      (ifpos ((lt a b) b a)))
    (syl ((lt a b) (not (lt b a)) (eq (max b a) b))
      (:conv (im (not (lt b a)) (eq (max b a) b))
        (im
          (not (lt b a))
          (eq
            (:unfold max (b a) ()
              (if (lt b a) a b))
            b))
        (ifneg ((lt b a) a b)))
      (ltnlt (a b))))
  (eqtr4d ((not (lt a b)) (max a b) a (max b a))
    (:conv (im (not (lt a b)) (eq (max a b) a))
      (im
        (not (lt a b))
        (eq
          (:unfold max (a b) ()
            (if (lt a b) b a))
          a))
      (ifneg ((lt a b) b a)))
    (sylbir ((not (lt a b)) (le b a) (eq (max b a) a))
      (lenlt (b a))
      (eqmax2 (b a))))))

(local theorem eqmin2 ((a nat ()) (b nat ())) ()
  (im (le b a) (eq (min a b) b))
()
(syl5eq ((le b a) (min a b) (min b a) b)
  (mincom (a b))
  (eqmin1 (b a))))

(local theorem eqmax1 ((a nat ()) (b nat ())) ()
  (im (le b a) (eq (max a b) a))
()
(syl5eq ((le b a) (max a b) (max b a) a)
  (maxcom (a b))
  (eqmax2 (b a))))

(local theorem minle1 ((a nat ()) (b nat ())) ()
  (le (min a b) a)
()
(cases ((lt a b) (le (min a b) a))
  (syl ((lt a b) (eq (min a b) a) (le (min a b) a))
    (eqle ((min a b) a))
    (:conv (im (lt a b) (eq (min a b) a))
      (im
        (lt a b)
        (eq
          (:unfold min (a b) ()
            (if (lt a b) a b))
          a))
      (ifpos ((lt a b) a b))))
  (mpbird ((not (lt a b)) (le b a) (le (min a b) a))
    (leeq1d ((not (lt a b)) (min a b) b a)
      (:conv (im (not (lt a b)) (eq (min a b) b))
        (im
          (not (lt a b))
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            b))
        (ifneg ((lt a b) a b))))
    (ax_mp ((iff (le b a) (not (lt a b))) (im (not (lt a b)) (le b a)))
      (bi2 ((le b a) (not (lt a b))))
      (lenlt (b a))))))

(local theorem minle2 ((a nat ()) (b nat ())) ()
  (le (min a b) b)
()
(mpbi ((le (min b a) b) (le (min a b) b))
  (ax_mp ((eq (min b a) (min a b)) (iff (le (min b a) b) (le (min a b) b)))
    (leeq1 ((min b a) (min a b) b))
    (mincom (b a)))
  (minle1 (b a))))

(local theorem lemin ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a (min b c)) (an (le a b) (le a c)))
()
(ibii ((le a (min b c)) (an (le a b) (le a c)))
  (iand ((le a (min b c)) (le a b) (le a c))
    (mpi ((le a (min b c)) (le (min b c) b) (le a b))
      (minle1 (b c))
      (letr (a (min b c) b)))
    (mpi ((le a (min b c)) (le (min b c) c) (le a c))
      (minle2 (b c))
      (letr (a (min b c) c))))
  (casesda ((an (le a b) (le a c)) (lt b c) (le a (min b c)))
    (mpbird ((an (an (le a b) (le a c)) (lt b c)) (le a b) (le a (min b c)))
      (anwr ((an (le a b) (le a c)) (lt b c) (iff (le a (min b c)) (le a b)))
        (leeq2d ((lt b c) a (min b c) b)
          (:conv (im (lt b c) (eq (min b c) b))
            (im
              (lt b c)
              (eq
                (:unfold min (b c) ()
                  (if (lt b c) b c))
                b))
            (ifpos ((lt b c) b c)))))
      (anll ((le a b) (le a c) (lt b c))))
    (mpbird ((an (an (le a b) (le a c)) (not (lt b c))) (le a c) (le a (min b c)))
      (anwr ((an (le a b) (le a c)) (not (lt b c)) (iff (le a (min b c)) (le a c)))
        (leeq2d ((not (lt b c)) a (min b c) c)
          (:conv (im (not (lt b c)) (eq (min b c) c))
            (im
              (not (lt b c))
              (eq
                (:unfold min (b c) ()
                  (if (lt b c) b c))
                c))
            (ifneg ((lt b c) b c)))))
      (anlr ((le a b) (le a c) (not (lt b c))))))))

(local theorem ltmin ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a (min b c)) (an (lt a b) (lt a c)))
()
(:conv (iff (lt a (min b c)) (an (lt a b) (lt a c)))
  (iff
    (:unfold lt (a (min b c)) ()
      (le (suc a) (min b c)))
    (an
      (:unfold lt (a b) ()
        (le (suc a) b))
      (:unfold lt (a c) ()
        (le (suc a) c))))
  (lemin ((suc a) b c))))

(local theorem subaddmin ((a nat ()) (b nat ())) ()
  (eq (add (sub a b) (min a b)) a)
()
(ax_mp ((or (le b a) (le a b)) (eq (add (sub a b) (min a b)) a))
  (ax_mp ((im (le a b) (eq (add (sub a b) (min a b)) a)) (im (or (le b a) (le a b)) (eq (add (sub a b) (min a b)) a)))
    (ax_mp ((im (le b a) (eq (add (sub a b) (min a b)) a)) (im (im (le a b) (eq (add (sub a b) (min a b)) a)) (im (or (le b a) (le a b)) (eq (add (sub a b) (min a b)) a))))
      (eor ((le b a) (le a b) (eq (add (sub a b) (min a b)) a)))
      (eqtrd ((le b a) (add (sub a b) (min a b)) (add (sub a b) b) a)
        (addeq2d ((le b a) (sub a b) (min a b) b)
          (eqmin2 (a b)))
        (npcan (a b))))
    (eqtrd ((le a b) (add (sub a b) (min a b)) (add (d0) (min a b)) a)
      (sylbi ((le a b) (eq (sub a b) (d0)) (eq (add (sub a b) (min a b)) (add (d0) (min a b))))
        (lesubeq0 (a b))
        (addeq1 ((sub a b) (d0) (min a b))))
      (syl5eq ((le a b) (add (d0) (min a b)) (min a b) a)
        (add01 ((min a b)))
        (eqmin1 (a b)))))
  (leorle (b a))))

(local theorem minaddsub ((a nat ()) (b nat ())) ()
  (eq (add (min a b) (sub a b)) a)
()
(ax_mp ((eq (add (sub a b) (min a b)) a) (eq (add (min a b) (sub a b)) a))
  (ax_mp ((eq (add (min a b) (sub a b)) (add (sub a b) (min a b))) (im (eq (add (sub a b) (min a b)) a) (eq (add (min a b) (sub a b)) a)))
    (eqtr ((add (min a b) (sub a b)) (add (sub a b) (min a b)) a))
    (addcom ((min a b) (sub a b))))
  (subaddmin (a b))))

(local theorem submin ((a nat ()) (b nat ())) ()
  (eq (sub a (min a b)) (sub a b))
()
(ax_mp ((or (le a b) (le b a)) (eq (sub a (min a b)) (sub a b)))
  (ax_mp ((im (le b a) (eq (sub a (min a b)) (sub a b))) (im (or (le a b) (le b a)) (eq (sub a (min a b)) (sub a b))))
    (ax_mp ((im (le a b) (eq (sub a (min a b)) (sub a b))) (im (im (le b a) (eq (sub a (min a b)) (sub a b))) (im (or (le a b) (le b a)) (eq (sub a (min a b)) (sub a b)))))
      (eor ((le a b) (le b a) (eq (sub a (min a b)) (sub a b))))
      (eqtr4d ((le a b) (sub a (min a b)) (sub a a) (sub a b))
        (subeq2d ((le a b) a (min a b) a)
          (eqmin1 (a b)))
        (syl6eqr ((le a b) (sub a b) (d0) (sub a a))
          (subid (a))
          (ax_mp ((iff (le a b) (eq (sub a b) (d0))) (im (le a b) (eq (sub a b) (d0))))
            (bi1 ((le a b) (eq (sub a b) (d0))))
            (lesubeq0 (a b))))))
    (subeq2d ((le b a) a (min a b) b)
      (eqmin2 (a b))))
  (leorle (a b))))

(local theorem lemax1 ((a nat ()) (b nat ())) ()
  (le a (max a b))
()
(cases ((lt a b) (le a (max a b)))
  (mpbird ((lt a b) (le a b) (le a (max a b)))
    (leeq2d ((lt a b) a (max a b) b)
      (:conv (im (lt a b) (eq (max a b) b))
        (im
          (lt a b)
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            b))
        (ifpos ((lt a b) b a))))
    (ltle (a b)))
  (syl ((not (lt a b)) (eq (max a b) a) (le a (max a b)))
    (eqler ((max a b) a))
    (:conv (im (not (lt a b)) (eq (max a b) a))
      (im
        (not (lt a b))
        (eq
          (:unfold max (a b) ()
            (if (lt a b) b a))
          a))
      (ifneg ((lt a b) b a))))))

(local theorem lemax2 ((a nat ()) (b nat ())) ()
  (le b (max a b))
()
(mpbi ((le b (max b a)) (le b (max a b)))
  (ax_mp ((eq (max b a) (max a b)) (iff (le b (max b a)) (le b (max a b))))
    (leeq2 (b (max b a) (max a b)))
    (maxcom (b a)))
  (lemax1 (b a))))

(local theorem maxle ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le (max a b) c) (an (le a c) (le b c)))
()
(ibii ((le (max a b) c) (an (le a c) (le b c)))
  (iand ((le (max a b) c) (le a c) (le b c))
    (ax_mp ((le a (max a b)) (im (le (max a b) c) (le a c)))
      (letr (a (max a b) c))
      (lemax1 (a b)))
    (ax_mp ((le b (max a b)) (im (le (max a b) c) (le b c)))
      (letr (b (max a b) c))
      (lemax2 (a b))))
  (casesda ((an (le a c) (le b c)) (lt a b) (le (max a b) c))
    (mpbird ((an (an (le a c) (le b c)) (lt a b)) (le b c) (le (max a b) c))
      (anwr ((an (le a c) (le b c)) (lt a b) (iff (le (max a b) c) (le b c)))
        (leeq1d ((lt a b) (max a b) b c)
          (:conv (im (lt a b) (eq (max a b) b))
            (im
              (lt a b)
              (eq
                (:unfold max (a b) ()
                  (if (lt a b) b a))
                b))
            (ifpos ((lt a b) b a)))))
      (anlr ((le a c) (le b c) (lt a b))))
    (mpbird ((an (an (le a c) (le b c)) (not (lt a b))) (le a c) (le (max a b) c))
      (anwr ((an (le a c) (le b c)) (not (lt a b)) (iff (le (max a b) c) (le a c)))
        (leeq1d ((not (lt a b)) (max a b) a c)
          (:conv (im (not (lt a b)) (eq (max a b) a))
            (im
              (not (lt a b))
              (eq
                (:unfold max (a b) ()
                  (if (lt a b) b a))
                a))
            (ifneg ((lt a b) b a)))))
      (anll ((le a c) (le b c) (not (lt a b))))))))

(local theorem ltmax ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a (max b c)) (or (lt a b) (lt a c)))
()
(ax_mp ((iff (not (lt a (max b c))) (not (or (lt a b) (lt a c)))) (iff (lt a (max b c)) (or (lt a b) (lt a c))))
  (con4b ((lt a (max b c)) (or (lt a b) (lt a c))))
  (ax_mp ((iff (le (max b c) a) (not (or (lt a b) (lt a c)))) (iff (not (lt a (max b c))) (not (or (lt a b) (lt a c)))))
    (ax_mp ((iff (le (max b c) a) (not (lt a (max b c)))) (im (iff (le (max b c) a) (not (or (lt a b) (lt a c)))) (iff (not (lt a (max b c))) (not (or (lt a b) (lt a c))))))
      (bitr3 ((not (lt a (max b c))) (le (max b c) a) (not (or (lt a b) (lt a c)))))
      (lenlt ((max b c) a)))
    (ax_mp ((iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))) (iff (le (max b c) a) (not (or (lt a b) (lt a c)))))
      (ax_mp ((iff (le (max b c) a) (an (le b a) (le c a))) (im (iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))) (iff (le (max b c) a) (not (or (lt a b) (lt a c))))))
        (bitr ((le (max b c) a) (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))))
        (maxle (b c a)))
      (ax_mp ((iff (not (or (lt a b) (lt a c))) (an (not (lt a b)) (not (lt a c)))) (iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))))
        (ax_mp ((iff (an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c)))) (im (iff (not (or (lt a b) (lt a c))) (an (not (lt a b)) (not (lt a c)))) (iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c))))))
          (bitr4 ((an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c))) (not (or (lt a b) (lt a c)))))
          (ax_mp ((iff (le c a) (not (lt a c))) (iff (an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c)))))
            (ax_mp ((iff (le b a) (not (lt a b))) (im (iff (le c a) (not (lt a c))) (iff (an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c))))))
              (aneq ((le b a) (not (lt a b)) (le c a) (not (lt a c))))
              (lenlt (b a)))
            (lenlt (c a))))
        (notor ((lt a b) (lt a c))))))))

(local theorem minadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (min a b) c) (min (add a c) (add b c)))
()
(:let H1 (ltadd1 (a b c))
(cases ((lt a b) (eq (add (min a b) c) (min (add a c) (add b c))))
  (eqtr4d ((lt a b) (add (min a b) c) (add a c) (min (add a c) (add b c)))
    (addeq1d ((lt a b) (min a b) a c)
      (:conv (im (lt a b) (eq (min a b) a))
        (im
          (lt a b)
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            a))
        (ifpos ((lt a b) a b))))
    (sylbi ((lt a b) (lt (add a c) (add b c)) (eq (min (add a c) (add b c)) (add a c)))
      H1
      (:conv (im (lt (add a c) (add b c)) (eq (min (add a c) (add b c)) (add a c)))
        (im
          (lt (add a c) (add b c))
          (eq
            (:unfold min ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add a c) (add b c)))
            (add a c)))
        (ifpos ((lt (add a c) (add b c)) (add a c) (add b c))))))
  (eqtr4d ((not (lt a b)) (add (min a b) c) (add b c) (min (add a c) (add b c)))
    (addeq1d ((not (lt a b)) (min a b) b c)
      (:conv (im (not (lt a b)) (eq (min a b) b))
        (im
          (not (lt a b))
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            b))
        (ifneg ((lt a b) a b))))
    (sylbi ((not (lt a b)) (not (lt (add a c) (add b c))) (eq (min (add a c) (add b c)) (add b c)))
      (ax_mp ((iff (lt a b) (lt (add a c) (add b c))) (iff (not (lt a b)) (not (lt (add a c) (add b c)))))
        (noteq ((lt a b) (lt (add a c) (add b c))))
        H1)
      (:conv (im (not (lt (add a c) (add b c))) (eq (min (add a c) (add b c)) (add b c)))
        (im
          (not (lt (add a c) (add b c)))
          (eq
            (:unfold min ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add a c) (add b c)))
            (add b c)))
        (ifneg ((lt (add a c) (add b c)) (add a c) (add b c)))))))))

(local theorem maxadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (max a b) c) (max (add a c) (add b c)))
()
(:let H1 (ltadd1 (a b c))
(cases ((lt a b) (eq (add (max a b) c) (max (add a c) (add b c))))
  (eqtr4d ((lt a b) (add (max a b) c) (add b c) (max (add a c) (add b c)))
    (addeq1d ((lt a b) (max a b) b c)
      (:conv (im (lt a b) (eq (max a b) b))
        (im
          (lt a b)
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            b))
        (ifpos ((lt a b) b a))))
    (sylbi ((lt a b) (lt (add a c) (add b c)) (eq (max (add a c) (add b c)) (add b c)))
      H1
      (:conv (im (lt (add a c) (add b c)) (eq (max (add a c) (add b c)) (add b c)))
        (im
          (lt (add a c) (add b c))
          (eq
            (:unfold max ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add b c) (add a c)))
            (add b c)))
        (ifpos ((lt (add a c) (add b c)) (add b c) (add a c))))))
  (eqtr4d ((not (lt a b)) (add (max a b) c) (add a c) (max (add a c) (add b c)))
    (addeq1d ((not (lt a b)) (max a b) a c)
      (:conv (im (not (lt a b)) (eq (max a b) a))
        (im
          (not (lt a b))
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            a))
        (ifneg ((lt a b) b a))))
    (sylbi ((not (lt a b)) (not (lt (add a c) (add b c))) (eq (max (add a c) (add b c)) (add a c)))
      (ax_mp ((iff (lt a b) (lt (add a c) (add b c))) (iff (not (lt a b)) (not (lt (add a c) (add b c)))))
        (noteq ((lt a b) (lt (add a c) (add b c))))
        H1)
      (:conv (im (not (lt (add a c) (add b c))) (eq (max (add a c) (add b c)) (add a c)))
        (im
          (not (lt (add a c) (add b c)))
          (eq
            (:unfold max ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add b c) (add a c)))
            (add a c)))
        (ifneg ((lt (add a c) (add b c)) (add b c) (add a c)))))))))

(local theorem minS ((a nat ()) (b nat ())) ()
  (eq (suc (min a b)) (min (suc a) (suc b)))
()
(ax_mp ((eq (add (min a b) (d1)) (min (suc a) (suc b))) (eq (suc (min a b)) (min (suc a) (suc b))))
  (ax_mp ((eq (add (min a b) (d1)) (suc (min a b))) (im (eq (add (min a b) (d1)) (min (suc a) (suc b))) (eq (suc (min a b)) (min (suc a) (suc b)))))
    (eqtr3 ((suc (min a b)) (add (min a b) (d1)) (min (suc a) (suc b))))
    (add12 ((min a b))))
  (ax_mp ((eq (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))) (eq (add (min a b) (d1)) (min (suc a) (suc b))))
    (ax_mp ((eq (add (min a b) (d1)) (min (add a (d1)) (add b (d1)))) (im (eq (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))) (eq (add (min a b) (d1)) (min (suc a) (suc b)))))
      (eqtr ((add (min a b) (d1)) (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))))
      (minadd1 (a b (d1))))
    (trud ((eq (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))))
      (mineqd ((tru) (add a (d1)) (suc a) (add b (d1)) (suc b))
        (a1i ((tru) (eq (add a (d1)) (suc a)))
          (add12 (a)))
        (a1i ((tru) (eq (add b (d1)) (suc b)))
          (add12 (b))))))))

(local theorem maxS ((a nat ()) (b nat ())) ()
  (eq (suc (max a b)) (max (suc a) (suc b)))
()
(ax_mp ((eq (add (max a b) (d1)) (max (suc a) (suc b))) (eq (suc (max a b)) (max (suc a) (suc b))))
  (ax_mp ((eq (add (max a b) (d1)) (suc (max a b))) (im (eq (add (max a b) (d1)) (max (suc a) (suc b))) (eq (suc (max a b)) (max (suc a) (suc b)))))
    (eqtr3 ((suc (max a b)) (add (max a b) (d1)) (max (suc a) (suc b))))
    (add12 ((max a b))))
  (ax_mp ((eq (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))) (eq (add (max a b) (d1)) (max (suc a) (suc b))))
    (ax_mp ((eq (add (max a b) (d1)) (max (add a (d1)) (add b (d1)))) (im (eq (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))) (eq (add (max a b) (d1)) (max (suc a) (suc b)))))
      (eqtr ((add (max a b) (d1)) (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))))
      (maxadd1 (a b (d1))))
    (trud ((eq (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))))
      (maxeqd ((tru) (add a (d1)) (suc a) (add b (d1)) (suc b))
        (a1i ((tru) (eq (add a (d1)) (suc a)))
          (add12 (a)))
        (a1i ((tru) (eq (add b (d1)) (suc b)))
          (add12 (b))))))))

(local theorem maxlt ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt (max a b) c) (an (lt a c) (lt b c)))
()
(ax_mp ((iff (le (max (suc a) (suc b)) c) (an (lt a c) (lt b c))) (iff (lt (max a b) c) (an (lt a c) (lt b c))))
  (ax_mp ((iff (lt (max a b) c) (le (max (suc a) (suc b)) c)) (im (iff (le (max (suc a) (suc b)) c) (an (lt a c) (lt b c))) (iff (lt (max a b) c) (an (lt a c) (lt b c)))))
    (bitr ((lt (max a b) c) (le (max (suc a) (suc b)) c) (an (lt a c) (lt b c))))
    (ax_mp ((eq (suc (max a b)) (max (suc a) (suc b))) (iff (lt (max a b) c) (le (max (suc a) (suc b)) c)))
      (:conv (im (eq (suc (max a b)) (max (suc a) (suc b))) (iff (lt (max a b) c) (le (max (suc a) (suc b)) c)))
        (im
          (eq (suc (max a b)) (max (suc a) (suc b)))
          (iff
            (:unfold lt ((max a b) c) ()
              (le (suc (max a b)) c))
            (le (max (suc a) (suc b)) c)))
        (leeq1 ((suc (max a b)) (max (suc a) (suc b)) c)))
      (maxS (a b))))
  (:conv (iff (le (max (suc a) (suc b)) c) (an (lt a c) (lt b c)))
    (iff
      (le (max (suc a) (suc b)) c)
      (an
        (:unfold lt (a c) ()
          (le (suc a) c))
        (:unfold lt (b c) ()
          (le (suc b) c))))
    (maxle ((suc a) (suc b) c)))))

(local theorem lemax ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a (max b c)) (or (le a b) (le a c)))
()
(ax_mp ((iff (not (le a (max b c))) (not (or (le a b) (le a c)))) (iff (le a (max b c)) (or (le a b) (le a c))))
  (con4b ((le a (max b c)) (or (le a b) (le a c))))
  (ax_mp ((iff (lt (max b c) a) (not (or (le a b) (le a c)))) (iff (not (le a (max b c))) (not (or (le a b) (le a c)))))
    (ax_mp ((iff (lt (max b c) a) (not (le a (max b c)))) (im (iff (lt (max b c) a) (not (or (le a b) (le a c)))) (iff (not (le a (max b c))) (not (or (le a b) (le a c))))))
      (bitr3 ((not (le a (max b c))) (lt (max b c) a) (not (or (le a b) (le a c)))))
      (ltnle ((max b c) a)))
    (ax_mp ((iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))) (iff (lt (max b c) a) (not (or (le a b) (le a c)))))
      (ax_mp ((iff (lt (max b c) a) (an (lt b a) (lt c a))) (im (iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))) (iff (lt (max b c) a) (not (or (le a b) (le a c))))))
        (bitr ((lt (max b c) a) (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))))
        (maxlt (b c a)))
      (ax_mp ((iff (not (or (le a b) (le a c))) (an (not (le a b)) (not (le a c)))) (iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))))
        (ax_mp ((iff (an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c)))) (im (iff (not (or (le a b) (le a c))) (an (not (le a b)) (not (le a c)))) (iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c))))))
          (bitr4 ((an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c))) (not (or (le a b) (le a c)))))
          (ax_mp ((iff (lt c a) (not (le a c))) (iff (an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c)))))
            (ax_mp ((iff (lt b a) (not (le a b))) (im (iff (lt c a) (not (le a c))) (iff (an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c))))))
              (aneq ((lt b a) (not (le a b)) (lt c a) (not (le a c))))
              (ltnle (b a)))
            (ltnle (c a))))
        (notor ((le a b) (le a c))))))))

(local theorem unfin ((A set ()) (B set ())) ()
  (im (finite A) (im (finite B) (finite (Union A B))))
((m nat) (n nat) (x nat) (z nat))
(:conv (im (finite A) (im (finite B) (finite (Union A B))))
  (im
    (:unfold finite (A) (m x)
      (ex m (al x (im (el x A) (lt x m)))))
    (im (finite B) (finite (Union A B))))
  (eex (m (al x (im (el x A) (lt x m))) (im (finite B) (finite (Union A B))))
    (:conv (im (al x (im (el x A) (lt x m))) (im (finite B) (finite (Union A B))))
      (im
        (al x (im (el x A) (lt x m)))
        (im
          (:unfold finite (B) (n x)
            (ex n (al x (im (el x B) (lt x n)))))
          (finite (Union A B))))
      (eexd (n (al x (im (el x A) (lt x m))) (al x (im (el x B) (lt x n))) (finite (Union A B)))
        (syl6 ((al x (im (el x A) (lt x m))) (al x (im (el x B) (lt x n))) (al x (im (el x (Union A B)) (lt x (max m n)))) (finite (Union A B)))
          (:conv (im (al x (im (el x (Union A B)) (lt x (max m n)))) (finite (Union A B)))
            (im
              (al x (im (el x (Union A B)) (lt x (max m n))))
              (:unfold finite ((Union A B)) (z x)
                (ex z (al x (im (el x (Union A B)) (lt x z))))))
            (iexe (z (max m n) (al x (im (el x (Union A B)) (lt x z))) (al x (im (el x (Union A B)) (lt x (max m n)))))
              (aleqd ((eq z (max m n)) x (im (el x (Union A B)) (lt x z)) (im (el x (Union A B)) (lt x (max m n))))
                (imeq2d ((eq z (max m n)) (el x (Union A B)) (lt x z) (lt x (max m n)))
                  (lteq2 (x z (max m n)))))))
          (al2imi (x (im (el x A) (lt x m)) (im (el x B) (lt x n)) (im (el x (Union A B)) (lt x (max m n))))
            (rsyl ((im (el x A) (lt x m)) (im (el x A) (lt x (max m n))) (im (im (el x B) (lt x n)) (im (el x (Union A B)) (lt x (max m n)))))
              (imim2i ((el x A) (lt x m) (lt x (max m n)))
                (mpi ((lt x m) (le m (max m n)) (lt x (max m n)))
                  (lemax1 (m n))
                  (ltletr (x m (max m n)))))
              (syl5 ((im (el x A) (lt x (max m n))) (im (el x B) (lt x n)) (im (el x B) (lt x (max m n))) (im (el x (Union A B)) (lt x (max m n))))
                (imim2i ((el x B) (lt x n) (lt x (max m n)))
                  (mpi ((lt x n) (le n (max m n)) (lt x (max m n)))
                    (lemax2 (m n))
                    (ltletr (x n (max m n)))))
                (syl6ibr ((im (el x A) (lt x (max m n))) (im (el x B) (lt x (max m n))) (im (or (el x A) (el x B)) (lt x (max m n))) (im (el x (Union A B)) (lt x (max m n))))
                  (imeq1i ((el x (Union A B)) (or (el x A) (el x B)) (lt x (max m n)))
                    (elun (A B x)))
                  (eor ((el x A) (el x B) (lt x (max m n))))))))))))))

(def div ((a nat ()) (b nat ())) (nat ())
((q nat) (r nat))
(the (ab q (ex r (an (lt r b) (eq (add (mul b q) r) a))))))

(local theorem diveqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (div _a1 _b1) (div _a2 _b2)))
((q nat) (r nat))
(:let H1 (eqidd (_G r))
(:conv (im _G (eq (div _a1 _b1) (div _a2 _b2)))
  (im
    _G
    (eq
      (:unfold div (_a1 _b1) (q r)
        (the (ab q (ex r (an (lt r _b1) (eq (add (mul _b1 q) r) _a1))))))
      (:unfold div (_a2 _b2) (q r)
        (the (ab q (ex r (an (lt r _b2) (eq (add (mul _b2 q) r) _a2))))))))
  (theeqd (_G (ab q (ex r (an (lt r _b1) (eq (add (mul _b1 q) r) _a1)))) (ab q (ex r (an (lt r _b2) (eq (add (mul _b2 q) r) _a2)))))
    (abeqd (_G q (ex r (an (lt r _b1) (eq (add (mul _b1 q) r) _a1))) (ex r (an (lt r _b2) (eq (add (mul _b2 q) r) _a2))))
      (exeqd (_G r (an (lt r _b1) (eq (add (mul _b1 q) r) _a1)) (an (lt r _b2) (eq (add (mul _b2 q) r) _a2)))
        (aneqd (_G (lt r _b1) (lt r _b2) (eq (add (mul _b1 q) r) _a1) (eq (add (mul _b2 q) r) _a2))
          (lteqd (_G r r _b1 _b2)
            H1
            _bh)
          (eqeqd (_G (add (mul _b1 q) r) (add (mul _b2 q) r) _a1 _a2)
            (addeqd (_G (mul _b1 q) (mul _b2 q) r r)
              (muleqd (_G _b1 _b2 q q)
                _bh
                (eqidd (_G q)))
              H1)
            _ah))))))))

(local theorem diveq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (div _a1 _b1) (div _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (div _a1 _b1) (div _a2 _b2)))
  (diveqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem diveq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (div _a1 b) (div _a2 b)))
()
(diveqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem diveq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (div _a1 b) (div _a2 b)))
()
(diveq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem diveq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (div a _b1) (div a _b2)))
()
(diveqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem diveq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (div a _b1) (div a _b2)))
()
(diveq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(def mod ((a nat ()) (b nat ())) (nat ())
()
(sub a (mul b (div a b))))

(local theorem modeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (mod _a1 _b1) (mod _a2 _b2)))
()
(:conv (im _G (eq (mod _a1 _b1) (mod _a2 _b2)))
  (im
    _G
    (eq
      (:unfold mod (_a1 _b1) ()
        (sub _a1 (mul _b1 (div _a1 _b1))))
      (:unfold mod (_a2 _b2) ()
        (sub _a2 (mul _b2 (div _a2 _b2))))))
  (subeqd (_G _a1 _a2 (mul _b1 (div _a1 _b1)) (mul _b2 (div _a2 _b2)))
    _ah
    (muleqd (_G _b1 _b2 (div _a1 _b1) (div _a2 _b2))
      _bh
      (diveqd (_G _a1 _a2 _b1 _b2)
        _ah
        _bh)))))

(local theorem modeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (mod _a1 _b1) (mod _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (mod _a1 _b1) (mod _a2 _b2)))
  (modeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem modeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (mod _a1 b) (mod _a2 b)))
()
(modeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem modeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (mod _a1 b) (mod _a2 b)))
()
(modeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem modeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (mod a _b1) (mod a _b2)))
()
(modeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem modeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (mod a _b1) (mod a _b2)))
()
(modeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(theorem div0 ((a nat ())) ()
  (eq (div a (d0)) (d0))
((q nat) (r nat))
(trud ((eq (div a (d0)) (d0)))
  (:conv (im (tru) (eq (div a (d0)) (d0)))
    (im
      (tru)
      (eq
        (:unfold div (a (d0)) (q r)
          (the (ab q (ex r (an (lt r (d0)) (eq (add (mul (d0) q) r) a))))))
        (d0)))
    (eqthe0abd ((tru) q (ex r (an (lt r (d0)) (eq (add (mul (d0) q) r) a))))
      (a1i ((tru) (im (ex r (an (lt r (d0)) (eq (add (mul (d0) q) r) a))) (eq q (d0))))
        (eex (r (an (lt r (d0)) (eq (add (mul (d0) q) r) a)) (eq q (d0)))
          (anwl ((lt r (d0)) (eq (add (mul (d0) q) r) a) (eq q (d0)))
            (ax_mp ((not (lt r (d0))) (im (lt r (d0)) (eq q (d0))))
              (absurd ((lt r (d0)) (eq q (d0))))
              (lt02 (r))))))))))

(local theorem mod0 ((a nat ())) ()
  (eq (mod a (d0)) a)
()
(ax_mp ((eq (sub a (d0)) a) (eq (mod a (d0)) a))
  (ax_mp ((eq (mod a (d0)) (sub a (d0))) (im (eq (sub a (d0)) a) (eq (mod a (d0)) a)))
    (eqtr ((mod a (d0)) (sub a (d0)) a))
    (ax_mp ((eq (mul (d0) (div a (d0))) (d0)) (eq (mod a (d0)) (sub a (d0))))
      (:conv (im (eq (mul (d0) (div a (d0))) (d0)) (eq (mod a (d0)) (sub a (d0))))
        (im
          (eq (mul (d0) (div a (d0))) (d0))
          (eq
            (:unfold mod (a (d0)) ()
              (sub a (mul (d0) (div a (d0)))))
            (sub a (d0))))
        (subeq2 (a (mul (d0) (div a (d0))) (d0))))
      (mul01 ((div a (d0))))))
  (sub02 (a))))

(local theorem divlem1 ((G wff ()) (b nat ()) (q1 nat ()) (q2 nat ()) (r1 nat ()) (r2 nat ()))
  ((h1 (im G (lt r1 b)))
   (h2 (im G (lt r2 b)))
   (h3 (im G (le (add (mul b q1) r1) (add (mul b q2) r2)))))
  (im G (le q1 q2))
()
(sylibr (G (lt q1 (suc q2)) (le q1 q2))
  (leltsuc (q1 q2))
  (mpbird (G (lt (mul b q1) (mul b (suc q2))) (lt q1 (suc q2)))
    (syl (G (lt (d0) b) (iff (lt q1 (suc q2)) (lt (mul b q1) (mul b (suc q2)))))
      (ltmul2 (b q1 (suc q2)))
      (lelttrd (G (d0) r1 b)
        (a1i (G (le (d0) r1))
          (le01 (r1)))
        h1))
    (lelttrd (G (mul b q1) (add (mul b q1) r1) (mul b (suc q2)))
      (a1i (G (le (mul b q1) (add (mul b q1) r1)))
        (leaddid1 ((mul b q1) r1)))
      (lelttrd (G (add (mul b q1) r1) (add (mul b q2) r2) (mul b (suc q2)))
        h3
        (sylibr (G (lt (add (mul b q2) r2) (add (mul b q2) b)) (lt (add (mul b q2) r2) (mul b (suc q2))))
          (ax_mp ((eq (mul b (suc q2)) (add (mul b q2) b)) (iff (lt (add (mul b q2) r2) (mul b (suc q2))) (lt (add (mul b q2) r2) (add (mul b q2) b))))
            (lteq2 ((add (mul b q2) r2) (mul b (suc q2)) (add (mul b q2) b)))
            (mulS (b q2)))
          (sylib (G (lt r2 b) (lt (add (mul b q2) r2) (add (mul b q2) b)))
            (ltadd2 ((mul b q2) r2 b))
            h2)))))))

(local theorem divlem2 ((G wff ()) (Q nat ()) (R nat ()) (a nat ()) (b nat ()) (q nat ()) (r nat))
  ((h1 (im G (lt R b)))
   (h2 (im G (eq (add (mul b Q) R) a))))
  (im G (iff (ex r (an (lt r b) (eq (add (mul b q) r) a))) (eq q Q)))
()
(:let H1 (anrl (G (lt r b) (eq (add (mul b q) r) a)))
(:let H2 (anwl (G (an (lt r b) (eq (add (mul b q) r) a)) (lt R b))
  h1)
(:let H3 (anrr (G (lt r b) (eq (add (mul b q) r) a)))
(:let H4 (anwl (G (an (lt r b) (eq (add (mul b q) r) a)) (eq (add (mul b Q) R) a))
  h2)
(ibid (G (ex r (an (lt r b) (eq (add (mul b q) r) a))) (eq q Q))
  (eexda (r G (an (lt r b) (eq (add (mul b q) r) a)) (eq q Q))
    (leasymd ((an G (an (lt r b) (eq (add (mul b q) r) a))) q Q)
      (divlem1 ((an G (an (lt r b) (eq (add (mul b q) r) a))) b q Q r R)
        H1
        H2
        (syl ((an G (an (lt r b) (eq (add (mul b q) r) a))) (eq (add (mul b q) r) (add (mul b Q) R)) (le (add (mul b q) r) (add (mul b Q) R)))
          (eqle ((add (mul b q) r) (add (mul b Q) R)))
          (eqtr4d ((an G (an (lt r b) (eq (add (mul b q) r) a))) (add (mul b q) r) a (add (mul b Q) R))
            H3
            H4)))
      (divlem1 ((an G (an (lt r b) (eq (add (mul b q) r) a))) b Q q R r)
        H2
        H1
        (syl ((an G (an (lt r b) (eq (add (mul b q) r) a))) (eq (add (mul b Q) R) (add (mul b q) r)) (le (add (mul b Q) R) (add (mul b q) r)))
          (eqle ((add (mul b Q) R) (add (mul b q) r)))
          (eqtr4d ((an G (an (lt r b) (eq (add (mul b q) r) a))) (add (mul b Q) R) a (add (mul b q) r))
            H4
            H3)))))
  (exp (G (eq q Q) (ex r (an (lt r b) (eq (add (mul b q) r) a))))
    (syl ((an G (eq q Q)) (an (lt R b) (eq (add (mul b q) R) a)) (ex r (an (lt r b) (eq (add (mul b q) r) a))))
      (iexe (r R (an (lt r b) (eq (add (mul b q) r) a)) (an (lt R b) (eq (add (mul b q) R) a)))
        (aneqd ((eq r R) (lt r b) (lt R b) (eq (add (mul b q) r) a) (eq (add (mul b q) R) a))
          (lteq1 (r R b))
          (eqeq1d ((eq r R) (add (mul b q) r) (add (mul b q) R) a)
            (addeq2 ((mul b q) r R)))))
      (iand ((an G (eq q Q)) (lt R b) (eq (add (mul b q) R) a))
        (anwl (G (eq q Q) (lt R b))
          h1)
        (eqtrd ((an G (eq q Q)) (add (mul b q) R) (add (mul b Q) R) a)
          (anwr (G (eq q Q) (eq (add (mul b q) R) (add (mul b Q) R)))
            (addeq1d ((eq q Q) (mul b q) (mul b Q) R)
              (muleq2 (b q Q))))
          (anwl (G (eq q Q) (eq (add (mul b Q) R) a))
            h2)))))))))))

(local theorem divlem3 ((a nat ()) (b nat ()) (q nat) (r nat)) ()
  (im (ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))))
((_1 nat) (u nat) (v nat) (x1 nat))
(:let H1 (lteq1 (r (d0) b))
(:let H2 (lt01 (b))
(:let H3 (anrr ((ne b (d0)) (lt v b) (eq (add (mul b u) v) x1)))
(indd ((ne b (d0)) _1 x1 a (ex q (ex r (an (lt r b) (eq (add (mul b q) r) _1)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (d0))))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) x1)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1))))))
  (exeqd ((eq _1 a) q (ex r (an (lt r b) (eq (add (mul b q) r) _1))) (ex r (an (lt r b) (eq (add (mul b q) r) a))))
    (exeqd ((eq _1 a) r (an (lt r b) (eq (add (mul b q) r) _1)) (an (lt r b) (eq (add (mul b q) r) a)))
      (aneqd ((eq _1 a) (lt r b) (lt r b) (eq (add (mul b q) r) _1) (eq (add (mul b q) r) a))
        (biidd ((eq _1 a) (lt r b)))
        (eqeqd ((eq _1 a) (add (mul b q) r) (add (mul b q) r) _1 a)
          (eqidd ((eq _1 a) (add (mul b q) r)))
          (id ((eq _1 a)))))))
  (exeqd ((eq _1 (d0)) q (ex r (an (lt r b) (eq (add (mul b q) r) _1))) (ex r (an (lt r b) (eq (add (mul b q) r) (d0)))))
    (exeqd ((eq _1 (d0)) r (an (lt r b) (eq (add (mul b q) r) _1)) (an (lt r b) (eq (add (mul b q) r) (d0))))
      (aneqd ((eq _1 (d0)) (lt r b) (lt r b) (eq (add (mul b q) r) _1) (eq (add (mul b q) r) (d0)))
        (biidd ((eq _1 (d0)) (lt r b)))
        (eqeqd ((eq _1 (d0)) (add (mul b q) r) (add (mul b q) r) _1 (d0))
          (eqidd ((eq _1 (d0)) (add (mul b q) r)))
          (id ((eq _1 (d0))))))))
  (exeqd ((eq _1 x1) q (ex r (an (lt r b) (eq (add (mul b q) r) _1))) (ex r (an (lt r b) (eq (add (mul b q) r) x1))))
    (exeqd ((eq _1 x1) r (an (lt r b) (eq (add (mul b q) r) _1)) (an (lt r b) (eq (add (mul b q) r) x1)))
      (aneqd ((eq _1 x1) (lt r b) (lt r b) (eq (add (mul b q) r) _1) (eq (add (mul b q) r) x1))
        (biidd ((eq _1 x1) (lt r b)))
        (eqeqd ((eq _1 x1) (add (mul b q) r) (add (mul b q) r) _1 x1)
          (eqidd ((eq _1 x1) (add (mul b q) r)))
          (id ((eq _1 x1)))))))
  (exeqd ((eq _1 (suc x1)) q (ex r (an (lt r b) (eq (add (mul b q) r) _1))) (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1)))))
    (exeqd ((eq _1 (suc x1)) r (an (lt r b) (eq (add (mul b q) r) _1)) (an (lt r b) (eq (add (mul b q) r) (suc x1))))
      (aneqd ((eq _1 (suc x1)) (lt r b) (lt r b) (eq (add (mul b q) r) _1) (eq (add (mul b q) r) (suc x1)))
        (biidd ((eq _1 (suc x1)) (lt r b)))
        (eqeqd ((eq _1 (suc x1)) (add (mul b q) r) (add (mul b q) r) _1 (suc x1))
          (eqidd ((eq _1 (suc x1)) (add (mul b q) r)))
          (id ((eq _1 (suc x1))))))))
  (iexde (q (ne b (d0)) (d0) (ex r (an (lt r b) (eq (add (mul b q) r) (d0)))))
    (iexde (r (an (ne b (d0)) (eq q (d0))) (d0) (an (lt r b) (eq (add (mul b q) r) (d0))))
      (iand ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (lt r b) (eq (add (mul b q) r) (d0)))
        (mpbird ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (lt (d0) b) (lt r b))
          (anwr ((an (ne b (d0)) (eq q (d0))) (eq r (d0)) (iff (lt r b) (lt (d0) b)))
            H1)
          (sylibr ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (ne b (d0)) (lt (d0) b))
            H2
            (anll ((ne b (d0)) (eq q (d0)) (eq r (d0))))))
        (syl6eq ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (add (mul b q) r) (add (d0) (d0)) (d0))
          (add0 ((d0)))
          (addeqd ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (mul b q) (d0) r (d0))
            (syl6eq ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (mul b q) (mul b (d0)) (d0))
              (mul02 (b))
              (anwl ((an (ne b (d0)) (eq q (d0))) (eq r (d0)) (eq (mul b q) (mul b (d0))))
                (anwr ((ne b (d0)) (eq q (d0)) (eq (mul b q) (mul b (d0))))
                  (muleq2 (b q (d0))))))
            (anr ((an (ne b (d0)) (eq q (d0))) (eq r (d0)))))))))
  (imp ((ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) x1)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1))))))
    (syl5bi ((ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) x1)))) (ex u (ex v (an (lt v b) (eq (add (mul b u) v) x1)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1))))))
      (cbvex (q u (ex r (an (lt r b) (eq (add (mul b q) r) x1))) (ex v (an (lt v b) (eq (add (mul b u) v) x1))))
        (cbvexd (r v (eq q u) (an (lt r b) (eq (add (mul b q) r) x1)) (an (lt v b) (eq (add (mul b u) v) x1)))
          (aneqd ((an (eq q u) (eq r v)) (lt r b) (lt v b) (eq (add (mul b q) r) x1) (eq (add (mul b u) v) x1))
            (anwr ((eq q u) (eq r v) (iff (lt r b) (lt v b)))
              (lteq1 (r v b)))
            (eqeq1d ((an (eq q u) (eq r v)) (add (mul b q) r) (add (mul b u) v) x1)
              (addeqd ((an (eq q u) (eq r v)) (mul b q) (mul b u) r v)
                (anwl ((eq q u) (eq r v) (eq (mul b q) (mul b u)))
                  (muleq2 (b q u)))
                (anr ((eq q u) (eq r v))))))))
      (eexd (u (ne b (d0)) (ex v (an (lt v b) (eq (add (mul b u) v) x1))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1))))))
        (eexda (v (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1))))))
          (mpd ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (or (lt (suc v) b) (eq (suc v) b)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1))))))
            (sylib ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (le (suc v) b) (or (lt (suc v) b) (eq (suc v) b)))
              (leloe ((suc v) b))
              (:conv (im (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (le (suc v) b))
                (im
                  (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1)))
                  (:sym (:unfold lt (v b) ()
                    (le (suc v) b))))
                (anrl ((ne b (d0)) (lt v b) (eq (add (mul b u) v) x1)))))
            (eorda ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b) (eq (suc v) b) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1))))))
              (iexde (q (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) u (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1)))))
                (iexde (r (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (suc v) (an (lt r b) (eq (add (mul b q) r) (suc x1))))
                  (iand ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (lt r b) (eq (add (mul b q) r) (suc x1)))
                    (mpbird ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (lt (suc v) b) (lt r b))
                      (anwr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v)) (iff (lt r b) (lt (suc v) b)))
                        (lteq1 (r (suc v) b)))
                      (anwll ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u) (eq r (suc v)) (lt (suc v) b))
                        (anr ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)))))
                    (eqtrd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) r) (add (mul b q) (suc v)) (suc x1))
                      (anwr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v)) (eq (add (mul b q) r) (add (mul b q) (suc v))))
                        (addeq2 ((mul b q) r (suc v))))
                      (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) (suc v)) (suc (add (mul b q) v)) (suc x1))
                        (addS ((mul b q) v))
                        (suceqd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) v) x1)
                          (eqtrd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) v) (add (mul b u) v) x1)
                            (addeq1d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (mul b q) (mul b u) v)
                              (muleq2d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) b q u)
                                (anlr ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b)) (eq q u) (eq r (suc v))))))
                            (anw3l ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (lt (suc v) b) (eq q u) (eq r (suc v)) (eq (add (mul b u) v) x1))
                              H3))))))))
              (iexde (q (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (suc u) (ex r (an (lt r b) (eq (add (mul b q) r) (suc x1)))))
                (iexde (r (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (d0) (an (lt r b) (eq (add (mul b q) r) (suc x1))))
                  (iand ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (lt r b) (eq (add (mul b q) r) (suc x1)))
                    (mpbird ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (lt (d0) b) (lt r b))
                      (anwr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0)) (iff (lt r b) (lt (d0) b)))
                        H1)
                      (sylibr ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (ne b (d0)) (lt (d0) b))
                        H2
                        (anw3l ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b) (eq q (suc u)) (eq r (d0)) (ne b (d0)))
                          (anl ((ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1)))))))
                    (eqtrd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b q) r) (add (mul b (suc u)) (d0)) (suc x1))
                      (addeqd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (mul b q) (mul b (suc u)) r (d0))
                        (muleq2d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) b q (suc u))
                          (anlr ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u)) (eq r (d0)))))
                        (anr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0)))))
                      (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b (suc u)) (d0)) (mul b (suc u)) (suc x1))
                        (add0 ((mul b (suc u))))
                        (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (mul b (suc u)) (add (mul b u) b) (suc x1))
                          (mulS (b u))
                          (eqtr3d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b u) b) (add (mul b u) (suc v)) (suc x1))
                            (addeq2d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (mul b u) (suc v) b)
                              (anwll ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u)) (eq r (d0)) (eq (suc v) b))
                                (anr ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)))))
                            (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b u) (suc v)) (suc (add (mul b u) v)) (suc x1))
                              (addS ((mul b u) v))
                              (suceqd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b u) v) x1)
                                (anw3l ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) x1))) (eq (suc v) b) (eq q (suc u)) (eq r (d0)) (eq (add (mul b u) v) x1))
                                  H3)))))))))))))))))))))

(local theorem eqdivmod ((G wff ()) (Q nat ()) (R nat ()) (a nat ()) (b nat ()))
  ((h1 (im G (lt R b)))
   (h2 (im G (eq (add (mul b Q) R) a))))
  (im G (an (eq (div a b) Q) (eq (mod a b) R)))
((q nat) (r nat))
(:let H1 (:conv (im G (eq (div a b) Q))
  (im
    G
    (eq
      (:unfold div (a b) (q r)
        (the (ab q (ex r (an (lt r b) (eq (add (mul b q) r) a))))))
      Q))
  (eqtheabd (G Q q (ex r (an (lt r b) (eq (add (mul b q) r) a))))
    (divlem2 (G Q R a b q r)
      h1
      h2)))
(iand (G (eq (div a b) Q) (eq (mod a b) R))
  H1
  (syl (G (eq (add (mul b (div a b)) R) a) (eq (mod a b) R))
    (:conv (im (eq (add (mul b (div a b)) R) a) (eq (mod a b) R))
      (im
        (eq (add (mul b (div a b)) R) a)
        (eq
          (:unfold mod (a b) ()
            (sub a (mul b (div a b))))
          R))
      (eqsub2 ((mul b (div a b)) R a)))
    (eqtrd (G (add (mul b (div a b)) R) (add (mul b Q) R) a)
      (addeq1d (G (mul b (div a b)) (mul b Q) R)
        (muleq2d (G b (div a b) Q)
          H1))
      h2)))))

(theorem divmod ((a nat ()) (b nat ())) ()
  (eq (add (mul b (div a b)) (mod a b)) a)
((q nat) (r nat) (x nat) (y nat))
(:let H1 (anrr ((not (eq b (d0))) (lt r b) (eq (add (mul b q) r) a)))
(ax_mp ((le (mul b (div a b)) a) (eq (add (mul b (div a b)) (mod a b)) a))
  (:conv (im (le (mul b (div a b)) a) (eq (add (mul b (div a b)) (mod a b)) a))
    (im
      (le (mul b (div a b)) a)
      (eq
        (add
          (mul b (div a b))
          (:unfold mod (a b) ()
            (sub a (mul b (div a b)))))
        a))
    (pncan3 ((mul b (div a b)) a)))
  (cases ((eq b (d0)) (le (mul b (div a b)) a))
    (mpbiri ((eq b (d0)) (le (d0) a) (le (mul b (div a b)) a))
      (le01 (a))
      (leeq1d ((eq b (d0)) (mul b (div a b)) (d0) a)
        (syl6eq ((eq b (d0)) (mul b (div a b)) (mul b (d0)) (d0))
          (mul0 (b))
          (muleq2d ((eq b (d0)) b (div a b) (d0))
            (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
              (div0 (a))
              (diveq2 (a b (d0))))))))
    (mpd ((not (eq b (d0))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))) (le (mul b (div a b)) a))
      (:conv (im (not (eq b (d0))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))))
        (im
          (:sym (:unfold ne (b (d0)) ()
            (not (eq b (d0)))))
          (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))))
        (divlem3 (a b q r)))
      (eexd (q (not (eq b (d0))) (ex r (an (lt r b) (eq (add (mul b q) r) a))) (le (mul b (div a b)) a))
        (eexda (r (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a)) (le (mul b (div a b)) a))
          (mpbii ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (le (mul b (div a b)) (add (mul b (div a b)) r)) (le (mul b (div a b)) a))
            (leaddid1 ((mul b (div a b)) r))
            (leeq2d ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (mul b (div a b)) (add (mul b (div a b)) r) a)
              (eqtrd ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (add (mul b (div a b)) r) (add (mul b q) r) a)
                (addeq1d ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (mul b (div a b)) (mul b q) r)
                  (muleq2d ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) b (div a b) q)
                    (:conv (im (an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (eq (div a b) q))
                      (im
                        (an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a)))
                        (eq
                          (:unfold div (a b) (x y)
                            (the (ab x (ex y (an (lt y b) (eq (add (mul b x) y) a))))))
                          q))
                      (eqtheabd ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) q x (ex y (an (lt y b) (eq (add (mul b x) y) a))))
                        (divlem2 ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) q r a b x y)
                          (anrl ((not (eq b (d0))) (lt r b) (eq (add (mul b q) r) a)))
                          H1)))))
                H1))))))))))

(theorem modlt ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (lt (mod a b) b))
((q nat) (r nat))
(:let H1 (anrl ((ne b (d0)) (lt r b) (eq (add (mul b q) r) a)))
(mpd ((ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))) (lt (mod a b) b))
  (divlem3 (a b q r))
  (eexd (q (ne b (d0)) (ex r (an (lt r b) (eq (add (mul b q) r) a))) (lt (mod a b) b))
    (eexda (r (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a)) (lt (mod a b) b))
      (mpbird ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) (lt r b) (lt (mod a b) b))
        (lteq1d ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) (mod a b) r b)
          (anrd ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) (eq (div a b) q) (eq (mod a b) r))
            (eqdivmod ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) q r a b)
              H1
              (anrr ((ne b (d0)) (lt r b) (eq (add (mul b q) r) a))))))
        H1))))))

(local theorem modle1 ((a nat ()) (b nat ())) ()
  (le (mod a b) a)
()
(mpbi ((le (mod a b) (add (mul b (div a b)) (mod a b))) (le (mod a b) a))
  (ax_mp ((eq (add (mul b (div a b)) (mod a b)) a) (iff (le (mod a b) (add (mul b (div a b)) (mod a b))) (le (mod a b) a)))
    (leeq2 ((mod a b) (add (mul b (div a b)) (mod a b)) a))
    (divmod (a b)))
  (leaddid2 ((mod a b) (mul b (div a b))))))

(local theorem div01 ((a nat ())) ()
  (eq (div (d0) a) (d0))
()
(cases ((eq a (d0)) (eq (div (d0) a) (d0)))
  (syl6eq ((eq a (d0)) (div (d0) a) (div (d0) (d0)) (d0))
    (div0 ((d0)))
    (diveq2 ((d0) a (d0))))
  (anld ((not (eq a (d0))) (eq (div (d0) a) (d0)) (eq (mod (d0) a) (d0)))
    (eqdivmod ((not (eq a (d0))) (d0) (d0) (d0) a)
      (ax_mp ((iff (lt (d0) a) (not (eq a (d0)))) (im (not (eq a (d0))) (lt (d0) a)))
        (bi2 ((lt (d0) a) (not (eq a (d0)))))
        (:conv (iff (lt (d0) a) (not (eq a (d0))))
          (iff
            (lt (d0) a)
            (:sym (:unfold ne (a (d0)) ()
              (not (eq a (d0))))))
          (lt01 (a))))
      (a1i ((not (eq a (d0))) (eq (add (mul a (d0)) (d0)) (d0)))
        (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0)))
          (ax_mp ((eq (add (mul a (d0)) (d0)) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0))))
            (eqtr ((add (mul a (d0)) (d0)) (mul a (d0)) (d0)))
            (add0 ((mul a (d0)))))
          (mul0 (a))))))))

(local theorem mod01 ((a nat ())) ()
  (eq (mod (d0) a) (d0))
()
(cases ((eq a (d0)) (eq (mod (d0) a) (d0)))
  (syl6eq ((eq a (d0)) (mod (d0) a) (mod (d0) (d0)) (d0))
    (mod0 ((d0)))
    (modeq2 ((d0) a (d0))))
  (anrd ((not (eq a (d0))) (eq (div (d0) a) (d0)) (eq (mod (d0) a) (d0)))
    (eqdivmod ((not (eq a (d0))) (d0) (d0) (d0) a)
      (ax_mp ((iff (lt (d0) a) (not (eq a (d0)))) (im (not (eq a (d0))) (lt (d0) a)))
        (bi2 ((lt (d0) a) (not (eq a (d0)))))
        (:conv (iff (lt (d0) a) (not (eq a (d0))))
          (iff
            (lt (d0) a)
            (:sym (:unfold ne (a (d0)) ()
              (not (eq a (d0))))))
          (lt01 (a))))
      (a1i ((not (eq a (d0))) (eq (add (mul a (d0)) (d0)) (d0)))
        (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0)))
          (ax_mp ((eq (add (mul a (d0)) (d0)) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0))))
            (eqtr ((add (mul a (d0)) (d0)) (mul a (d0)) (d0)))
            (add0 ((mul a (d0)))))
          (mul0 (a))))))))

(local theorem mod12 ((a nat ())) ()
  (eq (mod a (d1)) (d0))
()
(mpbi ((lt (mod a (d1)) (d1)) (eq (mod a (d1)) (d0)))
  (lt12 ((mod a (d1))))
  (ax_mp ((ne (d1) (d0)) (lt (mod a (d1)) (d1)))
    (modlt (a (d1)))
    (d1ne0 ()))))

(local theorem div12 ((a nat ())) ()
  (eq (div a (d1)) a)
()
(ax_mp ((eq (add (mul (d1) (div a (d1))) (mod a (d1))) a) (eq (div a (d1)) a))
  (ax_mp ((eq (add (mul (d1) (div a (d1))) (mod a (d1))) (div a (d1))) (im (eq (add (mul (d1) (div a (d1))) (mod a (d1))) a) (eq (div a (d1)) a)))
    (eqtr3 ((div a (d1)) (add (mul (d1) (div a (d1))) (mod a (d1))) a))
    (ax_mp ((eq (add (div a (d1)) (d0)) (div a (d1))) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (div a (d1))))
      (ax_mp ((eq (add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0))) (im (eq (add (div a (d1)) (d0)) (div a (d1))) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (div a (d1)))))
        (eqtr ((add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0)) (div a (d1))))
        (ax_mp ((eq (mod a (d1)) (d0)) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0))))
          (ax_mp ((eq (mul (d1) (div a (d1))) (div a (d1))) (im (eq (mod a (d1)) (d0)) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0)))))
            (addeq ((mul (d1) (div a (d1))) (div a (d1)) (mod a (d1)) (d0)))
            (mul11 ((div a (d1)))))
          (mod12 (a))))
      (add02 ((div a (d1))))))
  (divmod (a (d1)))))

(local theorem muladddiv2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (eq (div (add (mul b a) c) b) (add a (div c b))))
()
(anld ((ne b (d0)) (eq (div (add (mul b a) c) b) (add a (div c b))) (eq (mod (add (mul b a) c) b) (mod c b)))
  (eqdivmod ((ne b (d0)) (add a (div c b)) (mod c b) (add (mul b a) c) b)
    (modlt (c b))
    (a1i ((ne b (d0)) (eq (add (mul b (add a (div c b))) (mod c b)) (add (mul b a) c)))
      (ax_mp ((eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)) (eq (add (mul b (add a (div c b))) (mod c b)) (add (mul b a) c)))
        (ax_mp ((eq (add (mul b (add a (div c b))) (mod c b)) (add (add (mul b a) (mul b (div c b))) (mod c b))) (im (eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)) (eq (add (mul b (add a (div c b))) (mod c b)) (add (mul b a) c))))
          (eqtr ((add (mul b (add a (div c b))) (mod c b)) (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)))
          (ax_mp ((eq (mul b (add a (div c b))) (add (mul b a) (mul b (div c b)))) (eq (add (mul b (add a (div c b))) (mod c b)) (add (add (mul b a) (mul b (div c b))) (mod c b))))
            (addeq1 ((mul b (add a (div c b))) (add (mul b a) (mul b (div c b))) (mod c b)))
            (muladd (b a (div c b)))))
        (ax_mp ((eq (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)) (eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)))
          (ax_mp ((eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) (add (mul b (div c b)) (mod c b)))) (im (eq (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)) (eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c))))
            (eqtr ((add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)))
            (addass ((mul b a) (mul b (div c b)) (mod c b))))
          (ax_mp ((eq (add (mul b (div c b)) (mod c b)) c) (eq (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)))
            (addeq2 ((mul b a) (add (mul b (div c b)) (mod c b)) c))
            (divmod (c b)))))))))

(local theorem muladddiv1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (eq (div (add (mul a b) c) b) (add a (div c b))))
()
(syl5eq ((ne b (d0)) (div (add (mul a b) c) b) (div (add (mul b a) c) b) (add a (div c b)))
  (ax_mp ((eq (add (mul a b) c) (add (mul b a) c)) (eq (div (add (mul a b) c) b) (div (add (mul b a) c) b)))
    (diveq1 ((add (mul a b) c) (add (mul b a) c) b))
    (ax_mp ((eq (mul a b) (mul b a)) (eq (add (mul a b) c) (add (mul b a) c)))
      (addeq1 ((mul a b) (mul b a) c))
      (mulcom (a b))))
  (muladddiv2 (a b c))))

(local theorem muladdmod2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (eq (mod (add (mul b a) c) b) (mod c b)))
()
(anrd ((ne b (d0)) (eq (div (add (mul b a) c) b) (add a (div c b))) (eq (mod (add (mul b a) c) b) (mod c b)))
  (eqdivmod ((ne b (d0)) (add a (div c b)) (mod c b) (add (mul b a) c) b)
    (modlt (c b))
    (a1i ((ne b (d0)) (eq (add (mul b (add a (div c b))) (mod c b)) (add (mul b a) c)))
      (ax_mp ((eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)) (eq (add (mul b (add a (div c b))) (mod c b)) (add (mul b a) c)))
        (ax_mp ((eq (add (mul b (add a (div c b))) (mod c b)) (add (add (mul b a) (mul b (div c b))) (mod c b))) (im (eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)) (eq (add (mul b (add a (div c b))) (mod c b)) (add (mul b a) c))))
          (eqtr ((add (mul b (add a (div c b))) (mod c b)) (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)))
          (ax_mp ((eq (mul b (add a (div c b))) (add (mul b a) (mul b (div c b)))) (eq (add (mul b (add a (div c b))) (mod c b)) (add (add (mul b a) (mul b (div c b))) (mod c b))))
            (addeq1 ((mul b (add a (div c b))) (add (mul b a) (mul b (div c b))) (mod c b)))
            (muladd (b a (div c b)))))
        (ax_mp ((eq (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)) (eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c)))
          (ax_mp ((eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) (add (mul b (div c b)) (mod c b)))) (im (eq (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)) (eq (add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) c))))
            (eqtr ((add (add (mul b a) (mul b (div c b))) (mod c b)) (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)))
            (addass ((mul b a) (mul b (div c b)) (mod c b))))
          (ax_mp ((eq (add (mul b (div c b)) (mod c b)) c) (eq (add (mul b a) (add (mul b (div c b)) (mod c b))) (add (mul b a) c)))
            (addeq2 ((mul b a) (add (mul b (div c b)) (mod c b)) c))
            (divmod (c b)))))))))

(local theorem muladdmod1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (eq (mod (add (mul a b) c) b) (mod c b)))
()
(syl5eq ((ne b (d0)) (mod (add (mul a b) c) b) (mod (add (mul b a) c) b) (mod c b))
  (ax_mp ((eq (add (mul a b) c) (add (mul b a) c)) (eq (mod (add (mul a b) c) b) (mod (add (mul b a) c) b)))
    (modeq1 ((add (mul a b) c) (add (mul b a) c) b))
    (ax_mp ((eq (mul a b) (mul b a)) (eq (add (mul a b) c) (add (mul b a) c)))
      (addeq1 ((mul a b) (mul b a) c))
      (mulcom (a b))))
  (muladdmod2 (a b c))))

(local theorem muladddiv2lt ((a nat ()) (b nat ()) (c nat ())) ()
  (im (an (ne b (d0)) (lt c b)) (eq (div (add (mul b a) c) b) a))
()
(anld ((an (ne b (d0)) (lt c b)) (eq (div (add (mul b a) c) b) a) (eq (mod (add (mul b a) c) b) c))
  (eqdivmod ((an (ne b (d0)) (lt c b)) a c (add (mul b a) c) b)
    (anr ((ne b (d0)) (lt c b)))
    (eqidd ((an (ne b (d0)) (lt c b)) (add (mul b a) c))))))

(local theorem muladddiv1lt ((a nat ()) (b nat ()) (c nat ())) ()
  (im (an (ne b (d0)) (lt c b)) (eq (div (add (mul a b) c) b) a))
()
(syl5eq ((an (ne b (d0)) (lt c b)) (div (add (mul a b) c) b) (div (add (mul b a) c) b) a)
  (ax_mp ((eq (add (mul a b) c) (add (mul b a) c)) (eq (div (add (mul a b) c) b) (div (add (mul b a) c) b)))
    (diveq1 ((add (mul a b) c) (add (mul b a) c) b))
    (ax_mp ((eq (mul a b) (mul b a)) (eq (add (mul a b) c) (add (mul b a) c)))
      (addeq1 ((mul a b) (mul b a) c))
      (mulcom (a b))))
  (muladddiv2lt (a b c))))

(local theorem muladdmod2lt ((a nat ()) (b nat ()) (c nat ())) ()
  (im (an (ne b (d0)) (lt c b)) (eq (mod (add (mul b a) c) b) c))
()
(anrd ((an (ne b (d0)) (lt c b)) (eq (div (add (mul b a) c) b) a) (eq (mod (add (mul b a) c) b) c))
  (eqdivmod ((an (ne b (d0)) (lt c b)) a c (add (mul b a) c) b)
    (anr ((ne b (d0)) (lt c b)))
    (eqidd ((an (ne b (d0)) (lt c b)) (add (mul b a) c))))))

(local theorem muladdmod1lt ((a nat ()) (b nat ()) (c nat ())) ()
  (im (an (ne b (d0)) (lt c b)) (eq (mod (add (mul a b) c) b) c))
()
(syl5eq ((an (ne b (d0)) (lt c b)) (mod (add (mul a b) c) b) (mod (add (mul b a) c) b) c)
  (ax_mp ((eq (add (mul a b) c) (add (mul b a) c)) (eq (mod (add (mul a b) c) b) (mod (add (mul b a) c) b)))
    (modeq1 ((add (mul a b) c) (add (mul b a) c) b))
    (ax_mp ((eq (mul a b) (mul b a)) (eq (add (mul a b) c) (add (mul b a) c)))
      (addeq1 ((mul a b) (mul b a) c))
      (mulcom (a b))))
  (muladdmod2lt (a b c))))

(local theorem muldiv2 ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (eq (div (mul b a) b) a))
()
(anld ((ne b (d0)) (eq (div (mul b a) b) a) (eq (mod (mul b a) b) (d0)))
  (eqdivmod ((ne b (d0)) a (d0) (mul b a) b)
    (ax_mp ((iff (lt (d0) b) (ne b (d0))) (im (ne b (d0)) (lt (d0) b)))
      (bi2 ((lt (d0) b) (ne b (d0))))
      (lt01 (b)))
    (a1i ((ne b (d0)) (eq (add (mul b a) (d0)) (mul b a)))
      (add0 ((mul b a)))))))

(local theorem muldiv1 ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (eq (div (mul a b) b) a))
()
(eqtrd ((ne b (d0)) (div (mul a b) b) (div (mul b a) b) a)
  (diveqd ((ne b (d0)) (mul a b) (mul b a) b b)
    (a1i ((ne b (d0)) (eq (mul a b) (mul b a)))
      (mulcom (a b)))
    (eqidd ((ne b (d0)) b)))
  (muldiv2 (a b))))

(local theorem mulmod1 ((a nat ()) (b nat ())) ()
  (eq (mod (mul b a) b) (d0))
()
(cases ((eq b (d0)) (eq (mod (mul b a) b) (d0)))
  (eqtrd ((eq b (d0)) (mod (mul b a) b) (mod (mul b a) (d0)) (d0))
    (modeq2 ((mul b a) b (d0)))
    (syl5eq ((eq b (d0)) (mod (mul b a) (d0)) (mul b a) (d0))
      (mod0 ((mul b a)))
      (syl6eq ((eq b (d0)) (mul b a) (mul (d0) a) (d0))
        (mul01 (a))
        (muleq1 (b (d0) a)))))
  (anrd ((not (eq b (d0))) (eq (div (mul b a) b) a) (eq (mod (mul b a) b) (d0)))
    (eqdivmod ((not (eq b (d0))) a (d0) (mul b a) b)
      (ax_mp ((iff (lt (d0) b) (not (eq b (d0)))) (im (not (eq b (d0))) (lt (d0) b)))
        (bi2 ((lt (d0) b) (not (eq b (d0)))))
        (:conv (iff (lt (d0) b) (not (eq b (d0))))
          (iff
            (lt (d0) b)
            (:sym (:unfold ne (b (d0)) ()
              (not (eq b (d0))))))
          (lt01 (b))))
      (a1i ((not (eq b (d0))) (eq (add (mul b a) (d0)) (mul b a)))
        (add0 ((mul b a))))))))

(local theorem mulmod2 ((a nat ()) (b nat ())) ()
  (eq (mod (mul a b) b) (d0))
()
(ax_mp ((eq (mod (mul b a) b) (d0)) (eq (mod (mul a b) b) (d0)))
  (ax_mp ((eq (mod (mul a b) b) (mod (mul b a) b)) (im (eq (mod (mul b a) b) (d0)) (eq (mod (mul a b) b) (d0))))
    (eqtr ((mod (mul a b) b) (mod (mul b a) b) (d0)))
    (ax_mp ((eq (mul a b) (mul b a)) (eq (mod (mul a b) b) (mod (mul b a) b)))
      (modeqd ((eq (mul a b) (mul b a)) (mul a b) (mul b a) b b)
        (id ((eq (mul a b) (mul b a))))
        (eqidd ((eq (mul a b) (mul b a)) b)))
      (mulcom (a b))))
  (mulmod1 (a b))))

(local theorem divid ((a nat ())) ()
  (im (ne a (d0)) (eq (div a a) (d1)))
()
(syl5eqr ((ne a (d0)) (div a a) (div (mul a (d1)) a) (d1))
  (ax_mp ((eq (mul a (d1)) a) (eq (div (mul a (d1)) a) (div a a)))
    (diveq1 ((mul a (d1)) a a))
    (mul12 (a)))
  (muldiv2 ((d1) a))))

(local theorem modid ((a nat ())) ()
  (eq (mod a a) (d0))
()
(ax_mp ((eq (mod (mul a (d1)) a) (d0)) (eq (mod a a) (d0)))
  (ax_mp ((eq (mod (mul a (d1)) a) (mod a a)) (im (eq (mod (mul a (d1)) a) (d0)) (eq (mod a a) (d0))))
    (eqtr3 ((mod a a) (mod (mul a (d1)) a) (d0)))
    (ax_mp ((eq (mul a (d1)) a) (eq (mod (mul a (d1)) a) (mod a a)))
      (modeq1 ((mul a (d1)) a a))
      (mul12 (a))))
  (mulmod1 ((d1) a))))

(local theorem divlteq0 ((a nat ()) (b nat ())) ()
  (im (lt a b) (eq (div a b) (d0)))
()
(anld ((lt a b) (eq (div a b) (d0)) (eq (mod a b) a))
  (eqdivmod ((lt a b) (d0) a a b)
    (id ((lt a b)))
    (a1i ((lt a b) (eq (add (mul b (d0)) a) a))
      (ax_mp ((eq (add (d0) a) a) (eq (add (mul b (d0)) a) a))
        (ax_mp ((eq (add (mul b (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul b (d0)) a) a)))
          (eqtr ((add (mul b (d0)) a) (add (d0) a) a))
          (ax_mp ((eq (mul b (d0)) (d0)) (eq (add (mul b (d0)) a) (add (d0) a)))
            (addeq1 ((mul b (d0)) (d0) a))
            (mul02 (b))))
        (add01 (a)))))))

(local theorem modltid ((a nat ()) (b nat ())) ()
  (im (lt a b) (eq (mod a b) a))
()
(anrd ((lt a b) (eq (div a b) (d0)) (eq (mod a b) a))
  (eqdivmod ((lt a b) (d0) a a b)
    (id ((lt a b)))
    (a1i ((lt a b) (eq (add (mul b (d0)) a) a))
      (ax_mp ((eq (add (d0) a) a) (eq (add (mul b (d0)) a) a))
        (ax_mp ((eq (add (mul b (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul b (d0)) a) a)))
          (eqtr ((add (mul b (d0)) a) (add (d0) a) a))
          (ax_mp ((eq (mul b (d0)) (d0)) (eq (add (mul b (d0)) a) (add (d0) a)))
            (addeq1 ((mul b (d0)) (d0) a))
            (mul02 (b))))
        (add01 (a)))))))

(local theorem lediv1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (le (div a c) (div b c)))
()
(casesda ((le a b) (eq c (d0)) (le (div a c) (div b c)))
  (mpbiri ((an (le a b) (eq c (d0))) (le (d0) (div b c)) (le (div a c) (div b c)))
    (le01 ((div b c)))
    (leeq1d ((an (le a b) (eq c (d0))) (div a c) (d0) (div b c))
      (syl6eq ((an (le a b) (eq c (d0))) (div a c) (div a (d0)) (d0))
        (div0 (a))
        (anwr ((le a b) (eq c (d0)) (eq (div a c) (div a (d0))))
          (diveq2 (a c (d0)))))))
  (divlem1 ((an (le a b) (not (eq c (d0)))) c (div a c) (div b c) (mod a c) (mod b c))
    (anwr ((le a b) (not (eq c (d0))) (lt (mod a c) c))
      (:conv (im (not (eq c (d0))) (lt (mod a c) c))
        (im
          (:sym (:unfold ne (c (d0)) ()
            (not (eq c (d0)))))
          (lt (mod a c) c))
        (modlt (a c))))
    (anwr ((le a b) (not (eq c (d0))) (lt (mod b c) c))
      (:conv (im (not (eq c (d0))) (lt (mod b c) c))
        (im
          (:sym (:unfold ne (c (d0)) ()
            (not (eq c (d0)))))
          (lt (mod b c) c))
        (modlt (b c))))
    (sylibr ((an (le a b) (not (eq c (d0)))) (le a b) (le (add (mul c (div a c)) (mod a c)) (add (mul c (div b c)) (mod b c))))
      (ax_mp ((eq (add (mul c (div b c)) (mod b c)) b) (iff (le (add (mul c (div a c)) (mod a c)) (add (mul c (div b c)) (mod b c))) (le a b)))
        (ax_mp ((eq (add (mul c (div a c)) (mod a c)) a) (im (eq (add (mul c (div b c)) (mod b c)) b) (iff (le (add (mul c (div a c)) (mod a c)) (add (mul c (div b c)) (mod b c))) (le a b))))
          (leeq ((add (mul c (div a c)) (mod a c)) a (add (mul c (div b c)) (mod b c)) b))
          (divmod (a c)))
        (divmod (b c)))
      (anl ((le a b) (not (eq c (d0)))))))))

(local theorem muldivle ((a nat ()) (b nat ())) ()
  (le (mul b (div a b)) a)
()
(mpbi ((le (mul b (div a b)) (add (mul b (div a b)) (mod a b))) (le (mul b (div a b)) a))
  (ax_mp ((eq (add (mul b (div a b)) (mod a b)) a) (iff (le (mul b (div a b)) (add (mul b (div a b)) (mod a b))) (le (mul b (div a b)) a)))
    (leeq2 ((mul b (div a b)) (add (mul b (div a b)) (mod a b)) a))
    (divmod (a b)))
  (leaddid1 ((mul b (div a b)) (mod a b)))))

(local theorem divleid ((a nat ()) (b nat ())) ()
  (le (div a b) a)
()
(cases ((eq b (d0)) (le (div a b) a))
  (mpbiri ((eq b (d0)) (le (d0) a) (le (div a b) a))
    (le01 (a))
    (leeq1d ((eq b (d0)) (div a b) (d0) a)
      (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
        (div0 (a))
        (diveq2 (a b (d0))))))
  (letrd ((not (eq b (d0))) (div a b) (mul b (div a b)) a)
    (sylib ((not (eq b (d0))) (le (mul (d1) (div a b)) (mul b (div a b))) (le (div a b) (mul b (div a b))))
      (ax_mp ((eq (mul (d1) (div a b)) (div a b)) (iff (le (mul (d1) (div a b)) (mul b (div a b))) (le (div a b) (mul b (div a b)))))
        (leeq1 ((mul (d1) (div a b)) (div a b) (mul b (div a b))))
        (mul11 ((div a b))))
      (sylbir ((not (eq b (d0))) (le (d1) b) (le (mul (d1) (div a b)) (mul b (div a b))))
        (:conv (iff (le (d1) b) (not (eq b (d0))))
          (iff
            (le (d1) b)
            (:sym (:unfold ne (b (d0)) ()
              (not (eq b (d0))))))
          (le11 (b)))
        (lemul1a ((d1) b (div a b)))))
    (a1i ((not (eq b (d0))) (le (mul b (div a b)) a))
      (muldivle (a b))))))

(local theorem ledivmul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne c (d0)) (iff (le a (div b c)) (le (mul c a) b)))
()
(ibida ((ne c (d0)) (le a (div b c)) (le (mul c a) b))
  (letrd ((an (ne c (d0)) (le a (div b c))) (mul c a) (mul c (div b c)) b)
    (anwr ((ne c (d0)) (le a (div b c)) (le (mul c a) (mul c (div b c))))
      (lemul2a (c a (div b c))))
    (a1i ((an (ne c (d0)) (le a (div b c))) (le (mul c (div b c)) b))
      (muldivle (b c))))
  (sylibr ((an (ne c (d0)) (le (mul c a) b)) (lt a (suc (div b c))) (le a (div b c)))
    (leltsuc (a (div b c)))
    (mpbird ((an (ne c (d0)) (le (mul c a) b)) (lt (mul c a) (mul c (suc (div b c)))) (lt a (suc (div b c))))
      (syl ((an (ne c (d0)) (le (mul c a) b)) (lt (d0) c) (iff (lt a (suc (div b c))) (lt (mul c a) (mul c (suc (div b c))))))
        (ltmul2 (c a (suc (div b c))))
        (sylibr ((an (ne c (d0)) (le (mul c a) b)) (ne c (d0)) (lt (d0) c))
          (lt01 (c))
          (anl ((ne c (d0)) (le (mul c a) b)))))
      (lelttrd ((an (ne c (d0)) (le (mul c a) b)) (mul c a) b (mul c (suc (div b c))))
        (anr ((ne c (d0)) (le (mul c a) b)))
        (anwl ((ne c (d0)) (le (mul c a) b) (lt b (mul c (suc (div b c)))))
          (sylibr ((ne c (d0)) (lt b (add (mul c (div b c)) c)) (lt b (mul c (suc (div b c)))))
            (ax_mp ((eq (mul c (suc (div b c))) (add (mul c (div b c)) c)) (iff (lt b (mul c (suc (div b c)))) (lt b (add (mul c (div b c)) c))))
              (lteq2 (b (mul c (suc (div b c))) (add (mul c (div b c)) c)))
              (mulS (c (div b c))))
            (sylib ((ne c (d0)) (lt (add (mul c (div b c)) (mod b c)) (add (mul c (div b c)) c)) (lt b (add (mul c (div b c)) c)))
              (ax_mp ((eq (add (mul c (div b c)) (mod b c)) b) (iff (lt (add (mul c (div b c)) (mod b c)) (add (mul c (div b c)) c)) (lt b (add (mul c (div b c)) c))))
                (lteq1 ((add (mul c (div b c)) (mod b c)) b (add (mul c (div b c)) c)))
                (divmod (b c)))
              (sylib ((ne c (d0)) (lt (mod b c) c) (lt (add (mul c (div b c)) (mod b c)) (add (mul c (div b c)) c)))
                (ltadd2 ((mul c (div b c)) (mod b c) c))
                (modlt (b c)))))))))))

(local theorem ledivmul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne c (d0)) (iff (le a (div b c)) (le (mul a c) b)))
()
(syl6bb ((ne c (d0)) (le a (div b c)) (le (mul c a) b) (le (mul a c) b))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (le (mul c a) b) (le (mul a c) b)))
    (leeq1 ((mul c a) (mul a c) b))
    (mulcom (c a)))
  (ledivmul1 (a b c))))

(local theorem ltdivmul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (iff (lt (div a b) c) (lt a (mul b c))))
()
(syl5bb ((ne b (d0)) (lt (div a b) c) (not (le c (div a b))) (lt a (mul b c)))
  (ltnle ((div a b) c))
  (syl6bbr ((ne b (d0)) (not (le c (div a b))) (not (le (mul b c) a)) (lt a (mul b c)))
    (ltnle (a (mul b c)))
    (noteqd ((ne b (d0)) (le c (div a b)) (le (mul b c) a))
      (ledivmul1 (c a b))))))

(local theorem ltdivmul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (iff (lt (div a b) c) (lt a (mul c b))))
()
(syl6bb ((ne b (d0)) (lt (div a b) c) (lt a (mul b c)) (lt a (mul c b)))
  (ax_mp ((eq (mul b c) (mul c b)) (iff (lt a (mul b c)) (lt a (mul c b))))
    (lteq2 (a (mul b c) (mul c b)))
    (mulcom (b c)))
  (ltdivmul1 (a b c))))

(local theorem diveq0 ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (iff (eq (div a b) (d0)) (lt a b)))
()
(syl5bbr ((ne b (d0)) (eq (div a b) (d0)) (lt (div a b) (d1)) (lt a b))
  (lt12 ((div a b)))
  (syl6bb ((ne b (d0)) (lt (div a b) (d1)) (lt a (mul b (d1))) (lt a b))
    (ax_mp ((eq (mul b (d1)) b) (iff (lt a (mul b (d1))) (lt a b)))
      (lteq2 (a (mul b (d1)) b))
      (mul12 (b)))
    (ltdivmul1 (a b (d1))))))

(local theorem divdiv ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (div (div a b) c) (div a (mul b c)))
()
(:let H1 (div0 (a))
(cases ((eq b (d0)) (eq (div (div a b) c) (div a (mul b c))))
  (eqtr4d ((eq b (d0)) (div (div a b) c) (d0) (div a (mul b c)))
    (syl6eq ((eq b (d0)) (div (div a b) c) (div (d0) c) (d0))
      (div01 (c))
      (diveq1d ((eq b (d0)) (div a b) (d0) c)
        (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
          H1
          (diveq2 (a b (d0))))))
    (syl6eq ((eq b (d0)) (div a (mul b c)) (div a (d0)) (d0))
      H1
      (diveq2d ((eq b (d0)) a (mul b c) (d0))
        (syl6eq ((eq b (d0)) (mul b c) (mul (d0) c) (d0))
          (mul01 (c))
          (muleq1 (b (d0) c))))))
  (casesda ((not (eq b (d0))) (eq c (d0)) (eq (div (div a b) c) (div a (mul b c))))
    (anwr ((not (eq b (d0))) (eq c (d0)) (eq (div (div a b) c) (div a (mul b c))))
      (eqtr4d ((eq c (d0)) (div (div a b) c) (d0) (div a (mul b c)))
        (syl6eq ((eq c (d0)) (div (div a b) c) (div (div a b) (d0)) (d0))
          (div0 ((div a b)))
          (diveq2 ((div a b) c (d0))))
        (syl6eq ((eq c (d0)) (div a (mul b c)) (div a (d0)) (d0))
          H1
          (diveq2d ((eq c (d0)) a (mul b c) (d0))
            (syl6eq ((eq c (d0)) (mul b c) (mul b (d0)) (d0))
              (mul02 (b))
              (muleq2 (b c (d0))))))))
    (leasymd ((an (not (eq b (d0))) (not (eq c (d0)))) (div (div a b) c) (div a (mul b c)))
      (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul (mul b c) (div (div a b) c)) a) (le (div (div a b) c) (div a (mul b c))))
        (sylbir ((an (not (eq b (d0))) (not (eq c (d0)))) (ne (mul b c) (d0)) (iff (le (div (div a b) c) (div a (mul b c))) (le (mul (mul b c) (div (div a b) c)) a)))
          (:conv (iff (ne (mul b c) (d0)) (an (not (eq b (d0))) (not (eq c (d0)))))
            (iff
              (ne (mul b c) (d0))
              (an
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (:sym (:unfold ne (c (d0)) ()
                  (not (eq c (d0)))))))
            (mulne0 (b c)))
          (ledivmul1 ((div (div a b) c) a (mul b c))))
        (a1i ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul (mul b c) (div (div a b) c)) a))
          (mpbir ((le (mul b (mul c (div (div a b) c))) a) (le (mul (mul b c) (div (div a b) c)) a))
            (ax_mp ((eq (mul (mul b c) (div (div a b) c)) (mul b (mul c (div (div a b) c)))) (iff (le (mul (mul b c) (div (div a b) c)) a) (le (mul b (mul c (div (div a b) c))) a)))
              (leeq1 ((mul (mul b c) (div (div a b) c)) (mul b (mul c (div (div a b) c))) a))
              (mulass (b c (div (div a b) c))))
            (ax_mp ((le (mul b (div a b)) a) (le (mul b (mul c (div (div a b) c))) a))
              (ax_mp ((le (mul b (mul c (div (div a b) c))) (mul b (div a b))) (im (le (mul b (div a b)) a) (le (mul b (mul c (div (div a b) c))) a)))
                (letr ((mul b (mul c (div (div a b) c))) (mul b (div a b)) a))
                (ax_mp ((le (mul c (div (div a b) c)) (div a b)) (le (mul b (mul c (div (div a b) c))) (mul b (div a b))))
                  (lemul2a (b (mul c (div (div a b) c)) (div a b)))
                  (muldivle ((div a b) c))))
              (muldivle (a b))))))
      (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul c (div a (mul b c))) (div a b)) (le (div a (mul b c)) (div (div a b) c)))
        (anwr ((not (eq b (d0))) (not (eq c (d0))) (iff (le (div a (mul b c)) (div (div a b) c)) (le (mul c (div a (mul b c))) (div a b))))
          (:conv (im (not (eq c (d0))) (iff (le (div a (mul b c)) (div (div a b) c)) (le (mul c (div a (mul b c))) (div a b))))
            (im
              (:sym (:unfold ne (c (d0)) ()
                (not (eq c (d0)))))
              (iff (le (div a (mul b c)) (div (div a b) c)) (le (mul c (div a (mul b c))) (div a b))))
            (ledivmul1 ((div a (mul b c)) (div a b) c))))
        (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul b (mul c (div a (mul b c)))) a) (le (mul c (div a (mul b c))) (div a b)))
          (anwl ((not (eq b (d0))) (not (eq c (d0))) (iff (le (mul c (div a (mul b c))) (div a b)) (le (mul b (mul c (div a (mul b c)))) a)))
            (:conv (im (not (eq b (d0))) (iff (le (mul c (div a (mul b c))) (div a b)) (le (mul b (mul c (div a (mul b c)))) a)))
              (im
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (iff (le (mul c (div a (mul b c))) (div a b)) (le (mul b (mul c (div a (mul b c)))) a)))
              (ledivmul1 ((mul c (div a (mul b c))) a b))))
          (a1i ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul b (mul c (div a (mul b c)))) a))
            (mpbi ((le (mul (mul b c) (div a (mul b c))) a) (le (mul b (mul c (div a (mul b c)))) a))
              (ax_mp ((eq (mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c))))) (iff (le (mul (mul b c) (div a (mul b c))) a) (le (mul b (mul c (div a (mul b c)))) a)))
                (leeq1 ((mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c)))) a))
                (mulass (b c (div a (mul b c)))))
              (muldivle (a (mul b c))))))))))))

(local theorem divmod1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mod (div a b) c) (div (mod a (mul b c)) b))
()
(cases ((eq b (d0)) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
  (eqtr4d ((eq b (d0)) (mod (div a b) c) (d0) (div (mod a (mul b c)) b))
    (syl6eq ((eq b (d0)) (mod (div a b) c) (mod (d0) c) (d0))
      (mod01 (c))
      (modeq1d ((eq b (d0)) (div a b) (d0) c)
        (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
          (div0 (a))
          (diveq2 (a b (d0))))))
    (syl6eq ((eq b (d0)) (div (mod a (mul b c)) b) (div (mod a (mul b c)) (d0)) (d0))
      (div0 ((mod a (mul b c))))
      (diveq2 ((mod a (mul b c)) b (d0)))))
  (casesda ((not (eq b (d0))) (eq c (d0)) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
    (anwr ((not (eq b (d0))) (eq c (d0)) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
      (eqtr4d ((eq c (d0)) (mod (div a b) c) (div a b) (div (mod a (mul b c)) b))
        (syl6eq ((eq c (d0)) (mod (div a b) c) (mod (div a b) (d0)) (div a b))
          (mod0 ((div a b)))
          (modeq2 ((div a b) c (d0))))
        (diveq1d ((eq c (d0)) (mod a (mul b c)) a b)
          (syl6eq ((eq c (d0)) (mod a (mul b c)) (mod a (d0)) a)
            (mod0 (a))
            (modeq2d ((eq c (d0)) a (mul b c) (d0))
              (syl6eq ((eq c (d0)) (mul b c) (mul b (d0)) (d0))
                (mul02 (b))
                (muleq2 (b c (d0)))))))))
    (anrd ((an (not (eq b (d0))) (not (eq c (d0)))) (eq (div (div a b) c) (div a (mul b c))) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
      (eqdivmod ((an (not (eq b (d0))) (not (eq c (d0)))) (div a (mul b c)) (div (mod a (mul b c)) b) (div a b) c)
        (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (lt (mod a (mul b c)) (mul b c)) (lt (div (mod a (mul b c)) b) c))
          (anwl ((not (eq b (d0))) (not (eq c (d0))) (iff (lt (div (mod a (mul b c)) b) c) (lt (mod a (mul b c)) (mul b c))))
            (:conv (im (not (eq b (d0))) (iff (lt (div (mod a (mul b c)) b) c) (lt (mod a (mul b c)) (mul b c))))
              (im
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (iff (lt (div (mod a (mul b c)) b) c) (lt (mod a (mul b c)) (mul b c))))
              (ltdivmul1 ((mod a (mul b c)) b c))))
          (sylbir ((an (not (eq b (d0))) (not (eq c (d0)))) (ne (mul b c) (d0)) (lt (mod a (mul b c)) (mul b c)))
            (:conv (iff (ne (mul b c) (d0)) (an (not (eq b (d0))) (not (eq c (d0)))))
              (iff
                (ne (mul b c) (d0))
                (an
                  (:sym (:unfold ne (b (d0)) ()
                    (not (eq b (d0)))))
                  (:sym (:unfold ne (c (d0)) ()
                    (not (eq c (d0)))))))
              (mulne0 (b c)))
            (modlt (a (mul b c)))))
        (eqcomd ((an (not (eq b (d0))) (not (eq c (d0)))) (div a b) (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b)))
          (anld ((an (not (eq b (d0))) (not (eq c (d0)))) (eq (div a b) (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (eq (mod a b) (mod (mod a (mul b c)) b)))
            (eqdivmod ((an (not (eq b (d0))) (not (eq c (d0)))) (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b) a b)
              (anwl ((not (eq b (d0))) (not (eq c (d0))) (lt (mod (mod a (mul b c)) b) b))
                (:conv (im (not (eq b (d0))) (lt (mod (mod a (mul b c)) b) b))
                  (im
                    (:sym (:unfold ne (b (d0)) ()
                      (not (eq b (d0)))))
                    (lt (mod (mod a (mul b c)) b) b))
                  (modlt ((mod a (mul b c)) b))))
              (a1i ((an (not (eq b (d0))) (not (eq c (d0)))) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                (ax_mp ((eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                  (ax_mp ((eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b))) (im (eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a)))
                    (eqtr ((add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                    (ax_mp ((eq (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b)))) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b))))
                      (addeq1 ((mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)))
                      (muladd (b (mul c (div a (mul b c))) (div (mod a (mul b c)) b)))))
                  (ax_mp ((eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a) (eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                    (ax_mp ((eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b)))) (im (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a) (eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a)))
                      (eqtr ((add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a))
                      (addass ((mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))))
                    (ax_mp ((eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a))
                      (ax_mp ((eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))) (im (eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a)))
                        (eqtr ((add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a))
                        (ax_mp ((eq (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b)) (mod a (mul b c))) (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))))
                          (addeq2 ((mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b)) (mod a (mul b c))))
                          (divmod ((mod a (mul b c)) b))))
                      (ax_mp ((eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a))
                        (ax_mp ((eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))) (im (eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a)))
                          (eqtr3 ((add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) a))
                          (ax_mp ((eq (mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c))))) (eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))))
                            (addeq1 ((mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c)))) (mod a (mul b c))))
                            (mulass (b c (div a (mul b c))))))
                        (divmod (a (mul b c))))))))))))))))

(local theorem divmod2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mod (div a b) c) (div (mod a (mul c b)) b))
()
(ax_mp ((eq (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)) (eq (mod (div a b) c) (div (mod a (mul c b)) b)))
  (ax_mp ((eq (mod (div a b) c) (div (mod a (mul b c)) b)) (im (eq (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)) (eq (mod (div a b) c) (div (mod a (mul c b)) b))))
    (eqtr ((mod (div a b) c) (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)))
    (divmod1 (a b c)))
  (ax_mp ((eq (mod a (mul b c)) (mod a (mul c b))) (eq (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)))
    (diveq1 ((mod a (mul b c)) (mod a (mul c b)) b))
    (ax_mp ((eq (mul b c) (mul c b)) (eq (mod a (mul b c)) (mod a (mul c b))))
      (modeq2 (a (mul b c) (mul c b)))
      (mulcom (b c))))))

(local theorem divmoddilem ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne a (d0)) (an (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c)))))
()
(:let H1 (mul0 (a))
(:let H2 (muleq2 (a c (d0)))
(:let H3 (syl6eq ((eq c (d0)) (mul a c) (mul a (d0)) (d0))
  H1
  H2)
(casesda ((ne a (d0)) (eq c (d0)) (an (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c)))))
  (anwr ((ne a (d0)) (eq c (d0)) (an (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c)))))
    (iand ((eq c (d0)) (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c))))
      (eqtr4d ((eq c (d0)) (div (mul a b) (mul a c)) (d0) (div b c))
        (syl6eq ((eq c (d0)) (div (mul a b) (mul a c)) (div (mul a b) (d0)) (d0))
          (div0 ((mul a b)))
          (diveq2d ((eq c (d0)) (mul a b) (mul a c) (d0))
            H3))
        (syl6eq ((eq c (d0)) (div b c) (div b (d0)) (d0))
          (div0 (b))
          (diveq2 (b c (d0)))))
      (eqtr4d ((eq c (d0)) (mod (mul a b) (mul a c)) (mul a b) (mul a (mod b c)))
        (syl6eq ((eq c (d0)) (mod (mul a b) (mul a c)) (mod (mul a b) (d0)) (mul a b))
          (mod0 ((mul a b)))
          (modeq2d ((eq c (d0)) (mul a b) (mul a c) (d0))
            H3))
        (muleq2d ((eq c (d0)) a (mod b c) b)
          (syl6eq ((eq c (d0)) (mod b c) (mod b (d0)) b)
            (mod0 (b))
            (modeq2 (b c (d0))))))))
  (eqdivmod ((an (ne a (d0)) (not (eq c (d0)))) (div b c) (mul a (mod b c)) (mul a b) (mul a c))
    (mpbid ((an (ne a (d0)) (not (eq c (d0)))) (lt (mod b c) c) (lt (mul a (mod b c)) (mul a c)))
      (syl ((an (ne a (d0)) (not (eq c (d0)))) (lt (d0) a) (iff (lt (mod b c) c) (lt (mul a (mod b c)) (mul a c))))
        (ltmul2 (a (mod b c) c))
        (sylibr ((an (ne a (d0)) (not (eq c (d0)))) (ne a (d0)) (lt (d0) a))
          (lt01 (a))
          (anl ((ne a (d0)) (not (eq c (d0)))))))
      (anwr ((ne a (d0)) (not (eq c (d0))) (lt (mod b c) c))
        (:conv (im (not (eq c (d0))) (lt (mod b c) c))
          (im
            (:sym (:unfold ne (c (d0)) ()
              (not (eq c (d0)))))
            (lt (mod b c) c))
          (modlt (b c)))))
    (a1i ((an (ne a (d0)) (not (eq c (d0)))) (eq (add (mul (mul a c) (div b c)) (mul a (mod b c))) (mul a b)))
      (ax_mp ((eq (add (mul a (mul c (div b c))) (mul a (mod b c))) (mul a b)) (eq (add (mul (mul a c) (div b c)) (mul a (mod b c))) (mul a b)))
        (ax_mp ((eq (add (mul (mul a c) (div b c)) (mul a (mod b c))) (add (mul a (mul c (div b c))) (mul a (mod b c)))) (im (eq (add (mul a (mul c (div b c))) (mul a (mod b c))) (mul a b)) (eq (add (mul (mul a c) (div b c)) (mul a (mod b c))) (mul a b))))
          (eqtr ((add (mul (mul a c) (div b c)) (mul a (mod b c))) (add (mul a (mul c (div b c))) (mul a (mod b c))) (mul a b)))
          (ax_mp ((eq (mul (mul a c) (div b c)) (mul a (mul c (div b c)))) (eq (add (mul (mul a c) (div b c)) (mul a (mod b c))) (add (mul a (mul c (div b c))) (mul a (mod b c)))))
            (addeq1 ((mul (mul a c) (div b c)) (mul a (mul c (div b c))) (mul a (mod b c))))
            (mulass (a c (div b c)))))
        (ax_mp ((eq (mul a (add (mul c (div b c)) (mod b c))) (mul a b)) (eq (add (mul a (mul c (div b c))) (mul a (mod b c))) (mul a b)))
          (ax_mp ((eq (mul a (add (mul c (div b c)) (mod b c))) (add (mul a (mul c (div b c))) (mul a (mod b c)))) (im (eq (mul a (add (mul c (div b c)) (mod b c))) (mul a b)) (eq (add (mul a (mul c (div b c))) (mul a (mod b c))) (mul a b))))
            (eqtr3 ((add (mul a (mul c (div b c))) (mul a (mod b c))) (mul a (add (mul c (div b c)) (mod b c))) (mul a b)))
            (muladd (a (mul c (div b c)) (mod b c))))
          (ax_mp ((eq (add (mul c (div b c)) (mod b c)) b) (eq (mul a (add (mul c (div b c)) (mod b c))) (mul a b)))
            (muleq2 (a (add (mul c (div b c)) (mod b c)) b))
            (divmod (b c))))))))))))

(local theorem mdmcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne a (d0)) (eq (div (mul a b) (mul a c)) (div b c)))
()
(anld ((ne a (d0)) (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c))))
  (divmoddilem (a b c))))

(local theorem mdmcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne c (d0)) (eq (div (mul a c) (mul b c)) (div a b)))
()
(syl5eq ((ne c (d0)) (div (mul a c) (mul b c)) (div (mul c a) (mul c b)) (div a b))
  (ax_mp ((eq (mul b c) (mul c b)) (eq (div (mul a c) (mul b c)) (div (mul c a) (mul c b))))
    (ax_mp ((eq (mul a c) (mul c a)) (im (eq (mul b c) (mul c b)) (eq (div (mul a c) (mul b c)) (div (mul c a) (mul c b)))))
      (diveq ((mul a c) (mul c a) (mul b c) (mul c b)))
      (mulcom (a c)))
    (mulcom (b c)))
  (mdmcan1 (c a b))))

(local theorem mulmoddi ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul a (mod b c)) (mod (mul a b) (mul a c)))
()
(cases ((eq a (d0)) (eq (mul a (mod b c)) (mod (mul a b) (mul a c))))
  (eqtr4d ((eq a (d0)) (mul a (mod b c)) (mul (d0) (mod b c)) (mod (mul a b) (mul a c)))
    (muleq1 (a (d0) (mod b c)))
    (syl6eqr ((eq a (d0)) (mod (mul a b) (mul a c)) (d0) (mul (d0) (mod b c)))
      (mul01 ((mod b c)))
      (syl6eq ((eq a (d0)) (mod (mul a b) (mul a c)) (mod (d0) (d0)) (d0))
        (mod0 ((d0)))
        (modeqd ((eq a (d0)) (mul a b) (d0) (mul a c) (d0))
          (syl6eq ((eq a (d0)) (mul a b) (mul (d0) b) (d0))
            (mul01 (b))
            (muleq1 (a (d0) b)))
          (syl6eq ((eq a (d0)) (mul a c) (mul (d0) c) (d0))
            (mul01 (c))
            (muleq1 (a (d0) c)))))))
  (eqcomd ((not (eq a (d0))) (mod (mul a b) (mul a c)) (mul a (mod b c)))
    (anrd ((not (eq a (d0))) (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c))))
      (:conv (im (not (eq a (d0))) (an (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c)))))
        (im
          (:sym (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
          (an (eq (div (mul a b) (mul a c)) (div b c)) (eq (mod (mul a b) (mul a c)) (mul a (mod b c)))))
        (divmoddilem (a b c)))))))

(local theorem mulmoddir ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (mod a b) c) (mod (mul a c) (mul b c)))
()
(ax_mp ((eq (mul c (mod a b)) (mod (mul a c) (mul b c))) (eq (mul (mod a b) c) (mod (mul a c) (mul b c))))
  (ax_mp ((eq (mul (mod a b) c) (mul c (mod a b))) (im (eq (mul c (mod a b)) (mod (mul a c) (mul b c))) (eq (mul (mod a b) c) (mod (mul a c) (mul b c)))))
    (eqtr ((mul (mod a b) c) (mul c (mod a b)) (mod (mul a c) (mul b c))))
    (mulcom ((mod a b) c)))
  (ax_mp ((eq (mod (mul c a) (mul c b)) (mod (mul a c) (mul b c))) (eq (mul c (mod a b)) (mod (mul a c) (mul b c))))
    (ax_mp ((eq (mul c (mod a b)) (mod (mul c a) (mul c b))) (im (eq (mod (mul c a) (mul c b)) (mod (mul a c) (mul b c))) (eq (mul c (mod a b)) (mod (mul a c) (mul b c)))))
      (eqtr ((mul c (mod a b)) (mod (mul c a) (mul c b)) (mod (mul a c) (mul b c))))
      (mulmoddi (c a b)))
    (ax_mp ((eq (mul c b) (mul b c)) (eq (mod (mul c a) (mul c b)) (mod (mul a c) (mul b c))))
      (ax_mp ((eq (mul c a) (mul a c)) (im (eq (mul c b) (mul b c)) (eq (mod (mul c a) (mul c b)) (mod (mul a c) (mul b c)))))
        (modeq ((mul c a) (mul a c) (mul c b) (mul b c)))
        (mulcom (c a)))
      (mulcom (c b))))))

(def dvd ((a nat ()) (b nat ())) (wff ())
((c nat))
(ex c (eq (mul c a) b)))

(local theorem dvdeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (iff (dvd _a1 _b1) (dvd _a2 _b2)))
((c nat))
(:conv (im _G (iff (dvd _a1 _b1) (dvd _a2 _b2)))
  (im
    _G
    (iff
      (:unfold dvd (_a1 _b1) (c)
        (ex c (eq (mul c _a1) _b1)))
      (:unfold dvd (_a2 _b2) (c)
        (ex c (eq (mul c _a2) _b2)))))
  (exeqd (_G c (eq (mul c _a1) _b1) (eq (mul c _a2) _b2))
    (eqeqd (_G (mul c _a1) (mul c _a2) _b1 _b2)
      (muleqd (_G c c _a1 _a2)
        (eqidd (_G c))
        _ah)
      _bh))))

(local theorem dvdeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (iff (dvd _a1 _b1) (dvd _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (iff (dvd _a1 _b1) (dvd _a2 _b2)))
  (dvdeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem dvdeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (dvd _a1 b) (dvd _a2 b)))
()
(dvdeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem dvdeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (iff (dvd _a1 b) (dvd _a2 b)))
()
(dvdeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem dvdeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (iff (dvd a _b1) (dvd a _b2)))
()
(dvdeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem dvdeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (iff (dvd a _b1) (dvd a _b2)))
()
(dvdeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem idvd ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (mul c a) b) (dvd a b))
((x nat))
(:conv (im (eq (mul c a) b) (dvd a b))
  (im
    (eq (mul c a) b)
    (:unfold dvd (a b) (x)
      (ex x (eq (mul x a) b))))
  (iexe (x c (eq (mul x a) b) (eq (mul c a) b))
    (eqeq1d ((eq x c) (mul x a) (mul c a) b)
      (muleq1 (x c a))))))

(local theorem idvd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (mul a c) b) (dvd a b))
()
(sylbi ((eq (mul a c) b) (eq (mul c a) b) (dvd a b))
  (ax_mp ((eq (mul a c) (mul c a)) (iff (eq (mul a c) b) (eq (mul c a) b)))
    (eqeq1 ((mul a c) (mul c a) b))
    (mulcom (a c)))
  (idvd (a b c))))

(local theorem divmul ((a nat ()) (b nat ())) ()
  (im (dvd b a) (eq (mul (div a b) b) a))
((x nat))
(:conv (im (dvd b a) (eq (mul (div a b) b) a))
  (im
    (:unfold dvd (b a) (x)
      (ex x (eq (mul x b) a)))
    (eq (mul (div a b) b) a))
  (eex (x (eq (mul x b) a) (eq (mul (div a b) b) a))
    (eqtr3d ((eq (mul x b) a) (mul (div a b) b) (mul (div (mul x b) b) b) a)
      (muleq1d ((eq (mul x b) a) (div (mul x b) b) (div a b) b)
        (diveq1 ((mul x b) a b)))
      (syl5eq ((eq (mul x b) a) (mul (div (mul x b) b) b) (mul x b) a)
        (cases ((eq b (d0)) (eq (mul (div (mul x b) b) b) (mul x b)))
          (eqtr4d ((eq b (d0)) (mul (div (mul x b) b) b) (d0) (mul x b))
            (syl6eq ((eq b (d0)) (mul (div (mul x b) b) b) (mul (div (mul x b) b) (d0)) (d0))
              (mul0 ((div (mul x b) b)))
              (muleq2 ((div (mul x b) b) b (d0))))
            (syl6eq ((eq b (d0)) (mul x b) (mul x (d0)) (d0))
              (mul0 (x))
              (muleq2 (x b (d0)))))
          (muleq1d ((not (eq b (d0))) (div (mul x b) b) x b)
            (:conv (im (not (eq b (d0))) (eq (div (mul x b) b) x))
              (im
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (eq (div (mul x b) b) x))
              (muldiv1 (x b)))))
        (id ((eq (mul x b) a))))))))

(local theorem muldiv3 ((a nat ()) (b nat ())) ()
  (im (dvd b a) (eq (mul b (div a b)) a))
()
(syl5eq ((dvd b a) (mul b (div a b)) (mul (div a b) b) a)
  (mulcom (b (div a b)))
  (divmul (a b))))

(local theorem dvdadd1 ((a nat ()) (b nat ()) (n nat ())) ()
  (im (dvd n a) (iff (dvd n b) (dvd n (add a b))))
((x nat) (y nat) (z nat))
(:conv (im (dvd n a) (iff (dvd n b) (dvd n (add a b))))
  (im
    (:unfold dvd (n a) (x)
      (ex x (eq (mul x n) a)))
    (iff (dvd n b) (dvd n (add a b))))
  (eex (x (eq (mul x n) a) (iff (dvd n b) (dvd n (add a b))))
    (ibid ((eq (mul x n) a) (dvd n b) (dvd n (add a b)))
      (:conv (im (eq (mul x n) a) (im (dvd n b) (dvd n (add a b))))
        (im
          (eq (mul x n) a)
          (im
            (:unfold dvd (n b) (y)
              (ex y (eq (mul y n) b)))
            (dvd n (add a b))))
        (eexda (y (eq (mul x n) a) (eq (mul y n) b) (dvd n (add a b)))
          (syl ((an (eq (mul x n) a) (eq (mul y n) b)) (eq (mul (add x y) n) (add a b)) (dvd n (add a b)))
            (idvd (n (add a b) (add x y)))
            (syl5eq ((an (eq (mul x n) a) (eq (mul y n) b)) (mul (add x y) n) (add (mul x n) (mul y n)) (add a b))
              (addmul (x y n))
              (imp ((eq (mul x n) a) (eq (mul y n) b) (eq (add (mul x n) (mul y n)) (add a b)))
                (addeq ((mul x n) a (mul y n) b)))))))
      (:conv (im (eq (mul x n) a) (im (dvd n (add a b)) (dvd n b)))
        (im
          (eq (mul x n) a)
          (im
            (:unfold dvd (n (add a b)) (z)
              (ex z (eq (mul z n) (add a b))))
            (dvd n b)))
        (eexda (z (eq (mul x n) a) (eq (mul z n) (add a b)) (dvd n b))
          (syl ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq (mul (sub z x) n) b) (dvd n b))
            (idvd (n b (sub z x)))
            (sylib ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq (add a (mul (sub z x) n)) (add a b)) (eq (mul (sub z x) n) b))
              (addcan2 (a (mul (sub z x) n) b))
              (eqtr3d ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (add a (mul (sub z x) n)) (add (mul x n) (mul (sub z x) n)) (add a b))
                (anwl ((eq (mul x n) a) (eq (mul z n) (add a b)) (eq (add (mul x n) (mul (sub z x) n)) (add a (mul (sub z x) n))))
                  (addeq1 ((mul x n) a (mul (sub z x) n))))
                (syl5eqr ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (add (mul x n) (mul (sub z x) n)) (mul (add x (sub z x)) n) (add a b))
                  (addmul (x (sub z x) n))
                  (eqtrd ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (mul (add x (sub z x)) n) (mul z n) (add a b))
                    (casesda ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq n (d0)) (eq (mul (add x (sub z x)) n) (mul z n)))
                      (anwr ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq n (d0)) (eq (mul (add x (sub z x)) n) (mul z n)))
                        (eqtr4d ((eq n (d0)) (mul (add x (sub z x)) n) (d0) (mul z n))
                          (syl6eq ((eq n (d0)) (mul (add x (sub z x)) n) (mul (add x (sub z x)) (d0)) (d0))
                            (mul0 ((add x (sub z x))))
                            (muleq2 ((add x (sub z x)) n (d0))))
                          (syl6eq ((eq n (d0)) (mul z n) (mul z (d0)) (d0))
                            (mul0 (z))
                            (muleq2 (z n (d0))))))
                      (muleq1d ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (add x (sub z x)) z n)
                        (syl ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (le x z) (eq (add x (sub z x)) z))
                          (pncan3 (x z))
                          (mpbiri ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (le a (add a b)) (le x z))
                            (leaddid1 (a b))
                            (bitrd ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (le x z) (le (mul x n) (mul z n)) (le a (add a b)))
                              (anwr ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0))) (iff (le x z) (le (mul x n) (mul z n))))
                                (sylbir ((not (eq n (d0))) (lt (d0) n) (iff (le x z) (le (mul x n) (mul z n))))
                                  (:conv (iff (lt (d0) n) (not (eq n (d0))))
                                    (iff
                                      (lt (d0) n)
                                      (:sym (:unfold ne (n (d0)) ()
                                        (not (eq n (d0))))))
                                    (lt01 (n)))
                                  (lemul1 (x z n))))
                              (leeqd ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (mul x n) a (mul z n) (add a b))
                                (anll ((eq (mul x n) a) (eq (mul z n) (add a b)) (not (eq n (d0)))))
                                (anlr ((eq (mul x n) a) (eq (mul z n) (add a b)) (not (eq n (d0)))))))))))
                    (anr ((eq (mul x n) a) (eq (mul z n) (add a b)))))))))))))))

(local theorem dvdadd2 ((a nat ()) (b nat ()) (n nat ())) ()
  (im (dvd n a) (iff (dvd n b) (dvd n (add b a))))
()
(syl6bb ((dvd n a) (dvd n b) (dvd n (add a b)) (dvd n (add b a)))
  (ax_mp ((eq (add a b) (add b a)) (iff (dvd n (add a b)) (dvd n (add b a))))
    (dvdeqd ((eq (add a b) (add b a)) n n (add a b) (add b a))
      (eqidd ((eq (add a b) (add b a)) n))
      (id ((eq (add a b) (add b a)))))
    (addcom (a b)))
  (dvdadd1 (a b n))))

(local theorem dvdmul1 ((a nat ()) (b nat ())) ()
  (dvd a (mul b a))
()
(ax_mp ((eq (mul b a) (mul b a)) (dvd a (mul b a)))
  (idvd (a (mul b a) b))
  (eqid ((mul b a)))))

(local theorem dvdmul2 ((a nat ()) (b nat ())) ()
  (dvd a (mul a b))
()
(mpbi ((dvd a (mul b a)) (dvd a (mul a b)))
  (ax_mp ((eq (mul b a) (mul a b)) (iff (dvd a (mul b a)) (dvd a (mul a b))))
    (dvdeq2 (a (mul b a) (mul a b)))
    (mulcom (b a)))
  (dvdmul1 (a b))))

(local theorem dvdtr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (dvd a b) (im (dvd b c) (dvd a c)))
((x nat) (y nat))
(:conv (im (dvd a b) (im (dvd b c) (dvd a c)))
  (im
    (:unfold dvd (a b) (x)
      (ex x (eq (mul x a) b)))
    (im (dvd b c) (dvd a c)))
  (eex (x (eq (mul x a) b) (im (dvd b c) (dvd a c)))
    (:conv (im (eq (mul x a) b) (im (dvd b c) (dvd a c)))
      (im
        (eq (mul x a) b)
        (im
          (:unfold dvd (b c) (y)
            (ex y (eq (mul y b) c)))
          (dvd a c)))
      (eexda (y (eq (mul x a) b) (eq (mul y b) c) (dvd a c))
        (syl ((an (eq (mul x a) b) (eq (mul y b) c)) (eq (mul (mul y x) a) c) (dvd a c))
          (idvd (a c (mul y x)))
          (eqtrd ((an (eq (mul x a) b) (eq (mul y b) c)) (mul (mul y x) a) (mul y b) c)
            (anwl ((eq (mul x a) b) (eq (mul y b) c) (eq (mul (mul y x) a) (mul y b)))
              (syl5eq ((eq (mul x a) b) (mul (mul y x) a) (mul y (mul x a)) (mul y b))
                (mulass (y x a))
                (muleq2 (y (mul x a) b))))
            (anr ((eq (mul x a) b) (eq (mul y b) c))))))))))

(local theorem dvdmul12 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (dvd a b) (dvd a (mul c b)))
()
(mpi ((dvd a b) (dvd b (mul c b)) (dvd a (mul c b)))
  (dvdmul1 (b c))
  (dvdtr (a b (mul c b)))))

(local theorem dvdmul11 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (dvd a b) (dvd a (mul b c)))
()
(mpi ((dvd a b) (dvd b (mul b c)) (dvd a (mul b c)))
  (dvdmul2 (b c))
  (dvdtr (a b (mul b c)))))

(local theorem modeq0 ((a nat ()) (n nat ())) ()
  (iff (eq (mod a n) (d0)) (dvd n a))
((x nat))
(:conv (iff (eq (mod a n) (d0)) (dvd n a))
  (iff
    (eq (mod a n) (d0))
    (:unfold dvd (n a) (x)
      (ex x (eq (mul x n) a))))
  (ibii ((eq (mod a n) (d0)) (ex x (eq (mul x n) a)))
    (iexde (x (eq (mod a n) (d0)) (div a n) (eq (mul x n) a))
      (eqtrd ((an (eq (mod a n) (d0)) (eq x (div a n))) (mul x n) (mul (div a n) n) a)
        (anwr ((eq (mod a n) (d0)) (eq x (div a n)) (eq (mul x n) (mul (div a n) n)))
          (muleq1 (x (div a n) n)))
        (syl5eq ((an (eq (mod a n) (d0)) (eq x (div a n))) (mul (div a n) n) (mul n (div a n)) a)
          (mulcom ((div a n) n))
          (syl5eqr ((an (eq (mod a n) (d0)) (eq x (div a n))) (mul n (div a n)) (add (mul n (div a n)) (d0)) a)
            (add0 ((mul n (div a n))))
            (eqtr3d ((an (eq (mod a n) (d0)) (eq x (div a n))) (add (mul n (div a n)) (d0)) (add (mul n (div a n)) (mod a n)) a)
              (anwl ((eq (mod a n) (d0)) (eq x (div a n)) (eq (add (mul n (div a n)) (mod a n)) (add (mul n (div a n)) (d0))))
                (addeq2 ((mul n (div a n)) (mod a n) (d0))))
              (a1i ((an (eq (mod a n) (d0)) (eq x (div a n))) (eq (add (mul n (div a n)) (mod a n)) a))
                (divmod (a n))))))))
    (eex (x (eq (mul x n) a) (eq (mod a n) (d0)))
      (syl6eq ((eq (mul x n) a) (mod a n) (mod (mul x n) n) (d0))
        (mulmod2 (x n))
        (modeqd ((eq (mul x n) a) a (mul x n) n n)
          (eqcom ((mul x n) a))
          (eqidd ((eq (mul x n) a) n))))))))

(local theorem dvd02 ((a nat ())) ()
  (dvd a (d0))
()
(ax_mp ((eq (mul (d0) a) (d0)) (dvd a (d0)))
  (idvd (a (d0) (d0)))
  (mul01 (a))))

(local theorem dvd01 ((a nat ())) ()
  (iff (dvd (d0) a) (eq a (d0)))
((x nat))
(ibii ((dvd (d0) a) (eq a (d0)))
  (:conv (im (dvd (d0) a) (eq a (d0)))
    (im
      (:unfold dvd ((d0) a) (x)
        (ex x (eq (mul x (d0)) a)))
      (eq a (d0)))
    (eex (x (eq (mul x (d0)) a) (eq a (d0)))
      (eqcomd ((eq (mul x (d0)) a) (d0) a)
        (ax_mp ((iff (eq (mul x (d0)) a) (eq (d0) a)) (im (eq (mul x (d0)) a) (eq (d0) a)))
          (bi1 ((eq (mul x (d0)) a) (eq (d0) a)))
          (ax_mp ((eq (mul x (d0)) (d0)) (iff (eq (mul x (d0)) a) (eq (d0) a)))
            (eqeq1 ((mul x (d0)) (d0) a))
            (mul02 (x)))))))
  (mpbiri ((eq a (d0)) (dvd (d0) (d0)) (dvd (d0) a))
    (dvd02 ((d0)))
    (dvdeq2 ((d0) a (d0))))))

(local theorem dvdid ((a nat ())) ()
  (dvd a a)
()
(ax_mp ((eq (mul (d1) a) a) (dvd a a))
  (idvd (a a (d1)))
  (mul11 (a))))

(local theorem dvdle ((G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (ne b (d0))))
   (h2 (im G (dvd a b))))
  (im G (le a b))
((x nat))
(mpd (G (dvd a b) (le a b))
  h2
  (:conv (im G (im (dvd a b) (le a b)))
    (im
      G
      (im
        (:unfold dvd (a b) (x)
          (ex x (eq (mul x a) b)))
        (le a b)))
    (eexda (x G (eq (mul x a) b) (le a b))
      (mpbid ((an G (eq (mul x a) b)) (le (mul (d1) a) (mul x a)) (le a b))
        (leeqd ((an G (eq (mul x a) b)) (mul (d1) a) a (mul x a) b)
          (a1i ((an G (eq (mul x a) b)) (eq (mul (d1) a) a))
            (mul11 (a)))
          (anr (G (eq (mul x a) b))))
        (syl ((an G (eq (mul x a) b)) (le (d1) x) (le (mul (d1) a) (mul x a)))
          (lemul1a ((d1) x a))
          (sylibr ((an G (eq (mul x a) b)) (ne x (d0)) (le (d1) x))
            (:conv (iff (le (d1) x) (ne x (d0)))
              (iff
                (:sym (:unfold lt ((d0) x) ()
                  (le
                    (:sym (:unfold d1 () ()
                      (suc (d0))))
                    x)))
                (ne x (d0)))
              (lt01 (x)))
            (:conv (im (an G (eq (mul x a) b)) (ne x (d0)))
              (im
                (an G (eq (mul x a) b))
                (:unfold ne (x (d0)) ()
                  (not (eq x (d0)))))
              (mtand ((an G (eq (mul x a) b)) (eq b (d0)) (eq x (d0)))
                (anwl (G (eq (mul x a) b) (not (eq b (d0))))
                  (:conv (im G (not (eq b (d0))))
                    (im
                      G
                      (:sym (:unfold ne (b (d0)) ()
                        (not (eq b (d0))))))
                    h1))
                (eqtr3d ((an (an G (eq (mul x a) b)) (eq x (d0))) b (mul x a) (d0))
                  (anlr (G (eq (mul x a) b) (eq x (d0))))
                  (syl6eq ((an (an G (eq (mul x a) b)) (eq x (d0))) (mul x a) (mul (d0) a) (d0))
                    (mul01 (a))
                    (anwr ((an G (eq (mul x a) b)) (eq x (d0)) (eq (mul x a) (mul (d0) a)))
                      (muleq1 (x (d0) a))))))))))))))

(local theorem dvdasymd ((G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (dvd a b)))
   (h2 (im G (dvd b a))))
  (im G (eq a b))
()
(casesda (G (eq a (d0)) (eq a b))
  (eqtr4d ((an G (eq a (d0))) a (d0) b)
    (anr (G (eq a (d0))))
    (sylib ((an G (eq a (d0))) (dvd (d0) b) (eq b (d0)))
      (dvd01 (b))
      (mpbid ((an G (eq a (d0))) (dvd a b) (dvd (d0) b))
        (anwr (G (eq a (d0)) (iff (dvd a b) (dvd (d0) b)))
          (dvdeq1 (a (d0) b)))
        (anwl (G (eq a (d0)) (dvd a b))
          h1))))
  (casesda ((an G (not (eq a (d0)))) (eq b (d0)) (eq a b))
    (eqtr4d ((an (an G (not (eq a (d0)))) (eq b (d0))) a (d0) b)
      (sylib ((an (an G (not (eq a (d0)))) (eq b (d0))) (dvd (d0) a) (eq a (d0)))
        (dvd01 (a))
        (mpbid ((an (an G (not (eq a (d0)))) (eq b (d0))) (dvd b a) (dvd (d0) a))
          (anwr ((an G (not (eq a (d0)))) (eq b (d0)) (iff (dvd b a) (dvd (d0) a)))
            (dvdeq1 (b (d0) a)))
          (anwll (G (not (eq a (d0))) (eq b (d0)) (dvd b a))
            h2)))
      (anr ((an G (not (eq a (d0)))) (eq b (d0)))))
    (leasymd ((an (an G (not (eq a (d0)))) (not (eq b (d0)))) a b)
      (dvdle ((an (an G (not (eq a (d0)))) (not (eq b (d0)))) a b)
        (:conv (im (an (an G (not (eq a (d0)))) (not (eq b (d0)))) (ne b (d0)))
          (im
            (an (an G (not (eq a (d0)))) (not (eq b (d0))))
            (:unfold ne (b (d0)) ()
              (not (eq b (d0)))))
          (anr ((an G (not (eq a (d0)))) (not (eq b (d0))))))
        (anwll (G (not (eq a (d0))) (not (eq b (d0))) (dvd a b))
          h1))
      (dvdle ((an (an G (not (eq a (d0)))) (not (eq b (d0)))) b a)
        (:conv (im (an (an G (not (eq a (d0)))) (not (eq b (d0)))) (ne a (d0)))
          (im
            (an (an G (not (eq a (d0)))) (not (eq b (d0))))
            (:unfold ne (a (d0)) ()
              (not (eq a (d0)))))
          (anlr (G (not (eq a (d0))) (not (eq b (d0))))))
        (anwll (G (not (eq a (d0))) (not (eq b (d0))) (dvd b a))
          h2))))))

(local theorem dvd11 ((a nat ())) ()
  (dvd (d1) a)
()
(ax_mp ((eq (mul a (d1)) a) (dvd (d1) a))
  (idvd ((d1) a a))
  (mul12 (a))))

(local theorem dvd12 ((a nat ())) ()
  (iff (dvd a (d1)) (eq a (d1)))
()
(:let H1 (d1ne0 ())
(ibii ((dvd a (d1)) (eq a (d1)))
  (leasymd ((dvd a (d1)) a (d1))
    (dvdle ((dvd a (d1)) a (d1))
      (a1i ((dvd a (d1)) (ne (d1) (d0)))
        H1)
      (id ((dvd a (d1)))))
    (sylibr ((dvd a (d1)) (ne a (d0)) (le (d1) a))
      (le11 (a))
      (:conv (im (dvd a (d1)) (ne a (d0)))
        (im
          (dvd a (d1))
          (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
        (mtani ((dvd a (d1)) (eq (d1) (d0)) (eq a (d0)))
          (:conv (not (eq (d1) (d0)))
            (:sym (:unfold ne ((d1) (d0)) ()
              (not (eq (d1) (d0)))))
            H1)
          (sylib ((an (dvd a (d1)) (eq a (d0))) (dvd (d0) (d1)) (eq (d1) (d0)))
            (dvd01 ((d1)))
            (mpbid ((an (dvd a (d1)) (eq a (d0))) (dvd a (d1)) (dvd (d0) (d1)))
              (anwr ((dvd a (d1)) (eq a (d0)) (iff (dvd a (d1)) (dvd (d0) (d1))))
                (dvdeq1 (a (d0) (d1))))
              (anl ((dvd a (d1)) (eq a (d0))))))))))
  (mpbiri ((eq a (d1)) (dvd (d1) (d1)) (dvd a (d1)))
    (dvdid ((d1)))
    (dvdeq1 (a (d1) (d1)))))))

(local theorem d2dvd1 () ()
  (not (dvd (d2) (d1)))
()
(mt ((le (d2) (d1)) (dvd (d2) (d1)))
  (dvdle ((dvd (d2) (d1)) (d2) (d1))
    (a1i ((dvd (d2) (d1)) (ne (d1) (d0)))
      (d1ne0 ()))
    (id ((dvd (d2) (d1)))))
  (mpbi ((lt (d1) (d2)) (not (le (d2) (d1))))
    (ltnle ((d1) (d2)))
    (d1lt2 ()))))

(local theorem d2dvdS ((n nat ())) ()
  (iff (dvd (d2) (suc n)) (not (dvd (d2) n)))
((_1 nat) (x1 nat))
(:let H1 (eqidd ((eq _1 n) (d2)))
(:let H2 (id ((eq _1 n)))
(:let H3 (eqidd ((eq _1 (d0)) (d2)))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 x1) (d2)))
(:let H6 (id ((eq _1 x1)))
(:let H7 (eqidd ((eq _1 (suc x1)) (d2)))
(:let H8 (id ((eq _1 (suc x1))))
(ibii ((dvd (d2) (suc n)) (not (dvd (d2) n)))
  (mtd ((dvd (d2) (suc n)) (dvd (d2) (d1)) (dvd (d2) n))
    (a1i ((dvd (d2) (suc n)) (not (dvd (d2) (d1))))
      (d2dvd1 ()))
    (exp ((dvd (d2) (suc n)) (dvd (d2) n) (dvd (d2) (d1)))
      (mpbird ((an (dvd (d2) (suc n)) (dvd (d2) n)) (dvd (d2) (suc n)) (dvd (d2) (d1)))
        (syl6bb ((an (dvd (d2) (suc n)) (dvd (d2) n)) (dvd (d2) (d1)) (dvd (d2) (add n (d1))) (dvd (d2) (suc n)))
          (ax_mp ((eq (add n (d1)) (suc n)) (iff (dvd (d2) (add n (d1))) (dvd (d2) (suc n))))
            (dvdeq2 ((d2) (add n (d1)) (suc n)))
            (add12 (n)))
          (anwr ((dvd (d2) (suc n)) (dvd (d2) n) (iff (dvd (d2) (d1)) (dvd (d2) (add n (d1)))))
            (dvdadd1 (n (d1) (d2)))))
        (anl ((dvd (d2) (suc n)) (dvd (d2) n))))))
  (ind (_1 x1 n (im (not (dvd (d2) _1)) (dvd (d2) (suc _1))) (im (not (dvd (d2) (d0))) (dvd (d2) (suc (d0)))) (im (not (dvd (d2) n)) (dvd (d2) (suc n))) (im (not (dvd (d2) x1)) (dvd (d2) (suc x1))) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))
    (imeqd ((eq _1 n) (not (dvd (d2) _1)) (not (dvd (d2) n)) (dvd (d2) (suc _1)) (dvd (d2) (suc n)))
      (noteqd ((eq _1 n) (dvd (d2) _1) (dvd (d2) n))
        (dvdeqd ((eq _1 n) (d2) (d2) _1 n)
          H1
          H2))
      (dvdeqd ((eq _1 n) (d2) (d2) (suc _1) (suc n))
        H1
        (suceqd ((eq _1 n) _1 n)
          H2)))
    (imeqd ((eq _1 (d0)) (not (dvd (d2) _1)) (not (dvd (d2) (d0))) (dvd (d2) (suc _1)) (dvd (d2) (suc (d0))))
      (noteqd ((eq _1 (d0)) (dvd (d2) _1) (dvd (d2) (d0)))
        (dvdeqd ((eq _1 (d0)) (d2) (d2) _1 (d0))
          H3
          H4))
      (dvdeqd ((eq _1 (d0)) (d2) (d2) (suc _1) (suc (d0)))
        H3
        (suceqd ((eq _1 (d0)) _1 (d0))
          H4)))
    (imeqd ((eq _1 x1) (not (dvd (d2) _1)) (not (dvd (d2) x1)) (dvd (d2) (suc _1)) (dvd (d2) (suc x1)))
      (noteqd ((eq _1 x1) (dvd (d2) _1) (dvd (d2) x1))
        (dvdeqd ((eq _1 x1) (d2) (d2) _1 x1)
          H5
          H6))
      (dvdeqd ((eq _1 x1) (d2) (d2) (suc _1) (suc x1))
        H5
        (suceqd ((eq _1 x1) _1 x1)
          H6)))
    (imeqd ((eq _1 (suc x1)) (not (dvd (d2) _1)) (not (dvd (d2) (suc x1))) (dvd (d2) (suc _1)) (dvd (d2) (suc (suc x1))))
      (noteqd ((eq _1 (suc x1)) (dvd (d2) _1) (dvd (d2) (suc x1)))
        (dvdeqd ((eq _1 (suc x1)) (d2) (d2) _1 (suc x1))
          H7
          H8))
      (dvdeqd ((eq _1 (suc x1)) (d2) (d2) (suc _1) (suc (suc x1)))
        H7
        (suceqd ((eq _1 (suc x1)) _1 (suc x1))
          H8)))
    (ax_mp ((dvd (d2) (d0)) (im (not (dvd (d2) (d0))) (dvd (d2) (suc (d0)))))
      (:conv (im (dvd (d2) (d0)) (im (not (dvd (d2) (d0))) (dvd (d2) (suc (d0)))))
        (im
          (dvd (d2) (d0))
          (:sym (:unfold or ((dvd (d2) (d0)) (dvd (d2) (suc (d0)))) ()
            (im (not (dvd (d2) (d0))) (dvd (d2) (suc (d0)))))))
        (orl ((dvd (d2) (d0)) (dvd (d2) (suc (d0))))))
      (dvd02 ((d2))))
    (ax_mp ((im (dvd (d2) (suc x1)) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1))))) (im (im (not (dvd (d2) x1)) (dvd (d2) (suc x1))) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1))))))
      (ax_mp ((im (dvd (d2) x1) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1))))) (im (im (dvd (d2) (suc x1)) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1))))) (im (im (not (dvd (d2) x1)) (dvd (d2) (suc x1))) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))))
        (:conv (im (im (dvd (d2) x1) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1))))) (im (im (dvd (d2) (suc x1)) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1))))) (im (im (not (dvd (d2) x1)) (dvd (d2) (suc x1))) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))))
          (im
            (im (dvd (d2) x1) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))
            (im
              (im (dvd (d2) (suc x1)) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))
              (im
                (:sym (:unfold or ((dvd (d2) x1) (dvd (d2) (suc x1))) ()
                  (im (not (dvd (d2) x1)) (dvd (d2) (suc x1)))))
                (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))))
          (eor ((dvd (d2) x1) (dvd (d2) (suc x1)) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))))
        (:conv (im (dvd (d2) x1) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))
          (im
            (dvd (d2) x1)
            (:sym (:unfold or ((dvd (d2) (suc x1)) (dvd (d2) (suc (suc x1)))) ()
              (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))))
          (orrd ((dvd (d2) x1) (dvd (d2) (suc x1)) (dvd (d2) (suc (suc x1))))
            (sylib ((dvd (d2) x1) (dvd (d2) (add x1 (suc (d1)))) (dvd (d2) (suc (suc x1))))
              (ax_mp ((eq (add x1 (suc (d1))) (suc (suc x1))) (iff (dvd (d2) (add x1 (suc (d1)))) (dvd (d2) (suc (suc x1)))))
                (dvdeq2 ((d2) (add x1 (suc (d1))) (suc (suc x1))))
                (ax_mp ((eq (suc (add x1 (d1))) (suc (suc x1))) (eq (add x1 (suc (d1))) (suc (suc x1))))
                  (ax_mp ((eq (add x1 (suc (d1))) (suc (add x1 (d1)))) (im (eq (suc (add x1 (d1))) (suc (suc x1))) (eq (add x1 (suc (d1))) (suc (suc x1)))))
                    (eqtr ((add x1 (suc (d1))) (suc (add x1 (d1))) (suc (suc x1))))
                    (addS (x1 (d1))))
                  (ax_mp ((eq (add x1 (d1)) (suc x1)) (eq (suc (add x1 (d1))) (suc (suc x1))))
                    (suceq ((add x1 (d1)) (suc x1)))
                    (add12 (x1)))))
              (mpbii ((dvd (d2) x1) (dvd (d2) (d2)) (dvd (d2) (add x1 (suc (d1)))))
                (dvdid ((d2)))
                (:conv (im (dvd (d2) x1) (iff (dvd (d2) (d2)) (dvd (d2) (add x1 (suc (d1))))))
                  (im
                    (dvd (d2) x1)
                    (iff
                      (dvd (d2) (d2))
                      (dvd
                        (d2)
                        (add
                          x1
                          (:sym (:unfold d2 () ()
                            (suc (d1))))))))
                  (dvdadd1 (x1 (d2) (d2)))))))))
      (:conv (im (dvd (d2) (suc x1)) (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))
        (im
          (dvd (d2) (suc x1))
          (:sym (:unfold or ((dvd (d2) (suc x1)) (dvd (d2) (suc (suc x1)))) ()
            (im (not (dvd (d2) (suc x1))) (dvd (d2) (suc (suc x1)))))))
        (orl ((dvd (d2) (suc x1)) (dvd (d2) (suc (suc x1))))))))))))))))))

(local theorem modlteq ((a nat ()) (n nat ())) ()
  (im (lt a n) (eq (mod a n) a))
()
(anrd ((lt a n) (eq (div a n) (d0)) (eq (mod a n) a))
  (eqdivmod ((lt a n) (d0) a a n)
    (id ((lt a n)))
    (a1i ((lt a n) (eq (add (mul n (d0)) a) a))
      (ax_mp ((eq (add (d0) a) a) (eq (add (mul n (d0)) a) a))
        (ax_mp ((eq (add (mul n (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul n (d0)) a) a)))
          (eqtr ((add (mul n (d0)) a) (add (d0) a) a))
          (ax_mp ((eq (mul n (d0)) (d0)) (eq (add (mul n (d0)) a) (add (d0) a)))
            (addeq1 ((mul n (d0)) (d0) a))
            (mul0 (n))))
        (add01 (a)))))))

(local theorem modmodid ((a nat ()) (n nat ())) ()
  (eq (mod (mod a n) n) (mod a n))
()
(cases ((eq n (d0)) (eq (mod (mod a n) n) (mod a n)))
  (modeqd ((eq n (d0)) (mod a n) a n n)
    (syl6eq ((eq n (d0)) (mod a n) (mod a (d0)) a)
      (mod0 (a))
      (modeq2 (a n (d0))))
    (eqidd ((eq n (d0)) n)))
  (syl ((not (eq n (d0))) (lt (mod a n) n) (eq (mod (mod a n) n) (mod a n)))
    (modlteq ((mod a n) n))
    (:conv (im (not (eq n (d0))) (lt (mod a n) n))
      (im
        (:sym (:unfold ne (n (d0)) ()
          (not (eq n (d0)))))
        (lt (mod a n) n))
      (modlt (a n))))))

(local theorem dvdsubmod ((a nat ()) (n nat ())) ()
  (dvd n (sub a (mod a n)))
()
(ax_mp ((eq (mul n (div a n)) (sub a (mod a n))) (dvd n (sub a (mod a n))))
  (idvd2 (n (sub a (mod a n)) (div a n)))
  (ax_mp ((eq (sub a (mod a n)) (mul n (div a n))) (eq (mul n (div a n)) (sub a (mod a n))))
    (eqcom ((sub a (mod a n)) (mul n (div a n))))
    (ax_mp ((eq (add (mul n (div a n)) (mod a n)) a) (eq (sub a (mod a n)) (mul n (div a n))))
      (eqsub1 ((mul n (div a n)) (mod a n) a))
      (divmod (a n))))))

(local theorem div2lt ((n nat ())) ()
  (im (lt (d0) n) (lt (div n (d2)) n))
()
(sylibr ((lt (d0) n) (lt n (mul (d2) n)) (lt (div n (d2)) n))
  (ax_mp ((ne (d2) (d0)) (iff (lt (div n (d2)) n) (lt n (mul (d2) n))))
    (ltdivmul1 (n (d2) n))
    (d2ne0 ()))
  (sylib ((lt (d0) n) (lt (mul (d1) n) (mul (d2) n)) (lt n (mul (d2) n)))
    (ax_mp ((eq (mul (d1) n) n) (iff (lt (mul (d1) n) (mul (d2) n)) (lt n (mul (d2) n))))
      (lteq1 ((mul (d1) n) n (mul (d2) n)))
      (mul11 (n)))
    (mpbii ((lt (d0) n) (lt (d1) (d2)) (lt (mul (d1) n) (mul (d2) n)))
      (d1lt2 ())
      (ltmul1 ((d1) (d2) n))))))

(local theorem boolmod2 ((n nat ())) ()
  (bool (mod n (d2)))
()
(ax_mp ((ne (d2) (d0)) (bool (mod n (d2))))
  (:conv (im (ne (d2) (d0)) (bool (mod n (d2))))
    (im
      (ne (d2) (d0))
      (:unfold bool ((mod n (d2))) ()
        (lt (mod n (d2)) (d2))))
    (modlt (n (d2))))
  (d2ne0 ())))

(local def eqm ((n nat ()) (a nat ()) (b nat ())) (wff ())
()
(eq (mod a n) (mod b n)))

(local theorem eqmeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_nh (im _G (eq _n1 _n2)))
   (_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (iff (eqm _n1 _a1 _b1) (eqm _n2 _a2 _b2)))
()
(:conv (im _G (iff (eqm _n1 _a1 _b1) (eqm _n2 _a2 _b2)))
  (im
    _G
    (iff
      (:unfold eqm (_n1 _a1 _b1) ()
        (eq (mod _a1 _n1) (mod _b1 _n1)))
      (:unfold eqm (_n2 _a2 _b2) ()
        (eq (mod _a2 _n2) (mod _b2 _n2)))))
  (eqeqd (_G (mod _a1 _n1) (mod _a2 _n2) (mod _b1 _n1) (mod _b2 _n2))
    (modeqd (_G _a1 _a2 _n1 _n2)
      _ah
      _nh)
    (modeqd (_G _b1 _b2 _n1 _n2)
      _bh
      _nh))))

(local theorem eqmeq ((_n1 nat ()) (_n2 nat ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _n1 _n2) (im (eq _a1 _a2) (im (eq _b1 _b2) (iff (eqm _n1 _a1 _b1) (eqm _n2 _a2 _b2)))))
()
(exp ((eq _n1 _n2) (eq _a1 _a2) (im (eq _b1 _b2) (iff (eqm _n1 _a1 _b1) (eqm _n2 _a2 _b2))))
  (exp ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2) (iff (eqm _n1 _a1 _b1) (eqm _n2 _a2 _b2)))
    (eqmeqd ((an (an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2)) _n1 _n2 _a1 _a2 _b1 _b2)
      (anwl ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2) (eq _n1 _n2))
        (anl ((eq _n1 _n2) (eq _a1 _a2))))
      (anwl ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2) (eq _a1 _a2))
        (anr ((eq _n1 _n2) (eq _a1 _a2))))
      (anr ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2)))))))

(local theorem eqmeq1d ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (a nat ()) (b nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (iff (eqm _n1 a b) (eqm _n2 a b)))
()
(eqmeqd (_G _n1 _n2 a a b b)
  _h
  (eqidd (_G a))
  (eqidd (_G b))))

(local theorem eqmeq1 ((_n1 nat ()) (_n2 nat ()) (a nat ()) (b nat ())) ()
  (im (eq _n1 _n2) (iff (eqm _n1 a b) (eqm _n2 a b)))
()
(eqmeq1d ((eq _n1 _n2) _n1 _n2 a b)
  (id ((eq _n1 _n2)))))

(local theorem eqmeq2d ((_G wff ()) (n nat ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (eqm n _a1 b) (eqm n _a2 b)))
()
(eqmeqd (_G n n _a1 _a2 b b)
  (eqidd (_G n))
  _h
  (eqidd (_G b))))

(local theorem eqmeq2 ((n nat ()) (_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (iff (eqm n _a1 b) (eqm n _a2 b)))
()
(eqmeq2d ((eq _a1 _a2) n _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem eqmeq3d ((_G wff ()) (n nat ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (iff (eqm n a _b1) (eqm n a _b2)))
()
(eqmeqd (_G n n a a _b1 _b2)
  (eqidd (_G n))
  (eqidd (_G a))
  _h))

(local theorem eqmeq3 ((n nat ()) (a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (iff (eqm n a _b1) (eqm n a _b2)))
()
(eqmeq3d ((eq _b1 _b2) n a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem eqmid ((a nat ()) (n nat ())) ()
  (eqm n a a)
()
(:conv (eqm n a a)
  (:unfold eqm (n a a) ()
    (eq (mod a n) (mod a n)))
  (eqid ((mod a n)))))

(local theorem eqmtr ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (im (eqm n a b) (im (eqm n b c) (eqm n a c)))
()
(:conv (im (eqm n a b) (im (eqm n b c) (eqm n a c)))
  (im
    (:unfold eqm (n a b) ()
      (eq (mod a n) (mod b n)))
    (im
      (:unfold eqm (n b c) ()
        (eq (mod b n) (mod c n)))
      (:unfold eqm (n a c) ()
        (eq (mod a n) (mod c n)))))
  (eqtr ((mod a n) (mod b n) (mod c n)))))

(local theorem eqmcom ((a nat ()) (b nat ()) (n nat ())) ()
  (im (eqm n a b) (eqm n b a))
()
(:conv (im (eqm n a b) (eqm n b a))
  (im
    (:unfold eqm (n a b) ()
      (eq (mod a n) (mod b n)))
    (:unfold eqm (n b a) ()
      (eq (mod b n) (mod a n))))
  (eqcom ((mod a n) (mod b n)))))

(local theorem eqmcomb ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (eqm n a b) (eqm n b a))
()
(ibii ((eqm n a b) (eqm n b a))
  (eqmcom (a b n))
  (eqmcom (b a n))))

(local theorem eqeqm ((a nat ()) (b nat ()) (n nat ())) ()
  (im (eq a b) (eqm n a b))
()
(mpbii ((eq a b) (eqm n a a) (eqm n a b))
  (eqmid (a n))
  (eqmeq3 (n a a b))))

(local theorem eqeqmd ((G wff ()) (a nat ()) (b nat ()) (n nat ()))
  ((h (im G (eq a b))))
  (im G (eqm n a b))
()
(syl (G (eq a b) (eqm n a b))
  (eqeqm (a b n))
  h))

(local theorem eqmeq23d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (iff (eqm n a c) (eqm n b d)))
()
(eqmeqd (G n n a b c d)
  (eqidd (G n))
  h1
  h2))

(local theorem eqmeqm23d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (eqm n a b)))
   (h2 (im G (eqm n c d))))
  (im G (iff (eqm n a c) (eqm n b d)))
()
(ibida (G (eqm n a c) (eqm n b d))
  (sylc ((an G (eqm n a c)) (eqm n b a) (eqm n a d) (eqm n b d))
    (eqmtr (b a d n))
    (syl ((an G (eqm n a c)) (eqm n a b) (eqm n b a))
      (eqmcom (a b n))
      (anwl (G (eqm n a c) (eqm n a b))
        h1))
    (sylc ((an G (eqm n a c)) (eqm n a c) (eqm n c d) (eqm n a d))
      (eqmtr (a c d n))
      (anr (G (eqm n a c)))
      (anwl (G (eqm n a c) (eqm n c d))
        h2)))
  (sylc ((an G (eqm n b d)) (eqm n a b) (eqm n b c) (eqm n a c))
    (eqmtr (a b c n))
    (anwl (G (eqm n b d) (eqm n a b))
      h1)
    (sylc ((an G (eqm n b d)) (eqm n b d) (eqm n d c) (eqm n b c))
      (eqmtr (b d c n))
      (anr (G (eqm n b d)))
      (syl ((an G (eqm n b d)) (eqm n c d) (eqm n d c))
        (eqmcom (c d n))
        (anwl (G (eqm n b d) (eqm n c d))
          h2))))))

(local theorem eqmmod ((a nat ()) (n nat ())) ()
  (eqm n (mod a n) a)
()
(:conv (eqm n (mod a n) a)
  (:unfold eqm (n (mod a n) a) ()
    (eq (mod (mod a n) n) (mod a n)))
  (modmodid (a n))))

(local theorem eqm03 ((a nat ()) (n nat ())) ()
  (iff (eqm n a (d0)) (dvd n a))
()
(ax_mp ((iff (eq (mod a n) (d0)) (dvd n a)) (iff (eqm n a (d0)) (dvd n a)))
  (ax_mp ((iff (eqm n a (d0)) (eq (mod a n) (d0))) (im (iff (eq (mod a n) (d0)) (dvd n a)) (iff (eqm n a (d0)) (dvd n a))))
    (bitr ((eqm n a (d0)) (eq (mod a n) (d0)) (dvd n a)))
    (ax_mp ((eq (mod (d0) n) (d0)) (iff (eqm n a (d0)) (eq (mod a n) (d0))))
      (:conv (im (eq (mod (d0) n) (d0)) (iff (eqm n a (d0)) (eq (mod a n) (d0))))
        (im
          (eq (mod (d0) n) (d0))
          (iff
            (:unfold eqm (n a (d0)) ()
              (eq (mod a n) (mod (d0) n)))
            (eq (mod a n) (d0))))
        (eqeq2 ((mod a n) (mod (d0) n) (d0))))
      (mod01 (n))))
  (modeq0 (a n))))

(local theorem eqmid0 ((n nat ())) ()
  (eqm n n (d0))
()
(mpbir ((dvd n n) (eqm n n (d0)))
  (eqm03 (n n))
  (dvdid (n))))

(local theorem eqmdvdsub ((a nat ()) (b nat ()) (n nat ())) ()
  (im (le a b) (iff (eqm n a b) (dvd n (sub b a))))
()
(:let H1 (modle1 (a n))
(:let H2 (npcan (b a))
(:let H3 (syl ((le a b) (eq (add (add (sub b a) (sub a (mod a n))) (mod a n)) b) (eq (sub b (mod a n)) (add (sub b a) (sub a (mod a n)))))
  (eqsub1 ((add (sub b a) (sub a (mod a n))) (mod a n) b))
  (syl5eq ((le a b) (add (add (sub b a) (sub a (mod a n))) (mod a n)) (add (sub b a) (add (sub a (mod a n)) (mod a n))) b)
    (addass ((sub b a) (sub a (mod a n)) (mod a n)))
    (syl5eq ((le a b) (add (sub b a) (add (sub a (mod a n)) (mod a n))) (add (sub b a) a) b)
      (ax_mp ((eq (add (sub a (mod a n)) (mod a n)) a) (eq (add (sub b a) (add (sub a (mod a n)) (mod a n))) (add (sub b a) a)))
        (addeq2 ((sub b a) (add (sub a (mod a n)) (mod a n)) a))
        (ax_mp ((le (mod a n) a) (eq (add (sub a (mod a n)) (mod a n)) a))
          (npcan (a (mod a n)))
          H1))
      H2)))
(ibida ((le a b) (eqm n a b) (dvd n (sub b a)))
  (sylibr ((an (le a b) (eqm n a b)) (dvd n (add (sub b a) (sub a (mod a n)))) (dvd n (sub b a)))
    (ax_mp ((dvd n (sub a (mod a n))) (iff (dvd n (sub b a)) (dvd n (add (sub b a) (sub a (mod a n))))))
      (dvdadd2 ((sub a (mod a n)) (sub b a) n))
      (dvdsubmod (a n)))
    (mpbiri ((an (le a b) (eqm n a b)) (dvd n (sub b (mod b n))) (dvd n (add (sub b a) (sub a (mod a n)))))
      (dvdsubmod (b n))
      (dvdeqd ((an (le a b) (eqm n a b)) n n (add (sub b a) (sub a (mod a n))) (sub b (mod b n)))
        (eqidd ((an (le a b) (eqm n a b)) n))
        (eqtr3d ((an (le a b) (eqm n a b)) (add (sub b a) (sub a (mod a n))) (sub b (mod a n)) (sub b (mod b n)))
          (anwl ((le a b) (eqm n a b) (eq (sub b (mod a n)) (add (sub b a) (sub a (mod a n)))))
            H3)
          (anwr ((le a b) (eqm n a b) (eq (sub b (mod a n)) (sub b (mod b n))))
            (:conv (im (eqm n a b) (eq (sub b (mod a n)) (sub b (mod b n))))
              (im
                (:unfold eqm (n a b) ()
                  (eq (mod a n) (mod b n)))
                (eq (sub b (mod a n)) (sub b (mod b n))))
              (subeq2 (b (mod a n) (mod b n)))))))))
  (casesda ((an (le a b) (dvd n (sub b a))) (eq n (d0)) (eqm n a b))
    (:conv (im (an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (eqm n a b))
      (im
        (an (an (le a b) (dvd n (sub b a))) (eq n (d0)))
        (:unfold eqm (n a b) ()
          (eq (mod a n) (mod b n))))
      (modeq1d ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) a b n)
        (eqtr3d ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) a (add (sub b a) a) b)
          (syl6eq ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (add (sub b a) a) (add (d0) a) a)
            (add01 (a))
            (addeq1d ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (sub b a) (d0) a)
              (sylib ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (dvd (d0) (sub b a)) (eq (sub b a) (d0)))
                (dvd01 ((sub b a)))
                (mpbid ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (dvd n (sub b a)) (dvd (d0) (sub b a)))
                  (anwr ((an (le a b) (dvd n (sub b a))) (eq n (d0)) (iff (dvd n (sub b a)) (dvd (d0) (sub b a))))
                    (dvdeq1 (n (d0) (sub b a))))
                  (anlr ((le a b) (dvd n (sub b a)) (eq n (d0))))))))
          (anwll ((le a b) (dvd n (sub b a)) (eq n (d0)) (eq (add (sub b a) a) b))
            H2))))
    (:conv (im (an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (eqm n a b))
      (im
        (an (an (le a b) (dvd n (sub b a))) (not (eq n (d0))))
        (:unfold eqm (n a b) ()
          (eq (mod a n) (mod b n))))
      (eqcomd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mod b n) (mod a n))
        (anrd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (eq (div b n) (add (div (sub b a) n) (div a n))) (eq (mod b n) (mod a n)))
          (eqdivmod ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (add (div (sub b a) n) (div a n)) (mod a n) b n)
            (anwr ((an (le a b) (dvd n (sub b a))) (not (eq n (d0))) (lt (mod a n) n))
              (:conv (im (not (eq n (d0))) (lt (mod a n) n))
                (im
                  (:sym (:unfold ne (n (d0)) ()
                    (not (eq n (d0)))))
                  (lt (mod a n) n))
                (modlt (a n))))
            (eqtrd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (add (mul n (add (div (sub b a) n) (div a n))) (mod a n)) (add (sub b (mod a n)) (mod a n)) b)
              (addeq1d ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mul n (add (div (sub b a) n) (div a n))) (sub b (mod a n)) (mod a n))
                (syl5eq ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mul n (add (div (sub b a) n) (div a n))) (add (mul n (div (sub b a) n)) (mul n (div a n))) (sub b (mod a n)))
                  (muladd (n (div (sub b a) n) (div a n)))
                  (eqtr4d ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (add (mul n (div (sub b a) n)) (mul n (div a n))) (add (sub b a) (sub a (mod a n))) (sub b (mod a n)))
                    (addeqd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mul n (div (sub b a) n)) (sub b a) (mul n (div a n)) (sub a (mod a n)))
                      (syl ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (dvd n (sub b a)) (eq (mul n (div (sub b a) n)) (sub b a)))
                        (muldiv3 ((sub b a) n))
                        (anlr ((le a b) (dvd n (sub b a)) (not (eq n (d0))))))
                      (a1i ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (eq (mul n (div a n)) (sub a (mod a n))))
                        (ax_mp ((eq (sub a (mod a n)) (mul n (div a n))) (eq (mul n (div a n)) (sub a (mod a n))))
                          (eqcom ((sub a (mod a n)) (mul n (div a n))))
                          (ax_mp ((eq (add (mul n (div a n)) (mod a n)) a) (eq (sub a (mod a n)) (mul n (div a n))))
                            (eqsub1 ((mul n (div a n)) (mod a n) a))
                            (divmod (a n))))))
                    (anwll ((le a b) (dvd n (sub b a)) (not (eq n (d0))) (eq (sub b (mod a n)) (add (sub b a) (sub a (mod a n)))))
                      H3))))
              (syl ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (le (mod a n) b) (eq (add (sub b (mod a n)) (mod a n)) b))
                (npcan (b (mod a n)))
                (letrd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mod a n) a b)
                  (a1i ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (le (mod a n) a))
                    H1)
                  (anll ((le a b) (dvd n (sub b a)) (not (eq n (d0))))))))))))))))))

(local theorem eqmaddlem ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (im (le a b) (iff (eqm n (add a c) (add b c)) (eqm n a b)))
()
(bitr4d ((le a b) (eqm n (add a c) (add b c)) (dvd n (sub (add b c) (add a c))) (eqm n a b))
  (sylbi ((le a b) (le (add a c) (add b c)) (iff (eqm n (add a c) (add b c)) (dvd n (sub (add b c) (add a c)))))
    (leadd1 (a b c))
    (eqmdvdsub ((add a c) (add b c) n)))
  (syl6bbr ((le a b) (eqm n a b) (dvd n (sub b a)) (dvd n (sub (add b c) (add a c))))
    (ax_mp ((eq (sub (add b c) (add a c)) (sub b a)) (iff (dvd n (sub (add b c) (add a c))) (dvd n (sub b a))))
      (dvdeq2 (n (sub (add b c) (add a c)) (sub b a)))
      (pnpcan2 (b a c)))
    (eqmdvdsub (a b n)))))

(local theorem eqmadd1 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (eqm n (add a c) (add b c)) (eqm n a b))
()
(ax_mp ((or (le a b) (le b a)) (iff (eqm n (add a c) (add b c)) (eqm n a b)))
  (ax_mp ((im (le b a) (iff (eqm n (add a c) (add b c)) (eqm n a b))) (im (or (le a b) (le b a)) (iff (eqm n (add a c) (add b c)) (eqm n a b))))
    (ax_mp ((im (le a b) (iff (eqm n (add a c) (add b c)) (eqm n a b))) (im (im (le b a) (iff (eqm n (add a c) (add b c)) (eqm n a b))) (im (or (le a b) (le b a)) (iff (eqm n (add a c) (add b c)) (eqm n a b)))))
      (eor ((le a b) (le b a) (iff (eqm n (add a c) (add b c)) (eqm n a b))))
      (eqmaddlem (a b c n)))
    (syl5bb ((le b a) (eqm n (add a c) (add b c)) (eqm n (add b c) (add a c)) (eqm n a b))
      (eqmcomb ((add a c) (add b c) n))
      (syl6bb ((le b a) (eqm n (add b c) (add a c)) (eqm n b a) (eqm n a b))
        (eqmcomb (b a n))
        (eqmaddlem (b a c n)))))
  (leorle (a b))))

(local theorem eqmadd2 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (eqm n (add a b) (add a c)) (eqm n b c))
()
(ax_mp ((iff (eqm n (add b a) (add c a)) (eqm n b c)) (iff (eqm n (add a b) (add a c)) (eqm n b c)))
  (ax_mp ((iff (eqm n (add a b) (add a c)) (eqm n (add b a) (add c a))) (im (iff (eqm n (add b a) (add c a)) (eqm n b c)) (iff (eqm n (add a b) (add a c)) (eqm n b c))))
    (bitr ((eqm n (add a b) (add a c)) (eqm n (add b a) (add c a)) (eqm n b c)))
    (ax_mp ((eq (add a c) (add c a)) (iff (eqm n (add a b) (add a c)) (eqm n (add b a) (add c a))))
      (ax_mp ((eq (add a b) (add b a)) (im (eq (add a c) (add c a)) (iff (eqm n (add a b) (add a c)) (eqm n (add b a) (add c a)))))
        (ax_mp ((eq n n) (im (eq (add a b) (add b a)) (im (eq (add a c) (add c a)) (iff (eqm n (add a b) (add a c)) (eqm n (add b a) (add c a))))))
          (eqmeq (n n (add a b) (add b a) (add a c) (add c a)))
          (eqid (n)))
        (addcom (a b)))
      (addcom (a c))))
  (eqmadd1 (b c a n))))

(local theorem eqmsuc ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (eqm n (suc a) (suc b)) (eqm n a b))
()
(ax_mp ((iff (eqm n (add a (d1)) (add b (d1))) (eqm n a b)) (iff (eqm n (suc a) (suc b)) (eqm n a b)))
  (ax_mp ((iff (eqm n (add a (d1)) (add b (d1))) (eqm n (suc a) (suc b))) (im (iff (eqm n (add a (d1)) (add b (d1))) (eqm n a b)) (iff (eqm n (suc a) (suc b)) (eqm n a b))))
    (bitr3 ((eqm n (suc a) (suc b)) (eqm n (add a (d1)) (add b (d1))) (eqm n a b)))
    (ax_mp ((eq (add b (d1)) (suc b)) (iff (eqm n (add a (d1)) (add b (d1))) (eqm n (suc a) (suc b))))
      (ax_mp ((eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (iff (eqm n (add a (d1)) (add b (d1))) (eqm n (suc a) (suc b)))))
        (ax_mp ((eq n n) (im (eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (iff (eqm n (add a (d1)) (add b (d1))) (eqm n (suc a) (suc b))))))
          (eqmeq (n n (add a (d1)) (suc a) (add b (d1)) (suc b)))
          (eqid (n)))
        (add12 (a)))
      (add12 (b))))
  (eqmadd1 (a b (d1) n))))

(local theorem eqmadd1d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h (im G (eqm n a b))))
  (im G (eqm n (add a c) (add b c)))
()
(sylibr (G (eqm n a b) (eqm n (add a c) (add b c)))
  (eqmadd1 (a b c n))
  h))

(local theorem eqmadd2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h (im G (eqm n b c))))
  (im G (eqm n (add a b) (add a c)))
()
(sylibr (G (eqm n b c) (eqm n (add a b) (add a c)))
  (eqmadd2 (a b c n))
  h))

(local theorem eqmaddd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (eqm n a b)))
   (h2 (im G (eqm n c d))))
  (im G (eqm n (add a c) (add b d)))
()
(sylc (G (eqm n (add a c) (add b c)) (eqm n (add b c) (add b d)) (eqm n (add a c) (add b d)))
  (eqmtr ((add a c) (add b c) (add b d) n))
  (eqmadd1d (G a b c n)
    h1)
  (eqmadd2d (G b c d n)
    h2)))

(local theorem eqmdvd ((a nat ()) (b nat ()) (n nat ())) ()
  (im (eqm n a b) (iff (dvd n a) (dvd n b)))
()
(bitr3g ((eqm n a b) (eqm n a (d0)) (eqm n b (d0)) (dvd n a) (dvd n b))
  (eqm03 (a n))
  (eqm03 (b n))
  (:conv (im (eqm n a b) (iff (eqm n a (d0)) (eqm n b (d0))))
    (im
      (:unfold eqm (n a b) ()
        (eq (mod a n) (mod b n)))
      (iff
        (:unfold eqm (n a (d0)) ()
          (eq (mod a n) (mod (d0) n)))
        (:unfold eqm (n b (d0)) ()
          (eq (mod b n) (mod (d0) n)))))
    (eqeq1 ((mod a n) (mod b n) (mod (d0) n))))))

(local theorem eqmaddn ((a nat ()) (n nat ())) ()
  (eqm n (add a n) a)
()
(mpbi ((eqm n (add a n) (add a (d0))) (eqm n (add a n) a))
  (ax_mp ((eq (add a (d0)) a) (iff (eqm n (add a n) (add a (d0))) (eqm n (add a n) a)))
    (eqmeq3 (n (add a n) (add a (d0)) a))
    (add0 (a)))
  (mpbir ((eqm n n (d0)) (eqm n (add a n) (add a (d0))))
    (eqmadd2 (a n (d0) n))
    (eqmid0 (n)))))

(local theorem dvdeqm ((G wff ()) (a nat ()) (b nat ()) (m nat ()) (n nat ()))
  ((h1 (im G (dvd m n)))
   (h2 (im G (eqm n a b))))
  (im G (eqm m a b))
()
(mpi (G (or (le a b) (le b a)) (eqm m a b))
  (leorle (a b))
  (eorda (G (le a b) (le b a) (eqm m a b))
    (mpbird ((an G (le a b)) (dvd m (sub b a)) (eqm m a b))
      (anwr (G (le a b) (iff (eqm m a b) (dvd m (sub b a))))
        (eqmdvdsub (a b m)))
      (sylc ((an G (le a b)) (dvd m n) (dvd n (sub b a)) (dvd m (sub b a)))
        (dvdtr (m n (sub b a)))
        (anwl (G (le a b) (dvd m n))
          h1)
        (mpbid ((an G (le a b)) (eqm n a b) (dvd n (sub b a)))
          (anwr (G (le a b) (iff (eqm n a b) (dvd n (sub b a))))
            (eqmdvdsub (a b n)))
          (anwl (G (le a b) (eqm n a b))
            h2))))
    (syl ((an G (le b a)) (eqm m b a) (eqm m a b))
      (eqmcom (b a m))
      (mpbird ((an G (le b a)) (dvd m (sub a b)) (eqm m b a))
        (anwr (G (le b a) (iff (eqm m b a) (dvd m (sub a b))))
          (eqmdvdsub (b a m)))
        (sylc ((an G (le b a)) (dvd m n) (dvd n (sub a b)) (dvd m (sub a b)))
          (dvdtr (m n (sub a b)))
          (anwl (G (le b a) (dvd m n))
            h1)
          (mpbid ((an G (le b a)) (eqm n b a) (dvd n (sub a b)))
            (anwr (G (le b a) (iff (eqm n b a) (dvd n (sub a b))))
              (eqmdvdsub (b a n)))
            (anwl (G (le b a) (eqm n b a))
              (syl (G (eqm n a b) (eqm n b a))
                (eqmcom (a b n))
                h2)))))))))

(local theorem modmod ((a nat ()) (m nat ()) (n nat ())) ()
  (im (dvd m n) (eq (mod (mod a n) m) (mod a m)))
()
(:conv (im (dvd m n) (eq (mod (mod a n) m) (mod a m)))
  (im
    (dvd m n)
    (:sym (:unfold eqm (m (mod a n) a) ()
      (eq (mod (mod a n) m) (mod a m)))))
  (dvdeqm ((dvd m n) (mod a n) a m n)
    (id ((dvd m n)))
    (a1i ((dvd m n) (eqm n (mod a n) a))
      (eqmmod (a n))))))

(local theorem eqm11 ((a nat ()) (b nat ())) ()
  (eqm (d1) a b)
()
(ax_mp ((eq (mod b (d1)) (d0)) (eqm (d1) a b))
  (ax_mp ((eq (mod a (d1)) (d0)) (im (eq (mod b (d1)) (d0)) (eqm (d1) a b)))
    (:conv (im (eq (mod a (d1)) (d0)) (im (eq (mod b (d1)) (d0)) (eqm (d1) a b)))
      (im
        (eq (mod a (d1)) (d0))
        (im
          (eq (mod b (d1)) (d0))
          (:unfold eqm ((d1) a b) ()
            (eq (mod a (d1)) (mod b (d1))))))
      (eqtr4 ((mod a (d1)) (d0) (mod b (d1)))))
    (mod12 (a)))
  (mod12 (b))))

(local theorem eqm01 ((a nat ()) (b nat ())) ()
  (iff (eqm (d0) a b) (eq a b))
()
(ax_mp ((eq (mod b (d0)) b) (iff (eqm (d0) a b) (eq a b)))
  (ax_mp ((eq (mod a (d0)) a) (im (eq (mod b (d0)) b) (iff (eqm (d0) a b) (eq a b))))
    (:conv (im (eq (mod a (d0)) a) (im (eq (mod b (d0)) b) (iff (eqm (d0) a b) (eq a b))))
      (im
        (eq (mod a (d0)) a)
        (im
          (eq (mod b (d0)) b)
          (iff
            (:unfold eqm ((d0) a b) ()
              (eq (mod a (d0)) (mod b (d0))))
            (eq a b))))
      (eqeq ((mod a (d0)) a (mod b (d0)) b)))
    (mod0 (a)))
  (mod0 (b))))

(def b0 ((n nat ())) (nat ())
()
(add n n))

(local theorem b0eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (b0 _n1) (b0 _n2)))
()
(:conv (im _G (eq (b0 _n1) (b0 _n2)))
  (im
    _G
    (eq
      (:unfold b0 (_n1) ()
        (add _n1 _n1))
      (:unfold b0 (_n2) ()
        (add _n2 _n2))))
  (addeqd (_G _n1 _n2 _n1 _n2)
    _nh
    _nh)))

(local theorem b0eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (b0 _n1) (b0 _n2)))
()
(b0eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def b1 ((n nat ())) (nat ())
()
(suc (b0 n)))

(local theorem b1eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (b1 _n1) (b1 _n2)))
()
(:conv (im _G (eq (b1 _n1) (b1 _n2)))
  (im
    _G
    (eq
      (:unfold b1 (_n1) ()
        (suc (b0 _n1)))
      (:unfold b1 (_n2) ()
        (suc (b0 _n2)))))
  (suceqd (_G (b0 _n1) (b0 _n2))
    (b0eqd (_G _n1 _n2)
      _nh))))

(local theorem b1eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (b1 _n1) (b1 _n2)))
()
(b1eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def odd ((n nat ())) (wff ())
()
(eq (mod n (d2)) (d1)))

(local theorem oddeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (iff (odd _n1) (odd _n2)))
()
(:conv (im _G (iff (odd _n1) (odd _n2)))
  (im
    _G
    (iff
      (:unfold odd (_n1) ()
        (eq (mod _n1 (d2)) (d1)))
      (:unfold odd (_n2) ()
        (eq (mod _n2 (d2)) (d1)))))
  (eqeqd (_G (mod _n1 (d2)) (mod _n2 (d2)) (d1) (d1))
    (modeqd (_G _n1 _n2 (d2) (d2))
      _nh
      (eqidd (_G (d2))))
    (eqidd (_G (d1))))))

(local theorem oddeq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (iff (odd _n1) (odd _n2)))
()
(oddeqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem b00 () ()
  (eq (b0 (d0)) (d0))
()
(:conv (eq (b0 (d0)) (d0))
  (eq
    (:unfold b0 ((d0)) ()
      (add (d0) (d0)))
    (d0))
  (add0 ((d0)))))

(local theorem b10 () ()
  (eq (b1 (d0)) (d1))
()
(ax_mp ((eq (b0 (d0)) (d0)) (eq (b1 (d0)) (d1)))
  (:conv (im (eq (b0 (d0)) (d0)) (eq (b1 (d0)) (d1)))
    (im
      (eq (b0 (d0)) (d0))
      (eq
        (:unfold b1 ((d0)) ()
          (suc (b0 (d0))))
        (:unfold d1 () ()
          (suc (d0)))))
    (suceq ((b0 (d0)) (d0))))
  (b00 ())))

(local theorem b0mul21 ((n nat ())) ()
  (eq (mul (d2) n) (b0 n))
()
(:conv (eq (mul (d2) n) (b0 n))
  (eq
    (mul (d2) n)
    (:unfold b0 (n) ()
      (add n n)))
  (mul21 (n))))

(local theorem b0mul22 ((n nat ())) ()
  (eq (mul n (d2)) (b0 n))
()
(:conv (eq (mul n (d2)) (b0 n))
  (eq
    (mul n (d2))
    (:unfold b0 (n) ()
      (add n n)))
  (mul22 (n))))

(local theorem b0ne0 ((n nat ())) ()
  (iff (ne (b0 n) (d0)) (ne n (d0)))
()
(ax_mp ((iff (ne (mul (d2) n) (d0)) (ne n (d0))) (iff (ne (b0 n) (d0)) (ne n (d0))))
  (ax_mp ((iff (ne (mul (d2) n) (d0)) (ne (b0 n) (d0))) (im (iff (ne (mul (d2) n) (d0)) (ne n (d0))) (iff (ne (b0 n) (d0)) (ne n (d0)))))
    (bitr3 ((ne (b0 n) (d0)) (ne (mul (d2) n) (d0)) (ne n (d0))))
    (ax_mp ((eq (mul (d2) n) (b0 n)) (iff (ne (mul (d2) n) (d0)) (ne (b0 n) (d0))))
      (neeq1 ((mul (d2) n) (b0 n) (d0)))
      (b0mul21 (n))))
  (ax_mp ((iff (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))) (iff (ne (mul (d2) n) (d0)) (ne n (d0))))
    (ax_mp ((iff (ne (mul (d2) n) (d0)) (an (ne (d2) (d0)) (ne n (d0)))) (im (iff (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))) (iff (ne (mul (d2) n) (d0)) (ne n (d0)))))
      (bitr ((ne (mul (d2) n) (d0)) (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))))
      (mulne0 ((d2) n)))
    (ax_mp ((ne (d2) (d0)) (iff (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))))
      (bian1 ((ne (d2) (d0)) (ne n (d0))))
      (d2ne0 ())))))

(local theorem b1ne0 ((n nat ())) ()
  (ne (b1 n) (d0))
()
(:conv (ne (b1 n) (d0))
  (ne
    (:unfold b1 (n) ()
      (suc (b0 n)))
    (d0))
  (peano1 ((b0 n)))))

(local theorem b1mul21 ((n nat ())) ()
  (eq (add (mul (d2) n) (d1)) (b1 n))
()
(ax_mp ((eq (add (b0 n) (d1)) (b1 n)) (eq (add (mul (d2) n) (d1)) (b1 n)))
  (ax_mp ((eq (add (mul (d2) n) (d1)) (add (b0 n) (d1))) (im (eq (add (b0 n) (d1)) (b1 n)) (eq (add (mul (d2) n) (d1)) (b1 n))))
    (eqtr ((add (mul (d2) n) (d1)) (add (b0 n) (d1)) (b1 n)))
    (ax_mp ((eq (mul (d2) n) (b0 n)) (eq (add (mul (d2) n) (d1)) (add (b0 n) (d1))))
      (addeq1 ((mul (d2) n) (b0 n) (d1)))
      (b0mul21 (n))))
  (:conv (eq (add (b0 n) (d1)) (b1 n))
    (eq
      (add (b0 n) (d1))
      (:unfold b1 (n) ()
        (suc (b0 n))))
    (add12 ((b0 n))))))

(local theorem b0dvd2 ((n nat ())) ()
  (dvd (d2) (b0 n))
()
(ax_mp ((eq (mul n (d2)) (b0 n)) (dvd (d2) (b0 n)))
  (idvd ((d2) (b0 n) n))
  (b0mul22 (n))))

(local theorem b1dvd2 ((n nat ())) ()
  (not (dvd (d2) (b1 n)))
()
(mpbi ((dvd (d2) (b0 n)) (not (dvd (d2) (b1 n))))
  (ax_mp ((iff (dvd (d2) (b1 n)) (not (dvd (d2) (b0 n)))) (iff (dvd (d2) (b0 n)) (not (dvd (d2) (b1 n)))))
    (con2b ((dvd (d2) (b1 n)) (dvd (d2) (b0 n))))
    (:conv (iff (dvd (d2) (b1 n)) (not (dvd (d2) (b0 n))))
      (iff
        (dvd
          (d2)
          (:unfold b1 (n) ()
            (suc (b0 n))))
        (not (dvd (d2) (b0 n))))
      (d2dvdS ((b0 n)))))
  (b0dvd2 (n))))

(local theorem dfodd2 ((n nat ())) ()
  (iff (odd n) (true (mod n (d2))))
()
(ax_mp ((iff (true (mod n (d2))) (odd n)) (iff (odd n) (true (mod n (d2)))))
  (bicom ((true (mod n (d2))) (odd n)))
  (ax_mp ((bool (mod n (d2))) (iff (true (mod n (d2))) (odd n)))
    (:conv (im (bool (mod n (d2))) (iff (true (mod n (d2))) (odd n)))
      (im
        (bool (mod n (d2)))
        (iff
          (true (mod n (d2)))
          (:unfold odd (n) ()
            (eq (mod n (d2)) (d1)))))
      (dftrue2 ((mod n (d2)))))
    (boolmod2 (n)))))

(local theorem odddvd ((n nat ())) ()
  (iff (odd n) (not (dvd (d2) n)))
()
(ax_mp ((iff (true (mod n (d2))) (not (dvd (d2) n))) (iff (odd n) (not (dvd (d2) n))))
  (ax_mp ((iff (odd n) (true (mod n (d2)))) (im (iff (true (mod n (d2))) (not (dvd (d2) n))) (iff (odd n) (not (dvd (d2) n)))))
    (bitr ((odd n) (true (mod n (d2))) (not (dvd (d2) n))))
    (dfodd2 (n)))
  (ax_mp ((iff (eq (mod n (d2)) (d0)) (dvd (d2) n)) (iff (true (mod n (d2))) (not (dvd (d2) n))))
    (:conv (im (iff (eq (mod n (d2)) (d0)) (dvd (d2) n)) (iff (true (mod n (d2))) (not (dvd (d2) n))))
      (im
        (iff (eq (mod n (d2)) (d0)) (dvd (d2) n))
        (iff
          (:unfold true ((mod n (d2))) ()
            (:unfold ne ((mod n (d2)) (d0)) ()
              (not (eq (mod n (d2)) (d0)))))
          (not (dvd (d2) n))))
      (noteq ((eq (mod n (d2)) (d0)) (dvd (d2) n))))
    (modeq0 (n (d2))))))

(local theorem boolodd ((n nat ())) ()
  (im (bool n) (iff (odd n) (true n)))
()
(syl5bb ((bool n) (odd n) (true (mod n (d2))) (true n))
  (dfodd2 (n))
  (trueeqd ((bool n) (mod n (d2)) n)
    (:conv (im (bool n) (eq (mod n (d2)) n))
      (im
        (:unfold bool (n) ()
          (lt n (d2)))
        (eq (mod n (d2)) n))
      (modlteq (n (d2)))))))

(local theorem b0odd ((n nat ())) ()
  (not (odd (b0 n)))
()
(mpbi ((dvd (d2) (b0 n)) (not (odd (b0 n))))
  (ax_mp ((iff (odd (b0 n)) (not (dvd (d2) (b0 n)))) (iff (dvd (d2) (b0 n)) (not (odd (b0 n)))))
    (con2b ((odd (b0 n)) (dvd (d2) (b0 n))))
    (odddvd ((b0 n))))
  (b0dvd2 (n))))

(local theorem b1odd ((n nat ())) ()
  (odd (b1 n))
()
(mpbir ((not (dvd (d2) (b1 n))) (odd (b1 n)))
  (odddvd ((b1 n)))
  (b1dvd2 (n))))

(local theorem oddnat ((p wff ())) ()
  (iff (odd (nat p)) p)
()
(ax_mp ((iff (true (nat p)) p) (iff (odd (nat p)) p))
  (ax_mp ((iff (odd (nat p)) (true (nat p))) (im (iff (true (nat p)) p) (iff (odd (nat p)) p)))
    (bitr ((odd (nat p)) (true (nat p)) p))
    (ax_mp ((bool (nat p)) (iff (odd (nat p)) (true (nat p))))
      (boolodd ((nat p)))
      (boolnat (p))))
  (truenat (p))))

(local theorem b0mod2 ((n nat ())) ()
  (eq (mod (b0 n) (d2)) (d0))
()
(mpbir ((dvd (d2) (b0 n)) (eq (mod (b0 n) (d2)) (d0)))
  (modeq0 ((b0 n) (d2)))
  (b0dvd2 (n))))

(local theorem b1mod2 ((n nat ())) ()
  (eq (mod (b1 n) (d2)) (d1))
()
(:conv (eq (mod (b1 n) (d2)) (d1))
  (:sym (:unfold odd ((b1 n)) ()
    (eq (mod (b1 n) (d2)) (d1))))
  (b1odd (n))))

(local theorem b0div2 ((n nat ())) ()
  (eq (div (b0 n) (d2)) n)
()
(ax_mp ((eq (div (mul (d2) n) (d2)) n) (eq (div (b0 n) (d2)) n))
  (ax_mp ((eq (div (mul (d2) n) (d2)) (div (b0 n) (d2))) (im (eq (div (mul (d2) n) (d2)) n) (eq (div (b0 n) (d2)) n)))
    (eqtr3 ((div (b0 n) (d2)) (div (mul (d2) n) (d2)) n))
    (ax_mp ((eq (mul (d2) n) (b0 n)) (eq (div (mul (d2) n) (d2)) (div (b0 n) (d2))))
      (diveq1 ((mul (d2) n) (b0 n) (d2)))
      (b0mul21 (n))))
  (ax_mp ((ne (d2) (d0)) (eq (div (mul (d2) n) (d2)) n))
    (muldiv2 (n (d2)))
    (d2ne0 ()))))

(local theorem b1div2 ((n nat ())) ()
  (eq (div (b1 n) (d2)) n)
()
(trud ((eq (div (b1 n) (d2)) n))
  (anld ((tru) (eq (div (b1 n) (d2)) n) (eq (mod (b1 n) (d2)) (d1)))
    (eqdivmod ((tru) n (d1) (b1 n) (d2))
      (a1i ((tru) (lt (d1) (d2)))
        (d1lt2 ()))
      (a1i ((tru) (eq (add (mul (d2) n) (d1)) (b1 n)))
        (b1mul21 (n)))))))

(local theorem b0can ((a nat ()) (b nat ())) ()
  (iff (eq (b0 a) (b0 b)) (eq a b))
()
(ibii ((eq (b0 a) (b0 b)) (eq a b))
  (sylib ((eq (b0 a) (b0 b)) (eq (div (b0 a) (d2)) (div (b0 b) (d2))) (eq a b))
    (ax_mp ((eq (div (b0 b) (d2)) b) (iff (eq (div (b0 a) (d2)) (div (b0 b) (d2))) (eq a b)))
      (ax_mp ((eq (div (b0 a) (d2)) a) (im (eq (div (b0 b) (d2)) b) (iff (eq (div (b0 a) (d2)) (div (b0 b) (d2))) (eq a b))))
        (eqeq ((div (b0 a) (d2)) a (div (b0 b) (d2)) b))
        (b0div2 (a)))
      (b0div2 (b)))
    (diveq1 ((b0 a) (b0 b) (d2))))
  (b0eq (a b))))

(local theorem b1can ((a nat ()) (b nat ())) ()
  (iff (eq (b1 a) (b1 b)) (eq a b))
()
(ibii ((eq (b1 a) (b1 b)) (eq a b))
  (sylib ((eq (b1 a) (b1 b)) (eq (div (b1 a) (d2)) (div (b1 b) (d2))) (eq a b))
    (ax_mp ((eq (div (b1 b) (d2)) b) (iff (eq (div (b1 a) (d2)) (div (b1 b) (d2))) (eq a b)))
      (ax_mp ((eq (div (b1 a) (d2)) a) (im (eq (div (b1 b) (d2)) b) (iff (eq (div (b1 a) (d2)) (div (b1 b) (d2))) (eq a b))))
        (eqeq ((div (b1 a) (d2)) a (div (b1 b) (d2)) b))
        (b1div2 (a)))
      (b1div2 (b)))
    (diveq1 ((b1 a) (b1 b) (d2))))
  (b1eq (a b))))

(local theorem b1neb0 ((a nat ()) (b nat ())) ()
  (ne (b1 a) (b0 b))
()
(:conv (ne (b1 a) (b0 b))
  (:unfold ne ((b1 a) (b0 b)) ()
    (not (eq (b1 a) (b0 b))))
  (mt ((odd (b0 b)) (eq (b1 a) (b0 b)))
    (mpbii ((eq (b1 a) (b0 b)) (odd (b1 a)) (odd (b0 b)))
      (b1odd (a))
      (oddeq ((b1 a) (b0 b))))
    (b0odd (b)))))

(local theorem b0neb1 ((a nat ()) (b nat ())) ()
  (ne (b0 a) (b1 b))
()
(ax_mp ((ne (b1 b) (b0 a)) (ne (b0 a) (b1 b)))
  (necom ((b1 b) (b0 a)))
  (b1neb0 (b a))))

(local theorem sucb0 ((a nat ())) ()
  (eq (suc (b0 a)) (b1 a))
()
(:conv (eq (suc (b0 a)) (b1 a))
  (eq
    (suc (b0 a))
    (:unfold b1 (a) ()
      (suc (b0 a))))
  (eqid ((suc (b0 a))))))

(local theorem sucb1 ((a nat ())) ()
  (eq (suc (b1 a)) (b0 (suc a)))
()
(ax_mp ((eq (suc (add a (suc a))) (suc (b1 a))) (eq (suc (b1 a)) (b0 (suc a))))
  (ax_mp ((eq (b0 (suc a)) (suc (add a (suc a)))) (im (eq (suc (add a (suc a))) (suc (b1 a))) (eq (suc (b1 a)) (b0 (suc a)))))
    (eqtr2 ((b0 (suc a)) (suc (add a (suc a))) (suc (b1 a))))
    (:conv (eq (b0 (suc a)) (suc (add a (suc a))))
      (eq
        (:unfold b0 ((suc a)) ()
          (add (suc a) (suc a)))
        (suc (add a (suc a))))
      (addS1 (a (suc a)))))
  (ax_mp ((eq (add a (suc a)) (b1 a)) (eq (suc (add a (suc a))) (suc (b1 a))))
    (suceq ((add a (suc a)) (b1 a)))
    (:conv (eq (add a (suc a)) (b1 a))
      (eq
        (add a (suc a))
        (:unfold b1 (a) ()
          (suc
            (:unfold b0 (a) ()
              (add a a)))))
      (addS (a a))))))

(local theorem addb00 ((a nat ()) (b nat ())) ()
  (eq (add (b0 a) (b0 b)) (b0 (add a b)))
()
(:conv (eq (add (b0 a) (b0 b)) (b0 (add a b)))
  (eq
    (add
      (:unfold b0 (a) ()
        (add a a))
      (:unfold b0 (b) ()
        (add b b)))
    (:unfold b0 ((add a b)) ()
      (add (add a b) (add a b))))
  (add4 (a a b b))))

(local theorem addb01 ((a nat ()) (b nat ())) ()
  (eq (add (b0 a) (b1 b)) (b1 (add a b)))
()
(ax_mp ((eq (suc (add (b0 a) (b0 b))) (b1 (add a b))) (eq (add (b0 a) (b1 b)) (b1 (add a b))))
  (ax_mp ((eq (add (b0 a) (b1 b)) (suc (add (b0 a) (b0 b)))) (im (eq (suc (add (b0 a) (b0 b))) (b1 (add a b))) (eq (add (b0 a) (b1 b)) (b1 (add a b)))))
    (eqtr ((add (b0 a) (b1 b)) (suc (add (b0 a) (b0 b))) (b1 (add a b))))
    (:conv (eq (add (b0 a) (b1 b)) (suc (add (b0 a) (b0 b))))
      (eq
        (add
          (b0 a)
          (:unfold b1 (b) ()
            (suc (b0 b))))
        (suc (add (b0 a) (b0 b))))
      (addS ((b0 a) (b0 b)))))
  (ax_mp ((eq (add (b0 a) (b0 b)) (b0 (add a b))) (eq (suc (add (b0 a) (b0 b))) (b1 (add a b))))
    (:conv (im (eq (add (b0 a) (b0 b)) (b0 (add a b))) (eq (suc (add (b0 a) (b0 b))) (b1 (add a b))))
      (im
        (eq (add (b0 a) (b0 b)) (b0 (add a b)))
        (eq
          (suc (add (b0 a) (b0 b)))
          (:unfold b1 ((add a b)) ()
            (suc (b0 (add a b))))))
      (suceq ((add (b0 a) (b0 b)) (b0 (add a b)))))
    (addb00 (a b)))))

(local theorem addb10 ((a nat ()) (b nat ())) ()
  (eq (add (b1 a) (b0 b)) (b1 (add a b)))
()
(ax_mp ((eq (add (b0 b) (b1 a)) (b1 (add a b))) (eq (add (b1 a) (b0 b)) (b1 (add a b))))
  (ax_mp ((eq (add (b1 a) (b0 b)) (add (b0 b) (b1 a))) (im (eq (add (b0 b) (b1 a)) (b1 (add a b))) (eq (add (b1 a) (b0 b)) (b1 (add a b)))))
    (eqtr ((add (b1 a) (b0 b)) (add (b0 b) (b1 a)) (b1 (add a b))))
    (addcom ((b1 a) (b0 b))))
  (ax_mp ((eq (b1 (add b a)) (b1 (add a b))) (eq (add (b0 b) (b1 a)) (b1 (add a b))))
    (ax_mp ((eq (add (b0 b) (b1 a)) (b1 (add b a))) (im (eq (b1 (add b a)) (b1 (add a b))) (eq (add (b0 b) (b1 a)) (b1 (add a b)))))
      (eqtr ((add (b0 b) (b1 a)) (b1 (add b a)) (b1 (add a b))))
      (addb01 (b a)))
    (ax_mp ((eq (add b a) (add a b)) (eq (b1 (add b a)) (b1 (add a b))))
      (b1eq ((add b a) (add a b)))
      (addcom (b a))))))

(local theorem addb11 ((a nat ()) (b nat ())) ()
  (eq (add (b1 a) (b1 b)) (b0 (suc (add a b))))
()
(ax_mp ((eq (suc (add (b1 a) (b0 b))) (b0 (suc (add a b)))) (eq (add (b1 a) (b1 b)) (b0 (suc (add a b)))))
  (ax_mp ((eq (add (b1 a) (b1 b)) (suc (add (b1 a) (b0 b)))) (im (eq (suc (add (b1 a) (b0 b))) (b0 (suc (add a b)))) (eq (add (b1 a) (b1 b)) (b0 (suc (add a b))))))
    (eqtr ((add (b1 a) (b1 b)) (suc (add (b1 a) (b0 b))) (b0 (suc (add a b)))))
    (:conv (eq (add (b1 a) (b1 b)) (suc (add (b1 a) (b0 b))))
      (eq
        (add
          (b1 a)
          (:unfold b1 (b) ()
            (suc (b0 b))))
        (suc (add (b1 a) (b0 b))))
      (addS ((b1 a) (b0 b)))))
  (ax_mp ((eq (suc (b1 (add a b))) (b0 (suc (add a b)))) (eq (suc (add (b1 a) (b0 b))) (b0 (suc (add a b)))))
    (ax_mp ((eq (suc (add (b1 a) (b0 b))) (suc (b1 (add a b)))) (im (eq (suc (b1 (add a b))) (b0 (suc (add a b)))) (eq (suc (add (b1 a) (b0 b))) (b0 (suc (add a b))))))
      (eqtr ((suc (add (b1 a) (b0 b))) (suc (b1 (add a b))) (b0 (suc (add a b)))))
      (ax_mp ((eq (add (b1 a) (b0 b)) (b1 (add a b))) (eq (suc (add (b1 a) (b0 b))) (suc (b1 (add a b)))))
        (suceq ((add (b1 a) (b0 b)) (b1 (add a b))))
        (addb10 (a b))))
    (sucb1 ((add a b))))))

(local theorem b0le ((a nat ()) (b nat ())) ()
  (iff (le a b) (le (b0 a) (b0 b)))
()
(ax_mp ((iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))) (iff (le a b) (le (b0 a) (b0 b))))
  (ax_mp ((iff (le a b) (le (mul (d2) a) (mul (d2) b))) (im (iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))) (iff (le a b) (le (b0 a) (b0 b)))))
    (bitr ((le a b) (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))))
    (ax_mp ((lt (d0) (d2)) (iff (le a b) (le (mul (d2) a) (mul (d2) b))))
      (lemul2 ((d2) a b))
      (d0lt2 ())))
  (ax_mp ((eq (mul (d2) b) (b0 b)) (iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))))
    (ax_mp ((eq (mul (d2) a) (b0 a)) (im (eq (mul (d2) b) (b0 b)) (iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b)))))
      (leeq ((mul (d2) a) (b0 a) (mul (d2) b) (b0 b)))
      (b0mul21 (a)))
    (b0mul21 (b)))))

(local theorem b1le ((a nat ()) (b nat ())) ()
  (iff (le a b) (le (b1 a) (b1 b)))
()
(ax_mp ((iff (le (b0 a) (b0 b)) (le (b1 a) (b1 b))) (iff (le a b) (le (b1 a) (b1 b))))
  (ax_mp ((iff (le a b) (le (b0 a) (b0 b))) (im (iff (le (b0 a) (b0 b)) (le (b1 a) (b1 b))) (iff (le a b) (le (b1 a) (b1 b)))))
    (bitr ((le a b) (le (b0 a) (b0 b)) (le (b1 a) (b1 b))))
    (b0le (a b)))
  (:conv (iff (le (b0 a) (b0 b)) (le (b1 a) (b1 b)))
    (iff
      (le (b0 a) (b0 b))
      (le
        (:unfold b1 (a) ()
          (suc (b0 a)))
        (:unfold b1 (b) ()
          (suc (b0 b)))))
    (lesuc ((b0 a) (b0 b))))))

(local theorem b0lt ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (b0 a) (b0 b)))
()
(ax_mp ((iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))) (iff (lt a b) (lt (b0 a) (b0 b))))
  (ax_mp ((iff (lt a b) (lt (mul (d2) a) (mul (d2) b))) (im (iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))) (iff (lt a b) (lt (b0 a) (b0 b)))))
    (bitr ((lt a b) (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))))
    (ax_mp ((lt (d0) (d2)) (iff (lt a b) (lt (mul (d2) a) (mul (d2) b))))
      (ltmul2 ((d2) a b))
      (d0lt2 ())))
  (ax_mp ((eq (mul (d2) b) (b0 b)) (iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))))
    (ax_mp ((eq (mul (d2) a) (b0 a)) (im (eq (mul (d2) b) (b0 b)) (iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b)))))
      (lteq ((mul (d2) a) (b0 a) (mul (d2) b) (b0 b)))
      (b0mul21 (a)))
    (b0mul21 (b)))))

(local theorem b1lt ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (b1 a) (b1 b)))
()
(ax_mp ((iff (lt (b0 a) (b0 b)) (lt (b1 a) (b1 b))) (iff (lt a b) (lt (b1 a) (b1 b))))
  (ax_mp ((iff (lt a b) (lt (b0 a) (b0 b))) (im (iff (lt (b0 a) (b0 b)) (lt (b1 a) (b1 b))) (iff (lt a b) (lt (b1 a) (b1 b)))))
    (bitr ((lt a b) (lt (b0 a) (b0 b)) (lt (b1 a) (b1 b))))
    (b0lt (a b)))
  (:conv (iff (lt (b0 a) (b0 b)) (lt (b1 a) (b1 b)))
    (iff
      (lt (b0 a) (b0 b))
      (lt
        (:unfold b1 (a) ()
          (suc (b0 a)))
        (:unfold b1 (b) ()
          (suc (b0 b)))))
    (ltsuc ((b0 a) (b0 b))))))

(local theorem b0ltb1 ((a nat ()) (b nat ())) ()
  (iff (lt (b0 a) (b1 b)) (le a b))
()
(ax_mp ((iff (le a b) (lt (b0 a) (b1 b))) (iff (lt (b0 a) (b1 b)) (le a b)))
  (bicom ((le a b) (lt (b0 a) (b1 b))))
  (:conv (iff (le a b) (lt (b0 a) (b1 b)))
    (iff
      (le a b)
      (:unfold lt ((b0 a) (b1 b)) ()
        (le
          (:sym (:unfold b1 (a) ()
            (suc (b0 a))))
          (b1 b))))
    (b1le (a b)))))

(local theorem b1ltb0 ((a nat ()) (b nat ())) ()
  (iff (lt (b1 a) (b0 b)) (lt a b))
()
(ax_mp ((iff (lt (suc (b1 a)) (suc (b0 b))) (lt a b)) (iff (lt (b1 a) (b0 b)) (lt a b)))
  (ax_mp ((iff (lt (b1 a) (b0 b)) (lt (suc (b1 a)) (suc (b0 b)))) (im (iff (lt (suc (b1 a)) (suc (b0 b))) (lt a b)) (iff (lt (b1 a) (b0 b)) (lt a b))))
    (bitr ((lt (b1 a) (b0 b)) (lt (suc (b1 a)) (suc (b0 b))) (lt a b)))
    (ltsuc ((b1 a) (b0 b))))
  (ax_mp ((iff (lt (b0 (suc a)) (b1 b)) (lt a b)) (iff (lt (suc (b1 a)) (suc (b0 b))) (lt a b)))
    (ax_mp ((iff (lt (suc (b1 a)) (suc (b0 b))) (lt (b0 (suc a)) (b1 b))) (im (iff (lt (b0 (suc a)) (b1 b)) (lt a b)) (iff (lt (suc (b1 a)) (suc (b0 b))) (lt a b))))
      (bitr ((lt (suc (b1 a)) (suc (b0 b))) (lt (b0 (suc a)) (b1 b)) (lt a b)))
      (ax_mp ((eq (suc (b0 b)) (b1 b)) (iff (lt (suc (b1 a)) (suc (b0 b))) (lt (b0 (suc a)) (b1 b))))
        (ax_mp ((eq (suc (b1 a)) (b0 (suc a))) (im (eq (suc (b0 b)) (b1 b)) (iff (lt (suc (b1 a)) (suc (b0 b))) (lt (b0 (suc a)) (b1 b)))))
          (lteq ((suc (b1 a)) (b0 (suc a)) (suc (b0 b)) (b1 b)))
          (sucb1 (a)))
        (sucb0 (b))))
    (:conv (iff (lt (b0 (suc a)) (b1 b)) (lt a b))
      (iff
        (lt (b0 (suc a)) (b1 b))
        (:unfold lt (a b) ()
          (le (suc a) b)))
      (b0ltb1 ((suc a) b))))))

(local theorem b0leb1 ((a nat ()) (b nat ())) ()
  (iff (le (b0 a) (b1 b)) (le a b))
()
(ax_mp ((iff (le a b) (not (lt (b1 b) (b0 a)))) (iff (le (b0 a) (b1 b)) (le a b)))
  (ax_mp ((iff (le (b0 a) (b1 b)) (not (lt (b1 b) (b0 a)))) (im (iff (le a b) (not (lt (b1 b) (b0 a)))) (iff (le (b0 a) (b1 b)) (le a b))))
    (bitr4 ((le (b0 a) (b1 b)) (not (lt (b1 b) (b0 a))) (le a b)))
    (lenlt ((b0 a) (b1 b))))
  (ax_mp ((iff (not (lt (b1 b) (b0 a))) (not (lt b a))) (iff (le a b) (not (lt (b1 b) (b0 a)))))
    (ax_mp ((iff (le a b) (not (lt b a))) (im (iff (not (lt (b1 b) (b0 a))) (not (lt b a))) (iff (le a b) (not (lt (b1 b) (b0 a))))))
      (bitr4 ((le a b) (not (lt b a)) (not (lt (b1 b) (b0 a)))))
      (lenlt (a b)))
    (ax_mp ((iff (lt (b1 b) (b0 a)) (lt b a)) (iff (not (lt (b1 b) (b0 a))) (not (lt b a))))
      (noteq ((lt (b1 b) (b0 a)) (lt b a)))
      (b1ltb0 (b a))))))

(local theorem b1leb0 ((a nat ()) (b nat ())) ()
  (iff (le (b1 a) (b0 b)) (lt a b))
()
(ax_mp ((iff (lt a b) (not (lt (b0 b) (b1 a)))) (iff (le (b1 a) (b0 b)) (lt a b)))
  (ax_mp ((iff (le (b1 a) (b0 b)) (not (lt (b0 b) (b1 a)))) (im (iff (lt a b) (not (lt (b0 b) (b1 a)))) (iff (le (b1 a) (b0 b)) (lt a b))))
    (bitr4 ((le (b1 a) (b0 b)) (not (lt (b0 b) (b1 a))) (lt a b)))
    (lenlt ((b1 a) (b0 b))))
  (ax_mp ((iff (not (lt (b0 b) (b1 a))) (not (le b a))) (iff (lt a b) (not (lt (b0 b) (b1 a)))))
    (ax_mp ((iff (lt a b) (not (le b a))) (im (iff (not (lt (b0 b) (b1 a))) (not (le b a))) (iff (lt a b) (not (lt (b0 b) (b1 a))))))
      (bitr4 ((lt a b) (not (le b a)) (not (lt (b0 b) (b1 a)))))
      (ltnle (a b)))
    (ax_mp ((iff (lt (b0 b) (b1 a)) (le b a)) (iff (not (lt (b0 b) (b1 a))) (not (le b a))))
      (noteq ((lt (b0 b) (b1 a)) (le b a)))
      (b0ltb1 (b a))))))

(local theorem b0orb1 ((n nat ())) ()
  (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))))
()
(:conv (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))))
  (:unfold or ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) ()
    (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2))))))
  (rsyl ((not (eq n (b0 (div n (d2))))) (not (dvd (d2) n)) (eq n (b1 (div n (d2)))))
    (ax_mp ((im (dvd (d2) n) (eq n (b0 (div n (d2))))) (im (not (eq n (b0 (div n (d2))))) (not (dvd (d2) n))))
      (con3 ((dvd (d2) n) (eq n (b0 (div n (d2))))))
      (eqcomd ((dvd (d2) n) (b0 (div n (d2))) n)
        (syl5eqr ((dvd (d2) n) (b0 (div n (d2))) (mul (d2) (div n (d2))) n)
          (b0mul21 ((div n (d2))))
          (muldiv3 (n (d2))))))
    (sylbir ((not (dvd (d2) n)) (odd n) (eq n (b1 (div n (d2)))))
      (odddvd (n))
      (syl5eqr ((odd n) n (add (mul (d2) (div n (d2))) (mod n (d2))) (b1 (div n (d2))))
        (divmod (n (d2)))
        (syl6eq ((odd n) (add (mul (d2) (div n (d2))) (mod n (d2))) (add (mul (d2) (div n (d2))) (d1)) (b1 (div n (d2))))
          (b1mul21 ((div n (d2))))
          (:conv (im (odd n) (eq (add (mul (d2) (div n (d2))) (mod n (d2))) (add (mul (d2) (div n (d2))) (d1))))
            (im
              (:unfold odd (n) ()
                (eq (mod n (d2)) (d1)))
              (eq (add (mul (d2) (div n (d2))) (mod n (d2))) (add (mul (d2) (div n (d2))) (d1))))
            (addeq2 ((mul (d2) (div n (d2))) (mod n (d2)) (d1))))))))))

(local theorem b0leid ((n nat ())) ()
  (le n (b0 n))
()
(:conv (le n (b0 n))
  (le
    n
    (:unfold b0 (n) ()
      (add n n)))
  (leaddid1 (n n))))

(local theorem b1ltid ((n nat ())) ()
  (lt n (b1 n))
()
(mpbi ((le n (b0 n)) (lt n (b1 n)))
  (:conv (iff (le n (b0 n)) (lt n (b1 n)))
    (iff
      (le n (b0 n))
      (lt
        n
        (:unfold b1 (n) ()
          (suc (b0 n)))))
    (leltsuc (n (b0 n))))
  (b0leid (n))))

(local theorem b1leid ((n nat ())) ()
  (le n (b1 n))
()
(ax_mp ((lt n (b1 n)) (le n (b1 n)))
  (ltle (n (b1 n)))
  (b1ltid (n))))

(local theorem b0ltid ((n nat ())) ()
  (iff (ne n (d0)) (lt n (b0 n)))
()
(ax_mp ((iff (lt (d0) n) (lt n (b0 n))) (iff (ne n (d0)) (lt n (b0 n))))
  (ax_mp ((iff (lt (d0) n) (ne n (d0))) (im (iff (lt (d0) n) (lt n (b0 n))) (iff (ne n (d0)) (lt n (b0 n)))))
    (bitr3 ((ne n (d0)) (lt (d0) n) (lt n (b0 n))))
    (lt01 (n)))
  (ax_mp ((iff (lt (add n (d0)) (add n n)) (lt n (b0 n))) (iff (lt (d0) n) (lt n (b0 n))))
    (ax_mp ((iff (lt (d0) n) (lt (add n (d0)) (add n n))) (im (iff (lt (add n (d0)) (add n n)) (lt n (b0 n))) (iff (lt (d0) n) (lt n (b0 n)))))
      (bitr ((lt (d0) n) (lt (add n (d0)) (add n n)) (lt n (b0 n))))
      (ltadd2 (n (d0) n)))
    (ax_mp ((eq (add n (d0)) n) (iff (lt (add n (d0)) (add n n)) (lt n (b0 n))))
      (:conv (im (eq (add n (d0)) n) (iff (lt (add n (d0)) (add n n)) (lt n (b0 n))))
        (im
          (eq (add n (d0)) n)
          (iff
            (lt (add n (d0)) (add n n))
            (lt
              n
              (:unfold b0 (n) ()
                (add n n)))))
        (lteq1 ((add n (d0)) n (add n n))))
      (add0 (n))))))

(local theorem ltb0tr ((a nat ()) (b nat ()))
  ((h (lt a b)))
  (lt a (b0 b))
()
(ax_mp ((le b (b0 b)) (lt a (b0 b)))
  (ax_mp ((lt a b) (im (le b (b0 b)) (lt a (b0 b))))
    (ltletr (a b (b0 b)))
    h)
  (b0leid (b))))

(local theorem ltb1tr ((a nat ()) (b nat ()))
  ((h (le a b)))
  (lt a (b1 b))
()
(ax_mp ((lt b (b1 b)) (lt a (b1 b)))
  (ax_mp ((le a b) (im (lt b (b1 b)) (lt a (b1 b))))
    (lelttr (a b (b1 b)))
    h)
  (b1ltid (b))))

(local theorem leb0tr ((a nat ()) (b nat ()))
  ((h (le a b)))
  (le a (b0 b))
()
(ax_mp ((le b (b0 b)) (le a (b0 b)))
  (ax_mp ((le a b) (im (le b (b0 b)) (le a (b0 b))))
    (letr (a b (b0 b)))
    h)
  (b0leid (b))))

(local theorem leb1tr ((a nat ()) (b nat ()))
  ((h (le a b)))
  (le a (b1 b))
()
(ax_mp ((lt a (b1 b)) (le a (b1 b)))
  (ltle (a (b1 b)))
  (ltb1tr (a b)
    h)))

(local theorem eqb0 ((n nat ())) ()
  (iff (not (odd n)) (eq n (b0 (div n (d2)))))
()
(ibii ((not (odd n)) (eq n (b0 (div n (d2)))))
  (ax_mp ((im (not (eq n (b0 (div n (d2))))) (odd n)) (im (not (odd n)) (eq n (b0 (div n (d2))))))
    (con1 ((eq n (b0 (div n (d2)))) (odd n)))
    (rsyl ((not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))) (odd n))
      (:conv (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))
        (:sym (:unfold or ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) ()
          (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))))
        (b0orb1 (n)))
      (mpbiri ((eq n (b1 (div n (d2)))) (odd (b1 (div n (d2)))) (odd n))
        (b1odd ((div n (d2))))
        (oddeq (n (b1 (div n (d2))))))))
  (mpbiri ((eq n (b0 (div n (d2)))) (not (odd (b0 (div n (d2))))) (not (odd n)))
    (b0odd ((div n (d2))))
    (noteqd ((eq n (b0 (div n (d2)))) (odd n) (odd (b0 (div n (d2)))))
      (oddeq (n (b0 (div n (d2)))))))))

(local theorem eqb1 ((n nat ())) ()
  (iff (odd n) (eq n (b1 (div n (d2)))))
()
(ibii ((odd n) (eq n (b1 (div n (d2)))))
  (syl ((odd n) (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))
    (:conv (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))
      (:sym (:unfold or ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) ()
        (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))))
      (b0orb1 (n)))
    (ax_mp ((im (eq n (b0 (div n (d2)))) (not (odd n))) (im (odd n) (not (eq n (b0 (div n (d2)))))))
      (con2 ((eq n (b0 (div n (d2)))) (odd n)))
      (mpbiri ((eq n (b0 (div n (d2)))) (not (odd (b0 (div n (d2))))) (not (odd n)))
        (b0odd ((div n (d2))))
        (noteqd ((eq n (b0 (div n (d2)))) (odd n) (odd (b0 (div n (d2)))))
          (oddeq (n (b0 (div n (d2)))))))))
  (mpbiri ((eq n (b1 (div n (d2)))) (odd (b1 (div n (d2)))) (odd n))
    (b1odd ((div n (d2))))
    (oddeq (n (b1 (div n (d2))))))))

(local theorem splitb ((G wff ()) (a nat ()) (p wff ()))
  ((h0 (im G (im (eq a (b0 (div a (d2)))) p)))
   (h1 (im G (im (eq a (b1 (div a (d2)))) p))))
  (im G p)
()
(mpi (G (or (eq a (b0 (div a (d2)))) (eq a (b1 (div a (d2))))) p)
  (b0orb1 (a))
  (eord (G (eq a (b0 (div a (d2)))) (eq a (b1 (div a (d2)))) p)
    h0
    h1)))

(local theorem splitb0 ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (p wff ()))
  ((h (im G (im (eq a (b0 c)) p))))
  (im G (im (eq b c) (im (eq a (b0 b)) p)))
()
(exp (G (eq b c) (im (eq a (b0 b)) p))
  (exp ((an G (eq b c)) (eq a (b0 b)) p)
    (sylc ((an (an G (eq b c)) (eq a (b0 b))) G (eq a (b0 c)) p)
      h
      (anll (G (eq b c) (eq a (b0 b))))
      (eqtrd ((an (an G (eq b c)) (eq a (b0 b))) a (b0 b) (b0 c))
        (anr ((an G (eq b c)) (eq a (b0 b))))
        (b0eqd ((an (an G (eq b c)) (eq a (b0 b))) b c)
          (anlr (G (eq b c) (eq a (b0 b))))))))))

(local theorem splitb1 ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (p wff ()))
  ((h (im G (im (eq a (b1 c)) p))))
  (im G (im (eq b c) (im (eq a (b1 b)) p)))
()
(exp (G (eq b c) (im (eq a (b1 b)) p))
  (exp ((an G (eq b c)) (eq a (b1 b)) p)
    (sylc ((an (an G (eq b c)) (eq a (b1 b))) G (eq a (b1 c)) p)
      h
      (anll (G (eq b c) (eq a (b1 b))))
      (eqtrd ((an (an G (eq b c)) (eq a (b1 b))) a (b1 b) (b1 c))
        (anr ((an G (eq b c)) (eq a (b1 b))))
        (b1eqd ((an (an G (eq b c)) (eq a (b1 b))) b c)
          (anlr (G (eq b c) (eq a (b1 b))))))))))

(local theorem odd0 () ()
  (not (odd (d0)))
()
(mtbir ((eq (d0) (d1)) (odd (d0)))
  (ax_mp ((eq (mod (d0) (d2)) (d0)) (iff (odd (d0)) (eq (d0) (d1))))
    (:conv (im (eq (mod (d0) (d2)) (d0)) (iff (odd (d0)) (eq (d0) (d1))))
      (im
        (eq (mod (d0) (d2)) (d0))
        (iff
          (:unfold odd ((d0)) ()
            (eq (mod (d0) (d2)) (d1)))
          (eq (d0) (d1))))
      (eqeq1 ((mod (d0) (d2)) (d0) (d1))))
    (mod01 ((d2))))
  (mt ((eq (d1) (d0)) (eq (d0) (d1)))
    (eqcom ((d0) (d1)))
    (:conv (not (eq (d1) (d0)))
      (:sym (:unfold ne ((d1) (d0)) ()
        (not (eq (d1) (d0)))))
      (d1ne0 ())))))

(local theorem oddS ((n nat ())) ()
  (iff (odd (suc n)) (not (odd n)))
()
(ax_mp ((iff (not (dvd (d2) (suc n))) (not (odd n))) (iff (odd (suc n)) (not (odd n))))
  (ax_mp ((iff (odd (suc n)) (not (dvd (d2) (suc n)))) (im (iff (not (dvd (d2) (suc n))) (not (odd n))) (iff (odd (suc n)) (not (odd n)))))
    (bitr ((odd (suc n)) (not (dvd (d2) (suc n))) (not (odd n))))
    (odddvd ((suc n))))
  (ax_mp ((iff (dvd (d2) (suc n)) (odd n)) (iff (not (dvd (d2) (suc n))) (not (odd n))))
    (noteq ((dvd (d2) (suc n)) (odd n)))
    (ax_mp ((iff (odd n) (not (dvd (d2) n))) (iff (dvd (d2) (suc n)) (odd n)))
      (ax_mp ((iff (dvd (d2) (suc n)) (not (dvd (d2) n))) (im (iff (odd n) (not (dvd (d2) n))) (iff (dvd (d2) (suc n)) (odd n))))
        (bitr4 ((dvd (d2) (suc n)) (not (dvd (d2) n)) (odd n)))
        (d2dvdS (n)))
      (odddvd (n))))))

(local theorem odd1 () ()
  (odd (d1))
()
(mpbir ((not (odd (d0))) (odd (d1)))
  (:conv (iff (odd (d1)) (not (odd (d0))))
    (iff
      (odd
        (:unfold d1 () ()
          (suc (d0))))
      (not (odd (d0))))
    (oddS ((d0))))
  (odd0 ())))

(def pr ((a nat ()) (b nat ())) (nat ())
()
(add (div (mul (add a b) (suc (add a b))) (d2)) b))

(local theorem preqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (pr _a1 _b1) (pr _a2 _b2)))
()
(:let H1 (addeqd (_G _a1 _a2 _b1 _b2)
  _ah
  _bh)
(:conv (im _G (eq (pr _a1 _b1) (pr _a2 _b2)))
  (im
    _G
    (eq
      (:unfold pr (_a1 _b1) ()
        (add (div (mul (add _a1 _b1) (suc (add _a1 _b1))) (d2)) _b1))
      (:unfold pr (_a2 _b2) ()
        (add (div (mul (add _a2 _b2) (suc (add _a2 _b2))) (d2)) _b2))))
  (addeqd (_G (div (mul (add _a1 _b1) (suc (add _a1 _b1))) (d2)) (div (mul (add _a2 _b2) (suc (add _a2 _b2))) (d2)) _b1 _b2)
    (diveqd (_G (mul (add _a1 _b1) (suc (add _a1 _b1))) (mul (add _a2 _b2) (suc (add _a2 _b2))) (d2) (d2))
      (muleqd (_G (add _a1 _b1) (add _a2 _b2) (suc (add _a1 _b1)) (suc (add _a2 _b2)))
        H1
        (suceqd (_G (add _a1 _b1) (add _a2 _b2))
          H1))
      (eqidd (_G (d2))))
    _bh))))

(local theorem preq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (pr _a1 _b1) (pr _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (pr _a1 _b1) (pr _a2 _b2)))
  (preqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem preq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (pr _a1 b) (pr _a2 b)))
()
(preqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem preq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (pr _a1 b) (pr _a2 b)))
()
(preq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem preq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (pr a _b1) (pr a _b2)))
()
(preqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem preq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (pr a _b1) (pr a _b2)))
()
(preq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem nfpr ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (pr a b))
((y nat) (z nat))
(nfnlem2 (x y z (pr y z) a b (pr a b))
  (preqd ((an (eq y a) (eq z b)) y a z b)
    (anl ((eq y a) (eq z b)))
    (anr ((eq y a) (eq z b))))
  h1
  h2))

(local theorem preqadd ((a nat ()) (b nat ())) ()
  (eq (pr a b) (add (pr (add a b) (d0)) b))
()
(:let H1 (add0 ((add a b)))
(ax_mp ((eq (add (pr (add a b) (d0)) b) (pr a b)) (eq (pr a b) (add (pr (add a b) (d0)) b)))
  (eqcom ((add (pr (add a b) (d0)) b) (pr a b)))
  (ax_mp ((eq (pr (add a b) (d0)) (div (mul (add a b) (suc (add a b))) (d2))) (eq (add (pr (add a b) (d0)) b) (pr a b)))
    (:conv (im (eq (pr (add a b) (d0)) (div (mul (add a b) (suc (add a b))) (d2))) (eq (add (pr (add a b) (d0)) b) (pr a b)))
      (im
        (eq (pr (add a b) (d0)) (div (mul (add a b) (suc (add a b))) (d2)))
        (eq
          (add (pr (add a b) (d0)) b)
          (:unfold pr (a b) ()
            (add (div (mul (add a b) (suc (add a b))) (d2)) b))))
      (addeq1 ((pr (add a b) (d0)) (div (mul (add a b) (suc (add a b))) (d2)) b)))
    (ax_mp ((eq (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))) (eq (pr (add a b) (d0)) (div (mul (add a b) (suc (add a b))) (d2))))
      (ax_mp ((eq (pr (add a b) (d0)) (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2))) (im (eq (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))) (eq (pr (add a b) (d0)) (div (mul (add a b) (suc (add a b))) (d2)))))
        (eqtr ((pr (add a b) (d0)) (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))))
        (:conv (eq (pr (add a b) (d0)) (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)))
          (eq
            (:unfold pr ((add a b) (d0)) ()
              (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)))
            (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)))
          (add0 ((div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2))))))
      (ax_mp ((eq (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b)))) (eq (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))))
        (diveq1 ((mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b))) (d2)))
        (ax_mp ((eq (suc (add (add a b) (d0))) (suc (add a b))) (eq (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b)))))
          (ax_mp ((eq (add (add a b) (d0)) (add a b)) (im (eq (suc (add (add a b) (d0))) (suc (add a b))) (eq (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b))))))
            (muleq ((add (add a b) (d0)) (add a b) (suc (add (add a b) (d0))) (suc (add a b))))
            H1)
          (ax_mp ((eq (add (add a b) (d0)) (add a b)) (eq (suc (add (add a b) (d0))) (suc (add a b))))
            (suceq ((add (add a b) (d0)) (add a b)))
            H1))))))))

(local theorem prlem1 ((n nat ())) ()
  (dvd (d2) (mul n (suc n)))
()
(cases ((dvd (d2) n) (dvd (d2) (mul n (suc n))))
  (dvdmul11 ((d2) n (suc n)))
  (sylbir ((not (dvd (d2) n)) (dvd (d2) (suc n)) (dvd (d2) (mul n (suc n))))
    (d2dvdS (n))
    (dvdmul12 ((d2) (suc n) n)))))

(local theorem prlem2 ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (le (pr a c) (pr b d)) (le (add a c) (add b d)))
()
(:let H1 (anr ((le (pr a c) (pr b d)) (lt (add b d) (add a c))))
(:let H2 (:conv (im (an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (suc (add b d)) (add a c)))
  (im
    (an (le (pr a c) (pr b d)) (lt (add b d) (add a c)))
    (:sym (:unfold lt ((add b d) (add a c)) ()
      (le (suc (add b d)) (add a c)))))
  H1)
(sylibr ((le (pr a c) (pr b d)) (not (lt (add b d) (add a c))) (le (add a c) (add b d)))
  (lenlt ((add a c) (add b d)))
  (mtd ((le (pr a c) (pr b d)) (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))) (lt (add b d) (add a c)))
    (sylib ((le (pr a c) (pr b d)) (lt (div (mul (add a c) (suc (add a c))) (d2)) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (not (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2)))))
      (ltnle ((div (mul (add a c) (suc (add a c))) (d2)) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
      (lelttrd ((le (pr a c) (pr b d)) (div (mul (add a c) (suc (add a c))) (d2)) (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))))
        (ax_mp ((le (div (mul (add a c) (suc (add a c))) (d2)) (pr a c)) (im (le (pr a c) (pr b d)) (le (div (mul (add a c) (suc (add a c))) (d2)) (pr b d))))
          (letr ((div (mul (add a c) (suc (add a c))) (d2)) (pr a c) (pr b d)))
          (:conv (le (div (mul (add a c) (suc (add a c))) (d2)) (pr a c))
            (le
              (div (mul (add a c) (suc (add a c))) (d2))
              (:unfold pr (a c) ()
                (add (div (mul (add a c) (suc (add a c))) (d2)) c)))
            (leaddid1 ((div (mul (add a c) (suc (add a c))) (d2)) c))))
        (a1i ((le (pr a c) (pr b d)) (lt (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
          (mpbi ((lt d (suc (add b d))) (lt (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
            (:conv (iff (lt d (suc (add b d))) (lt (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
              (iff
                (lt d (suc (add b d)))
                (lt
                  (:unfold pr (b d) ()
                    (add (div (mul (add b d) (suc (add b d))) (d2)) d))
                  (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
              (ltadd2 ((div (mul (add b d) (suc (add b d))) (d2)) d (suc (add b d)))))
            (mpbi ((le d (add b d)) (lt d (suc (add b d))))
              (leltsuc (d (add b d)))
              (leaddid2 (d b)))))))
    (exp ((le (pr a c) (pr b d)) (lt (add b d) (add a c)) (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))))
      (sylibr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2)))) (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))))
        (ax_mp ((lt (d0) (d2)) (iff (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))) (le (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))))))
          (lemul2 ((d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))))
          (d0lt2 ()))
        (mpbird ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (mul (add (add b d) (d2)) (suc (add b d))) (mul (suc (add a c)) (add a c))) (le (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2)))))
          (leeqd ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (add (add b d) (d2)) (suc (add b d))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c)))
            (syl6eqr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (add (mul (add b d) (suc (add b d))) (mul (d2) (suc (add b d)))) (mul (add (add b d) (d2)) (suc (add b d))))
              (addmul ((add b d) (d2) (suc (add b d))))
              (syl5eq ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (add (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (d2) (suc (add b d)))) (add (mul (add b d) (suc (add b d))) (mul (d2) (suc (add b d)))))
                (muladd ((d2) (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))))
                (addeq1d ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (add b d) (suc (add b d))) (mul (d2) (suc (add b d))))
                  (a1i ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (eq (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (add b d) (suc (add b d)))))
                    (ax_mp ((dvd (d2) (mul (add b d) (suc (add b d)))) (eq (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (add b d) (suc (add b d)))))
                      (muldiv3 ((mul (add b d) (suc (add b d))) (d2)))
                      (prlem1 ((add b d))))))))
            (a1i ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c))))
              (ax_mp ((eq (mul (add a c) (suc (add a c))) (mul (suc (add a c)) (add a c))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c))))
                (ax_mp ((eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (add a c) (suc (add a c)))) (im (eq (mul (add a c) (suc (add a c))) (mul (suc (add a c)) (add a c))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c)))))
                  (eqtr ((mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (add a c) (suc (add a c))) (mul (suc (add a c)) (add a c))))
                  (ax_mp ((dvd (d2) (mul (add a c) (suc (add a c)))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (add a c) (suc (add a c)))))
                    (muldiv3 ((mul (add a c) (suc (add a c))) (d2)))
                    (prlem1 ((add a c)))))
                (mulcom ((add a c) (suc (add a c)))))))
          (lemuld ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (add (add b d) (d2)) (suc (add a c)) (suc (add b d)) (add a c))
            (sylibr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (suc (add (add b d) (d1))) (suc (add a c))) (le (add (add b d) (d2)) (suc (add a c))))
              (ax_mp ((eq (add (add b d) (d2)) (suc (add (add b d) (d1)))) (iff (le (add (add b d) (d2)) (suc (add a c))) (le (suc (add (add b d) (d1))) (suc (add a c)))))
                (leeq1 ((add (add b d) (d2)) (suc (add (add b d) (d1))) (suc (add a c))))
                (:conv (eq (add (add b d) (d2)) (suc (add (add b d) (d1))))
                  (eq
                    (add
                      (add b d)
                      (:unfold d2 () ()
                        (suc (d1))))
                    (suc (add (add b d) (d1))))
                  (addS ((add b d) (d1)))))
              (sylib ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (add (add b d) (d1)) (add a c)) (le (suc (add (add b d) (d1))) (suc (add a c))))
                (lesuc ((add (add b d) (d1)) (add a c)))
                (sylibr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (suc (add b d)) (add a c)) (le (add (add b d) (d1)) (add a c)))
                  (ax_mp ((eq (add (add b d) (d1)) (suc (add b d))) (iff (le (add (add b d) (d1)) (add a c)) (le (suc (add b d)) (add a c))))
                    (leeq1 ((add (add b d) (d1)) (suc (add b d)) (add a c)))
                    (add12 ((add b d))))
                  H2)))
            H2)))))))))

(local theorem prth ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (iff (eq (pr a c) (pr b d)) (an (eq a b) (eq c d)))
()
(:let H1 (leasymd ((eq (pr a c) (pr b d)) (add a c) (add b d))
  (syl ((eq (pr a c) (pr b d)) (le (pr a c) (pr b d)) (le (add a c) (add b d)))
    (prlem2 (a b c d))
    (eqle ((pr a c) (pr b d))))
  (syl ((eq (pr a c) (pr b d)) (le (pr b d) (pr a c)) (le (add b d) (add a c)))
    (prlem2 (b a d c))
    (eqler ((pr a c) (pr b d)))))
(:let H2 (sylib ((eq (pr a c) (pr b d)) (eq (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)) (eq c d))
  (addcan2 ((div (mul (add b d) (suc (add b d))) (d2)) c d))
  (mpbid ((eq (pr a c) (pr b d)) (eq (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)) (eq (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)))
    (rsyl ((eq (pr a c) (pr b d)) (eq (add a c) (add b d)) (iff (eq (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)) (eq (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d))))
      H1
      (eqeq1d ((eq (add a c) (add b d)) (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d))
        (addeq1d ((eq (add a c) (add b d)) (div (mul (add a c) (suc (add a c))) (d2)) (div (mul (add b d) (suc (add b d))) (d2)) c)
          (diveq1d ((eq (add a c) (add b d)) (mul (add a c) (suc (add a c))) (mul (add b d) (suc (add b d))) (d2))
            (muleqd ((eq (add a c) (add b d)) (add a c) (add b d) (suc (add a c)) (suc (add b d)))
              (id ((eq (add a c) (add b d))))
              (suceq ((add a c) (add b d))))))))
    (:conv (im (eq (pr a c) (pr b d)) (eq (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)))
      (im
        (eq (pr a c) (pr b d))
        (eq
          (:sym (:unfold pr (a c) ()
            (add (div (mul (add a c) (suc (add a c))) (d2)) c)))
          (:sym (:unfold pr (b d) ()
            (add (div (mul (add b d) (suc (add b d))) (d2)) d)))))
      (id ((eq (pr a c) (pr b d)))))))
(ibii ((eq (pr a c) (pr b d)) (an (eq a b) (eq c d)))
  (iand ((eq (pr a c) (pr b d)) (eq a b) (eq c d))
    (sylib ((eq (pr a c) (pr b d)) (eq (add a c) (add b c)) (eq a b))
      (addcan1 (a b c))
      (eqtr4d ((eq (pr a c) (pr b d)) (add a c) (add b d) (add b c))
        H1
        (sylibr ((eq (pr a c) (pr b d)) (eq c d) (eq (add b c) (add b d)))
          (addcan2 (b c d))
          H2)))
    H2)
  (preqd ((an (eq a b) (eq c d)) a b c d)
    (anl ((eq a b) (eq c d)))
    (anr ((eq a b) (eq c d))))))))

(local theorem prltsuc ((a nat ()) (b nat ())) ()
  (lt (pr a b) (pr (suc (add a b)) (d0)))
()
(mpbir ((not (le (pr (suc (add a b)) (d0)) (pr a b))) (lt (pr a b) (pr (suc (add a b)) (d0))))
  (ltnle ((pr a b) (pr (suc (add a b)) (d0))))
  (mt ((le (add (suc (add a b)) (d0)) (add a b)) (le (pr (suc (add a b)) (d0)) (pr a b)))
    (prlem2 ((suc (add a b)) a (d0) b))
    (mpbi ((lt (add a b) (add (suc (add a b)) (d0))) (not (le (add (suc (add a b)) (d0)) (add a b))))
      (ltnle ((add a b) (add (suc (add a b)) (d0))))
      (mpbir ((lt (add a b) (suc (add a b))) (lt (add a b) (add (suc (add a b)) (d0))))
        (ax_mp ((eq (add (suc (add a b)) (d0)) (suc (add a b))) (iff (lt (add a b) (add (suc (add a b)) (d0))) (lt (add a b) (suc (add a b)))))
          (lteq2 ((add a b) (add (suc (add a b)) (d0)) (suc (add a b))))
          (add0 ((suc (add a b)))))
        (ltsucid ((add a b))))))))

(local theorem addlepr ((a nat ()) (b nat ())) ()
  (le (add a b) (pr a b))
()
(ax_mp ((le (div (mul (add a b) (suc (add a b))) (d2)) (pr a b)) (le (add a b) (pr a b)))
  (ax_mp ((le (add a b) (div (mul (add a b) (suc (add a b))) (d2))) (im (le (div (mul (add a b) (suc (add a b))) (d2)) (pr a b)) (le (add a b) (pr a b))))
    (letr ((add a b) (div (mul (add a b) (suc (add a b))) (d2)) (pr a b)))
    (cases ((eq (add a b) (d0)) (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))))
      (mpbiri ((eq (add a b) (d0)) (le (d0) (div (mul (add a b) (suc (add a b))) (d2))) (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))))
        (le01 ((div (mul (add a b) (suc (add a b))) (d2))))
        (leeq1 ((add a b) (d0) (div (mul (add a b) (suc (add a b))) (d2)))))
      (sylibr ((not (eq (add a b) (d0))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b)))) (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))))
        (ax_mp ((ne (d2) (d0)) (iff (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b))))))
          (ledivmul2 ((add a b) (mul (add a b) (suc (add a b))) (d2)))
          (d2ne0 ()))
        (sylbi ((not (eq (add a b) (d0))) (le (suc (d1)) (suc (add a b))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b)))))
          (ax_mp ((iff (le (d1) (add a b)) (le (suc (d1)) (suc (add a b)))) (iff (not (eq (add a b) (d0))) (le (suc (d1)) (suc (add a b)))))
            (ax_mp ((iff (le (d1) (add a b)) (not (eq (add a b) (d0)))) (im (iff (le (d1) (add a b)) (le (suc (d1)) (suc (add a b)))) (iff (not (eq (add a b) (d0))) (le (suc (d1)) (suc (add a b))))))
              (bitr3 ((not (eq (add a b) (d0))) (le (d1) (add a b)) (le (suc (d1)) (suc (add a b)))))
              (:conv (iff (le (d1) (add a b)) (not (eq (add a b) (d0))))
                (iff
                  (le (d1) (add a b))
                  (:sym (:unfold ne ((add a b) (d0)) ()
                    (not (eq (add a b) (d0))))))
                (le11 ((add a b)))))
            (lesuc ((d1) (add a b))))
          (:conv (im (le (suc (d1)) (suc (add a b))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b)))))
            (im
              (le (suc (d1)) (suc (add a b)))
              (le
                (mul
                  (add a b)
                  (:unfold d2 () ()
                    (suc (d1))))
                (mul (add a b) (suc (add a b)))))
            (lemul2a ((add a b) (suc (d1)) (suc (add a b)))))))))
  (:conv (le (div (mul (add a b) (suc (add a b))) (d2)) (pr a b))
    (le
      (div (mul (add a b) (suc (add a b))) (d2))
      (:unfold pr (a b) ()
        (add (div (mul (add a b) (suc (add a b))) (d2)) b)))
    (leaddid1 ((div (mul (add a b) (suc (add a b))) (d2)) b)))))

(local theorem leprid1 ((a nat ()) (b nat ())) ()
  (le a (pr a b))
()
(ax_mp ((le (add a b) (pr a b)) (le a (pr a b)))
  (ax_mp ((le a (add a b)) (im (le (add a b) (pr a b)) (le a (pr a b))))
    (letr (a (add a b) (pr a b)))
    (leaddid1 (a b)))
  (addlepr (a b))))

(local theorem leprid2 ((a nat ()) (b nat ())) ()
  (le b (pr a b))
()
(ax_mp ((le (add a b) (pr a b)) (le b (pr a b)))
  (ax_mp ((le b (add a b)) (im (le (add a b) (pr a b)) (le b (pr a b))))
    (letr (b (add a b) (pr a b)))
    (leaddid2 (b a)))
  (addlepr (a b))))

(local theorem lepr1tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (le a b)))
  (le a (pr b c))
()
(ax_mp ((le b (pr b c)) (le a (pr b c)))
  (ax_mp ((le a b) (im (le b (pr b c)) (le a (pr b c))))
    (letr (a b (pr b c)))
    h)
  (leprid1 (b c))))

(local theorem lepr2tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (le a c)))
  (le a (pr b c))
()
(ax_mp ((le c (pr b c)) (le a (pr b c)))
  (ax_mp ((le a c) (im (le c (pr b c)) (le a (pr b c))))
    (letr (a c (pr b c)))
    h)
  (leprid2 (b c))))

(local theorem ltpr1tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (lt a b)))
  (lt a (pr b c))
()
(ax_mp ((le b (pr b c)) (lt a (pr b c)))
  (ax_mp ((lt a b) (im (le b (pr b c)) (lt a (pr b c))))
    (ltletr (a b (pr b c)))
    h)
  (leprid1 (b c))))

(local theorem ltpr2tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (lt a c)))
  (lt a (pr b c))
()
(ax_mp ((le c (pr b c)) (lt a (pr b c)))
  (ax_mp ((lt a c) (im (le c (pr b c)) (lt a (pr b c))))
    (ltletr (a c (pr b c)))
    h)
  (leprid2 (b c))))

(local theorem lepr1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a b) (le (pr a c) (pr b c)))
()
(ibii ((le a b) (le (pr a c) (pr b c)))
  (syla ((le a b) (not (le (pr a c) (pr b c))) (le (pr a c) (pr b c)) (le (pr a c) (pr b c)))
    (contra ((le (pr a c) (pr b c))))
    (syl ((an (le a b) (not (le (pr a c) (pr b c)))) (eq (pr a c) (pr b c)) (le (pr a c) (pr b c)))
      (eqle ((pr a c) (pr b c)))
      (preq1d ((an (le a b) (not (le (pr a c) (pr b c)))) a b c)
        (leasymd ((an (le a b) (not (le (pr a c) (pr b c)))) a b)
          (anl ((le a b) (not (le (pr a c) (pr b c)))))
          (sylibr ((an (le a b) (not (le (pr a c) (pr b c)))) (le (add b c) (add a c)) (le b a))
            (leadd1 (b a c))
            (syl ((an (le a b) (not (le (pr a c) (pr b c)))) (le (pr b c) (pr a c)) (le (add b c) (add a c)))
              (prlem2 (b a c c))
              (anwr ((le a b) (not (le (pr a c) (pr b c))) (le (pr b c) (pr a c)))
                (:conv (im (not (le (pr a c) (pr b c))) (le (pr b c) (pr a c)))
                  (:sym (:unfold or ((le (pr a c) (pr b c)) (le (pr b c) (pr a c))) ()
                    (im (not (le (pr a c) (pr b c))) (le (pr b c) (pr a c)))))
                  (leorle ((pr a c) (pr b c)))))))))))
  (sylibr ((le (pr a c) (pr b c)) (le (add a c) (add b c)) (le a b))
    (leadd1 (a b c))
    (prlem2 (a b c c)))))

(local theorem lepr2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (pr a b) (pr a c)))
()
(ibii ((le b c) (le (pr a b) (pr a c)))
  (syla ((le b c) (not (le (pr a b) (pr a c))) (le (pr a b) (pr a c)) (le (pr a b) (pr a c)))
    (contra ((le (pr a b) (pr a c))))
    (syl ((an (le b c) (not (le (pr a b) (pr a c)))) (eq (pr a b) (pr a c)) (le (pr a b) (pr a c)))
      (eqle ((pr a b) (pr a c)))
      (preq2d ((an (le b c) (not (le (pr a b) (pr a c)))) a b c)
        (leasymd ((an (le b c) (not (le (pr a b) (pr a c)))) b c)
          (anl ((le b c) (not (le (pr a b) (pr a c)))))
          (sylibr ((an (le b c) (not (le (pr a b) (pr a c)))) (le (add a c) (add a b)) (le c b))
            (leadd2 (a c b))
            (syl ((an (le b c) (not (le (pr a b) (pr a c)))) (le (pr a c) (pr a b)) (le (add a c) (add a b)))
              (prlem2 (a a c b))
              (anwr ((le b c) (not (le (pr a b) (pr a c))) (le (pr a c) (pr a b)))
                (:conv (im (not (le (pr a b) (pr a c))) (le (pr a c) (pr a b)))
                  (:sym (:unfold or ((le (pr a b) (pr a c)) (le (pr a c) (pr a b))) ()
                    (im (not (le (pr a b) (pr a c))) (le (pr a c) (pr a b)))))
                  (leorle ((pr a b) (pr a c)))))))))))
  (sylibr ((le (pr a b) (pr a c)) (le (add a b) (add a c)) (le b c))
    (leadd2 (a b c))
    (prlem2 (a a b c)))))

(local theorem ltpr1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a b) (lt (pr a c) (pr b c)))
()
(bitr4gi ((not (le b a)) (not (le (pr b c) (pr a c))) (lt a b) (lt (pr a c) (pr b c)))
  (ltnle (a b))
  (ltnle ((pr a c) (pr b c)))
  (ax_mp ((iff (le b a) (le (pr b c) (pr a c))) (iff (not (le b a)) (not (le (pr b c) (pr a c)))))
    (noteq ((le b a) (le (pr b c) (pr a c))))
    (lepr1 (b a c)))))

(local theorem ltpr2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt b c) (lt (pr a b) (pr a c)))
()
(bitr4gi ((not (le c b)) (not (le (pr a c) (pr a b))) (lt b c) (lt (pr a b) (pr a c)))
  (ltnle (b c))
  (ltnle ((pr a b) (pr a c)))
  (ax_mp ((iff (le c b) (le (pr a c) (pr a b))) (iff (not (le c b)) (not (le (pr a c) (pr a b)))))
    (noteq ((le c b) (le (pr a c) (pr a b))))
    (lepr2 (a c b)))))

(def fst ((a nat ())) (nat ())
((x nat) (y nat))
(the (ab x (ex y (eq a (pr x y))))))

(local theorem fsteqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()))
  ((_ah (im _G (eq _a1 _a2))))
  (im _G (eq (fst _a1) (fst _a2)))
((x nat) (y nat))
(:conv (im _G (eq (fst _a1) (fst _a2)))
  (im
    _G
    (eq
      (:unfold fst (_a1) (x y)
        (the (ab x (ex y (eq _a1 (pr x y))))))
      (:unfold fst (_a2) (x y)
        (the (ab x (ex y (eq _a2 (pr x y))))))))
  (theeqd (_G (ab x (ex y (eq _a1 (pr x y)))) (ab x (ex y (eq _a2 (pr x y)))))
    (abeqd (_G x (ex y (eq _a1 (pr x y))) (ex y (eq _a2 (pr x y))))
      (exeqd (_G y (eq _a1 (pr x y)) (eq _a2 (pr x y)))
        (eqeqd (_G _a1 _a2 (pr x y) (pr x y))
          _ah
          (eqidd (_G (pr x y)))))))))

(local theorem fsteq ((_a1 nat ()) (_a2 nat ())) ()
  (im (eq _a1 _a2) (eq (fst _a1) (fst _a2)))
()
(fsteqd ((eq _a1 _a2) _a1 _a2)
  (id ((eq _a1 _a2)))))

(def snd ((a nat ())) (nat ())
((x nat) (y nat))
(the (ab y (ex x (eq a (pr x y))))))

(local theorem sndeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()))
  ((_ah (im _G (eq _a1 _a2))))
  (im _G (eq (snd _a1) (snd _a2)))
((x nat) (y nat))
(:conv (im _G (eq (snd _a1) (snd _a2)))
  (im
    _G
    (eq
      (:unfold snd (_a1) (x y)
        (the (ab y (ex x (eq _a1 (pr x y))))))
      (:unfold snd (_a2) (x y)
        (the (ab y (ex x (eq _a2 (pr x y))))))))
  (theeqd (_G (ab y (ex x (eq _a1 (pr x y)))) (ab y (ex x (eq _a2 (pr x y)))))
    (abeqd (_G y (ex x (eq _a1 (pr x y))) (ex x (eq _a2 (pr x y))))
      (exeqd (_G x (eq _a1 (pr x y)) (eq _a2 (pr x y)))
        (eqeqd (_G _a1 _a2 (pr x y) (pr x y))
          _ah
          (eqidd (_G (pr x y)))))))))

(local theorem sndeq ((_a1 nat ()) (_a2 nat ())) ()
  (im (eq _a1 _a2) (eq (snd _a1) (snd _a2)))
()
(sndeqd ((eq _a1 _a2) _a1 _a2)
  (id ((eq _a1 _a2)))))

(theorem pr0 () ()
  (eq (pr (d0) (d0)) (d0))
()
(:let H1 (add0 ((d0)))
(ax_mp ((eq (add (d0) (d0)) (d0)) (eq (pr (d0) (d0)) (d0)))
  (ax_mp ((eq (pr (d0) (d0)) (add (d0) (d0))) (im (eq (add (d0) (d0)) (d0)) (eq (pr (d0) (d0)) (d0))))
    (eqtr ((pr (d0) (d0)) (add (d0) (d0)) (d0)))
    (ax_mp ((eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (eq (pr (d0) (d0)) (add (d0) (d0))))
      (:conv (im (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (eq (pr (d0) (d0)) (add (d0) (d0))))
        (im
          (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0))
          (eq
            (:unfold pr ((d0) (d0)) ()
              (add (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)))
            (add (d0) (d0))))
        (addeq1 ((div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0) (d0))))
      (ax_mp ((eq (div (d0) (d2)) (d0)) (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)))
        (ax_mp ((eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (div (d0) (d2))) (im (eq (div (d0) (d2)) (d0)) (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0))))
          (eqtr ((div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (div (d0) (d2)) (d0)))
          (ax_mp ((eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0)) (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (div (d0) (d2))))
            (diveq1 ((mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0) (d2)))
            (ax_mp ((eq (mul (d0) (suc (add (d0) (d0)))) (d0)) (eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0)))
              (ax_mp ((eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (mul (d0) (suc (add (d0) (d0))))) (im (eq (mul (d0) (suc (add (d0) (d0)))) (d0)) (eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0))))
                (eqtr ((mul (add (d0) (d0)) (suc (add (d0) (d0)))) (mul (d0) (suc (add (d0) (d0)))) (d0)))
                (ax_mp ((eq (add (d0) (d0)) (d0)) (eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (mul (d0) (suc (add (d0) (d0))))))
                  (muleq1 ((add (d0) (d0)) (d0) (suc (add (d0) (d0)))))
                  H1))
              (mul01 ((suc (add (d0) (d0))))))))
        (div01 ((d2))))))
  H1)))

(local theorem expr ((a nat ()) (x nat) (y nat)) ()
  (ex x (ex y (eq a (pr x y))))
((_1 nat) (m nat) (n nat) (x1 nat) (z nat))
(:let H1 (addS ((div (mul (add x y) (suc (add x y))) (d2)) y))
(:let H2 (:conv (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (suc (pr x y)))
  (eq
    (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))
    (suc
      (:unfold pr (x y) ()
        (add (div (mul (add x y) (suc (add x y))) (d2)) y))))
  H1)
(:let H3 (syl6eq ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add x y) (add (d0) y) y)
  (add01 (y))
  (addeq1d ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) x (d0) y)
    (anwll ((an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y)) (eq n (d0)) (eq x (d0)))
      (anr ((eq x1 (pr x y)) (eq x (d0)))))))
(:let H4 (anr ((an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))))
(:let H5 (syl6eq ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add m n) (add (suc y) (d0)) (suc y))
  (add0 ((suc y)))
  (addeqd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) m (suc y) n (d0))
    (anlr ((an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y)) (eq n (d0))))
    H4))
(:let H6 (anr ((an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))))
(:let H7 (eqtr4d ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add z (suc y)) (add m n))
  (syl6eq ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add (suc z) y) (add z (suc y)))
    (addSass (z y))
    (anwll ((an (eq x1 (pr x y)) (eq x (suc z))) (eq m z) (eq n (suc y)) (eq (add x y) (add (suc z) y)))
      (anwr ((eq x1 (pr x y)) (eq x (suc z)) (eq (add x y) (add (suc z) y)))
        (addeq1 (x (suc z) y)))))
  (addeqd ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) m z n (suc y))
    (anlr ((an (eq x1 (pr x y)) (eq x (suc z))) (eq m z) (eq n (suc y))))
    H6))
(ind (_1 x1 a (ex x (ex y (eq _1 (pr x y)))) (ex x (ex y (eq (d0) (pr x y)))) (ex x (ex y (eq a (pr x y)))) (ex x (ex y (eq x1 (pr x y)))) (ex x (ex y (eq (suc x1) (pr x y)))))
  (exeqd ((eq _1 a) x (ex y (eq _1 (pr x y))) (ex y (eq a (pr x y))))
    (exeqd ((eq _1 a) y (eq _1 (pr x y)) (eq a (pr x y)))
      (eqeqd ((eq _1 a) _1 a (pr x y) (pr x y))
        (id ((eq _1 a)))
        (eqidd ((eq _1 a) (pr x y))))))
  (exeqd ((eq _1 (d0)) x (ex y (eq _1 (pr x y))) (ex y (eq (d0) (pr x y))))
    (exeqd ((eq _1 (d0)) y (eq _1 (pr x y)) (eq (d0) (pr x y)))
      (eqeqd ((eq _1 (d0)) _1 (d0) (pr x y) (pr x y))
        (id ((eq _1 (d0))))
        (eqidd ((eq _1 (d0)) (pr x y))))))
  (exeqd ((eq _1 x1) x (ex y (eq _1 (pr x y))) (ex y (eq x1 (pr x y))))
    (exeqd ((eq _1 x1) y (eq _1 (pr x y)) (eq x1 (pr x y)))
      (eqeqd ((eq _1 x1) _1 x1 (pr x y) (pr x y))
        (id ((eq _1 x1)))
        (eqidd ((eq _1 x1) (pr x y))))))
  (exeqd ((eq _1 (suc x1)) x (ex y (eq _1 (pr x y))) (ex y (eq (suc x1) (pr x y))))
    (exeqd ((eq _1 (suc x1)) y (eq _1 (pr x y)) (eq (suc x1) (pr x y)))
      (eqeqd ((eq _1 (suc x1)) _1 (suc x1) (pr x y) (pr x y))
        (id ((eq _1 (suc x1))))
        (eqidd ((eq _1 (suc x1)) (pr x y))))))
  (iexie (x (d0) (ex y (eq (d0) (pr x y))))
    (iexde (y (eq x (d0)) (d0) (eq (d0) (pr x y)))
      (syl5eqr ((an (eq x (d0)) (eq y (d0))) (d0) (pr (d0) (d0)) (pr x y))
        (pr0 ())
        (eqcomd ((an (eq x (d0)) (eq y (d0))) (pr x y) (pr (d0) (d0)))
          (imp ((eq x (d0)) (eq y (d0)) (eq (pr x y) (pr (d0) (d0))))
            (preq (x (d0) y (d0))))))))
  (sylib ((ex x (ex y (eq x1 (pr x y)))) (ex m (ex n (eq (suc x1) (pr m n)))) (ex x (ex y (eq (suc x1) (pr x y)))))
    (cbvex (m x (ex n (eq (suc x1) (pr m n))) (ex y (eq (suc x1) (pr x y))))
      (cbvexd (n y (eq m x) (eq (suc x1) (pr m n)) (eq (suc x1) (pr x y)))
        (eqeq2d ((an (eq m x) (eq n y)) (suc x1) (pr m n) (pr x y))
          (preqd ((an (eq m x) (eq n y)) m x n y)
            (anl ((eq m x) (eq n y)))
            (anr ((eq m x) (eq n y)))))))
    (eex (x (ex y (eq x1 (pr x y))) (ex m (ex n (eq (suc x1) (pr m n)))))
      (eex (y (eq x1 (pr x y)) (ex m (ex n (eq (suc x1) (pr m n)))))
        (casesd ((eq x1 (pr x y)) (eq x (d0)) (ex m (ex n (eq (suc x1) (pr m n)))))
          (exp ((eq x1 (pr x y)) (eq x (d0)) (ex m (ex n (eq (suc x1) (pr m n)))))
            (iexde (m (an (eq x1 (pr x y)) (eq x (d0))) (suc y) (ex n (eq (suc x1) (pr m n))))
              (iexde (n (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (d0) (eq (suc x1) (pr m n)))
                (eqtrd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (suc x1) (suc (pr x y)) (pr m n))
                  (suceqd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) x1 (pr x y))
                    (an3l ((eq x1 (pr x y)) (eq x (d0)) (eq m (suc y)) (eq n (d0)))))
                  (syl5eqr ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (suc (pr x y)) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (pr m n))
                    H2
                    (eqtr4d ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2)) (pr m n))
                      (sylib ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (eq (mul (d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2)))) (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2))))
                        (ax_mp ((ne (d2) (d0)) (iff (eq (mul (d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2)))) (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2)))))
                          (mulcan2 ((d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2))))
                          (d2ne0 ()))
                        (syl5eq ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))) (add (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (d2) (suc y))) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))))
                          (muladd ((d2) (div (mul (add x y) (suc (add x y))) (d2)) (suc y)))
                          (syl6eqr ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (d2) (suc y))) (mul (suc (suc y)) (suc y)) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))))
                            (ax_mp ((eq (mul (suc y) (suc (suc y))) (mul (suc (suc y)) (suc y))) (eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc (suc y)) (suc y))))
                              (ax_mp ((eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc y) (suc (suc y)))) (im (eq (mul (suc y) (suc (suc y))) (mul (suc (suc y)) (suc y))) (eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc (suc y)) (suc y)))))
                                (eqtr ((mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc y) (suc (suc y))) (mul (suc (suc y)) (suc y))))
                                (ax_mp ((dvd (d2) (mul (suc y) (suc (suc y)))) (eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc y) (suc (suc y)))))
                                  (muldiv3 ((mul (suc y) (suc (suc y))) (d2)))
                                  (prlem1 ((suc y)))))
                              (mulcom ((suc y) (suc (suc y)))))
                            (eqtrd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (d2) (suc y))) (add (mul y (suc y)) (mul (d2) (suc y))) (mul (suc (suc y)) (suc y)))
                              (addeq1d ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul y (suc y)) (mul (d2) (suc y)))
                                (syl5eq ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (add x y) (suc (add x y))) (mul y (suc y)))
                                  (ax_mp ((dvd (d2) (mul (add x y) (suc (add x y)))) (eq (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (add x y) (suc (add x y)))))
                                    (muldiv3 ((mul (add x y) (suc (add x y))) (d2)))
                                    (prlem1 ((add x y))))
                                  (muleqd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add x y) y (suc (add x y)) (suc y))
                                    H3
                                    (suceqd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add x y) y)
                                      H3))))
                              (syl5eqr ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (mul y (suc y)) (mul (d2) (suc y))) (mul (add y (d2)) (suc y)) (mul (suc (suc y)) (suc y)))
                                (addmul (y (d2) (suc y)))
                                (a1i ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (eq (mul (add y (d2)) (suc y)) (mul (suc (suc y)) (suc y))))
                                  (ax_mp ((eq (add y (d2)) (suc (suc y))) (eq (mul (add y (d2)) (suc y)) (mul (suc (suc y)) (suc y))))
                                    (muleq1 ((add y (d2)) (suc (suc y)) (suc y)))
                                    (ax_mp ((eq (suc (add y (d1))) (suc (suc y))) (eq (add y (d2)) (suc (suc y))))
                                      (ax_mp ((eq (add y (d2)) (suc (add y (d1)))) (im (eq (suc (add y (d1))) (suc (suc y))) (eq (add y (d2)) (suc (suc y)))))
                                        (eqtr ((add y (d2)) (suc (add y (d1))) (suc (suc y))))
                                        (:conv (eq (add y (d2)) (suc (add y (d1))))
                                          (eq
                                            (add
                                              y
                                              (:unfold d2 () ()
                                                (suc (d1))))
                                            (suc (add y (d1))))
                                          (addS (y (d1)))))
                                      (ax_mp ((eq (add y (d1)) (suc y)) (eq (suc (add y (d1))) (suc (suc y))))
                                        (suceq ((add y (d1)) (suc y)))
                                        (add12 (y)))))))))))
                      (syl6eq ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (pr m n) (add (div (mul (suc y) (suc (suc y))) (d2)) (d0)) (div (mul (suc y) (suc (suc y))) (d2)))
                        (add0 ((div (mul (suc y) (suc (suc y))) (d2))))
                        (:conv (im (an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (eq (pr m n) (add (div (mul (suc y) (suc (suc y))) (d2)) (d0))))
                          (im
                            (an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0)))
                            (eq
                              (:unfold pr (m n) ()
                                (add (div (mul (add m n) (suc (add m n))) (d2)) n))
                              (add (div (mul (suc y) (suc (suc y))) (d2)) (d0))))
                          (addeqd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (div (mul (add m n) (suc (add m n))) (d2)) (div (mul (suc y) (suc (suc y))) (d2)) n (d0))
                            (diveq1d ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (add m n) (suc (add m n))) (mul (suc y) (suc (suc y))) (d2))
                              (muleqd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add m n) (suc y) (suc (add m n)) (suc (suc y)))
                                H5
                                (suceqd ((an (an (an (eq x1 (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add m n) (suc y))
                                  H5)))
                            H4)))))))))
          (syl5bi ((eq x1 (pr x y)) (not (eq x (d0))) (ex z (eq x (suc z))) (ex m (ex n (eq (suc x1) (pr m n)))))
            (:conv (iff (not (eq x (d0))) (ex z (eq x (suc z))))
              (iff
                (:sym (:unfold ne (x (d0)) ()
                  (not (eq x (d0)))))
                (ex z (eq x (suc z))))
              (exsuc (z x)))
            (eexda (z (eq x1 (pr x y)) (eq x (suc z)) (ex m (ex n (eq (suc x1) (pr m n)))))
              (iexde (m (an (eq x1 (pr x y)) (eq x (suc z))) z (ex n (eq (suc x1) (pr m n))))
                (iexde (n (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (suc y) (eq (suc x1) (pr m n)))
                  (eqtrd ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (suc x1) (suc (pr x y)) (pr m n))
                    (anw3l ((eq x1 (pr x y)) (eq x (suc z)) (eq m z) (eq n (suc y)) (eq (suc x1) (suc (pr x y))))
                      (suceq (x1 (pr x y))))
                    (syl5eqr ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (suc (pr x y)) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (pr m n))
                      H2
                      (:conv (im (an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (pr m n)))
                        (im
                          (an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y)))
                          (eq
                            (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))
                            (:unfold pr (m n) ()
                              (add (div (mul (add m n) (suc (add m n))) (d2)) n))))
                        (addeqd ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (div (mul (add x y) (suc (add x y))) (d2)) (div (mul (add m n) (suc (add m n))) (d2)) (suc y) n)
                          (diveq1d ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (mul (add x y) (suc (add x y))) (mul (add m n) (suc (add m n))) (d2))
                            (muleqd ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add m n) (suc (add x y)) (suc (add m n)))
                              H7
                              (suceqd ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add m n))
                                H7)))
                          (eqcomd ((an (an (an (eq x1 (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) n (suc y))
                            H6))))))))))))))))))))))

(local theorem splitpr ((G wff ()) (a nat ()) (p wff ()) (x nat) (y nat))
  ((h (im G (im (eq a (pr x y)) p))))
  (im G p)
()
(mpi (G (ex x (ex y (eq a (pr x y)))) p)
  (expr (a x y))
  (eexd (x G (ex y (eq a (pr x y))) p)
    (eexd (y G (eq a (pr x y)) p)
      h))))

(local theorem splitpr1 ((G wff ()) (a nat ()) (b nat ()) (p wff ()) (x nat ()) (y nat ()))
  ((h (im G (im (eq a (pr x y)) p))))
  (im G (im (eq b x) (im (eq a (pr b y)) p)))
()
(exp (G (eq b x) (im (eq a (pr b y)) p))
  (exp ((an G (eq b x)) (eq a (pr b y)) p)
    (sylc ((an (an G (eq b x)) (eq a (pr b y))) G (eq a (pr x y)) p)
      h
      (anll (G (eq b x) (eq a (pr b y))))
      (eqtrd ((an (an G (eq b x)) (eq a (pr b y))) a (pr b y) (pr x y))
        (anr ((an G (eq b x)) (eq a (pr b y))))
        (preq1d ((an (an G (eq b x)) (eq a (pr b y))) b x y)
          (anlr (G (eq b x) (eq a (pr b y))))))))))

(local theorem splitpr2 ((G wff ()) (a nat ()) (b nat ()) (p wff ()) (x nat ()) (y nat ()))
  ((h (im G (im (eq a (pr x y)) p))))
  (im G (im (eq b y) (im (eq a (pr x b)) p)))
()
(exp (G (eq b y) (im (eq a (pr x b)) p))
  (exp ((an G (eq b y)) (eq a (pr x b)) p)
    (sylc ((an (an G (eq b y)) (eq a (pr x b))) G (eq a (pr x y)) p)
      h
      (anll (G (eq b y) (eq a (pr x b))))
      (eqtrd ((an (an G (eq b y)) (eq a (pr x b))) a (pr x b) (pr x y))
        (anr ((an G (eq b y)) (eq a (pr x b))))
        (preq2d ((an (an G (eq b y)) (eq a (pr x b))) x b y)
          (anlr (G (eq b y) (eq a (pr x b))))))))))

(local theorem splitopt ((G wff ()) (a nat ()) (p wff ()))
  ((h0 (im G (im (eq a (d0)) p)))
   (h1 (im G (im (eq a (suc (sub a (d1)))) p))))
  (im G p)
()
(casesd (G (eq a (d0)) p)
  h0
  (syl5 (G (not (eq a (d0))) (eq a (suc (sub a (d1)))) p)
    (eqcomd ((not (eq a (d0))) (suc (sub a (d1))) a)
      (:conv (im (not (eq a (d0))) (eq (suc (sub a (d1))) a))
        (im
          (:sym (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
          (eq (suc (sub a (d1))) a))
        (sub1can (a))))
    h1)))

(local theorem splitoptS ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (p wff ()))
  ((h (im G (im (eq a (suc c)) p))))
  (im G (im (eq b c) (im (eq a (suc b)) p)))
()
(exp (G (eq b c) (im (eq a (suc b)) p))
  (exp ((an G (eq b c)) (eq a (suc b)) p)
    (sylc ((an (an G (eq b c)) (eq a (suc b))) G (eq a (suc c)) p)
      h
      (anll (G (eq b c) (eq a (suc b))))
      (eqtrd ((an (an G (eq b c)) (eq a (suc b))) a (suc b) (suc c))
        (anr ((an G (eq b c)) (eq a (suc b))))
        (suceqd ((an (an G (eq b c)) (eq a (suc b))) b c)
          (anlr (G (eq b c) (eq a (suc b))))))))))

(theorem fstpr ((a nat ()) (b nat ())) ()
  (eq (fst (pr a b)) a)
((x nat) (y nat))
(trud ((eq (fst (pr a b)) a))
  (:conv (im (tru) (eq (fst (pr a b)) a))
    (im
      (tru)
      (eq
        (:unfold fst ((pr a b)) (x y)
          (the (ab x (ex y (eq (pr a b) (pr x y))))))
        a))
    (eqtheabd ((tru) a x (ex y (eq (pr a b) (pr x y))))
      (a1i ((tru) (iff (ex y (eq (pr a b) (pr x y))) (eq x a)))
        (ibii ((ex y (eq (pr a b) (pr x y))) (eq x a))
          (eex (y (eq (pr a b) (pr x y)) (eq x a))
            (sylbi ((eq (pr a b) (pr x y)) (an (eq a x) (eq b y)) (eq x a))
              (prth (a x b y))
              (eqcomd ((an (eq a x) (eq b y)) a x)
                (anl ((eq a x) (eq b y))))))
          (rsyl ((eq x a) (eq (pr a b) (pr x b)) (ex y (eq (pr a b) (pr x y))))
            (eqcomd ((eq x a) (pr x b) (pr a b))
              (preq1 (x a b)))
            (iexe (y b (eq (pr a b) (pr x y)) (eq (pr a b) (pr x b)))
              (eqeq2d ((eq y b) (pr a b) (pr x y) (pr x b))
                (preq2 (x y b)))))))))))

(theorem sndpr ((a nat ()) (b nat ())) ()
  (eq (snd (pr a b)) b)
((x nat) (y nat))
(trud ((eq (snd (pr a b)) b))
  (:conv (im (tru) (eq (snd (pr a b)) b))
    (im
      (tru)
      (eq
        (:unfold snd ((pr a b)) (x y)
          (the (ab y (ex x (eq (pr a b) (pr x y))))))
        b))
    (eqtheabd ((tru) b y (ex x (eq (pr a b) (pr x y))))
      (a1i ((tru) (iff (ex x (eq (pr a b) (pr x y))) (eq y b)))
        (ibii ((ex x (eq (pr a b) (pr x y))) (eq y b))
          (eex (x (eq (pr a b) (pr x y)) (eq y b))
            (sylbi ((eq (pr a b) (pr x y)) (an (eq a x) (eq b y)) (eq y b))
              (prth (a x b y))
              (eqcomd ((an (eq a x) (eq b y)) b y)
                (anr ((eq a x) (eq b y))))))
          (rsyl ((eq y b) (eq (pr a b) (pr a y)) (ex x (eq (pr a b) (pr x y))))
            (eqcomd ((eq y b) (pr a y) (pr a b))
              (preq2 (a y b)))
            (iexe (x a (eq (pr a b) (pr x y)) (eq (pr a b) (pr a y)))
              (eqeq2d ((eq x a) (pr a b) (pr x y) (pr a y))
                (preq1 (x a y)))))))))))

(theorem fstsnd ((a nat ())) ()
  (eq (pr (fst a) (snd a)) a)
((x nat) (y nat))
(ax_mp ((ex x (ex y (eq a (pr x y)))) (eq (pr (fst a) (snd a)) a))
  (eex (x (ex y (eq a (pr x y))) (eq (pr (fst a) (snd a)) a))
    (eex (y (eq a (pr x y)) (eq (pr (fst a) (snd a)) a))
      (eqtr4d ((eq a (pr x y)) (pr (fst a) (snd a)) (pr x y) a)
        (preqd ((eq a (pr x y)) (fst a) x (snd a) y)
          (syl6eq ((eq a (pr x y)) (fst a) (fst (pr x y)) x)
            (fstpr (x y))
            (fsteq (a (pr x y))))
          (syl6eq ((eq a (pr x y)) (snd a) (snd (pr x y)) y)
            (sndpr (x y))
            (sndeq (a (pr x y)))))
        (id ((eq a (pr x y)))))))
  (expr (a x y))))

(local theorem fstleid ((a nat ())) ()
  (le (fst a) a)
()
(mpbi ((le (fst a) (pr (fst a) (snd a))) (le (fst a) a))
  (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (le (fst a) (pr (fst a) (snd a))) (le (fst a) a)))
    (leeq2 ((fst a) (pr (fst a) (snd a)) a))
    (fstsnd (a)))
  (leprid1 ((fst a) (snd a)))))

(local theorem sndleid ((a nat ())) ()
  (le (snd a) a)
()
(mpbi ((le (snd a) (pr (fst a) (snd a))) (le (snd a) a))
  (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (le (snd a) (pr (fst a) (snd a))) (le (snd a) a)))
    (leeq2 ((snd a) (pr (fst a) (snd a)) a))
    (fstsnd (a)))
  (leprid2 ((fst a) (snd a)))))

(local theorem axext2 ((A set ()) (B set ()) (x nat) (y nat)) ()
  (iff (eqs A B) (al x (al y (iff (el (pr x y) A) (el (pr x y) B)))))
((p nat))
(ax_mp ((iff (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))) (iff (eqs A B) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))))
  (ax_mp ((iff (eqs A B) (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))))) (im (iff (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))) (iff (eqs A B) (al x (al y (iff (el (pr x y) A) (el (pr x y) B)))))))
    (bitr ((eqs A B) (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))))
    (:conv (iff (eqs A B) (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))))
      (iff
        (:unfold eqs (A B) (p)
          (al p (iff (el p A) (el p B))))
        (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))))
      (aleqi (p (iff (el p A) (el p B)) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))))
        (ax_mp ((iff (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (iff (iff (el p A) (el p B)) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))))
          (ax_mp ((iff (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (iff (el p A) (el p B))) (im (iff (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (iff (iff (el p A) (el p B)) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))))))
            (bitr3 ((iff (el p A) (el p B)) (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))))
            (ax_mp ((ex x (ex y (eq p (pr x y)))) (iff (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (iff (el p A) (el p B))))
              (biim1 ((ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))))
              (expr (p x y))))
          (ax_mp ((iff (al x (im (ex y (eq p (pr x y))) (iff (el p A) (el p B)))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (iff (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))))
            (ax_mp ((iff (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (al x (im (ex y (eq p (pr x y))) (iff (el p A) (el p B))))) (im (iff (al x (im (ex y (eq p (pr x y))) (iff (el p A) (el p B)))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (iff (im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))))))
              (bitr ((im (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B))) (al x (im (ex y (eq p (pr x y))) (iff (el p A) (el p B)))) (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))))
              (eexb (x (ex y (eq p (pr x y))) (iff (el p A) (el p B)))))
            (aleqi (x (im (ex y (eq p (pr x y))) (iff (el p A) (el p B))) (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))
              (eexb (y (eq p (pr x y)) (iff (el p A) (el p B))))))))))
  (ax_mp ((iff (al x (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))) (iff (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))))
    (ax_mp ((iff (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))))) (im (iff (al x (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))) (iff (al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B)))))))
      (bitr ((al p (al x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (al x (al y (iff (el (pr x y) A) (el (pr x y) B))))))
      (alcomb (p x (al y (im (eq p (pr x y)) (iff (el p A) (el p B)))))))
    (aleqi (x (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (iff (el (pr x y) A) (el (pr x y) B))))
      (ax_mp ((iff (al y (al p (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (iff (el (pr x y) A) (el (pr x y) B)))) (iff (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (iff (el (pr x y) A) (el (pr x y) B)))))
        (ax_mp ((iff (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (al p (im (eq p (pr x y)) (iff (el p A) (el p B)))))) (im (iff (al y (al p (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (iff (el (pr x y) A) (el (pr x y) B)))) (iff (al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (iff (el (pr x y) A) (el (pr x y) B))))))
          (bitr ((al p (al y (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (al p (im (eq p (pr x y)) (iff (el p A) (el p B))))) (al y (iff (el (pr x y) A) (el (pr x y) B)))))
          (alcomb (p y (im (eq p (pr x y)) (iff (el p A) (el p B))))))
        (aleqi (y (al p (im (eq p (pr x y)) (iff (el p A) (el p B)))) (iff (el (pr x y) A) (el (pr x y) B)))
          (aleqe (p (pr x y) (iff (el p A) (el p B)) (iff (el (pr x y) A) (el (pr x y) B)))
            (bieqd ((eq p (pr x y)) (el p A) (el (pr x y) A) (el p B) (el (pr x y) B))
              (eleq1 (A p (pr x y)))
              (eleq1 (B p (pr x y)))))))))))

(local theorem eqrd2 ((A set ()) (B set ()) (G wff ()) (x nat) (y nat))
  ((h (im G (iff (el (pr x y) A) (el (pr x y) B)))))
  (im G (eqs A B))
()
(sylibr (G (al x (al y (iff (el (pr x y) A) (el (pr x y) B)))) (eqs A B))
  (axext2 (A B x y))
  (iald (x G (al y (iff (el (pr x y) A) (el (pr x y) B))))
    (iald (y G (iff (el (pr x y) A) (el (pr x y) B)))
      h))))

(local theorem eqri2 ((A set ()) (B set ()) (x nat) (y nat))
  ((h (iff (el (pr x y) A) (el (pr x y) B))))
  (eqs A B)
()
(trud ((eqs A B))
  (eqrd2 (A B (tru) x y)
    (a1i ((tru) (iff (el (pr x y) A) (el (pr x y) B)))
      h))))

(local theorem ssal2 ((A set ()) (B set ()) (x nat) (y nat)) ()
  (iff (subset A B) (al x (al y (im (el (pr x y) A) (el (pr x y) B)))))
((p nat))
(ax_mp ((iff (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))) (iff (subset A B) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))))
  (ax_mp ((iff (subset A B) (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B))))))) (im (iff (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))) (iff (subset A B) (al x (al y (im (el (pr x y) A) (el (pr x y) B)))))))
    (bitr ((subset A B) (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))))
    (:conv (iff (subset A B) (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))))
      (iff
        (:unfold subset (A B) (p)
          (al p (im (el p A) (el p B))))
        (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))))
      (aleqi (p (im (el p A) (el p B)) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B))))))
        (ax_mp ((iff (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (iff (im (el p A) (el p B)) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))))
          (ax_mp ((iff (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (im (el p A) (el p B))) (im (iff (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (iff (im (el p A) (el p B)) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B))))))))
            (bitr3 ((im (el p A) (el p B)) (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))))
            (ax_mp ((ex x (ex y (eq p (pr x y)))) (iff (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (im (el p A) (el p B))))
              (biim1 ((ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))))
              (expr (p x y))))
          (ax_mp ((iff (al x (im (ex y (eq p (pr x y))) (im (el p A) (el p B)))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (iff (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))))
            (ax_mp ((iff (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (al x (im (ex y (eq p (pr x y))) (im (el p A) (el p B))))) (im (iff (al x (im (ex y (eq p (pr x y))) (im (el p A) (el p B)))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (iff (im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B))))))))
              (bitr ((im (ex x (ex y (eq p (pr x y)))) (im (el p A) (el p B))) (al x (im (ex y (eq p (pr x y))) (im (el p A) (el p B)))) (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))))
              (eexb (x (ex y (eq p (pr x y))) (im (el p A) (el p B)))))
            (aleqi (x (im (ex y (eq p (pr x y))) (im (el p A) (el p B))) (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))
              (eexb (y (eq p (pr x y)) (im (el p A) (el p B))))))))))
  (ax_mp ((iff (al x (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))) (iff (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))))
    (ax_mp ((iff (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B))))))) (im (iff (al x (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))) (iff (al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B)))))))
      (bitr ((al p (al x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))) (al x (al y (im (el (pr x y) A) (el (pr x y) B))))))
      (alcomb (p x (al y (im (eq p (pr x y)) (im (el p A) (el p B)))))))
    (aleqi (x (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (im (el (pr x y) A) (el (pr x y) B))))
      (ax_mp ((iff (al y (al p (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (im (el (pr x y) A) (el (pr x y) B)))) (iff (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (im (el (pr x y) A) (el (pr x y) B)))))
        (ax_mp ((iff (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (al p (im (eq p (pr x y)) (im (el p A) (el p B)))))) (im (iff (al y (al p (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (im (el (pr x y) A) (el (pr x y) B)))) (iff (al p (al y (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (im (el (pr x y) A) (el (pr x y) B))))))
          (bitr ((al p (al y (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (al p (im (eq p (pr x y)) (im (el p A) (el p B))))) (al y (im (el (pr x y) A) (el (pr x y) B)))))
          (alcomb (p y (im (eq p (pr x y)) (im (el p A) (el p B))))))
        (aleqi (y (al p (im (eq p (pr x y)) (im (el p A) (el p B)))) (im (el (pr x y) A) (el (pr x y) B)))
          (aleqe (p (pr x y) (im (el p A) (el p B)) (im (el (pr x y) A) (el (pr x y) B)))
            (imeqd ((eq p (pr x y)) (el p A) (el (pr x y) A) (el p B) (el (pr x y) B))
              (eleq1 (A p (pr x y)))
              (eleq1 (B p (pr x y)))))))))))

(local theorem ssrd2 ((A set ()) (B set ()) (G wff ()) (x nat) (y nat))
  ((h (im G (im (el (pr x y) A) (el (pr x y) B)))))
  (im G (subset A B))
()
(sylibr (G (al x (al y (im (el (pr x y) A) (el (pr x y) B)))) (subset A B))
  (ssal2 (A B x y))
  (iald (x G (al y (im (el (pr x y) A) (el (pr x y) B))))
    (iald (y G (im (el (pr x y) A) (el (pr x y) B)))
      h))))

(local theorem ssri2 ((A set ()) (B set ()) (x nat) (y nat))
  ((h (im (el (pr x y) A) (el (pr x y) B))))
  (subset A B)
()
(trud ((subset A B))
  (ssrd2 (A B (tru) x y)
    (a1i ((tru) (im (el (pr x y) A) (el (pr x y) B)))
      h))))

(local theorem fst0 () ()
  (eq (fst (d0)) (d0))
()
(ax_mp ((eq (fst (pr (d0) (d0))) (d0)) (eq (fst (d0)) (d0)))
  (ax_mp ((eq (fst (pr (d0) (d0))) (fst (d0))) (im (eq (fst (pr (d0) (d0))) (d0)) (eq (fst (d0)) (d0))))
    (eqtr3 ((fst (d0)) (fst (pr (d0) (d0))) (d0)))
    (ax_mp ((eq (pr (d0) (d0)) (d0)) (eq (fst (pr (d0) (d0))) (fst (d0))))
      (fsteq ((pr (d0) (d0)) (d0)))
      (pr0 ())))
  (fstpr ((d0) (d0)))))

(local theorem snd0 () ()
  (eq (snd (d0)) (d0))
()
(ax_mp ((eq (snd (pr (d0) (d0))) (d0)) (eq (snd (d0)) (d0)))
  (ax_mp ((eq (snd (pr (d0) (d0))) (snd (d0))) (im (eq (snd (pr (d0) (d0))) (d0)) (eq (snd (d0)) (d0))))
    (eqtr3 ((snd (d0)) (snd (pr (d0) (d0))) (d0)))
    (ax_mp ((eq (pr (d0) (d0)) (d0)) (eq (snd (pr (d0) (d0))) (snd (d0))))
      (sndeq ((pr (d0) (d0)) (d0)))
      (pr0 ())))
  (sndpr ((d0) (d0)))))

(def pi11 ((n nat ())) (nat ())
()
(fst (fst n)))

(local theorem pi11eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (pi11 _n1) (pi11 _n2)))
()
(:conv (im _G (eq (pi11 _n1) (pi11 _n2)))
  (im
    _G
    (eq
      (:unfold pi11 (_n1) ()
        (fst (fst _n1)))
      (:unfold pi11 (_n2) ()
        (fst (fst _n2)))))
  (fsteqd (_G (fst _n1) (fst _n2))
    (fsteqd (_G _n1 _n2)
      _nh))))

(local theorem pi11eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (pi11 _n1) (pi11 _n2)))
()
(pi11eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def pi12 ((n nat ())) (nat ())
()
(snd (fst n)))

(local theorem pi12eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (pi12 _n1) (pi12 _n2)))
()
(:conv (im _G (eq (pi12 _n1) (pi12 _n2)))
  (im
    _G
    (eq
      (:unfold pi12 (_n1) ()
        (snd (fst _n1)))
      (:unfold pi12 (_n2) ()
        (snd (fst _n2)))))
  (sndeqd (_G (fst _n1) (fst _n2))
    (fsteqd (_G _n1 _n2)
      _nh))))

(local theorem pi12eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (pi12 _n1) (pi12 _n2)))
()
(pi12eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def pi21 ((n nat ())) (nat ())
()
(fst (snd n)))

(local theorem pi21eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (pi21 _n1) (pi21 _n2)))
()
(:conv (im _G (eq (pi21 _n1) (pi21 _n2)))
  (im
    _G
    (eq
      (:unfold pi21 (_n1) ()
        (fst (snd _n1)))
      (:unfold pi21 (_n2) ()
        (fst (snd _n2)))))
  (fsteqd (_G (snd _n1) (snd _n2))
    (sndeqd (_G _n1 _n2)
      _nh))))

(local theorem pi21eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (pi21 _n1) (pi21 _n2)))
()
(pi21eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def pi22 ((n nat ())) (nat ())
()
(snd (snd n)))

(local theorem pi22eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (pi22 _n1) (pi22 _n2)))
()
(:conv (im _G (eq (pi22 _n1) (pi22 _n2)))
  (im
    _G
    (eq
      (:unfold pi22 (_n1) ()
        (snd (snd _n1)))
      (:unfold pi22 (_n2) ()
        (snd (snd _n2)))))
  (sndeqd (_G (snd _n1) (snd _n2))
    (sndeqd (_G _n1 _n2)
      _nh))))

(local theorem pi22eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (pi22 _n1) (pi22 _n2)))
()
(pi22eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def pi221 ((n nat ())) (nat ())
()
(fst (pi22 n)))

(local theorem pi221eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (pi221 _n1) (pi221 _n2)))
()
(:conv (im _G (eq (pi221 _n1) (pi221 _n2)))
  (im
    _G
    (eq
      (:unfold pi221 (_n1) ()
        (fst (pi22 _n1)))
      (:unfold pi221 (_n2) ()
        (fst (pi22 _n2)))))
  (fsteqd (_G (pi22 _n1) (pi22 _n2))
    (pi22eqd (_G _n1 _n2)
      _nh))))

(local theorem pi221eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (pi221 _n1) (pi221 _n2)))
()
(pi221eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(def pi222 ((n nat ())) (nat ())
()
(snd (pi22 n)))

(local theorem pi222eqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (pi222 _n1) (pi222 _n2)))
()
(:conv (im _G (eq (pi222 _n1) (pi222 _n2)))
  (im
    _G
    (eq
      (:unfold pi222 (_n1) ()
        (snd (pi22 _n1)))
      (:unfold pi222 (_n2) ()
        (snd (pi22 _n2)))))
  (sndeqd (_G (pi22 _n1) (pi22 _n2))
    (pi22eqd (_G _n1 _n2)
      _nh))))

(local theorem pi222eq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (pi222 _n1) (pi222 _n2)))
()
(pi222eqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem pi11pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi11 (pr (pr a b) c)) a)
()
(ax_mp ((eq (fst (pr a b)) a) (eq (pi11 (pr (pr a b) c)) a))
  (ax_mp ((eq (pi11 (pr (pr a b) c)) (fst (pr a b))) (im (eq (fst (pr a b)) a) (eq (pi11 (pr (pr a b) c)) a)))
    (eqtr ((pi11 (pr (pr a b) c)) (fst (pr a b)) a))
    (ax_mp ((eq (fst (pr (pr a b) c)) (pr a b)) (eq (pi11 (pr (pr a b) c)) (fst (pr a b))))
      (:conv (im (eq (fst (pr (pr a b) c)) (pr a b)) (eq (pi11 (pr (pr a b) c)) (fst (pr a b))))
        (im
          (eq (fst (pr (pr a b) c)) (pr a b))
          (eq
            (:unfold pi11 ((pr (pr a b) c)) ()
              (fst (fst (pr (pr a b) c))))
            (fst (pr a b))))
        (fsteq ((fst (pr (pr a b) c)) (pr a b))))
      (fstpr ((pr a b) c))))
  (fstpr (a b))))

(local theorem pi12pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi12 (pr (pr a b) c)) b)
()
(ax_mp ((eq (snd (pr a b)) b) (eq (pi12 (pr (pr a b) c)) b))
  (ax_mp ((eq (pi12 (pr (pr a b) c)) (snd (pr a b))) (im (eq (snd (pr a b)) b) (eq (pi12 (pr (pr a b) c)) b)))
    (eqtr ((pi12 (pr (pr a b) c)) (snd (pr a b)) b))
    (ax_mp ((eq (fst (pr (pr a b) c)) (pr a b)) (eq (pi12 (pr (pr a b) c)) (snd (pr a b))))
      (:conv (im (eq (fst (pr (pr a b) c)) (pr a b)) (eq (pi12 (pr (pr a b) c)) (snd (pr a b))))
        (im
          (eq (fst (pr (pr a b) c)) (pr a b))
          (eq
            (:unfold pi12 ((pr (pr a b) c)) ()
              (snd (fst (pr (pr a b) c))))
            (snd (pr a b))))
        (sndeq ((fst (pr (pr a b) c)) (pr a b))))
      (fstpr ((pr a b) c))))
  (sndpr (a b))))

(local theorem pi21pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi21 (pr a (pr b c))) b)
()
(ax_mp ((eq (fst (pr b c)) b) (eq (pi21 (pr a (pr b c))) b))
  (ax_mp ((eq (pi21 (pr a (pr b c))) (fst (pr b c))) (im (eq (fst (pr b c)) b) (eq (pi21 (pr a (pr b c))) b)))
    (eqtr ((pi21 (pr a (pr b c))) (fst (pr b c)) b))
    (ax_mp ((eq (snd (pr a (pr b c))) (pr b c)) (eq (pi21 (pr a (pr b c))) (fst (pr b c))))
      (:conv (im (eq (snd (pr a (pr b c))) (pr b c)) (eq (pi21 (pr a (pr b c))) (fst (pr b c))))
        (im
          (eq (snd (pr a (pr b c))) (pr b c))
          (eq
            (:unfold pi21 ((pr a (pr b c))) ()
              (fst (snd (pr a (pr b c)))))
            (fst (pr b c))))
        (fsteq ((snd (pr a (pr b c))) (pr b c))))
      (sndpr (a (pr b c)))))
  (fstpr (b c))))

(local theorem pi22pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi22 (pr a (pr b c))) c)
()
(ax_mp ((eq (snd (pr b c)) c) (eq (pi22 (pr a (pr b c))) c))
  (ax_mp ((eq (pi22 (pr a (pr b c))) (snd (pr b c))) (im (eq (snd (pr b c)) c) (eq (pi22 (pr a (pr b c))) c)))
    (eqtr ((pi22 (pr a (pr b c))) (snd (pr b c)) c))
    (ax_mp ((eq (snd (pr a (pr b c))) (pr b c)) (eq (pi22 (pr a (pr b c))) (snd (pr b c))))
      (:conv (im (eq (snd (pr a (pr b c))) (pr b c)) (eq (pi22 (pr a (pr b c))) (snd (pr b c))))
        (im
          (eq (snd (pr a (pr b c))) (pr b c))
          (eq
            (:unfold pi22 ((pr a (pr b c))) ()
              (snd (snd (pr a (pr b c)))))
            (snd (pr b c))))
        (sndeq ((snd (pr a (pr b c))) (pr b c))))
      (sndpr (a (pr b c)))))
  (sndpr (b c))))

(local theorem pi221pr ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (pi221 (pr a (pr b (pr c d)))) c)
()
(ax_mp ((eq (fst (pr c d)) c) (eq (pi221 (pr a (pr b (pr c d)))) c))
  (ax_mp ((eq (pi221 (pr a (pr b (pr c d)))) (fst (pr c d))) (im (eq (fst (pr c d)) c) (eq (pi221 (pr a (pr b (pr c d)))) c)))
    (eqtr ((pi221 (pr a (pr b (pr c d)))) (fst (pr c d)) c))
    (ax_mp ((eq (pi22 (pr a (pr b (pr c d)))) (pr c d)) (eq (pi221 (pr a (pr b (pr c d)))) (fst (pr c d))))
      (:conv (im (eq (pi22 (pr a (pr b (pr c d)))) (pr c d)) (eq (pi221 (pr a (pr b (pr c d)))) (fst (pr c d))))
        (im
          (eq (pi22 (pr a (pr b (pr c d)))) (pr c d))
          (eq
            (:unfold pi221 ((pr a (pr b (pr c d)))) ()
              (fst (pi22 (pr a (pr b (pr c d))))))
            (fst (pr c d))))
        (fsteq ((pi22 (pr a (pr b (pr c d)))) (pr c d))))
      (pi22pr (a b (pr c d)))))
  (fstpr (c d))))

(local theorem pi222pr ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (pi222 (pr a (pr b (pr c d)))) d)
()
(ax_mp ((eq (snd (pr c d)) d) (eq (pi222 (pr a (pr b (pr c d)))) d))
  (ax_mp ((eq (pi222 (pr a (pr b (pr c d)))) (snd (pr c d))) (im (eq (snd (pr c d)) d) (eq (pi222 (pr a (pr b (pr c d)))) d)))
    (eqtr ((pi222 (pr a (pr b (pr c d)))) (snd (pr c d)) d))
    (ax_mp ((eq (pi22 (pr a (pr b (pr c d)))) (pr c d)) (eq (pi222 (pr a (pr b (pr c d)))) (snd (pr c d))))
      (:conv (im (eq (pi22 (pr a (pr b (pr c d)))) (pr c d)) (eq (pi222 (pr a (pr b (pr c d)))) (snd (pr c d))))
        (im
          (eq (pi22 (pr a (pr b (pr c d)))) (pr c d))
          (eq
            (:unfold pi222 ((pr a (pr b (pr c d)))) ()
              (snd (pi22 (pr a (pr b (pr c d))))))
            (snd (pr c d))))
        (sndeq ((pi22 (pr a (pr b (pr c d)))) (pr c d))))
      (pi22pr (a b (pr c d)))))
  (sndpr (c d))))

(def isfun ((A set ())) (wff ())
((a nat) (b nat) (b2 nat))
(al a (al b (al b2 (im (el (pr a b) A) (im (el (pr a b2) A) (eq b b2)))))))

(local theorem isfeqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (iff (isfun _A1) (isfun _A2)))
((a nat) (b nat) (b2 nat))
(:conv (im _G (iff (isfun _A1) (isfun _A2)))
  (im
    _G
    (iff
      (:unfold isfun (_A1) (a b b2)
        (al a (al b (al b2 (im (el (pr a b) _A1) (im (el (pr a b2) _A1) (eq b b2)))))))
      (:unfold isfun (_A2) (a b b2)
        (al a (al b (al b2 (im (el (pr a b) _A2) (im (el (pr a b2) _A2) (eq b b2)))))))))
  (aleqd (_G a (al b (al b2 (im (el (pr a b) _A1) (im (el (pr a b2) _A1) (eq b b2))))) (al b (al b2 (im (el (pr a b) _A2) (im (el (pr a b2) _A2) (eq b b2))))))
    (aleqd (_G b (al b2 (im (el (pr a b) _A1) (im (el (pr a b2) _A1) (eq b b2)))) (al b2 (im (el (pr a b) _A2) (im (el (pr a b2) _A2) (eq b b2)))))
      (aleqd (_G b2 (im (el (pr a b) _A1) (im (el (pr a b2) _A1) (eq b b2))) (im (el (pr a b) _A2) (im (el (pr a b2) _A2) (eq b b2))))
        (imeqd (_G (el (pr a b) _A1) (el (pr a b) _A2) (im (el (pr a b2) _A1) (eq b b2)) (im (el (pr a b2) _A2) (eq b b2)))
          (eleqd (_G (pr a b) (pr a b) _A1 _A2)
            (eqidd (_G (pr a b)))
            _Ah)
          (imeqd (_G (el (pr a b2) _A1) (el (pr a b2) _A2) (eq b b2) (eq b b2))
            (eleqd (_G (pr a b2) (pr a b2) _A1 _A2)
              (eqidd (_G (pr a b2)))
              _Ah)
            (biidd (_G (eq b b2))))))))))

(local theorem isfeq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (iff (isfun _A1) (isfun _A2)))
()
(isfeqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem nfisf ((x nat) (F set (x)))
  ((hF (nfs x F)))
  (nf x (isfun F))
((x1 nat) (x2 nat) (x3 nat))
(:conv (nf x (isfun F))
  (nf
    x
    (:unfold isfun (F) (x1 x2 x3)
      (al x1 (al x2 (al x3 (im (el (pr x1 x2) F) (im (el (pr x1 x3) F) (eq x2 x3))))))))
  (nfal (x x1 (al x2 (al x3 (im (el (pr x1 x2) F) (im (el (pr x1 x3) F) (eq x2 x3))))))
    (nfal (x x2 (al x3 (im (el (pr x1 x2) F) (im (el (pr x1 x3) F) (eq x2 x3)))))
      (nfal (x x3 (im (el (pr x1 x2) F) (im (el (pr x1 x3) F) (eq x2 x3))))
        (nfim (x (el (pr x1 x2) F) (im (el (pr x1 x3) F) (eq x2 x3)))
          (nfel2 (x (pr x1 x2) F)
            hF)
          (nfim (x (el (pr x1 x3) F) (eq x2 x3))
            (nfel2 (x (pr x1 x3) F)
              hF)
            (nfv ((eq x2 x3) x)))))))))

(local theorem isfd ((F set ()) (G wff ()) (a nat ()) (b nat ()) (b2 nat ()))
  ((h1 (im G (isfun F)))
   (h2 (im G (el (pr a b) F)))
   (h3 (im G (el (pr a b2) F))))
  (im G (eq b b2))
((x nat) (y nat) (z nat))
(:let H1 (anllr (G (eq x a) (eq y b) (eq z b2)))
(:let H2 (anlr ((an G (eq x a)) (eq y b) (eq z b2)))
(:let H3 (anr ((an (an G (eq x a)) (eq y b)) (eq z b2)))
(mpd (G (el (pr a b2) F) (eq b b2))
  h3
  (mpd (G (el (pr a b) F) (im (el (pr a b2) F) (eq b b2)))
    h2
    (mpd (G (isfun F) (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))))
      h1
      (:conv (im G (im (isfun F) (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2)))))
        (im
          G
          (im
            (:unfold isfun (F) (x y z)
              (al x (al y (al z (im (el (pr x y) F) (im (el (pr x z) F) (eq y z)))))))
            (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2)))))
        (ealde ((im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))) x G a (al y (al z (im (el (pr x y) F) (im (el (pr x z) F) (eq y z))))))
          (ealde ((im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))) y (an G (eq x a)) b (al z (im (el (pr x y) F) (im (el (pr x z) F) (eq y z)))))
            (ealde ((im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))) z (an (an G (eq x a)) (eq y b)) b2 (im (el (pr x y) F) (im (el (pr x z) F) (eq y z))))
              (bi1d ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) (im (el (pr x y) F) (im (el (pr x z) F) (eq y z))) (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))))
                (imeqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) (el (pr x y) F) (el (pr a b) F) (im (el (pr x z) F) (eq y z)) (im (el (pr a b2) F) (eq b b2)))
                  (eleq1d (F (an (an (an G (eq x a)) (eq y b)) (eq z b2)) (pr x y) (pr a b))
                    (preqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) x a y b)
                      H1
                      H2))
                  (imeqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) (el (pr x z) F) (el (pr a b2) F) (eq y z) (eq b b2))
                    (eleq1d (F (an (an (an G (eq x a)) (eq y b)) (eq z b2)) (pr x z) (pr a b2))
                      (preqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) x a z b2)
                        H1
                        H3))
                    (eqeqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) y b z b2)
                      H2
                      H3)))))))))))))))

(local theorem isfbd ((F set ()) (G wff ()) (a nat ()) (b nat ()) (b2 nat ()))
  ((h1 (im G (isfun F)))
   (h2 (im G (el (pr a b) F))))
  (im G (iff (el (pr a b2) F) (eq b b2)))
()
(ibida (G (el (pr a b2) F) (eq b b2))
  (isfd (F (an G (el (pr a b2) F)) a b b2)
    (anwl (G (el (pr a b2) F) (isfun F))
      h1)
    (anwl (G (el (pr a b2) F) (el (pr a b) F))
      h2)
    (anr (G (el (pr a b2) F))))
  (mpbid ((an G (eq b b2)) (el (pr a b) F) (el (pr a b2) F))
    (eleq1d (F (an G (eq b b2)) (pr a b) (pr a b2))
      (anwr (G (eq b b2) (eq (pr a b) (pr a b2)))
        (preq2 (a b b2))))
    (anwl (G (eq b b2) (el (pr a b) F))
      h2))))

(local theorem isfss ((A set ()) (B set ())) ()
  (im (subset A B) (im (isfun B) (isfun A)))
((a nat) (b nat) (c nat))
(:let H1 (an3l ((subset A B) (isfun B) (el (pr a b) A) (el (pr a c) A)))
(exp ((subset A B) (isfun B) (isfun A))
  (:conv (im (an (subset A B) (isfun B)) (isfun A))
    (im
      (an (subset A B) (isfun B))
      (:unfold isfun (A) (a b c)
        (al a (al b (al c (im (el (pr a b) A) (im (el (pr a c) A) (eq b c))))))))
    (iald (a (an (subset A B) (isfun B)) (al b (al c (im (el (pr a b) A) (im (el (pr a c) A) (eq b c))))))
      (iald (b (an (subset A B) (isfun B)) (al c (im (el (pr a b) A) (im (el (pr a c) A) (eq b c)))))
        (iald (c (an (subset A B) (isfun B)) (im (el (pr a b) A) (im (el (pr a c) A) (eq b c))))
          (exp ((an (subset A B) (isfun B)) (el (pr a b) A) (im (el (pr a c) A) (eq b c)))
            (exp ((an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A) (eq b c))
              (isfd (B (an (an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A)) a b c)
                (anllr ((subset A B) (isfun B) (el (pr a b) A) (el (pr a c) A)))
                (sseld (A B (an (an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A)) (pr a b))
                  H1
                  (anlr ((an (subset A B) (isfun B)) (el (pr a b) A) (el (pr a c) A))))
                (sseld (A B (an (an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A)) (pr a c))
                  H1
                  (anr ((an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A))))))))))))))

(def sab ((x nat) (A set (x))) (set ())
((z nat))
(ab z (el (snd z) (sbs (fst z) x A))))

(local theorem sabeqd ((_G wff ()) (x nat) (_A1 set (x)) (_A2 set (x)))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (sab x _A1) (sab x _A2)))
((z nat))
(:conv (im _G (eqs (sab x _A1) (sab x _A2)))
  (im
    _G
    (eqs
      (:unfold sab (x _A1) (z)
        (ab z (el (snd z) (sbs (fst z) x _A1))))
      (:unfold sab (x _A2) (z)
        (ab z (el (snd z) (sbs (fst z) x _A2))))))
  (abeqd (_G z (el (snd z) (sbs (fst z) x _A1)) (el (snd z) (sbs (fst z) x _A2)))
    (eleqd (_G (snd z) (snd z) (sbs (fst z) x _A1) (sbs (fst z) x _A2))
      (eqidd (_G (snd z)))
      (sbseqd (_G x (fst z) (fst z) _A1 _A2)
        (eqidd (_G (fst z)))
        _Ah)))))

(local theorem nfsab ((x nat) (y nat) (A set (x y)))
  ((h (nfs y A)))
  (nfs y (sab x A))
((x1 nat))
(:conv (nfs y (sab x A))
  (nfs
    y
    (:unfold sab (x A) (x1)
      (ab x1 (el (snd x1) (sbs (fst x1) x A)))))
  (nfab (y x1 (el (snd x1) (sbs (fst x1) x A)))
    (nfel2 (y (snd x1) (sbs (fst x1) x A))
      (nfsbs (y x (fst x1) A)
        h)))))

(local theorem nfsab1 ((x nat) (A set (x))) ()
  (nfs x (sab x A))
((x1 nat))
(:conv (nfs x (sab x A))
  (nfs
    x
    (:unfold sab (x A) (x1)
      (ab x1 (el (snd x1) (sbs (fst x1) x A)))))
  (nfab (x x1 (el (snd x1) (sbs (fst x1) x A)))
    (nfel2 (x (snd x1) (sbs (fst x1) x A))
      (nfsbs1 (x (fst x1) A))))))

(local theorem sabeq ((x nat) (A set (x)) (B set (x))) ()
  (im (al x (eqs A B)) (eqs (sab x A) (sab x B)))
((x1 nat))
(:conv (im (al x (eqs A B)) (eqs (sab x A) (sab x B)))
  (im
    (al x (eqs A B))
    (eqs
      (:unfold sab (x A) (x1)
        (ab x1 (el (snd x1) (sbs (fst x1) x A))))
      (:unfold sab (x B) (x1)
        (ab x1 (el (snd x1) (sbs (fst x1) x B))))))
  (abeqd ((al x (eqs A B)) x1 (el (snd x1) (sbs (fst x1) x A)) (el (snd x1) (sbs (fst x1) x B)))
    (eleq2d ((sbs (fst x1) x A) (sbs (fst x1) x B) (al x (eqs A B)) (snd x1))
      (ealeh (x (fst x1) (eqs A B) (eqs (sbs (fst x1) x A) (sbs (fst x1) x B)))
        (nfeqs (x (sbs (fst x1) x A) (sbs (fst x1) x B))
          (nfsbs1 (x (fst x1) A))
          (nfsbs1 (x (fst x1) B)))
        (eqseqd ((eq x (fst x1)) A (sbs (fst x1) x A) B (sbs (fst x1) x B))
          (sbsq (x (fst x1) A))
          (sbsq (x (fst x1) B))))))))

(local theorem sabeqi ((x nat) (A set (x)) (B set (x)))
  ((h (eqs A B)))
  (eqs (sab x A) (sab x B))
()
(ax_mp ((al x (eqs A B)) (eqs (sab x A) (sab x B)))
  (sabeq (x A B))
  (ax_gen (x (eqs A B))
    h)))

(local theorem cbvsabs ((x nat) (y nat) (A set (x))) ()
  (eqs (sab x A) (sab y (sbs y x A)))
((z nat))
(:conv (eqs (sab x A) (sab y (sbs y x A)))
  (eqs
    (:unfold sab (x A) (z)
      (ab z (el (snd z) (sbs (fst z) x A))))
    (:unfold sab (y (sbs y x A)) (z)
      (ab z (el (snd z) (sbs (fst z) y (sbs y x A))))))
  (abeqi (z (el (snd z) (sbs (fst z) x A)) (el (snd z) (sbs (fst z) y (sbs y x A))))
    (ax_mp ((eqs (sbs (fst z) x A) (sbs (fst z) y (sbs y x A))) (iff (el (snd z) (sbs (fst z) x A)) (el (snd z) (sbs (fst z) y (sbs y x A)))))
      (eleq2 ((sbs (fst z) x A) (sbs (fst z) y (sbs y x A)) (snd z)))
      (ax_mp ((eqs (sbs (fst z) y (sbs y x A)) (sbs (fst z) x A)) (eqs (sbs (fst z) x A) (sbs (fst z) y (sbs y x A))))
        (eqscom ((sbs (fst z) y (sbs y x A)) (sbs (fst z) x A)))
        (sbsco (x y (fst z) A)))))))

(local theorem elsabs ((a nat ()) (b nat ()) (x nat) (A set (x))) ()
  (iff (el (pr a b) (sab x A)) (el b (sbs a x A)))
((p nat))
(:conv (iff (el (pr a b) (sab x A)) (el b (sbs a x A)))
  (iff
    (el
      (pr a b)
      (:unfold sab (x A) (p)
        (ab p (el (snd p) (sbs (fst p) x A)))))
    (el b (sbs a x A)))
  (elabe (p (pr a b) (el (snd p) (sbs (fst p) x A)) (el b (sbs a x A)))
    (eleqd ((eq p (pr a b)) (snd p) b (sbs (fst p) x A) (sbs a x A))
      (syl6eq ((eq p (pr a b)) (snd p) (snd (pr a b)) b)
        (sndpr (a b))
        (sndeq (p (pr a b))))
      (sbseq1d (x (eq p (pr a b)) (fst p) a A)
        (syl6eq ((eq p (pr a b)) (fst p) (fst (pr a b)) a)
          (fstpr (a b))
          (fsteq (p (pr a b)))))))))

(local theorem elsab ((B set ()) (a nat ()) (b nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eqs A B))))
  (iff (el (pr a b) (sab x A)) (el b B))
()
(ax_mp ((iff (el b (sbs a x A)) (el b B)) (iff (el (pr a b) (sab x A)) (el b B)))
  (ax_mp ((iff (el (pr a b) (sab x A)) (el b (sbs a x A))) (im (iff (el b (sbs a x A)) (el b B)) (iff (el (pr a b) (sab x A)) (el b B))))
    (bitr ((el (pr a b) (sab x A)) (el b (sbs a x A)) (el b B)))
    (elsabs (a b x A)))
  (ax_mp ((eqs (sbs a x A) B) (iff (el b (sbs a x A)) (el b B)))
    (eleq2 ((sbs a x A) B b))
    (sbse (x a A B)
      h))))

(local theorem elsabed ((G wff ()) (a nat ()) (b nat ()) (p wff ()) (x nat) (A set (x)))
  ((h (im (an G (eq x a)) (iff (el b A) p))))
  (im G (iff (el (pr a b) (sab x A)) p))
()
(syl5bb (G (el (pr a b) (sab x A)) (el b (sbs a x A)) p)
  (elsabs (a b x A))
  (mpi (G (ex x (eq x a)) (iff (el b (sbs a x A)) p))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (iff (el b (sbs a x A)) p))
      (nfv (G x))
      (nfbi (x (el b (sbs a x A)) p)
        (nfel2 (x b (sbs a x A))
          (nfsbs1 (x a A)))
        (nfv (p x)))
      (exp (G (eq x a) (iff (el b (sbs a x A)) p))
        (bitr3d ((an G (eq x a)) (el b (sbs a x A)) (el b A) p)
          (eleq2d (A (sbs a x A) (an G (eq x a)) b)
            (anwr (G (eq x a) (eqs A (sbs a x A)))
              (sbsq (x a A))))
          h))))))

(local theorem elsabe ((a nat ()) (b nat ()) (p wff ()) (x nat) (A set (x)))
  ((h (im (eq x a) (iff (el b A) p))))
  (iff (el (pr a b) (sab x A)) p)
()
(trud ((iff (el (pr a b) (sab x A)) p))
  (elsabed ((tru) a b p x A)
    (anwr ((tru) (eq x a) (iff (el b A) p))
      h))))

(local theorem eexsabd ((G wff ()) (p wff ()) (x nat) (z nat) (y nat (x z)) (A set (x)))
  ((h (im G (im (el z A) p))))
  (im G (im (el y (sab x A)) p))
((w nat))
(syl5 (G (el y (sab x A)) (ex w (el w (sab x A))) p)
  (iexe (w y (el w (sab x A)) (el y (sab x A)))
    (eleq1 ((sab x A) w y)))
  (eexd (w G (el w (sab x A)) p)
    (syl5bir (G (el w (sab x A)) (el (pr (fst w) (snd w)) (sab x A)) p)
      (ax_mp ((eq (pr (fst w) (snd w)) w) (iff (el (pr (fst w) (snd w)) (sab x A)) (el w (sab x A))))
        (eleq1 ((sab x A) (pr (fst w) (snd w)) w))
        (fstsnd (w)))
      (syl5bi (G (el (pr (fst w) (snd w)) (sab x A)) (el (snd w) (sbs (fst w) x A)) p)
        (elsabs ((fst w) (snd w) x A))
        (syl5 (G (el (snd w) (sbs (fst w) x A)) (ex z (el z (sbs (fst w) x A))) p)
          (iexe (z (snd w) (el z (sbs (fst w) x A)) (el (snd w) (sbs (fst w) x A)))
            (eleq1 ((sbs (fst w) x A) z (snd w))))
          (eexd (z G (el z (sbs (fst w) x A)) p)
            (sbethh ((fst w) x (im G (im (el z A) p)) (im G (im (el z (sbs (fst w) x A)) p)))
              (nfim (x G (im (el z (sbs (fst w) x A)) p))
                (nfv (G x))
                (nfim (x (el z (sbs (fst w) x A)) p)
                  (nfel2 (x z (sbs (fst w) x A))
                    (nfsbs1 (x (fst w) A)))
                  (nfv (p x))))
              h
              (imeq2d ((eq x (fst w)) G (im (el z A) p) (im (el z (sbs (fst w) x A)) p))
                (imeq1d ((eq x (fst w)) (el z A) (el z (sbs (fst w) x A)) p)
                  (eleq2d (A (sbs (fst w) x A) (eq x (fst w)) z)
                    (sbsq (x (fst w) A)))))))))))))

(local theorem sabss ((x nat) (A set (x)) (B set (x))) ()
  (iff (subset (sab x A) (sab x B)) (al x (subset A B)))
((x1 nat) (x2 nat))
(:let H1 (nfsbs1 (x (fst x2) A))
(:let H2 (nfsbs1 (x (fst x2) B))
(:let H3 (sndpr (x x1))
(:let H4 (sndeq (x2 (pr x x1)))
(:let H5 (syl6eq ((eq x2 (pr x x1)) (snd x2) (snd (pr x x1)) x1)
  H3
  H4)
(:let H6 (sbsq (x (fst x2) A))
(:let H7 (fstpr (x x1))
(:let H8 (fsteq (x2 (pr x x1)))
(:let H9 (syl6eq ((eq x2 (pr x x1)) (fst x2) (fst (pr x x1)) x)
  H7
  H8)
(:let H10 (eqcomd ((eq x2 (pr x x1)) (fst x2) x)
  H9)
(:let H11 (sbsq (x (fst x2) B))
(ax_mp ((iff (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (al x (subset A B))) (iff (subset (sab x A) (sab x B)) (al x (subset A B))))
  (ax_mp ((iff (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (subset (sab x A) (sab x B))) (im (iff (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (al x (subset A B))) (iff (subset (sab x A) (sab x B)) (al x (subset A B)))))
    (bitr3 ((subset (sab x A) (sab x B)) (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (al x (subset A B))))
    (:conv (iff (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (subset (sab x A) (sab x B)))
      (iff
        (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B))))
        (subset
          (:unfold sab (x A) (x2)
            (ab x2 (el (snd x2) (sbs (fst x2) x A))))
          (:unfold sab (x B) (x2)
            (ab x2 (el (snd x2) (sbs (fst x2) x B))))))
      (ssab (x2 (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B))))))
  (ibii ((al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (al x (subset A B)))
    (ialdh (x (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (subset A B))
      (nfal (x x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B))))
        (nfim (x (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))
          (nfel2 (x (snd x2) (sbs (fst x2) x A))
            H1)
          (nfel2 (x (snd x2) (sbs (fst x2) x B))
            H2)))
      (:conv (im (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (subset A B))
        (im
          (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B))))
          (:unfold subset (A B) (x1)
            (al x1 (im (el x1 A) (el x1 B)))))
        (iald (x1 (al x2 (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B)))) (im (el x1 A) (el x1 B)))
          (eale (x2 (pr x x1) (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B))) (im (el x1 A) (el x1 B)))
            (imeqd ((eq x2 (pr x x1)) (el (snd x2) (sbs (fst x2) x A)) (el x1 A) (el (snd x2) (sbs (fst x2) x B)) (el x1 B))
              (eleqd ((eq x2 (pr x x1)) (snd x2) x1 (sbs (fst x2) x A) A)
                H5
                (eqscomd (A (sbs (fst x2) x A) (eq x2 (pr x x1)))
                  (syl ((eq x2 (pr x x1)) (eq x (fst x2)) (eqs A (sbs (fst x2) x A)))
                    H6
                    H10)))
              (eleqd ((eq x2 (pr x x1)) (snd x2) x1 (sbs (fst x2) x B) B)
                H5
                (eqscomd (B (sbs (fst x2) x B) (eq x2 (pr x x1)))
                  (syl ((eq x2 (pr x x1)) (eq x (fst x2)) (eqs B (sbs (fst x2) x B)))
                    H11
                    H10))))))))
    (iald (x2 (al x (subset A B)) (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B))))
      (syl ((al x (subset A B)) (subset (sbs (fst x2) x A) (sbs (fst x2) x B)) (im (el (snd x2) (sbs (fst x2) x A)) (el (snd x2) (sbs (fst x2) x B))))
        (ssel ((sbs (fst x2) x A) (sbs (fst x2) x B) (snd x2)))
        (ealeh (x (fst x2) (subset A B) (subset (sbs (fst x2) x A) (sbs (fst x2) x B)))
          (nfss (x (sbs (fst x2) x A) (sbs (fst x2) x B))
            H1
            H2)
          (sseqd ((eq x (fst x2)) A (sbs (fst x2) x A) B (sbs (fst x2) x B))
            H6
            H11))))))))))))))))))

(local theorem sabssi ((x nat) (A set (x)) (B set (x)))
  ((h (subset A B)))
  (subset (sab x A) (sab x B))
()
(mpbir ((al x (subset A B)) (subset (sab x A) (sab x B)))
  (sabss (x A B))
  (ax_gen (x (subset A B))
    h)))

(local theorem sabssd ((G wff ()) (x nat) (A set (x)) (B set (x)))
  ((h (im G (subset A B))))
  (im G (subset (sab x A) (sab x B)))
()
(sylibr (G (al x (subset A B)) (subset (sab x A) (sab x B)))
  (sabss (x A B))
  (iald (x G (subset A B))
    h)))

(def xab ((x nat) (A set ()) (B set (x))) (set ())
((z nat))
(ab z (an (el (fst z) A) (el (snd z) (sbs (fst z) x B)))))

(local theorem xabeqd ((_G wff ()) (x nat) (_A1 set (x)) (_A2 set (x)) (_B1 set (x)) (_B2 set (x)))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (xab x _A1 _B1) (xab x _A2 _B2)))
((z nat))
(:let H1 (eqidd (_G (fst z)))
(:conv (im _G (eqs (xab x _A1 _B1) (xab x _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold xab (x _A1 _B1) (z)
        (ab z (an (el (fst z) _A1) (el (snd z) (sbs (fst z) x _B1)))))
      (:unfold xab (x _A2 _B2) (z)
        (ab z (an (el (fst z) _A2) (el (snd z) (sbs (fst z) x _B2)))))))
  (abeqd (_G z (an (el (fst z) _A1) (el (snd z) (sbs (fst z) x _B1))) (an (el (fst z) _A2) (el (snd z) (sbs (fst z) x _B2))))
    (aneqd (_G (el (fst z) _A1) (el (fst z) _A2) (el (snd z) (sbs (fst z) x _B1)) (el (snd z) (sbs (fst z) x _B2)))
      (eleqd (_G (fst z) (fst z) _A1 _A2)
        H1
        _Ah)
      (eleqd (_G (snd z) (snd z) (sbs (fst z) x _B1) (sbs (fst z) x _B2))
        (eqidd (_G (snd z)))
        (sbseqd (_G x (fst z) (fst z) _B1 _B2)
          H1
          _Bh)))))))

(local theorem xabeq1d ((_G wff ()) (x nat) (_A1 set (x)) (_A2 set (x)) (B set (x)))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (xab x _A1 B) (xab x _A2 B)))
()
(xabeqd (_G x _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem xabeq2d ((_G wff ()) (x nat) (A set (x)) (_B1 set (x)) (_B2 set (x)))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (xab x A _B1) (xab x A _B2)))
()
(xabeqd (_G x A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem nfxab ((x nat) (y nat) (A set (x y)) (B set (x y)))
  ((h1 (nfs y A))
   (h2 (nfs y B)))
  (nfs y (xab x A B))
((x1 nat))
(:conv (nfs y (xab x A B))
  (nfs
    y
    (:unfold xab (x A B) (x1)
      (ab x1 (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B))))))
  (nfab (y x1 (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B))))
    (nfan (y (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B)))
      (nfel2 (y (fst x1) A)
        h1)
      (nfel2 (y (snd x1) (sbs (fst x1) x B))
        (nfsbs (y x (fst x1) B)
          h2))))))

(local theorem nfxab1 ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A)))
  (nfs x (xab x A B))
((x1 nat))
(:conv (nfs x (xab x A B))
  (nfs
    x
    (:unfold xab (x A B) (x1)
      (ab x1 (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B))))))
  (nfab (x x1 (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B))))
    (nfan (x (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B)))
      (nfel2 (x (fst x1) A)
        h1)
      (nfel2 (x (snd x1) (sbs (fst x1) x B))
        (nfsbs1 (x (fst x1) B)))))))

(local theorem xabeq2da ((A set ()) (G wff ()) (x nat) (B set (x)) (C set (x)))
  ((h (im (an G (el x A)) (eqs B C))))
  (im G (eqs (xab x A B) (xab x A C)))
((z nat))
(:conv (im G (eqs (xab x A B) (xab x A C)))
  (im
    G
    (eqs
      (:unfold xab (x A B) (z)
        (ab z (an (el (fst z) A) (el (snd z) (sbs (fst z) x B)))))
      (:unfold xab (x A C) (z)
        (ab z (an (el (fst z) A) (el (snd z) (sbs (fst z) x C)))))))
  (abeqd (G z (an (el (fst z) A) (el (snd z) (sbs (fst z) x B))) (an (el (fst z) A) (el (snd z) (sbs (fst z) x C))))
    (syl (G (im (el (fst z) A) (iff (el (snd z) (sbs (fst z) x B)) (el (snd z) (sbs (fst z) x C)))) (iff (an (el (fst z) A) (el (snd z) (sbs (fst z) x B))) (an (el (fst z) A) (el (snd z) (sbs (fst z) x C)))))
      (aneq2a ((el (fst z) A) (el (snd z) (sbs (fst z) x B)) (el (snd z) (sbs (fst z) x C))))
      (syl6 (G (el (fst z) A) (eqs (sbs (fst z) x B) (sbs (fst z) x C)) (iff (el (snd z) (sbs (fst z) x B)) (el (snd z) (sbs (fst z) x C))))
        (eleq2 ((sbs (fst z) x B) (sbs (fst z) x C) (snd z)))
        (syl (G (al x (im (el x A) (eqs B C))) (im (el (fst z) A) (eqs (sbs (fst z) x B) (sbs (fst z) x C))))
          (ealeh (x (fst z) (im (el x A) (eqs B C)) (im (el (fst z) A) (eqs (sbs (fst z) x B) (sbs (fst z) x C))))
            (nfim (x (el (fst z) A) (eqs (sbs (fst z) x B) (sbs (fst z) x C)))
              (nfv ((el (fst z) A) x))
              (nfeqs (x (sbs (fst z) x B) (sbs (fst z) x C))
                (nfsbs1 (x (fst z) B))
                (nfsbs1 (x (fst z) C))))
            (imeqd ((eq x (fst z)) (el x A) (el (fst z) A) (eqs B C) (eqs (sbs (fst z) x B) (sbs (fst z) x C)))
              (eleq1 (A x (fst z)))
              (eqseqd ((eq x (fst z)) B (sbs (fst z) x B) C (sbs (fst z) x C))
                (sbsq (x (fst z) B))
                (sbsq (x (fst z) C)))))
          (ialda (x G (el x A) (eqs B C))
            h)))))))

(local theorem cbvxabs ((A set ()) (x nat) (y nat) (B set (x))) ()
  (eqs (xab x A B) (xab y A (sbs y x B)))
((z nat))
(:conv (eqs (xab x A B) (xab y A (sbs y x B)))
  (eqs
    (:unfold xab (x A B) (z)
      (ab z (an (el (fst z) A) (el (snd z) (sbs (fst z) x B)))))
    (:unfold xab (y A (sbs y x B)) (z)
      (ab z (an (el (fst z) A) (el (snd z) (sbs (fst z) y (sbs y x B)))))))
  (abeqi (z (an (el (fst z) A) (el (snd z) (sbs (fst z) x B))) (an (el (fst z) A) (el (snd z) (sbs (fst z) y (sbs y x B)))))
    (aneq2i ((el (fst z) A) (el (snd z) (sbs (fst z) x B)) (el (snd z) (sbs (fst z) y (sbs y x B))))
      (ax_mp ((eqs (sbs (fst z) x B) (sbs (fst z) y (sbs y x B))) (iff (el (snd z) (sbs (fst z) x B)) (el (snd z) (sbs (fst z) y (sbs y x B)))))
        (eleq2 ((sbs (fst z) x B) (sbs (fst z) y (sbs y x B)) (snd z)))
        (ax_mp ((eqs (sbs (fst z) y (sbs y x B)) (sbs (fst z) x B)) (eqs (sbs (fst z) x B) (sbs (fst z) y (sbs y x B))))
          (eqscom ((sbs (fst z) y (sbs y x B)) (sbs (fst z) x B)))
          (sbsco (x y (fst z) B))))))))

(local theorem elxabs ((A set ()) (a nat ()) (b nat ()) (x nat) (B set (x))) ()
  (iff (el (pr a b) (xab x A B)) (an (el a A) (el b (sbs a x B))))
((p nat))
(:let H1 (fstpr (a b))
(:let H2 (fsteq (p (pr a b)))
(:let H3 (syl6eq ((eq p (pr a b)) (fst p) (fst (pr a b)) a)
  H1
  H2)
(:conv (iff (el (pr a b) (xab x A B)) (an (el a A) (el b (sbs a x B))))
  (iff
    (el
      (pr a b)
      (:unfold xab (x A B) (p)
        (ab p (an (el (fst p) A) (el (snd p) (sbs (fst p) x B))))))
    (an (el a A) (el b (sbs a x B))))
  (elabe (p (pr a b) (an (el (fst p) A) (el (snd p) (sbs (fst p) x B))) (an (el a A) (el b (sbs a x B))))
    (aneqd ((eq p (pr a b)) (el (fst p) A) (el a A) (el (snd p) (sbs (fst p) x B)) (el b (sbs a x B)))
      (eleq1d (A (eq p (pr a b)) (fst p) a)
        H3)
      (eleqd ((eq p (pr a b)) (snd p) b (sbs (fst p) x B) (sbs a x B))
        (syl6eq ((eq p (pr a b)) (snd p) (snd (pr a b)) b)
          (sndpr (a b))
          (sndeq (p (pr a b))))
        (sbseq1d (x (eq p (pr a b)) (fst p) a B)
          H3)))))))))

(local theorem elxab ((A set ()) (C set ()) (a nat ()) (b nat ()) (x nat) (B set (x)))
  ((h (im (eq x a) (eqs B C))))
  (iff (el (pr a b) (xab x A B)) (an (el a A) (el b C)))
()
(ax_mp ((iff (an (el a A) (el b (sbs a x B))) (an (el a A) (el b C))) (iff (el (pr a b) (xab x A B)) (an (el a A) (el b C))))
  (ax_mp ((iff (el (pr a b) (xab x A B)) (an (el a A) (el b (sbs a x B)))) (im (iff (an (el a A) (el b (sbs a x B))) (an (el a A) (el b C))) (iff (el (pr a b) (xab x A B)) (an (el a A) (el b C)))))
    (bitr ((el (pr a b) (xab x A B)) (an (el a A) (el b (sbs a x B))) (an (el a A) (el b C))))
    (elxabs (A a b x B)))
  (aneq2i ((el a A) (el b (sbs a x B)) (el b C))
    (ax_mp ((eqs (sbs a x B) C) (iff (el b (sbs a x B)) (el b C)))
      (eleq2 ((sbs a x B) C b))
      (sbse (x a B C)
        h)))))

(local theorem elxabed ((A set ()) (G wff ()) (a nat ()) (b nat ()) (p wff ()) (x nat) (B set (x)))
  ((h (im (an G (eq x a)) (iff (el b B) p))))
  (im G (iff (el (pr a b) (xab x A B)) (an (el a A) p)))
()
(syl5bb (G (el (pr a b) (xab x A B)) (an (el a A) (el b (sbs a x B))) (an (el a A) p))
  (elxabs (A a b x B))
  (mpi (G (ex x (eq x a)) (iff (an (el a A) (el b (sbs a x B))) (an (el a A) p)))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (iff (an (el a A) (el b (sbs a x B))) (an (el a A) p)))
      (nfv (G x))
      (nfbi (x (an (el a A) (el b (sbs a x B))) (an (el a A) p))
        (nfan (x (el a A) (el b (sbs a x B)))
          (nfv ((el a A) x))
          (nfel2 (x b (sbs a x B))
            (nfsbs1 (x a B))))
        (nfv ((an (el a A) p) x)))
      (exp (G (eq x a) (iff (an (el a A) (el b (sbs a x B))) (an (el a A) p)))
        (aneq2d ((an G (eq x a)) (el a A) (el b (sbs a x B)) p)
          (bitr3d ((an G (eq x a)) (el b (sbs a x B)) (el b B) p)
            (eleq2d (B (sbs a x B) (an G (eq x a)) b)
              (anwr (G (eq x a) (eqs B (sbs a x B)))
                (sbsq (x a B))))
            h)))))))

(local theorem elxabe ((A set ()) (a nat ()) (b nat ()) (p wff ()) (x nat) (B set (x)))
  ((h (im (eq x a) (iff (el b B) p))))
  (iff (el (pr a b) (xab x A B)) (an (el a A) p))
()
(trud ((iff (el (pr a b) (xab x A B)) (an (el a A) p)))
  (elxabed (A (tru) a b p x B)
    (anwr ((tru) (eq x a) (iff (el b B) p))
      h))))

(local theorem elxabe2 ((A set ()) (a nat ()) (p wff ()) (x nat) (B set (x)))
  ((h (im (eq x (fst a)) (iff (el (snd a) B) p))))
  (iff (el a (xab x A B)) (an (el (fst a) A) p))
()
(ax_mp ((iff (el (pr (fst a) (snd a)) (xab x A B)) (an (el (fst a) A) p)) (iff (el a (xab x A B)) (an (el (fst a) A) p)))
  (ax_mp ((iff (el (pr (fst a) (snd a)) (xab x A B)) (el a (xab x A B))) (im (iff (el (pr (fst a) (snd a)) (xab x A B)) (an (el (fst a) A) p)) (iff (el a (xab x A B)) (an (el (fst a) A) p))))
    (bitr3 ((el a (xab x A B)) (el (pr (fst a) (snd a)) (xab x A B)) (an (el (fst a) A) p)))
    (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (el (pr (fst a) (snd a)) (xab x A B)) (el a (xab x A B))))
      (eleq1 ((xab x A B) (pr (fst a) (snd a)) a))
      (fstsnd (a))))
  (elxabe (A (fst a) (snd a) p x B)
    h)))

(local theorem xabssd ((A set ()) (G wff ()) (x nat) (B set (x)) (C set (x)))
  ((h (im (an G (el x A)) (subset B C))))
  (im G (subset (xab x A B) (xab x A C)))
((x1 nat))
(:conv (im G (subset (xab x A B) (xab x A C)))
  (im
    G
    (subset
      (:unfold xab (x A B) (x1)
        (ab x1 (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B)))))
      (:unfold xab (x A C) (x1)
        (ab x1 (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x C)))))))
  (ssabd (G x1 (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B))) (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x C))))
    (syl (G (im (el (fst x1) A) (im (el (snd x1) (sbs (fst x1) x B)) (el (snd x1) (sbs (fst x1) x C)))) (im (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x B))) (an (el (fst x1) A) (el (snd x1) (sbs (fst x1) x C)))))
      (anim2a ((el (fst x1) A) (el (snd x1) (sbs (fst x1) x B)) (el (snd x1) (sbs (fst x1) x C))))
      (exp (G (el (fst x1) A) (im (el (snd x1) (sbs (fst x1) x B)) (el (snd x1) (sbs (fst x1) x C))))
        (syl ((an G (el (fst x1) A)) (subset (sbs (fst x1) x B) (sbs (fst x1) x C)) (im (el (snd x1) (sbs (fst x1) x B)) (el (snd x1) (sbs (fst x1) x C))))
          (ssel ((sbs (fst x1) x B) (sbs (fst x1) x C) (snd x1)))
          (sbethh ((fst x1) x (im (an G (el x A)) (subset B C)) (im (an G (el (fst x1) A)) (subset (sbs (fst x1) x B) (sbs (fst x1) x C))))
            (nfim (x (an G (el (fst x1) A)) (subset (sbs (fst x1) x B) (sbs (fst x1) x C)))
              (nfv ((an G (el (fst x1) A)) x))
              (nfss (x (sbs (fst x1) x B) (sbs (fst x1) x C))
                (nfsbs1 (x (fst x1) B))
                (nfsbs1 (x (fst x1) C))))
            h
            (imeqd ((eq x (fst x1)) (an G (el x A)) (an G (el (fst x1) A)) (subset B C) (subset (sbs (fst x1) x B) (sbs (fst x1) x C)))
              (aneq2d ((eq x (fst x1)) G (el x A) (el (fst x1) A))
                (eleq1 (A x (fst x1))))
              (sseqd ((eq x (fst x1)) B (sbs (fst x1) x B) C (sbs (fst x1) x C))
                (sbsq (x (fst x1) B))
                (sbsq (x (fst x1) C)))))))))))

(local theorem sabxab ((A set ()) (G wff ()) (x nat) (y nat) (B set (x)))
  ((h (im G (im (el y B) (el x A)))))
  (im G (eqs (sab x B) (xab x A B)))
((z nat))
(eqrd2 ((sab x B) (xab x A B) G z y)
  (bitr4g (G (el y (sbs z x B)) (an (el z A) (el y (sbs z x B))) (el (pr z y) (sab x B)) (el (pr z y) (xab x A B)))
    (elsabs (z y x B))
    (elxabs (A z y x B))
    (bicomd (G (an (el z A) (el y (sbs z x B))) (el y (sbs z x B)))
      (syl (G (im (el y (sbs z x B)) (el z A)) (iff (an (el z A) (el y (sbs z x B))) (el y (sbs z x B))))
        (bian1a ((el z A) (el y (sbs z x B))))
        (sbethh (z x (im G (im (el y B) (el x A))) (im G (im (el y (sbs z x B)) (el z A))))
          (nfim (x G (im (el y (sbs z x B)) (el z A)))
            (nfv (G x))
            (nfim (x (el y (sbs z x B)) (el z A))
              (nfel2 (x y (sbs z x B))
                (nfsbs1 (x z B)))
              (nfv ((el z A) x))))
          h
          (imeq2d ((eq x z) G (im (el y B) (el x A)) (im (el y (sbs z x B)) (el z A)))
            (imeqd ((eq x z) (el y B) (el y (sbs z x B)) (el x A) (el z A))
              (eleq2d (B (sbs z x B) (eq x z) y)
                (sbsq (x z B)))
              (eleq1 (A x z))))))))))

(def Xp ((A set ()) (B set ())) (set ())
((x nat))
(xab x A B))

(local theorem xpeqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (Xp _A1 _B1) (Xp _A2 _B2)))
((x nat))
(:conv (im _G (eqs (Xp _A1 _B1) (Xp _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold Xp (_A1 _B1) (x)
        (xab x _A1 _B1))
      (:unfold Xp (_A2 _B2) (x)
        (xab x _A2 _B2))))
  (xabeqd (_G x _A1 _A2 _B1 _B2)
    _Ah
    _Bh)))

(local theorem xpeq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (eqs (Xp _A1 _B1) (Xp _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (eqs (Xp _A1 _B1) (Xp _A2 _B2)))
  (xpeqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem xpeq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (Xp _A1 B) (Xp _A2 B)))
()
(xpeqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem xpeq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (eqs (Xp _A1 B) (Xp _A2 B)))
()
(xpeq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem xpeq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (Xp A _B1) (Xp A _B2)))
()
(xpeqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem xpeq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (eqs (Xp A _B1) (Xp A _B2)))
()
(xpeq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem nfxp ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nfs x (Xp A B))
((y nat))
(:conv (nfs x (Xp A B))
  (nfs
    x
    (:unfold Xp (A B) (y)
      (xab y A B)))
  (nfxab (y x A B)
    h1
    h2)))

(local theorem prelxp ((A set ()) (B set ()) (a nat ()) (b nat ())) ()
  (iff (el (pr a b) (Xp A B)) (an (el a A) (el b B)))
((x nat))
(:conv (iff (el (pr a b) (Xp A B)) (an (el a A) (el b B)))
  (iff
    (el
      (pr a b)
      (:unfold Xp (A B) (x)
        (xab x A B)))
    (an (el a A) (el b B)))
  (elxab (A B a b x B)
    (eqsidd ((eq x a) B)))))

(local theorem elxp ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)))
()
(ax_mp ((iff (el (pr (fst a) (snd a)) (Xp A B)) (an (el (fst a) A) (el (snd a) B))) (iff (el a (Xp A B)) (an (el (fst a) A) (el (snd a) B))))
  (ax_mp ((iff (el (pr (fst a) (snd a)) (Xp A B)) (el a (Xp A B))) (im (iff (el (pr (fst a) (snd a)) (Xp A B)) (an (el (fst a) A) (el (snd a) B))) (iff (el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)))))
    (bitr3 ((el a (Xp A B)) (el (pr (fst a) (snd a)) (Xp A B)) (an (el (fst a) A) (el (snd a) B))))
    (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (el (pr (fst a) (snd a)) (Xp A B)) (el a (Xp A B))))
      (eleq1 ((Xp A B) (pr (fst a) (snd a)) a))
      (fstsnd (a))))
  (prelxp (A B (fst a) (snd a)))))

(local theorem xpvv () ()
  (eqs (Xp (Univ) (Univ)) (Univ))
((p nat))
(eqri ((Xp (Univ) (Univ)) (Univ) p)
  (ax_mp ((el p (Univ)) (iff (el p (Xp (Univ) (Univ))) (el p (Univ))))
    (ax_mp ((el p (Xp (Univ) (Univ))) (im (el p (Univ)) (iff (el p (Xp (Univ) (Univ))) (el p (Univ)))))
      (bith ((el p (Xp (Univ) (Univ))) (el p (Univ))))
      (mpbir ((an (el (fst p) (Univ)) (el (snd p) (Univ))) (el p (Xp (Univ) (Univ))))
        (elxp ((Univ) (Univ) p))
        (ax_mp ((el (snd p) (Univ)) (an (el (fst p) (Univ)) (el (snd p) (Univ))))
          (ax_mp ((el (fst p) (Univ)) (im (el (snd p) (Univ)) (an (el (fst p) (Univ)) (el (snd p) (Univ)))))
            (ian ((el (fst p) (Univ)) (el (snd p) (Univ))))
            (elv ((fst p))))
          (elv ((snd p))))))
    (elv (p)))))

(local theorem cplxpv1 ((A set ())) ()
  (eqs (Compl (Xp (Univ) A)) (Xp (Univ) (Compl A)))
((p nat))
(:let H1 (elv ((fst p)))
(eqri ((Compl (Xp (Univ) A)) (Xp (Univ) (Compl A)) p)
  (ax_mp ((iff (not (el p (Xp (Univ) A))) (el p (Xp (Univ) (Compl A)))) (iff (el p (Compl (Xp (Univ) A))) (el p (Xp (Univ) (Compl A)))))
    (ax_mp ((iff (el p (Compl (Xp (Univ) A))) (not (el p (Xp (Univ) A)))) (im (iff (not (el p (Xp (Univ) A))) (el p (Xp (Univ) (Compl A)))) (iff (el p (Compl (Xp (Univ) A))) (el p (Xp (Univ) (Compl A))))))
      (bitr ((el p (Compl (Xp (Univ) A))) (not (el p (Xp (Univ) A))) (el p (Xp (Univ) (Compl A)))))
      (elcpl ((Xp (Univ) A) p)))
    (ax_mp ((iff (el p (Xp (Univ) (Compl A))) (not (el (snd p) A))) (iff (not (el p (Xp (Univ) A))) (el p (Xp (Univ) (Compl A)))))
      (ax_mp ((iff (not (el p (Xp (Univ) A))) (not (el (snd p) A))) (im (iff (el p (Xp (Univ) (Compl A))) (not (el (snd p) A))) (iff (not (el p (Xp (Univ) A))) (el p (Xp (Univ) (Compl A))))))
        (bitr4 ((not (el p (Xp (Univ) A))) (not (el (snd p) A)) (el p (Xp (Univ) (Compl A)))))
        (ax_mp ((iff (el p (Xp (Univ) A)) (el (snd p) A)) (iff (not (el p (Xp (Univ) A))) (not (el (snd p) A))))
          (noteq ((el p (Xp (Univ) A)) (el (snd p) A)))
          (ax_mp ((iff (an (el (fst p) (Univ)) (el (snd p) A)) (el (snd p) A)) (iff (el p (Xp (Univ) A)) (el (snd p) A)))
            (ax_mp ((iff (el p (Xp (Univ) A)) (an (el (fst p) (Univ)) (el (snd p) A))) (im (iff (an (el (fst p) (Univ)) (el (snd p) A)) (el (snd p) A)) (iff (el p (Xp (Univ) A)) (el (snd p) A))))
              (bitr ((el p (Xp (Univ) A)) (an (el (fst p) (Univ)) (el (snd p) A)) (el (snd p) A)))
              (elxp ((Univ) A p)))
            (ax_mp ((el (fst p) (Univ)) (iff (an (el (fst p) (Univ)) (el (snd p) A)) (el (snd p) A)))
              (bian1 ((el (fst p) (Univ)) (el (snd p) A)))
              H1))))
      (ax_mp ((iff (an (el (fst p) (Univ)) (el (snd p) (Compl A))) (not (el (snd p) A))) (iff (el p (Xp (Univ) (Compl A))) (not (el (snd p) A))))
        (ax_mp ((iff (el p (Xp (Univ) (Compl A))) (an (el (fst p) (Univ)) (el (snd p) (Compl A)))) (im (iff (an (el (fst p) (Univ)) (el (snd p) (Compl A))) (not (el (snd p) A))) (iff (el p (Xp (Univ) (Compl A))) (not (el (snd p) A)))))
          (bitr ((el p (Xp (Univ) (Compl A))) (an (el (fst p) (Univ)) (el (snd p) (Compl A))) (not (el (snd p) A))))
          (elxp ((Univ) (Compl A) p)))
        (ax_mp ((iff (el (snd p) (Compl A)) (not (el (snd p) A))) (iff (an (el (fst p) (Univ)) (el (snd p) (Compl A))) (not (el (snd p) A))))
          (ax_mp ((iff (an (el (fst p) (Univ)) (el (snd p) (Compl A))) (el (snd p) (Compl A))) (im (iff (el (snd p) (Compl A)) (not (el (snd p) A))) (iff (an (el (fst p) (Univ)) (el (snd p) (Compl A))) (not (el (snd p) A)))))
            (bitr ((an (el (fst p) (Univ)) (el (snd p) (Compl A))) (el (snd p) (Compl A)) (not (el (snd p) A))))
            (ax_mp ((el (fst p) (Univ)) (iff (an (el (fst p) (Univ)) (el (snd p) (Compl A))) (el (snd p) (Compl A))))
              (bian1 ((el (fst p) (Univ)) (el (snd p) (Compl A))))
              H1))
          (elcpl (A (snd p))))))))))

(local theorem cplxpv2 ((A set ())) ()
  (eqs (Compl (Xp A (Univ))) (Xp (Compl A) (Univ)))
((p nat))
(:let H1 (elv ((snd p)))
(eqri ((Compl (Xp A (Univ))) (Xp (Compl A) (Univ)) p)
  (ax_mp ((iff (not (el p (Xp A (Univ)))) (el p (Xp (Compl A) (Univ)))) (iff (el p (Compl (Xp A (Univ)))) (el p (Xp (Compl A) (Univ)))))
    (ax_mp ((iff (el p (Compl (Xp A (Univ)))) (not (el p (Xp A (Univ))))) (im (iff (not (el p (Xp A (Univ)))) (el p (Xp (Compl A) (Univ)))) (iff (el p (Compl (Xp A (Univ)))) (el p (Xp (Compl A) (Univ))))))
      (bitr ((el p (Compl (Xp A (Univ)))) (not (el p (Xp A (Univ)))) (el p (Xp (Compl A) (Univ)))))
      (elcpl ((Xp A (Univ)) p)))
    (ax_mp ((iff (el p (Xp (Compl A) (Univ))) (not (el (fst p) A))) (iff (not (el p (Xp A (Univ)))) (el p (Xp (Compl A) (Univ)))))
      (ax_mp ((iff (not (el p (Xp A (Univ)))) (not (el (fst p) A))) (im (iff (el p (Xp (Compl A) (Univ))) (not (el (fst p) A))) (iff (not (el p (Xp A (Univ)))) (el p (Xp (Compl A) (Univ))))))
        (bitr4 ((not (el p (Xp A (Univ)))) (not (el (fst p) A)) (el p (Xp (Compl A) (Univ)))))
        (ax_mp ((iff (el p (Xp A (Univ))) (el (fst p) A)) (iff (not (el p (Xp A (Univ)))) (not (el (fst p) A))))
          (noteq ((el p (Xp A (Univ))) (el (fst p) A)))
          (ax_mp ((iff (an (el (fst p) A) (el (snd p) (Univ))) (el (fst p) A)) (iff (el p (Xp A (Univ))) (el (fst p) A)))
            (ax_mp ((iff (el p (Xp A (Univ))) (an (el (fst p) A) (el (snd p) (Univ)))) (im (iff (an (el (fst p) A) (el (snd p) (Univ))) (el (fst p) A)) (iff (el p (Xp A (Univ))) (el (fst p) A))))
              (bitr ((el p (Xp A (Univ))) (an (el (fst p) A) (el (snd p) (Univ))) (el (fst p) A)))
              (elxp (A (Univ) p)))
            (ax_mp ((el (snd p) (Univ)) (iff (an (el (fst p) A) (el (snd p) (Univ))) (el (fst p) A)))
              (bian2 ((el (fst p) A) (el (snd p) (Univ))))
              H1))))
      (ax_mp ((iff (an (el (fst p) (Compl A)) (el (snd p) (Univ))) (not (el (fst p) A))) (iff (el p (Xp (Compl A) (Univ))) (not (el (fst p) A))))
        (ax_mp ((iff (el p (Xp (Compl A) (Univ))) (an (el (fst p) (Compl A)) (el (snd p) (Univ)))) (im (iff (an (el (fst p) (Compl A)) (el (snd p) (Univ))) (not (el (fst p) A))) (iff (el p (Xp (Compl A) (Univ))) (not (el (fst p) A)))))
          (bitr ((el p (Xp (Compl A) (Univ))) (an (el (fst p) (Compl A)) (el (snd p) (Univ))) (not (el (fst p) A))))
          (elxp ((Compl A) (Univ) p)))
        (ax_mp ((iff (el (fst p) (Compl A)) (not (el (fst p) A))) (iff (an (el (fst p) (Compl A)) (el (snd p) (Univ))) (not (el (fst p) A))))
          (ax_mp ((iff (an (el (fst p) (Compl A)) (el (snd p) (Univ))) (el (fst p) (Compl A))) (im (iff (el (fst p) (Compl A)) (not (el (fst p) A))) (iff (an (el (fst p) (Compl A)) (el (snd p) (Univ))) (not (el (fst p) A)))))
            (bitr ((an (el (fst p) (Compl A)) (el (snd p) (Univ))) (el (fst p) (Compl A)) (not (el (fst p) A))))
            (ax_mp ((el (snd p) (Univ)) (iff (an (el (fst p) (Compl A)) (el (snd p) (Univ))) (el (fst p) (Compl A))))
              (bian2 ((el (fst p) (Compl A)) (el (snd p) (Univ))))
              H1))
          (elcpl (A (fst p))))))))))

(local theorem xpss1 ((A set ()) (B set ()) (C set ())) ()
  (im (subset A B) (subset (Xp A C) (Xp B C)))
((p nat))
(:conv (im (subset A B) (subset (Xp A C) (Xp B C)))
  (im
    (subset A B)
    (:unfold subset ((Xp A C) (Xp B C)) (p)
      (al p (im (el p (Xp A C)) (el p (Xp B C))))))
  (iald (p (subset A B) (im (el p (Xp A C)) (el p (Xp B C))))
    (sylibr ((subset A B) (im (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C))) (im (el p (Xp A C)) (el p (Xp B C))))
      (imeqi ((el p (Xp A C)) (an (el (fst p) A) (el (snd p) C)) (el p (Xp B C)) (an (el (fst p) B) (el (snd p) C)))
        (elxp (A C p))
        (elxp (B C p)))
      (anim1d ((subset A B) (el (fst p) A) (el (fst p) B) (el (snd p) C))
        (ssel (A B (fst p))))))))

(local theorem xpss2 ((A set ()) (B set ()) (C set ())) ()
  (im (subset B C) (subset (Xp A B) (Xp A C)))
((p nat))
(:conv (im (subset B C) (subset (Xp A B) (Xp A C)))
  (im
    (subset B C)
    (:unfold subset ((Xp A B) (Xp A C)) (p)
      (al p (im (el p (Xp A B)) (el p (Xp A C))))))
  (iald (p (subset B C) (im (el p (Xp A B)) (el p (Xp A C))))
    (sylibr ((subset B C) (im (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C))) (im (el p (Xp A B)) (el p (Xp A C))))
      (imeqi ((el p (Xp A B)) (an (el (fst p) A) (el (snd p) B)) (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C)))
        (elxp (A B p))
        (elxp (A C p)))
      (anim2d ((subset B C) (el (fst p) A) (el (snd p) B) (el (snd p) C))
        (ssel (B C (snd p))))))))

(local theorem xpundi ((A set ()) (B set ()) (C set ())) ()
  (eqs (Xp (Union A B) C) (Union (Xp A C) (Xp B C)))
((p nat))
(eqri ((Xp (Union A B) C) (Union (Xp A C) (Xp B C)) p)
  (ax_mp ((iff (an (el (fst p) (Union A B)) (el (snd p) C)) (el p (Union (Xp A C) (Xp B C)))) (iff (el p (Xp (Union A B) C)) (el p (Union (Xp A C) (Xp B C)))))
    (ax_mp ((iff (el p (Xp (Union A B) C)) (an (el (fst p) (Union A B)) (el (snd p) C))) (im (iff (an (el (fst p) (Union A B)) (el (snd p) C)) (el p (Union (Xp A C) (Xp B C)))) (iff (el p (Xp (Union A B) C)) (el p (Union (Xp A C) (Xp B C))))))
      (bitr ((el p (Xp (Union A B) C)) (an (el (fst p) (Union A B)) (el (snd p) C)) (el p (Union (Xp A C) (Xp B C)))))
      (elxp ((Union A B) C p)))
    (ax_mp ((iff (el p (Union (Xp A C) (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (an (el (fst p) (Union A B)) (el (snd p) C)) (el p (Union (Xp A C) (Xp B C)))))
      (ax_mp ((iff (an (el (fst p) (Union A B)) (el (snd p) C)) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (im (iff (el p (Union (Xp A C) (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (an (el (fst p) (Union A B)) (el (snd p) C)) (el p (Union (Xp A C) (Xp B C))))))
        (bitr4 ((an (el (fst p) (Union A B)) (el (snd p) C)) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C)) (el p (Union (Xp A C) (Xp B C)))))
        (aneq1i ((el (fst p) (Union A B)) (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))
          (elun (A B (fst p)))))
      (ax_mp ((iff (or (el p (Xp A C)) (el p (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (el p (Union (Xp A C) (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
        (ax_mp ((iff (el p (Union (Xp A C) (Xp B C))) (or (el p (Xp A C)) (el p (Xp B C)))) (im (iff (or (el p (Xp A C)) (el p (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (el p (Union (Xp A C) (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C)))))
          (bitr ((el p (Union (Xp A C) (Xp B C))) (or (el p (Xp A C)) (el p (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
          (elun ((Xp A C) (Xp B C) p)))
        (ax_mp ((iff (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C)) (or (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))) (iff (or (el p (Xp A C)) (el p (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
          (ax_mp ((iff (or (el p (Xp A C)) (el p (Xp B C))) (or (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))) (im (iff (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C)) (or (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))) (iff (or (el p (Xp A C)) (el p (Xp B C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C)))))
            (bitr4 ((or (el p (Xp A C)) (el p (Xp B C))) (or (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C))) (an (or (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
            (ax_mp ((iff (el p (Xp B C)) (an (el (fst p) B) (el (snd p) C))) (iff (or (el p (Xp A C)) (el p (Xp B C))) (or (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))))
              (ax_mp ((iff (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))) (im (iff (el p (Xp B C)) (an (el (fst p) B) (el (snd p) C))) (iff (or (el p (Xp A C)) (el p (Xp B C))) (or (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C))))))
                (oreq ((el p (Xp A C)) (an (el (fst p) A) (el (snd p) C)) (el p (Xp B C)) (an (el (fst p) B) (el (snd p) C))))
                (elxp (A C p)))
              (elxp (B C p))))
          (andir ((el (fst p) A) (el (fst p) B) (el (snd p) C)))))))))

(local theorem xpundir ((A set ()) (B set ()) (C set ())) ()
  (eqs (Xp A (Union B C)) (Union (Xp A B) (Xp A C)))
((p nat))
(eqri ((Xp A (Union B C)) (Union (Xp A B) (Xp A C)) p)
  (ax_mp ((iff (an (el (fst p) A) (el (snd p) (Union B C))) (el p (Union (Xp A B) (Xp A C)))) (iff (el p (Xp A (Union B C))) (el p (Union (Xp A B) (Xp A C)))))
    (ax_mp ((iff (el p (Xp A (Union B C))) (an (el (fst p) A) (el (snd p) (Union B C)))) (im (iff (an (el (fst p) A) (el (snd p) (Union B C))) (el p (Union (Xp A B) (Xp A C)))) (iff (el p (Xp A (Union B C))) (el p (Union (Xp A B) (Xp A C))))))
      (bitr ((el p (Xp A (Union B C))) (an (el (fst p) A) (el (snd p) (Union B C))) (el p (Union (Xp A B) (Xp A C)))))
      (elxp (A (Union B C) p)))
    (ax_mp ((iff (el p (Union (Xp A B) (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))) (iff (an (el (fst p) A) (el (snd p) (Union B C))) (el p (Union (Xp A B) (Xp A C)))))
      (ax_mp ((iff (an (el (fst p) A) (el (snd p) (Union B C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))) (im (iff (el p (Union (Xp A B) (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))) (iff (an (el (fst p) A) (el (snd p) (Union B C))) (el p (Union (Xp A B) (Xp A C))))))
        (bitr4 ((an (el (fst p) A) (el (snd p) (Union B C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C))) (el p (Union (Xp A B) (Xp A C)))))
        (aneq2i ((el (fst p) A) (el (snd p) (Union B C)) (or (el (snd p) B) (el (snd p) C)))
          (elun (B C (snd p)))))
      (ax_mp ((iff (or (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))) (iff (el p (Union (Xp A B) (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))))
        (ax_mp ((iff (el p (Union (Xp A B) (Xp A C))) (or (el p (Xp A B)) (el p (Xp A C)))) (im (iff (or (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))) (iff (el p (Union (Xp A B) (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C))))))
          (bitr ((el p (Union (Xp A B) (Xp A C))) (or (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))))
          (elun ((Xp A B) (Xp A C) p)))
        (ax_mp ((iff (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C))) (or (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))) (iff (or (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))))
          (ax_mp ((iff (or (el p (Xp A B)) (el p (Xp A C))) (or (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))) (im (iff (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C))) (or (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))) (iff (or (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C))))))
            (bitr4 ((or (el p (Xp A B)) (el p (Xp A C))) (or (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C))) (an (el (fst p) A) (or (el (snd p) B) (el (snd p) C)))))
            (ax_mp ((iff (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))) (iff (or (el p (Xp A B)) (el p (Xp A C))) (or (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))))
              (ax_mp ((iff (el p (Xp A B)) (an (el (fst p) A) (el (snd p) B))) (im (iff (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))) (iff (or (el p (Xp A B)) (el p (Xp A C))) (or (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C))))))
                (oreq ((el p (Xp A B)) (an (el (fst p) A) (el (snd p) B)) (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))))
                (elxp (A B p)))
              (elxp (A C p))))
          (andi ((el (fst p) A) (el (snd p) B) (el (snd p) C)))))))))

(local theorem xpindi ((A set ()) (B set ()) (C set ())) ()
  (eqs (Xp (Inter A B) C) (Inter (Xp A C) (Xp B C)))
((p nat))
(eqri ((Xp (Inter A B) C) (Inter (Xp A C) (Xp B C)) p)
  (ax_mp ((iff (an (el (fst p) (Inter A B)) (el (snd p) C)) (el p (Inter (Xp A C) (Xp B C)))) (iff (el p (Xp (Inter A B) C)) (el p (Inter (Xp A C) (Xp B C)))))
    (ax_mp ((iff (el p (Xp (Inter A B) C)) (an (el (fst p) (Inter A B)) (el (snd p) C))) (im (iff (an (el (fst p) (Inter A B)) (el (snd p) C)) (el p (Inter (Xp A C) (Xp B C)))) (iff (el p (Xp (Inter A B) C)) (el p (Inter (Xp A C) (Xp B C))))))
      (bitr ((el p (Xp (Inter A B) C)) (an (el (fst p) (Inter A B)) (el (snd p) C)) (el p (Inter (Xp A C) (Xp B C)))))
      (elxp ((Inter A B) C p)))
    (ax_mp ((iff (el p (Inter (Xp A C) (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (an (el (fst p) (Inter A B)) (el (snd p) C)) (el p (Inter (Xp A C) (Xp B C)))))
      (ax_mp ((iff (an (el (fst p) (Inter A B)) (el (snd p) C)) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (im (iff (el p (Inter (Xp A C) (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (an (el (fst p) (Inter A B)) (el (snd p) C)) (el p (Inter (Xp A C) (Xp B C))))))
        (bitr4 ((an (el (fst p) (Inter A B)) (el (snd p) C)) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C)) (el p (Inter (Xp A C) (Xp B C)))))
        (aneq1i ((el (fst p) (Inter A B)) (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))
          (elin (A B (fst p)))))
      (ax_mp ((iff (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (el p (Inter (Xp A C) (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
        (ax_mp ((iff (el p (Inter (Xp A C) (Xp B C))) (an (el p (Xp A C)) (el p (Xp B C)))) (im (iff (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))) (iff (el p (Inter (Xp A C) (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C)))))
          (bitr ((el p (Inter (Xp A C) (Xp B C))) (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
          (elin ((Xp A C) (Xp B C) p)))
        (ax_mp ((iff (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C)) (an (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))) (iff (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
          (ax_mp ((iff (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))) (im (iff (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C)) (an (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))) (iff (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C)))))
            (bitr4 ((an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C))) (an (an (el (fst p) A) (el (fst p) B)) (el (snd p) C))))
            (ax_mp ((iff (el p (Xp B C)) (an (el (fst p) B) (el (snd p) C))) (iff (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C)))))
              (ax_mp ((iff (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))) (im (iff (el p (Xp B C)) (an (el (fst p) B) (el (snd p) C))) (iff (an (el p (Xp A C)) (el p (Xp B C))) (an (an (el (fst p) A) (el (snd p) C)) (an (el (fst p) B) (el (snd p) C))))))
                (aneq ((el p (Xp A C)) (an (el (fst p) A) (el (snd p) C)) (el p (Xp B C)) (an (el (fst p) B) (el (snd p) C))))
                (elxp (A C p)))
              (elxp (B C p))))
          (anandir ((el (fst p) A) (el (fst p) B) (el (snd p) C)))))))))

(local theorem xpindir ((A set ()) (B set ()) (C set ())) ()
  (eqs (Xp A (Inter B C)) (Inter (Xp A B) (Xp A C)))
((p nat))
(eqri ((Xp A (Inter B C)) (Inter (Xp A B) (Xp A C)) p)
  (ax_mp ((iff (an (el (fst p) A) (el (snd p) (Inter B C))) (el p (Inter (Xp A B) (Xp A C)))) (iff (el p (Xp A (Inter B C))) (el p (Inter (Xp A B) (Xp A C)))))
    (ax_mp ((iff (el p (Xp A (Inter B C))) (an (el (fst p) A) (el (snd p) (Inter B C)))) (im (iff (an (el (fst p) A) (el (snd p) (Inter B C))) (el p (Inter (Xp A B) (Xp A C)))) (iff (el p (Xp A (Inter B C))) (el p (Inter (Xp A B) (Xp A C))))))
      (bitr ((el p (Xp A (Inter B C))) (an (el (fst p) A) (el (snd p) (Inter B C))) (el p (Inter (Xp A B) (Xp A C)))))
      (elxp (A (Inter B C) p)))
    (ax_mp ((iff (el p (Inter (Xp A B) (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))) (iff (an (el (fst p) A) (el (snd p) (Inter B C))) (el p (Inter (Xp A B) (Xp A C)))))
      (ax_mp ((iff (an (el (fst p) A) (el (snd p) (Inter B C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))) (im (iff (el p (Inter (Xp A B) (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))) (iff (an (el (fst p) A) (el (snd p) (Inter B C))) (el p (Inter (Xp A B) (Xp A C))))))
        (bitr4 ((an (el (fst p) A) (el (snd p) (Inter B C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C))) (el p (Inter (Xp A B) (Xp A C)))))
        (aneq2i ((el (fst p) A) (el (snd p) (Inter B C)) (an (el (snd p) B) (el (snd p) C)))
          (elin (B C (snd p)))))
      (ax_mp ((iff (an (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))) (iff (el p (Inter (Xp A B) (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))))
        (ax_mp ((iff (el p (Inter (Xp A B) (Xp A C))) (an (el p (Xp A B)) (el p (Xp A C)))) (im (iff (an (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))) (iff (el p (Inter (Xp A B) (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C))))))
          (bitr ((el p (Inter (Xp A B) (Xp A C))) (an (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))))
          (elin ((Xp A B) (Xp A C) p)))
        (ax_mp ((iff (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C))) (an (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))) (iff (an (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))))
          (ax_mp ((iff (an (el p (Xp A B)) (el p (Xp A C))) (an (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))) (im (iff (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C))) (an (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))) (iff (an (el p (Xp A B)) (el p (Xp A C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C))))))
            (bitr4 ((an (el p (Xp A B)) (el p (Xp A C))) (an (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C))) (an (el (fst p) A) (an (el (snd p) B) (el (snd p) C)))))
            (ax_mp ((iff (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))) (iff (an (el p (Xp A B)) (el p (Xp A C))) (an (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C)))))
              (ax_mp ((iff (el p (Xp A B)) (an (el (fst p) A) (el (snd p) B))) (im (iff (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))) (iff (an (el p (Xp A B)) (el p (Xp A C))) (an (an (el (fst p) A) (el (snd p) B)) (an (el (fst p) A) (el (snd p) C))))))
                (aneq ((el p (Xp A B)) (an (el (fst p) A) (el (snd p) B)) (el p (Xp A C)) (an (el (fst p) A) (el (snd p) C))))
                (elxp (A B p)))
              (elxp (A C p))))
          (anandi ((el (fst p) A) (el (snd p) B) (el (snd p) C)))))))))

(local theorem xpfst ((A set ()) (B set ()) (a nat ())) ()
  (im (el a (Xp A B)) (el (fst a) A))
()
(sylbi ((el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)) (el (fst a) A))
  (elxp (A B a))
  (anl ((el (fst a) A) (el (snd a) B)))))

(local theorem xpsnd ((A set ()) (B set ()) (a nat ())) ()
  (im (el a (Xp A B)) (el (snd a) B))
()
(sylbi ((el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)) (el (snd a) B))
  (elxp (A B a))
  (anr ((el (fst a) A) (el (snd a) B)))))

(local theorem prelxp1 ((A set ()) (B set ()) (a nat ()) (b nat ())) ()
  (im (el (pr a b) (Xp A B)) (el a A))
()
(sylbi ((el (pr a b) (Xp A B)) (an (el a A) (el b B)) (el a A))
  (prelxp (A B a b))
  (anl ((el a A) (el b B)))))

(local theorem prelxp2 ((A set ()) (B set ()) (a nat ()) (b nat ())) ()
  (im (el (pr a b) (Xp A B)) (el b B))
()
(sylbi ((el (pr a b) (Xp A B)) (an (el a A) (el b B)) (el b B))
  (prelxp (A B a b))
  (anr ((el a A) (el b B)))))

(local theorem xpTd ((A set ()) (B set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (el a A)))
   (h2 (im G (el b B))))
  (im G (el (pr a b) (Xp A B)))
()
(sylibr (G (an (el a A) (el b B)) (el (pr a b) (Xp A B)))
  (prelxp (A B a b))
  (iand (G (el a A) (el b B))
    h1
    h2)))

(local theorem xppi11 ((A set ()) (B set ()) (C set ()) (a nat ())) ()
  (im (el a (Xp (Xp A B) C)) (el (pi11 a) A))
()
(rsyl ((el a (Xp (Xp A B) C)) (el (fst a) (Xp A B)) (el (pi11 a) A))
  (xpfst ((Xp A B) C a))
  (:conv (im (el (fst a) (Xp A B)) (el (pi11 a) A))
    (im
      (el (fst a) (Xp A B))
      (el
        (:unfold pi11 (a) ()
          (fst (fst a)))
        A))
    (xpfst (A B (fst a))))))

(local theorem xppi12 ((A set ()) (B set ()) (C set ()) (a nat ())) ()
  (im (el a (Xp (Xp A B) C)) (el (pi12 a) B))
()
(rsyl ((el a (Xp (Xp A B) C)) (el (fst a) (Xp A B)) (el (pi12 a) B))
  (xpfst ((Xp A B) C a))
  (:conv (im (el (fst a) (Xp A B)) (el (pi12 a) B))
    (im
      (el (fst a) (Xp A B))
      (el
        (:unfold pi12 (a) ()
          (snd (fst a)))
        B))
    (xpsnd (A B (fst a))))))

(local theorem xppi21 ((A set ()) (B set ()) (C set ()) (a nat ())) ()
  (im (el a (Xp A (Xp B C))) (el (pi21 a) B))
()
(rsyl ((el a (Xp A (Xp B C))) (el (snd a) (Xp B C)) (el (pi21 a) B))
  (xpsnd (A (Xp B C) a))
  (:conv (im (el (snd a) (Xp B C)) (el (pi21 a) B))
    (im
      (el (snd a) (Xp B C))
      (el
        (:unfold pi21 (a) ()
          (fst (snd a)))
        B))
    (xpfst (B C (snd a))))))

(local theorem xppi22 ((A set ()) (B set ()) (C set ()) (a nat ())) ()
  (im (el a (Xp A (Xp B C))) (el (pi22 a) C))
()
(rsyl ((el a (Xp A (Xp B C))) (el (snd a) (Xp B C)) (el (pi22 a) C))
  (xpsnd (A (Xp B C) a))
  (:conv (im (el (snd a) (Xp B C)) (el (pi22 a) C))
    (im
      (el (snd a) (Xp B C))
      (el
        (:unfold pi22 (a) ()
          (snd (snd a)))
        C))
    (xpsnd (B C (snd a))))))

(local theorem xppi221 ((A set ()) (B set ()) (C set ()) (D set ()) (a nat ())) ()
  (im (el a (Xp A (Xp B (Xp C D)))) (el (pi221 a) C))
()
(rsyl ((el a (Xp A (Xp B (Xp C D)))) (el (pi22 a) (Xp C D)) (el (pi221 a) C))
  (xppi22 (A B (Xp C D) a))
  (:conv (im (el (pi22 a) (Xp C D)) (el (pi221 a) C))
    (im
      (el (pi22 a) (Xp C D))
      (el
        (:unfold pi221 (a) ()
          (fst (pi22 a)))
        C))
    (xpfst (C D (pi22 a))))))

(local theorem xppi222 ((A set ()) (B set ()) (C set ()) (D set ()) (a nat ())) ()
  (im (el a (Xp A (Xp B (Xp C D)))) (el (pi222 a) D))
()
(rsyl ((el a (Xp A (Xp B (Xp C D)))) (el (pi22 a) (Xp C D)) (el (pi222 a) D))
  (xppi22 (A B (Xp C D) a))
  (:conv (im (el (pi22 a) (Xp C D)) (el (pi222 a) D))
    (im
      (el (pi22 a) (Xp C D))
      (el
        (:unfold pi222 (a) ()
          (snd (pi22 a)))
        D))
    (xpsnd (C D (pi22 a))))))

(local theorem xpfin ((A set ()) (B set ())) ()
  (im (finite A) (im (finite B) (finite (Xp A B))))
((m nat) (n nat) (p nat) (x nat) (y nat) (z nat))
(:conv (im (finite A) (im (finite B) (finite (Xp A B))))
  (im
    (:unfold finite (A) (m x)
      (ex m (al x (im (el x A) (lt x m)))))
    (im (finite B) (finite (Xp A B))))
  (eex (m (al x (im (el x A) (lt x m))) (im (finite B) (finite (Xp A B))))
    (:conv (im (al x (im (el x A) (lt x m))) (im (finite B) (finite (Xp A B))))
      (im
        (al x (im (el x A) (lt x m)))
        (im
          (:unfold finite (B) (n y)
            (ex n (al y (im (el y B) (lt y n)))))
          (finite (Xp A B))))
      (eexda (n (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n))) (finite (Xp A B)))
        (syl ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0))))) (finite (Xp A B)))
          (:conv (im (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0))))) (finite (Xp A B)))
            (im
              (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0)))))
              (:unfold finite ((Xp A B)) (z p)
                (ex z (al p (im (el p (Xp A B)) (lt p z))))))
            (iexe (z (pr (add m n) (d0)) (al p (im (el p (Xp A B)) (lt p z))) (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0))))))
              (aleqd ((eq z (pr (add m n) (d0))) p (im (el p (Xp A B)) (lt p z)) (im (el p (Xp A B)) (lt p (pr (add m n) (d0)))))
                (imeq2d ((eq z (pr (add m n) (d0))) (el p (Xp A B)) (lt p z) (lt p (pr (add m n) (d0))))
                  (lteq2 (p z (pr (add m n) (d0))))))))
          (iald (p (an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (im (el p (Xp A B)) (lt p (pr (add m n) (d0)))))
            (syl5bi ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (el p (Xp A B)) (an (el (fst p) A) (el (snd p) B)) (lt p (pr (add m n) (d0))))
              (elxp (A B p))
              (syl6 ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (an (el (fst p) A) (el (snd p) B)) (an (lt (fst p) m) (lt (snd p) n)) (lt p (pr (add m n) (d0))))
                (sylib ((an (lt (fst p) m) (lt (snd p) n)) (lt (pr (fst p) (snd p)) (pr (add m n) (d0))) (lt p (pr (add m n) (d0))))
                  (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (lt (pr (fst p) (snd p)) (pr (add m n) (d0))) (lt p (pr (add m n) (d0)))))
                    (lteq1 ((pr (fst p) (snd p)) p (pr (add m n) (d0))))
                    (fstsnd (p)))
                  (imp ((lt (fst p) m) (lt (snd p) n) (lt (pr (fst p) (snd p)) (pr (add m n) (d0))))
                    (sylibr ((lt (fst p) m) (im (not (le n (snd p))) (not (le (pr (add m n) (d0)) (pr (fst p) (snd p))))) (im (lt (snd p) n) (lt (pr (fst p) (snd p)) (pr (add m n) (d0)))))
                      (imeqi ((lt (snd p) n) (not (le n (snd p))) (lt (pr (fst p) (snd p)) (pr (add m n) (d0))) (not (le (pr (add m n) (d0)) (pr (fst p) (snd p)))))
                        (ltnle ((snd p) n))
                        (ltnle ((pr (fst p) (snd p)) (pr (add m n) (d0)))))
                      (con3d ((lt (fst p) m) (le (pr (add m n) (d0)) (pr (fst p) (snd p))) (le n (snd p)))
                        (syl5 ((lt (fst p) m) (le (pr (add m n) (d0)) (pr (fst p) (snd p))) (le (add (add m n) (d0)) (add (fst p) (snd p))) (le n (snd p)))
                          (prlem2 ((add m n) (fst p) (d0) (snd p)))
                          (syl5bi ((lt (fst p) m) (le (add (add m n) (d0)) (add (fst p) (snd p))) (le (add m n) (add (fst p) (snd p))) (le n (snd p)))
                            (ax_mp ((eq (add (add m n) (d0)) (add m n)) (iff (le (add (add m n) (d0)) (add (fst p) (snd p))) (le (add m n) (add (fst p) (snd p)))))
                              (leeq1 ((add (add m n) (d0)) (add m n) (add (fst p) (snd p))))
                              (add0 ((add m n))))
                            (syl6ibr ((lt (fst p) m) (le (add m n) (add (fst p) (snd p))) (le (add (fst p) n) (add (fst p) (snd p))) (le n (snd p)))
                              (leadd2 ((fst p) n (snd p)))
                              (syl ((lt (fst p) m) (le (add (fst p) n) (add m n)) (im (le (add m n) (add (fst p) (snd p))) (le (add (fst p) n) (add (fst p) (snd p)))))
                                (letr ((add (fst p) n) (add m n) (add (fst p) (snd p))))
                                (sylib ((lt (fst p) m) (le (fst p) m) (le (add (fst p) n) (add m n)))
                                  (leadd1 ((fst p) m n))
                                  (ltle ((fst p) m)))))))))))
                (animd ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (el (fst p) A) (lt (fst p) m) (el (snd p) B) (lt (snd p) n))
                  (anwl ((al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n))) (im (el (fst p) A) (lt (fst p) m)))
                    (eale (x (fst p) (im (el x A) (lt x m)) (im (el (fst p) A) (lt (fst p) m)))
                      (imeqd ((eq x (fst p)) (el x A) (el (fst p) A) (lt x m) (lt (fst p) m))
                        (eleq1 (A x (fst p)))
                        (lteq1 (x (fst p) m)))))
                  (anwr ((al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n))) (im (el (snd p) B) (lt (snd p) n)))
                    (eale (y (snd p) (im (el y B) (lt y n)) (im (el (snd p) B) (lt (snd p) n)))
                      (imeqd ((eq y (snd p)) (el y B) (el (snd p) B) (lt y n) (lt (snd p) n))
                        (eleq1 (B y (snd p)))
                        (lteq1 (y (snd p) n)))))))))))))))

(local theorem xabconst ((A set ()) (B set ()) (x nat)) ()
  (eqs (xab x A B) (Xp A B))
((x1 nat) (x2 nat))
(eqri2 ((xab x A B) (Xp A B) x1 x2)
  (ax_mp ((iff (el (pr x1 x2) (Xp A B)) (an (el x1 A) (el x2 B))) (iff (el (pr x1 x2) (xab x A B)) (el (pr x1 x2) (Xp A B))))
    (ax_mp ((iff (el (pr x1 x2) (xab x A B)) (an (el x1 A) (el x2 B))) (im (iff (el (pr x1 x2) (Xp A B)) (an (el x1 A) (el x2 B))) (iff (el (pr x1 x2) (xab x A B)) (el (pr x1 x2) (Xp A B)))))
      (bitr4 ((el (pr x1 x2) (xab x A B)) (an (el x1 A) (el x2 B)) (el (pr x1 x2) (Xp A B))))
      (elxab (A B x1 x2 x B)
        (eqsidd ((eq x x1) B))))
    (prelxp (A B x1 x2)))))

(local theorem sabssxped ((A set ()) (C set ()) (G wff ()) (a nat ()) (p wff ()) (x nat) (B set (x)))
  ((h (im (an G (eq x (fst a))) (im (el (snd a) B) (an (an p (el x A)) (el (snd a) C))))))
  (im G (im (el a (sab x B)) (an p (el a (Xp A C)))))
()
(syl5bir (G (el a (sab x B)) (el (snd a) (sbs (fst a) x B)) (an p (el a (Xp A C))))
  (ax_mp ((iff (el (pr (fst a) (snd a)) (sab x B)) (el a (sab x B))) (iff (el (snd a) (sbs (fst a) x B)) (el a (sab x B))))
    (ax_mp ((iff (el (pr (fst a) (snd a)) (sab x B)) (el (snd a) (sbs (fst a) x B))) (im (iff (el (pr (fst a) (snd a)) (sab x B)) (el a (sab x B))) (iff (el (snd a) (sbs (fst a) x B)) (el a (sab x B)))))
      (bitr3 ((el (snd a) (sbs (fst a) x B)) (el (pr (fst a) (snd a)) (sab x B)) (el a (sab x B))))
      (elsabs ((fst a) (snd a) x B)))
    (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (el (pr (fst a) (snd a)) (sab x B)) (el a (sab x B))))
      (eleq1 ((sab x B) (pr (fst a) (snd a)) a))
      (fstsnd (a))))
  (syl6ibr (G (el (snd a) (sbs (fst a) x B)) (an p (an (el (fst a) A) (el (snd a) C))) (an p (el a (Xp A C))))
    (aneq2i (p (el a (Xp A C)) (an (el (fst a) A) (el (snd a) C)))
      (elxp (A C a)))
    (mpi (G (ex x (eq x (fst a))) (im (el (snd a) (sbs (fst a) x B)) (an p (an (el (fst a) A) (el (snd a) C)))))
      (ax_6 ((fst a) x))
      (eexdh (x G (eq x (fst a)) (im (el (snd a) (sbs (fst a) x B)) (an p (an (el (fst a) A) (el (snd a) C)))))
        (nfv (G x))
        (nfim (x (el (snd a) (sbs (fst a) x B)) (an p (an (el (fst a) A) (el (snd a) C))))
          (nfel2 (x (snd a) (sbs (fst a) x B))
            (nfsbs1 (x (fst a) B)))
          (nfv ((an p (an (el (fst a) A) (el (snd a) C))) x)))
        (exp (G (eq x (fst a)) (im (el (snd a) (sbs (fst a) x B)) (an p (an (el (fst a) A) (el (snd a) C)))))
          (mpbid ((an G (eq x (fst a))) (im (el (snd a) B) (an (an p (el x A)) (el (snd a) C))) (im (el (snd a) (sbs (fst a) x B)) (an p (an (el (fst a) A) (el (snd a) C)))))
            (anwr (G (eq x (fst a)) (iff (im (el (snd a) B) (an (an p (el x A)) (el (snd a) C))) (im (el (snd a) (sbs (fst a) x B)) (an p (an (el (fst a) A) (el (snd a) C))))))
              (imeqd ((eq x (fst a)) (el (snd a) B) (el (snd a) (sbs (fst a) x B)) (an (an p (el x A)) (el (snd a) C)) (an p (an (el (fst a) A) (el (snd a) C))))
                (eleq2d (B (sbs (fst a) x B) (eq x (fst a)) (snd a))
                  (sbsq (x (fst a) B)))
                (syl6bb ((eq x (fst a)) (an (an p (el x A)) (el (snd a) C)) (an (an p (el (fst a) A)) (el (snd a) C)) (an p (an (el (fst a) A) (el (snd a) C))))
                  (anass (p (el (fst a) A) (el (snd a) C)))
                  (aneq1d ((eq x (fst a)) (an p (el x A)) (an p (el (fst a) A)) (el (snd a) C))
                    (aneq2d ((eq x (fst a)) p (el x A) (el (fst a) A))
                      (eleq1 (A x (fst a))))))))
            h)))))))

(local theorem sabssxpe ((A set ()) (C set ()) (a nat ()) (x nat) (B set (x)))
  ((h (im (eq x (fst a)) (im (el (snd a) B) (an (el x A) (el (snd a) C))))))
  (im (el a (sab x B)) (el a (Xp A C)))
()
(trud ((im (el a (sab x B)) (el a (Xp A C))))
  (syl6 ((tru) (el a (sab x B)) (an (tru) (el a (Xp A C))) (el a (Xp A C)))
    (anr ((tru) (el a (Xp A C))))
    (sabssxped (A C (tru) a (tru) x B)
      (anwr ((tru) (eq x (fst a)) (im (el (snd a) B) (an (an (tru) (el x A)) (el (snd a) C))))
        (syl6 ((eq x (fst a)) (el (snd a) B) (an (el x A) (el (snd a) C)) (an (an (tru) (el x A)) (el (snd a) C)))
          (ax_mp ((im (el x A) (an (tru) (el x A))) (im (an (el x A) (el (snd a) C)) (an (an (tru) (el x A)) (el (snd a) C))))
            (anim1 ((el x A) (an (tru) (el x A)) (el (snd a) C)))
            (trud ((im (el x A) (an (tru) (el x A))))
              (ian ((tru) (el x A)))))
          h))))))

(def Dom ((A set ())) (set ())
((x nat) (y nat))
(ab x (ex y (el (pr x y) A))))

(local theorem dmeqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Dom _A1) (Dom _A2)))
((x nat) (y nat))
(:conv (im _G (eqs (Dom _A1) (Dom _A2)))
  (im
    _G
    (eqs
      (:unfold Dom (_A1) (x y)
        (ab x (ex y (el (pr x y) _A1))))
      (:unfold Dom (_A2) (x y)
        (ab x (ex y (el (pr x y) _A2))))))
  (abeqd (_G x (ex y (el (pr x y) _A1)) (ex y (el (pr x y) _A2)))
    (exeqd (_G y (el (pr x y) _A1) (el (pr x y) _A2))
      (eleqd (_G (pr x y) (pr x y) _A1 _A2)
        (eqidd (_G (pr x y)))
        _Ah)))))

(local theorem dmeq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Dom _A1) (Dom _A2)))
()
(dmeqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(def Ran ((A set ())) (set ())
((x nat) (y nat))
(ab y (ex x (el (pr x y) A))))

(local theorem rneqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Ran _A1) (Ran _A2)))
((x nat) (y nat))
(:conv (im _G (eqs (Ran _A1) (Ran _A2)))
  (im
    _G
    (eqs
      (:unfold Ran (_A1) (x y)
        (ab y (ex x (el (pr x y) _A1))))
      (:unfold Ran (_A2) (x y)
        (ab y (ex x (el (pr x y) _A2))))))
  (abeqd (_G y (ex x (el (pr x y) _A1)) (ex x (el (pr x y) _A2)))
    (exeqd (_G x (el (pr x y) _A1) (el (pr x y) _A2))
      (eleqd (_G (pr x y) (pr x y) _A1 _A2)
        (eqidd (_G (pr x y)))
        _Ah)))))

(local theorem rneq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Ran _A1) (Ran _A2)))
()
(rneqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(def Im ((F set ()) (A set ())) (set ())
((x nat) (y nat))
(ab y (ex x (an (el x A) (el (pr x y) F)))))

(local theorem imaeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_A1 set ()) (_A2 set ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Im _F1 _A1) (Im _F2 _A2)))
((x nat) (y nat))
(:conv (im _G (eqs (Im _F1 _A1) (Im _F2 _A2)))
  (im
    _G
    (eqs
      (:unfold Im (_F1 _A1) (x y)
        (ab y (ex x (an (el x _A1) (el (pr x y) _F1)))))
      (:unfold Im (_F2 _A2) (x y)
        (ab y (ex x (an (el x _A2) (el (pr x y) _F2)))))))
  (abeqd (_G y (ex x (an (el x _A1) (el (pr x y) _F1))) (ex x (an (el x _A2) (el (pr x y) _F2))))
    (exeqd (_G x (an (el x _A1) (el (pr x y) _F1)) (an (el x _A2) (el (pr x y) _F2)))
      (aneqd (_G (el x _A1) (el x _A2) (el (pr x y) _F1) (el (pr x y) _F2))
        (eleqd (_G x x _A1 _A2)
          (eqidd (_G x))
          _Ah)
        (eleqd (_G (pr x y) (pr x y) _F1 _F2)
          (eqidd (_G (pr x y)))
          _Fh))))))

(local theorem imaeq ((_F1 set ()) (_F2 set ()) (_A1 set ()) (_A2 set ())) ()
  (im (eqs _F1 _F2) (im (eqs _A1 _A2) (eqs (Im _F1 _A1) (Im _F2 _A2))))
()
(exp ((eqs _F1 _F2) (eqs _A1 _A2) (eqs (Im _F1 _A1) (Im _F2 _A2)))
  (imaeqd ((an (eqs _F1 _F2) (eqs _A1 _A2)) _F1 _F2 _A1 _A2)
    (anl ((eqs _F1 _F2) (eqs _A1 _A2)))
    (anr ((eqs _F1 _F2) (eqs _A1 _A2))))))

(local theorem imaeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (A set ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eqs (Im _F1 A) (Im _F2 A)))
()
(imaeqd (_G _F1 _F2 A A)
  _h
  (eqsidd (_G A))))

(local theorem imaeq1 ((_F1 set ()) (_F2 set ()) (A set ())) ()
  (im (eqs _F1 _F2) (eqs (Im _F1 A) (Im _F2 A)))
()
(imaeq1d ((eqs _F1 _F2) _F1 _F2 A)
  (id ((eqs _F1 _F2)))))

(local theorem imaeq2d ((_G wff ()) (F set ()) (_A1 set ()) (_A2 set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (Im F _A1) (Im F _A2)))
()
(imaeqd (_G F F _A1 _A2)
  (eqsidd (_G F))
  _h))

(local theorem imaeq2 ((F set ()) (_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Im F _A1) (Im F _A2)))
()
(imaeq2d ((eqs _A1 _A2) F _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem nfdm ((x nat) (A set (x)))
  ((h (nfs x A)))
  (nfs x (Dom A))
((x1 nat) (x2 nat))
(:conv (nfs x (Dom A))
  (nfs
    x
    (:unfold Dom (A) (x1 x2)
      (ab x1 (ex x2 (el (pr x1 x2) A)))))
  (nfab (x x1 (ex x2 (el (pr x1 x2) A)))
    (nfex (x x2 (el (pr x1 x2) A))
      (nfel2 (x (pr x1 x2) A)
        h)))))

(local theorem nfrn ((x nat) (A set (x)))
  ((h (nfs x A)))
  (nfs x (Ran A))
((x1 nat) (x2 nat))
(:conv (nfs x (Ran A))
  (nfs
    x
    (:unfold Ran (A) (x2 x1)
      (ab x1 (ex x2 (el (pr x2 x1) A)))))
  (nfab (x x1 (ex x2 (el (pr x2 x1) A)))
    (nfex (x x2 (el (pr x2 x1) A))
      (nfel2 (x (pr x2 x1) A)
        h)))))

(local theorem eldm ((A set ()) (a nat ()) (y nat)) ()
  (iff (el a (Dom A)) (ex y (el (pr a y) A)))
((x nat))
(:conv (iff (el a (Dom A)) (ex y (el (pr a y) A)))
  (iff
    (el
      a
      (:unfold Dom (A) (x y)
        (ab x (ex y (el (pr x y) A)))))
    (ex y (el (pr a y) A)))
  (elabe (x a (ex y (el (pr x y) A)) (ex y (el (pr a y) A)))
    (exeqd ((eq x a) y (el (pr x y) A) (el (pr a y) A))
      (eleq1d (A (eq x a) (pr x y) (pr a y))
        (preq1 (x a y)))))))

(local theorem elrn ((A set ()) (a nat ()) (x nat)) ()
  (iff (el a (Ran A)) (ex x (el (pr x a) A)))
((y nat))
(:conv (iff (el a (Ran A)) (ex x (el (pr x a) A)))
  (iff
    (el
      a
      (:unfold Ran (A) (x y)
        (ab y (ex x (el (pr x y) A)))))
    (ex x (el (pr x a) A)))
  (elabe (y a (ex x (el (pr x y) A)) (ex x (el (pr x a) A)))
    (exeqd ((eq y a) x (el (pr x y) A) (el (pr x a) A))
      (eleq1d (A (eq y a) (pr x y) (pr x a))
        (preq2 (x y a)))))))

(local theorem preldm ((A set ()) (a nat ()) (b nat ())) ()
  (im (el (pr a b) A) (el a (Dom A)))
((y nat))
(sylibr ((el (pr a b) A) (ex y (el (pr a y) A)) (el a (Dom A)))
  (eldm (A a y))
  (iexe (y b (el (pr a y) A) (el (pr a b) A))
    (eleq1d (A (eq y b) (pr a y) (pr a b))
      (preq2 (a y b))))))

(local theorem prelrn ((A set ()) (a nat ()) (b nat ())) ()
  (im (el (pr a b) A) (el b (Ran A)))
((x nat))
(sylibr ((el (pr a b) A) (ex x (el (pr x b) A)) (el b (Ran A)))
  (elrn (A b x))
  (iexe (x a (el (pr x b) A) (el (pr a b) A))
    (eleq1d (A (eq x a) (pr x b) (pr a b))
      (preq1 (x a b))))))

(local theorem fsteldm ((A set ()) (p nat ())) ()
  (im (el p A) (el (fst p) (Dom A)))
()
(sylbir ((el p A) (el (pr (fst p) (snd p)) A) (el (fst p) (Dom A)))
  (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) A) (el p A)))
    (eleq1 (A (pr (fst p) (snd p)) p))
    (fstsnd (p)))
  (preldm (A (fst p) (snd p)))))

(local theorem sndelrn ((A set ()) (p nat ())) ()
  (im (el p A) (el (snd p) (Ran A)))
()
(sylbir ((el p A) (el (pr (fst p) (snd p)) A) (el (snd p) (Ran A)))
  (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) A) (el p A)))
    (eleq1 (A (pr (fst p) (snd p)) p))
    (fstsnd (p)))
  (prelrn (A (fst p) (snd p)))))

(local theorem dmun ((A set ()) (B set ())) ()
  (eqs (Dom (Union A B)) (Union (Dom A) (Dom B)))
((x1 nat) (x2 nat))
(:conv (eqs (Dom (Union A B)) (Union (Dom A) (Dom B)))
  (:unfold eqs ((Dom (Union A B)) (Union (Dom A) (Dom B))) (x1)
    (al x1 (iff (el x1 (Dom (Union A B))) (el x1 (Union (Dom A) (Dom B))))))
  (ax_gen (x1 (iff (el x1 (Dom (Union A B))) (el x1 (Union (Dom A) (Dom B)))))
    (ax_mp ((iff (el x1 (Union (Dom A) (Dom B))) (ex x2 (el (pr x1 x2) (Union A B)))) (iff (el x1 (Dom (Union A B))) (el x1 (Union (Dom A) (Dom B)))))
      (ax_mp ((iff (el x1 (Dom (Union A B))) (ex x2 (el (pr x1 x2) (Union A B)))) (im (iff (el x1 (Union (Dom A) (Dom B))) (ex x2 (el (pr x1 x2) (Union A B)))) (iff (el x1 (Dom (Union A B))) (el x1 (Union (Dom A) (Dom B))))))
        (bitr4 ((el x1 (Dom (Union A B))) (ex x2 (el (pr x1 x2) (Union A B))) (el x1 (Union (Dom A) (Dom B)))))
        (eldm ((Union A B) x1 x2)))
      (ax_mp ((iff (ex x2 (el (pr x1 x2) (Union A B))) (or (el x1 (Dom A)) (el x1 (Dom B)))) (iff (el x1 (Union (Dom A) (Dom B))) (ex x2 (el (pr x1 x2) (Union A B)))))
        (ax_mp ((iff (el x1 (Union (Dom A) (Dom B))) (or (el x1 (Dom A)) (el x1 (Dom B)))) (im (iff (ex x2 (el (pr x1 x2) (Union A B))) (or (el x1 (Dom A)) (el x1 (Dom B)))) (iff (el x1 (Union (Dom A) (Dom B))) (ex x2 (el (pr x1 x2) (Union A B))))))
          (bitr4 ((el x1 (Union (Dom A) (Dom B))) (or (el x1 (Dom A)) (el x1 (Dom B))) (ex x2 (el (pr x1 x2) (Union A B)))))
          (elun ((Dom A) (Dom B) x1)))
        (ax_mp ((iff (or (el x1 (Dom A)) (el x1 (Dom B))) (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B)))) (iff (ex x2 (el (pr x1 x2) (Union A B))) (or (el x1 (Dom A)) (el x1 (Dom B)))))
          (ax_mp ((iff (ex x2 (el (pr x1 x2) (Union A B))) (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B)))) (im (iff (or (el x1 (Dom A)) (el x1 (Dom B))) (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B)))) (iff (ex x2 (el (pr x1 x2) (Union A B))) (or (el x1 (Dom A)) (el x1 (Dom B))))))
            (bitr4 ((ex x2 (el (pr x1 x2) (Union A B))) (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B))) (or (el x1 (Dom A)) (el x1 (Dom B)))))
            (exeqi (x2 (el (pr x1 x2) (Union A B)) (or (el (pr x1 x2) A) (el (pr x1 x2) B)))
              (elun (A B (pr x1 x2)))))
          (ax_mp ((iff (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B))) (or (ex x2 (el (pr x1 x2) A)) (ex x2 (el (pr x1 x2) B)))) (iff (or (el x1 (Dom A)) (el x1 (Dom B))) (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B)))))
            (ax_mp ((iff (or (el x1 (Dom A)) (el x1 (Dom B))) (or (ex x2 (el (pr x1 x2) A)) (ex x2 (el (pr x1 x2) B)))) (im (iff (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B))) (or (ex x2 (el (pr x1 x2) A)) (ex x2 (el (pr x1 x2) B)))) (iff (or (el x1 (Dom A)) (el x1 (Dom B))) (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B))))))
              (bitr4 ((or (el x1 (Dom A)) (el x1 (Dom B))) (or (ex x2 (el (pr x1 x2) A)) (ex x2 (el (pr x1 x2) B))) (ex x2 (or (el (pr x1 x2) A) (el (pr x1 x2) B)))))
              (ax_mp ((iff (el x1 (Dom B)) (ex x2 (el (pr x1 x2) B))) (iff (or (el x1 (Dom A)) (el x1 (Dom B))) (or (ex x2 (el (pr x1 x2) A)) (ex x2 (el (pr x1 x2) B)))))
                (ax_mp ((iff (el x1 (Dom A)) (ex x2 (el (pr x1 x2) A))) (im (iff (el x1 (Dom B)) (ex x2 (el (pr x1 x2) B))) (iff (or (el x1 (Dom A)) (el x1 (Dom B))) (or (ex x2 (el (pr x1 x2) A)) (ex x2 (el (pr x1 x2) B))))))
                  (oreq ((el x1 (Dom A)) (ex x2 (el (pr x1 x2) A)) (el x1 (Dom B)) (ex x2 (el (pr x1 x2) B))))
                  (eldm (A x1 x2)))
                (eldm (B x1 x2))))
            (exor (x2 (el (pr x1 x2) A) (el (pr x1 x2) B))))))))))

(local theorem rnun ((A set ()) (B set ())) ()
  (eqs (Ran (Union A B)) (Union (Ran A) (Ran B)))
((x1 nat) (x2 nat))
(:conv (eqs (Ran (Union A B)) (Union (Ran A) (Ran B)))
  (:unfold eqs ((Ran (Union A B)) (Union (Ran A) (Ran B))) (x1)
    (al x1 (iff (el x1 (Ran (Union A B))) (el x1 (Union (Ran A) (Ran B))))))
  (ax_gen (x1 (iff (el x1 (Ran (Union A B))) (el x1 (Union (Ran A) (Ran B)))))
    (ax_mp ((iff (el x1 (Union (Ran A) (Ran B))) (ex x2 (el (pr x2 x1) (Union A B)))) (iff (el x1 (Ran (Union A B))) (el x1 (Union (Ran A) (Ran B)))))
      (ax_mp ((iff (el x1 (Ran (Union A B))) (ex x2 (el (pr x2 x1) (Union A B)))) (im (iff (el x1 (Union (Ran A) (Ran B))) (ex x2 (el (pr x2 x1) (Union A B)))) (iff (el x1 (Ran (Union A B))) (el x1 (Union (Ran A) (Ran B))))))
        (bitr4 ((el x1 (Ran (Union A B))) (ex x2 (el (pr x2 x1) (Union A B))) (el x1 (Union (Ran A) (Ran B)))))
        (elrn ((Union A B) x1 x2)))
      (ax_mp ((iff (ex x2 (el (pr x2 x1) (Union A B))) (or (el x1 (Ran A)) (el x1 (Ran B)))) (iff (el x1 (Union (Ran A) (Ran B))) (ex x2 (el (pr x2 x1) (Union A B)))))
        (ax_mp ((iff (el x1 (Union (Ran A) (Ran B))) (or (el x1 (Ran A)) (el x1 (Ran B)))) (im (iff (ex x2 (el (pr x2 x1) (Union A B))) (or (el x1 (Ran A)) (el x1 (Ran B)))) (iff (el x1 (Union (Ran A) (Ran B))) (ex x2 (el (pr x2 x1) (Union A B))))))
          (bitr4 ((el x1 (Union (Ran A) (Ran B))) (or (el x1 (Ran A)) (el x1 (Ran B))) (ex x2 (el (pr x2 x1) (Union A B)))))
          (elun ((Ran A) (Ran B) x1)))
        (ax_mp ((iff (or (el x1 (Ran A)) (el x1 (Ran B))) (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B)))) (iff (ex x2 (el (pr x2 x1) (Union A B))) (or (el x1 (Ran A)) (el x1 (Ran B)))))
          (ax_mp ((iff (ex x2 (el (pr x2 x1) (Union A B))) (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B)))) (im (iff (or (el x1 (Ran A)) (el x1 (Ran B))) (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B)))) (iff (ex x2 (el (pr x2 x1) (Union A B))) (or (el x1 (Ran A)) (el x1 (Ran B))))))
            (bitr4 ((ex x2 (el (pr x2 x1) (Union A B))) (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B))) (or (el x1 (Ran A)) (el x1 (Ran B)))))
            (exeqi (x2 (el (pr x2 x1) (Union A B)) (or (el (pr x2 x1) A) (el (pr x2 x1) B)))
              (elun (A B (pr x2 x1)))))
          (ax_mp ((iff (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B))) (or (ex x2 (el (pr x2 x1) A)) (ex x2 (el (pr x2 x1) B)))) (iff (or (el x1 (Ran A)) (el x1 (Ran B))) (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B)))))
            (ax_mp ((iff (or (el x1 (Ran A)) (el x1 (Ran B))) (or (ex x2 (el (pr x2 x1) A)) (ex x2 (el (pr x2 x1) B)))) (im (iff (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B))) (or (ex x2 (el (pr x2 x1) A)) (ex x2 (el (pr x2 x1) B)))) (iff (or (el x1 (Ran A)) (el x1 (Ran B))) (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B))))))
              (bitr4 ((or (el x1 (Ran A)) (el x1 (Ran B))) (or (ex x2 (el (pr x2 x1) A)) (ex x2 (el (pr x2 x1) B))) (ex x2 (or (el (pr x2 x1) A) (el (pr x2 x1) B)))))
              (ax_mp ((iff (el x1 (Ran B)) (ex x2 (el (pr x2 x1) B))) (iff (or (el x1 (Ran A)) (el x1 (Ran B))) (or (ex x2 (el (pr x2 x1) A)) (ex x2 (el (pr x2 x1) B)))))
                (ax_mp ((iff (el x1 (Ran A)) (ex x2 (el (pr x2 x1) A))) (im (iff (el x1 (Ran B)) (ex x2 (el (pr x2 x1) B))) (iff (or (el x1 (Ran A)) (el x1 (Ran B))) (or (ex x2 (el (pr x2 x1) A)) (ex x2 (el (pr x2 x1) B))))))
                  (oreq ((el x1 (Ran A)) (ex x2 (el (pr x2 x1) A)) (el x1 (Ran B)) (ex x2 (el (pr x2 x1) B))))
                  (elrn (A x1 x2)))
                (elrn (B x1 x2))))
            (exor (x2 (el (pr x2 x1) A) (el (pr x2 x1) B))))))))))

(local theorem dmss ((A set ()) (B set ())) ()
  (im (subset A B) (subset (Dom A) (Dom B)))
()
(sylibr ((subset A B) (eqs (Union (Dom A) (Dom B)) (Dom B)) (subset (Dom A) (Dom B)))
  (equn1 ((Dom A) (Dom B)))
  (sylbi ((subset A B) (eqs (Union A B) B) (eqs (Union (Dom A) (Dom B)) (Dom B)))
    (equn1 (A B))
    (syl5eqsr ((Union (Dom A) (Dom B)) (Dom (Union A B)) (Dom B) (eqs (Union A B) B))
      (dmun (A B))
      (dmeq ((Union A B) B))))))

(local theorem rnss ((A set ()) (B set ())) ()
  (im (subset A B) (subset (Ran A) (Ran B)))
()
(sylibr ((subset A B) (eqs (Union (Ran A) (Ran B)) (Ran B)) (subset (Ran A) (Ran B)))
  (equn1 ((Ran A) (Ran B)))
  (sylbi ((subset A B) (eqs (Union A B) B) (eqs (Union (Ran A) (Ran B)) (Ran B)))
    (equn1 (A B))
    (syl5eqsr ((Union (Ran A) (Ran B)) (Ran (Union A B)) (Ran B) (eqs (Union A B) B))
      (rnun (A B))
      (rneq ((Union A B) B))))))

(local theorem ssdm ((A set ()) (R set ())) ()
  (iff (subset (Dom R) A) (subset R (Xp A (Univ))))
((x1 nat) (x2 nat))
(ax_mp ((iff (subset R (Xp A (Univ))) (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))))) (iff (subset (Dom R) A) (subset R (Xp A (Univ)))))
  (ax_mp ((iff (subset (Dom R) A) (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))))) (im (iff (subset R (Xp A (Univ))) (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))))) (iff (subset (Dom R) A) (subset R (Xp A (Univ))))))
    (bitr4 ((subset (Dom R) A) (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))) (subset R (Xp A (Univ)))))
    (:conv (iff (subset (Dom R) A) (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))))
      (iff
        (:unfold subset ((Dom R) A) (x1)
          (al x1 (im (el x1 (Dom R)) (el x1 A))))
        (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))))
      (aleqi (x1 (im (el x1 (Dom R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))))
        (ax_mp ((iff (im (ex x2 (el (pr x1 x2) R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))) (iff (im (el x1 (Dom R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))))
          (ax_mp ((iff (im (el x1 (Dom R)) (el x1 A)) (im (ex x2 (el (pr x1 x2) R)) (el x1 A))) (im (iff (im (ex x2 (el (pr x1 x2) R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))) (iff (im (el x1 (Dom R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))))))
            (bitr ((im (el x1 (Dom R)) (el x1 A)) (im (ex x2 (el (pr x1 x2) R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))))
            (imeq1i ((el x1 (Dom R)) (ex x2 (el (pr x1 x2) R)) (el x1 A))
              (eldm (R x1 x2))))
          (ax_mp ((iff (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))) (al x2 (im (el (pr x1 x2) R) (el x1 A)))) (iff (im (ex x2 (el (pr x1 x2) R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))))
            (ax_mp ((iff (im (ex x2 (el (pr x1 x2) R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el x1 A)))) (im (iff (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))) (al x2 (im (el (pr x1 x2) R) (el x1 A)))) (iff (im (ex x2 (el (pr x1 x2) R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))))))))
              (bitr4 ((im (ex x2 (el (pr x1 x2) R)) (el x1 A)) (al x2 (im (el (pr x1 x2) R) (el x1 A))) (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))))))
              (eexb (x2 (el (pr x1 x2) R) (el x1 A))))
            (aleqi (x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ)))) (im (el (pr x1 x2) R) (el x1 A)))
              (imeq2i ((el (pr x1 x2) R) (el (pr x1 x2) (Xp A (Univ))) (el x1 A))
                (ax_mp ((iff (an (el x1 A) (el x2 (Univ))) (el x1 A)) (iff (el (pr x1 x2) (Xp A (Univ))) (el x1 A)))
                  (ax_mp ((iff (el (pr x1 x2) (Xp A (Univ))) (an (el x1 A) (el x2 (Univ)))) (im (iff (an (el x1 A) (el x2 (Univ))) (el x1 A)) (iff (el (pr x1 x2) (Xp A (Univ))) (el x1 A))))
                    (bitr ((el (pr x1 x2) (Xp A (Univ))) (an (el x1 A) (el x2 (Univ))) (el x1 A)))
                    (prelxp (A (Univ) x1 x2)))
                  (ax_mp ((el x2 (Univ)) (iff (an (el x1 A) (el x2 (Univ))) (el x1 A)))
                    (bian2 ((el x1 A) (el x2 (Univ))))
                    (elv (x2)))))))))))
  (ssal2 (R (Xp A (Univ)) x1 x2))))

(local theorem ssrn ((A set ()) (R set ())) ()
  (iff (subset (Ran R) A) (subset R (Xp (Univ) A)))
((x1 nat) (x2 nat))
(ax_mp ((iff (subset R (Xp (Univ) A)) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))) (iff (subset (Ran R) A) (subset R (Xp (Univ) A))))
  (ax_mp ((iff (subset (Ran R) A) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))) (im (iff (subset R (Xp (Univ) A)) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))) (iff (subset (Ran R) A) (subset R (Xp (Univ) A)))))
    (bitr4 ((subset (Ran R) A) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))) (subset R (Xp (Univ) A))))
    (:conv (iff (subset (Ran R) A) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))
      (iff
        (:unfold subset ((Ran R) A) (x2)
          (al x2 (im (el x2 (Ran R)) (el x2 A))))
        (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))
      (aleqi (x2 (im (el x2 (Ran R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))
        (ax_mp ((iff (im (ex x1 (el (pr x1 x2) R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))) (iff (im (el x2 (Ran R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))
          (ax_mp ((iff (im (el x2 (Ran R)) (el x2 A)) (im (ex x1 (el (pr x1 x2) R)) (el x2 A))) (im (iff (im (ex x1 (el (pr x1 x2) R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))) (iff (im (el x2 (Ran R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))))
            (bitr ((im (el x2 (Ran R)) (el x2 A)) (im (ex x1 (el (pr x1 x2) R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))
            (imeq1i ((el x2 (Ran R)) (ex x1 (el (pr x1 x2) R)) (el x2 A))
              (elrn (R x2 x1))))
          (ax_mp ((iff (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))) (al x1 (im (el (pr x1 x2) R) (el x2 A)))) (iff (im (ex x1 (el (pr x1 x2) R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))
            (ax_mp ((iff (im (ex x1 (el (pr x1 x2) R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el x2 A)))) (im (iff (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))) (al x1 (im (el (pr x1 x2) R) (el x2 A)))) (iff (im (ex x1 (el (pr x1 x2) R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))))
              (bitr4 ((im (ex x1 (el (pr x1 x2) R)) (el x2 A)) (al x1 (im (el (pr x1 x2) R) (el x2 A))) (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))
              (eexb (x1 (el (pr x1 x2) R) (el x2 A))))
            (aleqi (x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))) (im (el (pr x1 x2) R) (el x2 A)))
              (imeq2i ((el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)) (el x2 A))
                (ax_mp ((iff (an (el x1 (Univ)) (el x2 A)) (el x2 A)) (iff (el (pr x1 x2) (Xp (Univ) A)) (el x2 A)))
                  (ax_mp ((iff (el (pr x1 x2) (Xp (Univ) A)) (an (el x1 (Univ)) (el x2 A))) (im (iff (an (el x1 (Univ)) (el x2 A)) (el x2 A)) (iff (el (pr x1 x2) (Xp (Univ) A)) (el x2 A))))
                    (bitr ((el (pr x1 x2) (Xp (Univ) A)) (an (el x1 (Univ)) (el x2 A)) (el x2 A)))
                    (prelxp ((Univ) A x1 x2)))
                  (ax_mp ((el x1 (Univ)) (iff (an (el x1 (Univ)) (el x2 A)) (el x2 A)))
                    (bian1 ((el x1 (Univ)) (el x2 A)))
                    (elv (x1)))))))))))
  (ax_mp ((iff (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))) (iff (subset R (Xp (Univ) A)) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))))
    (ax_mp ((iff (subset R (Xp (Univ) A)) (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))) (im (iff (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))) (iff (subset R (Xp (Univ) A)) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))))
      (bitr ((subset R (Xp (Univ) A)) (al x1 (al x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))) (al x2 (al x1 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A)))))))
      (ssal2 (R (Xp (Univ) A) x1 x2)))
    (alcomb (x1 x2 (im (el (pr x1 x2) R) (el (pr x1 x2) (Xp (Univ) A))))))))

(local theorem dmfin ((A set ())) ()
  (im (finite A) (finite (Dom A)))
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(:conv (im (finite A) (finite (Dom A)))
  (im
    (:unfold finite (A) (x1 x4)
      (ex x1 (al x4 (im (el x4 A) (lt x4 x1)))))
    (:unfold finite ((Dom A)) (x1 x2)
      (ex x1 (al x2 (im (el x2 (Dom A)) (lt x2 x1))))))
  (eximi (x1 (al x4 (im (el x4 A) (lt x4 x1))) (al x2 (im (el x2 (Dom A)) (lt x2 x1))))
    (iald (x2 (al x4 (im (el x4 A) (lt x4 x1))) (im (el x2 (Dom A)) (lt x2 x1)))
      (syl5bi ((al x4 (im (el x4 A) (lt x4 x1))) (el x2 (Dom A)) (ex x3 (el (pr x2 x3) A)) (lt x2 x1))
        (eldm (A x2 x3))
        (eexd (x3 (al x4 (im (el x4 A) (lt x4 x1))) (el (pr x2 x3) A) (lt x2 x1))
          (syl6 ((al x4 (im (el x4 A) (lt x4 x1))) (el (pr x2 x3) A) (lt (pr x2 x3) x1) (lt x2 x1))
            (ax_mp ((le x2 (pr x2 x3)) (im (lt (pr x2 x3) x1) (lt x2 x1)))
              (lelttr (x2 (pr x2 x3) x1))
              (leprid1 (x2 x3)))
            (eale (x4 (pr x2 x3) (im (el x4 A) (lt x4 x1)) (im (el (pr x2 x3) A) (lt (pr x2 x3) x1)))
              (imeqd ((eq x4 (pr x2 x3)) (el x4 A) (el (pr x2 x3) A) (lt x4 x1) (lt (pr x2 x3) x1))
                (eleq1 (A x4 (pr x2 x3)))
                (lteq1 (x4 (pr x2 x3) x1)))))))))))

(local theorem rnfin ((A set ())) ()
  (im (finite A) (finite (Ran A)))
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(:conv (im (finite A) (finite (Ran A)))
  (im
    (:unfold finite (A) (x1 x4)
      (ex x1 (al x4 (im (el x4 A) (lt x4 x1)))))
    (:unfold finite ((Ran A)) (x1 x2)
      (ex x1 (al x2 (im (el x2 (Ran A)) (lt x2 x1))))))
  (eximi (x1 (al x4 (im (el x4 A) (lt x4 x1))) (al x2 (im (el x2 (Ran A)) (lt x2 x1))))
    (iald (x2 (al x4 (im (el x4 A) (lt x4 x1))) (im (el x2 (Ran A)) (lt x2 x1)))
      (syl5bi ((al x4 (im (el x4 A) (lt x4 x1))) (el x2 (Ran A)) (ex x3 (el (pr x3 x2) A)) (lt x2 x1))
        (elrn (A x2 x3))
        (eexd (x3 (al x4 (im (el x4 A) (lt x4 x1))) (el (pr x3 x2) A) (lt x2 x1))
          (syl6 ((al x4 (im (el x4 A) (lt x4 x1))) (el (pr x3 x2) A) (lt (pr x3 x2) x1) (lt x2 x1))
            (ax_mp ((le x2 (pr x3 x2)) (im (lt (pr x3 x2) x1) (lt x2 x1)))
              (lelttr (x2 (pr x3 x2) x1))
              (leprid2 (x3 x2)))
            (eale (x4 (pr x3 x2) (im (el x4 A) (lt x4 x1)) (im (el (pr x3 x2) A) (lt (pr x3 x2) x1)))
              (imeqd ((eq x4 (pr x3 x2)) (el x4 A) (el (pr x3 x2) A) (lt x4 x1) (lt (pr x3 x2) x1))
                (eleq1 (A x4 (pr x3 x2)))
                (lteq1 (x4 (pr x3 x2) x1)))))))))))

(local theorem elima ((A set ()) (F set ()) (b nat ()) (x nat)) ()
  (iff (el b (Im F A)) (ex x (an (el x A) (el (pr x b) F))))
((y nat))
(:conv (iff (el b (Im F A)) (ex x (an (el x A) (el (pr x b) F))))
  (iff
    (el
      b
      (:unfold Im (F A) (x y)
        (ab y (ex x (an (el x A) (el (pr x y) F))))))
    (ex x (an (el x A) (el (pr x b) F))))
  (elabe (y b (ex x (an (el x A) (el (pr x y) F))) (ex x (an (el x A) (el (pr x b) F))))
    (exeqd ((eq y b) x (an (el x A) (el (pr x y) F)) (an (el x A) (el (pr x b) F)))
      (aneq2d ((eq y b) (el x A) (el (pr x y) F) (el (pr x b) F))
        (eleq1d (F (eq y b) (pr x y) (pr x b))
          (preq2 (x y b))))))))

(local theorem elimai ((A set ()) (F set ()) (a nat ()) (b nat ())) ()
  (im (el (pr a b) F) (im (el a A) (el b (Im F A))))
((x nat))
(expcom ((el a A) (el (pr a b) F) (el b (Im F A)))
  (sylibr ((an (el a A) (el (pr a b) F)) (ex x (an (el x A) (el (pr x b) F))) (el b (Im F A)))
    (elima (A F b x))
    (iexe (x a (an (el x A) (el (pr x b) F)) (an (el a A) (el (pr a b) F)))
      (aneqd ((eq x a) (el x A) (el a A) (el (pr x b) F) (el (pr a b) F))
        (eleq1 (A x a))
        (eleq1d (F (eq x a) (pr x b) (pr a b))
          (preq1 (x a b))))))))

(local theorem imv ((F set ())) ()
  (eqs (Im F (Univ)) (Ran F))
((x nat) (y nat))
(eqri ((Im F (Univ)) (Ran F) x)
  (ax_mp ((iff (el x (Ran F)) (ex y (an (el y (Univ)) (el (pr y x) F)))) (iff (el x (Im F (Univ))) (el x (Ran F))))
    (ax_mp ((iff (el x (Im F (Univ))) (ex y (an (el y (Univ)) (el (pr y x) F)))) (im (iff (el x (Ran F)) (ex y (an (el y (Univ)) (el (pr y x) F)))) (iff (el x (Im F (Univ))) (el x (Ran F)))))
      (bitr4 ((el x (Im F (Univ))) (ex y (an (el y (Univ)) (el (pr y x) F))) (el x (Ran F))))
      (elima ((Univ) F x y)))
    (ax_mp ((iff (ex y (an (el y (Univ)) (el (pr y x) F))) (ex y (el (pr y x) F))) (iff (el x (Ran F)) (ex y (an (el y (Univ)) (el (pr y x) F)))))
      (ax_mp ((iff (el x (Ran F)) (ex y (el (pr y x) F))) (im (iff (ex y (an (el y (Univ)) (el (pr y x) F))) (ex y (el (pr y x) F))) (iff (el x (Ran F)) (ex y (an (el y (Univ)) (el (pr y x) F))))))
        (bitr4 ((el x (Ran F)) (ex y (el (pr y x) F)) (ex y (an (el y (Univ)) (el (pr y x) F)))))
        (elrn (F x y)))
      (exeqi (y (an (el y (Univ)) (el (pr y x) F)) (el (pr y x) F))
        (ax_mp ((el y (Univ)) (iff (an (el y (Univ)) (el (pr y x) F)) (el (pr y x) F)))
          (bian1 ((el y (Univ)) (el (pr y x) F)))
          (elv (y))))))))

(def cnv ((A set ())) (set ())
((x nat) (y nat))
(sab x (ab y (el (pr y x) A))))

(local theorem cnveqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (cnv _A1) (cnv _A2)))
((x nat) (y nat))
(:conv (im _G (eqs (cnv _A1) (cnv _A2)))
  (im
    _G
    (eqs
      (:unfold cnv (_A1) (x y)
        (sab x (ab y (el (pr y x) _A1))))
      (:unfold cnv (_A2) (x y)
        (sab x (ab y (el (pr y x) _A2))))))
  (sabeqd (_G x (ab y (el (pr y x) _A1)) (ab y (el (pr y x) _A2)))
    (abeqd (_G y (el (pr y x) _A1) (el (pr y x) _A2))
      (eleqd (_G (pr y x) (pr y x) _A1 _A2)
        (eqidd (_G (pr y x)))
        _Ah)))))

(local theorem cnveq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (cnv _A1) (cnv _A2)))
()
(cnveqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem prcnv ((A set ()) (x nat ()) (y nat ())) ()
  (iff (el (pr x y) (cnv A)) (el (pr y x) A))
((_1 nat) (_2 nat))
(:conv (iff (el (pr x y) (cnv A)) (el (pr y x) A))
  (iff
    (el
      (pr x y)
      (:unfold cnv (A) (_1 _2)
        (sab _1 (ab _2 (el (pr _2 _1) A)))))
    (el (pr y x) A))
  (elsabe (x y (el (pr y x) A) _1 (ab _2 (el (pr _2 _1) A)))
    (elabed ((eq _1 x) _2 y (el (pr _2 _1) A) (el (pr y x) A))
      (eleqd ((an (eq _1 x) (eq _2 y)) (pr _2 _1) (pr y x) A A)
        (preqd ((an (eq _1 x) (eq _2 y)) _2 y _1 x)
          (anwr ((eq _1 x) (eq _2 y) (eq _2 y))
            (id ((eq _2 y))))
          (anwl ((eq _1 x) (eq _2 y) (eq _1 x))
            (id ((eq _1 x)))))
        (eqsidd ((an (eq _1 x) (eq _2 y)) A)))))))

(local theorem cnvopab ((x nat) (y nat) (p wff (x y))) ()
  (eqs (cnv (sab x (ab y p))) (sab y (ab x p)))
((x1 nat) (x2 nat))
(eqri2 ((cnv (sab x (ab y p))) (sab y (ab x p)) x1 x2)
  (ax_mp ((iff (el (pr x2 x1) (sab x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))) (iff (el (pr x1 x2) (cnv (sab x (ab y p)))) (el (pr x1 x2) (sab y (ab x p)))))
    (ax_mp ((iff (el (pr x1 x2) (cnv (sab x (ab y p)))) (el (pr x2 x1) (sab x (ab y p)))) (im (iff (el (pr x2 x1) (sab x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))) (iff (el (pr x1 x2) (cnv (sab x (ab y p)))) (el (pr x1 x2) (sab y (ab x p))))))
      (bitr ((el (pr x1 x2) (cnv (sab x (ab y p)))) (el (pr x2 x1) (sab x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))))
      (prcnv ((sab x (ab y p)) x1 x2)))
    (ax_mp ((iff (el x1 (sbs x2 x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))) (iff (el (pr x2 x1) (sab x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))))
      (ax_mp ((iff (el (pr x2 x1) (sab x (ab y p))) (el x1 (sbs x2 x (ab y p)))) (im (iff (el x1 (sbs x2 x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))) (iff (el (pr x2 x1) (sab x (ab y p))) (el (pr x1 x2) (sab y (ab x p))))))
        (bitr ((el (pr x2 x1) (sab x (ab y p))) (el x1 (sbs x2 x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))))
        (elsabs (x2 x1 x (ab y p))))
      (ax_mp ((iff (sb x2 x (el x1 (ab y p))) (el (pr x1 x2) (sab y (ab x p)))) (iff (el x1 (sbs x2 x (ab y p))) (el (pr x1 x2) (sab y (ab x p)))))
        (ax_mp ((iff (el x1 (sbs x2 x (ab y p))) (sb x2 x (el x1 (ab y p)))) (im (iff (sb x2 x (el x1 (ab y p))) (el (pr x1 x2) (sab y (ab x p)))) (iff (el x1 (sbs x2 x (ab y p))) (el (pr x1 x2) (sab y (ab x p))))))
          (bitr ((el x1 (sbs x2 x (ab y p))) (sb x2 x (el x1 (ab y p))) (el (pr x1 x2) (sab y (ab x p)))))
          (elsbs (x x2 x1 (ab y p))))
        (ax_mp ((iff (el (pr x1 x2) (sab y (ab x p))) (sb x2 x (sb x1 y p))) (iff (sb x2 x (el x1 (ab y p))) (el (pr x1 x2) (sab y (ab x p)))))
          (ax_mp ((iff (sb x2 x (el x1 (ab y p))) (sb x2 x (sb x1 y p))) (im (iff (el (pr x1 x2) (sab y (ab x p))) (sb x2 x (sb x1 y p))) (iff (sb x2 x (el x1 (ab y p))) (el (pr x1 x2) (sab y (ab x p))))))
            (bitr4 ((sb x2 x (el x1 (ab y p))) (sb x2 x (sb x1 y p)) (el (pr x1 x2) (sab y (ab x p)))))
            (sbeq2i (x x2 (el x1 (ab y p)) (sb x1 y p))
              (elab (x1 y p))))
          (ax_mp ((iff (el x2 (sbs x1 y (ab x p))) (sb x2 x (sb x1 y p))) (iff (el (pr x1 x2) (sab y (ab x p))) (sb x2 x (sb x1 y p))))
            (ax_mp ((iff (el (pr x1 x2) (sab y (ab x p))) (el x2 (sbs x1 y (ab x p)))) (im (iff (el x2 (sbs x1 y (ab x p))) (sb x2 x (sb x1 y p))) (iff (el (pr x1 x2) (sab y (ab x p))) (sb x2 x (sb x1 y p)))))
              (bitr ((el (pr x1 x2) (sab y (ab x p))) (el x2 (sbs x1 y (ab x p))) (sb x2 x (sb x1 y p))))
              (elsabs (x1 x2 y (ab x p))))
            (ax_mp ((iff (sb x1 y (el x2 (ab x p))) (sb x2 x (sb x1 y p))) (iff (el x2 (sbs x1 y (ab x p))) (sb x2 x (sb x1 y p))))
              (ax_mp ((iff (el x2 (sbs x1 y (ab x p))) (sb x1 y (el x2 (ab x p)))) (im (iff (sb x1 y (el x2 (ab x p))) (sb x2 x (sb x1 y p))) (iff (el x2 (sbs x1 y (ab x p))) (sb x2 x (sb x1 y p)))))
                (bitr ((el x2 (sbs x1 y (ab x p))) (sb x1 y (el x2 (ab x p))) (sb x2 x (sb x1 y p))))
                (elsbs (y x1 x2 (ab x p))))
              (ax_mp ((iff (sb x2 x (sb x1 y p)) (sb x1 y (sb x2 x p))) (iff (sb x1 y (el x2 (ab x p))) (sb x2 x (sb x1 y p))))
                (ax_mp ((iff (sb x1 y (el x2 (ab x p))) (sb x1 y (sb x2 x p))) (im (iff (sb x2 x (sb x1 y p)) (sb x1 y (sb x2 x p))) (iff (sb x1 y (el x2 (ab x p))) (sb x2 x (sb x1 y p)))))
                  (bitr4 ((sb x1 y (el x2 (ab x p))) (sb x1 y (sb x2 x p)) (sb x2 x (sb x1 y p))))
                  (sbeq2i (y x1 (el x2 (ab x p)) (sb x2 x p))
                    (elab (x2 x p))))
                (sbcom (x2 x1 x y p)))))))))))

(def comp ((F set ()) (G set ())) (set ())
((x nat) (y nat) (z nat))
(sab x (ab z (ex y (an (el (pr x y) F) (el (pr y z) G))))))

(local theorem coeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_G1 set ()) (_G2 set ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_Gh (im _G (eqs _G1 _G2))))
  (im _G (eqs (comp _F1 _G1) (comp _F2 _G2)))
((x nat) (y nat) (z nat))
(:conv (im _G (eqs (comp _F1 _G1) (comp _F2 _G2)))
  (im
    _G
    (eqs
      (:unfold comp (_F1 _G1) (x y z)
        (sab x (ab z (ex y (an (el (pr x y) _F1) (el (pr y z) _G1))))))
      (:unfold comp (_F2 _G2) (x y z)
        (sab x (ab z (ex y (an (el (pr x y) _F2) (el (pr y z) _G2))))))))
  (sabeqd (_G x (ab z (ex y (an (el (pr x y) _F1) (el (pr y z) _G1)))) (ab z (ex y (an (el (pr x y) _F2) (el (pr y z) _G2)))))
    (abeqd (_G z (ex y (an (el (pr x y) _F1) (el (pr y z) _G1))) (ex y (an (el (pr x y) _F2) (el (pr y z) _G2))))
      (exeqd (_G y (an (el (pr x y) _F1) (el (pr y z) _G1)) (an (el (pr x y) _F2) (el (pr y z) _G2)))
        (aneqd (_G (el (pr x y) _F1) (el (pr x y) _F2) (el (pr y z) _G1) (el (pr y z) _G2))
          (eleqd (_G (pr x y) (pr x y) _F1 _F2)
            (eqidd (_G (pr x y)))
            _Fh)
          (eleqd (_G (pr y z) (pr y z) _G1 _G2)
            (eqidd (_G (pr y z)))
            _Gh)))))))

(local theorem coeq ((_F1 set ()) (_F2 set ()) (_G1 set ()) (_G2 set ())) ()
  (im (eqs _F1 _F2) (im (eqs _G1 _G2) (eqs (comp _F1 _G1) (comp _F2 _G2))))
()
(exp ((eqs _F1 _F2) (eqs _G1 _G2) (eqs (comp _F1 _G1) (comp _F2 _G2)))
  (coeqd ((an (eqs _F1 _F2) (eqs _G1 _G2)) _F1 _F2 _G1 _G2)
    (anl ((eqs _F1 _F2) (eqs _G1 _G2)))
    (anr ((eqs _F1 _F2) (eqs _G1 _G2))))))

(local theorem coeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (G set ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eqs (comp _F1 G) (comp _F2 G)))
()
(coeqd (_G _F1 _F2 G G)
  _h
  (eqsidd (_G G))))

(local theorem coeq1 ((_F1 set ()) (_F2 set ()) (G set ())) ()
  (im (eqs _F1 _F2) (eqs (comp _F1 G) (comp _F2 G)))
()
(coeq1d ((eqs _F1 _F2) _F1 _F2 G)
  (id ((eqs _F1 _F2)))))

(local theorem coeq2d ((_G wff ()) (F set ()) (_G1 set ()) (_G2 set ()))
  ((_h (im _G (eqs _G1 _G2))))
  (im _G (eqs (comp F _G1) (comp F _G2)))
()
(coeqd (_G F F _G1 _G2)
  (eqsidd (_G F))
  _h))

(local theorem coeq2 ((F set ()) (_G1 set ()) (_G2 set ())) ()
  (im (eqs _G1 _G2) (eqs (comp F _G1) (comp F _G2)))
()
(coeq2d ((eqs _G1 _G2) F _G1 _G2)
  (id ((eqs _G1 _G2)))))

(local theorem prco ((A set ()) (B set ()) (x nat ()) (y nat) (z nat ())) ()
  (iff (el (pr x z) (comp A B)) (ex y (an (el (pr x y) A) (el (pr y z) B))))
((_1 nat) (_2 nat))
(:let H1 (eqidd ((an (eq _1 x) (eq _2 z)) y))
(:conv (iff (el (pr x z) (comp A B)) (ex y (an (el (pr x y) A) (el (pr y z) B))))
  (iff
    (el
      (pr x z)
      (:unfold comp (A B) (_1 y _2)
        (sab _1 (ab _2 (ex y (an (el (pr _1 y) A) (el (pr y _2) B)))))))
    (ex y (an (el (pr x y) A) (el (pr y z) B))))
  (elsabe (x z (ex y (an (el (pr x y) A) (el (pr y z) B))) _1 (ab _2 (ex y (an (el (pr _1 y) A) (el (pr y _2) B)))))
    (elabed ((eq _1 x) _2 z (ex y (an (el (pr _1 y) A) (el (pr y _2) B))) (ex y (an (el (pr x y) A) (el (pr y z) B))))
      (exeqd ((an (eq _1 x) (eq _2 z)) y (an (el (pr _1 y) A) (el (pr y _2) B)) (an (el (pr x y) A) (el (pr y z) B)))
        (aneqd ((an (eq _1 x) (eq _2 z)) (el (pr _1 y) A) (el (pr x y) A) (el (pr y _2) B) (el (pr y z) B))
          (eleqd ((an (eq _1 x) (eq _2 z)) (pr _1 y) (pr x y) A A)
            (preqd ((an (eq _1 x) (eq _2 z)) _1 x y y)
              (anwl ((eq _1 x) (eq _2 z) (eq _1 x))
                (id ((eq _1 x))))
              H1)
            (eqsidd ((an (eq _1 x) (eq _2 z)) A)))
          (eleqd ((an (eq _1 x) (eq _2 z)) (pr y _2) (pr y z) B B)
            (preqd ((an (eq _1 x) (eq _2 z)) y y _2 z)
              H1
              (anwr ((eq _1 x) (eq _2 z) (eq _2 z))
                (id ((eq _2 z)))))
            (eqsidd ((an (eq _1 x) (eq _2 z)) B))))))))))

(def res ((A set ()) (B set ())) (set ())
()
(Inter A (Xp B (Univ))))

(local theorem reseqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (res _A1 _B1) (res _A2 _B2)))
()
(:conv (im _G (eqs (res _A1 _B1) (res _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold res (_A1 _B1) ()
        (Inter _A1 (Xp _B1 (Univ))))
      (:unfold res (_A2 _B2) ()
        (Inter _A2 (Xp _B2 (Univ))))))
  (ineqd (_G _A1 _A2 (Xp _B1 (Univ)) (Xp _B2 (Univ)))
    _Ah
    (xpeqd (_G _B1 _B2 (Univ) (Univ))
      _Bh
      (eqsidd (_G (Univ)))))))

(local theorem reseq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (eqs (res _A1 _B1) (res _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (eqs (res _A1 _B1) (res _A2 _B2)))
  (reseqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem reseq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (res _A1 B) (res _A2 B)))
()
(reseqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem reseq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (eqs (res _A1 B) (res _A2 B)))
()
(reseq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem reseq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (res A _B1) (res A _B2)))
()
(reseqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem reseq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (eqs (res A _B1) (res A _B2)))
()
(reseq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem nfres ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nfs x (res A B))
()
(:conv (nfs x (res A B))
  (nfs
    x
    (:unfold res (A B) ()
      (Inter A (Xp B (Univ)))))
  (nfin (x A (Xp B (Univ)))
    h1
    (nfxp (x B (Univ))
      h2
      (nfsv ((Univ) x))))))

(local theorem elres ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (res A B)) (an (el a A) (el (fst a) B)))
()
(ax_mp ((iff (an (el a A) (el a (Xp B (Univ)))) (an (el a A) (el (fst a) B))) (iff (el a (res A B)) (an (el a A) (el (fst a) B))))
  (ax_mp ((iff (el a (res A B)) (an (el a A) (el a (Xp B (Univ))))) (im (iff (an (el a A) (el a (Xp B (Univ)))) (an (el a A) (el (fst a) B))) (iff (el a (res A B)) (an (el a A) (el (fst a) B)))))
    (bitr ((el a (res A B)) (an (el a A) (el a (Xp B (Univ)))) (an (el a A) (el (fst a) B))))
    (:conv (iff (el a (res A B)) (an (el a A) (el a (Xp B (Univ)))))
      (iff
        (el
          a
          (:unfold res (A B) ()
            (Inter A (Xp B (Univ)))))
        (an (el a A) (el a (Xp B (Univ)))))
      (elin (A (Xp B (Univ)) a))))
  (aneq2i ((el a A) (el a (Xp B (Univ))) (el (fst a) B))
    (ax_mp ((iff (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)) (iff (el a (Xp B (Univ))) (el (fst a) B)))
      (ax_mp ((iff (el a (Xp B (Univ))) (an (el (fst a) B) (el (snd a) (Univ)))) (im (iff (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)) (iff (el a (Xp B (Univ))) (el (fst a) B))))
        (bitr ((el a (Xp B (Univ))) (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)))
        (elxp (B (Univ) a)))
      (ax_mp ((el (snd a) (Univ)) (iff (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)))
        (bian2 ((el (fst a) B) (el (snd a) (Univ))))
        (elv ((snd a))))))))

(local theorem prelres ((A set ()) (B set ()) (a nat ()) (b nat ())) ()
  (iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el a B)))
()
(ax_mp ((iff (an (el (pr a b) A) (el (fst (pr a b)) B)) (an (el (pr a b) A) (el a B))) (iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el a B))))
  (ax_mp ((iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el (fst (pr a b)) B))) (im (iff (an (el (pr a b) A) (el (fst (pr a b)) B)) (an (el (pr a b) A) (el a B))) (iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el a B)))))
    (bitr ((el (pr a b) (res A B)) (an (el (pr a b) A) (el (fst (pr a b)) B)) (an (el (pr a b) A) (el a B))))
    (elres (A B (pr a b))))
  (aneq2i ((el (pr a b) A) (el (fst (pr a b)) B) (el a B))
    (ax_mp ((eq (fst (pr a b)) a) (iff (el (fst (pr a b)) B) (el a B)))
      (eleq1 (B (fst (pr a b)) a))
      (fstpr (a b))))))

(local theorem resss ((A set ()) (B set ())) ()
  (subset (res A B) A)
()
(:conv (subset (res A B) A)
  (subset
    (:unfold res (A B) ()
      (Inter A (Xp B (Univ))))
    A)
  (inss1 (A (Xp B (Univ))))))

(local theorem resv ((F set ())) ()
  (eqs (res F (Univ)) F)
()
(ax_mp ((eqs (Inter F (Univ)) F) (eqs (res F (Univ)) F))
  (ax_mp ((eqs (res F (Univ)) (Inter F (Univ))) (im (eqs (Inter F (Univ)) F) (eqs (res F (Univ)) F)))
    (eqstr ((res F (Univ)) (Inter F (Univ)) F))
    (ax_mp ((eqs (Xp (Univ) (Univ)) (Univ)) (eqs (res F (Univ)) (Inter F (Univ))))
      (:conv (im (eqs (Xp (Univ) (Univ)) (Univ)) (eqs (res F (Univ)) (Inter F (Univ))))
        (im
          (eqs (Xp (Univ) (Univ)) (Univ))
          (eqs
            (:unfold res (F (Univ)) ()
              (Inter F (Xp (Univ) (Univ))))
            (Inter F (Univ))))
        (ineq2 (F (Xp (Univ) (Univ)) (Univ))))
      (xpvv ())))
  (inv2 (F))))

(local theorem resfin ((A set ()) (F set ())) ()
  (im (finite F) (finite (res F A)))
()
(ax_mp ((subset (res F A) F) (im (finite F) (finite (res F A))))
  (finss ((res F A) F))
  (resss (F A))))

(local theorem resisf ((A set ()) (F set ())) ()
  (im (isfun F) (isfun (res F A)))
()
(ax_mp ((subset (res F A) F) (im (isfun F) (isfun (res F A))))
  (isfss ((res F A) F))
  (resss (F A))))

(local theorem dmres ((A set ()) (F set ())) ()
  (eqs (Dom (res F A)) (Inter (Dom F) A))
((x nat) (y nat))
(eqri ((Dom (res F A)) (Inter (Dom F) A) x)
  (ax_mp ((iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))) (iff (el x (Dom (res F A))) (el x (Inter (Dom F) A))))
    (ax_mp ((iff (el x (Dom (res F A))) (ex y (el (pr x y) (res F A)))) (im (iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))) (iff (el x (Dom (res F A))) (el x (Inter (Dom F) A)))))
      (bitr ((el x (Dom (res F A))) (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))))
      (eldm ((res F A) x y)))
    (ax_mp ((iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))))
      (ax_mp ((iff (ex y (el (pr x y) (res F A))) (ex y (an (el (pr x y) F) (el x A)))) (im (iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A)))))
        (bitr4 ((ex y (el (pr x y) (res F A))) (ex y (an (el (pr x y) F) (el x A))) (el x (Inter (Dom F) A))))
        (exeqi (y (el (pr x y) (res F A)) (an (el (pr x y) F) (el x A)))
          (prelres (F A x y))))
      (ax_mp ((iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A)))))
        (ax_mp ((iff (el x (Inter (Dom F) A)) (an (el x (Dom F)) (el x A))) (im (iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A))))))
          (bitr ((el x (Inter (Dom F) A)) (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))))
          (elin ((Dom F) A x)))
        (ax_mp ((iff (ex y (an (el (pr x y) F) (el x A))) (an (ex y (el (pr x y) F)) (el x A))) (iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))))
          (ax_mp ((iff (an (el x (Dom F)) (el x A)) (an (ex y (el (pr x y) F)) (el x A))) (im (iff (ex y (an (el (pr x y) F) (el x A))) (an (ex y (el (pr x y) F)) (el x A))) (iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A))))))
            (bitr4 ((an (el x (Dom F)) (el x A)) (an (ex y (el (pr x y) F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))))
            (aneq1i ((el x (Dom F)) (ex y (el (pr x y) F)) (el x A))
              (eldm (F x y))))
          (exan2 (y (el (pr x y) F) (el x A)))))))))

(local theorem rnres ((A set ()) (F set ())) ()
  (eqs (Ran (res F A)) (Im F A))
((x1 nat) (x2 nat))
(:conv (eqs (Ran (res F A)) (Im F A))
  (eqs
    (:unfold Ran ((res F A)) (x2 x1)
      (ab x1 (ex x2 (el (pr x2 x1) (res F A)))))
    (:unfold Im (F A) (x2 x1)
      (ab x1 (ex x2 (an (el x2 A) (el (pr x2 x1) F))))))
  (abeqi (x1 (ex x2 (el (pr x2 x1) (res F A))) (ex x2 (an (el x2 A) (el (pr x2 x1) F))))
    (exeqi (x2 (el (pr x2 x1) (res F A)) (an (el x2 A) (el (pr x2 x1) F)))
      (ax_mp ((iff (an (el (pr x2 x1) F) (el x2 A)) (an (el x2 A) (el (pr x2 x1) F))) (iff (el (pr x2 x1) (res F A)) (an (el x2 A) (el (pr x2 x1) F))))
        (ax_mp ((iff (el (pr x2 x1) (res F A)) (an (el (pr x2 x1) F) (el x2 A))) (im (iff (an (el (pr x2 x1) F) (el x2 A)) (an (el x2 A) (el (pr x2 x1) F))) (iff (el (pr x2 x1) (res F A)) (an (el x2 A) (el (pr x2 x1) F)))))
          (bitr ((el (pr x2 x1) (res F A)) (an (el (pr x2 x1) F) (el x2 A)) (an (el x2 A) (el (pr x2 x1) F))))
          (prelres (F A x2 x1)))
        (ancomb ((el (pr x2 x1) F) (el x2 A))))))))

(local theorem unres ((A set ()) (F set ()) (G set ())) ()
  (eqs (res (Union F G) A) (Union (res F A) (res G A)))
()
(:conv (eqs (res (Union F G) A) (Union (res F A) (res G A)))
  (eqs
    (:unfold res ((Union F G) A) ()
      (Inter (Union F G) (Xp A (Univ))))
    (Union
      (:unfold res (F A) ()
        (Inter F (Xp A (Univ))))
      (:unfold res (G A) ()
        (Inter G (Xp A (Univ))))))
  (indir (F G (Xp A (Univ))))))

(local theorem resun ((A set ()) (B set ()) (F set ())) ()
  (eqs (res F (Union A B)) (Union (res F A) (res F B)))
()
(ax_mp ((eqs (Inter F (Union (Xp A (Univ)) (Xp B (Univ)))) (Union (res F A) (res F B))) (eqs (res F (Union A B)) (Union (res F A) (res F B))))
  (ax_mp ((eqs (res F (Union A B)) (Inter F (Union (Xp A (Univ)) (Xp B (Univ))))) (im (eqs (Inter F (Union (Xp A (Univ)) (Xp B (Univ)))) (Union (res F A) (res F B))) (eqs (res F (Union A B)) (Union (res F A) (res F B)))))
    (eqstr ((res F (Union A B)) (Inter F (Union (Xp A (Univ)) (Xp B (Univ)))) (Union (res F A) (res F B))))
    (ax_mp ((eqs (Xp (Union A B) (Univ)) (Union (Xp A (Univ)) (Xp B (Univ)))) (eqs (res F (Union A B)) (Inter F (Union (Xp A (Univ)) (Xp B (Univ))))))
      (:conv (im (eqs (Xp (Union A B) (Univ)) (Union (Xp A (Univ)) (Xp B (Univ)))) (eqs (res F (Union A B)) (Inter F (Union (Xp A (Univ)) (Xp B (Univ))))))
        (im
          (eqs (Xp (Union A B) (Univ)) (Union (Xp A (Univ)) (Xp B (Univ))))
          (eqs
            (:unfold res (F (Union A B)) ()
              (Inter F (Xp (Union A B) (Univ))))
            (Inter F (Union (Xp A (Univ)) (Xp B (Univ))))))
        (ineq2 (F (Xp (Union A B) (Univ)) (Union (Xp A (Univ)) (Xp B (Univ))))))
      (xpundi (A B (Univ)))))
  (:conv (eqs (Inter F (Union (Xp A (Univ)) (Xp B (Univ)))) (Union (res F A) (res F B)))
    (eqs
      (Inter F (Union (Xp A (Univ)) (Xp B (Univ))))
      (Union
        (:unfold res (F A) ()
          (Inter F (Xp A (Univ))))
        (:unfold res (F B) ()
          (Inter F (Xp B (Univ))))))
    (indi (F (Xp A (Univ)) (Xp B (Univ)))))))

(local theorem eqres ((A set ()) (F set ())) ()
  (iff (subset (Dom F) A) (eqs (res F A) F))
()
(ax_mp ((iff (subset F (Xp A (Univ))) (eqs (res F A) F)) (iff (subset (Dom F) A) (eqs (res F A) F)))
  (ax_mp ((iff (subset (Dom F) A) (subset F (Xp A (Univ)))) (im (iff (subset F (Xp A (Univ))) (eqs (res F A) F)) (iff (subset (Dom F) A) (eqs (res F A) F))))
    (bitr ((subset (Dom F) A) (subset F (Xp A (Univ))) (eqs (res F A) F)))
    (ssdm (A F)))
  (:conv (iff (subset F (Xp A (Univ))) (eqs (res F A) F))
    (iff
      (subset F (Xp A (Univ)))
      (eqs
        (:unfold res (F A) ()
          (Inter F (Xp A (Univ))))
        F))
    (eqin1 (F (Xp A (Univ)))))))

(local theorem resdm ((F set ())) ()
  (eqs (res F (Dom F)) F)
()
(mpbi ((subset (Dom F) (Dom F)) (eqs (res F (Dom F)) F))
  (eqres ((Dom F) F))
  (ssid ((Dom F)))))

(local theorem resres ((A set ()) (B set ()) (F set ())) ()
  (eqs (res (res F A) B) (res F (Inter A B)))
()
(ax_mp ((eqs (res F (Inter A B)) (Inter F (Inter (Xp A (Univ)) (Xp B (Univ))))) (eqs (res (res F A) B) (res F (Inter A B))))
  (ax_mp ((eqs (res (res F A) B) (Inter F (Inter (Xp A (Univ)) (Xp B (Univ))))) (im (eqs (res F (Inter A B)) (Inter F (Inter (Xp A (Univ)) (Xp B (Univ))))) (eqs (res (res F A) B) (res F (Inter A B)))))
    (eqstr4 ((res (res F A) B) (Inter F (Inter (Xp A (Univ)) (Xp B (Univ)))) (res F (Inter A B))))
    (:conv (eqs (res (res F A) B) (Inter F (Inter (Xp A (Univ)) (Xp B (Univ)))))
      (eqs
        (:unfold res ((res F A) B) ()
          (Inter
            (:unfold res (F A) ()
              (Inter F (Xp A (Univ))))
            (Xp B (Univ))))
        (Inter F (Inter (Xp A (Univ)) (Xp B (Univ)))))
      (inass (F (Xp A (Univ)) (Xp B (Univ))))))
  (ax_mp ((eqs (Xp (Inter A B) (Univ)) (Inter (Xp A (Univ)) (Xp B (Univ)))) (eqs (res F (Inter A B)) (Inter F (Inter (Xp A (Univ)) (Xp B (Univ))))))
    (:conv (im (eqs (Xp (Inter A B) (Univ)) (Inter (Xp A (Univ)) (Xp B (Univ)))) (eqs (res F (Inter A B)) (Inter F (Inter (Xp A (Univ)) (Xp B (Univ))))))
      (im
        (eqs (Xp (Inter A B) (Univ)) (Inter (Xp A (Univ)) (Xp B (Univ))))
        (eqs
          (:unfold res (F (Inter A B)) ()
            (Inter F (Xp (Inter A B) (Univ))))
          (Inter F (Inter (Xp A (Univ)) (Xp B (Univ))))))
      (ineq2 (F (Xp (Inter A B) (Univ)) (Inter (Xp A (Univ)) (Xp B (Univ))))))
    (xpindi (A B (Univ))))))

(def lam ((x nat) (a nat (x))) (set ())
((p nat))
(ab p (ex x (eq p (pr x a)))))

(local theorem lameqd ((_G wff ()) (x nat) (_a1 nat (x)) (_a2 nat (x)))
  ((_ah (im _G (eq _a1 _a2))))
  (im _G (eqs (lam x _a1) (lam x _a2)))
((p nat))
(:conv (im _G (eqs (lam x _a1) (lam x _a2)))
  (im
    _G
    (eqs
      (:unfold lam (x _a1) (p)
        (ab p (ex x (eq p (pr x _a1)))))
      (:unfold lam (x _a2) (p)
        (ab p (ex x (eq p (pr x _a2)))))))
  (abeqd (_G p (ex x (eq p (pr x _a1))) (ex x (eq p (pr x _a2))))
    (exeqd (_G x (eq p (pr x _a1)) (eq p (pr x _a2)))
      (eqeqd (_G p p (pr x _a1) (pr x _a2))
        (eqidd (_G p))
        (preqd (_G x x _a1 _a2)
          (eqidd (_G x))
          _ah))))))

(local theorem ellam ((p nat ()) (x nat) (a nat (x))) ()
  (iff (el p (lam x a)) (ex x (eq p (pr x a))))
((q nat))
(:conv (iff (el p (lam x a)) (ex x (eq p (pr x a))))
  (iff
    (el
      p
      (:unfold lam (x a) (q)
        (ab q (ex x (eq q (pr x a))))))
    (ex x (eq p (pr x a))))
  (elabe (q p (ex x (eq q (pr x a))) (ex x (eq p (pr x a))))
    (exeqd ((eq q p) x (eq q (pr x a)) (eq p (pr x a)))
      (eqeq1 (q p (pr x a)))))))

(local theorem prellams ((a nat ()) (b nat ()) (x nat) (v nat (x))) ()
  (iff (el (pr a b) (lam x v)) (eq b (sbn a x v)))
()
(ax_mp ((iff (ex x (eq (pr a b) (pr x v))) (eq b (sbn a x v))) (iff (el (pr a b) (lam x v)) (eq b (sbn a x v))))
  (ax_mp ((iff (el (pr a b) (lam x v)) (ex x (eq (pr a b) (pr x v)))) (im (iff (ex x (eq (pr a b) (pr x v))) (eq b (sbn a x v))) (iff (el (pr a b) (lam x v)) (eq b (sbn a x v)))))
    (bitr ((el (pr a b) (lam x v)) (ex x (eq (pr a b) (pr x v))) (eq b (sbn a x v))))
    (ellam ((pr a b) x v)))
  (ax_mp ((iff (ex x (an (eq x a) (eq b v))) (eq b (sbn a x v))) (iff (ex x (eq (pr a b) (pr x v))) (eq b (sbn a x v))))
    (ax_mp ((iff (ex x (eq (pr a b) (pr x v))) (ex x (an (eq x a) (eq b v)))) (im (iff (ex x (an (eq x a) (eq b v))) (eq b (sbn a x v))) (iff (ex x (eq (pr a b) (pr x v))) (eq b (sbn a x v)))))
      (bitr ((ex x (eq (pr a b) (pr x v))) (ex x (an (eq x a) (eq b v))) (eq b (sbn a x v))))
      (exeqi (x (eq (pr a b) (pr x v)) (an (eq x a) (eq b v)))
        (ax_mp ((iff (an (eq a x) (eq b v)) (an (eq x a) (eq b v))) (iff (eq (pr a b) (pr x v)) (an (eq x a) (eq b v))))
          (ax_mp ((iff (eq (pr a b) (pr x v)) (an (eq a x) (eq b v))) (im (iff (an (eq a x) (eq b v)) (an (eq x a) (eq b v))) (iff (eq (pr a b) (pr x v)) (an (eq x a) (eq b v)))))
            (bitr ((eq (pr a b) (pr x v)) (an (eq a x) (eq b v)) (an (eq x a) (eq b v))))
            (prth (a x b v)))
          (aneq1i ((eq a x) (eq x a) (eq b v))
            (eqcomb (a x))))))
    (ax_mp ((iff (sb a x (eq b v)) (eq b (sbn a x v))) (iff (ex x (an (eq x a) (eq b v))) (eq b (sbn a x v))))
      (ax_mp ((iff (sb a x (eq b v)) (ex x (an (eq x a) (eq b v)))) (im (iff (sb a x (eq b v)) (eq b (sbn a x v))) (iff (ex x (an (eq x a) (eq b v))) (eq b (sbn a x v)))))
        (bitr3 ((ex x (an (eq x a) (eq b v))) (sb a x (eq b v)) (eq b (sbn a x v))))
        (dfsb3 (x a (eq b v))))
      (sbeh (x a (eq b v) (eq b (sbn a x v)))
        (nf_eq (x b (sbn a x v))
          (nfnv (b x))
          (nfsbn1 (x a v)))
        (eqeq2d ((eq x a) b v (sbn a x v))
          (sbnq (x a v))))))))

(local theorem prellame ((b nat ()) (x nat) (y nat ()) (z nat ()) (a nat (x)))
  ((h (im (eq x y) (eq a b))))
  (iff (el (pr y z) (lam x a)) (eq z b))
()
(ax_mp ((iff (eq z (sbn y x a)) (eq z b)) (iff (el (pr y z) (lam x a)) (eq z b)))
  (ax_mp ((iff (el (pr y z) (lam x a)) (eq z (sbn y x a))) (im (iff (eq z (sbn y x a)) (eq z b)) (iff (el (pr y z) (lam x a)) (eq z b))))
    (bitr ((el (pr y z) (lam x a)) (eq z (sbn y x a)) (eq z b)))
    (prellams (y z x a)))
  (ax_mp ((eq (sbn y x a) b) (iff (eq z (sbn y x a)) (eq z b)))
    (eqeq2 (z (sbn y x a) b))
    (sbne (x y a b)
      h))))

(local theorem lameq ((x nat) (a nat (x)) (b nat (x))) ()
  (im (al x (eq a b)) (eqs (lam x a) (lam x b)))
((p nat))
(sylib ((al x (eq a b)) (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eqs (lam x a) (lam x b)))
  (:conv (iff (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eqs (lam x a) (lam x b)))
    (iff
      (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
      (eqs
        (:unfold lam (x a) (p)
          (ab p (ex x (eq p (pr x a)))))
        (:unfold lam (x b) (p)
          (ab p (ex x (eq p (pr x b)))))))
    (abeqb (p (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))))
  (iald (p (al x (eq a b)) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
    (syl ((al x (eq a b)) (al x (iff (eq p (pr x a)) (eq p (pr x b)))) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
      (exeq (x (eq p (pr x a)) (eq p (pr x b))))
      (alimi (x (eq a b) (iff (eq p (pr x a)) (eq p (pr x b))))
        (eqeq2d ((eq a b) p (pr x a) (pr x b))
          (preq2 (x a b))))))))

(local theorem lameqi ((x nat) (a nat (x)) (b nat (x)))
  ((h (eq a b)))
  (eqs (lam x a) (lam x b))
()
(ax_mp ((al x (eq a b)) (eqs (lam x a) (lam x b)))
  (lameq (x a b))
  (ax_gen (x (eq a b))
    h)))

(local theorem nflam1 ((x nat) (a nat (x))) ()
  (nfs x (lam x a))
((p nat))
(:conv (nfs x (lam x a))
  (nfs
    x
    (:unfold lam (x a) (p)
      (ab p (ex x (eq p (pr x a))))))
  (nfab (x p (ex x (eq p (pr x a))))
    (nfex1 (x (eq p (pr x a)))))))

(local theorem nflam ((x nat) (y nat) (a nat (x y)))
  ((h (nfn x a)))
  (nfs x (lam y a))
((p nat))
(:conv (nfs x (lam y a))
  (nfs
    x
    (:unfold lam (y a) (p)
      (ab p (ex y (eq p (pr y a))))))
  (nfab (x p (ex y (eq p (pr y a))))
    (nfex (x y (eq p (pr y a)))
      (nf_eq (x p (pr y a))
        (nfnv (p x))
        (nfpr (x y a)
          (nfnv (y x))
          h))))))

(local theorem cbvlamh ((x nat) (y nat) (a nat (x y)) (b nat (x y)))
  ((h1 (nfn y a))
   (h2 (nfn x b))
   (e (im (eq x y) (eq a b))))
  (eqs (lam x a) (lam y b))
((p1 nat) (p2 nat))
(:conv (eqs (lam x a) (lam y b))
  (eqs
    (:unfold lam (x a) (p1)
      (ab p1 (ex x (eq p1 (pr x a)))))
    (:unfold lam (y b) (p2)
      (ab p2 (ex y (eq p2 (pr y b))))))
  (cbvab (p1 p2 (ex x (eq p1 (pr x a))) (ex y (eq p2 (pr y b))))
    (syl5bb ((eq p1 p2) (ex x (eq p1 (pr x a))) (ex y (eq p1 (pr y b))) (ex y (eq p2 (pr y b))))
      (cbvexh (x y (eq p1 (pr x a)) (eq p1 (pr y b)))
        (nfeq2 (p1 y (pr x a))
          (nfpr (y x a)
            (nfnv (x y))
            h1))
        (nfeq2 (p1 x (pr y b))
          (nfpr (x y b)
            (nfnv (y x))
            h2))
        (eqeq2d ((eq x y) p1 (pr x a) (pr y b))
          (preqd ((eq x y) x y a b)
            (id ((eq x y)))
            e)))
      (exeqd ((eq p1 p2) y (eq p1 (pr y b)) (eq p2 (pr y b)))
        (eqeq1 (p1 p2 (pr y b))))))))

(local theorem cbvlam ((x nat) (y nat) (a nat (x)) (b nat (y)))
  ((e (im (eq x y) (eq a b))))
  (eqs (lam x a) (lam y b))
()
(cbvlamh (x y a b)
  (nfnv (a y))
  (nfnv (b x))
  e))

(local theorem cbvlams ((x nat) (y nat) (a nat (x))) ()
  (eqs (lam x a) (lam y (sbn y x a)))
()
(cbvlamh (x y a (sbn y x a))
  (nfnv (a y))
  (nfsbn1 (x y a))
  (sbnq (x y a))))

(local theorem cbvlamd ((x nat) (y nat) (G wff ()) (a nat (x)) (b nat (y)))
  ((h (im (an G (eq x y)) (eq a b))))
  (im G (eqs (lam x a) (lam y b)))
()
(eqstrd ((lam x a) (lam y (sbn y x a)) (lam y b) G)
  (a1i (G (eqs (lam x a) (lam y (sbn y x a))))
    (cbvlams (x y a)))
  (lameqd (G y (sbn y x a) b)
    (syl (G (al x (im (eq x y) (eq a b))) (eq (sbn y x a) b))
      (sbnet (x y a b))
      (ialda (x G (eq x y) (eq a b))
        h)))))

(local theorem lamisf ((x nat) (a nat (x))) ()
  (isfun (lam x a))
((u nat) (v nat) (w nat) (y nat))
(:let H1 (sbnq (x y a))
(:conv (isfun (lam x a))
  (:unfold isfun ((lam x a)) (u v w)
    (al u (al v (al w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w)))))))
  (ax_gen (u (al v (al w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w))))))
    (ax_gen (v (al w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w)))))
      (ax_gen (w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w))))
        (sylbi ((el (pr u v) (lam x a)) (ex x (eq (pr u v) (pr x a))) (im (el (pr u w) (lam x a)) (eq v w)))
          (ellam ((pr u v) x a))
          (eexh (x (eq (pr u v) (pr x a)) (im (el (pr u w) (lam x a)) (eq v w)))
            (nfim (x (el (pr u w) (lam x a)) (eq v w))
              (nfel2 (x (pr u w) (lam x a))
                (nflam1 (x a)))
              (nfv ((eq v w) x)))
            (sylbi ((eq (pr u v) (pr x a)) (an (eq u x) (eq v a)) (im (el (pr u w) (lam x a)) (eq v w)))
              (prth (u x v a))
              (syl5bi ((an (eq u x) (eq v a)) (el (pr u w) (lam x a)) (ex y (eq (pr u w) (pr y (sbn y x a)))) (eq v w))
                (ax_mp ((iff (ex x (eq (pr u w) (pr x a))) (ex y (eq (pr u w) (pr y (sbn y x a))))) (iff (el (pr u w) (lam x a)) (ex y (eq (pr u w) (pr y (sbn y x a))))))
                  (ax_mp ((iff (el (pr u w) (lam x a)) (ex x (eq (pr u w) (pr x a)))) (im (iff (ex x (eq (pr u w) (pr x a))) (ex y (eq (pr u w) (pr y (sbn y x a))))) (iff (el (pr u w) (lam x a)) (ex y (eq (pr u w) (pr y (sbn y x a)))))))
                    (bitr ((el (pr u w) (lam x a)) (ex x (eq (pr u w) (pr x a))) (ex y (eq (pr u w) (pr y (sbn y x a))))))
                    (ellam ((pr u w) x a)))
                  (cbvexh (x y (eq (pr u w) (pr x a)) (eq (pr u w) (pr y (sbn y x a))))
                    (nfv ((eq (pr u w) (pr x a)) y))
                    (nfeq2 ((pr u w) x (pr y (sbn y x a)))
                      (nfpr (x y (sbn y x a))
                        (nfnv (y x))
                        (nfsbn1 (x y a))))
                    (eqeq2d ((eq x y) (pr u w) (pr x a) (pr y (sbn y x a)))
                      (preqd ((eq x y) x y a (sbn y x a))
                        (id ((eq x y)))
                        H1))))
                (eexd (y (an (eq u x) (eq v a)) (eq (pr u w) (pr y (sbn y x a))) (eq v w))
                  (syl5bi ((an (eq u x) (eq v a)) (eq (pr u w) (pr y (sbn y x a))) (an (eq u y) (eq w (sbn y x a))) (eq v w))
                    (prth (u y w (sbn y x a)))
                    (exp ((an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a))) (eq v w))
                      (eqtr4d ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) v a w)
                        (anlr ((eq u x) (eq v a) (an (eq u y) (eq w (sbn y x a)))))
                        (eqtr4d ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) w (sbn y x a) a)
                          (anrr ((an (eq u x) (eq v a)) (eq u y) (eq w (sbn y x a))))
                          (syl ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) (eq x y) (eq a (sbn y x a)))
                            H1
                            (eqtr3d ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) x u y)
                              (anll ((eq u x) (eq v a) (an (eq u y) (eq w (sbn y x a)))))
                              (anrl ((an (eq u x) (eq v a)) (eq u y) (eq w (sbn y x a)))))))))))))))))))))

(local theorem finlam ((A set ()) (x nat) (v nat (x))) ()
  (im (finite A) (finite (res (lam x v) A)))
((_1 nat) (m nat) (n nat) (p nat) (q nat) (x1 nat) (x2 nat) (x3 nat))
(:conv (im (finite A) (finite (res (lam x v) A)))
  (im
    (:unfold finite (A) (m x)
      (ex m (al x (im (el x A) (lt x m)))))
    (finite (res (lam x v) A)))
  (eex (m (al x (im (el x A) (lt x m))) (finite (res (lam x v) A)))
    (mpi ((al x (im (el x A) (lt x m))) (ex n (al x (im (lt x m) (lt (pr x v) n)))) (finite (res (lam x v) A)))
      (ind (_1 x1 m (ex n (al x (im (lt x _1) (lt (pr x v) n)))) (ex n (al x (im (lt x (d0)) (lt (pr x v) n)))) (ex n (al x (im (lt x m) (lt (pr x v) n)))) (ex n (al x (im (lt x x1) (lt (pr x v) n)))) (ex n (al x (im (lt x (suc x1)) (lt (pr x v) n)))))
        (exeqd ((eq _1 m) n (al x (im (lt x _1) (lt (pr x v) n))) (al x (im (lt x m) (lt (pr x v) n))))
          (aleqd ((eq _1 m) x (im (lt x _1) (lt (pr x v) n)) (im (lt x m) (lt (pr x v) n)))
            (imeqd ((eq _1 m) (lt x _1) (lt x m) (lt (pr x v) n) (lt (pr x v) n))
              (lteqd ((eq _1 m) x x _1 m)
                (eqidd ((eq _1 m) x))
                (id ((eq _1 m))))
              (biidd ((eq _1 m) (lt (pr x v) n))))))
        (exeqd ((eq _1 (d0)) n (al x (im (lt x _1) (lt (pr x v) n))) (al x (im (lt x (d0)) (lt (pr x v) n))))
          (aleqd ((eq _1 (d0)) x (im (lt x _1) (lt (pr x v) n)) (im (lt x (d0)) (lt (pr x v) n)))
            (imeqd ((eq _1 (d0)) (lt x _1) (lt x (d0)) (lt (pr x v) n) (lt (pr x v) n))
              (lteqd ((eq _1 (d0)) x x _1 (d0))
                (eqidd ((eq _1 (d0)) x))
                (id ((eq _1 (d0)))))
              (biidd ((eq _1 (d0)) (lt (pr x v) n))))))
        (exeqd ((eq _1 x1) n (al x (im (lt x _1) (lt (pr x v) n))) (al x (im (lt x x1) (lt (pr x v) n))))
          (aleqd ((eq _1 x1) x (im (lt x _1) (lt (pr x v) n)) (im (lt x x1) (lt (pr x v) n)))
            (imeqd ((eq _1 x1) (lt x _1) (lt x x1) (lt (pr x v) n) (lt (pr x v) n))
              (lteqd ((eq _1 x1) x x _1 x1)
                (eqidd ((eq _1 x1) x))
                (id ((eq _1 x1))))
              (biidd ((eq _1 x1) (lt (pr x v) n))))))
        (exeqd ((eq _1 (suc x1)) n (al x (im (lt x _1) (lt (pr x v) n))) (al x (im (lt x (suc x1)) (lt (pr x v) n))))
          (aleqd ((eq _1 (suc x1)) x (im (lt x _1) (lt (pr x v) n)) (im (lt x (suc x1)) (lt (pr x v) n)))
            (imeqd ((eq _1 (suc x1)) (lt x _1) (lt x (suc x1)) (lt (pr x v) n) (lt (pr x v) n))
              (lteqd ((eq _1 (suc x1)) x x _1 (suc x1))
                (eqidd ((eq _1 (suc x1)) x))
                (id ((eq _1 (suc x1)))))
              (biidd ((eq _1 (suc x1)) (lt (pr x v) n))))))
        (iexie (n x2 (al x (im (lt x (d0)) (lt (pr x v) n))))
          (iald (x (eq n x2) (im (lt x (d0)) (lt (pr x v) n)))
            (a1i ((eq n x2) (im (lt x (d0)) (lt (pr x v) n)))
              (ax_mp ((not (lt x (d0))) (im (lt x (d0)) (lt (pr x v) n)))
                (absurd ((lt x (d0)) (lt (pr x v) n)))
                (lt02 (x))))))
        (sylibr ((ex n (al x (im (lt x x1) (lt (pr x v) n)))) (ex x3 (al x (im (lt x (suc x1)) (lt (pr x v) x3)))) (ex n (al x (im (lt x (suc x1)) (lt (pr x v) n)))))
          (cbvex (n x3 (al x (im (lt x (suc x1)) (lt (pr x v) n))) (al x (im (lt x (suc x1)) (lt (pr x v) x3))))
            (aleqd ((eq n x3) x (im (lt x (suc x1)) (lt (pr x v) n)) (im (lt x (suc x1)) (lt (pr x v) x3)))
              (imeq2d ((eq n x3) (lt x (suc x1)) (lt (pr x v) n) (lt (pr x v) x3))
                (lteq2 ((pr x v) n x3)))))
          (eex (n (al x (im (lt x x1) (lt (pr x v) n))) (ex x3 (al x (im (lt x (suc x1)) (lt (pr x v) x3)))))
            (syl ((al x (im (lt x x1) (lt (pr x v) n))) (al x (im (lt x (suc x1)) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))) (ex x3 (al x (im (lt x (suc x1)) (lt (pr x v) x3)))))
              (iexe (x3 (max n (suc (pr x1 (sbn x1 x v)))) (al x (im (lt x (suc x1)) (lt (pr x v) x3))) (al x (im (lt x (suc x1)) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))))
                (aleqdh (x (eq x3 (max n (suc (pr x1 (sbn x1 x v))))) (im (lt x (suc x1)) (lt (pr x v) x3)) (im (lt x (suc x1)) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v)))))))
                  (nfeq2 (x3 x (max n (suc (pr x1 (sbn x1 x v)))))
                    (nfmax (x n (suc (pr x1 (sbn x1 x v))))
                      (nfnv (n x))
                      (nfsuc (x (pr x1 (sbn x1 x v)))
                        (nfpr (x x1 (sbn x1 x v))
                          (nfnv (x1 x))
                          (nfsbn1 (x x1 v))))))
                  (imeq2d ((eq x3 (max n (suc (pr x1 (sbn x1 x v))))) (lt x (suc x1)) (lt (pr x v) x3) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))
                    (lteq2 ((pr x v) x3 (max n (suc (pr x1 (sbn x1 x v)))))))))
              (alimi (x (im (lt x x1) (lt (pr x v) n)) (im (lt x (suc x1)) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v)))))))
                (syl5bir ((im (lt x x1) (lt (pr x v) n)) (lt x (suc x1)) (le x x1) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))
                  (leltsuc (x x1))
                  (syl5bi ((im (lt x x1) (lt (pr x v) n)) (le x x1) (or (lt x x1) (eq x x1)) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))
                    (leloe (x x1))
                    (eord ((im (lt x x1) (lt (pr x v) n)) (lt x x1) (eq x x1) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))
                      (imim2i ((lt x x1) (lt (pr x v) n) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))
                        (mpi ((lt (pr x v) n) (le n (max n (suc (pr x1 (sbn x1 x v))))) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))
                          (lemax1 (n (suc (pr x1 (sbn x1 x v)))))
                          (ltletr ((pr x v) n (max n (suc (pr x1 (sbn x1 x v))))))))
                      (a1i ((im (lt x x1) (lt (pr x v) n)) (im (eq x x1) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v)))))))
                        (mpbii ((eq x x1) (le (suc (pr x v)) (max n (suc (pr x v)))) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v))))))
                          (lemax2 (n (suc (pr x v))))
                          (:conv (im (eq x x1) (iff (le (suc (pr x v)) (max n (suc (pr x v)))) (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v)))))))
                            (im
                              (eq x x1)
                              (iff
                                (:sym (:unfold lt ((pr x v) (max n (suc (pr x v)))) ()
                                  (le (suc (pr x v)) (max n (suc (pr x v))))))
                                (lt (pr x v) (max n (suc (pr x1 (sbn x1 x v)))))))
                            (lteq2d ((eq x x1) (pr x v) (max n (suc (pr x v))) (max n (suc (pr x1 (sbn x1 x v)))))
                              (maxeqd ((eq x x1) n n (suc (pr x v)) (suc (pr x1 (sbn x1 x v))))
                                (eqidd ((eq x x1) n))
                                (suceqd ((eq x x1) (pr x v) (pr x1 (sbn x1 x v)))
                                  (preqd ((eq x x1) x x1 v (sbn x1 x v))
                                    (id ((eq x x1)))
                                    (sbnq (x x1 v)))))))))))))))))
      (:conv (im (al x (im (el x A) (lt x m))) (im (ex n (al x (im (lt x m) (lt (pr x v) n)))) (finite (res (lam x v) A))))
        (im
          (al x (im (el x A) (lt x m)))
          (im
            (ex n (al x (im (lt x m) (lt (pr x v) n))))
            (:unfold finite ((res (lam x v) A)) (n p)
              (ex n (al p (im (el p (res (lam x v) A)) (lt p n)))))))
        (eximd (n (al x (im (el x A) (lt x m))) (al x (im (lt x m) (lt (pr x v) n))) (al p (im (el p (res (lam x v) A)) (lt p n))))
          (syl6 ((al x (im (el x A) (lt x m))) (al x (im (lt x m) (lt (pr x v) n))) (al x (im (el x A) (lt (pr x v) n))) (al p (im (el p (res (lam x v) A)) (lt p n))))
            (iald (p (al x (im (el x A) (lt (pr x v) n))) (im (el p (res (lam x v) A)) (lt p n)))
              (syl5bi ((al x (im (el x A) (lt (pr x v) n))) (el p (res (lam x v) A)) (an (el p (lam x v)) (el (fst p) A)) (lt p n))
                (elres ((lam x v) A p))
                (sylibr ((al x (im (el x A) (lt (pr x v) n))) (im (el p (lam x v)) (im (el (fst p) A) (lt p n))) (im (an (el p (lam x v)) (el (fst p) A)) (lt p n)))
                  (impexp ((el p (lam x v)) (el (fst p) A) (lt p n)))
                  (syl5bi ((al x (im (el x A) (lt (pr x v) n))) (el p (lam x v)) (ex x (eq p (pr x v))) (im (el (fst p) A) (lt p n)))
                    (:conv (iff (el p (lam x v)) (ex x (eq p (pr x v))))
                      (iff
                        (el
                          p
                          (:unfold lam (x v) (q)
                            (ab q (ex x (eq q (pr x v))))))
                        (ex x (eq p (pr x v))))
                      (elabe (q p (ex x (eq q (pr x v))) (ex x (eq p (pr x v))))
                        (exeqd ((eq q p) x (eq q (pr x v)) (eq p (pr x v)))
                          (eqeq1 (q p (pr x v))))))
                    (sylibr ((al x (im (el x A) (lt (pr x v) n))) (al x (im (eq p (pr x v)) (im (el (fst p) A) (lt p n)))) (im (ex x (eq p (pr x v))) (im (el (fst p) A) (lt p n))))
                      (eexb (x (eq p (pr x v)) (im (el (fst p) A) (lt p n))))
                      (alimi (x (im (el x A) (lt (pr x v) n)) (im (eq p (pr x v)) (im (el (fst p) A) (lt p n))))
                        (syl5ibrcom ((im (el x A) (lt (pr x v) n)) (im (el (fst p) A) (lt p n)) (eq p (pr x v)) (im (el x A) (lt (pr x v) n)))
                          (imeqd ((eq p (pr x v)) (el (fst p) A) (el x A) (lt p n) (lt (pr x v) n))
                            (eleq1d (A (eq p (pr x v)) (fst p) x)
                              (syl6eq ((eq p (pr x v)) (fst p) (fst (pr x v)) x)
                                (fstpr (x v))
                                (fsteq (p (pr x v)))))
                            (lteq1 (p (pr x v) n)))
                          (id ((im (el x A) (lt (pr x v) n)))))))))))
            (al2imi (x (im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n)) (im (el x A) (lt (pr x v) n)))
              (exp ((im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n)) (im (el x A) (lt (pr x v) n)))
                (syld ((an (im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n))) (el x A) (lt x m) (lt (pr x v) n))
                  (anl ((im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n))))
                  (anr ((im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n))))))))))))))

(local theorem finlamh ((x nat) (A set (x)) (v nat (x))) ()
  (im (finite A) (finite (res (lam x v) A)))
((x1 nat))
(sylibr ((finite A) (finite (res (lam x1 (sbn x1 x v)) A)) (finite (res (lam x v) A)))
  (ax_mp ((eqs (res (lam x v) A) (res (lam x1 (sbn x1 x v)) A)) (iff (finite (res (lam x v) A)) (finite (res (lam x1 (sbn x1 x v)) A))))
    (fineq ((res (lam x v) A) (res (lam x1 (sbn x1 x v)) A)))
    (ax_mp ((eqs (lam x v) (lam x1 (sbn x1 x v))) (eqs (res (lam x v) A) (res (lam x1 (sbn x1 x v)) A)))
      (reseq1 ((lam x v) (lam x1 (sbn x1 x v)) A))
      (cbvlams (x x1 v))))
  (finlam (A x1 (sbn x1 x v)))))

(local theorem ellamima ((A set ()) (a nat ()) (x nat) (v nat (x))) ()
  (iff (el a (Im (lam x v) A)) (ex x (an (el x A) (eq a v))))
((y nat))
(ax_mp ((iff (ex y (an (el y A) (el (pr y a) (lam x v)))) (ex x (an (el x A) (eq a v)))) (iff (el a (Im (lam x v) A)) (ex x (an (el x A) (eq a v)))))
  (ax_mp ((iff (el a (Im (lam x v) A)) (ex y (an (el y A) (el (pr y a) (lam x v))))) (im (iff (ex y (an (el y A) (el (pr y a) (lam x v)))) (ex x (an (el x A) (eq a v)))) (iff (el a (Im (lam x v) A)) (ex x (an (el x A) (eq a v))))))
    (bitr ((el a (Im (lam x v) A)) (ex y (an (el y A) (el (pr y a) (lam x v)))) (ex x (an (el x A) (eq a v)))))
    (elima (A (lam x v) a y)))
  (ax_mp ((iff (ex x (an (el x A) (eq a v))) (ex y (an (el y A) (ex x (an (eq y x) (eq a v)))))) (iff (ex y (an (el y A) (el (pr y a) (lam x v)))) (ex x (an (el x A) (eq a v)))))
    (ax_mp ((iff (ex y (an (el y A) (el (pr y a) (lam x v)))) (ex y (an (el y A) (ex x (an (eq y x) (eq a v)))))) (im (iff (ex x (an (el x A) (eq a v))) (ex y (an (el y A) (ex x (an (eq y x) (eq a v)))))) (iff (ex y (an (el y A) (el (pr y a) (lam x v)))) (ex x (an (el x A) (eq a v))))))
      (bitr4 ((ex y (an (el y A) (el (pr y a) (lam x v)))) (ex y (an (el y A) (ex x (an (eq y x) (eq a v))))) (ex x (an (el x A) (eq a v)))))
      (rexeqi (y (el y A) (el (pr y a) (lam x v)) (ex x (an (eq y x) (eq a v))))
        (ax_mp ((iff (ex x (eq (pr y a) (pr x v))) (ex x (an (eq y x) (eq a v)))) (iff (el (pr y a) (lam x v)) (ex x (an (eq y x) (eq a v)))))
          (ax_mp ((iff (el (pr y a) (lam x v)) (ex x (eq (pr y a) (pr x v)))) (im (iff (ex x (eq (pr y a) (pr x v))) (ex x (an (eq y x) (eq a v)))) (iff (el (pr y a) (lam x v)) (ex x (an (eq y x) (eq a v))))))
            (bitr ((el (pr y a) (lam x v)) (ex x (eq (pr y a) (pr x v))) (ex x (an (eq y x) (eq a v)))))
            (ellam ((pr y a) x v)))
          (exeqi (x (eq (pr y a) (pr x v)) (an (eq y x) (eq a v)))
            (prth (y x a v))))))
    (birexexi (x y (an (el x A) (eq a v)) (an (eq y x) (eq a v)) (el y A))
      (ax_mp ((iff (ex y (an (eq y x) (an (el y A) (eq a v)))) (ex y (an (el y A) (an (eq y x) (eq a v))))) (iff (an (el x A) (eq a v)) (ex y (an (el y A) (an (eq y x) (eq a v))))))
        (ax_mp ((iff (ex y (an (eq y x) (an (el y A) (eq a v)))) (an (el x A) (eq a v))) (im (iff (ex y (an (eq y x) (an (el y A) (eq a v)))) (ex y (an (el y A) (an (eq y x) (eq a v))))) (iff (an (el x A) (eq a v)) (ex y (an (el y A) (an (eq y x) (eq a v)))))))
          (bitr3 ((an (el x A) (eq a v)) (ex y (an (eq y x) (an (el y A) (eq a v)))) (ex y (an (el y A) (an (eq y x) (eq a v))))))
          (exeqe (y x (an (el y A) (eq a v)) (an (el x A) (eq a v)))
            (aneq1d ((eq y x) (el y A) (el x A) (eq a v))
              (eleq1 (A y x)))))
        (exeqi (y (an (eq y x) (an (el y A) (eq a v))) (an (el y A) (an (eq y x) (eq a v))))
          (anlass ((eq y x) (el y A) (eq a v)))))))))

(local theorem ellamimaab ((a nat ()) (x nat) (v nat (x)) (p wff (x))) ()
  (iff (el a (Im (lam x v) (ab x p))) (ex x (an p (eq a v))))
((y nat))
(ax_mp ((iff (el a (Im (lam y (sbn y x v)) (ab x p))) (ex x (an p (eq a v)))) (iff (el a (Im (lam x v) (ab x p))) (ex x (an p (eq a v)))))
  (ax_mp ((iff (el a (Im (lam x v) (ab x p))) (el a (Im (lam y (sbn y x v)) (ab x p)))) (im (iff (el a (Im (lam y (sbn y x v)) (ab x p))) (ex x (an p (eq a v)))) (iff (el a (Im (lam x v) (ab x p))) (ex x (an p (eq a v))))))
    (bitr ((el a (Im (lam x v) (ab x p))) (el a (Im (lam y (sbn y x v)) (ab x p))) (ex x (an p (eq a v)))))
    (ax_mp ((eqs (Im (lam x v) (ab x p)) (Im (lam y (sbn y x v)) (ab x p))) (iff (el a (Im (lam x v) (ab x p))) (el a (Im (lam y (sbn y x v)) (ab x p)))))
      (eleq2 ((Im (lam x v) (ab x p)) (Im (lam y (sbn y x v)) (ab x p)) a))
      (ax_mp ((eqs (lam x v) (lam y (sbn y x v))) (eqs (Im (lam x v) (ab x p)) (Im (lam y (sbn y x v)) (ab x p))))
        (imaeq1 ((lam x v) (lam y (sbn y x v)) (ab x p)))
        (cbvlams (x y v)))))
  (ax_mp ((iff (ex x (an p (eq a v))) (ex y (an (el y (ab x p)) (eq a (sbn y x v))))) (iff (el a (Im (lam y (sbn y x v)) (ab x p))) (ex x (an p (eq a v)))))
    (ax_mp ((iff (el a (Im (lam y (sbn y x v)) (ab x p))) (ex y (an (el y (ab x p)) (eq a (sbn y x v))))) (im (iff (ex x (an p (eq a v))) (ex y (an (el y (ab x p)) (eq a (sbn y x v))))) (iff (el a (Im (lam y (sbn y x v)) (ab x p))) (ex x (an p (eq a v))))))
      (bitr4 ((el a (Im (lam y (sbn y x v)) (ab x p))) (ex y (an (el y (ab x p)) (eq a (sbn y x v)))) (ex x (an p (eq a v)))))
      (ellamima ((ab x p) a y (sbn y x v))))
    (cbvexh (x y (an p (eq a v)) (an (el y (ab x p)) (eq a (sbn y x v))))
      (nfv ((an p (eq a v)) y))
      (nfan (x (el y (ab x p)) (eq a (sbn y x v)))
        (nfel2 (x y (ab x p))
          (nfab1 (x p)))
        (nfeq2 (a x (sbn y x v))
          (nfsbn1 (x y v))))
      (aneqd ((eq x y) p (el y (ab x p)) (eq a v) (eq a (sbn y x v)))
        (syl6bbr ((eq x y) p (sb y x p) (el y (ab x p)))
          (elab (y x p))
          (sbq (x y p)))
        (eqeq2d ((eq x y) a v (sbn y x v))
          (sbnq (x y v))))))))

(local theorem finlamima ((A set ()) (x nat) (v nat (x))) ()
  (im (finite A) (finite (Im (lam x v) A)))
()
(sylib ((finite A) (finite (Ran (res (lam x v) A))) (finite (Im (lam x v) A)))
  (ax_mp ((eqs (Ran (res (lam x v) A)) (Im (lam x v) A)) (iff (finite (Ran (res (lam x v) A))) (finite (Im (lam x v) A))))
    (fineq ((Ran (res (lam x v) A)) (Im (lam x v) A)))
    (rnres (A (lam x v))))
  (syl ((finite A) (finite (res (lam x v) A)) (finite (Ran (res (lam x v) A))))
    (rnfin ((res (lam x v) A)))
    (finlam (A x v)))))

(local theorem lameqb ((x nat) (a nat (x)) (b nat (x))) ()
  (iff (al x (eq a b)) (eqs (lam x a) (lam x b)))
((p nat) (y nat) (z nat))
(:let H1 (nfnv (z x))
(:let H2 (id ((eq x z)))
(ibii ((al x (eq a b)) (eqs (lam x a) (lam x b)))
  (lameq (x a b))
  (sylbir ((eqs (lam x a) (lam x b)) (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (al x (eq a b)))
    (:conv (iff (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eqs (lam x a) (lam x b)))
      (iff
        (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
        (eqs
          (:unfold lam (x a) (p)
            (ab p (ex x (eq p (pr x a)))))
          (:unfold lam (x b) (p)
            (ab p (ex x (eq p (pr x b)))))))
      (abeqb (p (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))))
    (sylibr ((al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (al y (eq (sbn y x a) (sbn y x b))) (al x (eq a b)))
      (cbvalh (x y (eq a b) (eq (sbn y x a) (sbn y x b)))
        (nfv ((eq a b) y))
        (nf_eq (x (sbn y x a) (sbn y x b))
          (nfsbn1 (x y a))
          (nfsbn1 (x y b)))
        (eqeqd ((eq x y) a (sbn y x a) b (sbn y x b))
          (sbnq (x y a))
          (sbnq (x y b))))
      (iald (y (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eq (sbn y x a) (sbn y x b)))
        (syl ((al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))) (eq (sbn y x a) (sbn y x b)))
          (eex (z (eq (pr y (sbn y x a)) (pr z (sbn z x b))) (eq (sbn y x a) (sbn y x b)))
            (sylbi ((eq (pr y (sbn y x a)) (pr z (sbn z x b))) (an (eq y z) (eq (sbn y x a) (sbn z x b))) (eq (sbn y x a) (sbn y x b)))
              (prth (y z (sbn y x a) (sbn z x b)))
              (imp ((eq y z) (eq (sbn y x a) (sbn z x b)) (eq (sbn y x a) (sbn y x b)))
                (bi2d ((eq y z) (eq (sbn y x a) (sbn y x b)) (eq (sbn y x a) (sbn z x b)))
                  (eqeq2d ((eq y z) (sbn y x a) (sbn y x b) (sbn z x b))
                    (sbneq1 (x y z b)))))))
          (mpbii ((al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))))
            (ax_mp ((eq (pr y (sbn y x a)) (pr y (sbn y x a))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))))
              (iexe (z y (eq (pr y (sbn y x a)) (pr z (sbn z x a))) (eq (pr y (sbn y x a)) (pr y (sbn y x a))))
                (eqeq2d ((eq z y) (pr y (sbn y x a)) (pr z (sbn z x a)) (pr y (sbn y x a)))
                  (preqd ((eq z y) z y (sbn z x a) (sbn y x a))
                    (id ((eq z y)))
                    (sbneq1 (x z y a)))))
              (eqid ((pr y (sbn y x a)))))
            (eale (p (pr y (sbn y x a)) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))) (iff (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b))))))
              (bieqd ((eq p (pr y (sbn y x a))) (ex x (eq p (pr x a))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (ex x (eq p (pr x b))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))))
                (syl5bb ((eq p (pr y (sbn y x a))) (ex x (eq p (pr x a))) (ex z (eq p (pr z (sbn z x a)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))))
                  (cbvexh (x z (eq p (pr x a)) (eq p (pr z (sbn z x a))))
                    (nfv ((eq p (pr x a)) z))
                    (nfeq2 (p x (pr z (sbn z x a)))
                      (nfpr (x z (sbn z x a))
                        H1
                        (nfsbn1 (x z a))))
                    (eqeq2d ((eq x z) p (pr x a) (pr z (sbn z x a)))
                      (preqd ((eq x z) x z a (sbn z x a))
                        H2
                        (sbnq (x z a)))))
                  (exeqd ((eq p (pr y (sbn y x a))) z (eq p (pr z (sbn z x a))) (eq (pr y (sbn y x a)) (pr z (sbn z x a))))
                    (eqeq1 (p (pr y (sbn y x a)) (pr z (sbn z x a))))))
                (syl5bb ((eq p (pr y (sbn y x a))) (ex x (eq p (pr x b))) (ex z (eq p (pr z (sbn z x b)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))))
                  (cbvexh (x z (eq p (pr x b)) (eq p (pr z (sbn z x b))))
                    (nfv ((eq p (pr x b)) z))
                    (nfeq2 (p x (pr z (sbn z x b)))
                      (nfpr (x z (sbn z x b))
                        H1
                        (nfsbn1 (x z b))))
                    (eqeq2d ((eq x z) p (pr x b) (pr z (sbn z x b)))
                      (preqd ((eq x z) x z b (sbn z x b))
                        H2
                        (sbnq (x z b)))))
                  (exeqd ((eq p (pr y (sbn y x a))) z (eq p (pr z (sbn z x b))) (eq (pr y (sbn y x a)) (pr z (sbn z x b))))
                    (eqeq1 (p (pr y (sbn y x a)) (pr z (sbn z x b)))))))))))))))))

(local theorem reslameq ((A set ()) (x nat) (a nat (x)) (b nat (x))) ()
  (im (al x (im (el x A) (eq a b))) (eqs (res (lam x a) A) (res (lam x b) A)))
((p nat))
(eqrd ((res (lam x a) A) (res (lam x b) A) (al x (im (el x A) (eq a b))) p)
  (bitr4g ((al x (im (el x A) (eq a b))) (an (el p (lam x a)) (el (fst p) A)) (an (el p (lam x b)) (el (fst p) A)) (el p (res (lam x a) A)) (el p (res (lam x b) A)))
    (elres ((lam x a) A p))
    (elres ((lam x b) A p))
    (syla ((al x (im (el x A) (eq a b))) (el (fst p) A) (iff (el p (lam x a)) (el p (lam x b))) (iff (an (el p (lam x a)) (el (fst p) A)) (an (el p (lam x b)) (el (fst p) A))))
      (aneq1a ((el p (lam x a)) (el p (lam x b)) (el (fst p) A)))
      (bitr4g ((an (al x (im (el x A) (eq a b))) (el (fst p) A)) (ex x (eq p (pr x a))) (ex x (eq p (pr x b))) (el p (lam x a)) (el p (lam x b)))
        (ellam (p x a))
        (ellam (p x b))
        (syl ((an (al x (im (el x A) (eq a b))) (el (fst p) A)) (al x (iff (eq p (pr x a)) (eq p (pr x b)))) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
          (exeq (x (eq p (pr x a)) (eq p (pr x b))))
          (impcom ((el (fst p) A) (al x (im (el x A) (eq a b))) (al x (iff (eq p (pr x a)) (eq p (pr x b)))))
            (alimd (x (el (fst p) A) (im (el x A) (eq a b)) (iff (eq p (pr x a)) (eq p (pr x b))))
              (exp ((el (fst p) A) (im (el x A) (eq a b)) (iff (eq p (pr x a)) (eq p (pr x b))))
                (rbida ((an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x) (eq p (pr x a)) (eq p (pr x b)))
                  (syl6eq ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x a))) (fst p) (fst (pr x a)) x)
                    (fstpr (x a))
                    (fsteqd ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x a))) p (pr x a))
                      (anr ((an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x a))))))
                  (syl6eq ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x b))) (fst p) (fst (pr x b)) x)
                    (fstpr (x b))
                    (fsteqd ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x b))) p (pr x b))
                      (anr ((an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x b))))))
                  (eqeq2d ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) p (pr x a) (pr x b))
                    (preq2d ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) x a b)
                      (mpd ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) (el x A) (eq a b))
                        (mpbid ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) (el (fst p) A) (el x A))
                          (eleq1d (A (an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) (fst p) x)
                            (anr ((an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x))))
                          (anll ((el (fst p) A) (im (el x A) (eq a b)) (eq (fst p) x))))
                        (anlr ((el (fst p) A) (im (el x A) (eq a b)) (eq (fst p) x))))))))))))))))

(local theorem dmlam ((x nat) (a nat (x))) ()
  (eqs (Dom (lam x a)) (Univ))
((y nat) (z nat))
(eqri ((Dom (lam x a)) (Univ) y)
  (ax_mp ((el y (Univ)) (iff (el y (Dom (lam x a))) (el y (Univ))))
    (ax_mp ((el y (Dom (lam x a))) (im (el y (Univ)) (iff (el y (Dom (lam x a))) (el y (Univ)))))
      (bith ((el y (Dom (lam x a))) (el y (Univ))))
      (ax_mp ((el (pr y (sbn y x a)) (lam x a)) (el y (Dom (lam x a))))
        (preldm ((lam x a) y (sbn y x a)))
        (mpbir ((el (pr y (sbn y x a)) (lam z (sbn z x a))) (el (pr y (sbn y x a)) (lam x a)))
          (ax_mp ((eqs (lam x a) (lam z (sbn z x a))) (iff (el (pr y (sbn y x a)) (lam x a)) (el (pr y (sbn y x a)) (lam z (sbn z x a)))))
            (eleq2 ((lam x a) (lam z (sbn z x a)) (pr y (sbn y x a))))
            (cbvlams (x z a)))
          (mpbir ((ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (el (pr y (sbn y x a)) (lam z (sbn z x a))))
            (ellam ((pr y (sbn y x a)) z (sbn z x a)))
            (ax_mp ((eq (pr y (sbn y x a)) (pr y (sbn y x a))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))))
              (iexe (z y (eq (pr y (sbn y x a)) (pr z (sbn z x a))) (eq (pr y (sbn y x a)) (pr y (sbn y x a))))
                (eqeq2d ((eq z y) (pr y (sbn y x a)) (pr z (sbn z x a)) (pr y (sbn y x a)))
                  (preqd ((eq z y) z y (sbn z x a) (sbn y x a))
                    (id ((eq z y)))
                    (sbneq1 (x z y a)))))
              (eqid ((pr y (sbn y x a)))))))))
    (elv (y)))))

(local theorem dmreslam ((x nat) (A set (x)) (a nat (x))) ()
  (eqs (Dom (res (lam x a) A)) A)
()
(ax_mp ((eqs (Inter (Dom (lam x a)) A) A) (eqs (Dom (res (lam x a) A)) A))
  (ax_mp ((eqs (Dom (res (lam x a) A)) (Inter (Dom (lam x a)) A)) (im (eqs (Inter (Dom (lam x a)) A) A) (eqs (Dom (res (lam x a) A)) A)))
    (eqstr ((Dom (res (lam x a) A)) (Inter (Dom (lam x a)) A) A))
    (dmres (A (lam x a))))
  (ax_mp ((eqs (Inter (Univ) A) A) (eqs (Inter (Dom (lam x a)) A) A))
    (ax_mp ((eqs (Inter (Dom (lam x a)) A) (Inter (Univ) A)) (im (eqs (Inter (Univ) A) A) (eqs (Inter (Dom (lam x a)) A) A)))
      (eqstr ((Inter (Dom (lam x a)) A) (Inter (Univ) A) A))
      (ax_mp ((eqs (Dom (lam x a)) (Univ)) (eqs (Inter (Dom (lam x a)) A) (Inter (Univ) A)))
        (ineq1 ((Dom (lam x a)) (Univ) A))
        (dmlam (x a))))
    (inv1 (A)))))

(local def rapp ((F set ()) (x nat ())) (set ())
((y nat))
(ab y (el (pr x y) F)))

(local theorem rappeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_xh (im _G (eq _x1 _x2))))
  (im _G (eqs (rapp _F1 _x1) (rapp _F2 _x2)))
((y nat))
(:conv (im _G (eqs (rapp _F1 _x1) (rapp _F2 _x2)))
  (im
    _G
    (eqs
      (:unfold rapp (_F1 _x1) (y)
        (ab y (el (pr _x1 y) _F1)))
      (:unfold rapp (_F2 _x2) (y)
        (ab y (el (pr _x2 y) _F2)))))
  (abeqd (_G y (el (pr _x1 y) _F1) (el (pr _x2 y) _F2))
    (eleqd (_G (pr _x1 y) (pr _x2 y) _F1 _F2)
      (preqd (_G _x1 _x2 y y)
        _xh
        (eqidd (_G y)))
      _Fh))))

(local theorem rappeq ((_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ())) ()
  (im (eqs _F1 _F2) (im (eq _x1 _x2) (eqs (rapp _F1 _x1) (rapp _F2 _x2))))
()
(exp ((eqs _F1 _F2) (eq _x1 _x2) (eqs (rapp _F1 _x1) (rapp _F2 _x2)))
  (rappeqd ((an (eqs _F1 _F2) (eq _x1 _x2)) _F1 _F2 _x1 _x2)
    (anl ((eqs _F1 _F2) (eq _x1 _x2)))
    (anr ((eqs _F1 _F2) (eq _x1 _x2))))))

(local theorem rappeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (x nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eqs (rapp _F1 x) (rapp _F2 x)))
()
(rappeqd (_G _F1 _F2 x x)
  _h
  (eqidd (_G x))))

(local theorem rappeq1 ((_F1 set ()) (_F2 set ()) (x nat ())) ()
  (im (eqs _F1 _F2) (eqs (rapp _F1 x) (rapp _F2 x)))
()
(rappeq1d ((eqs _F1 _F2) _F1 _F2 x)
  (id ((eqs _F1 _F2)))))

(local theorem rappeq2d ((_G wff ()) (F set ()) (_x1 nat ()) (_x2 nat ()))
  ((_h (im _G (eq _x1 _x2))))
  (im _G (eqs (rapp F _x1) (rapp F _x2)))
()
(rappeqd (_G F F _x1 _x2)
  (eqsidd (_G F))
  _h))

(local theorem rappeq2 ((F set ()) (_x1 nat ()) (_x2 nat ())) ()
  (im (eq _x1 _x2) (eqs (rapp F _x1) (rapp F _x2)))
()
(rappeq2d ((eq _x1 _x2) F _x1 _x2)
  (id ((eq _x1 _x2)))))

(local theorem nfrapp ((x nat) (F set (x)) (a nat (x)))
  ((h1 (nfs x F))
   (h2 (nfn x a)))
  (nfs x (rapp F a))
((x1 nat))
(:conv (nfs x (rapp F a))
  (nfs
    x
    (:unfold rapp (F a) (x1)
      (ab x1 (el (pr a x1) F))))
  (nfab (x x1 (el (pr a x1) F))
    (nfel (x (pr a x1) F)
      (nfpr (x a x1)
        h2
        (nfnv (x1 x)))
      h1))))

(local theorem elrapp ((F set ()) (a nat ()) (b nat ())) ()
  (iff (el b (rapp F a)) (el (pr a b) F))
((_1 nat))
(:conv (iff (el b (rapp F a)) (el (pr a b) F))
  (iff
    (el
      b
      (:unfold rapp (F a) (_1)
        (ab _1 (el (pr a _1) F))))
    (el (pr a b) F))
  (elabe (_1 b (el (pr a _1) F) (el (pr a b) F))
    (eleqd ((eq _1 b) (pr a _1) (pr a b) F F)
      (preqd ((eq _1 b) a a _1 b)
        (eqidd ((eq _1 b) a))
        (id ((eq _1 b))))
      (eqsidd ((eq _1 b) F))))))

(local theorem rappsabs ((a nat ()) (x nat) (A set (x))) ()
  (eqs (rapp (sab x A) a) (sbs a x A))
((x1 nat))
(:conv (eqs (rapp (sab x A) a) (sbs a x A))
  (:unfold eqs ((rapp (sab x A) a) (sbs a x A)) (x1)
    (al x1 (iff (el x1 (rapp (sab x A) a)) (el x1 (sbs a x A)))))
  (ax_gen (x1 (iff (el x1 (rapp (sab x A) a)) (el x1 (sbs a x A))))
    (ax_mp ((iff (el (pr a x1) (sab x A)) (el x1 (sbs a x A))) (iff (el x1 (rapp (sab x A) a)) (el x1 (sbs a x A))))
      (ax_mp ((iff (el x1 (rapp (sab x A) a)) (el (pr a x1) (sab x A))) (im (iff (el (pr a x1) (sab x A)) (el x1 (sbs a x A))) (iff (el x1 (rapp (sab x A) a)) (el x1 (sbs a x A)))))
        (bitr ((el x1 (rapp (sab x A) a)) (el (pr a x1) (sab x A)) (el x1 (sbs a x A))))
        (elrapp ((sab x A) a x1)))
      (elsabs (a x1 x A))))))

(local theorem rappsab ((x nat) (A set (x))) ()
  (eqs (rapp (sab x A) x) A)
((x1 nat))
(sbeth (x (eqs (rapp (sab x A) x) A) x1 (eqs (rapp (sab x A) x1) (sbs x1 x A)))
  (rappsabs (x1 x A))
  (eqseqd ((eq x1 x) (rapp (sab x A) x1) (rapp (sab x A) x) (sbs x1 x A) A)
    (rappeq2 ((sab x A) x1 x))
    (rsyl ((eq x1 x) (eq x x1) (eqs (sbs x1 x A) A))
      (eqcom (x1 x))
      (eqscomd (A (sbs x1 x A) (eq x x1))
        (sbsq (x x1 A)))))))

(local theorem rappsabed ((B set ()) (G wff ()) (a nat ()) (x nat) (A set (x)))
  ((h (im (an G (eq x a)) (eqs A B))))
  (im G (eqs (rapp (sab x A) a) B))
()
(syl5eqs ((rapp (sab x A) a) (sbs a x A) B G)
  (rappsabs (a x A))
  (mpi (G (ex x (eq x a)) (eqs (sbs a x A) B))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (eqs (sbs a x A) B))
      (nfv (G x))
      (nfeqs (x (sbs a x A) B)
        (nfsbs1 (x a A))
        (nfsv (B x)))
      (exp (G (eq x a) (eqs (sbs a x A) B))
        (eqstr3d ((sbs a x A) A B (an G (eq x a)))
          (anwr (G (eq x a) (eqs A (sbs a x A)))
            (sbsq (x a A)))
          h))))))

(local theorem rappsabe ((B set ()) (a nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eqs A B))))
  (eqs (rapp (sab x A) a) B)
()
(trud ((eqs (rapp (sab x A) a) B))
  (rappsabed (B (tru) a x A)
    (anwr ((tru) (eq x a) (eqs A B))
      h))))

(local theorem rappsabed1 ((F set ()) (G wff ()) (P wff ()) (a nat ()) (x nat) (A set (x)))
  ((e (im (an G (eq x a)) (im (eqs (rapp F a) A) P))))
  (im G (im (eqs F (sab x A)) P))
()
(mpi (G (ex x (eq x a)) (im (eqs F (sab x A)) P))
  (ax_6 (a x))
  (eexdh (x G (eq x a) (im (eqs F (sab x A)) P))
    (nfv (G x))
    (nfim (x (eqs F (sab x A)) P)
      (nfeqs (x F (sab x A))
        (nfsv (F x))
        (nfsab1 (x A)))
      (nfv (P x)))
    (exp (G (eq x a) (im (eqs F (sab x A)) P))
      (syld ((an G (eq x a)) (eqs F (sab x A)) (eqs (rapp F a) A) P)
        (syl5ibrcom ((an G (eq x a)) (eqs (rapp F a) A) (eqs F (sab x A)) (eqs (rapp (sab x A) a) A))
          (eqseq1d ((eqs F (sab x A)) (rapp F a) (rapp (sab x A) a) A)
            (rappeq1 (F (sab x A) a)))
          (syl6eqs ((rapp (sab x A) a) (rapp (sab x A) x) A (an G (eq x a)))
            (rappsab (x A))
            (eqscomd ((rapp (sab x A) x) (rapp (sab x A) a) (an G (eq x a)))
              (rappeq2d ((an G (eq x a)) (sab x A) x a)
                (anr (G (eq x a)))))))
        e)))))

(local theorem rappsabed2 ((B set ()) (F set ()) (G wff ()) (a nat ()) (x nat) (A set (x)))
  ((e (im (an G (eq x a)) (eqs A B))))
  (im G (im (eqs F (sab x A)) (eqs (rapp F a) B)))
()
(rappsabed1 (F G (eqs (rapp F a) B) a x A)
  (bi1d ((an G (eq x a)) (eqs (rapp F a) A) (eqs (rapp F a) B))
    (eqseq2d ((an G (eq x a)) (rapp F a) A B)
      e))))

(local theorem rappss ((A set ()) (B set ()) (a nat ())) ()
  (im (subset A B) (subset (rapp A a) (rapp B a)))
((x1 nat))
(:conv (im (subset A B) (subset (rapp A a) (rapp B a)))
  (im
    (subset A B)
    (subset
      (:unfold rapp (A a) (x1)
        (ab x1 (el (pr a x1) A)))
      (:unfold rapp (B a) (x1)
        (ab x1 (el (pr a x1) B)))))
  (ssabd ((subset A B) x1 (el (pr a x1) A) (el (pr a x1) B))
    (ssel (A B (pr a x1))))))

(local theorem rappssb ((A set ()) (B set ()) (x nat)) ()
  (iff (subset A B) (al x (subset (rapp A x) (rapp B x))))
((x1 nat))
(ax_mp ((iff (al x (al x1 (im (el (pr x x1) A) (el (pr x x1) B)))) (al x (subset (rapp A x) (rapp B x)))) (iff (subset A B) (al x (subset (rapp A x) (rapp B x)))))
  (ax_mp ((iff (subset A B) (al x (al x1 (im (el (pr x x1) A) (el (pr x x1) B))))) (im (iff (al x (al x1 (im (el (pr x x1) A) (el (pr x x1) B)))) (al x (subset (rapp A x) (rapp B x)))) (iff (subset A B) (al x (subset (rapp A x) (rapp B x))))))
    (bitr ((subset A B) (al x (al x1 (im (el (pr x x1) A) (el (pr x x1) B)))) (al x (subset (rapp A x) (rapp B x)))))
    (ssal2 (A B x x1)))
  (aleqi (x (al x1 (im (el (pr x x1) A) (el (pr x x1) B))) (subset (rapp A x) (rapp B x)))
    (:conv (iff (al x1 (im (el (pr x x1) A) (el (pr x x1) B))) (subset (rapp A x) (rapp B x)))
      (iff
        (al x1 (im (el (pr x x1) A) (el (pr x x1) B)))
        (subset
          (:unfold rapp (A x) (x1)
            (ab x1 (el (pr x x1) A)))
          (:unfold rapp (B x) (x1)
            (ab x1 (el (pr x x1) B)))))
      (ssab (x1 (el (pr x x1) A) (el (pr x x1) B)))))))

(local theorem eqrappb ((A set ()) (B set ()) (x nat)) ()
  (iff (eqs A B) (al x (eqs (rapp A x) (rapp B x))))
()
(ax_mp ((iff (al x (eqs (rapp A x) (rapp B x))) (an (subset A B) (subset B A))) (iff (eqs A B) (al x (eqs (rapp A x) (rapp B x)))))
  (ax_mp ((iff (eqs A B) (an (subset A B) (subset B A))) (im (iff (al x (eqs (rapp A x) (rapp B x))) (an (subset A B) (subset B A))) (iff (eqs A B) (al x (eqs (rapp A x) (rapp B x))))))
    (bitr4 ((eqs A B) (an (subset A B) (subset B A)) (al x (eqs (rapp A x) (rapp B x)))))
    (ssasymb (A B)))
  (ax_mp ((iff (al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))) (an (subset A B) (subset B A))) (iff (al x (eqs (rapp A x) (rapp B x))) (an (subset A B) (subset B A))))
    (ax_mp ((iff (al x (eqs (rapp A x) (rapp B x))) (al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x))))) (im (iff (al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))) (an (subset A B) (subset B A))) (iff (al x (eqs (rapp A x) (rapp B x))) (an (subset A B) (subset B A)))))
      (bitr ((al x (eqs (rapp A x) (rapp B x))) (al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))) (an (subset A B) (subset B A))))
      (aleqi (x (eqs (rapp A x) (rapp B x)) (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x))))
        (ssasymb ((rapp A x) (rapp B x)))))
    (ax_mp ((iff (an (subset A B) (subset B A)) (an (al x (subset (rapp A x) (rapp B x))) (al x (subset (rapp B x) (rapp A x))))) (iff (al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))) (an (subset A B) (subset B A))))
      (ax_mp ((iff (al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))) (an (al x (subset (rapp A x) (rapp B x))) (al x (subset (rapp B x) (rapp A x))))) (im (iff (an (subset A B) (subset B A)) (an (al x (subset (rapp A x) (rapp B x))) (al x (subset (rapp B x) (rapp A x))))) (iff (al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))) (an (subset A B) (subset B A)))))
        (bitr4 ((al x (an (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))) (an (al x (subset (rapp A x) (rapp B x))) (al x (subset (rapp B x) (rapp A x)))) (an (subset A B) (subset B A))))
        (alan (x (subset (rapp A x) (rapp B x)) (subset (rapp B x) (rapp A x)))))
      (ax_mp ((iff (subset B A) (al x (subset (rapp B x) (rapp A x)))) (iff (an (subset A B) (subset B A)) (an (al x (subset (rapp A x) (rapp B x))) (al x (subset (rapp B x) (rapp A x))))))
        (ax_mp ((iff (subset A B) (al x (subset (rapp A x) (rapp B x)))) (im (iff (subset B A) (al x (subset (rapp B x) (rapp A x)))) (iff (an (subset A B) (subset B A)) (an (al x (subset (rapp A x) (rapp B x))) (al x (subset (rapp B x) (rapp A x)))))))
          (aneq ((subset A B) (al x (subset (rapp A x) (rapp B x))) (subset B A) (al x (subset (rapp B x) (rapp A x)))))
          (rappssb (A B x)))
        (rappssb (B A x)))))))

(def app ((F set ()) (x nat ())) (nat ())
((y nat))
(the (ab y (el (pr x y) F))))

(local theorem appeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_xh (im _G (eq _x1 _x2))))
  (im _G (eq (app _F1 _x1) (app _F2 _x2)))
((y nat))
(:conv (im _G (eq (app _F1 _x1) (app _F2 _x2)))
  (im
    _G
    (eq
      (:unfold app (_F1 _x1) (y)
        (the (ab y (el (pr _x1 y) _F1))))
      (:unfold app (_F2 _x2) (y)
        (the (ab y (el (pr _x2 y) _F2))))))
  (theeqd (_G (ab y (el (pr _x1 y) _F1)) (ab y (el (pr _x2 y) _F2)))
    (abeqd (_G y (el (pr _x1 y) _F1) (el (pr _x2 y) _F2))
      (eleqd (_G (pr _x1 y) (pr _x2 y) _F1 _F2)
        (preqd (_G _x1 _x2 y y)
          _xh
          (eqidd (_G y)))
        _Fh)))))

(local theorem appeq ((_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ())) ()
  (im (eqs _F1 _F2) (im (eq _x1 _x2) (eq (app _F1 _x1) (app _F2 _x2))))
()
(exp ((eqs _F1 _F2) (eq _x1 _x2) (eq (app _F1 _x1) (app _F2 _x2)))
  (appeqd ((an (eqs _F1 _F2) (eq _x1 _x2)) _F1 _F2 _x1 _x2)
    (anl ((eqs _F1 _F2) (eq _x1 _x2)))
    (anr ((eqs _F1 _F2) (eq _x1 _x2))))))

(local theorem appeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (x nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eq (app _F1 x) (app _F2 x)))
()
(appeqd (_G _F1 _F2 x x)
  _h
  (eqidd (_G x))))

(local theorem appeq1 ((_F1 set ()) (_F2 set ()) (x nat ())) ()
  (im (eqs _F1 _F2) (eq (app _F1 x) (app _F2 x)))
()
(appeq1d ((eqs _F1 _F2) _F1 _F2 x)
  (id ((eqs _F1 _F2)))))

(local theorem appeq2d ((_G wff ()) (F set ()) (_x1 nat ()) (_x2 nat ()))
  ((_h (im _G (eq _x1 _x2))))
  (im _G (eq (app F _x1) (app F _x2)))
()
(appeqd (_G F F _x1 _x2)
  (eqsidd (_G F))
  _h))

(local theorem appeq2 ((F set ()) (_x1 nat ()) (_x2 nat ())) ()
  (im (eq _x1 _x2) (eq (app F _x1) (app F _x2)))
()
(appeq2d ((eq _x1 _x2) F _x1 _x2)
  (id ((eq _x1 _x2)))))

(local theorem nfapp ((x nat) (F set (x)) (a nat (x)))
  ((h1 (nfs x F))
   (h2 (nfn x a)))
  (nfn x (app F a))
((x1 nat))
(:conv (nfn x (app F a))
  (nfn
    x
    (:unfold app (F a) (x1)
      (the (ab x1 (el (pr a x1) F)))))
  (nfthe (x (ab x1 (el (pr a x1) F)))
    (:conv (nfs x (ab x1 (el (pr a x1) F)))
      (nfs
        x
        (:sym (:unfold rapp (F a) (x1)
          (ab x1 (el (pr a x1) F)))))
      (nfrapp (x F a)
        h1
        h2)))))

(local theorem isfappd ((F set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (isfun F)))
   (h2 (im G (el (pr a b) F))))
  (im G (eq (app F a) b))
((x nat) (x1 nat))
(:conv (im G (eq (app F a) b))
  (im
    G
    (eq
      (:unfold app (F a) (x1)
        (the (ab x1 (el (pr a x1) F))))
      b))
  (eqthed ((ab x1 (el (pr a x1) F)) G b x)
    (syl5bb (G (el x (ab x1 (el (pr a x1) F))) (el (pr a x) F) (eq x b))
      (:conv (iff (el x (ab x1 (el (pr a x1) F))) (el (pr a x) F))
        (iff
          (el
            x
            (:sym (:unfold rapp (F a) (x1)
              (ab x1 (el (pr a x1) F)))))
          (el (pr a x) F))
        (elrapp (F a x)))
      (syl6bb (G (el (pr a x) F) (eq b x) (eq x b))
        (eqcomb (b x))
        (isfbd (F G a b x)
          h1
          h2))))))

(local theorem isfappb ((F set ()) (a nat ()) (b nat ())) ()
  (im (isfun F) (iff (el (pr a b) F) (an (el a (Dom F)) (eq (app F a) b))))
((x1 nat))
(:let H1 (anr ((an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F)))
(ibida ((isfun F) (el (pr a b) F) (an (el a (Dom F)) (eq (app F a) b)))
  (iand ((an (isfun F) (el (pr a b) F)) (el a (Dom F)) (eq (app F a) b))
    (anwr ((isfun F) (el (pr a b) F) (el a (Dom F)))
      (preldm (F a b)))
    (isfappd (F (an (isfun F) (el (pr a b) F)) a b)
      (anl ((isfun F) (el (pr a b) F)))
      (anr ((isfun F) (el (pr a b) F)))))
  (mpd ((an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (ex x1 (el (pr a x1) F)) (el (pr a b) F))
    (sylib ((an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el a (Dom F)) (ex x1 (el (pr a x1) F)))
      (eldm (F a x1))
      (anrl ((isfun F) (el a (Dom F)) (eq (app F a) b))))
    (eexda (x1 (an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F) (el (pr a b) F))
      (mpbid ((an (an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F)) (el (pr a x1) F) (el (pr a b) F))
        (eleq1d (F (an (an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F)) (pr a x1) (pr a b))
          (preq2d ((an (an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F)) a x1 b)
            (eqtr3d ((an (an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F)) x1 (app F a) b)
              (isfappd (F (an (an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F)) a x1)
                (anll ((isfun F) (an (el a (Dom F)) (eq (app F a) b)) (el (pr a x1) F)))
                H1)
              (anwl ((an (isfun F) (an (el a (Dom F)) (eq (app F a) b))) (el (pr a x1) F) (eq (app F a) b))
                (anrr ((isfun F) (el a (Dom F)) (eq (app F a) b)))))))
        H1))))))

(local theorem eqapp ((F set ()) (G set ()) (a nat ()) (y nat)) ()
  (im (al y (iff (el (pr a y) F) (el (pr a y) G))) (eq (app F a) (app G a)))
()
(:conv (im (al y (iff (el (pr a y) F) (el (pr a y) G))) (eq (app F a) (app G a)))
  (im
    (al y (iff (el (pr a y) F) (el (pr a y) G)))
    (eq
      (:unfold app (F a) (y)
        (the (ab y (el (pr a y) F))))
      (:unfold app (G a) (y)
        (the (ab y (el (pr a y) G))))))
  (theeqd ((al y (iff (el (pr a y) F) (el (pr a y) G))) (ab y (el (pr a y) F)) (ab y (el (pr a y) G)))
    (abeq (y (el (pr a y) F) (el (pr a y) G))))))

(local theorem ndmapp ((F set ()) (a nat ())) ()
  (im (not (el a (Dom F))) (eq (app F a) (d0)))
((y nat))
(:conv (im (not (el a (Dom F))) (eq (app F a) (d0)))
  (im
    (not (el a (Dom F)))
    (eq
      (:unfold app (F a) (y)
        (the (ab y (el (pr a y) F))))
      (d0)))
  (eqthe0abd ((not (el a (Dom F))) y (el (pr a y) F))
    (syl5 ((not (el a (Dom F))) (el (pr a y) F) (el a (Dom F)) (eq y (d0)))
      (preldm (F a y))
      (absurd ((el a (Dom F)) (eq y (d0))))))))

(local theorem appelrn ((F set ()) (a nat ())) ()
  (im (isfun F) (im (el a (Dom F)) (el (app F a) (Ran F))))
((x1 nat))
(syl5bi ((isfun F) (el a (Dom F)) (ex x1 (el (pr a x1) F)) (el (app F a) (Ran F)))
  (eldm (F a x1))
  (eexda (x1 (isfun F) (el (pr a x1) F) (el (app F a) (Ran F)))
    (mpbird ((an (isfun F) (el (pr a x1) F)) (el x1 (Ran F)) (el (app F a) (Ran F)))
      (eleq1d ((Ran F) (an (isfun F) (el (pr a x1) F)) (app F a) x1)
        (isfappd (F (an (isfun F) (el (pr a x1) F)) a x1)
          (anl ((isfun F) (el (pr a x1) F)))
          (anr ((isfun F) (el (pr a x1) F)))))
      (anwr ((isfun F) (el (pr a x1) F) (el x1 (Ran F)))
        (prelrn (F a x1)))))))

(local theorem isfrn ((F set ()) (x nat) (y nat ())) ()
  (im (isfun F) (iff (el y (Ran F)) (ex x (an (el x (Dom F)) (eq (app F x) y)))))
()
(syl5bb ((isfun F) (el y (Ran F)) (ex x (el (pr x y) F)) (ex x (an (el x (Dom F)) (eq (app F x) y))))
  (elrn (F y x))
  (exeqd ((isfun F) x (el (pr x y) F) (an (el x (Dom F)) (eq (app F x) y)))
    (isfappb (F x y)))))

(local theorem isfrnss ((A set ()) (F set ()) (x nat)) ()
  (im (isfun F) (iff (subset (Ran F) A) (al x (im (el x (Dom F)) (el (app F x) A)))))
((x1 nat))
(syl6bb ((isfun F) (subset (Ran F) A) (al x (im (el x (Dom F)) (al x1 (im (eq (app F x) x1) (el x1 A))))) (al x (im (el x (Dom F)) (el (app F x) A))))
  (aleqi (x (im (el x (Dom F)) (al x1 (im (eq (app F x) x1) (el x1 A)))) (im (el x (Dom F)) (el (app F x) A)))
    (imeq2i ((el x (Dom F)) (al x1 (im (eq (app F x) x1) (el x1 A))) (el (app F x) A))
      (ax_mp ((iff (al x1 (im (eq x1 (app F x)) (el x1 A))) (el (app F x) A)) (iff (al x1 (im (eq (app F x) x1) (el x1 A))) (el (app F x) A)))
        (ax_mp ((iff (al x1 (im (eq (app F x) x1) (el x1 A))) (al x1 (im (eq x1 (app F x)) (el x1 A)))) (im (iff (al x1 (im (eq x1 (app F x)) (el x1 A))) (el (app F x) A)) (iff (al x1 (im (eq (app F x) x1) (el x1 A))) (el (app F x) A))))
          (bitr ((al x1 (im (eq (app F x) x1) (el x1 A))) (al x1 (im (eq x1 (app F x)) (el x1 A))) (el (app F x) A)))
          (aleqi (x1 (im (eq (app F x) x1) (el x1 A)) (im (eq x1 (app F x)) (el x1 A)))
            (imeq1i ((eq (app F x) x1) (eq x1 (app F x)) (el x1 A))
              (eqcomb ((app F x) x1)))))
        (aleqe (x1 (app F x) (el x1 A) (el (app F x) A))
          (eleq1 (A x1 (app F x)))))))
  (syl6bbr ((isfun F) (subset (Ran F) A) (al x1 (al x (im (el x (Dom F)) (im (eq (app F x) x1) (el x1 A))))) (al x (im (el x (Dom F)) (al x1 (im (eq (app F x) x1) (el x1 A))))))
    (ralalcomb (x x1 (el x (Dom F)) (im (eq (app F x) x1) (el x1 A))))
    (:conv (im (isfun F) (iff (subset (Ran F) A) (al x1 (al x (im (el x (Dom F)) (im (eq (app F x) x1) (el x1 A)))))))
      (im
        (isfun F)
        (iff
          (:unfold subset ((Ran F) A) (x1)
            (al x1 (im (el x1 (Ran F)) (el x1 A))))
          (al x1 (al x (im (el x (Dom F)) (im (eq (app F x) x1) (el x1 A)))))))
      (aleqd ((isfun F) x1 (im (el x1 (Ran F)) (el x1 A)) (al x (im (el x (Dom F)) (im (eq (app F x) x1) (el x1 A)))))
        (syl6bb ((isfun F) (im (el x1 (Ran F)) (el x1 A)) (im (ex x (an (el x (Dom F)) (eq (app F x) x1))) (el x1 A)) (al x (im (el x (Dom F)) (im (eq (app F x) x1) (el x1 A)))))
          (erexb (x (el x (Dom F)) (eq (app F x) x1) (el x1 A)))
          (imeq1d ((isfun F) (el x1 (Ran F)) (ex x (an (el x (Dom F)) (eq (app F x) x1))) (el x1 A))
            (isfrn (F x x1)))))))))

(local theorem eqisf ((F set ()) (G set ()) (x nat)) ()
  (im (an (isfun F) (isfun G)) (iff (eqs F G) (an (eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x)))))))
((y nat))
(syl5bbr ((an (isfun F) (isfun G)) (eqs F G) (an (eqs (Dom F) (Dom G)) (eqs F G)) (an (eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))))
  (ax_mp ((im (eqs F G) (eqs (Dom F) (Dom G))) (iff (an (eqs (Dom F) (Dom G)) (eqs F G)) (eqs F G)))
    (bian1a ((eqs (Dom F) (Dom G)) (eqs F G)))
    (dmeq (F G)))
  (syl ((an (isfun F) (isfun G)) (im (eqs (Dom F) (Dom G)) (iff (eqs F G) (al x (im (el x (Dom F)) (eq (app F x) (app G x)))))) (iff (an (eqs (Dom F) (Dom G)) (eqs F G)) (an (eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x)))))))
    (aneq2a ((eqs (Dom F) (Dom G)) (eqs F G) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))))
    (exp ((an (isfun F) (isfun G)) (eqs (Dom F) (Dom G)) (iff (eqs F G) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))))
      (syl5bb ((an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (eqs F G) (al x (al y (iff (el (pr x y) F) (el (pr x y) G)))) (al x (im (el x (Dom F)) (eq (app F x) (app G x)))))
        (axext2 (F G x y))
        (aleqd ((an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) x (al y (iff (el (pr x y) F) (el (pr x y) G))) (im (el x (Dom F)) (eq (app F x) (app G x))))
          (ibid ((an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (al y (iff (el (pr x y) F) (el (pr x y) G))) (im (el x (Dom F)) (eq (app F x) (app G x))))
            (a1i ((an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (al y (iff (el (pr x y) F) (el (pr x y) G))) (im (el x (Dom F)) (eq (app F x) (app G x)))))
              (a1d ((al y (iff (el (pr x y) F) (el (pr x y) G))) (eq (app F x) (app G x)) (el x (Dom F)))
                (eqapp (F G x y))))
            (exp ((an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x))) (al y (iff (el (pr x y) F) (el (pr x y) G))))
              (iald (y (an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (iff (el (pr x y) F) (el (pr x y) G)))
                (bitr4d ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (el (pr x y) F) (an (el x (Dom F)) (eq (app F x) y)) (el (pr x y) G))
                  (syl ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (isfun F) (iff (el (pr x y) F) (an (el x (Dom F)) (eq (app F x) y))))
                    (isfappb (F x y))
                    (an3l ((isfun F) (isfun G) (eqs (Dom F) (Dom G)) (im (el x (Dom F)) (eq (app F x) (app G x))))))
                  (bitr4d ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (el (pr x y) G) (an (el x (Dom G)) (eq (app G x) y)) (an (el x (Dom F)) (eq (app F x) y)))
                    (syl ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (isfun G) (iff (el (pr x y) G) (an (el x (Dom G)) (eq (app G x) y))))
                      (isfappb (G x y))
                      (anllr ((isfun F) (isfun G) (eqs (Dom F) (Dom G)) (im (el x (Dom F)) (eq (app F x) (app G x))))))
                    (bitrd ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (an (el x (Dom F)) (eq (app F x) y)) (an (el x (Dom F)) (eq (app G x) y)) (an (el x (Dom G)) (eq (app G x) y)))
                      (syl ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (im (el x (Dom F)) (iff (eq (app F x) y) (eq (app G x) y))) (iff (an (el x (Dom F)) (eq (app F x) y)) (an (el x (Dom F)) (eq (app G x) y))))
                        (aneq2a ((el x (Dom F)) (eq (app F x) y) (eq (app G x) y)))
                        (syl6 ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (el x (Dom F)) (eq (app F x) (app G x)) (iff (eq (app F x) y) (eq (app G x) y)))
                          (eqeq1 ((app F x) (app G x) y))
                          (anr ((an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))))))
                      (aneq1d ((an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) (el x (Dom F)) (el x (Dom G)) (eq (app G x) y))
                        (eleq2d ((Dom F) (Dom G) (an (an (an (isfun F) (isfun G)) (eqs (Dom F) (Dom G))) (im (el x (Dom F)) (eq (app F x) (app G x)))) x)
                          (anlr ((an (isfun F) (isfun G)) (eqs (Dom F) (Dom G)) (im (el x (Dom F)) (eq (app F x) (app G x)))))))))))))))))))

(local theorem resapp ((A set ()) (F set ()) (a nat ())) ()
  (im (el a A) (eq (app (res F A) a) (app F a)))
((y nat))
(syl ((el a A) (al y (iff (el (pr a y) (res F A)) (el (pr a y) F))) (eq (app (res F A) a) (app F a)))
  (eqapp ((res F A) F a y))
  (iald (y (el a A) (iff (el (pr a y) (res F A)) (el (pr a y) F)))
    (syl5bb ((el a A) (el (pr a y) (res F A)) (an (el (pr a y) F) (el a A)) (el (pr a y) F))
      (prelres (F A a y))
      (bian2 ((el (pr a y) F) (el a A)))))))

(local theorem applams ((x nat) (a nat (x)) (b nat (x))) ()
  (eq (app (lam x a) b) (sbn b x a))
((p nat) (z nat))
(trud ((eq (app (lam x a) b) (sbn b x a)))
  (isfappd ((lam x a) (tru) b (sbn b x a))
    (a1i ((tru) (isfun (lam x a)))
      (lamisf (x a)))
    (a1i ((tru) (el (pr b (sbn b x a)) (lam x a)))
      (mpbir ((ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))) (el (pr b (sbn b x a)) (lam x a)))
        (:conv (iff (el (pr b (sbn b x a)) (lam x a)) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
          (iff
            (el
              (pr b (sbn b x a))
              (:unfold lam (x a) (p)
                (ab p (ex x (eq p (pr x a))))))
            (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
          (elabe (p (pr b (sbn b x a)) (ex x (eq p (pr x a))) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
            (syl5bb ((eq p (pr b (sbn b x a))) (ex x (eq p (pr x a))) (ex z (eq p (pr z (sbn z x a)))) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
              (cbvexh (x z (eq p (pr x a)) (eq p (pr z (sbn z x a))))
                (nfv ((eq p (pr x a)) z))
                (nfeq2 (p x (pr z (sbn z x a)))
                  (nfpr (x z (sbn z x a))
                    (nfnv (z x))
                    (nfsbn1 (x z a))))
                (eqeq2d ((eq x z) p (pr x a) (pr z (sbn z x a)))
                  (preqd ((eq x z) x z a (sbn z x a))
                    (id ((eq x z)))
                    (sbnq (x z a)))))
              (exeqd ((eq p (pr b (sbn b x a))) z (eq p (pr z (sbn z x a))) (eq (pr b (sbn b x a)) (pr z (sbn z x a))))
                (eqeq1 (p (pr b (sbn b x a)) (pr z (sbn z x a))))))))
        (ax_mp ((eq (pr b (sbn b x a)) (pr b (sbn b x a))) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
          (iexe (z b (eq (pr b (sbn b x a)) (pr z (sbn z x a))) (eq (pr b (sbn b x a)) (pr b (sbn b x a))))
            (eqeq2d ((eq z b) (pr b (sbn b x a)) (pr z (sbn z x a)) (pr b (sbn b x a)))
              (preqd ((eq z b) z b (sbn z x a) (sbn b x a))
                (id ((eq z b)))
                (sbneq1 (x z b a)))))
          (eqid ((pr b (sbn b x a))))))))))

(local theorem applam ((x nat) (a nat (x))) ()
  (eq (app (lam x a) x) a)
()
(ax_mp ((eq (sbn x x a) a) (eq (app (lam x a) x) a))
  (ax_mp ((eq (app (lam x a) x) (sbn x x a)) (im (eq (sbn x x a) a) (eq (app (lam x a) x) a)))
    (eqtr ((app (lam x a) x) (sbn x x a) a))
    (applams (x a x)))
  (sbnid (x a))))

(local theorem applame ((b nat ()) (c nat ()) (x nat) (a nat (x)))
  ((e (im (eq x b) (eq a c))))
  (eq (app (lam x a) b) c)
()
(ax_mp ((eq (sbn b x a) c) (eq (app (lam x a) b) c))
  (ax_mp ((eq (app (lam x a) b) (sbn b x a)) (im (eq (sbn b x a) c) (eq (app (lam x a) b) c)))
    (eqtr ((app (lam x a) b) (sbn b x a) c))
    (applams (x a b)))
  (sbne (x b a c)
    e)))

(local theorem applamed ((G wff ()) (b nat ()) (c nat ()) (x nat) (a nat (x)))
  ((e (im (an G (eq x b)) (eq a c))))
  (im G (eq (app (lam x a) b) c))
()
(syl5eq (G (app (lam x a) b) (sbn b x a) c)
  (applams (x a b))
  (sbned (G x b a c)
    e)))

(local theorem applamed1 ((F set ()) (G wff ()) (P wff ()) (b nat ()) (x nat) (a nat (x)))
  ((e (im (an G (eq x b)) (im (eq (app F b) a) P))))
  (im G (im (eqs F (lam x a)) P))
()
(mpi (G (ex x (eq x b)) (im (eqs F (lam x a)) P))
  (ax_6 (b x))
  (eexdh (x G (eq x b) (im (eqs F (lam x a)) P))
    (nfv (G x))
    (nfim (x (eqs F (lam x a)) P)
      (nfeqs (x F (lam x a))
        (nfsv (F x))
        (nflam1 (x a)))
      (nfv (P x)))
    (exp (G (eq x b) (im (eqs F (lam x a)) P))
      (syld ((an G (eq x b)) (eqs F (lam x a)) (eq (app F b) a) P)
        (syl5ibrcom ((an G (eq x b)) (eq (app F b) a) (eqs F (lam x a)) (eq (app (lam x a) b) a))
          (eqeq1d ((eqs F (lam x a)) (app F b) (app (lam x a) b) a)
            (appeq1 (F (lam x a) b)))
          (syl6eq ((an G (eq x b)) (app (lam x a) b) (app (lam x a) x) a)
            (applam (x a))
            (eqcomd ((an G (eq x b)) (app (lam x a) x) (app (lam x a) b))
              (appeq2d ((an G (eq x b)) (lam x a) x b)
                (anr (G (eq x b)))))))
        e)))))

(local theorem applamed2 ((F set ()) (G wff ()) (b nat ()) (c nat ()) (x nat) (a nat (x)))
  ((e (im (an G (eq x b)) (eq a c))))
  (im G (im (eqs F (lam x a)) (eq (app F b) c)))
()
(applamed1 (F G (eq (app F b) c) b x a)
  (bi1d ((an G (eq x b)) (eq (app F b) a) (eq (app F b) c))
    (eqeq2d ((an G (eq x b)) (app F b) a c)
      e))))

(local theorem lamapp2 ((A set ()) (F set ()) (x nat)) ()
  (iff (eqs (res (lam x (app F x)) A) F) (an (isfun F) (eqs (Dom F) A)))
((p nat) (y nat) (z nat))
(:let H1 (eqeq1 (p (pr y z) (pr x (app F x))))
(:let H2 (exeqd ((eq p (pr y z)) x (eq p (pr x (app F x))) (eq (pr y z) (pr x (app F x))))
  H1)
(:let H3 (elabe (p (pr y z) (ex x (eq p (pr x (app F x)))) (ex x (eq (pr y z) (pr x (app F x)))))
  H2)
(:let H4 (:conv (iff (el (pr y z) (lam x (app F x))) (ex x (eq (pr y z) (pr x (app F x)))))
  (iff
    (el
      (pr y z)
      (:unfold lam (x (app F x)) (p)
        (ab p (ex x (eq p (pr x (app F x)))))))
    (ex x (eq (pr y z) (pr x (app F x)))))
  H3)
(:let H5 (anr ((an (isfun F) (eqs (Dom F) A)) (el (pr x y) F)))
(:let H6 (anr ((an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (eq x y)))
(ibii ((eqs (res (lam x (app F x)) A) F) (an (isfun F) (eqs (Dom F) A)))
  (iand ((eqs (res (lam x (app F x)) A) F) (isfun F) (eqs (Dom F) A))
    (mpbii ((eqs (res (lam x (app F x)) A) F) (isfun (res (lam x (app F x)) A)) (isfun F))
      (ax_mp ((isfun (lam x (app F x))) (isfun (res (lam x (app F x)) A)))
        (resisf (A (lam x (app F x))))
        (lamisf (x (app F x))))
      (isfeq ((res (lam x (app F x)) A) F)))
    (eqstr3d ((Dom F) (Dom (res (lam x (app F x)) A)) A (eqs (res (lam x (app F x)) A) F))
      (dmeq ((res (lam x (app F x)) A) F))
      (a1i ((eqs (res (lam x (app F x)) A) F) (eqs (Dom (res (lam x (app F x)) A)) A))
        (dmreslam (x A (app F x))))))
  (eqrd2 ((res (lam x (app F x)) A) F (an (isfun F) (eqs (Dom F) A)) y z)
    (syl5bb ((an (isfun F) (eqs (Dom F) A)) (el (pr y z) (res (lam x (app F x)) A)) (an (el (pr y z) (lam x (app F x))) (el y A)) (el (pr y z) F))
      (prelres ((lam x (app F x)) A y z))
      (bitr3d ((an (isfun F) (eqs (Dom F) A)) (an (el (pr y z) (lam x (app F x))) (el y A)) (an (el (pr y z) (lam x (app F x))) (el y (Dom F))) (el (pr y z) F))
        (aneq2d ((an (isfun F) (eqs (Dom F) A)) (el (pr y z) (lam x (app F x))) (el y (Dom F)) (el y A))
          (eleq2d ((Dom F) A (an (isfun F) (eqs (Dom F) A)) y)
            (anr ((isfun F) (eqs (Dom F) A)))))
        (ibid ((an (isfun F) (eqs (Dom F) A)) (an (el (pr y z) (lam x (app F x))) (el y (Dom F))) (el (pr y z) F))
          (sylibr ((an (isfun F) (eqs (Dom F) A)) (im (el (pr y z) (lam x (app F x))) (im (el y (Dom F)) (el (pr y z) F))) (im (an (el (pr y z) (lam x (app F x))) (el y (Dom F))) (el (pr y z) F)))
            (impexp ((el (pr y z) (lam x (app F x))) (el y (Dom F)) (el (pr y z) F)))
            (syl5bi ((an (isfun F) (eqs (Dom F) A)) (el (pr y z) (lam x (app F x))) (ex x (eq (pr y z) (pr x (app F x)))) (im (el y (Dom F)) (el (pr y z) F)))
              H4
              (eexd (x (an (isfun F) (eqs (Dom F) A)) (eq (pr y z) (pr x (app F x))) (im (el y (Dom F)) (el (pr y z) F)))
                (syl5ibrcom ((an (isfun F) (eqs (Dom F) A)) (im (el y (Dom F)) (el (pr y z) F)) (eq (pr y z) (pr x (app F x))) (im (el x (Dom F)) (el (pr x (app F x)) F)))
                  (imeqd ((eq (pr y z) (pr x (app F x))) (el y (Dom F)) (el x (Dom F)) (el (pr y z) F) (el (pr x (app F x)) F))
                    (eleq1d ((Dom F) (eq (pr y z) (pr x (app F x))) y x)
                      (sylbi ((eq (pr y z) (pr x (app F x))) (an (eq y x) (eq z (app F x))) (eq y x))
                        (prth (y x z (app F x)))
                        (anl ((eq y x) (eq z (app F x))))))
                    (eleq1 (F (pr y z) (pr x (app F x)))))
                  (syl5bi ((an (isfun F) (eqs (Dom F) A)) (el x (Dom F)) (ex y (el (pr x y) F)) (el (pr x (app F x)) F))
                    (eldm (F x y))
                    (eexda (y (an (isfun F) (eqs (Dom F) A)) (el (pr x y) F) (el (pr x (app F x)) F))
                      (mpbird ((an (an (isfun F) (eqs (Dom F) A)) (el (pr x y) F)) (el (pr x y) F) (el (pr x (app F x)) F))
                        (eleq1d (F (an (an (isfun F) (eqs (Dom F) A)) (el (pr x y) F)) (pr x (app F x)) (pr x y))
                          (preq2d ((an (an (isfun F) (eqs (Dom F) A)) (el (pr x y) F)) x (app F x) y)
                            (isfappd (F (an (an (isfun F) (eqs (Dom F) A)) (el (pr x y) F)) x y)
                              (anll ((isfun F) (eqs (Dom F) A) (el (pr x y) F)))
                              H5)))
                        H5)))))))
          (exp ((an (isfun F) (eqs (Dom F) A)) (el (pr y z) F) (an (el (pr y z) (lam x (app F x))) (el y (Dom F))))
            (iand ((an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (el (pr y z) (lam x (app F x))) (el y (Dom F)))
              (sylibr ((an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (ex x (eq (pr y z) (pr x (app F x)))) (el (pr y z) (lam x (app F x))))
                H4
                (iexde (x (an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) y (eq (pr y z) (pr x (app F x))))
                  (eqcomd ((an (an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (eq x y)) (pr x (app F x)) (pr y z))
                    (preqd ((an (an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (eq x y)) x y (app F x) z)
                      H6
                      (eqtrd ((an (an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (eq x y)) (app F x) (app F y) z)
                        (appeq2d ((an (an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (eq x y)) F x y)
                          H6)
                        (isfappd (F (an (an (an (isfun F) (eqs (Dom F) A)) (el (pr y z) F)) (eq x y)) y z)
                          (an3l ((isfun F) (eqs (Dom F) A) (el (pr y z) F) (eq x y)))
                          (anlr ((an (isfun F) (eqs (Dom F) A)) (el (pr y z) F) (eq x y)))))))))
              (anwr ((an (isfun F) (eqs (Dom F) A)) (el (pr y z) F) (el y (Dom F)))
                (preldm (F y z)))))))))))))))))

(local theorem lamapp ((F set ()) (x nat)) ()
  (iff (eqs (res (lam x (app F x)) (Dom F)) F) (isfun F))
()
(ax_mp ((iff (an (isfun F) (eqs (Dom F) (Dom F))) (isfun F)) (iff (eqs (res (lam x (app F x)) (Dom F)) F) (isfun F)))
  (ax_mp ((iff (eqs (res (lam x (app F x)) (Dom F)) F) (an (isfun F) (eqs (Dom F) (Dom F)))) (im (iff (an (isfun F) (eqs (Dom F) (Dom F))) (isfun F)) (iff (eqs (res (lam x (app F x)) (Dom F)) F) (isfun F))))
    (bitr ((eqs (res (lam x (app F x)) (Dom F)) F) (an (isfun F) (eqs (Dom F) (Dom F))) (isfun F)))
    (lamapp2 ((Dom F) F x)))
  (ax_mp ((eqs (Dom F) (Dom F)) (iff (an (isfun F) (eqs (Dom F) (Dom F))) (isfun F)))
    (bian2 ((isfun F) (eqs (Dom F) (Dom F))))
    (eqsid ((Dom F))))))

(def case ((A set ()) (B set ())) (set ())
((n nat))
(lam n (if (odd n) (app B (div n (d2))) (app A (div n (d2))))))

(local theorem caseeqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (case _A1 _B1) (case _A2 _B2)))
((n nat))
(:let H1 (eqidd (_G (div n (d2))))
(:conv (im _G (eqs (case _A1 _B1) (case _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold case (_A1 _B1) (n)
        (lam n (if (odd n) (app _B1 (div n (d2))) (app _A1 (div n (d2))))))
      (:unfold case (_A2 _B2) (n)
        (lam n (if (odd n) (app _B2 (div n (d2))) (app _A2 (div n (d2))))))))
  (lameqd (_G n (if (odd n) (app _B1 (div n (d2))) (app _A1 (div n (d2)))) (if (odd n) (app _B2 (div n (d2))) (app _A2 (div n (d2)))))
    (ifeqd (_G (odd n) (odd n) (app _B1 (div n (d2))) (app _B2 (div n (d2))) (app _A1 (div n (d2))) (app _A2 (div n (d2))))
      (biidd (_G (odd n)))
      (appeqd (_G _B1 _B2 (div n (d2)) (div n (d2)))
        _Bh
        H1)
      (appeqd (_G _A1 _A2 (div n (d2)) (div n (d2)))
        _Ah
        H1))))))

(local theorem caseeq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (eqs (case _A1 _B1) (case _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (eqs (case _A1 _B1) (case _A2 _B2)))
  (caseeqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem caseeq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (case _A1 B) (case _A2 B)))
()
(caseeqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem caseeq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (eqs (case _A1 B) (case _A2 B)))
()
(caseeq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem caseeq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (case A _B1) (case A _B2)))
()
(caseeqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem caseeq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (eqs (case A _B1) (case A _B2)))
()
(caseeq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(theorem casel ((A set ()) (B set ()) (n nat ())) ()
  (eq (app (case A B) (b0 n)) (app A n))
((i nat))
(:conv (eq (app (case A B) (b0 n)) (app A n))
  (eq
    (app
      (:unfold case (A B) (i)
        (lam i (if (odd i) (app B (div i (d2))) (app A (div i (d2))))))
      (b0 n))
    (app A n))
  (applame ((b0 n) (app A n) i (if (odd i) (app B (div i (d2))) (app A (div i (d2)))))
    (eqtrd ((eq i (b0 n)) (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app A (div i (d2))) (app A n))
      (syl ((eq i (b0 n)) (not (odd i)) (eq (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app A (div i (d2)))))
        (ifneg ((odd i) (app B (div i (d2))) (app A (div i (d2)))))
        (mtbird ((eq i (b0 n)) (odd (b0 n)) (odd i))
          (oddeq (i (b0 n)))
          (a1i ((eq i (b0 n)) (not (odd (b0 n))))
            (b0odd (n)))))
      (appeq2d ((eq i (b0 n)) A (div i (d2)) n)
        (syl6eq ((eq i (b0 n)) (div i (d2)) (div (b0 n) (d2)) n)
          (b0div2 (n))
          (diveq1 (i (b0 n) (d2)))))))))

(theorem caser ((A set ()) (B set ()) (n nat ())) ()
  (eq (app (case A B) (b1 n)) (app B n))
((i nat))
(:conv (eq (app (case A B) (b1 n)) (app B n))
  (eq
    (app
      (:unfold case (A B) (i)
        (lam i (if (odd i) (app B (div i (d2))) (app A (div i (d2))))))
      (b1 n))
    (app B n))
  (applame ((b1 n) (app B n) i (if (odd i) (app B (div i (d2))) (app A (div i (d2)))))
    (eqtrd ((eq i (b1 n)) (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app B (div i (d2))) (app B n))
      (syl ((eq i (b1 n)) (odd i) (eq (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app B (div i (d2)))))
        (ifpos ((odd i) (app B (div i (d2))) (app A (div i (d2)))))
        (mpbird ((eq i (b1 n)) (odd (b1 n)) (odd i))
          (oddeq (i (b1 n)))
          (a1i ((eq i (b1 n)) (odd (b1 n)))
            (b1odd (n)))))
      (appeq2d ((eq i (b1 n)) B (div i (d2)) n)
        (syl6eq ((eq i (b1 n)) (div i (d2)) (div (b1 n) (d2)) n)
          (b1div2 (n))
          (diveq1 (i (b1 n) (d2)))))))))

(def Sum ((A set ()) (B set ())) (set ())
((n nat))
(ab n (ifp (odd n) (el (div n (d2)) B) (el (div n (d2)) A))))

(local theorem Sumeqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (Sum _A1 _B1) (Sum _A2 _B2)))
((n nat))
(:let H1 (eqidd (_G (div n (d2))))
(:conv (im _G (eqs (Sum _A1 _B1) (Sum _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold Sum (_A1 _B1) (n)
        (ab n (ifp (odd n) (el (div n (d2)) _B1) (el (div n (d2)) _A1))))
      (:unfold Sum (_A2 _B2) (n)
        (ab n (ifp (odd n) (el (div n (d2)) _B2) (el (div n (d2)) _A2))))))
  (abeqd (_G n (ifp (odd n) (el (div n (d2)) _B1) (el (div n (d2)) _A1)) (ifp (odd n) (el (div n (d2)) _B2) (el (div n (d2)) _A2)))
    (ifpeqd (_G (odd n) (odd n) (el (div n (d2)) _B1) (el (div n (d2)) _B2) (el (div n (d2)) _A1) (el (div n (d2)) _A2))
      (biidd (_G (odd n)))
      (eleqd (_G (div n (d2)) (div n (d2)) _B1 _B2)
        H1
        _Bh)
      (eleqd (_G (div n (d2)) (div n (d2)) _A1 _A2)
        H1
        _Ah))))))

(local theorem Sumeq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (eqs (Sum _A1 _B1) (Sum _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (eqs (Sum _A1 _B1) (Sum _A2 _B2)))
  (Sumeqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem Sumeq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (Sum _A1 B) (Sum _A2 B)))
()
(Sumeqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem Sumeq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (eqs (Sum _A1 B) (Sum _A2 B)))
()
(Sumeq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem Sumeq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (Sum A _B1) (Sum A _B2)))
()
(Sumeqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem Sumeq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (eqs (Sum A _B1) (Sum A _B2)))
()
(Sumeq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(theorem Suml ((A set ()) (B set ()) (n nat ())) ()
  (iff (el (b0 n) (Sum A B)) (el n A))
((i nat))
(:conv (iff (el (b0 n) (Sum A B)) (el n A))
  (iff
    (el
      (b0 n)
      (:unfold Sum (A B) (i)
        (ab i (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)))))
    (el n A))
  (elabe (i (b0 n) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el n A))
    (bitrd ((eq i (b0 n)) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) A) (el n A))
      (syl ((eq i (b0 n)) (not (odd i)) (iff (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) A)))
        (ifpneg ((odd i) (el (div i (d2)) B) (el (div i (d2)) A)))
        (mtbird ((eq i (b0 n)) (odd (b0 n)) (odd i))
          (oddeq (i (b0 n)))
          (a1i ((eq i (b0 n)) (not (odd (b0 n))))
            (b0odd (n)))))
      (eleq1d (A (eq i (b0 n)) (div i (d2)) n)
        (syl6eq ((eq i (b0 n)) (div i (d2)) (div (b0 n) (d2)) n)
          (b0div2 (n))
          (diveq1 (i (b0 n) (d2)))))))))

(theorem Sumr ((A set ()) (B set ()) (n nat ())) ()
  (iff (el (b1 n) (Sum A B)) (el n B))
((i nat))
(:conv (iff (el (b1 n) (Sum A B)) (el n B))
  (iff
    (el
      (b1 n)
      (:unfold Sum (A B) (i)
        (ab i (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)))))
    (el n B))
  (elabe (i (b1 n) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el n B))
    (bitrd ((eq i (b1 n)) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) B) (el n B))
      (syl ((eq i (b1 n)) (odd i) (iff (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) B)))
        (ifppos ((odd i) (el (div i (d2)) B) (el (div i (d2)) A)))
        (mpbird ((eq i (b1 n)) (odd (b1 n)) (odd i))
          (oddeq (i (b1 n)))
          (a1i ((eq i (b1 n)) (odd (b1 n)))
            (b1odd (n)))))
      (eleq1d (B (eq i (b1 n)) (div i (d2)) n)
        (syl6eq ((eq i (b1 n)) (div i (d2)) (div (b1 n) (d2)) n)
          (b1div2 (n))
          (diveq1 (i (b1 n) (d2)))))))))

(local theorem Sumld ((A set ()) (B set ()) (G wff ()) (a nat ()))
  ((h (im G (el a A))))
  (im G (el (b0 a) (Sum A B)))
()
(sylibr (G (el a A) (el (b0 a) (Sum A B)))
  (Suml (A B a))
  h))

(local theorem Sumrd ((A set ()) (B set ()) (G wff ()) (b nat ()))
  ((h (im G (el b B))))
  (im G (el (b1 b) (Sum A B)))
()
(sylibr (G (el b B) (el (b1 b) (Sum A B)))
  (Sumr (A B b))
  h))

(local def Fst ((A set ())) (set ())
((n nat))
(ab n (el (b0 n) A)))

(local theorem Fsteqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Fst _A1) (Fst _A2)))
((n nat))
(:conv (im _G (eqs (Fst _A1) (Fst _A2)))
  (im
    _G
    (eqs
      (:unfold Fst (_A1) (n)
        (ab n (el (b0 n) _A1)))
      (:unfold Fst (_A2) (n)
        (ab n (el (b0 n) _A2)))))
  (abeqd (_G n (el (b0 n) _A1) (el (b0 n) _A2))
    (eleqd (_G (b0 n) (b0 n) _A1 _A2)
      (eqidd (_G (b0 n)))
      _Ah))))

(local theorem Fsteq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Fst _A1) (Fst _A2)))
()
(Fsteqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local def Snd ((A set ())) (set ())
((n nat))
(ab n (el (b1 n) A)))

(local theorem Sndeqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Snd _A1) (Snd _A2)))
((n nat))
(:conv (im _G (eqs (Snd _A1) (Snd _A2)))
  (im
    _G
    (eqs
      (:unfold Snd (_A1) (n)
        (ab n (el (b1 n) _A1)))
      (:unfold Snd (_A2) (n)
        (ab n (el (b1 n) _A2)))))
  (abeqd (_G n (el (b1 n) _A1) (el (b1 n) _A2))
    (eleqd (_G (b1 n) (b1 n) _A1 _A2)
      (eqidd (_G (b1 n)))
      _Ah))))

(local theorem Sndeq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Snd _A1) (Snd _A2)))
()
(Sndeqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem elFst ((A set ()) (a nat ())) ()
  (iff (el a (Fst A)) (el (b0 a) A))
((_1 nat))
(:conv (iff (el a (Fst A)) (el (b0 a) A))
  (iff
    (el
      a
      (:unfold Fst (A) (_1)
        (ab _1 (el (b0 _1) A))))
    (el (b0 a) A))
  (elabe (_1 a (el (b0 _1) A) (el (b0 a) A))
    (eleqd ((eq _1 a) (b0 _1) (b0 a) A A)
      (b0eqd ((eq _1 a) _1 a)
        (id ((eq _1 a))))
      (eqsidd ((eq _1 a) A))))))

(local theorem elSnd ((A set ()) (a nat ())) ()
  (iff (el a (Snd A)) (el (b1 a) A))
((_1 nat))
(:conv (iff (el a (Snd A)) (el (b1 a) A))
  (iff
    (el
      a
      (:unfold Snd (A) (_1)
        (ab _1 (el (b1 _1) A))))
    (el (b1 a) A))
  (elabe (_1 a (el (b1 _1) A) (el (b1 a) A))
    (eleqd ((eq _1 a) (b1 _1) (b1 a) A A)
      (b1eqd ((eq _1 a) _1 a)
        (id ((eq _1 a))))
      (eqsidd ((eq _1 a) A))))))

(local theorem FstSum ((A set ()) (B set ())) ()
  (eqs (Fst (Sum A B)) A)
((x1 nat))
(:conv (eqs (Fst (Sum A B)) A)
  (:unfold eqs ((Fst (Sum A B)) A) (x1)
    (al x1 (iff (el x1 (Fst (Sum A B))) (el x1 A))))
  (ax_gen (x1 (iff (el x1 (Fst (Sum A B))) (el x1 A)))
    (ax_mp ((iff (el (b0 x1) (Sum A B)) (el x1 A)) (iff (el x1 (Fst (Sum A B))) (el x1 A)))
      (ax_mp ((iff (el x1 (Fst (Sum A B))) (el (b0 x1) (Sum A B))) (im (iff (el (b0 x1) (Sum A B)) (el x1 A)) (iff (el x1 (Fst (Sum A B))) (el x1 A))))
        (bitr ((el x1 (Fst (Sum A B))) (el (b0 x1) (Sum A B)) (el x1 A)))
        (elFst ((Sum A B) x1)))
      (Suml (A B x1))))))

(local theorem SndSum ((A set ()) (B set ())) ()
  (eqs (Snd (Sum A B)) B)
((x1 nat))
(:conv (eqs (Snd (Sum A B)) B)
  (:unfold eqs ((Snd (Sum A B)) B) (x1)
    (al x1 (iff (el x1 (Snd (Sum A B))) (el x1 B))))
  (ax_gen (x1 (iff (el x1 (Snd (Sum A B))) (el x1 B)))
    (ax_mp ((iff (el (b1 x1) (Sum A B)) (el x1 B)) (iff (el x1 (Snd (Sum A B))) (el x1 B)))
      (ax_mp ((iff (el x1 (Snd (Sum A B))) (el (b1 x1) (Sum A B))) (im (iff (el (b1 x1) (Sum A B)) (el x1 B)) (iff (el x1 (Snd (Sum A B))) (el x1 B))))
        (bitr ((el x1 (Snd (Sum A B))) (el (b1 x1) (Sum A B)) (el x1 B)))
        (elSnd ((Sum A B) x1)))
      (Sumr (A B x1))))))

(local theorem FstSnd ((A set ())) ()
  (eqs (Sum (Fst A) (Snd A)) A)
((x1 nat))
(:conv (eqs (Sum (Fst A) (Snd A)) A)
  (:unfold eqs ((Sum (Fst A) (Snd A)) A) (x1)
    (al x1 (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A))))
  (ax_gen (x1 (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A)))
    (ax_mp ((or (eq x1 (b0 (div x1 (d2)))) (eq x1 (b1 (div x1 (d2))))) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A)))
      (ax_mp ((im (eq x1 (b1 (div x1 (d2)))) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A))) (im (or (eq x1 (b0 (div x1 (d2)))) (eq x1 (b1 (div x1 (d2))))) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A))))
        (ax_mp ((im (eq x1 (b0 (div x1 (d2)))) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A))) (im (im (eq x1 (b1 (div x1 (d2)))) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A))) (im (or (eq x1 (b0 (div x1 (d2)))) (eq x1 (b1 (div x1 (d2))))) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A)))))
          (eor ((eq x1 (b0 (div x1 (d2)))) (eq x1 (b1 (div x1 (d2)))) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A))))
          (mpbiri ((eq x1 (b0 (div x1 (d2)))) (iff (el (b0 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (b0 (div x1 (d2))) A)) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A)))
            (ax_mp ((iff (el (div x1 (d2)) (Fst A)) (el (b0 (div x1 (d2))) A)) (iff (el (b0 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (b0 (div x1 (d2))) A)))
              (ax_mp ((iff (el (b0 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (div x1 (d2)) (Fst A))) (im (iff (el (div x1 (d2)) (Fst A)) (el (b0 (div x1 (d2))) A)) (iff (el (b0 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (b0 (div x1 (d2))) A))))
                (bitr ((el (b0 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (div x1 (d2)) (Fst A)) (el (b0 (div x1 (d2))) A)))
                (Suml ((Fst A) (Snd A) (div x1 (d2)))))
              (elFst (A (div x1 (d2)))))
            (bieqd ((eq x1 (b0 (div x1 (d2)))) (el x1 (Sum (Fst A) (Snd A))) (el (b0 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el x1 A) (el (b0 (div x1 (d2))) A))
              (eleq1 ((Sum (Fst A) (Snd A)) x1 (b0 (div x1 (d2)))))
              (eleq1 (A x1 (b0 (div x1 (d2))))))))
        (mpbiri ((eq x1 (b1 (div x1 (d2)))) (iff (el (b1 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (b1 (div x1 (d2))) A)) (iff (el x1 (Sum (Fst A) (Snd A))) (el x1 A)))
          (ax_mp ((iff (el (div x1 (d2)) (Snd A)) (el (b1 (div x1 (d2))) A)) (iff (el (b1 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (b1 (div x1 (d2))) A)))
            (ax_mp ((iff (el (b1 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (div x1 (d2)) (Snd A))) (im (iff (el (div x1 (d2)) (Snd A)) (el (b1 (div x1 (d2))) A)) (iff (el (b1 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (b1 (div x1 (d2))) A))))
              (bitr ((el (b1 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el (div x1 (d2)) (Snd A)) (el (b1 (div x1 (d2))) A)))
              (Sumr ((Fst A) (Snd A) (div x1 (d2)))))
            (elSnd (A (div x1 (d2)))))
          (bieqd ((eq x1 (b1 (div x1 (d2)))) (el x1 (Sum (Fst A) (Snd A))) (el (b1 (div x1 (d2))) (Sum (Fst A) (Snd A))) (el x1 A) (el (b1 (div x1 (d2))) A))
            (eleq1 ((Sum (Fst A) (Snd A)) x1 (b1 (div x1 (d2)))))
            (eleq1 (A x1 (b1 (div x1 (d2))))))))
      (b0orb1 (x1))))))

(local def slam ((x nat) (A set (x))) (set ())
((p nat) (y nat))
(sab p (ab y (el (pr (snd p) y) (sbs (fst p) x A)))))

(local theorem slameqd ((_G wff ()) (x nat) (_A1 set (x)) (_A2 set (x)))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (slam x _A1) (slam x _A2)))
((p nat) (y nat))
(:conv (im _G (eqs (slam x _A1) (slam x _A2)))
  (im
    _G
    (eqs
      (:unfold slam (x _A1) (p y)
        (sab p (ab y (el (pr (snd p) y) (sbs (fst p) x _A1)))))
      (:unfold slam (x _A2) (p y)
        (sab p (ab y (el (pr (snd p) y) (sbs (fst p) x _A2)))))))
  (sabeqd (_G p (ab y (el (pr (snd p) y) (sbs (fst p) x _A1))) (ab y (el (pr (snd p) y) (sbs (fst p) x _A2))))
    (abeqd (_G y (el (pr (snd p) y) (sbs (fst p) x _A1)) (el (pr (snd p) y) (sbs (fst p) x _A2)))
      (eleqd (_G (pr (snd p) y) (pr (snd p) y) (sbs (fst p) x _A1) (sbs (fst p) x _A2))
        (eqidd (_G (pr (snd p) y)))
        (sbseqd (_G x (fst p) (fst p) _A1 _A2)
          (eqidd (_G (fst p)))
          _Ah))))))

(local theorem prelslams ((a nat ()) (b nat ()) (x nat) (y nat ()) (A set (x))) ()
  (iff (el (pr (pr a b) y) (slam x A)) (el (pr b y) (sbs a x A)))
((p nat) (z nat))
(:conv (iff (el (pr (pr a b) y) (slam x A)) (el (pr b y) (sbs a x A)))
  (iff
    (el
      (pr (pr a b) y)
      (:unfold slam (x A) (p z)
        (sab p (ab z (el (pr (snd p) z) (sbs (fst p) x A))))))
    (el (pr b y) (sbs a x A)))
  (elsabe ((pr a b) y (el (pr b y) (sbs a x A)) p (ab z (el (pr (snd p) z) (sbs (fst p) x A))))
    (elabed ((eq p (pr a b)) z y (el (pr (snd p) z) (sbs (fst p) x A)) (el (pr b y) (sbs a x A)))
      (eleqd ((an (eq p (pr a b)) (eq z y)) (pr (snd p) z) (pr b y) (sbs (fst p) x A) (sbs a x A))
        (preqd ((an (eq p (pr a b)) (eq z y)) (snd p) b z y)
          (anwl ((eq p (pr a b)) (eq z y) (eq (snd p) b))
            (syl6eq ((eq p (pr a b)) (snd p) (snd (pr a b)) b)
              (sndpr (a b))
              (sndeq (p (pr a b)))))
          (anr ((eq p (pr a b)) (eq z y))))
        (anwl ((eq p (pr a b)) (eq z y) (eqs (sbs (fst p) x A) (sbs a x A)))
          (sbseq1d (x (eq p (pr a b)) (fst p) a A)
            (syl6eq ((eq p (pr a b)) (fst p) (fst (pr a b)) a)
              (fstpr (a b))
              (fsteq (p (pr a b)))))))))))

(local theorem appslams ((a nat ()) (b nat ()) (x nat) (A set (x))) ()
  (eq (app (slam x A) (pr a b)) (app (sbs a x A) b))
((x1 nat))
(ax_mp ((eqs (ab x1 (el (pr (pr a b) x1) (slam x A))) (ab x1 (el (pr b x1) (sbs a x A)))) (eq (app (slam x A) (pr a b)) (app (sbs a x A) b)))
  (:conv (im (eqs (ab x1 (el (pr (pr a b) x1) (slam x A))) (ab x1 (el (pr b x1) (sbs a x A)))) (eq (app (slam x A) (pr a b)) (app (sbs a x A) b)))
    (im
      (eqs (ab x1 (el (pr (pr a b) x1) (slam x A))) (ab x1 (el (pr b x1) (sbs a x A))))
      (eq
        (:unfold app ((slam x A) (pr a b)) (x1)
          (the (ab x1 (el (pr (pr a b) x1) (slam x A)))))
        (:unfold app ((sbs a x A) b) (x1)
          (the (ab x1 (el (pr b x1) (sbs a x A)))))))
    (theeq ((ab x1 (el (pr (pr a b) x1) (slam x A))) (ab x1 (el (pr b x1) (sbs a x A))))))
  (abeqi (x1 (el (pr (pr a b) x1) (slam x A)) (el (pr b x1) (sbs a x A)))
    (prelslams (a b x x1 A)))))

(local theorem appslam ((B set ()) (a nat ()) (b nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eqs A B))))
  (eq (app (slam x A) (pr a b)) (app B b))
()
(ax_mp ((eq (app (sbs a x A) b) (app B b)) (eq (app (slam x A) (pr a b)) (app B b)))
  (ax_mp ((eq (app (slam x A) (pr a b)) (app (sbs a x A) b)) (im (eq (app (sbs a x A) b) (app B b)) (eq (app (slam x A) (pr a b)) (app B b))))
    (eqtr ((app (slam x A) (pr a b)) (app (sbs a x A) b) (app B b)))
    (appslams (a b x A)))
  (ax_mp ((eqs (sbs a x A) B) (eq (app (sbs a x A) b) (app B b)))
    (appeq1 ((sbs a x A) B b))
    (sbse (x a A B)
      h))))

(local theorem appslamed ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (x nat) (A set (x)))
  ((h (im (an G (eq x a)) (eq (app A b) c))))
  (im G (eq (app (slam x A) (pr a b)) c))
()
(syl5eq (G (app (slam x A) (pr a b)) (app (sbs a x A) b) c)
  (appslams (a b x A))
  (mpi (G (ex x (eq x a)) (eq (app (sbs a x A) b) c))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (eq (app (sbs a x A) b) c))
      (nfv (G x))
      (nf_eq (x (app (sbs a x A) b) c)
        (nfapp (x (sbs a x A) b)
          (nfsbs1 (x a A))
          (nfnv (b x)))
        (nfnv (c x)))
      (exp (G (eq x a) (eq (app (sbs a x A) b) c))
        (eqtr3d ((an G (eq x a)) (app (sbs a x A) b) (app A b) c)
          (appeq1d ((an G (eq x a)) A (sbs a x A) b)
            (anwr (G (eq x a) (eqs A (sbs a x A)))
              (sbsq (x a A))))
          h))))))

(local theorem appslame ((a nat ()) (b nat ()) (c nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eq (app A b) c))))
  (eq (app (slam x A) (pr a b)) c)
()
(trud ((eq (app (slam x A) (pr a b)) c))
  (appslamed ((tru) a b c x A)
    (anwr ((tru) (eq x a) (eq (app A b) c))
      h))))

(local def least ((A set ())) (nat ())
((x nat) (y nat))
(the (ab x (an (el x A) (al y (im (el y A) (le x y)))))))

(local theorem leasteqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eq (least _A1) (least _A2)))
((x nat) (y nat))
(:conv (im _G (eq (least _A1) (least _A2)))
  (im
    _G
    (eq
      (:unfold least (_A1) (x y)
        (the (ab x (an (el x _A1) (al y (im (el y _A1) (le x y)))))))
      (:unfold least (_A2) (x y)
        (the (ab x (an (el x _A2) (al y (im (el y _A2) (le x y)))))))))
  (theeqd (_G (ab x (an (el x _A1) (al y (im (el y _A1) (le x y))))) (ab x (an (el x _A2) (al y (im (el y _A2) (le x y))))))
    (abeqd (_G x (an (el x _A1) (al y (im (el y _A1) (le x y)))) (an (el x _A2) (al y (im (el y _A2) (le x y)))))
      (aneqd (_G (el x _A1) (el x _A2) (al y (im (el y _A1) (le x y))) (al y (im (el y _A2) (le x y))))
        (eleqd (_G x x _A1 _A2)
          (eqidd (_G x))
          _Ah)
        (aleqd (_G y (im (el y _A1) (le x y)) (im (el y _A2) (le x y)))
          (imeqd (_G (el y _A1) (el y _A2) (le x y) (le x y))
            (eleqd (_G y y _A1 _A2)
              (eqidd (_G y))
              _Ah)
            (biidd (_G (le x y))))))))))

(local theorem leasteq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eq (least _A1) (least _A2)))
()
(leasteqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem leastlem ((A set ()) (a nat ()) (z nat)) ()
  (im (el a A) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
((u nat) (v nat) (x nat) (y nat))
(rsyl ((el a A) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
  (syl ((el a A) (not (al z (im (el z A) (lt a z)))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
    (:conv (im (not (al z (im (el z A) (lt a z)))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
      (:sym (:unfold or ((al z (im (el z A) (lt a z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) ()
        (im (not (al z (im (el z A) (lt a z)))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
      (ind (x y a (or (al z (im (el z A) (lt x z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt a z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
        (oreqd ((eq x a) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt a z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x a) z (im (el z A) (lt x z)) (im (el z A) (lt a z)))
            (imeqd ((eq x a) (el z A) (el z A) (lt x z) (lt a z))
              (biidd ((eq x a) (el z A)))
              (lteqd ((eq x a) x a z z)
                (id ((eq x a)))
                (eqidd ((eq x a) z)))))
          (biidd ((eq x a) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
        (oreqd ((eq x (d0)) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x (d0)) z (im (el z A) (lt x z)) (im (el z A) (lt (d0) z)))
            (imeqd ((eq x (d0)) (el z A) (el z A) (lt x z) (lt (d0) z))
              (biidd ((eq x (d0)) (el z A)))
              (lteqd ((eq x (d0)) x (d0) z z)
                (id ((eq x (d0))))
                (eqidd ((eq x (d0)) z)))))
          (biidd ((eq x (d0)) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
        (oreqd ((eq x y) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x y) z (im (el z A) (lt x z)) (im (el z A) (lt y z)))
            (imeqd ((eq x y) (el z A) (el z A) (lt x z) (lt y z))
              (biidd ((eq x y) (el z A)))
              (lteqd ((eq x y) x y z z)
                (id ((eq x y)))
                (eqidd ((eq x y) z)))))
          (biidd ((eq x y) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
        (oreqd ((eq x (suc y)) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x (suc y)) z (im (el z A) (lt x z)) (im (el z A) (lt (suc y) z)))
            (imeqd ((eq x (suc y)) (el z A) (el z A) (lt x z) (lt (suc y) z))
              (biidd ((eq x (suc y)) (el z A)))
              (lteqd ((eq x (suc y)) x (suc y) z z)
                (id ((eq x (suc y))))
                (eqidd ((eq x (suc y)) z)))))
          (biidd ((eq x (suc y)) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
        (cases ((el (d0) A) (or (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
          (orrd ((el (d0) A) (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
            (sylan ((el (d0) A) (el (d0) A) (al z (im (el z A) (le (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
              (iexe (u (d0) (an (el u A) (al z (im (el z A) (le u z)))) (an (el (d0) A) (al z (im (el z A) (le (d0) z)))))
                (aneqd ((eq u (d0)) (el u A) (el (d0) A) (al z (im (el z A) (le u z))) (al z (im (el z A) (le (d0) z))))
                  (eleq1 (A u (d0)))
                  (aleqd ((eq u (d0)) z (im (el z A) (le u z)) (im (el z A) (le (d0) z)))
                    (imeq2d ((eq u (d0)) (el z A) (le u z) (le (d0) z))
                      (leeq1 (u (d0) z))))))
              (id ((el (d0) A)))
              (a1i ((el (d0) A) (al z (im (el z A) (le (d0) z))))
                (ax_gen (z (im (el z A) (le (d0) z)))
                  (a1i ((el z A) (le (d0) z))
                    (le01 (z)))))))
          (orld ((not (el (d0) A)) (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
            (ialda (z (not (el (d0) A)) (el z A) (lt (d0) z))
              (sylibr ((an (not (el (d0) A)) (el z A)) (ne z (d0)) (lt (d0) z))
                (lt01 (z))
                (:conv (im (an (not (el (d0) A)) (el z A)) (ne z (d0)))
                  (im
                    (an (not (el (d0) A)) (el z A))
                    (:unfold ne (z (d0)) ()
                      (not (eq z (d0)))))
                  (mtd ((an (not (el (d0) A)) (el z A)) (el (d0) A) (eq z (d0)))
                    (anl ((not (el (d0) A)) (el z A)))
                    (com12 ((eq z (d0)) (an (not (el (d0) A)) (el z A)) (el (d0) A))
                      (syl5 ((eq z (d0)) (an (not (el (d0) A)) (el z A)) (el z A) (el (d0) A))
                        (anr ((not (el (d0) A)) (el z A)))
                        (bi1d ((eq z (d0)) (el z A) (el (d0) A))
                          (eleq1 (A z (d0))))))))))))
        (ax_mp ((im (ex u (an (el u A) (al z (im (el z A) (le u z))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))) (im (or (al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
          (ax_mp ((im (al z (im (el z A) (lt y z))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))) (im (im (ex u (an (el u A) (al z (im (el z A) (le u z))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))) (im (or (al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))))
            (eor ((al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
            (casesda ((al z (im (el z A) (lt y z))) (el (suc y) A) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
              (orrd ((an (al z (im (el z A) (lt y z))) (el (suc y) A)) (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
                (sylan ((an (al z (im (el z A) (lt y z))) (el (suc y) A)) (el (suc y) A) (al z (im (el z A) (le (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
                  (iexe (u (suc y) (an (el u A) (al z (im (el z A) (le u z)))) (an (el (suc y) A) (al z (im (el z A) (le (suc y) z)))))
                    (aneqd ((eq u (suc y)) (el u A) (el (suc y) A) (al z (im (el z A) (le u z))) (al z (im (el z A) (le (suc y) z))))
                      (eleq1 (A u (suc y)))
                      (aleqd ((eq u (suc y)) z (im (el z A) (le u z)) (im (el z A) (le (suc y) z)))
                        (imeq2d ((eq u (suc y)) (el z A) (le u z) (le (suc y) z))
                          (leeq1 (u (suc y) z))))))
                  (anr ((al z (im (el z A) (lt y z))) (el (suc y) A)))
                  (:conv (im (an (al z (im (el z A) (lt y z))) (el (suc y) A)) (al z (im (el z A) (le (suc y) z))))
                    (im
                      (an (al z (im (el z A) (lt y z))) (el (suc y) A))
                      (al
                        z
                        (im
                          (el z A)
                          (:sym (:unfold lt (y z) ()
                            (le (suc y) z))))))
                    (anl ((al z (im (el z A) (lt y z))) (el (suc y) A))))))
              (orld ((an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
                (ialdh (z (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (im (el z A) (lt (suc y) z)))
                  (nfan (z (al z (im (el z A) (lt y z))) (not (el (suc y) A)))
                    (nfal1 (z (im (el z A) (lt y z))))
                    (nfv ((not (el (suc y) A)) z)))
                  (exp ((an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A) (lt (suc y) z))
                    (sylibr ((an (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A)) (an (le (suc y) z) (ne (suc y) z)) (lt (suc y) z))
                      (ltlene ((suc y) z))
                      (iand ((an (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A)) (le (suc y) z) (ne (suc y) z))
                        (imp ((an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A) (le (suc y) z))
                          (anwl ((al z (im (el z A) (lt y z))) (not (el (suc y) A)) (im (el z A) (le (suc y) z)))
                            (:conv (im (al z (im (el z A) (lt y z))) (im (el z A) (le (suc y) z)))
                              (im
                                (al z (im (el z A) (lt y z)))
                                (im
                                  (el z A)
                                  (:sym (:unfold lt (y z) ()
                                    (le (suc y) z)))))
                              (eal (z (im (el z A) (lt y z)))))))
                        (:conv (im (an (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A)) (ne (suc y) z))
                          (im
                            (an (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A))
                            (:unfold ne ((suc y) z) ()
                              (not (eq (suc y) z))))
                          (mtand ((an (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A)) (el (suc y) A) (eq (suc y) z))
                            (anlr ((al z (im (el z A) (lt y z))) (not (el (suc y) A)) (el z A)))
                            (mpbird ((an (an (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A)) (eq (suc y) z)) (el z A) (el (suc y) A))
                              (anwr ((an (an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A)) (eq (suc y) z) (iff (el (suc y) A) (el z A)))
                                (eleq1 (A (suc y) z)))
                              (anlr ((an (al z (im (el z A) (lt y z))) (not (el (suc y) A))) (el z A) (eq (suc y) z)))))))))))))
          (orr ((al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))))
    (mtd ((el a A) (lt a a) (al z (im (el z A) (lt a z))))
      (a1i ((el a A) (not (lt a a)))
        (ltirr (a)))
      (com12 ((al z (im (el z A) (lt a z))) (el a A) (lt a a))
        (eale (z a (im (el z A) (lt a z)) (im (el a A) (lt a a)))
          (imeqd ((eq z a) (el z A) (el a A) (lt a z) (lt a a))
            (eleq1 (A z a))
            (lteq2 (a z a)))))))
  (eex (u (an (el u A) (al z (im (el z A) (le u z)))) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
    (mpbird ((an (el u A) (al z (im (el z A) (le u z)))) (an (el u A) (al z (im (el z A) (le u z)))) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
      (rsyl ((an (el u A) (al z (im (el z A) (le u z)))) (eq (least A) u) (iff (an (el (least A) A) (al z (im (el z A) (le (least A) z)))) (an (el u A) (al z (im (el z A) (le u z))))))
        (:conv (im (an (el u A) (al z (im (el z A) (le u z)))) (eq (least A) u))
          (im
            (an (el u A) (al z (im (el z A) (le u z))))
            (eq
              (:unfold least (A) (v z)
                (the (ab v (an (el v A) (al z (im (el z A) (le v z)))))))
              u))
          (eqtheabd ((an (el u A) (al z (im (el z A) (le u z)))) u v (an (el v A) (al z (im (el z A) (le v z)))))
            (ibid ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (eq v u))
              (exp ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (eq v u))
                (leasymd ((an (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z))))) v u)
                  (mpd ((an (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z))))) (el u A) (le v u))
                    (anll ((el u A) (al z (im (el z A) (le u z))) (an (el v A) (al z (im (el z A) (le v z))))))
                    (anwr ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (im (el u A) (le v u)))
                      (anwr ((el v A) (al z (im (el z A) (le v z))) (im (el u A) (le v u)))
                        (eale (z u (im (el z A) (le v z)) (im (el u A) (le v u)))
                          (imeqd ((eq z u) (el z A) (el u A) (le v z) (le v u))
                            (eleq1 (A z u))
                            (leeq2 (v z u)))))))
                  (mpd ((an (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z))))) (el v A) (le u v))
                    (anrl ((an (el u A) (al z (im (el z A) (le u z)))) (el v A) (al z (im (el z A) (le v z)))))
                    (anwl ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (im (el v A) (le u v)))
                      (anwr ((el u A) (al z (im (el z A) (le u z))) (im (el v A) (le u v)))
                        (eale (z v (im (el z A) (le u z)) (im (el v A) (le u v)))
                          (imeqd ((eq z v) (el z A) (el v A) (le u z) (le u v))
                            (eleq1 (A z v))
                            (leeq2 (u z v)))))))))
              (com12 ((eq v u) (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))))
                (bi2d ((eq v u) (an (el v A) (al z (im (el z A) (le v z)))) (an (el u A) (al z (im (el z A) (le u z)))))
                  (aneqd ((eq v u) (el v A) (el u A) (al z (im (el z A) (le v z))) (al z (im (el z A) (le u z))))
                    (eleq1 (A v u))
                    (aleqd ((eq v u) z (im (el z A) (le v z)) (im (el z A) (le u z)))
                      (imeq2d ((eq v u) (el z A) (le v z) (le u z))
                        (leeq1 (v u z))))))))))
        (aneqd ((eq (least A) u) (el (least A) A) (el u A) (al z (im (el z A) (le (least A) z))) (al z (im (el z A) (le u z))))
          (eleq1 (A (least A) u))
          (aleqd ((eq (least A) u) z (im (el z A) (le (least A) z)) (im (el z A) (le u z)))
            (imeq2d ((eq (least A) u) (el z A) (le (least A) z) (le u z))
              (leeq1 ((least A) u z))))))
      (id ((an (el u A) (al z (im (el z A) (le u z))))))))))

(local theorem leastel ((A set ()) (a nat ())) ()
  (im (el a A) (el (least A) A))
((x nat))
(anld ((el a A) (el (least A) A) (al x (im (el x A) (le (least A) x))))
  (leastlem (A a x))))

(local theorem leastle ((A set ()) (a nat ())) ()
  (im (el a A) (le (least A) a))
((x nat))
(mpd ((el a A) (an (el (least A) A) (al x (im (el x A) (le (least A) x)))) (le (least A) a))
  (leastlem (A a x))
  (com12 ((an (el (least A) A) (al x (im (el x A) (le (least A) x)))) (el a A) (le (least A) a))
    (anwr ((el (least A) A) (al x (im (el x A) (le (least A) x))) (im (el a A) (le (least A) a)))
      (eale (x a (im (el x A) (le (least A) x)) (im (el a A) (le (least A) a)))
        (imeqd ((eq x a) (el x A) (el a A) (le (least A) x) (le (least A) a))
          (eleq1 (A x a))
          (leeq2 ((least A) x a))))))))

(local theorem least0 ((A set ()) (x nat)) ()
  (im (not (ex x (el x A))) (eq (least A) (d0)))
((y nat) (z nat))
(:conv (im (not (ex x (el x A))) (eq (least A) (d0)))
  (im
    (not (ex x (el x A)))
    (eq
      (:unfold least (A) (y z)
        (the (ab y (an (el y A) (al z (im (el z A) (le y z)))))))
      (d0)))
  (eqthe0abd ((not (ex x (el x A))) y (an (el y A) (al z (im (el z A) (le y z)))))
    (com12 ((an (el y A) (al z (im (el z A) (le y z)))) (not (ex x (el x A))) (eq y (d0)))
      (syl ((an (el y A) (al z (im (el z A) (le y z)))) (ex x (el x A)) (im (not (ex x (el x A))) (eq y (d0))))
        (absurdr ((ex x (el x A)) (eq y (d0))))
        (anwl ((el y A) (al z (im (el z A) (le y z))) (ex x (el x A)))
          (iexe (x y (el x A) (el y A))
            (eleq1 (A x y)))))))))

(local theorem subsnfin ((A set ())) ()
  (im (subsn A) (finite A))
((x1 nat))
(syl ((subsn A) (subset A (ab x1 (eq x1 (least A)))) (finite A))
  (mpi ((subset A (ab x1 (eq x1 (least A)))) (finite (ab x1 (eq x1 (least A)))) (finite A))
    (snfin ((least A) x1))
    (finss (A (ab x1 (eq x1 (least A))))))
  (sylib ((subsn A) (al x1 (im (el x1 A) (eq x1 (least A)))) (subset A (ab x1 (eq x1 (least A)))))
    (ssab2 (A x1 (eq x1 (least A))))
    (ialda (x1 (subsn A) (el x1 A) (eq x1 (least A)))
      (subsni (A (an (subsn A) (el x1 A)) x1 (least A))
        (anl ((subsn A) (el x1 A)))
        (anr ((subsn A) (el x1 A)))
        (anwr ((subsn A) (el x1 A) (el (least A) A))
          (leastel (A x1))))))))

(local def sapp ((F set ()) (x nat ())) (set ())
((y nat))
(sab y (rapp F (pr x y))))

(local theorem sappeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_xh (im _G (eq _x1 _x2))))
  (im _G (eqs (sapp _F1 _x1) (sapp _F2 _x2)))
((y nat))
(:conv (im _G (eqs (sapp _F1 _x1) (sapp _F2 _x2)))
  (im
    _G
    (eqs
      (:unfold sapp (_F1 _x1) (y)
        (sab y (rapp _F1 (pr _x1 y))))
      (:unfold sapp (_F2 _x2) (y)
        (sab y (rapp _F2 (pr _x2 y))))))
  (sabeqd (_G y (rapp _F1 (pr _x1 y)) (rapp _F2 (pr _x2 y)))
    (rappeqd (_G _F1 _F2 (pr _x1 y) (pr _x2 y))
      _Fh
      (preqd (_G _x1 _x2 y y)
        _xh
        (eqidd (_G y)))))))

(local theorem sappeq ((_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ())) ()
  (im (eqs _F1 _F2) (im (eq _x1 _x2) (eqs (sapp _F1 _x1) (sapp _F2 _x2))))
()
(exp ((eqs _F1 _F2) (eq _x1 _x2) (eqs (sapp _F1 _x1) (sapp _F2 _x2)))
  (sappeqd ((an (eqs _F1 _F2) (eq _x1 _x2)) _F1 _F2 _x1 _x2)
    (anl ((eqs _F1 _F2) (eq _x1 _x2)))
    (anr ((eqs _F1 _F2) (eq _x1 _x2))))))

(local theorem sappeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (x nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eqs (sapp _F1 x) (sapp _F2 x)))
()
(sappeqd (_G _F1 _F2 x x)
  _h
  (eqidd (_G x))))

(local theorem sappeq1 ((_F1 set ()) (_F2 set ()) (x nat ())) ()
  (im (eqs _F1 _F2) (eqs (sapp _F1 x) (sapp _F2 x)))
()
(sappeq1d ((eqs _F1 _F2) _F1 _F2 x)
  (id ((eqs _F1 _F2)))))

(local theorem sappeq2d ((_G wff ()) (F set ()) (_x1 nat ()) (_x2 nat ()))
  ((_h (im _G (eq _x1 _x2))))
  (im _G (eqs (sapp F _x1) (sapp F _x2)))
()
(sappeqd (_G F F _x1 _x2)
  (eqsidd (_G F))
  _h))

(local theorem sappeq2 ((F set ()) (_x1 nat ()) (_x2 nat ())) ()
  (im (eq _x1 _x2) (eqs (sapp F _x1) (sapp F _x2)))
()
(sappeq2d ((eq _x1 _x2) F _x1 _x2)
  (id ((eq _x1 _x2)))))

(local theorem nfsapp ((x nat) (F set (x)) (a nat (x)))
  ((h1 (nfs x F))
   (h2 (nfn x a)))
  (nfs x (sapp F a))
((x1 nat))
(:conv (nfs x (sapp F a))
  (nfs
    x
    (:unfold sapp (F a) (x1)
      (sab x1 (rapp F (pr a x1)))))
  (nfsab (x1 x (rapp F (pr a x1)))
    (nfrapp (x F (pr a x1))
      h1
      (nfpr (x a x1)
        h2
        (nfnv (x1 x)))))))

(local theorem sapprapp ((F set ()) (a nat ()) (b nat ())) ()
  (eqs (rapp (sapp F a) b) (rapp F (pr a b)))
((_1 nat) (y nat))
(:conv (eqs (rapp (sapp F a) b) (rapp F (pr a b)))
  (eqs
    (:unfold rapp ((sapp F a) b) (y)
      (ab y (el (pr b y) (sapp F a))))
    (rapp F (pr a b)))
  (eqab1i ((rapp F (pr a b)) y (el (pr b y) (sapp F a)))
    (:conv (iff (el (pr b y) (sapp F a)) (el y (rapp F (pr a b))))
      (iff
        (el
          (pr b y)
          (:unfold sapp (F a) (_1)
            (sab _1 (rapp F (pr a _1)))))
        (el y (rapp F (pr a b))))
      (elsabe (b y (el y (rapp F (pr a b))) _1 (rapp F (pr a _1)))
        (eleqd ((eq _1 b) y y (rapp F (pr a _1)) (rapp F (pr a b)))
          (eqidd ((eq _1 b) y))
          (rappeqd ((eq _1 b) F F (pr a _1) (pr a b))
            (eqsidd ((eq _1 b) F))
            (preqd ((eq _1 b) a a _1 b)
              (eqidd ((eq _1 b) a))
              (id ((eq _1 b)))))))))))

(local theorem sappapp ((F set ()) (a nat ()) (b nat ())) ()
  (eq (app (sapp F a) b) (app F (pr a b)))
((x1 nat) (x2 nat))
(ax_mp ((eqs (ab x1 (el (pr b x1) (sapp F a))) (ab x2 (el (pr (pr a b) x2) F))) (eq (app (sapp F a) b) (app F (pr a b))))
  (:conv (im (eqs (ab x1 (el (pr b x1) (sapp F a))) (ab x2 (el (pr (pr a b) x2) F))) (eq (app (sapp F a) b) (app F (pr a b))))
    (im
      (eqs (ab x1 (el (pr b x1) (sapp F a))) (ab x2 (el (pr (pr a b) x2) F)))
      (eq
        (:unfold app ((sapp F a) b) (x1)
          (the (ab x1 (el (pr b x1) (sapp F a)))))
        (:unfold app (F (pr a b)) (x2)
          (the (ab x2 (el (pr (pr a b) x2) F))))))
    (theeq ((ab x1 (el (pr b x1) (sapp F a))) (ab x2 (el (pr (pr a b) x2) F)))))
  (:conv (eqs (ab x1 (el (pr b x1) (sapp F a))) (ab x2 (el (pr (pr a b) x2) F)))
    (eqs
      (:sym (:unfold rapp ((sapp F a) b) (x1)
        (ab x1 (el (pr b x1) (sapp F a)))))
      (:sym (:unfold rapp (F (pr a b)) (x2)
        (ab x2 (el (pr (pr a b) x2) F)))))
    (sapprapp (F a b)))))

(local theorem prelsapp ((F set ()) (a nat ()) (b nat ()) (y nat ())) ()
  (iff (el (pr b y) (sapp F a)) (el (pr (pr a b) y) F))
()
(ax_mp ((iff (el y (rapp (sapp F a) b)) (el (pr (pr a b) y) F)) (iff (el (pr b y) (sapp F a)) (el (pr (pr a b) y) F)))
  (ax_mp ((iff (el y (rapp (sapp F a) b)) (el (pr b y) (sapp F a))) (im (iff (el y (rapp (sapp F a) b)) (el (pr (pr a b) y) F)) (iff (el (pr b y) (sapp F a)) (el (pr (pr a b) y) F))))
    (bitr3 ((el (pr b y) (sapp F a)) (el y (rapp (sapp F a) b)) (el (pr (pr a b) y) F)))
    (elrapp ((sapp F a) b y)))
  (ax_mp ((iff (el y (rapp F (pr a b))) (el (pr (pr a b) y) F)) (iff (el y (rapp (sapp F a) b)) (el (pr (pr a b) y) F)))
    (ax_mp ((iff (el y (rapp (sapp F a) b)) (el y (rapp F (pr a b)))) (im (iff (el y (rapp F (pr a b))) (el (pr (pr a b) y) F)) (iff (el y (rapp (sapp F a) b)) (el (pr (pr a b) y) F))))
      (bitr ((el y (rapp (sapp F a) b)) (el y (rapp F (pr a b))) (el (pr (pr a b) y) F)))
      (ax_mp ((eqs (rapp (sapp F a) b) (rapp F (pr a b))) (iff (el y (rapp (sapp F a) b)) (el y (rapp F (pr a b)))))
        (eleq2 ((rapp (sapp F a) b) (rapp F (pr a b)) y))
        (sapprapp (F a b))))
    (elrapp (F (pr a b) y)))))

(local theorem sappslams ((a nat ()) (x nat) (A set (x))) ()
  (eqs (sapp (slam x A) a) (sbs a x A))
((x1 nat) (x2 nat))
(mpbir ((al x1 (al x2 (iff (el (pr x1 x2) (sapp (slam x A) a)) (el (pr x1 x2) (sbs a x A))))) (eqs (sapp (slam x A) a) (sbs a x A)))
  (axext2 ((sapp (slam x A) a) (sbs a x A) x1 x2))
  (ax_gen (x1 (al x2 (iff (el (pr x1 x2) (sapp (slam x A) a)) (el (pr x1 x2) (sbs a x A)))))
    (ax_gen (x2 (iff (el (pr x1 x2) (sapp (slam x A) a)) (el (pr x1 x2) (sbs a x A))))
      (ax_mp ((iff (el (pr (pr a x1) x2) (slam x A)) (el (pr x1 x2) (sbs a x A))) (iff (el (pr x1 x2) (sapp (slam x A) a)) (el (pr x1 x2) (sbs a x A))))
        (ax_mp ((iff (el (pr x1 x2) (sapp (slam x A) a)) (el (pr (pr a x1) x2) (slam x A))) (im (iff (el (pr (pr a x1) x2) (slam x A)) (el (pr x1 x2) (sbs a x A))) (iff (el (pr x1 x2) (sapp (slam x A) a)) (el (pr x1 x2) (sbs a x A)))))
          (bitr ((el (pr x1 x2) (sapp (slam x A) a)) (el (pr (pr a x1) x2) (slam x A)) (el (pr x1 x2) (sbs a x A))))
          (prelsapp ((slam x A) a x1 x2)))
        (prelslams (a x1 x x2 A)))))))

(local theorem sappslam ((B set ()) (a nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eqs A B))))
  (eqs (sapp (slam x A) a) B)
()
(ax_mp ((eqs (sbs a x A) B) (eqs (sapp (slam x A) a) B))
  (ax_mp ((eqs (sapp (slam x A) a) (sbs a x A)) (im (eqs (sbs a x A) B) (eqs (sapp (slam x A) a) B)))
    (eqstr ((sapp (slam x A) a) (sbs a x A) B))
    (sappslams (a x A)))
  (sbse (x a A B)
    h)))

(local theorem sappslamed ((B set ()) (G wff ()) (a nat ()) (x nat) (A set (x)))
  ((h (im (an G (eq x a)) (eqs A B))))
  (im G (eqs (sapp (slam x A) a) B))
()
(syl5eqs ((sapp (slam x A) a) (sbs a x A) B G)
  (sappslams (a x A))
  (mpi (G (ex x (eq x a)) (eqs (sbs a x A) B))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (eqs (sbs a x A) B))
      (nfv (G x))
      (nfeqs (x (sbs a x A) B)
        (nfsbs1 (x a A))
        (nfsv (B x)))
      (exp (G (eq x a) (eqs (sbs a x A) B))
        (eqstr3d ((sbs a x A) A B (an G (eq x a)))
          (anwr (G (eq x a) (eqs A (sbs a x A)))
            (sbsq (x a A)))
          h))))))

(local theorem sappslame ((B set ()) (a nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eqs A B))))
  (eqs (sapp (slam x A) a) B)
()
(trud ((eqs (sapp (slam x A) a) B))
  (sappslamed (B (tru) a x A)
    (anwr ((tru) (eq x a) (eqs A B))
      h))))

(local def znsub ((m nat ()) (n nat ())) (nat ())
()
(if (lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))

(local theorem znsubeqd ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_mh (im _G (eq _m1 _m2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (znsub _m1 _n1) (znsub _m2 _n2)))
()
(:conv (im _G (eq (znsub _m1 _n1) (znsub _m2 _n2)))
  (im
    _G
    (eq
      (:unfold znsub (_m1 _n1) ()
        (if (lt _m1 _n1) (b1 (sub _n1 (suc _m1))) (b0 (sub _m1 _n1))))
      (:unfold znsub (_m2 _n2) ()
        (if (lt _m2 _n2) (b1 (sub _n2 (suc _m2))) (b0 (sub _m2 _n2))))))
  (ifeqd (_G (lt _m1 _n1) (lt _m2 _n2) (b1 (sub _n1 (suc _m1))) (b1 (sub _n2 (suc _m2))) (b0 (sub _m1 _n1)) (b0 (sub _m2 _n2)))
    (lteqd (_G _m1 _m2 _n1 _n2)
      _mh
      _nh)
    (b1eqd (_G (sub _n1 (suc _m1)) (sub _n2 (suc _m2)))
      (subeqd (_G _n1 _n2 (suc _m1) (suc _m2))
        _nh
        (suceqd (_G _m1 _m2)
          _mh)))
    (b0eqd (_G (sub _m1 _n1) (sub _m2 _n2))
      (subeqd (_G _m1 _m2 _n1 _n2)
        _mh
        _nh)))))

(local theorem znsubeq ((_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _m1 _m2) (im (eq _n1 _n2) (eq (znsub _m1 _n1) (znsub _m2 _n2))))
()
(exp ((eq _m1 _m2) (eq _n1 _n2) (eq (znsub _m1 _n1) (znsub _m2 _n2)))
  (znsubeqd ((an (eq _m1 _m2) (eq _n1 _n2)) _m1 _m2 _n1 _n2)
    (anl ((eq _m1 _m2) (eq _n1 _n2)))
    (anr ((eq _m1 _m2) (eq _n1 _n2))))))

(local theorem znsubeq1d ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (n nat ()))
  ((_h (im _G (eq _m1 _m2))))
  (im _G (eq (znsub _m1 n) (znsub _m2 n)))
()
(znsubeqd (_G _m1 _m2 n n)
  _h
  (eqidd (_G n))))

(local theorem znsubeq1 ((_m1 nat ()) (_m2 nat ()) (n nat ())) ()
  (im (eq _m1 _m2) (eq (znsub _m1 n) (znsub _m2 n)))
()
(znsubeq1d ((eq _m1 _m2) _m1 _m2 n)
  (id ((eq _m1 _m2)))))

(local theorem znsubeq2d ((_G wff ()) (m nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (znsub m _n1) (znsub m _n2)))
()
(znsubeqd (_G m m _n1 _n2)
  (eqidd (_G m))
  _h))

(local theorem znsubeq2 ((m nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (znsub m _n1) (znsub m _n2)))
()
(znsubeq2d ((eq _n1 _n2) m _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem znsubneg ((m nat ()) (n nat ())) ()
  (im (lt m n) (eq (znsub m n) (b1 (sub n (suc m)))))
()
(:conv (im (lt m n) (eq (znsub m n) (b1 (sub n (suc m)))))
  (im
    (lt m n)
    (eq
      (:unfold znsub (m n) ()
        (if (lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))
      (b1 (sub n (suc m)))))
  (ifpos ((lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))))

(local theorem znsubpos ((m nat ()) (n nat ())) ()
  (im (le n m) (eq (znsub m n) (b0 (sub m n))))
()
(sylbi ((le n m) (not (lt m n)) (eq (znsub m n) (b0 (sub m n))))
  (lenlt (n m))
  (:conv (im (not (lt m n)) (eq (znsub m n) (b0 (sub m n))))
    (im
      (not (lt m n))
      (eq
        (:unfold znsub (m n) ()
          (if (lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))
        (b0 (sub m n))))
    (ifneg ((lt m n) (b1 (sub n (suc m))) (b0 (sub m n)))))))

(local theorem znsubid ((m nat ())) ()
  (eq (znsub m m) (d0))
()
(ax_mp ((eq (b0 (sub m m)) (d0)) (eq (znsub m m) (d0)))
  (ax_mp ((eq (znsub m m) (b0 (sub m m))) (im (eq (b0 (sub m m)) (d0)) (eq (znsub m m) (d0))))
    (eqtr ((znsub m m) (b0 (sub m m)) (d0)))
    (ax_mp ((le m m) (eq (znsub m m) (b0 (sub m m))))
      (znsubpos (m m))
      (leid (m))))
  (ax_mp ((eq (b0 (d0)) (d0)) (eq (b0 (sub m m)) (d0)))
    (ax_mp ((eq (b0 (sub m m)) (b0 (d0))) (im (eq (b0 (d0)) (d0)) (eq (b0 (sub m m)) (d0))))
      (eqtr ((b0 (sub m m)) (b0 (d0)) (d0)))
      (ax_mp ((eq (sub m m) (d0)) (eq (b0 (sub m m)) (b0 (d0))))
        (b0eq ((sub m m) (d0)))
        (subid (m))))
    (b00 ()))))

(local theorem znsub02 ((a nat ())) ()
  (eq (znsub a (d0)) (b0 a))
()
(ax_mp ((eq (b0 (sub a (d0))) (b0 a)) (eq (znsub a (d0)) (b0 a)))
  (ax_mp ((eq (znsub a (d0)) (b0 (sub a (d0)))) (im (eq (b0 (sub a (d0))) (b0 a)) (eq (znsub a (d0)) (b0 a))))
    (eqtr ((znsub a (d0)) (b0 (sub a (d0))) (b0 a)))
    (ax_mp ((le (d0) a) (eq (znsub a (d0)) (b0 (sub a (d0)))))
      (znsubpos (a (d0)))
      (le01 (a))))
  (ax_mp ((eq (sub a (d0)) a) (eq (b0 (sub a (d0))) (b0 a)))
    (b0eq ((sub a (d0)) a))
    (sub02 (a)))))

(local theorem znsubodd ((a nat ()) (b nat ())) ()
  (iff (odd (znsub a b)) (lt a b))
()
(ibii ((odd (znsub a b)) (lt a b))
  (ax_mp ((im (not (lt a b)) (not (odd (znsub a b)))) (im (odd (znsub a b)) (lt a b)))
    (ax_3 ((lt a b) (odd (znsub a b))))
    (mpbiri ((not (lt a b)) (not (odd (b0 (sub a b)))) (not (odd (znsub a b))))
      (b0odd ((sub a b)))
      (noteqd ((not (lt a b)) (odd (znsub a b)) (odd (b0 (sub a b))))
        (oddeqd ((not (lt a b)) (znsub a b) (b0 (sub a b)))
          (:conv (im (not (lt a b)) (eq (znsub a b) (b0 (sub a b))))
            (im
              (not (lt a b))
              (eq
                (:unfold znsub (a b) ()
                  (if (lt a b) (b1 (sub b (suc a))) (b0 (sub a b))))
                (b0 (sub a b))))
            (ifneg ((lt a b) (b1 (sub b (suc a))) (b0 (sub a b)))))))))
  (mpbiri ((lt a b) (odd (b1 (sub b (suc a)))) (odd (znsub a b)))
    (b1odd ((sub b (suc a))))
    (oddeqd ((lt a b) (znsub a b) (b1 (sub b (suc a))))
      (:conv (im (lt a b) (eq (znsub a b) (b1 (sub b (suc a)))))
        (im
          (lt a b)
          (eq
            (:unfold znsub (a b) ()
              (if (lt a b) (b1 (sub b (suc a))) (b0 (sub a b))))
            (b1 (sub b (suc a)))))
        (ifpos ((lt a b) (b1 (sub b (suc a))) (b0 (sub a b)))))))))

(local def zfst ((n nat ())) (nat ())
((mneg nat) (mpos nat))
(app (case (lam mpos mpos) (lam mneg (d0))) n))

(local theorem zfsteqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zfst _n1) (zfst _n2)))
((mneg nat) (mpos nat))
(:conv (im _G (eq (zfst _n1) (zfst _n2)))
  (im
    _G
    (eq
      (:unfold zfst (_n1) (mneg mpos)
        (app (case (lam mpos mpos) (lam mneg (d0))) _n1))
      (:unfold zfst (_n2) (mneg mpos)
        (app (case (lam mpos mpos) (lam mneg (d0))) _n2))))
  (appeqd (_G (case (lam mpos mpos) (lam mneg (d0))) (case (lam mpos mpos) (lam mneg (d0))) _n1 _n2)
    (eqsidd (_G (case (lam mpos mpos) (lam mneg (d0)))))
    _nh)))

(local theorem zfsteq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zfst _n1) (zfst _n2)))
()
(zfsteqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(local def zsnd ((n nat ())) (nat ())
((mneg nat) (mpos nat))
(app (case (lam mpos (d0)) (lam mneg (suc mneg))) n))

(local theorem zsndeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zsnd _n1) (zsnd _n2)))
((mneg nat) (mpos nat))
(:conv (im _G (eq (zsnd _n1) (zsnd _n2)))
  (im
    _G
    (eq
      (:unfold zsnd (_n1) (mneg mpos)
        (app (case (lam mpos (d0)) (lam mneg (suc mneg))) _n1))
      (:unfold zsnd (_n2) (mneg mpos)
        (app (case (lam mpos (d0)) (lam mneg (suc mneg))) _n2))))
  (appeqd (_G (case (lam mpos (d0)) (lam mneg (suc mneg))) (case (lam mpos (d0)) (lam mneg (suc mneg))) _n1 _n2)
    (eqsidd (_G (case (lam mpos (d0)) (lam mneg (suc mneg)))))
    _nh)))

(local theorem zsndeq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zsnd _n1) (zsnd _n2)))
()
(zsndeqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zfstb0 ((n nat ())) ()
  (eq (zfst (b0 n)) n)
((x1 nat) (x2 nat))
(ax_mp ((eq (app (lam x2 x2) n) n) (eq (zfst (b0 n)) n))
  (ax_mp ((eq (zfst (b0 n)) (app (lam x2 x2) n)) (im (eq (app (lam x2 x2) n) n) (eq (zfst (b0 n)) n)))
    (eqtr ((zfst (b0 n)) (app (lam x2 x2) n) n))
    (:conv (eq (zfst (b0 n)) (app (lam x2 x2) n))
      (eq
        (:unfold zfst ((b0 n)) (x1 x2)
          (app (case (lam x2 x2) (lam x1 (d0))) (b0 n)))
        (app (lam x2 x2) n))
      (casel ((lam x2 x2) (lam x1 (d0)) n))))
  (applame (n n x2 x2)
    (id ((eq x2 n))))))

(local theorem zfstb1 ((n nat ())) ()
  (eq (zfst (b1 n)) (d0))
((x1 nat) (x2 nat))
(ax_mp ((eq (app (lam x2 (d0)) n) (d0)) (eq (zfst (b1 n)) (d0)))
  (ax_mp ((eq (zfst (b1 n)) (app (lam x2 (d0)) n)) (im (eq (app (lam x2 (d0)) n) (d0)) (eq (zfst (b1 n)) (d0))))
    (eqtr ((zfst (b1 n)) (app (lam x2 (d0)) n) (d0)))
    (:conv (eq (zfst (b1 n)) (app (lam x2 (d0)) n))
      (eq
        (:unfold zfst ((b1 n)) (x2 x1)
          (app (case (lam x1 x1) (lam x2 (d0))) (b1 n)))
        (app (lam x2 (d0)) n))
      (caser ((lam x1 x1) (lam x2 (d0)) n))))
  (applame (n (d0) x2 (d0))
    (eqidd ((eq x2 n) (d0))))))

(local theorem zsndb0 ((n nat ())) ()
  (eq (zsnd (b0 n)) (d0))
((x1 nat) (x2 nat))
(ax_mp ((eq (app (lam x2 (d0)) n) (d0)) (eq (zsnd (b0 n)) (d0)))
  (ax_mp ((eq (zsnd (b0 n)) (app (lam x2 (d0)) n)) (im (eq (app (lam x2 (d0)) n) (d0)) (eq (zsnd (b0 n)) (d0))))
    (eqtr ((zsnd (b0 n)) (app (lam x2 (d0)) n) (d0)))
    (:conv (eq (zsnd (b0 n)) (app (lam x2 (d0)) n))
      (eq
        (:unfold zsnd ((b0 n)) (x1 x2)
          (app (case (lam x2 (d0)) (lam x1 (suc x1))) (b0 n)))
        (app (lam x2 (d0)) n))
      (casel ((lam x2 (d0)) (lam x1 (suc x1)) n))))
  (applame (n (d0) x2 (d0))
    (eqidd ((eq x2 n) (d0))))))

(local theorem zsndb1 ((n nat ())) ()
  (eq (zsnd (b1 n)) (suc n))
((x1 nat) (x2 nat))
(ax_mp ((eq (app (lam x2 (suc x2)) n) (suc n)) (eq (zsnd (b1 n)) (suc n)))
  (ax_mp ((eq (zsnd (b1 n)) (app (lam x2 (suc x2)) n)) (im (eq (app (lam x2 (suc x2)) n) (suc n)) (eq (zsnd (b1 n)) (suc n))))
    (eqtr ((zsnd (b1 n)) (app (lam x2 (suc x2)) n) (suc n)))
    (:conv (eq (zsnd (b1 n)) (app (lam x2 (suc x2)) n))
      (eq
        (:unfold zsnd ((b1 n)) (x2 x1)
          (app (case (lam x1 (d0)) (lam x2 (suc x2))) (b1 n)))
        (app (lam x2 (suc x2)) n))
      (caser ((lam x1 (d0)) (lam x2 (suc x2)) n))))
  (applame (n (suc n) x2 (suc x2))
    (suceq (x2 n)))))

(local theorem zfst0 () ()
  (eq (zfst (d0)) (d0))
()
(ax_mp ((eq (zfst (b0 (d0))) (d0)) (eq (zfst (d0)) (d0)))
  (ax_mp ((eq (zfst (b0 (d0))) (zfst (d0))) (im (eq (zfst (b0 (d0))) (d0)) (eq (zfst (d0)) (d0))))
    (eqtr3 ((zfst (d0)) (zfst (b0 (d0))) (d0)))
    (ax_mp ((eq (b0 (d0)) (d0)) (eq (zfst (b0 (d0))) (zfst (d0))))
      (zfsteq ((b0 (d0)) (d0)))
      (b00 ())))
  (zfstb0 ((d0)))))

(local theorem zsnd0 () ()
  (eq (zsnd (d0)) (d0))
()
(ax_mp ((eq (zsnd (b0 (d0))) (d0)) (eq (zsnd (d0)) (d0)))
  (ax_mp ((eq (zsnd (b0 (d0))) (zsnd (d0))) (im (eq (zsnd (b0 (d0))) (d0)) (eq (zsnd (d0)) (d0))))
    (eqtr3 ((zsnd (d0)) (zsnd (b0 (d0))) (d0)))
    (ax_mp ((eq (b0 (d0)) (d0)) (eq (zsnd (b0 (d0))) (zsnd (d0))))
      (zsndeq ((b0 (d0)) (d0)))
      (b00 ())))
  (zsndb0 ((d0)))))

(local theorem zfstsnd ((n nat ())) ()
  (eq (znsub (zfst n) (zsnd n)) n)
()
(:let H1 (zsndb0 ((div n (d2))))
(:let H2 (zsndeq (n (b0 (div n (d2)))))
(:let H3 (syl6eq ((eq n (b0 (div n (d2)))) (zsnd n) (zsnd (b0 (div n (d2)))) (d0))
  H1
  H2)
(:let H4 (zfstb0 ((div n (d2))))
(:let H5 (zfsteq (n (b0 (div n (d2)))))
(:let H6 (syl6eq ((eq n (b0 (div n (d2)))) (zfst n) (zfst (b0 (div n (d2)))) (div n (d2)))
  H4
  H5)
(:let H7 (sub02 ((div n (d2))))
(:let H8 (zfstb1 ((div n (d2))))
(:let H9 (zfsteq (n (b1 (div n (d2)))))
(:let H10 (syl6eq ((eq n (b1 (div n (d2)))) (zfst n) (zfst (b1 (div n (d2)))) (d0))
  H8
  H9)
(:let H11 (zsndb1 ((div n (d2))))
(:let H12 (zsndeq (n (b1 (div n (d2)))))
(:let H13 (syl6eq ((eq n (b1 (div n (d2)))) (zsnd n) (zsnd (b1 (div n (d2)))) (suc (div n (d2))))
  H11
  H12)
(ax_mp ((or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (eq (znsub (zfst n) (zsnd n)) n))
  (ax_mp ((im (eq n (b1 (div n (d2)))) (eq (znsub (zfst n) (zsnd n)) n)) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (eq (znsub (zfst n) (zsnd n)) n)))
    (ax_mp ((im (eq n (b0 (div n (d2)))) (eq (znsub (zfst n) (zsnd n)) n)) (im (im (eq n (b1 (div n (d2)))) (eq (znsub (zfst n) (zsnd n)) n)) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (eq (znsub (zfst n) (zsnd n)) n))))
      (eor ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))) (eq (znsub (zfst n) (zsnd n)) n)))
      (eqtrd ((eq n (b0 (div n (d2)))) (znsub (zfst n) (zsnd n)) (b0 (sub (zfst n) (zsnd n))) n)
        (syl ((eq n (b0 (div n (d2)))) (le (zsnd n) (zfst n)) (eq (znsub (zfst n) (zsnd n)) (b0 (sub (zfst n) (zsnd n)))))
          (znsubpos ((zfst n) (zsnd n)))
          (mpbiri ((eq n (b0 (div n (d2)))) (le (d0) (div n (d2))) (le (zsnd n) (zfst n)))
            (le01 ((div n (d2))))
            (leeqd ((eq n (b0 (div n (d2)))) (zsnd n) (d0) (zfst n) (div n (d2)))
              H3
              H6)))
        (eqtr4d ((eq n (b0 (div n (d2)))) (b0 (sub (zfst n) (zsnd n))) (b0 (div n (d2))) n)
          (b0eqd ((eq n (b0 (div n (d2)))) (sub (zfst n) (zsnd n)) (div n (d2)))
            (syl6eq ((eq n (b0 (div n (d2)))) (sub (zfst n) (zsnd n)) (sub (div n (d2)) (d0)) (div n (d2)))
              H7
              (subeqd ((eq n (b0 (div n (d2)))) (zfst n) (div n (d2)) (zsnd n) (d0))
                H6
                H3)))
          (id ((eq n (b0 (div n (d2)))))))))
    (eqtrd ((eq n (b1 (div n (d2)))) (znsub (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) n)
      (syl ((eq n (b1 (div n (d2)))) (lt (zfst n) (zsnd n)) (eq (znsub (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n))))))
        (znsubneg ((zfst n) (zsnd n)))
        (mpbiri ((eq n (b1 (div n (d2)))) (lt (d0) (suc (div n (d2)))) (lt (zfst n) (zsnd n)))
          (lt01S ((div n (d2))))
          (lteqd ((eq n (b1 (div n (d2)))) (zfst n) (d0) (zsnd n) (suc (div n (d2))))
            H10
            H13)))
      (eqtr4d ((eq n (b1 (div n (d2)))) (b1 (sub (zsnd n) (suc (zfst n)))) (b1 (div n (d2))) n)
        (b1eqd ((eq n (b1 (div n (d2)))) (sub (zsnd n) (suc (zfst n))) (div n (d2)))
          (syl6eq ((eq n (b1 (div n (d2)))) (sub (zsnd n) (suc (zfst n))) (sub (suc (div n (d2))) (suc (d0))) (div n (d2)))
            (ax_mp ((eq (sub (div n (d2)) (d0)) (div n (d2))) (eq (sub (suc (div n (d2))) (suc (d0))) (div n (d2))))
              (ax_mp ((eq (sub (suc (div n (d2))) (suc (d0))) (sub (div n (d2)) (d0))) (im (eq (sub (div n (d2)) (d0)) (div n (d2))) (eq (sub (suc (div n (d2))) (suc (d0))) (div n (d2)))))
                (eqtr ((sub (suc (div n (d2))) (suc (d0))) (sub (div n (d2)) (d0)) (div n (d2))))
                (subSS ((div n (d2)) (d0))))
              H7)
            (subeqd ((eq n (b1 (div n (d2)))) (zsnd n) (suc (div n (d2))) (suc (zfst n)) (suc (d0)))
              H13
              (suceqd ((eq n (b1 (div n (d2)))) (zfst n) (d0))
                H10))))
        (id ((eq n (b1 (div n (d2)))))))))
  (b0orb1 (n)))))))))))))))))

(local theorem zfstsndeq0 ((n nat ())) ()
  (iff (an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq n (d0)))
()
(ibii ((an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq n (d0)))
  (syl5eqr ((an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) n (znsub (zfst n) (zsnd n)) (d0))
    (zfstsnd (n))
    (syl6eq ((an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (znsub (zfst n) (zsnd n)) (znsub (d0) (d0)) (d0))
      (znsubid ((d0)))
      (znsubeqd ((an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (zfst n) (d0) (zsnd n) (d0))
        (anl ((eq (zfst n) (d0)) (eq (zsnd n) (d0))))
        (anr ((eq (zfst n) (d0)) (eq (zsnd n) (d0)))))))
  (iand ((eq n (d0)) (eq (zfst n) (d0)) (eq (zsnd n) (d0)))
    (syl6eq ((eq n (d0)) (zfst n) (zfst (d0)) (d0))
      (zfst0 ())
      (zfsteq (n (d0))))
    (syl6eq ((eq n (d0)) (zsnd n) (zsnd (d0)) (d0))
      (zsnd0 ())
      (zsndeq (n (d0)))))))

(local theorem zfstznsub ((m nat ()) (n nat ())) ()
  (eq (zfst (znsub m n)) (sub m n))
()
(cases ((lt m n) (eq (zfst (znsub m n)) (sub m n)))
  (eqtr4d ((lt m n) (zfst (znsub m n)) (d0) (sub m n))
    (syl6eq ((lt m n) (zfst (znsub m n)) (zfst (b1 (sub n (suc m)))) (d0))
      (zfstb1 ((sub n (suc m))))
      (zfsteqd ((lt m n) (znsub m n) (b1 (sub n (suc m))))
        (znsubneg (m n))))
    (ltsubeq0 (m n)))
  (syl6eq ((not (lt m n)) (zfst (znsub m n)) (zfst (b0 (sub m n))) (sub m n))
    (zfstb0 ((sub m n)))
    (zfsteqd ((not (lt m n)) (znsub m n) (b0 (sub m n)))
      (:conv (im (not (lt m n)) (eq (znsub m n) (b0 (sub m n))))
        (im
          (not (lt m n))
          (eq
            (:unfold znsub (m n) ()
              (if (lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))
            (b0 (sub m n))))
        (ifneg ((lt m n) (b1 (sub n (suc m))) (b0 (sub m n)))))))))

(local theorem zfstsnd0 ((n nat ())) ()
  (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))
()
(ax_mp ((or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))))
  (ax_mp ((im (eq n (b1 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))))
    (ax_mp ((im (eq n (b0 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))) (im (im (eq n (b1 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))))))
      (eor ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))))
      (orrd ((eq n (b0 (div n (d2)))) (eq (zfst n) (d0)) (eq (zsnd n) (d0)))
        (syl6eq ((eq n (b0 (div n (d2)))) (zsnd n) (zsnd (b0 (div n (d2)))) (d0))
          (zsndb0 ((div n (d2))))
          (zsndeq (n (b0 (div n (d2))))))))
    (orld ((eq n (b1 (div n (d2)))) (eq (zfst n) (d0)) (eq (zsnd n) (d0)))
      (syl6eq ((eq n (b1 (div n (d2)))) (zfst n) (zfst (b1 (div n (d2)))) (d0))
        (zfstb1 ((div n (d2))))
        (zfsteq (n (b1 (div n (d2))))))))
  (b0orb1 (n))))

(local theorem zfstsubsnd ((n nat ())) ()
  (eq (sub (zfst n) (zsnd n)) (zfst n))
()
(ax_mp ((or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zfst n) (zsnd n)) (zfst n)))
  (ax_mp ((im (eq (zsnd n) (d0)) (eq (sub (zfst n) (zsnd n)) (zfst n))) (im (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zfst n) (zsnd n)) (zfst n))))
    (ax_mp ((im (eq (zfst n) (d0)) (eq (sub (zfst n) (zsnd n)) (zfst n))) (im (im (eq (zsnd n) (d0)) (eq (sub (zfst n) (zsnd n)) (zfst n))) (im (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zfst n) (zsnd n)) (zfst n)))))
      (eor ((eq (zfst n) (d0)) (eq (zsnd n) (d0)) (eq (sub (zfst n) (zsnd n)) (zfst n))))
      (eqtr4d ((eq (zfst n) (d0)) (sub (zfst n) (zsnd n)) (sub (d0) (zsnd n)) (zfst n))
        (subeq1 ((zfst n) (d0) (zsnd n)))
        (syl6eqr ((eq (zfst n) (d0)) (zfst n) (d0) (sub (d0) (zsnd n)))
          (sub01 ((zsnd n)))
          (id ((eq (zfst n) (d0)))))))
    (syl6eq ((eq (zsnd n) (d0)) (sub (zfst n) (zsnd n)) (sub (zfst n) (d0)) (zfst n))
      (sub02 ((zfst n)))
      (subeq2 ((zfst n) (zsnd n) (d0)))))
  (zfstsnd0 (n))))

(local theorem zneqb ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c)))
()
(:let H1 (ifpos ((lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
(:let H2 (:conv (im (lt a c) (eq (znsub a c) (b1 (sub c (suc a)))))
  (im
    (lt a c)
    (eq
      (:unfold znsub (a c) ()
        (if (lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
      (b1 (sub c (suc a)))))
  H1)
(:let H3 (ifpos ((lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
(:let H4 (:conv (im (lt b d) (eq (znsub b d) (b1 (sub d (suc b)))))
  (im
    (lt b d)
    (eq
      (:unfold znsub (b d) ()
        (if (lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
      (b1 (sub d (suc b)))))
  H3)
(:let H5 (ifneg ((lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
(:let H6 (:conv (im (not (lt b d)) (eq (znsub b d) (b0 (sub b d))))
  (im
    (not (lt b d))
    (eq
      (:unfold znsub (b d) ()
        (if (lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
      (b0 (sub b d))))
  H5)
(:let H7 (lenlt (d b))
(:let H8 (ifneg ((lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
(:let H9 (:conv (im (not (lt a c)) (eq (znsub a c) (b0 (sub a c))))
  (im
    (not (lt a c))
    (eq
      (:unfold znsub (a c) ()
        (if (lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
      (b0 (sub a c))))
  H8)
(:let H10 (lenlt (c a))
(cases ((lt a c) (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c))))
  (casesda ((lt a c) (lt b d) (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c))))
    (bitrd ((an (lt a c) (lt b d)) (eq (znsub a c) (znsub b d)) (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add a d) (add b c)))
      (eqeqd ((an (lt a c) (lt b d)) (znsub a c) (b1 (sub c (suc a))) (znsub b d) (b1 (sub d (suc b))))
        (anwl ((lt a c) (lt b d) (eq (znsub a c) (b1 (sub c (suc a)))))
          H2)
        (anwr ((lt a c) (lt b d) (eq (znsub b d) (b1 (sub d (suc b)))))
          H4))
      (syl5bb ((an (lt a c) (lt b d)) (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (add a d) (add b c)))
        (ax_mp ((iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a))))))
          (ax_mp ((iff (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (sub c (suc a)) (sub d (suc b)))) (im (iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))))))
            (bitr4 ((eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (sub c (suc a)) (sub d (suc b))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a))))))
            (b1can ((sub c (suc a)) (sub d (suc b)))))
          (ax_mp ((iff (eq (sub d (suc b)) (sub c (suc a))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b)))))
            (ax_mp ((iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub d (suc b)) (sub c (suc a)))) (im (iff (eq (sub d (suc b)) (sub c (suc a))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b))))))
              (bitr ((eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub d (suc b)) (sub c (suc a))) (eq (sub c (suc a)) (sub d (suc b)))))
              (addcan2 ((suc (add a b)) (sub d (suc b)) (sub c (suc a)))))
            (eqcomb ((sub d (suc b)) (sub c (suc a))))))
        (eqeqd ((an (lt a c) (lt b d)) (add (suc (add a b)) (sub d (suc b))) (add a d) (add (suc (add a b)) (sub c (suc a))) (add b c))
          (syl5eq ((an (lt a c) (lt b d)) (add (suc (add a b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b)))) (add a d))
            (ax_mp ((eq (add (add a (suc b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))) (eq (add (suc (add a b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))))
              (ax_mp ((eq (add (add a (suc b)) (sub d (suc b))) (add (suc (add a b)) (sub d (suc b)))) (im (eq (add (add a (suc b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))) (eq (add (suc (add a b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b)))))))
                (eqtr3 ((add (suc (add a b)) (sub d (suc b))) (add (add a (suc b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))))
                (ax_mp ((eq (add a (suc b)) (suc (add a b))) (eq (add (add a (suc b)) (sub d (suc b))) (add (suc (add a b)) (sub d (suc b)))))
                  (addeq1 ((add a (suc b)) (suc (add a b)) (sub d (suc b))))
                  (addS2 (a b))))
              (addass (a (suc b) (sub d (suc b)))))
            (addeq2d ((an (lt a c) (lt b d)) a (add (suc b) (sub d (suc b))) d)
              (anwr ((lt a c) (lt b d) (eq (add (suc b) (sub d (suc b))) d))
                (:conv (im (lt b d) (eq (add (suc b) (sub d (suc b))) d))
                  (im
                    (:unfold lt (b d) ()
                      (le (suc b) d))
                    (eq (add (suc b) (sub d (suc b))) d))
                  (pncan3 ((suc b) d))))))
          (syl5eq ((an (lt a c) (lt b d)) (add (suc (add a b)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a)))) (add b c))
            (ax_mp ((eq (add (add b (suc a)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))) (eq (add (suc (add a b)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))))
              (ax_mp ((eq (add (add b (suc a)) (sub c (suc a))) (add (suc (add a b)) (sub c (suc a)))) (im (eq (add (add b (suc a)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))) (eq (add (suc (add a b)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a)))))))
                (eqtr3 ((add (suc (add a b)) (sub c (suc a))) (add (add b (suc a)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))))
                (ax_mp ((eq (add b (suc a)) (suc (add a b))) (eq (add (add b (suc a)) (sub c (suc a))) (add (suc (add a b)) (sub c (suc a)))))
                  (addeq1 ((add b (suc a)) (suc (add a b)) (sub c (suc a))))
                  (ax_mp ((eq (add (suc a) b) (suc (add a b))) (eq (add b (suc a)) (suc (add a b))))
                    (ax_mp ((eq (add b (suc a)) (add (suc a) b)) (im (eq (add (suc a) b) (suc (add a b))) (eq (add b (suc a)) (suc (add a b)))))
                      (eqtr ((add b (suc a)) (add (suc a) b) (suc (add a b))))
                      (addcom (b (suc a))))
                    (addS1 (a b)))))
              (addass (b (suc a) (sub c (suc a)))))
            (addeq2d ((an (lt a c) (lt b d)) b (add (suc a) (sub c (suc a))) c)
              (anwl ((lt a c) (lt b d) (eq (add (suc a) (sub c (suc a))) c))
                (:conv (im (lt a c) (eq (add (suc a) (sub c (suc a))) c))
                  (im
                    (:unfold lt (a c) ()
                      (le (suc a) c))
                    (eq (add (suc a) (sub c (suc a))) c))
                  (pncan3 ((suc a) c)))))))))
    (bitrd ((an (lt a c) (not (lt b d))) (eq (znsub a c) (znsub b d)) (eq (b1 (sub c (suc a))) (b0 (sub b d))) (eq (add a d) (add b c)))
      (eqeqd ((an (lt a c) (not (lt b d))) (znsub a c) (b1 (sub c (suc a))) (znsub b d) (b0 (sub b d)))
        (anwl ((lt a c) (not (lt b d)) (eq (znsub a c) (b1 (sub c (suc a)))))
          H2)
        (anwr ((lt a c) (not (lt b d)) (eq (znsub b d) (b0 (sub b d))))
          H6))
      (binthd ((an (lt a c) (not (lt b d))) (eq (b1 (sub c (suc a))) (b0 (sub b d))) (eq (add a d) (add b c)))
        (a1i ((an (lt a c) (not (lt b d))) (not (eq (b1 (sub c (suc a))) (b0 (sub b d)))))
          (:conv (not (eq (b1 (sub c (suc a))) (b0 (sub b d))))
            (:sym (:unfold ne ((b1 (sub c (suc a))) (b0 (sub b d))) ()
              (not (eq (b1 (sub c (suc a))) (b0 (sub b d))))))
            (b1neb0 ((sub c (suc a)) (sub b d)))))
        (syl ((an (lt a c) (not (lt b d))) (lt (add a d) (add b c)) (not (eq (add a d) (add b c))))
          (:conv (im (lt (add a d) (add b c)) (not (eq (add a d) (add b c))))
            (im
              (lt (add a d) (add b c))
              (:sym (:unfold ne ((add a d) (add b c)) ()
                (not (eq (add a d) (add b c))))))
            (ltne ((add a d) (add b c))))
          (ltletrd ((an (lt a c) (not (lt b d))) (add a d) (add c d) (add b c))
            (sylib ((an (lt a c) (not (lt b d))) (lt a c) (lt (add a d) (add c d)))
              (ltadd1 (a c d))
              (anl ((lt a c) (not (lt b d)))))
            (sylib ((an (lt a c) (not (lt b d))) (le (add c d) (add c b)) (le (add c d) (add b c)))
              (ax_mp ((eq (add c b) (add b c)) (iff (le (add c d) (add c b)) (le (add c d) (add b c))))
                (leeq2 ((add c d) (add c b) (add b c)))
                (addcom (c b)))
              (sylib ((an (lt a c) (not (lt b d))) (le d b) (le (add c d) (add c b)))
                (leadd2 (c d b))
                (sylibr ((an (lt a c) (not (lt b d))) (not (lt b d)) (le d b))
                  H7
                  (anr ((lt a c) (not (lt b d))))))))))))
  (casesda ((not (lt a c)) (lt b d) (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c))))
    (bitrd ((an (not (lt a c)) (lt b d)) (eq (znsub a c) (znsub b d)) (eq (b0 (sub a c)) (b1 (sub d (suc b)))) (eq (add a d) (add b c)))
      (eqeqd ((an (not (lt a c)) (lt b d)) (znsub a c) (b0 (sub a c)) (znsub b d) (b1 (sub d (suc b))))
        (anwl ((not (lt a c)) (lt b d) (eq (znsub a c) (b0 (sub a c))))
          H9)
        (anwr ((not (lt a c)) (lt b d) (eq (znsub b d) (b1 (sub d (suc b)))))
          H4))
      (binthd ((an (not (lt a c)) (lt b d)) (eq (b0 (sub a c)) (b1 (sub d (suc b)))) (eq (add a d) (add b c)))
        (a1i ((an (not (lt a c)) (lt b d)) (not (eq (b0 (sub a c)) (b1 (sub d (suc b))))))
          (:conv (not (eq (b0 (sub a c)) (b1 (sub d (suc b)))))
            (:sym (:unfold ne ((b0 (sub a c)) (b1 (sub d (suc b)))) ()
              (not (eq (b0 (sub a c)) (b1 (sub d (suc b)))))))
            (b0neb1 ((sub a c) (sub d (suc b))))))
        (syl ((an (not (lt a c)) (lt b d)) (lt (add b c) (add a d)) (not (eq (add a d) (add b c))))
          (:conv (im (lt (add b c) (add a d)) (not (eq (add a d) (add b c))))
            (im
              (lt (add b c) (add a d))
              (:sym (:unfold ne ((add a d) (add b c)) ()
                (not (eq (add a d) (add b c))))))
            (ltner ((add b c) (add a d))))
          (lelttrd ((an (not (lt a c)) (lt b d)) (add b c) (add b a) (add a d))
            (sylib ((an (not (lt a c)) (lt b d)) (le c a) (le (add b c) (add b a)))
              (leadd2 (b c a))
              (sylibr ((an (not (lt a c)) (lt b d)) (not (lt a c)) (le c a))
                H10
                (anl ((not (lt a c)) (lt b d)))))
            (sylib ((an (not (lt a c)) (lt b d)) (lt b d) (lt (add b a) (add a d)))
              (ax_mp ((iff (lt (add a b) (add a d)) (lt (add b a) (add a d))) (iff (lt b d) (lt (add b a) (add a d))))
                (ax_mp ((iff (lt b d) (lt (add a b) (add a d))) (im (iff (lt (add a b) (add a d)) (lt (add b a) (add a d))) (iff (lt b d) (lt (add b a) (add a d)))))
                  (bitr ((lt b d) (lt (add a b) (add a d)) (lt (add b a) (add a d))))
                  (ltadd2 (a b d)))
                (ax_mp ((eq (add a b) (add b a)) (iff (lt (add a b) (add a d)) (lt (add b a) (add a d))))
                  (lteq1 ((add a b) (add b a) (add a d)))
                  (addcom (a b))))
              (anr ((not (lt a c)) (lt b d))))))))
    (bitrd ((an (not (lt a c)) (not (lt b d))) (eq (znsub a c) (znsub b d)) (eq (b0 (sub a c)) (b0 (sub b d))) (eq (add a d) (add b c)))
      (eqeqd ((an (not (lt a c)) (not (lt b d))) (znsub a c) (b0 (sub a c)) (znsub b d) (b0 (sub b d)))
        (anwl ((not (lt a c)) (not (lt b d)) (eq (znsub a c) (b0 (sub a c))))
          H9)
        (anwr ((not (lt a c)) (not (lt b d)) (eq (znsub b d) (b0 (sub b d))))
          H6))
      (syl5bb ((an (not (lt a c)) (not (lt b d))) (eq (b0 (sub a c)) (b0 (sub b d))) (eq (sub a c) (sub b d)) (eq (add a d) (add b c)))
        (b0can ((sub a c) (sub b d)))
        (syl5bbr ((an (not (lt a c)) (not (lt b d))) (eq (sub a c) (sub b d)) (eq (add (sub a c) (add c d)) (add (sub b d) (add c d))) (eq (add a d) (add b c)))
          (addcan1 ((sub a c) (sub b d) (add c d)))
          (eqeqd ((an (not (lt a c)) (not (lt b d))) (add (sub a c) (add c d)) (add a d) (add (sub b d) (add c d)) (add b c))
            (syl5eqr ((an (not (lt a c)) (not (lt b d))) (add (sub a c) (add c d)) (add (add (sub a c) c) d) (add a d))
              (addass ((sub a c) c d))
              (addeq1d ((an (not (lt a c)) (not (lt b d))) (add (sub a c) c) a d)
                (syl ((an (not (lt a c)) (not (lt b d))) (le c a) (eq (add (sub a c) c) a))
                  (npcan (a c))
                  (sylibr ((an (not (lt a c)) (not (lt b d))) (not (lt a c)) (le c a))
                    H10
                    (anl ((not (lt a c)) (not (lt b d))))))))
            (syl5eqr ((an (not (lt a c)) (not (lt b d))) (add (sub b d) (add c d)) (add (add (sub b d) c) d) (add b c))
              (addass ((sub b d) c d))
              (syl5eq ((an (not (lt a c)) (not (lt b d))) (add (add (sub b d) c) d) (add (add (sub b d) d) c) (add b c))
                (addrass ((sub b d) c d))
                (addeq1d ((an (not (lt a c)) (not (lt b d))) (add (sub b d) d) b c)
                  (syl ((an (not (lt a c)) (not (lt b d))) (le d b) (eq (add (sub b d) d) b))
                    (npcan (b d))
                    (sylibr ((an (not (lt a c)) (not (lt b d))) (not (lt b d)) (le d b))
                      H7
                      (anr ((not (lt a c)) (not (lt b d))))))))))))))))))))))))))

(local theorem znpnpcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (znsub (add a c) (add b c)) (znsub a b))
()
(mpbir ((eq (add (add a c) b) (add a (add b c))) (eq (znsub (add a c) (add b c)) (znsub a b)))
  (zneqb ((add a c) a (add b c) b))
  (ax_mp ((eq (add (add a b) c) (add a (add b c))) (eq (add (add a c) b) (add a (add b c))))
    (ax_mp ((eq (add (add a c) b) (add (add a b) c)) (im (eq (add (add a b) c) (add a (add b c))) (eq (add (add a c) b) (add a (add b c)))))
      (eqtr ((add (add a c) b) (add (add a b) c) (add a (add b c))))
      (addrass (a c b)))
    (addass (a b c)))))

(local theorem znpnpcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (znsub (add a b) (add a c)) (znsub b c))
()
(mpbir ((eq (add (add a b) c) (add b (add a c))) (eq (znsub (add a b) (add a c)) (znsub b c)))
  (zneqb ((add a b) b (add a c) c))
  (ax_mp ((eq (add a (add b c)) (add b (add a c))) (eq (add (add a b) c) (add b (add a c))))
    (ax_mp ((eq (add (add a b) c) (add a (add b c))) (im (eq (add a (add b c)) (add b (add a c))) (eq (add (add a b) c) (add b (add a c)))))
      (eqtr ((add (add a b) c) (add a (add b c)) (add b (add a c))))
      (addass (a b c)))
    (addlass (a b c)))))

(local def zneg ((n nat ())) (nat ())
()
(znsub (zsnd n) (zfst n)))

(local theorem znegeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zneg _n1) (zneg _n2)))
()
(:conv (im _G (eq (zneg _n1) (zneg _n2)))
  (im
    _G
    (eq
      (:unfold zneg (_n1) ()
        (znsub (zsnd _n1) (zfst _n1)))
      (:unfold zneg (_n2) ()
        (znsub (zsnd _n2) (zfst _n2)))))
  (znsubeqd (_G (zsnd _n1) (zsnd _n2) (zfst _n1) (zfst _n2))
    (zsndeqd (_G _n1 _n2)
      _nh)
    (zfsteqd (_G _n1 _n2)
      _nh))))

(local theorem znegeq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zneg _n1) (zneg _n2)))
()
(znegeqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem znegzn ((a nat ()) (b nat ())) ()
  (eq (zneg (znsub a b)) (znsub b a))
()
(mpbir ((eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))) (eq (zneg (znsub a b)) (znsub b a)))
  (:conv (iff (eq (zneg (znsub a b)) (znsub b a)) (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))))
    (iff
      (eq
        (:unfold zneg ((znsub a b)) ()
          (znsub (zsnd (znsub a b)) (zfst (znsub a b))))
        (znsub b a))
      (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))))
    (zneqb ((zsnd (znsub a b)) b (zfst (znsub a b)) a)))
  (ax_mp ((eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))) (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))))
    (ax_mp ((eq (add (zsnd (znsub a b)) a) (add a (zsnd (znsub a b)))) (im (eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))) (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b))))))
      (eqtr ((add (zsnd (znsub a b)) a) (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))))
      (addcom ((zsnd (znsub a b)) a)))
    (ax_mp ((eq (add (zfst (znsub a b)) b) (add b (zfst (znsub a b)))) (eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))))
      (ax_mp ((eq (add (zfst (znsub a b)) b) (add a (zsnd (znsub a b)))) (im (eq (add (zfst (znsub a b)) b) (add b (zfst (znsub a b)))) (eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b))))))
        (eqtr3 ((add a (zsnd (znsub a b))) (add (zfst (znsub a b)) b) (add b (zfst (znsub a b)))))
        (mpbi ((eq (znsub (zfst (znsub a b)) (zsnd (znsub a b))) (znsub a b)) (eq (add (zfst (znsub a b)) b) (add a (zsnd (znsub a b)))))
          (zneqb ((zfst (znsub a b)) a (zsnd (znsub a b)) b))
          (zfstsnd ((znsub a b)))))
      (addcom ((zfst (znsub a b)) b))))))

(local theorem znegneg ((n nat ())) ()
  (eq (zneg (zneg n)) n)
()
(ax_mp ((eq (znsub (zfst n) (zsnd n)) n) (eq (zneg (zneg n)) n))
  (ax_mp ((eq (zneg (zneg n)) (znsub (zfst n) (zsnd n))) (im (eq (znsub (zfst n) (zsnd n)) n) (eq (zneg (zneg n)) n)))
    (eqtr ((zneg (zneg n)) (znsub (zfst n) (zsnd n)) n))
    (:conv (eq (zneg (zneg n)) (znsub (zfst n) (zsnd n)))
      (eq
        (zneg
          (:unfold zneg (n) ()
            (znsub (zsnd n) (zfst n))))
        (znsub (zfst n) (zsnd n)))
      (znegzn ((zsnd n) (zfst n)))))
  (zfstsnd (n))))

(local theorem zfstneg ((n nat ())) ()
  (eq (zfst (zneg n)) (zsnd n))
()
(ax_mp ((eq (zfst (zneg n)) (zsnd n)) (eq (zfst (zneg n)) (zsnd n)))
  (ax_mp ((eq (zfst (zneg n)) (zfst (zneg n))) (im (eq (zfst (zneg n)) (zsnd n)) (eq (zfst (zneg n)) (zsnd n))))
    (eqtr ((zfst (zneg n)) (zfst (zneg n)) (zsnd n)))
    (ax_mp ((eq (zneg n) (zneg n)) (eq (zfst (zneg n)) (zfst (zneg n))))
      (zfsteq ((zneg n) (zneg n)))
      (ax_mp ((eq (zneg (znsub (zfst n) (zsnd n))) (zneg n)) (eq (zneg n) (zneg n)))
        (ax_mp ((eq (zneg (znsub (zfst n) (zsnd n))) (zneg n)) (im (eq (zneg (znsub (zfst n) (zsnd n))) (zneg n)) (eq (zneg n) (zneg n))))
          (eqtr3 ((zneg n) (zneg (znsub (zfst n) (zsnd n))) (zneg n)))
          (:conv (eq (zneg (znsub (zfst n) (zsnd n))) (zneg n))
            (eq
              (zneg (znsub (zfst n) (zsnd n)))
              (:unfold zneg (n) ()
                (znsub (zsnd n) (zfst n))))
            (znegzn ((zfst n) (zsnd n)))))
        (ax_mp ((eq (znsub (zfst n) (zsnd n)) n) (eq (zneg (znsub (zfst n) (zsnd n))) (zneg n)))
          (znegeq ((znsub (zfst n) (zsnd n)) n))
          (zfstsnd (n))))))
  (ax_mp ((eq (sub (zsnd n) (zfst n)) (zsnd n)) (eq (zfst (zneg n)) (zsnd n)))
    (ax_mp ((eq (zfst (zneg n)) (sub (zsnd n) (zfst n))) (im (eq (sub (zsnd n) (zfst n)) (zsnd n)) (eq (zfst (zneg n)) (zsnd n))))
      (eqtr ((zfst (zneg n)) (sub (zsnd n) (zfst n)) (zsnd n)))
      (:conv (eq (zfst (zneg n)) (sub (zsnd n) (zfst n)))
        (eq
          (zfst
            (:unfold zneg (n) ()
              (znsub (zsnd n) (zfst n))))
          (sub (zsnd n) (zfst n)))
        (zfstznsub ((zsnd n) (zfst n)))))
    (ax_mp ((or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zsnd n) (zfst n)) (zsnd n)))
      (ax_mp ((im (eq (zsnd n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))) (im (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zsnd n) (zfst n)) (zsnd n))))
        (ax_mp ((im (eq (zfst n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))) (im (im (eq (zsnd n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))) (im (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zsnd n) (zfst n)) (zsnd n)))))
          (eor ((eq (zfst n) (d0)) (eq (zsnd n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))))
          (syl6eq ((eq (zfst n) (d0)) (sub (zsnd n) (zfst n)) (sub (zsnd n) (d0)) (zsnd n))
            (sub02 ((zsnd n)))
            (subeq2 ((zsnd n) (zfst n) (d0)))))
        (eqtr4d ((eq (zsnd n) (d0)) (sub (zsnd n) (zfst n)) (sub (d0) (zfst n)) (zsnd n))
          (subeq1 ((zsnd n) (d0) (zfst n)))
          (syl6eqr ((eq (zsnd n) (d0)) (zsnd n) (d0) (sub (d0) (zfst n)))
            (sub01 ((zfst n)))
            (id ((eq (zsnd n) (d0)))))))
      (zfstsnd0 (n))))))

(local theorem zsndneg ((n nat ())) ()
  (eq (zsnd (zneg n)) (zfst n))
()
(ax_mp ((eq (zfst (zneg (zneg n))) (zfst n)) (eq (zsnd (zneg n)) (zfst n)))
  (ax_mp ((eq (zfst (zneg (zneg n))) (zsnd (zneg n))) (im (eq (zfst (zneg (zneg n))) (zfst n)) (eq (zsnd (zneg n)) (zfst n))))
    (eqtr3 ((zsnd (zneg n)) (zfst (zneg (zneg n))) (zfst n)))
    (zfstneg ((zneg n))))
  (ax_mp ((eq (zneg (zneg n)) n) (eq (zfst (zneg (zneg n))) (zfst n)))
    (zfsteq ((zneg (zneg n)) n))
    (znegneg (n)))))

(local theorem zneg0 () ()
  (eq (zneg (d0)) (d0))
()
(:let H1 (znsubid ((d0)))
(ax_mp ((eq (zneg (znsub (d0) (d0))) (d0)) (eq (zneg (d0)) (d0)))
  (ax_mp ((eq (zneg (znsub (d0) (d0))) (zneg (d0))) (im (eq (zneg (znsub (d0) (d0))) (d0)) (eq (zneg (d0)) (d0))))
    (eqtr3 ((zneg (d0)) (zneg (znsub (d0) (d0))) (d0)))
    (ax_mp ((eq (znsub (d0) (d0)) (d0)) (eq (zneg (znsub (d0) (d0))) (zneg (d0))))
      (znegeq ((znsub (d0) (d0)) (d0)))
      H1))
  (ax_mp ((eq (znsub (d0) (d0)) (d0)) (eq (zneg (znsub (d0) (d0))) (d0)))
    (ax_mp ((eq (zneg (znsub (d0) (d0))) (znsub (d0) (d0))) (im (eq (znsub (d0) (d0)) (d0)) (eq (zneg (znsub (d0) (d0))) (d0))))
      (eqtr ((zneg (znsub (d0) (d0))) (znsub (d0) (d0)) (d0)))
      (znegzn ((d0) (d0))))
    H1))))

(local theorem zsndznsub ((m nat ()) (n nat ())) ()
  (eq (zsnd (znsub m n)) (sub n m))
()
(ax_mp ((eq (zfst (zneg (znsub m n))) (sub n m)) (eq (zsnd (znsub m n)) (sub n m)))
  (ax_mp ((eq (zfst (zneg (znsub m n))) (zsnd (znsub m n))) (im (eq (zfst (zneg (znsub m n))) (sub n m)) (eq (zsnd (znsub m n)) (sub n m))))
    (eqtr3 ((zsnd (znsub m n)) (zfst (zneg (znsub m n))) (sub n m)))
    (zfstneg ((znsub m n))))
  (ax_mp ((eq (zfst (znsub n m)) (sub n m)) (eq (zfst (zneg (znsub m n))) (sub n m)))
    (ax_mp ((eq (zfst (zneg (znsub m n))) (zfst (znsub n m))) (im (eq (zfst (znsub n m)) (sub n m)) (eq (zfst (zneg (znsub m n))) (sub n m))))
      (eqtr ((zfst (zneg (znsub m n))) (zfst (znsub n m)) (sub n m)))
      (ax_mp ((eq (zneg (znsub m n)) (znsub n m)) (eq (zfst (zneg (znsub m n))) (zfst (znsub n m))))
        (zfsteq ((zneg (znsub m n)) (znsub n m)))
        (znegzn (m n))))
    (zfstznsub (n m)))))

(local theorem znegb1 ((n nat ())) ()
  (eq (zneg (b1 n)) (b0 (suc n)))
()
(:let H1 (zfstb1 (n))
(ax_mp ((eq (b0 (sub (zsnd (b1 n)) (zfst (b1 n)))) (b0 (suc n))) (eq (zneg (b1 n)) (b0 (suc n))))
  (ax_mp ((eq (zneg (b1 n)) (b0 (sub (zsnd (b1 n)) (zfst (b1 n))))) (im (eq (b0 (sub (zsnd (b1 n)) (zfst (b1 n)))) (b0 (suc n))) (eq (zneg (b1 n)) (b0 (suc n)))))
    (eqtr ((zneg (b1 n)) (b0 (sub (zsnd (b1 n)) (zfst (b1 n)))) (b0 (suc n))))
    (ax_mp ((le (zfst (b1 n)) (zsnd (b1 n))) (eq (zneg (b1 n)) (b0 (sub (zsnd (b1 n)) (zfst (b1 n))))))
      (:conv (im (le (zfst (b1 n)) (zsnd (b1 n))) (eq (zneg (b1 n)) (b0 (sub (zsnd (b1 n)) (zfst (b1 n))))))
        (im
          (le (zfst (b1 n)) (zsnd (b1 n)))
          (eq
            (:unfold zneg ((b1 n)) ()
              (znsub (zsnd (b1 n)) (zfst (b1 n))))
            (b0 (sub (zsnd (b1 n)) (zfst (b1 n))))))
        (znsubpos ((zsnd (b1 n)) (zfst (b1 n)))))
      (mpbir ((le (d0) (zsnd (b1 n))) (le (zfst (b1 n)) (zsnd (b1 n))))
        (ax_mp ((eq (zfst (b1 n)) (d0)) (iff (le (zfst (b1 n)) (zsnd (b1 n))) (le (d0) (zsnd (b1 n)))))
          (leeq1 ((zfst (b1 n)) (d0) (zsnd (b1 n))))
          H1)
        (le01 ((zsnd (b1 n)))))))
  (ax_mp ((eq (sub (zsnd (b1 n)) (zfst (b1 n))) (suc n)) (eq (b0 (sub (zsnd (b1 n)) (zfst (b1 n)))) (b0 (suc n))))
    (b0eq ((sub (zsnd (b1 n)) (zfst (b1 n))) (suc n)))
    (ax_mp ((eq (sub (suc n) (d0)) (suc n)) (eq (sub (zsnd (b1 n)) (zfst (b1 n))) (suc n)))
      (ax_mp ((eq (sub (zsnd (b1 n)) (zfst (b1 n))) (sub (suc n) (d0))) (im (eq (sub (suc n) (d0)) (suc n)) (eq (sub (zsnd (b1 n)) (zfst (b1 n))) (suc n))))
        (eqtr ((sub (zsnd (b1 n)) (zfst (b1 n))) (sub (suc n) (d0)) (suc n)))
        (ax_mp ((eq (zfst (b1 n)) (d0)) (eq (sub (zsnd (b1 n)) (zfst (b1 n))) (sub (suc n) (d0))))
          (ax_mp ((eq (zsnd (b1 n)) (suc n)) (im (eq (zfst (b1 n)) (d0)) (eq (sub (zsnd (b1 n)) (zfst (b1 n))) (sub (suc n) (d0)))))
            (subeq ((zsnd (b1 n)) (suc n) (zfst (b1 n)) (d0)))
            (zsndb1 (n)))
          H1))
      (sub02 ((suc n))))))))

(local def zadd ((m nat ()) (n nat ())) (nat ())
()
(znsub (add (zfst m) (zfst n)) (add (zsnd m) (zsnd n))))

(local theorem zaddeqd ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_mh (im _G (eq _m1 _m2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zadd _m1 _n1) (zadd _m2 _n2)))
()
(:conv (im _G (eq (zadd _m1 _n1) (zadd _m2 _n2)))
  (im
    _G
    (eq
      (:unfold zadd (_m1 _n1) ()
        (znsub (add (zfst _m1) (zfst _n1)) (add (zsnd _m1) (zsnd _n1))))
      (:unfold zadd (_m2 _n2) ()
        (znsub (add (zfst _m2) (zfst _n2)) (add (zsnd _m2) (zsnd _n2))))))
  (znsubeqd (_G (add (zfst _m1) (zfst _n1)) (add (zfst _m2) (zfst _n2)) (add (zsnd _m1) (zsnd _n1)) (add (zsnd _m2) (zsnd _n2)))
    (addeqd (_G (zfst _m1) (zfst _m2) (zfst _n1) (zfst _n2))
      (zfsteqd (_G _m1 _m2)
        _mh)
      (zfsteqd (_G _n1 _n2)
        _nh))
    (addeqd (_G (zsnd _m1) (zsnd _m2) (zsnd _n1) (zsnd _n2))
      (zsndeqd (_G _m1 _m2)
        _mh)
      (zsndeqd (_G _n1 _n2)
        _nh)))))

(local theorem zaddeq ((_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _m1 _m2) (im (eq _n1 _n2) (eq (zadd _m1 _n1) (zadd _m2 _n2))))
()
(exp ((eq _m1 _m2) (eq _n1 _n2) (eq (zadd _m1 _n1) (zadd _m2 _n2)))
  (zaddeqd ((an (eq _m1 _m2) (eq _n1 _n2)) _m1 _m2 _n1 _n2)
    (anl ((eq _m1 _m2) (eq _n1 _n2)))
    (anr ((eq _m1 _m2) (eq _n1 _n2))))))

(local theorem zaddeq1d ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (n nat ()))
  ((_h (im _G (eq _m1 _m2))))
  (im _G (eq (zadd _m1 n) (zadd _m2 n)))
()
(zaddeqd (_G _m1 _m2 n n)
  _h
  (eqidd (_G n))))

(local theorem zaddeq1 ((_m1 nat ()) (_m2 nat ()) (n nat ())) ()
  (im (eq _m1 _m2) (eq (zadd _m1 n) (zadd _m2 n)))
()
(zaddeq1d ((eq _m1 _m2) _m1 _m2 n)
  (id ((eq _m1 _m2)))))

(local theorem zaddeq2d ((_G wff ()) (m nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (zadd m _n1) (zadd m _n2)))
()
(zaddeqd (_G m m _n1 _n2)
  (eqidd (_G m))
  _h))

(local theorem zaddeq2 ((m nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zadd m _n1) (zadd m _n2)))
()
(zaddeq2d ((eq _n1 _n2) m _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zaddzn ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (zadd (znsub a c) (znsub b d)) (znsub (add a b) (add c d)))
()
(mpbir ((eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (zadd (znsub a c) (znsub b d)) (znsub (add a b) (add c d))))
  (:conv (iff (eq (zadd (znsub a c) (znsub b d)) (znsub (add a b) (add c d))) (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
    (iff
      (eq
        (:unfold zadd ((znsub a c) (znsub b d)) ()
          (znsub (add (zfst (znsub a c)) (zfst (znsub b d))) (add (zsnd (znsub a c)) (zsnd (znsub b d)))))
        (znsub (add a b) (add c d)))
      (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
    (zneqb ((add (zfst (znsub a c)) (zfst (znsub b d))) (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))) (add c d))))
  (ax_mp ((eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
    (ax_mp ((eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d))) (im (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d)))))))
      (eqtr ((add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
      (add4 ((zfst (znsub a c)) (zfst (znsub b d)) c d)))
    (ax_mp ((eq (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
      (ax_mp ((eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d))))) (im (eq (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d)))))))
        (eqtr ((add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
        (ax_mp ((eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d))))))
          (ax_mp ((eq (add (zfst (znsub a c)) c) (add a (zsnd (znsub a c)))) (im (eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))))))
            (addeq ((add (zfst (znsub a c)) c) (add a (zsnd (znsub a c))) (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))))
            (mpbi ((eq (znsub (zfst (znsub a c)) (zsnd (znsub a c))) (znsub a c)) (eq (add (zfst (znsub a c)) c) (add a (zsnd (znsub a c)))))
              (zneqb ((zfst (znsub a c)) a (zsnd (znsub a c)) c))
              (zfstsnd ((znsub a c)))))
          (mpbi ((eq (znsub (zfst (znsub b d)) (zsnd (znsub b d))) (znsub b d)) (eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))))
            (zneqb ((zfst (znsub b d)) b (zsnd (znsub b d)) d))
            (zfstsnd ((znsub b d))))))
      (add4 (a (zsnd (znsub a c)) b (zsnd (znsub b d))))))))

(local theorem zaddb0 ((m nat ()) (n nat ())) ()
  (eq (zadd (b0 m) (b0 n)) (b0 (add m n)))
()
(ax_mp ((eq (znsub (add m n) (d0)) (b0 (add m n))) (eq (zadd (b0 m) (b0 n)) (b0 (add m n))))
  (ax_mp ((eq (zadd (b0 m) (b0 n)) (znsub (add m n) (d0))) (im (eq (znsub (add m n) (d0)) (b0 (add m n))) (eq (zadd (b0 m) (b0 n)) (b0 (add m n)))))
    (eqtr ((zadd (b0 m) (b0 n)) (znsub (add m n) (d0)) (b0 (add m n))))
    (ax_mp ((eq (add (zsnd (b0 m)) (zsnd (b0 n))) (d0)) (eq (zadd (b0 m) (b0 n)) (znsub (add m n) (d0))))
      (ax_mp ((eq (add (zfst (b0 m)) (zfst (b0 n))) (add m n)) (im (eq (add (zsnd (b0 m)) (zsnd (b0 n))) (d0)) (eq (zadd (b0 m) (b0 n)) (znsub (add m n) (d0)))))
        (:conv (im (eq (add (zfst (b0 m)) (zfst (b0 n))) (add m n)) (im (eq (add (zsnd (b0 m)) (zsnd (b0 n))) (d0)) (eq (zadd (b0 m) (b0 n)) (znsub (add m n) (d0)))))
          (im
            (eq (add (zfst (b0 m)) (zfst (b0 n))) (add m n))
            (im
              (eq (add (zsnd (b0 m)) (zsnd (b0 n))) (d0))
              (eq
                (:unfold zadd ((b0 m) (b0 n)) ()
                  (znsub (add (zfst (b0 m)) (zfst (b0 n))) (add (zsnd (b0 m)) (zsnd (b0 n)))))
                (znsub (add m n) (d0)))))
          (znsubeq ((add (zfst (b0 m)) (zfst (b0 n))) (add m n) (add (zsnd (b0 m)) (zsnd (b0 n))) (d0))))
        (ax_mp ((eq (zfst (b0 n)) n) (eq (add (zfst (b0 m)) (zfst (b0 n))) (add m n)))
          (ax_mp ((eq (zfst (b0 m)) m) (im (eq (zfst (b0 n)) n) (eq (add (zfst (b0 m)) (zfst (b0 n))) (add m n))))
            (addeq ((zfst (b0 m)) m (zfst (b0 n)) n))
            (zfstb0 (m)))
          (zfstb0 (n))))
      (ax_mp ((eq (add (d0) (d0)) (d0)) (eq (add (zsnd (b0 m)) (zsnd (b0 n))) (d0)))
        (ax_mp ((eq (add (zsnd (b0 m)) (zsnd (b0 n))) (add (d0) (d0))) (im (eq (add (d0) (d0)) (d0)) (eq (add (zsnd (b0 m)) (zsnd (b0 n))) (d0))))
          (eqtr ((add (zsnd (b0 m)) (zsnd (b0 n))) (add (d0) (d0)) (d0)))
          (ax_mp ((eq (zsnd (b0 n)) (d0)) (eq (add (zsnd (b0 m)) (zsnd (b0 n))) (add (d0) (d0))))
            (ax_mp ((eq (zsnd (b0 m)) (d0)) (im (eq (zsnd (b0 n)) (d0)) (eq (add (zsnd (b0 m)) (zsnd (b0 n))) (add (d0) (d0)))))
              (addeq ((zsnd (b0 m)) (d0) (zsnd (b0 n)) (d0)))
              (zsndb0 (m)))
            (zsndb0 (n))))
        (add0 ((d0))))))
  (znsub02 ((add m n)))))

(local theorem zaddcom ((a nat ()) (b nat ())) ()
  (eq (zadd a b) (zadd b a))
()
(ax_mp ((eq (add (zsnd a) (zsnd b)) (add (zsnd b) (zsnd a))) (eq (zadd a b) (zadd b a)))
  (ax_mp ((eq (add (zfst a) (zfst b)) (add (zfst b) (zfst a))) (im (eq (add (zsnd a) (zsnd b)) (add (zsnd b) (zsnd a))) (eq (zadd a b) (zadd b a))))
    (:conv (im (eq (add (zfst a) (zfst b)) (add (zfst b) (zfst a))) (im (eq (add (zsnd a) (zsnd b)) (add (zsnd b) (zsnd a))) (eq (zadd a b) (zadd b a))))
      (im
        (eq (add (zfst a) (zfst b)) (add (zfst b) (zfst a)))
        (im
          (eq (add (zsnd a) (zsnd b)) (add (zsnd b) (zsnd a)))
          (eq
            (:unfold zadd (a b) ()
              (znsub (add (zfst a) (zfst b)) (add (zsnd a) (zsnd b))))
            (:unfold zadd (b a) ()
              (znsub (add (zfst b) (zfst a)) (add (zsnd b) (zsnd a)))))))
      (znsubeq ((add (zfst a) (zfst b)) (add (zfst b) (zfst a)) (add (zsnd a) (zsnd b)) (add (zsnd b) (zsnd a)))))
    (addcom ((zfst a) (zfst b))))
  (addcom ((zsnd a) (zsnd b)))))

(local theorem zaddass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zadd (zadd a b) c) (zadd a (zadd b c)))
()
(ax_mp ((eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (zadd a (zadd b c))) (eq (zadd (zadd a b) c) (zadd a (zadd b c))))
  (ax_mp ((eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (zadd (zadd a b) c)) (im (eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (zadd a (zadd b c))) (eq (zadd (zadd a b) c) (zadd a (zadd b c)))))
    (eqtr3 ((zadd (zadd a b) c) (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (zadd a (zadd b c))))
    (ax_mp ((eq (znsub (zfst c) (zsnd c)) c) (eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (zadd (zadd a b) c)))
      (zaddeq2 ((zadd a b) (znsub (zfst c) (zsnd c)) c))
      (zfstsnd (c))))
  (ax_mp ((eq (zadd a (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))) (eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (zadd a (zadd b c))))
    (ax_mp ((eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))) (im (eq (zadd a (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))) (eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (zadd a (zadd b c)))))
      (eqtr4 ((zadd (zadd a b) (znsub (zfst c) (zsnd c))) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))) (zadd a (zadd b c))))
      (:conv (eq (zadd (zadd a b) (znsub (zfst c) (zsnd c))) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))))
        (eq
          (zadd
            (:unfold zadd (a b) ()
              (znsub (add (zfst a) (zfst b)) (add (zsnd a) (zsnd b))))
            (znsub (zfst c) (zsnd c)))
          (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))))
        (zaddzn ((add (zfst a) (zfst b)) (zfst c) (add (zsnd a) (zsnd b)) (zsnd c)))))
    (ax_mp ((eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))) (eq (zadd a (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))))
      (ax_mp ((eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (zadd a (zadd b c))) (im (eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))) (eq (zadd a (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))))))
        (eqtr3 ((zadd a (zadd b c)) (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))))
        (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (zadd a (zadd b c))))
          (zaddeq1 ((znsub (zfst a) (zsnd a)) a (zadd b c)))
          (zfstsnd (a))))
      (ax_mp ((eq (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))) (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c))))) (eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))))
        (ax_mp ((eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c))))) (im (eq (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))) (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c))))) (eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))))))
          (eqtr4 ((zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c)))) (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c)))))
          (:conv (eq (zadd (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c)))))
            (eq
              (zadd
                (znsub (zfst a) (zsnd a))
                (:unfold zadd (b c) ()
                  (znsub (add (zfst b) (zfst c)) (add (zsnd b) (zsnd c)))))
              (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c)))))
            (zaddzn ((zfst a) (add (zfst b) (zfst c)) (zsnd a) (add (zsnd b) (zsnd c))))))
        (ax_mp ((eq (add (add (zsnd a) (zsnd b)) (zsnd c)) (add (zsnd a) (add (zsnd b) (zsnd c)))) (eq (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))) (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c))))))
          (ax_mp ((eq (add (add (zfst a) (zfst b)) (zfst c)) (add (zfst a) (add (zfst b) (zfst c)))) (im (eq (add (add (zsnd a) (zsnd b)) (zsnd c)) (add (zsnd a) (add (zsnd b) (zsnd c)))) (eq (znsub (add (add (zfst a) (zfst b)) (zfst c)) (add (add (zsnd a) (zsnd b)) (zsnd c))) (znsub (add (zfst a) (add (zfst b) (zfst c))) (add (zsnd a) (add (zsnd b) (zsnd c)))))))
            (znsubeq ((add (add (zfst a) (zfst b)) (zfst c)) (add (zfst a) (add (zfst b) (zfst c))) (add (add (zsnd a) (zsnd b)) (zsnd c)) (add (zsnd a) (add (zsnd b) (zsnd c)))))
            (addass ((zfst a) (zfst b) (zfst c))))
          (addass ((zsnd a) (zsnd b) (zsnd c)))))))))

(local theorem zaddlass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zadd a (zadd b c)) (zadd b (zadd a c)))
()
(ax_mp ((eq (zadd (zadd a b) c) (zadd b (zadd a c))) (eq (zadd a (zadd b c)) (zadd b (zadd a c))))
  (ax_mp ((eq (zadd (zadd a b) c) (zadd a (zadd b c))) (im (eq (zadd (zadd a b) c) (zadd b (zadd a c))) (eq (zadd a (zadd b c)) (zadd b (zadd a c)))))
    (eqtr3 ((zadd a (zadd b c)) (zadd (zadd a b) c) (zadd b (zadd a c))))
    (zaddass (a b c)))
  (ax_mp ((eq (zadd (zadd b a) c) (zadd b (zadd a c))) (eq (zadd (zadd a b) c) (zadd b (zadd a c))))
    (ax_mp ((eq (zadd (zadd a b) c) (zadd (zadd b a) c)) (im (eq (zadd (zadd b a) c) (zadd b (zadd a c))) (eq (zadd (zadd a b) c) (zadd b (zadd a c)))))
      (eqtr ((zadd (zadd a b) c) (zadd (zadd b a) c) (zadd b (zadd a c))))
      (ax_mp ((eq (zadd a b) (zadd b a)) (eq (zadd (zadd a b) c) (zadd (zadd b a) c)))
        (zaddeq1 ((zadd a b) (zadd b a) c))
        (zaddcom (a b))))
    (zaddass (b a c)))))

(local theorem zaddrass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zadd (zadd a b) c) (zadd (zadd a c) b))
()
(ax_mp ((eq (zadd (zadd a c) b) (zadd a (zadd b c))) (eq (zadd (zadd a b) c) (zadd (zadd a c) b)))
  (ax_mp ((eq (zadd (zadd a b) c) (zadd a (zadd b c))) (im (eq (zadd (zadd a c) b) (zadd a (zadd b c))) (eq (zadd (zadd a b) c) (zadd (zadd a c) b))))
    (eqtr4 ((zadd (zadd a b) c) (zadd a (zadd b c)) (zadd (zadd a c) b)))
    (zaddass (a b c)))
  (ax_mp ((eq (zadd a (zadd b c)) (zadd a (zadd c b))) (eq (zadd (zadd a c) b) (zadd a (zadd b c))))
    (ax_mp ((eq (zadd (zadd a c) b) (zadd a (zadd c b))) (im (eq (zadd a (zadd b c)) (zadd a (zadd c b))) (eq (zadd (zadd a c) b) (zadd a (zadd b c)))))
      (eqtr4 ((zadd (zadd a c) b) (zadd a (zadd c b)) (zadd a (zadd b c))))
      (zaddass (a c b)))
    (ax_mp ((eq (zadd b c) (zadd c b)) (eq (zadd a (zadd b c)) (zadd a (zadd c b))))
      (zaddeq2 (a (zadd b c) (zadd c b)))
      (zaddcom (b c))))))

(local theorem zadd02 ((a nat ())) ()
  (eq (zadd a (d0)) a)
()
(ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (zadd a (d0)) a))
  (ax_mp ((eq (zadd a (d0)) (znsub (zfst a) (zsnd a))) (im (eq (znsub (zfst a) (zsnd a)) a) (eq (zadd a (d0)) a)))
    (eqtr ((zadd a (d0)) (znsub (zfst a) (zsnd a)) a))
    (ax_mp ((eq (add (zsnd a) (zsnd (d0))) (zsnd a)) (eq (zadd a (d0)) (znsub (zfst a) (zsnd a))))
      (ax_mp ((eq (add (zfst a) (zfst (d0))) (zfst a)) (im (eq (add (zsnd a) (zsnd (d0))) (zsnd a)) (eq (zadd a (d0)) (znsub (zfst a) (zsnd a)))))
        (:conv (im (eq (add (zfst a) (zfst (d0))) (zfst a)) (im (eq (add (zsnd a) (zsnd (d0))) (zsnd a)) (eq (zadd a (d0)) (znsub (zfst a) (zsnd a)))))
          (im
            (eq (add (zfst a) (zfst (d0))) (zfst a))
            (im
              (eq (add (zsnd a) (zsnd (d0))) (zsnd a))
              (eq
                (:unfold zadd (a (d0)) ()
                  (znsub (add (zfst a) (zfst (d0))) (add (zsnd a) (zsnd (d0)))))
                (znsub (zfst a) (zsnd a)))))
          (znsubeq ((add (zfst a) (zfst (d0))) (zfst a) (add (zsnd a) (zsnd (d0))) (zsnd a))))
        (ax_mp ((eq (add (zfst a) (d0)) (zfst a)) (eq (add (zfst a) (zfst (d0))) (zfst a)))
          (ax_mp ((eq (add (zfst a) (zfst (d0))) (add (zfst a) (d0))) (im (eq (add (zfst a) (d0)) (zfst a)) (eq (add (zfst a) (zfst (d0))) (zfst a))))
            (eqtr ((add (zfst a) (zfst (d0))) (add (zfst a) (d0)) (zfst a)))
            (ax_mp ((eq (zfst (d0)) (d0)) (eq (add (zfst a) (zfst (d0))) (add (zfst a) (d0))))
              (addeq2 ((zfst a) (zfst (d0)) (d0)))
              (zfst0 ())))
          (add0 ((zfst a)))))
      (ax_mp ((eq (add (zsnd a) (d0)) (zsnd a)) (eq (add (zsnd a) (zsnd (d0))) (zsnd a)))
        (ax_mp ((eq (add (zsnd a) (zsnd (d0))) (add (zsnd a) (d0))) (im (eq (add (zsnd a) (d0)) (zsnd a)) (eq (add (zsnd a) (zsnd (d0))) (zsnd a))))
          (eqtr ((add (zsnd a) (zsnd (d0))) (add (zsnd a) (d0)) (zsnd a)))
          (ax_mp ((eq (zsnd (d0)) (d0)) (eq (add (zsnd a) (zsnd (d0))) (add (zsnd a) (d0))))
            (addeq2 ((zsnd a) (zsnd (d0)) (d0)))
            (zsnd0 ())))
        (add0 ((zsnd a))))))
  (zfstsnd (a))))

(local theorem zadd01 ((a nat ())) ()
  (eq (zadd (d0) a) a)
()
(ax_mp ((eq (zadd a (d0)) a) (eq (zadd (d0) a) a))
  (ax_mp ((eq (zadd (d0) a) (zadd a (d0))) (im (eq (zadd a (d0)) a) (eq (zadd (d0) a) a)))
    (eqtr ((zadd (d0) a) (zadd a (d0)) a))
    (zaddcom ((d0) a)))
  (zadd02 (a))))

(local theorem znegid ((a nat ())) ()
  (eq (zadd a (zneg a)) (d0))
()
(ax_mp ((eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (d0)) (eq (zadd a (zneg a)) (d0)))
  (ax_mp ((eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (zadd a (zneg a))) (im (eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (d0)) (eq (zadd a (zneg a)) (d0))))
    (eqtr3 ((zadd a (zneg a)) (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (d0)))
    (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (zadd a (zneg a))))
      (zaddeq1 ((znsub (zfst a) (zsnd a)) a (zneg a)))
      (zfstsnd (a))))
  (ax_mp ((eq (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (d0)) (eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (d0)))
    (ax_mp ((eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a)))) (im (eq (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (d0)) (eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (d0))))
      (eqtr ((zadd (znsub (zfst a) (zsnd a)) (zneg a)) (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (d0)))
      (:conv (eq (zadd (znsub (zfst a) (zsnd a)) (zneg a)) (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))))
        (eq
          (zadd
            (znsub (zfst a) (zsnd a))
            (:unfold zneg (a) ()
              (znsub (zsnd a) (zfst a))))
          (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))))
        (zaddzn ((zfst a) (zsnd a) (zsnd a) (zfst a)))))
    (ax_mp ((eq (znsub (add (zsnd a) (zfst a)) (add (zsnd a) (zfst a))) (d0)) (eq (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (d0)))
      (ax_mp ((eq (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (znsub (add (zsnd a) (zfst a)) (add (zsnd a) (zfst a)))) (im (eq (znsub (add (zsnd a) (zfst a)) (add (zsnd a) (zfst a))) (d0)) (eq (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (d0))))
        (eqtr ((znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (znsub (add (zsnd a) (zfst a)) (add (zsnd a) (zfst a))) (d0)))
        (ax_mp ((eq (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (eq (znsub (add (zfst a) (zsnd a)) (add (zsnd a) (zfst a))) (znsub (add (zsnd a) (zfst a)) (add (zsnd a) (zfst a)))))
          (znsubeq1 ((add (zfst a) (zsnd a)) (add (zsnd a) (zfst a)) (add (zsnd a) (zfst a))))
          (addcom ((zfst a) (zsnd a)))))
      (znsubid ((add (zsnd a) (zfst a))))))))

(local theorem znegid1 ((a nat ())) ()
  (eq (zadd (zneg a) a) (d0))
()
(ax_mp ((eq (zadd a (zneg a)) (d0)) (eq (zadd (zneg a) a) (d0)))
  (ax_mp ((eq (zadd (zneg a) a) (zadd a (zneg a))) (im (eq (zadd a (zneg a)) (d0)) (eq (zadd (zneg a) a) (d0))))
    (eqtr ((zadd (zneg a) a) (zadd a (zneg a)) (d0)))
    (zaddcom ((zneg a) a)))
  (znegid (a))))

(local def zsub ((m nat ()) (n nat ())) (nat ())
()
(zadd m (zneg n)))

(local theorem zsubeqd ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_mh (im _G (eq _m1 _m2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zsub _m1 _n1) (zsub _m2 _n2)))
()
(:conv (im _G (eq (zsub _m1 _n1) (zsub _m2 _n2)))
  (im
    _G
    (eq
      (:unfold zsub (_m1 _n1) ()
        (zadd _m1 (zneg _n1)))
      (:unfold zsub (_m2 _n2) ()
        (zadd _m2 (zneg _n2)))))
  (zaddeqd (_G _m1 _m2 (zneg _n1) (zneg _n2))
    _mh
    (znegeqd (_G _n1 _n2)
      _nh))))

(local theorem zsubeq ((_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _m1 _m2) (im (eq _n1 _n2) (eq (zsub _m1 _n1) (zsub _m2 _n2))))
()
(exp ((eq _m1 _m2) (eq _n1 _n2) (eq (zsub _m1 _n1) (zsub _m2 _n2)))
  (zsubeqd ((an (eq _m1 _m2) (eq _n1 _n2)) _m1 _m2 _n1 _n2)
    (anl ((eq _m1 _m2) (eq _n1 _n2)))
    (anr ((eq _m1 _m2) (eq _n1 _n2))))))

(local theorem zsubeq1d ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (n nat ()))
  ((_h (im _G (eq _m1 _m2))))
  (im _G (eq (zsub _m1 n) (zsub _m2 n)))
()
(zsubeqd (_G _m1 _m2 n n)
  _h
  (eqidd (_G n))))

(local theorem zsubeq1 ((_m1 nat ()) (_m2 nat ()) (n nat ())) ()
  (im (eq _m1 _m2) (eq (zsub _m1 n) (zsub _m2 n)))
()
(zsubeq1d ((eq _m1 _m2) _m1 _m2 n)
  (id ((eq _m1 _m2)))))

(local theorem zsubeq2d ((_G wff ()) (m nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (zsub m _n1) (zsub m _n2)))
()
(zsubeqd (_G m m _n1 _n2)
  (eqidd (_G m))
  _h))

(local theorem zsubeq2 ((m nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zsub m _n1) (zsub m _n2)))
()
(zsubeq2d ((eq _n1 _n2) m _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zsubb0 ((m nat ()) (n nat ())) ()
  (eq (zsub (b0 m) (b0 n)) (znsub m n))
()
(ax_mp ((eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub m n)) (eq (zsub (b0 m) (b0 n)) (znsub m n)))
  (ax_mp ((eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (zsub (b0 m) (b0 n))) (im (eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub m n)) (eq (zsub (b0 m) (b0 n)) (znsub m n))))
    (eqtr3 ((zsub (b0 m) (b0 n)) (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub m n)))
    (ax_mp ((eq (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 m)) (eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (zsub (b0 m) (b0 n))))
      (zsubeq1 ((znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 m) (b0 n)))
      (zfstsnd ((b0 m)))))
  (ax_mp ((eq (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n)))) (znsub m n)) (eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub m n)))
    (ax_mp ((eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n))))) (im (eq (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n)))) (znsub m n)) (eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub m n))))
      (eqtr ((zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n)))) (znsub m n)))
      (:conv (eq (zsub (znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n)))))
        (eq
          (:unfold zsub ((znsub (zfst (b0 m)) (zsnd (b0 m))) (b0 n)) ()
            (zadd
              (znsub (zfst (b0 m)) (zsnd (b0 m)))
              (:unfold zneg ((b0 n)) ()
                (znsub (zsnd (b0 n)) (zfst (b0 n))))))
          (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n)))))
        (zaddzn ((zfst (b0 m)) (zsnd (b0 n)) (zsnd (b0 m)) (zfst (b0 n))))))
    (ax_mp ((eq (add (zsnd (b0 m)) (zfst (b0 n))) n) (eq (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n)))) (znsub m n)))
      (ax_mp ((eq (add (zfst (b0 m)) (zsnd (b0 n))) m) (im (eq (add (zsnd (b0 m)) (zfst (b0 n))) n) (eq (znsub (add (zfst (b0 m)) (zsnd (b0 n))) (add (zsnd (b0 m)) (zfst (b0 n)))) (znsub m n))))
        (znsubeq ((add (zfst (b0 m)) (zsnd (b0 n))) m (add (zsnd (b0 m)) (zfst (b0 n))) n))
        (ax_mp ((eq (add m (d0)) m) (eq (add (zfst (b0 m)) (zsnd (b0 n))) m))
          (ax_mp ((eq (add (zfst (b0 m)) (zsnd (b0 n))) (add m (d0))) (im (eq (add m (d0)) m) (eq (add (zfst (b0 m)) (zsnd (b0 n))) m)))
            (eqtr ((add (zfst (b0 m)) (zsnd (b0 n))) (add m (d0)) m))
            (ax_mp ((eq (zsnd (b0 n)) (d0)) (eq (add (zfst (b0 m)) (zsnd (b0 n))) (add m (d0))))
              (ax_mp ((eq (zfst (b0 m)) m) (im (eq (zsnd (b0 n)) (d0)) (eq (add (zfst (b0 m)) (zsnd (b0 n))) (add m (d0)))))
                (addeq ((zfst (b0 m)) m (zsnd (b0 n)) (d0)))
                (zfstb0 (m)))
              (zsndb0 (n))))
          (add0 (m))))
      (ax_mp ((eq (add (d0) n) n) (eq (add (zsnd (b0 m)) (zfst (b0 n))) n))
        (ax_mp ((eq (add (zsnd (b0 m)) (zfst (b0 n))) (add (d0) n)) (im (eq (add (d0) n) n) (eq (add (zsnd (b0 m)) (zfst (b0 n))) n)))
          (eqtr ((add (zsnd (b0 m)) (zfst (b0 n))) (add (d0) n) n))
          (ax_mp ((eq (zfst (b0 n)) n) (eq (add (zsnd (b0 m)) (zfst (b0 n))) (add (d0) n)))
            (ax_mp ((eq (zsnd (b0 m)) (d0)) (im (eq (zfst (b0 n)) n) (eq (add (zsnd (b0 m)) (zfst (b0 n))) (add (d0) n))))
              (addeq ((zsnd (b0 m)) (d0) (zfst (b0 n)) n))
              (zsndb0 (m)))
            (zfstb0 (n))))
        (add01 (n)))))))

(local theorem zsubpos ((m nat ()) (n nat ())) ()
  (im (le n m) (eq (zsub (b0 m) (b0 n)) (b0 (sub m n))))
()
(syl5eq ((le n m) (zsub (b0 m) (b0 n)) (znsub m n) (b0 (sub m n)))
  (zsubb0 (m n))
  (znsubpos (m n))))

(local theorem zsubid ((a nat ())) ()
  (eq (zsub a a) (d0))
()
(:conv (eq (zsub a a) (d0))
  (eq
    (:unfold zsub (a a) ()
      (zadd a (zneg a)))
    (d0))
  (znegid (a))))

(local theorem zsub01 ((a nat ())) ()
  (eq (zsub (d0) a) (zneg a))
()
(:conv (eq (zsub (d0) a) (zneg a))
  (eq
    (:unfold zsub ((d0) a) ()
      (zadd (d0) (zneg a)))
    (zneg a))
  (zadd01 ((zneg a)))))

(local theorem zsub02 ((a nat ())) ()
  (eq (zsub a (d0)) a)
()
(ax_mp ((eq (zadd a (d0)) a) (eq (zsub a (d0)) a))
  (ax_mp ((eq (zsub a (d0)) (zadd a (d0))) (im (eq (zadd a (d0)) a) (eq (zsub a (d0)) a)))
    (eqtr ((zsub a (d0)) (zadd a (d0)) a))
    (ax_mp ((eq (zneg (d0)) (d0)) (eq (zsub a (d0)) (zadd a (d0))))
      (:conv (im (eq (zneg (d0)) (d0)) (eq (zsub a (d0)) (zadd a (d0))))
        (im
          (eq (zneg (d0)) (d0))
          (eq
            (:unfold zsub (a (d0)) ()
              (zadd a (zneg (d0))))
            (zadd a (d0))))
        (zaddeq2 (a (zneg (d0)) (d0))))
      (zneg0 ())))
  (zadd02 (a))))

(local theorem zpncan ((a nat ()) (b nat ())) ()
  (eq (zsub (zadd a b) b) a)
()
(ax_mp ((eq (zadd a (zadd b (zneg b))) a) (eq (zsub (zadd a b) b) a))
  (ax_mp ((eq (zsub (zadd a b) b) (zadd a (zadd b (zneg b)))) (im (eq (zadd a (zadd b (zneg b))) a) (eq (zsub (zadd a b) b) a)))
    (eqtr ((zsub (zadd a b) b) (zadd a (zadd b (zneg b))) a))
    (:conv (eq (zsub (zadd a b) b) (zadd a (zadd b (zneg b))))
      (eq
        (:unfold zsub ((zadd a b) b) ()
          (zadd (zadd a b) (zneg b)))
        (zadd a (zadd b (zneg b))))
      (zaddass (a b (zneg b)))))
  (ax_mp ((eq (zadd a (d0)) a) (eq (zadd a (zadd b (zneg b))) a))
    (ax_mp ((eq (zadd a (zadd b (zneg b))) (zadd a (d0))) (im (eq (zadd a (d0)) a) (eq (zadd a (zadd b (zneg b))) a)))
      (eqtr ((zadd a (zadd b (zneg b))) (zadd a (d0)) a))
      (ax_mp ((eq (zadd b (zneg b)) (d0)) (eq (zadd a (zadd b (zneg b))) (zadd a (d0))))
        (zaddeq2 (a (zadd b (zneg b)) (d0)))
        (znegid (b))))
    (zadd02 (a)))))

(local theorem zpncan2 ((a nat ()) (b nat ())) ()
  (eq (zsub (zadd a b) a) b)
()
(ax_mp ((eq (zsub (zadd b a) a) b) (eq (zsub (zadd a b) a) b))
  (ax_mp ((eq (zsub (zadd a b) a) (zsub (zadd b a) a)) (im (eq (zsub (zadd b a) a) b) (eq (zsub (zadd a b) a) b)))
    (eqtr ((zsub (zadd a b) a) (zsub (zadd b a) a) b))
    (ax_mp ((eq (zadd a b) (zadd b a)) (eq (zsub (zadd a b) a) (zsub (zadd b a) a)))
      (zsubeq1 ((zadd a b) (zadd b a) a))
      (zaddcom (a b))))
  (zpncan (b a))))

(local theorem znpcan ((a nat ()) (b nat ())) ()
  (eq (zadd (zsub a b) b) a)
()
(ax_mp ((eq (zadd a (zadd (zneg b) b)) a) (eq (zadd (zsub a b) b) a))
  (ax_mp ((eq (zadd (zsub a b) b) (zadd a (zadd (zneg b) b))) (im (eq (zadd a (zadd (zneg b) b)) a) (eq (zadd (zsub a b) b) a)))
    (eqtr ((zadd (zsub a b) b) (zadd a (zadd (zneg b) b)) a))
    (:conv (eq (zadd (zsub a b) b) (zadd a (zadd (zneg b) b)))
      (eq
        (zadd
          (:unfold zsub (a b) ()
            (zadd a (zneg b)))
          b)
        (zadd a (zadd (zneg b) b)))
      (zaddass (a (zneg b) b))))
  (ax_mp ((eq (zadd a (d0)) a) (eq (zadd a (zadd (zneg b) b)) a))
    (ax_mp ((eq (zadd a (zadd (zneg b) b)) (zadd a (d0))) (im (eq (zadd a (d0)) a) (eq (zadd a (zadd (zneg b) b)) a)))
      (eqtr ((zadd a (zadd (zneg b) b)) (zadd a (d0)) a))
      (ax_mp ((eq (zadd (zneg b) b) (d0)) (eq (zadd a (zadd (zneg b) b)) (zadd a (d0))))
        (zaddeq2 (a (zadd (zneg b) b) (d0)))
        (znegid1 (b))))
    (zadd02 (a)))))

(local theorem zpncan3 ((a nat ()) (b nat ())) ()
  (eq (zadd a (zsub b a)) b)
()
(ax_mp ((eq (zadd (zsub b a) a) b) (eq (zadd a (zsub b a)) b))
  (ax_mp ((eq (zadd a (zsub b a)) (zadd (zsub b a) a)) (im (eq (zadd (zsub b a) a) b) (eq (zadd a (zsub b a)) b)))
    (eqtr ((zadd a (zsub b a)) (zadd (zsub b a) a) b))
    (zaddcom (a (zsub b a))))
  (znpcan (b a))))

(local theorem zaddsubass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zsub (zadd a b) c) (zadd a (zsub b c)))
()
(:conv (eq (zsub (zadd a b) c) (zadd a (zsub b c)))
  (eq
    (:unfold zsub ((zadd a b) c) ()
      (zadd (zadd a b) (zneg c)))
    (zadd
      a
      (:unfold zsub (b c) ()
        (zadd b (zneg c)))))
  (zaddass (a b (zneg c)))))

(local theorem zaddsub ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zsub (zadd a b) c) (zadd (zsub a c) b))
()
(:conv (eq (zsub (zadd a b) c) (zadd (zsub a c) b))
  (eq
    (:unfold zsub ((zadd a b) c) ()
      (zadd (zadd a b) (zneg c)))
    (zadd
      (:unfold zsub (a c) ()
        (zadd a (zneg c)))
      b))
  (zaddrass (a b (zneg c)))))

(local theorem zaddcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (zadd a c) (zadd b c)) (eq a b))
()
(ibii ((eq (zadd a c) (zadd b c)) (eq a b))
  (syl5eqr ((eq (zadd a c) (zadd b c)) a (zsub (zadd a c) c) b)
    (zpncan (a c))
    (syl6eq ((eq (zadd a c) (zadd b c)) (zsub (zadd a c) c) (zsub (zadd b c) c) b)
      (zpncan (b c))
      (zsubeq1 ((zadd a c) (zadd b c) c))))
  (zaddeq1 (a b c))))

(local theorem zaddcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (zadd a b) (zadd a c)) (eq b c))
()
(ax_mp ((iff (eq (zadd b a) (zadd c a)) (eq b c)) (iff (eq (zadd a b) (zadd a c)) (eq b c)))
  (ax_mp ((iff (eq (zadd a b) (zadd a c)) (eq (zadd b a) (zadd c a))) (im (iff (eq (zadd b a) (zadd c a)) (eq b c)) (iff (eq (zadd a b) (zadd a c)) (eq b c))))
    (bitr ((eq (zadd a b) (zadd a c)) (eq (zadd b a) (zadd c a)) (eq b c)))
    (ax_mp ((eq (zadd a c) (zadd c a)) (iff (eq (zadd a b) (zadd a c)) (eq (zadd b a) (zadd c a))))
      (ax_mp ((eq (zadd a b) (zadd b a)) (im (eq (zadd a c) (zadd c a)) (iff (eq (zadd a b) (zadd a c)) (eq (zadd b a) (zadd c a)))))
        (eqeq ((zadd a b) (zadd b a) (zadd a c) (zadd c a)))
        (zaddcom (a b)))
      (zaddcom (a c))))
  (zaddcan1 (b c a))))

(local theorem eqzsub ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (zsub a c) b) (eq (zadd b c) a))
()
(ax_mp ((iff (eq a (zadd b c)) (eq (zadd b c) a)) (iff (eq (zsub a c) b) (eq (zadd b c) a)))
  (ax_mp ((iff (eq (zsub a c) b) (eq a (zadd b c))) (im (iff (eq a (zadd b c)) (eq (zadd b c) a)) (iff (eq (zsub a c) b) (eq (zadd b c) a))))
    (bitr ((eq (zsub a c) b) (eq a (zadd b c)) (eq (zadd b c) a)))
    (ibii ((eq (zsub a c) b) (eq a (zadd b c)))
      (syl5eqr ((eq (zsub a c) b) a (zadd (zsub a c) c) (zadd b c))
        (znpcan (a c))
        (zaddeq1 ((zsub a c) b c)))
      (syl6eq ((eq a (zadd b c)) (zsub a c) (zsub (zadd b c) c) b)
        (zpncan (b c))
        (zsubeq1 (a (zadd b c) c)))))
  (eqcomb (a (zadd b c)))))

(local theorem eqzsub2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (zsub a b) c) (eq (zadd b c) a))
()
(ax_mp ((iff (eq (zadd c b) a) (eq (zadd b c) a)) (iff (eq (zsub a b) c) (eq (zadd b c) a)))
  (ax_mp ((iff (eq (zsub a b) c) (eq (zadd c b) a)) (im (iff (eq (zadd c b) a) (eq (zadd b c) a)) (iff (eq (zsub a b) c) (eq (zadd b c) a))))
    (bitr ((eq (zsub a b) c) (eq (zadd c b) a) (eq (zadd b c) a)))
    (eqzsub (a c b)))
  (ax_mp ((eq (zadd c b) (zadd b c)) (iff (eq (zadd c b) a) (eq (zadd b c) a)))
    (eqeq1 ((zadd c b) (zadd b c) a))
    (zaddcom (c b)))))

(local theorem eqzneg ((a nat ()) (b nat ())) ()
  (iff (eq (zneg a) b) (eq (zadd a b) (d0)))
()
(ax_mp ((iff (eq (zsub (d0) a) b) (eq (zadd a b) (d0))) (iff (eq (zneg a) b) (eq (zadd a b) (d0))))
  (ax_mp ((iff (eq (zsub (d0) a) b) (eq (zneg a) b)) (im (iff (eq (zsub (d0) a) b) (eq (zadd a b) (d0))) (iff (eq (zneg a) b) (eq (zadd a b) (d0)))))
    (bitr3 ((eq (zneg a) b) (eq (zsub (d0) a) b) (eq (zadd a b) (d0))))
    (ax_mp ((eq (zsub (d0) a) (zneg a)) (iff (eq (zsub (d0) a) b) (eq (zneg a) b)))
      (eqeq1 ((zsub (d0) a) (zneg a) b))
      (zsub01 (a))))
  (eqzsub2 ((d0) a b))))

(local theorem znegeqcom ((a nat ()) (b nat ())) ()
  (iff (eq (zneg a) b) (eq (zneg b) a))
()
(ax_mp ((iff (eq (zneg b) a) (eq (zadd a b) (d0))) (iff (eq (zneg a) b) (eq (zneg b) a)))
  (ax_mp ((iff (eq (zneg a) b) (eq (zadd a b) (d0))) (im (iff (eq (zneg b) a) (eq (zadd a b) (d0))) (iff (eq (zneg a) b) (eq (zneg b) a))))
    (bitr4 ((eq (zneg a) b) (eq (zadd a b) (d0)) (eq (zneg b) a)))
    (eqzneg (a b)))
  (ax_mp ((iff (eq (zadd a b) (d0)) (eq (zadd b a) (d0))) (iff (eq (zneg b) a) (eq (zadd a b) (d0))))
    (ax_mp ((iff (eq (zneg b) a) (eq (zadd b a) (d0))) (im (iff (eq (zadd a b) (d0)) (eq (zadd b a) (d0))) (iff (eq (zneg b) a) (eq (zadd a b) (d0)))))
      (bitr4 ((eq (zneg b) a) (eq (zadd b a) (d0)) (eq (zadd a b) (d0))))
      (eqzneg (b a)))
    (ax_mp ((eq (zadd a b) (zadd b a)) (iff (eq (zadd a b) (d0)) (eq (zadd b a) (d0))))
      (eqeq1 ((zadd a b) (zadd b a) (d0)))
      (zaddcom (a b))))))

(local theorem eqznegcom ((a nat ()) (b nat ())) ()
  (iff (eq a (zneg b)) (eq b (zneg a)))
()
(ax_mp ((iff (eq (zneg b) a) (eq b (zneg a))) (iff (eq a (zneg b)) (eq b (zneg a))))
  (ax_mp ((iff (eq a (zneg b)) (eq (zneg b) a)) (im (iff (eq (zneg b) a) (eq b (zneg a))) (iff (eq a (zneg b)) (eq b (zneg a)))))
    (bitr ((eq a (zneg b)) (eq (zneg b) a) (eq b (zneg a))))
    (eqcomb (a (zneg b))))
  (ax_mp ((iff (eq (zneg a) b) (eq b (zneg a))) (iff (eq (zneg b) a) (eq b (zneg a))))
    (ax_mp ((iff (eq (zneg b) a) (eq (zneg a) b)) (im (iff (eq (zneg a) b) (eq b (zneg a))) (iff (eq (zneg b) a) (eq b (zneg a)))))
      (bitr ((eq (zneg b) a) (eq (zneg a) b) (eq b (zneg a))))
      (znegeqcom (b a)))
    (eqcomb ((zneg a) b)))))

(local theorem zsubeq0 ((a nat ()) (b nat ())) ()
  (iff (eq (zsub a b) (d0)) (eq a b))
()
(ax_mp ((iff (eq (zadd (d0) b) a) (eq a b)) (iff (eq (zsub a b) (d0)) (eq a b)))
  (ax_mp ((iff (eq (zsub a b) (d0)) (eq (zadd (d0) b) a)) (im (iff (eq (zadd (d0) b) a) (eq a b)) (iff (eq (zsub a b) (d0)) (eq a b))))
    (bitr ((eq (zsub a b) (d0)) (eq (zadd (d0) b) a) (eq a b)))
    (eqzsub (a (d0) b)))
  (ax_mp ((iff (eq b a) (eq a b)) (iff (eq (zadd (d0) b) a) (eq a b)))
    (ax_mp ((iff (eq (zadd (d0) b) a) (eq b a)) (im (iff (eq b a) (eq a b)) (iff (eq (zadd (d0) b) a) (eq a b))))
      (bitr ((eq (zadd (d0) b) a) (eq b a) (eq a b)))
      (ax_mp ((eq (zadd (d0) b) b) (iff (eq (zadd (d0) b) a) (eq b a)))
        (eqeq1 ((zadd (d0) b) b a))
        (zadd01 (b))))
    (eqcomb (b a)))))

(local theorem znegadd2 ((a nat ()) (b nat ())) ()
  (eq (zneg (zadd a b)) (zsub (zneg a) b))
()
(ax_mp ((eq (zsub (zneg a) b) (zneg (zadd a b))) (eq (zneg (zadd a b)) (zsub (zneg a) b)))
  (eqcom ((zsub (zneg a) b) (zneg (zadd a b))))
  (mpbir ((eq (zadd (zneg (zadd a b)) b) (zneg a)) (eq (zsub (zneg a) b) (zneg (zadd a b))))
    (eqzsub ((zneg a) (zneg (zadd a b)) b))
    (ax_mp ((eq (zadd b (zneg (zadd a b))) (zneg a)) (eq (zadd (zneg (zadd a b)) b) (zneg a)))
      (ax_mp ((eq (zadd (zneg (zadd a b)) b) (zadd b (zneg (zadd a b)))) (im (eq (zadd b (zneg (zadd a b))) (zneg a)) (eq (zadd (zneg (zadd a b)) b) (zneg a))))
        (eqtr ((zadd (zneg (zadd a b)) b) (zadd b (zneg (zadd a b))) (zneg a)))
        (zaddcom ((zneg (zadd a b)) b)))
      (mpbir ((eq (zadd (zneg a) (zadd a b)) b) (eq (zadd b (zneg (zadd a b))) (zneg a)))
        (:conv (iff (eq (zadd b (zneg (zadd a b))) (zneg a)) (eq (zadd (zneg a) (zadd a b)) b))
          (iff
            (eq
              (:sym (:unfold zsub (b (zadd a b)) ()
                (zadd b (zneg (zadd a b)))))
              (zneg a))
            (eq (zadd (zneg a) (zadd a b)) b))
          (eqzsub (b (zneg a) (zadd a b))))
        (ax_mp ((eq (zadd (zadd a b) (zneg a)) b) (eq (zadd (zneg a) (zadd a b)) b))
          (ax_mp ((eq (zadd (zneg a) (zadd a b)) (zadd (zadd a b) (zneg a))) (im (eq (zadd (zadd a b) (zneg a)) b) (eq (zadd (zneg a) (zadd a b)) b)))
            (eqtr ((zadd (zneg a) (zadd a b)) (zadd (zadd a b) (zneg a)) b))
            (zaddcom ((zneg a) (zadd a b))))
          (:conv (eq (zadd (zadd a b) (zneg a)) b)
            (eq
              (:sym (:unfold zsub ((zadd a b) a) ()
                (zadd (zadd a b) (zneg a))))
              b)
            (zpncan2 (a b)))))))))

(local theorem znegadd ((a nat ()) (b nat ())) ()
  (eq (zneg (zadd a b)) (zadd (zneg a) (zneg b)))
()
(:conv (eq (zneg (zadd a b)) (zadd (zneg a) (zneg b)))
  (eq
    (zneg (zadd a b))
    (:sym (:unfold zsub ((zneg a) b) ()
      (zadd (zneg a) (zneg b)))))
  (znegadd2 (a b))))

(local theorem zsubsub ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zsub (zsub a b) c) (zsub a (zadd b c)))
()
(ax_mp ((eq (zsub a (zadd b c)) (zadd a (zsub (zneg b) c))) (eq (zsub (zsub a b) c) (zsub a (zadd b c))))
  (ax_mp ((eq (zsub (zsub a b) c) (zadd a (zsub (zneg b) c))) (im (eq (zsub a (zadd b c)) (zadd a (zsub (zneg b) c))) (eq (zsub (zsub a b) c) (zsub a (zadd b c)))))
    (eqtr4 ((zsub (zsub a b) c) (zadd a (zsub (zneg b) c)) (zsub a (zadd b c))))
    (:conv (eq (zsub (zsub a b) c) (zadd a (zsub (zneg b) c)))
      (eq
        (zsub
          (:unfold zsub (a b) ()
            (zadd a (zneg b)))
          c)
        (zadd a (zsub (zneg b) c)))
      (zaddsubass (a (zneg b) c))))
  (ax_mp ((eq (zneg (zadd b c)) (zsub (zneg b) c)) (eq (zsub a (zadd b c)) (zadd a (zsub (zneg b) c))))
    (:conv (im (eq (zneg (zadd b c)) (zsub (zneg b) c)) (eq (zsub a (zadd b c)) (zadd a (zsub (zneg b) c))))
      (im
        (eq (zneg (zadd b c)) (zsub (zneg b) c))
        (eq
          (:unfold zsub (a (zadd b c)) ()
            (zadd a (zneg (zadd b c))))
          (zadd a (zsub (zneg b) c))))
      (zaddeq2 (a (zneg (zadd b c)) (zsub (zneg b) c))))
    (znegadd2 (b c)))))

(local theorem znpncan ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zadd (zsub a b) (zsub b c)) (zsub a c))
()
(ax_mp ((eq (zsub (zadd (zsub a b) b) c) (zsub a c)) (eq (zadd (zsub a b) (zsub b c)) (zsub a c)))
  (ax_mp ((eq (zsub (zadd (zsub a b) b) c) (zadd (zsub a b) (zsub b c))) (im (eq (zsub (zadd (zsub a b) b) c) (zsub a c)) (eq (zadd (zsub a b) (zsub b c)) (zsub a c))))
    (eqtr3 ((zadd (zsub a b) (zsub b c)) (zsub (zadd (zsub a b) b) c) (zsub a c)))
    (zaddsubass ((zsub a b) b c)))
  (ax_mp ((eq (zadd (zsub a b) b) a) (eq (zsub (zadd (zsub a b) b) c) (zsub a c)))
    (zsubeq1 ((zadd (zsub a b) b) a c))
    (znpcan (a b)))))

(local theorem znpncan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zadd (zsub b c) (zsub a b)) (zsub a c))
()
(ax_mp ((eq (zadd (zsub a b) (zsub b c)) (zsub a c)) (eq (zadd (zsub b c) (zsub a b)) (zsub a c)))
  (ax_mp ((eq (zadd (zsub b c) (zsub a b)) (zadd (zsub a b) (zsub b c))) (im (eq (zadd (zsub a b) (zsub b c)) (zsub a c)) (eq (zadd (zsub b c) (zsub a b)) (zsub a c))))
    (eqtr ((zadd (zsub b c) (zsub a b)) (zadd (zsub a b) (zsub b c)) (zsub a c)))
    (zaddcom ((zsub b c) (zsub a b))))
  (znpncan (a b c))))

(local theorem zpnpcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zsub (zadd a b) (zadd a c)) (zsub b c))
()
(ax_mp ((eq (zsub (zsub (zadd a b) a) c) (zsub b c)) (eq (zsub (zadd a b) (zadd a c)) (zsub b c)))
  (ax_mp ((eq (zsub (zsub (zadd a b) a) c) (zsub (zadd a b) (zadd a c))) (im (eq (zsub (zsub (zadd a b) a) c) (zsub b c)) (eq (zsub (zadd a b) (zadd a c)) (zsub b c))))
    (eqtr3 ((zsub (zadd a b) (zadd a c)) (zsub (zsub (zadd a b) a) c) (zsub b c)))
    (zsubsub ((zadd a b) a c)))
  (ax_mp ((eq (zsub (zadd a b) a) b) (eq (zsub (zsub (zadd a b) a) c) (zsub b c)))
    (zsubeq1 ((zsub (zadd a b) a) b c))
    (zpncan2 (a b)))))

(local theorem zpnpcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zsub (zadd a c) (zadd b c)) (zsub a b))
()
(ax_mp ((eq (zsub (zadd c a) (zadd c b)) (zsub a b)) (eq (zsub (zadd a c) (zadd b c)) (zsub a b)))
  (ax_mp ((eq (zsub (zadd a c) (zadd b c)) (zsub (zadd c a) (zadd c b))) (im (eq (zsub (zadd c a) (zadd c b)) (zsub a b)) (eq (zsub (zadd a c) (zadd b c)) (zsub a b))))
    (eqtr ((zsub (zadd a c) (zadd b c)) (zsub (zadd c a) (zadd c b)) (zsub a b)))
    (ax_mp ((eq (zadd b c) (zadd c b)) (eq (zsub (zadd a c) (zadd b c)) (zsub (zadd c a) (zadd c b))))
      (ax_mp ((eq (zadd a c) (zadd c a)) (im (eq (zadd b c) (zadd c b)) (eq (zsub (zadd a c) (zadd b c)) (zsub (zadd c a) (zadd c b)))))
        (zsubeq ((zadd a c) (zadd c a) (zadd b c) (zadd c b)))
        (zaddcom (a c)))
      (zaddcom (b c))))
  (zpnpcan2 (c a b))))

(local theorem znegsub ((a nat ()) (b nat ())) ()
  (eq (zneg (zsub a b)) (zsub b a))
()
(ax_mp ((eq (zsub (zneg a) (zneg b)) (zsub b a)) (eq (zneg (zsub a b)) (zsub b a)))
  (ax_mp ((eq (zneg (zsub a b)) (zsub (zneg a) (zneg b))) (im (eq (zsub (zneg a) (zneg b)) (zsub b a)) (eq (zneg (zsub a b)) (zsub b a))))
    (eqtr ((zneg (zsub a b)) (zsub (zneg a) (zneg b)) (zsub b a)))
    (:conv (eq (zneg (zsub a b)) (zsub (zneg a) (zneg b)))
      (eq
        (zneg
          (:unfold zsub (a b) ()
            (zadd a (zneg b))))
        (zsub (zneg a) (zneg b)))
      (znegadd2 (a (zneg b)))))
  (ax_mp ((eq (zadd (zneg (zneg b)) (zneg a)) (zsub b a)) (eq (zsub (zneg a) (zneg b)) (zsub b a)))
    (ax_mp ((eq (zsub (zneg a) (zneg b)) (zadd (zneg (zneg b)) (zneg a))) (im (eq (zadd (zneg (zneg b)) (zneg a)) (zsub b a)) (eq (zsub (zneg a) (zneg b)) (zsub b a))))
      (eqtr ((zsub (zneg a) (zneg b)) (zadd (zneg (zneg b)) (zneg a)) (zsub b a)))
      (:conv (eq (zsub (zneg a) (zneg b)) (zadd (zneg (zneg b)) (zneg a)))
        (eq
          (:unfold zsub ((zneg a) (zneg b)) ()
            (zadd (zneg a) (zneg (zneg b))))
          (zadd (zneg (zneg b)) (zneg a)))
        (zaddcom ((zneg a) (zneg (zneg b))))))
    (ax_mp ((eq (zneg (zneg b)) b) (eq (zadd (zneg (zneg b)) (zneg a)) (zsub b a)))
      (:conv (im (eq (zneg (zneg b)) b) (eq (zadd (zneg (zneg b)) (zneg a)) (zsub b a)))
        (im
          (eq (zneg (zneg b)) b)
          (eq
            (zadd (zneg (zneg b)) (zneg a))
            (:unfold zsub (b a) ()
              (zadd b (zneg a)))))
        (zaddeq1 ((zneg (zneg b)) b (zneg a))))
      (znegneg (b))))))

(local theorem zsubsub2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zsub a (zsub b c)) (zadd a (zsub c b)))
()
(ax_mp ((eq (zneg (zsub b c)) (zsub c b)) (eq (zsub a (zsub b c)) (zadd a (zsub c b))))
  (:conv (im (eq (zneg (zsub b c)) (zsub c b)) (eq (zsub a (zsub b c)) (zadd a (zsub c b))))
    (im
      (eq (zneg (zsub b c)) (zsub c b))
      (eq
        (:unfold zsub (a (zsub b c)) ()
          (zadd a (zneg (zsub b c))))
        (zadd a (zsub c b))))
    (zaddeq2 (a (zneg (zsub b c)) (zsub c b))))
  (znegsub (b c))))

(local theorem zsubadd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zadd (zsub a b) c) (zsub a (zsub b c)))
()
(ax_mp ((eq (zsub (zadd a c) b) (zsub a (zsub b c))) (eq (zadd (zsub a b) c) (zsub a (zsub b c))))
  (ax_mp ((eq (zsub (zadd a c) b) (zadd (zsub a b) c)) (im (eq (zsub (zadd a c) b) (zsub a (zsub b c))) (eq (zadd (zsub a b) c) (zsub a (zsub b c)))))
    (eqtr3 ((zadd (zsub a b) c) (zsub (zadd a c) b) (zsub a (zsub b c))))
    (zaddsub (a c b)))
  (ax_mp ((eq (zsub a (zsub b c)) (zadd a (zsub c b))) (eq (zsub (zadd a c) b) (zsub a (zsub b c))))
    (ax_mp ((eq (zsub (zadd a c) b) (zadd a (zsub c b))) (im (eq (zsub a (zsub b c)) (zadd a (zsub c b))) (eq (zsub (zadd a c) b) (zsub a (zsub b c)))))
      (eqtr4 ((zsub (zadd a c) b) (zadd a (zsub c b)) (zsub a (zsub b c))))
      (zaddsubass (a c b)))
    (zsubsub2 (a b c)))))

(local theorem zsubneg2 ((a nat ()) (b nat ())) ()
  (eq (zsub a (zneg b)) (zadd a b))
()
(ax_mp ((eq (zneg (zneg b)) b) (eq (zsub a (zneg b)) (zadd a b)))
  (:conv (im (eq (zneg (zneg b)) b) (eq (zsub a (zneg b)) (zadd a b)))
    (im
      (eq (zneg (zneg b)) b)
      (eq
        (:unfold zsub (a (zneg b)) ()
          (zadd a (zneg (zneg b))))
        (zadd a b)))
    (zaddeq2 (a (zneg (zneg b)) b)))
  (znegneg (b))))

(local theorem znegsub2 ((a nat ()) (b nat ())) ()
  (eq (zsub (zneg a) (zneg b)) (zsub b a))
()
(ax_mp ((eq (zadd (zneg a) b) (zsub b a)) (eq (zsub (zneg a) (zneg b)) (zsub b a)))
  (ax_mp ((eq (zsub (zneg a) (zneg b)) (zadd (zneg a) b)) (im (eq (zadd (zneg a) b) (zsub b a)) (eq (zsub (zneg a) (zneg b)) (zsub b a))))
    (eqtr ((zsub (zneg a) (zneg b)) (zadd (zneg a) b) (zsub b a)))
    (zsubneg2 ((zneg a) b)))
  (:conv (eq (zadd (zneg a) b) (zsub b a))
    (eq
      (zadd (zneg a) b)
      (:unfold zsub (b a) ()
        (zadd b (zneg a))))
    (zaddcom ((zneg a) b)))))

(local theorem znegb0S ((n nat ())) ()
  (eq (zneg (b0 (suc n))) (b1 n))
()
(mpbi ((eq (zneg (b1 n)) (b0 (suc n))) (eq (zneg (b0 (suc n))) (b1 n)))
  (znegeqcom ((b1 n) (b0 (suc n))))
  (znegb1 (n))))

(local def zlt ((m nat ()) (n nat ())) (wff ())
()
(odd (zsub m n)))

(local theorem zlteqd ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_mh (im _G (eq _m1 _m2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (iff (zlt _m1 _n1) (zlt _m2 _n2)))
()
(:conv (im _G (iff (zlt _m1 _n1) (zlt _m2 _n2)))
  (im
    _G
    (iff
      (:unfold zlt (_m1 _n1) ()
        (odd (zsub _m1 _n1)))
      (:unfold zlt (_m2 _n2) ()
        (odd (zsub _m2 _n2)))))
  (oddeqd (_G (zsub _m1 _n1) (zsub _m2 _n2))
    (zsubeqd (_G _m1 _m2 _n1 _n2)
      _mh
      _nh))))

(local theorem zlteq ((_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _m1 _m2) (im (eq _n1 _n2) (iff (zlt _m1 _n1) (zlt _m2 _n2))))
()
(exp ((eq _m1 _m2) (eq _n1 _n2) (iff (zlt _m1 _n1) (zlt _m2 _n2)))
  (zlteqd ((an (eq _m1 _m2) (eq _n1 _n2)) _m1 _m2 _n1 _n2)
    (anl ((eq _m1 _m2) (eq _n1 _n2)))
    (anr ((eq _m1 _m2) (eq _n1 _n2))))))

(local theorem zlteq1d ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (n nat ()))
  ((_h (im _G (eq _m1 _m2))))
  (im _G (iff (zlt _m1 n) (zlt _m2 n)))
()
(zlteqd (_G _m1 _m2 n n)
  _h
  (eqidd (_G n))))

(local theorem zlteq1 ((_m1 nat ()) (_m2 nat ()) (n nat ())) ()
  (im (eq _m1 _m2) (iff (zlt _m1 n) (zlt _m2 n)))
()
(zlteq1d ((eq _m1 _m2) _m1 _m2 n)
  (id ((eq _m1 _m2)))))

(local theorem zlteq2d ((_G wff ()) (m nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (iff (zlt m _n1) (zlt m _n2)))
()
(zlteqd (_G m m _n1 _n2)
  (eqidd (_G m))
  _h))

(local theorem zlteq2 ((m nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (iff (zlt m _n1) (zlt m _n2)))
()
(zlteq2d ((eq _n1 _n2) m _n1 _n2)
  (id ((eq _n1 _n2)))))

(local def zle ((m nat ()) (n nat ())) (wff ())
()
(not (zlt n m)))

(local theorem zleeqd ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_mh (im _G (eq _m1 _m2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (iff (zle _m1 _n1) (zle _m2 _n2)))
()
(:conv (im _G (iff (zle _m1 _n1) (zle _m2 _n2)))
  (im
    _G
    (iff
      (:unfold zle (_m1 _n1) ()
        (not (zlt _n1 _m1)))
      (:unfold zle (_m2 _n2) ()
        (not (zlt _n2 _m2)))))
  (noteqd (_G (zlt _n1 _m1) (zlt _n2 _m2))
    (zlteqd (_G _n1 _n2 _m1 _m2)
      _nh
      _mh))))

(local theorem zleeq ((_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _m1 _m2) (im (eq _n1 _n2) (iff (zle _m1 _n1) (zle _m2 _n2))))
()
(exp ((eq _m1 _m2) (eq _n1 _n2) (iff (zle _m1 _n1) (zle _m2 _n2)))
  (zleeqd ((an (eq _m1 _m2) (eq _n1 _n2)) _m1 _m2 _n1 _n2)
    (anl ((eq _m1 _m2) (eq _n1 _n2)))
    (anr ((eq _m1 _m2) (eq _n1 _n2))))))

(local theorem zleeq1d ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (n nat ()))
  ((_h (im _G (eq _m1 _m2))))
  (im _G (iff (zle _m1 n) (zle _m2 n)))
()
(zleeqd (_G _m1 _m2 n n)
  _h
  (eqidd (_G n))))

(local theorem zleeq1 ((_m1 nat ()) (_m2 nat ()) (n nat ())) ()
  (im (eq _m1 _m2) (iff (zle _m1 n) (zle _m2 n)))
()
(zleeq1d ((eq _m1 _m2) _m1 _m2 n)
  (id ((eq _m1 _m2)))))

(local theorem zleeq2d ((_G wff ()) (m nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (iff (zle m _n1) (zle m _n2)))
()
(zleeqd (_G m m _n1 _n2)
  (eqidd (_G m))
  _h))

(local theorem zleeq2 ((m nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (iff (zle m _n1) (zle m _n2)))
()
(zleeq2d ((eq _n1 _n2) m _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zlenlt ((a nat ()) (b nat ())) ()
  (iff (zle a b) (not (zlt b a)))
()
(:conv (iff (zle a b) (not (zlt b a)))
  (iff
    (zle a b)
    (:sym (:unfold zle (a b) ()
      (not (zlt b a)))))
  (biid ((zle a b)))))

(local theorem zltnle ((a nat ()) (b nat ())) ()
  (iff (zlt a b) (not (zle b a)))
()
(ax_mp ((iff (zle b a) (not (zlt a b))) (iff (zlt a b) (not (zle b a))))
  (con2b ((zle b a) (zlt a b)))
  (zlenlt (b a))))

(local theorem zlt01 ((a nat ())) ()
  (iff (zlt a (d0)) (odd a))
()
(ax_mp ((eq (zsub a (d0)) a) (iff (zlt a (d0)) (odd a)))
  (:conv (im (eq (zsub a (d0)) a) (iff (zlt a (d0)) (odd a)))
    (im
      (eq (zsub a (d0)) a)
      (iff
        (:unfold zlt (a (d0)) ()
          (odd (zsub a (d0))))
        (odd a)))
    (oddeq ((zsub a (d0)) a)))
  (zsub02 (a))))

(local theorem zle02 ((a nat ())) ()
  (iff (zle (d0) a) (not (odd a)))
()
(ax_mp ((iff (zlt a (d0)) (odd a)) (iff (zle (d0) a) (not (odd a))))
  (:conv (im (iff (zlt a (d0)) (odd a)) (iff (zle (d0) a) (not (odd a))))
    (im
      (iff (zlt a (d0)) (odd a))
      (iff
        (:unfold zle ((d0) a) ()
          (not (zlt a (d0))))
        (not (odd a))))
    (noteq ((zlt a (d0)) (odd a))))
  (zlt01 (a))))

(local theorem zle0b0 ((a nat ())) ()
  (zle (d0) (b0 a))
()
(mpbir ((not (odd (b0 a))) (zle (d0) (b0 a)))
  (zle02 ((b0 a)))
  (b0odd (a))))

(local theorem zltb10 ((a nat ())) ()
  (zlt (b1 a) (d0))
()
(mpbir ((odd (b1 a)) (zlt (b1 a) (d0)))
  (zlt01 ((b1 a)))
  (b1odd (a))))

(local theorem zle0b1 ((a nat ())) ()
  (not (zle (d0) (b1 a)))
()
(mpbi ((zlt (b1 a) (d0)) (not (zle (d0) (b1 a))))
  (zltnle ((b1 a) (d0)))
  (zltb10 (a))))

(local theorem zltb00 ((a nat ())) ()
  (not (zlt (b0 a) (d0)))
()
(:conv (not (zlt (b0 a) (d0)))
  (:sym (:unfold zle ((d0) (b0 a)) ()
    (not (zlt (b0 a) (d0)))))
  (zle0b0 (a))))

(local theorem zlt01eq ((a nat ())) ()
  (iff (zlt a (d0)) (eq a (b1 (div a (d2)))))
()
(ax_mp ((iff (odd a) (eq a (b1 (div a (d2))))) (iff (zlt a (d0)) (eq a (b1 (div a (d2))))))
  (ax_mp ((iff (zlt a (d0)) (odd a)) (im (iff (odd a) (eq a (b1 (div a (d2))))) (iff (zlt a (d0)) (eq a (b1 (div a (d2)))))))
    (bitr ((zlt a (d0)) (odd a) (eq a (b1 (div a (d2))))))
    (zlt01 (a)))
  (eqb1 (a))))

(local theorem zle02eq ((a nat ())) ()
  (iff (zle (d0) a) (eq a (b0 (div a (d2)))))
()
(ax_mp ((iff (not (odd a)) (eq a (b0 (div a (d2))))) (iff (zle (d0) a) (eq a (b0 (div a (d2))))))
  (ax_mp ((iff (zle (d0) a) (not (odd a))) (im (iff (not (odd a)) (eq a (b0 (div a (d2))))) (iff (zle (d0) a) (eq a (b0 (div a (d2)))))))
    (bitr ((zle (d0) a) (not (odd a)) (eq a (b0 (div a (d2))))))
    (zle02 (a)))
  (eqb0 (a))))

(local theorem zltb0 ((a nat ()) (b nat ())) ()
  (iff (zlt (b0 a) (b0 b)) (lt a b))
()
(ax_mp ((iff (odd (znsub a b)) (lt a b)) (iff (zlt (b0 a) (b0 b)) (lt a b)))
  (ax_mp ((iff (zlt (b0 a) (b0 b)) (odd (znsub a b))) (im (iff (odd (znsub a b)) (lt a b)) (iff (zlt (b0 a) (b0 b)) (lt a b))))
    (bitr ((zlt (b0 a) (b0 b)) (odd (znsub a b)) (lt a b)))
    (ax_mp ((eq (zsub (b0 a) (b0 b)) (znsub a b)) (iff (zlt (b0 a) (b0 b)) (odd (znsub a b))))
      (:conv (im (eq (zsub (b0 a) (b0 b)) (znsub a b)) (iff (zlt (b0 a) (b0 b)) (odd (znsub a b))))
        (im
          (eq (zsub (b0 a) (b0 b)) (znsub a b))
          (iff
            (:unfold zlt ((b0 a) (b0 b)) ()
              (odd (zsub (b0 a) (b0 b))))
            (odd (znsub a b))))
        (oddeq ((zsub (b0 a) (b0 b)) (znsub a b))))
      (zsubb0 (a b))))
  (znsubodd (a b))))

(local theorem zleb0 ((a nat ()) (b nat ())) ()
  (iff (zle (b0 a) (b0 b)) (le a b))
()
(ax_mp ((iff (le a b) (not (lt b a))) (iff (zle (b0 a) (b0 b)) (le a b)))
  (ax_mp ((iff (zle (b0 a) (b0 b)) (not (lt b a))) (im (iff (le a b) (not (lt b a))) (iff (zle (b0 a) (b0 b)) (le a b))))
    (bitr4 ((zle (b0 a) (b0 b)) (not (lt b a)) (le a b)))
    (ax_mp ((iff (zlt (b0 b) (b0 a)) (lt b a)) (iff (zle (b0 a) (b0 b)) (not (lt b a))))
      (:conv (im (iff (zlt (b0 b) (b0 a)) (lt b a)) (iff (zle (b0 a) (b0 b)) (not (lt b a))))
        (im
          (iff (zlt (b0 b) (b0 a)) (lt b a))
          (iff
            (:unfold zle ((b0 a) (b0 b)) ()
              (not (zlt (b0 b) (b0 a))))
            (not (lt b a))))
        (noteq ((zlt (b0 b) (b0 a)) (lt b a))))
      (zltb0 (b a))))
  (lenlt (a b))))

(local theorem zltadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (zlt a b) (zlt (zadd a c) (zadd b c)))
()
(ax_mp ((eq (zsub a b) (zsub (zadd a c) (zadd b c))) (iff (zlt a b) (zlt (zadd a c) (zadd b c))))
  (:conv (im (eq (zsub a b) (zsub (zadd a c) (zadd b c))) (iff (zlt a b) (zlt (zadd a c) (zadd b c))))
    (im
      (eq (zsub a b) (zsub (zadd a c) (zadd b c)))
      (iff
        (:unfold zlt (a b) ()
          (odd (zsub a b)))
        (:unfold zlt ((zadd a c) (zadd b c)) ()
          (odd (zsub (zadd a c) (zadd b c))))))
    (oddeq ((zsub a b) (zsub (zadd a c) (zadd b c)))))
  (ax_mp ((eq (zsub (zadd a c) (zadd b c)) (zsub a b)) (eq (zsub a b) (zsub (zadd a c) (zadd b c))))
    (eqcom ((zsub (zadd a c) (zadd b c)) (zsub a b)))
    (zpnpcan1 (a b c)))))

(local theorem zltadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (zlt b c) (zlt (zadd a b) (zadd a c)))
()
(ax_mp ((eq (zsub b c) (zsub (zadd a b) (zadd a c))) (iff (zlt b c) (zlt (zadd a b) (zadd a c))))
  (:conv (im (eq (zsub b c) (zsub (zadd a b) (zadd a c))) (iff (zlt b c) (zlt (zadd a b) (zadd a c))))
    (im
      (eq (zsub b c) (zsub (zadd a b) (zadd a c)))
      (iff
        (:unfold zlt (b c) ()
          (odd (zsub b c)))
        (:unfold zlt ((zadd a b) (zadd a c)) ()
          (odd (zsub (zadd a b) (zadd a c))))))
    (oddeq ((zsub b c) (zsub (zadd a b) (zadd a c)))))
  (ax_mp ((eq (zsub (zadd a b) (zadd a c)) (zsub b c)) (eq (zsub b c) (zsub (zadd a b) (zadd a c))))
    (eqcom ((zsub (zadd a b) (zadd a c)) (zsub b c)))
    (zpnpcan2 (a b c)))))

(local theorem zleadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (zle a b) (zle (zadd a c) (zadd b c)))
()
(ax_mp ((iff (zlt b a) (zlt (zadd b c) (zadd a c))) (iff (zle a b) (zle (zadd a c) (zadd b c))))
  (:conv (im (iff (zlt b a) (zlt (zadd b c) (zadd a c))) (iff (zle a b) (zle (zadd a c) (zadd b c))))
    (im
      (iff (zlt b a) (zlt (zadd b c) (zadd a c)))
      (iff
        (:unfold zle (a b) ()
          (not (zlt b a)))
        (:unfold zle ((zadd a c) (zadd b c)) ()
          (not (zlt (zadd b c) (zadd a c))))))
    (noteq ((zlt b a) (zlt (zadd b c) (zadd a c)))))
  (zltadd1 (b a c))))

(local theorem zleadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (zle b c) (zle (zadd a b) (zadd a c)))
()
(ax_mp ((iff (zlt c b) (zlt (zadd a c) (zadd a b))) (iff (zle b c) (zle (zadd a b) (zadd a c))))
  (:conv (im (iff (zlt c b) (zlt (zadd a c) (zadd a b))) (iff (zle b c) (zle (zadd a b) (zadd a c))))
    (im
      (iff (zlt c b) (zlt (zadd a c) (zadd a b)))
      (iff
        (:unfold zle (b c) ()
          (not (zlt c b)))
        (:unfold zle ((zadd a b) (zadd a c)) ()
          (not (zlt (zadd a c) (zadd a b))))))
    (noteq ((zlt c b) (zlt (zadd a c) (zadd a b)))))
  (zltadd2 (a c b))))

(local theorem zltaddsub ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (zlt (zadd a b) c) (zlt a (zsub c b)))
()
(ax_mp ((iff (zlt (zadd a b) (zadd (zsub c b) b)) (zlt (zadd a b) c)) (iff (zlt (zadd a b) c) (zlt a (zsub c b))))
  (ax_mp ((iff (zlt a (zsub c b)) (zlt (zadd a b) (zadd (zsub c b) b))) (im (iff (zlt (zadd a b) (zadd (zsub c b) b)) (zlt (zadd a b) c)) (iff (zlt (zadd a b) c) (zlt a (zsub c b)))))
    (bitr2 ((zlt a (zsub c b)) (zlt (zadd a b) (zadd (zsub c b) b)) (zlt (zadd a b) c)))
    (zltadd1 (a (zsub c b) b)))
  (ax_mp ((eq (zadd (zsub c b) b) c) (iff (zlt (zadd a b) (zadd (zsub c b) b)) (zlt (zadd a b) c)))
    (zlteq2 ((zadd a b) (zadd (zsub c b) b) c))
    (znpcan (c b)))))

(local theorem zltsubadd ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (zlt (zsub a b) c) (zlt a (zadd c b)))
()
(ax_mp ((iff (zlt (zadd a (zneg b)) (zadd (zadd c b) (zneg b))) (zlt (zsub a b) c)) (iff (zlt (zsub a b) c) (zlt a (zadd c b))))
  (ax_mp ((iff (zlt a (zadd c b)) (zlt (zadd a (zneg b)) (zadd (zadd c b) (zneg b)))) (im (iff (zlt (zadd a (zneg b)) (zadd (zadd c b) (zneg b))) (zlt (zsub a b) c)) (iff (zlt (zsub a b) c) (zlt a (zadd c b)))))
    (bitr2 ((zlt a (zadd c b)) (zlt (zadd a (zneg b)) (zadd (zadd c b) (zneg b))) (zlt (zsub a b) c)))
    (zltadd1 (a (zadd c b) (zneg b))))
  (ax_mp ((eq (zadd (zadd c b) (zneg b)) c) (iff (zlt (zadd a (zneg b)) (zadd (zadd c b) (zneg b))) (zlt (zsub a b) c)))
    (:conv (im (eq (zadd (zadd c b) (zneg b)) c) (iff (zlt (zadd a (zneg b)) (zadd (zadd c b) (zneg b))) (zlt (zsub a b) c)))
      (im
        (eq (zadd (zadd c b) (zneg b)) c)
        (iff
          (zlt (zadd a (zneg b)) (zadd (zadd c b) (zneg b)))
          (zlt
            (:unfold zsub (a b) ()
              (zadd a (zneg b)))
            c)))
      (zlteq2 ((zadd a (zneg b)) (zadd (zadd c b) (zneg b)) c)))
    (:conv (eq (zadd (zadd c b) (zneg b)) c)
      (eq
        (:sym (:unfold zsub ((zadd c b) b) ()
          (zadd (zadd c b) (zneg b))))
        c)
      (zpncan (c b))))))

(local theorem zlt0neg ((a nat ())) ()
  (iff (zlt (d0) (zneg a)) (zlt a (d0)))
()
(ax_mp ((eq (zsub (d0) (zneg a)) (zsub a (d0))) (iff (zlt (d0) (zneg a)) (zlt a (d0))))
  (:conv (im (eq (zsub (d0) (zneg a)) (zsub a (d0))) (iff (zlt (d0) (zneg a)) (zlt a (d0))))
    (im
      (eq (zsub (d0) (zneg a)) (zsub a (d0)))
      (iff
        (:unfold zlt ((d0) (zneg a)) ()
          (odd (zsub (d0) (zneg a))))
        (:unfold zlt (a (d0)) ()
          (odd (zsub a (d0))))))
    (oddeq ((zsub (d0) (zneg a)) (zsub a (d0)))))
  (ax_mp ((eq (zsub a (d0)) (zneg (zneg a))) (eq (zsub (d0) (zneg a)) (zsub a (d0))))
    (ax_mp ((eq (zsub (d0) (zneg a)) (zneg (zneg a))) (im (eq (zsub a (d0)) (zneg (zneg a))) (eq (zsub (d0) (zneg a)) (zsub a (d0)))))
      (eqtr4 ((zsub (d0) (zneg a)) (zneg (zneg a)) (zsub a (d0))))
      (zsub01 ((zneg a))))
    (ax_mp ((eq (zneg (zneg a)) a) (eq (zsub a (d0)) (zneg (zneg a))))
      (ax_mp ((eq (zsub a (d0)) a) (im (eq (zneg (zneg a)) a) (eq (zsub a (d0)) (zneg (zneg a)))))
        (eqtr4 ((zsub a (d0)) a (zneg (zneg a))))
        (zsub02 (a)))
      (znegneg (a))))))

(local theorem zltneg0 ((a nat ())) ()
  (iff (zlt (zneg a) (d0)) (zlt (d0) a))
()
(ax_mp ((iff (zlt (d0) (zneg (zneg a))) (zlt (d0) a)) (iff (zlt (zneg a) (d0)) (zlt (d0) a)))
  (ax_mp ((iff (zlt (d0) (zneg (zneg a))) (zlt (zneg a) (d0))) (im (iff (zlt (d0) (zneg (zneg a))) (zlt (d0) a)) (iff (zlt (zneg a) (d0)) (zlt (d0) a))))
    (bitr3 ((zlt (zneg a) (d0)) (zlt (d0) (zneg (zneg a))) (zlt (d0) a)))
    (zlt0neg ((zneg a))))
  (ax_mp ((eq (zneg (zneg a)) a) (iff (zlt (d0) (zneg (zneg a))) (zlt (d0) a)))
    (zlteq2 ((d0) (zneg (zneg a)) a))
    (znegneg (a)))))

(local theorem zle0neg ((a nat ())) ()
  (iff (zle (d0) (zneg a)) (zle a (d0)))
()
(ax_mp ((iff (zlt (zneg a) (d0)) (zlt (d0) a)) (iff (zle (d0) (zneg a)) (zle a (d0))))
  (:conv (im (iff (zlt (zneg a) (d0)) (zlt (d0) a)) (iff (zle (d0) (zneg a)) (zle a (d0))))
    (im
      (iff (zlt (zneg a) (d0)) (zlt (d0) a))
      (iff
        (:unfold zle ((d0) (zneg a)) ()
          (not (zlt (zneg a) (d0))))
        (:unfold zle (a (d0)) ()
          (not (zlt (d0) a)))))
    (noteq ((zlt (zneg a) (d0)) (zlt (d0) a))))
  (zltneg0 (a))))

(local theorem zleneg0 ((a nat ())) ()
  (iff (zle (zneg a) (d0)) (zle (d0) a))
()
(ax_mp ((iff (zlt (d0) (zneg a)) (zlt a (d0))) (iff (zle (zneg a) (d0)) (zle (d0) a)))
  (:conv (im (iff (zlt (d0) (zneg a)) (zlt a (d0))) (iff (zle (zneg a) (d0)) (zle (d0) a)))
    (im
      (iff (zlt (d0) (zneg a)) (zlt a (d0)))
      (iff
        (:unfold zle ((zneg a) (d0)) ()
          (not (zlt (d0) (zneg a))))
        (:unfold zle ((d0) a) ()
          (not (zlt a (d0))))))
    (noteq ((zlt (d0) (zneg a)) (zlt a (d0)))))
  (zlt0neg (a))))

(local theorem zlt0sub ((a nat ()) (b nat ())) ()
  (iff (zlt (d0) (zsub a b)) (zlt b a))
()
(ax_mp ((iff (zlt (zadd (d0) b) a) (zlt b a)) (iff (zlt (d0) (zsub a b)) (zlt b a)))
  (ax_mp ((iff (zlt (zadd (d0) b) a) (zlt (d0) (zsub a b))) (im (iff (zlt (zadd (d0) b) a) (zlt b a)) (iff (zlt (d0) (zsub a b)) (zlt b a))))
    (bitr3 ((zlt (d0) (zsub a b)) (zlt (zadd (d0) b) a) (zlt b a)))
    (zltaddsub ((d0) b a)))
  (ax_mp ((eq (zadd (d0) b) b) (iff (zlt (zadd (d0) b) a) (zlt b a)))
    (zlteq1 ((zadd (d0) b) b a))
    (zadd01 (b)))))

(local theorem zltsub0 ((a nat ()) (b nat ())) ()
  (iff (zlt (zsub a b) (d0)) (zlt a b))
()
(ax_mp ((iff (zlt (d0) (zneg (zsub a b))) (zlt a b)) (iff (zlt (zsub a b) (d0)) (zlt a b)))
  (ax_mp ((iff (zlt (d0) (zneg (zsub a b))) (zlt (zsub a b) (d0))) (im (iff (zlt (d0) (zneg (zsub a b))) (zlt a b)) (iff (zlt (zsub a b) (d0)) (zlt a b))))
    (bitr3 ((zlt (zsub a b) (d0)) (zlt (d0) (zneg (zsub a b))) (zlt a b)))
    (zlt0neg ((zsub a b))))
  (ax_mp ((iff (zlt (d0) (zsub b a)) (zlt a b)) (iff (zlt (d0) (zneg (zsub a b))) (zlt a b)))
    (ax_mp ((iff (zlt (d0) (zneg (zsub a b))) (zlt (d0) (zsub b a))) (im (iff (zlt (d0) (zsub b a)) (zlt a b)) (iff (zlt (d0) (zneg (zsub a b))) (zlt a b))))
      (bitr ((zlt (d0) (zneg (zsub a b))) (zlt (d0) (zsub b a)) (zlt a b)))
      (ax_mp ((eq (zneg (zsub a b)) (zsub b a)) (iff (zlt (d0) (zneg (zsub a b))) (zlt (d0) (zsub b a))))
        (zlteq2 ((d0) (zneg (zsub a b)) (zsub b a)))
        (znegsub (a b))))
    (zlt0sub (b a)))))

(local theorem zle0sub ((a nat ()) (b nat ())) ()
  (iff (zle (d0) (zsub a b)) (zle b a))
()
(ax_mp ((iff (zlt (zsub a b) (d0)) (zlt a b)) (iff (zle (d0) (zsub a b)) (zle b a)))
  (:conv (im (iff (zlt (zsub a b) (d0)) (zlt a b)) (iff (zle (d0) (zsub a b)) (zle b a)))
    (im
      (iff (zlt (zsub a b) (d0)) (zlt a b))
      (iff
        (:unfold zle ((d0) (zsub a b)) ()
          (not (zlt (zsub a b) (d0))))
        (:unfold zle (b a) ()
          (not (zlt a b)))))
    (noteq ((zlt (zsub a b) (d0)) (zlt a b))))
  (zltsub0 (a b))))

(local theorem zlesub0 ((a nat ()) (b nat ())) ()
  (iff (zle (zsub a b) (d0)) (zle a b))
()
(ax_mp ((iff (zlt (d0) (zsub a b)) (zlt b a)) (iff (zle (zsub a b) (d0)) (zle a b)))
  (:conv (im (iff (zlt (d0) (zsub a b)) (zlt b a)) (iff (zle (zsub a b) (d0)) (zle a b)))
    (im
      (iff (zlt (d0) (zsub a b)) (zlt b a))
      (iff
        (:unfold zle ((zsub a b) (d0)) ()
          (not (zlt (d0) (zsub a b))))
        (:unfold zle (a b) ()
          (not (zlt b a)))))
    (noteq ((zlt (d0) (zsub a b)) (zlt b a))))
  (zlt0sub (a b))))

(local theorem zlt0znsub ((a nat ()) (b nat ())) ()
  (iff (zlt (d0) (znsub a b)) (lt b a))
()
(ax_mp ((iff (zlt (d0) (zsub (b0 a) (b0 b))) (lt b a)) (iff (zlt (d0) (znsub a b)) (lt b a)))
  (ax_mp ((iff (zlt (d0) (zsub (b0 a) (b0 b))) (zlt (d0) (znsub a b))) (im (iff (zlt (d0) (zsub (b0 a) (b0 b))) (lt b a)) (iff (zlt (d0) (znsub a b)) (lt b a))))
    (bitr3 ((zlt (d0) (znsub a b)) (zlt (d0) (zsub (b0 a) (b0 b))) (lt b a)))
    (ax_mp ((eq (zsub (b0 a) (b0 b)) (znsub a b)) (iff (zlt (d0) (zsub (b0 a) (b0 b))) (zlt (d0) (znsub a b))))
      (zlteq2 ((d0) (zsub (b0 a) (b0 b)) (znsub a b)))
      (zsubb0 (a b))))
  (ax_mp ((iff (zlt (b0 b) (b0 a)) (lt b a)) (iff (zlt (d0) (zsub (b0 a) (b0 b))) (lt b a)))
    (ax_mp ((iff (zlt (d0) (zsub (b0 a) (b0 b))) (zlt (b0 b) (b0 a))) (im (iff (zlt (b0 b) (b0 a)) (lt b a)) (iff (zlt (d0) (zsub (b0 a) (b0 b))) (lt b a))))
      (bitr ((zlt (d0) (zsub (b0 a) (b0 b))) (zlt (b0 b) (b0 a)) (lt b a)))
      (zlt0sub ((b0 a) (b0 b))))
    (zltb0 (b a)))))

(local theorem zltznsub0 ((a nat ()) (b nat ())) ()
  (iff (zlt (znsub a b) (d0)) (lt a b))
()
(ax_mp ((iff (zlt (zsub (b0 a) (b0 b)) (d0)) (lt a b)) (iff (zlt (znsub a b) (d0)) (lt a b)))
  (ax_mp ((iff (zlt (zsub (b0 a) (b0 b)) (d0)) (zlt (znsub a b) (d0))) (im (iff (zlt (zsub (b0 a) (b0 b)) (d0)) (lt a b)) (iff (zlt (znsub a b) (d0)) (lt a b))))
    (bitr3 ((zlt (znsub a b) (d0)) (zlt (zsub (b0 a) (b0 b)) (d0)) (lt a b)))
    (ax_mp ((eq (zsub (b0 a) (b0 b)) (znsub a b)) (iff (zlt (zsub (b0 a) (b0 b)) (d0)) (zlt (znsub a b) (d0))))
      (zlteq1 ((zsub (b0 a) (b0 b)) (znsub a b) (d0)))
      (zsubb0 (a b))))
  (ax_mp ((iff (zlt (b0 a) (b0 b)) (lt a b)) (iff (zlt (zsub (b0 a) (b0 b)) (d0)) (lt a b)))
    (ax_mp ((iff (zlt (zsub (b0 a) (b0 b)) (d0)) (zlt (b0 a) (b0 b))) (im (iff (zlt (b0 a) (b0 b)) (lt a b)) (iff (zlt (zsub (b0 a) (b0 b)) (d0)) (lt a b))))
      (bitr ((zlt (zsub (b0 a) (b0 b)) (d0)) (zlt (b0 a) (b0 b)) (lt a b)))
      (zltsub0 ((b0 a) (b0 b))))
    (zltb0 (a b)))))

(local theorem zle0znsub ((a nat ()) (b nat ())) ()
  (iff (zle (d0) (znsub a b)) (le b a))
()
(ax_mp ((iff (le b a) (not (lt a b))) (iff (zle (d0) (znsub a b)) (le b a)))
  (ax_mp ((iff (zle (d0) (znsub a b)) (not (lt a b))) (im (iff (le b a) (not (lt a b))) (iff (zle (d0) (znsub a b)) (le b a))))
    (bitr4 ((zle (d0) (znsub a b)) (not (lt a b)) (le b a)))
    (ax_mp ((iff (zlt (znsub a b) (d0)) (lt a b)) (iff (zle (d0) (znsub a b)) (not (lt a b))))
      (:conv (im (iff (zlt (znsub a b) (d0)) (lt a b)) (iff (zle (d0) (znsub a b)) (not (lt a b))))
        (im
          (iff (zlt (znsub a b) (d0)) (lt a b))
          (iff
            (:unfold zle ((d0) (znsub a b)) ()
              (not (zlt (znsub a b) (d0))))
            (not (lt a b))))
        (noteq ((zlt (znsub a b) (d0)) (lt a b))))
      (zltznsub0 (a b))))
  (lenlt (b a))))

(local theorem zleznsub0 ((a nat ()) (b nat ())) ()
  (iff (zle (znsub a b) (d0)) (le a b))
()
(ax_mp ((iff (le a b) (not (lt b a))) (iff (zle (znsub a b) (d0)) (le a b)))
  (ax_mp ((iff (zle (znsub a b) (d0)) (not (lt b a))) (im (iff (le a b) (not (lt b a))) (iff (zle (znsub a b) (d0)) (le a b))))
    (bitr4 ((zle (znsub a b) (d0)) (not (lt b a)) (le a b)))
    (ax_mp ((iff (zlt (d0) (znsub a b)) (lt b a)) (iff (zle (znsub a b) (d0)) (not (lt b a))))
      (:conv (im (iff (zlt (d0) (znsub a b)) (lt b a)) (iff (zle (znsub a b) (d0)) (not (lt b a))))
        (im
          (iff (zlt (d0) (znsub a b)) (lt b a))
          (iff
            (:unfold zle ((znsub a b) (d0)) ()
              (not (zlt (d0) (znsub a b))))
            (not (lt b a))))
        (noteq ((zlt (d0) (znsub a b)) (lt b a))))
      (zlt0znsub (a b))))
  (lenlt (a b))))

(local theorem zsndeq0 ((a nat ())) ()
  (iff (eq (zsnd a) (d0)) (zle (d0) a))
()
(ibii ((eq (zsnd a) (d0)) (zle (d0) a))
  (mpbiri ((eq (zsnd a) (d0)) (zle (d0) (b0 (zfst a))) (zle (d0) a))
    (zle0b0 ((zfst a)))
    (zleeq2d ((eq (zsnd a) (d0)) (d0) a (b0 (zfst a)))
      (syl6eq ((eq (zsnd a) (d0)) a (znsub (zfst a) (d0)) (b0 (zfst a)))
        (znsub02 ((zfst a)))
        (syl5eqr ((eq (zsnd a) (d0)) a (znsub (zfst a) (zsnd a)) (znsub (zfst a) (d0)))
          (zfstsnd (a))
          (znsubeq2 ((zfst a) (zsnd a) (d0)))))))
  (syl6eq ((zle (d0) a) (zsnd a) (zsnd (b0 (div a (d2)))) (d0))
    (zsndb0 ((div a (d2))))
    (sylbi ((zle (d0) a) (eq a (b0 (div a (d2)))) (eq (zsnd a) (zsnd (b0 (div a (d2))))))
      (zle02eq (a))
      (zsndeq (a (b0 (div a (d2)))))))))

(local theorem zfsteq0 ((a nat ())) ()
  (iff (eq (zfst a) (d0)) (zle a (d0)))
()
(ax_mp ((iff (eq (zsnd (zneg a)) (d0)) (zle a (d0))) (iff (eq (zfst a) (d0)) (zle a (d0))))
  (ax_mp ((iff (eq (zsnd (zneg a)) (d0)) (eq (zfst a) (d0))) (im (iff (eq (zsnd (zneg a)) (d0)) (zle a (d0))) (iff (eq (zfst a) (d0)) (zle a (d0)))))
    (bitr3 ((eq (zfst a) (d0)) (eq (zsnd (zneg a)) (d0)) (zle a (d0))))
    (ax_mp ((eq (zsnd (zneg a)) (zfst a)) (iff (eq (zsnd (zneg a)) (d0)) (eq (zfst a) (d0))))
      (eqeq1 ((zsnd (zneg a)) (zfst a) (d0)))
      (zsndneg (a))))
  (ax_mp ((iff (zle (d0) (zneg a)) (zle a (d0))) (iff (eq (zsnd (zneg a)) (d0)) (zle a (d0))))
    (ax_mp ((iff (eq (zsnd (zneg a)) (d0)) (zle (d0) (zneg a))) (im (iff (zle (d0) (zneg a)) (zle a (d0))) (iff (eq (zsnd (zneg a)) (d0)) (zle a (d0)))))
      (bitr ((eq (zsnd (zneg a)) (d0)) (zle (d0) (zneg a)) (zle a (d0))))
      (zsndeq0 ((zneg a))))
    (zle0neg (a)))))

(local theorem zleorle ((a nat ()) (b nat ())) ()
  (or (zle a b) (zle b a))
()
(mpbi ((or (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (or (zle a b) (zle b a)))
  (ax_mp ((iff (eq (zsnd (zsub a b)) (d0)) (zle b a)) (iff (or (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (or (zle a b) (zle b a))))
    (ax_mp ((iff (eq (zfst (zsub a b)) (d0)) (zle a b)) (im (iff (eq (zsnd (zsub a b)) (d0)) (zle b a)) (iff (or (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (or (zle a b) (zle b a)))))
      (oreq ((eq (zfst (zsub a b)) (d0)) (zle a b) (eq (zsnd (zsub a b)) (d0)) (zle b a)))
      (ax_mp ((iff (zle (zsub a b) (d0)) (zle a b)) (iff (eq (zfst (zsub a b)) (d0)) (zle a b)))
        (ax_mp ((iff (eq (zfst (zsub a b)) (d0)) (zle (zsub a b) (d0))) (im (iff (zle (zsub a b) (d0)) (zle a b)) (iff (eq (zfst (zsub a b)) (d0)) (zle a b))))
          (bitr ((eq (zfst (zsub a b)) (d0)) (zle (zsub a b) (d0)) (zle a b)))
          (zfsteq0 ((zsub a b))))
        (zlesub0 (a b))))
    (ax_mp ((iff (zle (d0) (zsub a b)) (zle b a)) (iff (eq (zsnd (zsub a b)) (d0)) (zle b a)))
      (ax_mp ((iff (eq (zsnd (zsub a b)) (d0)) (zle (d0) (zsub a b))) (im (iff (zle (d0) (zsub a b)) (zle b a)) (iff (eq (zsnd (zsub a b)) (d0)) (zle b a))))
        (bitr ((eq (zsnd (zsub a b)) (d0)) (zle (d0) (zsub a b)) (zle b a)))
        (zsndeq0 ((zsub a b))))
      (zle0sub (a b))))
  (zfstsnd0 ((zsub a b)))))

(local theorem zltle ((a nat ()) (b nat ())) ()
  (im (zlt a b) (zle a b))
()
(sylbi ((zlt a b) (not (zle b a)) (zle a b))
  (zltnle (a b))
  (:conv (im (not (zle b a)) (zle a b))
    (:sym (:unfold or ((zle b a) (zle a b)) ()
      (im (not (zle b a)) (zle a b))))
    (zleorle (b a)))))

(local theorem zleasymb ((a nat ()) (b nat ())) ()
  (iff (eq a b) (an (zle a b) (zle b a)))
()
(ax_mp ((iff (eq (zsub a b) (d0)) (an (zle a b) (zle b a))) (iff (eq a b) (an (zle a b) (zle b a))))
  (ax_mp ((iff (eq (zsub a b) (d0)) (eq a b)) (im (iff (eq (zsub a b) (d0)) (an (zle a b) (zle b a))) (iff (eq a b) (an (zle a b) (zle b a)))))
    (bitr3 ((eq a b) (eq (zsub a b) (d0)) (an (zle a b) (zle b a))))
    (zsubeq0 (a b)))
  (ax_mp ((iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle a b) (zle b a))) (iff (eq (zsub a b) (d0)) (an (zle a b) (zle b a))))
    (ax_mp ((iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (eq (zsub a b) (d0))) (im (iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle a b) (zle b a))) (iff (eq (zsub a b) (d0)) (an (zle a b) (zle b a)))))
      (bitr3 ((eq (zsub a b) (d0)) (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle a b) (zle b a))))
      (zfstsndeq0 ((zsub a b))))
    (ax_mp ((iff (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b))) (an (zle a b) (zle b a))) (iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle a b) (zle b a))))
      (ax_mp ((iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b)))) (im (iff (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b))) (an (zle a b) (zle b a))) (iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle a b) (zle b a)))))
        (bitr ((an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b))) (an (zle a b) (zle b a))))
        (ax_mp ((iff (eq (zsnd (zsub a b)) (d0)) (zle (d0) (zsub a b))) (iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b)))))
          (ax_mp ((iff (eq (zfst (zsub a b)) (d0)) (zle (zsub a b) (d0))) (im (iff (eq (zsnd (zsub a b)) (d0)) (zle (d0) (zsub a b))) (iff (an (eq (zfst (zsub a b)) (d0)) (eq (zsnd (zsub a b)) (d0))) (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b))))))
            (aneq ((eq (zfst (zsub a b)) (d0)) (zle (zsub a b) (d0)) (eq (zsnd (zsub a b)) (d0)) (zle (d0) (zsub a b))))
            (zfsteq0 ((zsub a b))))
          (zsndeq0 ((zsub a b)))))
      (ax_mp ((iff (zle (d0) (zsub a b)) (zle b a)) (iff (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b))) (an (zle a b) (zle b a))))
        (ax_mp ((iff (zle (zsub a b) (d0)) (zle a b)) (im (iff (zle (d0) (zsub a b)) (zle b a)) (iff (an (zle (zsub a b) (d0)) (zle (d0) (zsub a b))) (an (zle a b) (zle b a)))))
          (aneq ((zle (zsub a b) (d0)) (zle a b) (zle (d0) (zsub a b)) (zle b a)))
          (zlesub0 (a b)))
        (zle0sub (a b)))))))

(local theorem zleasym ((a nat ()) (b nat ())) ()
  (im (zle a b) (im (zle b a) (eq a b)))
()
(exp ((zle a b) (zle b a) (eq a b))
  (bi2i ((eq a b) (an (zle a b) (zle b a)))
    (zleasymb (a b)))))

(local theorem zaddpos ((a nat ()) (b nat ())) ()
  (im (zle (d0) a) (im (zle (d0) b) (zle (d0) (zadd a b))))
()
(sylbi ((zle (d0) a) (eq a (b0 (div a (d2)))) (im (zle (d0) b) (zle (d0) (zadd a b))))
  (zle02eq (a))
  (syl5bi ((eq a (b0 (div a (d2)))) (zle (d0) b) (eq b (b0 (div b (d2)))) (zle (d0) (zadd a b)))
    (zle02eq (b))
    (exp ((eq a (b0 (div a (d2)))) (eq b (b0 (div b (d2)))) (zle (d0) (zadd a b)))
      (mpbiri ((an (eq a (b0 (div a (d2)))) (eq b (b0 (div b (d2))))) (zle (d0) (b0 (add (div a (d2)) (div b (d2))))) (zle (d0) (zadd a b)))
        (zle0b0 ((add (div a (d2)) (div b (d2)))))
        (zleeq2d ((an (eq a (b0 (div a (d2)))) (eq b (b0 (div b (d2))))) (d0) (zadd a b) (b0 (add (div a (d2)) (div b (d2)))))
          (syl6eq ((an (eq a (b0 (div a (d2)))) (eq b (b0 (div b (d2))))) (zadd a b) (zadd (b0 (div a (d2))) (b0 (div b (d2)))) (b0 (add (div a (d2)) (div b (d2)))))
            (zaddb0 ((div a (d2)) (div b (d2))))
            (zaddeqd ((an (eq a (b0 (div a (d2)))) (eq b (b0 (div b (d2))))) a (b0 (div a (d2))) b (b0 (div b (d2))))
              (anwl ((eq a (b0 (div a (d2)))) (eq b (b0 (div b (d2)))) (eq a (b0 (div a (d2)))))
                (id ((eq a (b0 (div a (d2)))))))
              (anwr ((eq a (b0 (div a (d2)))) (eq b (b0 (div b (d2)))) (eq b (b0 (div b (d2)))))
                (id ((eq b (b0 (div b (d2)))))))))))))))

(local theorem zletr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (zle a b) (im (zle b c) (zle a c)))
()
(sylbir ((zle a b) (zle (d0) (zsub b a)) (im (zle b c) (zle a c)))
  (zle0sub (b a))
  (syl5bir ((zle (d0) (zsub b a)) (zle b c) (zle (d0) (zsub c b)) (zle a c))
    (zle0sub (c b))
    (syl6ib ((zle (d0) (zsub b a)) (zle (d0) (zsub c b)) (zle (d0) (zadd (zsub b a) (zsub c b))) (zle a c))
      (ax_mp ((iff (zle (d0) (zsub c a)) (zle a c)) (iff (zle (d0) (zadd (zsub b a) (zsub c b))) (zle a c)))
        (ax_mp ((iff (zle (d0) (zadd (zsub b a) (zsub c b))) (zle (d0) (zsub c a))) (im (iff (zle (d0) (zsub c a)) (zle a c)) (iff (zle (d0) (zadd (zsub b a) (zsub c b))) (zle a c))))
          (bitr ((zle (d0) (zadd (zsub b a) (zsub c b))) (zle (d0) (zsub c a)) (zle a c)))
          (ax_mp ((eq (zadd (zsub b a) (zsub c b)) (zsub c a)) (iff (zle (d0) (zadd (zsub b a) (zsub c b))) (zle (d0) (zsub c a))))
            (zleeq2 ((d0) (zadd (zsub b a) (zsub c b)) (zsub c a)))
            (znpncan2 (c b a))))
        (zle0sub (c a)))
      (zaddpos ((zsub b a) (zsub c b)))))))

(local theorem zlelttr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (zle a b) (im (zlt b c) (zlt a c)))
()
(con4d ((zle a b) (zlt a c) (zlt b c))
  (com12 ((not (zlt a c)) (zle a b) (not (zlt b c)))
    (:conv (im (not (zlt a c)) (im (zle a b) (not (zlt b c))))
      (im
        (:sym (:unfold zle (c a) ()
          (not (zlt a c))))
        (im
          (zle a b)
          (:sym (:unfold zle (c b) ()
            (not (zlt b c))))))
      (zletr (c a b))))))

(local theorem zltletr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (zlt a b) (im (zle b c) (zlt a c)))
()
(com12 ((zle b c) (zlt a b) (zlt a c))
  (con4d ((zle b c) (zlt a c) (zlt a b))
    (:conv (im (zle b c) (im (not (zlt a c)) (not (zlt a b))))
      (im
        (zle b c)
        (im
          (:sym (:unfold zle (c a) ()
            (not (zlt a c))))
          (:sym (:unfold zle (b a) ()
            (not (zlt a b))))))
      (zletr (b c a))))))

(local theorem zlttr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (zlt a b) (im (zlt b c) (zlt a c)))
()
(syl ((zlt a b) (zle a b) (im (zlt b c) (zlt a c)))
  (zlelttr (a b c))
  (zltle (a b))))

(local theorem zb0orb0div ((a nat ())) ()
  (or (eq a (b0 (div a (d2)))) (eq a (zneg (b0 (div (zneg a) (d2))))))
()
(mpbi ((or (zle (d0) a) (zle a (d0))) (or (eq a (b0 (div a (d2)))) (eq a (zneg (b0 (div (zneg a) (d2)))))))
  (ax_mp ((iff (zle a (d0)) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (or (zle (d0) a) (zle a (d0))) (or (eq a (b0 (div a (d2)))) (eq a (zneg (b0 (div (zneg a) (d2))))))))
    (ax_mp ((iff (zle (d0) a) (eq a (b0 (div a (d2))))) (im (iff (zle a (d0)) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (or (zle (d0) a) (zle a (d0))) (or (eq a (b0 (div a (d2)))) (eq a (zneg (b0 (div (zneg a) (d2)))))))))
      (oreq ((zle (d0) a) (eq a (b0 (div a (d2)))) (zle a (d0)) (eq a (zneg (b0 (div (zneg a) (d2)))))))
      (zle02eq (a)))
    (ax_mp ((iff (zle (d0) (zneg a)) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (zle a (d0)) (eq a (zneg (b0 (div (zneg a) (d2)))))))
      (ax_mp ((iff (zle (d0) (zneg a)) (zle a (d0))) (im (iff (zle (d0) (zneg a)) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (zle a (d0)) (eq a (zneg (b0 (div (zneg a) (d2))))))))
        (bitr3 ((zle a (d0)) (zle (d0) (zneg a)) (eq a (zneg (b0 (div (zneg a) (d2)))))))
        (zle0neg (a)))
      (ax_mp ((iff (eq (zneg a) (b0 (div (zneg a) (d2)))) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (zle (d0) (zneg a)) (eq a (zneg (b0 (div (zneg a) (d2)))))))
        (ax_mp ((iff (zle (d0) (zneg a)) (eq (zneg a) (b0 (div (zneg a) (d2))))) (im (iff (eq (zneg a) (b0 (div (zneg a) (d2)))) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (zle (d0) (zneg a)) (eq a (zneg (b0 (div (zneg a) (d2))))))))
          (bitr ((zle (d0) (zneg a)) (eq (zneg a) (b0 (div (zneg a) (d2)))) (eq a (zneg (b0 (div (zneg a) (d2)))))))
          (zle02eq ((zneg a))))
        (ax_mp ((iff (eq (zneg (b0 (div (zneg a) (d2)))) a) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (eq (zneg a) (b0 (div (zneg a) (d2)))) (eq a (zneg (b0 (div (zneg a) (d2)))))))
          (ax_mp ((iff (eq (zneg a) (b0 (div (zneg a) (d2)))) (eq (zneg (b0 (div (zneg a) (d2)))) a)) (im (iff (eq (zneg (b0 (div (zneg a) (d2)))) a) (eq a (zneg (b0 (div (zneg a) (d2)))))) (iff (eq (zneg a) (b0 (div (zneg a) (d2)))) (eq a (zneg (b0 (div (zneg a) (d2))))))))
            (bitr ((eq (zneg a) (b0 (div (zneg a) (d2)))) (eq (zneg (b0 (div (zneg a) (d2)))) a) (eq a (zneg (b0 (div (zneg a) (d2)))))))
            (znegeqcom (a (b0 (div (zneg a) (d2))))))
          (eqcomb ((zneg (b0 (div (zneg a) (d2)))) a))))))
  (zleorle ((d0) a))))

(local def zmul ((m nat ()) (n nat ())) (nat ())
()
(znsub (add (mul (zfst m) (zfst n)) (mul (zsnd m) (zsnd n))) (add (mul (zfst m) (zsnd n)) (mul (zsnd m) (zfst n)))))

(local theorem zmuleqd ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_mh (im _G (eq _m1 _m2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zmul _m1 _n1) (zmul _m2 _n2)))
()
(:let H1 (zfsteqd (_G _m1 _m2)
  _mh)
(:let H2 (zfsteqd (_G _n1 _n2)
  _nh)
(:let H3 (zsndeqd (_G _m1 _m2)
  _mh)
(:let H4 (zsndeqd (_G _n1 _n2)
  _nh)
(:conv (im _G (eq (zmul _m1 _n1) (zmul _m2 _n2)))
  (im
    _G
    (eq
      (:unfold zmul (_m1 _n1) ()
        (znsub (add (mul (zfst _m1) (zfst _n1)) (mul (zsnd _m1) (zsnd _n1))) (add (mul (zfst _m1) (zsnd _n1)) (mul (zsnd _m1) (zfst _n1)))))
      (:unfold zmul (_m2 _n2) ()
        (znsub (add (mul (zfst _m2) (zfst _n2)) (mul (zsnd _m2) (zsnd _n2))) (add (mul (zfst _m2) (zsnd _n2)) (mul (zsnd _m2) (zfst _n2)))))))
  (znsubeqd (_G (add (mul (zfst _m1) (zfst _n1)) (mul (zsnd _m1) (zsnd _n1))) (add (mul (zfst _m2) (zfst _n2)) (mul (zsnd _m2) (zsnd _n2))) (add (mul (zfst _m1) (zsnd _n1)) (mul (zsnd _m1) (zfst _n1))) (add (mul (zfst _m2) (zsnd _n2)) (mul (zsnd _m2) (zfst _n2))))
    (addeqd (_G (mul (zfst _m1) (zfst _n1)) (mul (zfst _m2) (zfst _n2)) (mul (zsnd _m1) (zsnd _n1)) (mul (zsnd _m2) (zsnd _n2)))
      (muleqd (_G (zfst _m1) (zfst _m2) (zfst _n1) (zfst _n2))
        H1
        H2)
      (muleqd (_G (zsnd _m1) (zsnd _m2) (zsnd _n1) (zsnd _n2))
        H3
        H4))
    (addeqd (_G (mul (zfst _m1) (zsnd _n1)) (mul (zfst _m2) (zsnd _n2)) (mul (zsnd _m1) (zfst _n1)) (mul (zsnd _m2) (zfst _n2)))
      (muleqd (_G (zfst _m1) (zfst _m2) (zsnd _n1) (zsnd _n2))
        H1
        H4)
      (muleqd (_G (zsnd _m1) (zsnd _m2) (zfst _n1) (zfst _n2))
        H3
        H2)))))))))

(local theorem zmuleq ((_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _m1 _m2) (im (eq _n1 _n2) (eq (zmul _m1 _n1) (zmul _m2 _n2))))
()
(exp ((eq _m1 _m2) (eq _n1 _n2) (eq (zmul _m1 _n1) (zmul _m2 _n2)))
  (zmuleqd ((an (eq _m1 _m2) (eq _n1 _n2)) _m1 _m2 _n1 _n2)
    (anl ((eq _m1 _m2) (eq _n1 _n2)))
    (anr ((eq _m1 _m2) (eq _n1 _n2))))))

(local theorem zmuleq1d ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (n nat ()))
  ((_h (im _G (eq _m1 _m2))))
  (im _G (eq (zmul _m1 n) (zmul _m2 n)))
()
(zmuleqd (_G _m1 _m2 n n)
  _h
  (eqidd (_G n))))

(local theorem zmuleq1 ((_m1 nat ()) (_m2 nat ()) (n nat ())) ()
  (im (eq _m1 _m2) (eq (zmul _m1 n) (zmul _m2 n)))
()
(zmuleq1d ((eq _m1 _m2) _m1 _m2 n)
  (id ((eq _m1 _m2)))))

(local theorem zmuleq2d ((_G wff ()) (m nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (zmul m _n1) (zmul m _n2)))
()
(zmuleqd (_G m m _n1 _n2)
  (eqidd (_G m))
  _h))

(local theorem zmuleq2 ((m nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zmul m _n1) (zmul m _n2)))
()
(zmuleq2d ((eq _n1 _n2) m _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zmulznlem ((a1 nat ()) (b1 nat ()) (c1 nat ()) (d1 nat ()) (a2 nat ()) (b2 nat ()) (c2 nat ()) (d2 nat ()))
  ((h1 (eq (add a1 c2) (add a2 c1)))
   (h2 (eq (add b1 d2) (add b2 d1))))
  (eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))
()
(ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
  (ax_mp ((eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (im (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))))
    (eqtr ((add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
    (add4 ((mul a1 b1) (mul c1 d1) (mul a2 d2) (mul b2 c2))))
  (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
    (ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))) (im (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))))
      (eqtr ((add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
      (mpbi ((eq (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))
        (addcan2 ((mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))
        (ax_mp ((eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
          (ax_mp ((eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))))) (im (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
            (eqtr3 ((add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
            (addass ((mul b1 c2) (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))))
          (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
            (ax_mp ((eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2)))) (im (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
              (eqtr ((add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
              (ax_mp ((eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2)))))
                (addeq1 ((add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))))
                (ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                  (ax_mp ((eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2))) (im (eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                    (eqtr ((add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                    (addcom ((mul b1 c2) (add (mul a1 b1) (mul a2 d2)))))
                  (ax_mp ((eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                    (ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2))) (im (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                      (eqtr ((add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                      (addrass ((mul a1 b1) (mul a2 d2) (mul b1 c2))))
                    (ax_mp ((eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                      (ax_mp ((eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2))) (im (eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                        (eqtr ((add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                        (ax_mp ((eq (add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1))) (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2))))
                          (addeq1 ((add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)))
                          (ax_mp ((eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1))))
                            (ax_mp ((eq (add (mul a1 b1) (mul b1 c2)) (add (mul a1 b1) (mul c2 b1))) (im (eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1)))))
                              (eqtr ((add (mul a1 b1) (mul b1 c2)) (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))))
                              (ax_mp ((eq (mul b1 c2) (mul c2 b1)) (eq (add (mul a1 b1) (mul b1 c2)) (add (mul a1 b1) (mul c2 b1))))
                                (addeq2 ((mul a1 b1) (mul b1 c2) (mul c2 b1)))
                                (mulcom (b1 c2))))
                            (ax_mp ((eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))))
                              (ax_mp ((eq (mul (add a1 c2) b1) (add (mul a1 b1) (mul c2 b1))) (im (eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1)))))
                                (eqtr3 ((add (mul a1 b1) (mul c2 b1)) (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))))
                                (addmul (a1 c2 b1)))
                              (ax_mp ((eq (mul (add a2 c1) b1) (add (mul a2 b1) (mul c1 b1))) (eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))))
                                (ax_mp ((eq (mul (add a1 c2) b1) (mul (add a2 c1) b1)) (im (eq (mul (add a2 c1) b1) (add (mul a2 b1) (mul c1 b1))) (eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1)))))
                                  (eqtr ((mul (add a1 c2) b1) (mul (add a2 c1) b1) (add (mul a2 b1) (mul c1 b1))))
                                  (ax_mp ((eq (add a1 c2) (add a2 c1)) (eq (mul (add a1 c2) b1) (mul (add a2 c1) b1)))
                                    (muleq1 ((add a1 c2) (add a2 c1) b1))
                                    h1))
                                (addmul (a2 c1 b1)))))))
                      (ax_mp ((eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                        (ax_mp ((eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1))) (im (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                          (eqtr ((add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                          (addrass ((mul a2 b1) (mul c1 b1) (mul a2 d2))))
                        (ax_mp ((eq (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                          (ax_mp ((eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1))) (im (eq (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                            (eqtr ((add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                            (ax_mp ((eq (add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1))))
                              (addeq1 ((add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)))
                              (ax_mp ((eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))) (eq (add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1))))
                                (ax_mp ((eq (mul a2 (add b1 d2)) (add (mul a2 b1) (mul a2 d2))) (im (eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))) (eq (add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1)))))
                                  (eqtr3 ((add (mul a2 b1) (mul a2 d2)) (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))))
                                  (muladd (a2 b1 d2)))
                                (ax_mp ((eq (mul a2 (add b2 d1)) (add (mul a2 b2) (mul a2 d1))) (eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))))
                                  (ax_mp ((eq (mul a2 (add b1 d2)) (mul a2 (add b2 d1))) (im (eq (mul a2 (add b2 d1)) (add (mul a2 b2) (mul a2 d1))) (eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1)))))
                                    (eqtr ((mul a2 (add b1 d2)) (mul a2 (add b2 d1)) (add (mul a2 b2) (mul a2 d1))))
                                    (ax_mp ((eq (add b1 d2) (add b2 d1)) (eq (mul a2 (add b1 d2)) (mul a2 (add b2 d1))))
                                      (muleq2 (a2 (add b1 d2) (add b2 d1)))
                                      h2))
                                  (muladd (a2 b2 d1))))))
                          (addrass ((mul a2 b2) (mul a2 d1) (mul c1 b1))))))))))
            (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
              (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))) (im (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                (eqtr ((add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                (addass ((add (mul a2 b2) (mul c1 b1)) (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
              (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))) (im (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                  (eqtr3 ((add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                  (ax_mp ((eq (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                    (addeq2 ((add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                    (ax_mp ((eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                      (ax_mp ((eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (im (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                        (eqtr3 ((add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                        (addass ((mul b1 c2) (mul c2 d2) (mul a1 d1))))
                      (ax_mp ((eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                        (ax_mp ((eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1))) (im (eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                          (eqtr ((add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                          (ax_mp ((eq (add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2))) (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1))))
                            (addeq1 ((add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)))
                            (ax_mp ((eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2))))
                              (ax_mp ((eq (add (mul b1 c2) (mul c2 d2)) (add (mul b1 c2) (mul d2 c2))) (im (eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2)))))
                                (eqtr ((add (mul b1 c2) (mul c2 d2)) (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))))
                                (ax_mp ((eq (mul c2 d2) (mul d2 c2)) (eq (add (mul b1 c2) (mul c2 d2)) (add (mul b1 c2) (mul d2 c2))))
                                  (addeq2 ((mul b1 c2) (mul c2 d2) (mul d2 c2)))
                                  (mulcom (c2 d2))))
                              (ax_mp ((eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))))
                                (ax_mp ((eq (mul (add b1 d2) c2) (add (mul b1 c2) (mul d2 c2))) (im (eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2)))))
                                  (eqtr3 ((add (mul b1 c2) (mul d2 c2)) (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))))
                                  (addmul (b1 d2 c2)))
                                (ax_mp ((eq (mul (add b2 d1) c2) (add (mul b2 c2) (mul d1 c2))) (eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))))
                                  (ax_mp ((eq (mul (add b1 d2) c2) (mul (add b2 d1) c2)) (im (eq (mul (add b2 d1) c2) (add (mul b2 c2) (mul d1 c2))) (eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2)))))
                                    (eqtr ((mul (add b1 d2) c2) (mul (add b2 d1) c2) (add (mul b2 c2) (mul d1 c2))))
                                    (ax_mp ((eq (add b1 d2) (add b2 d1)) (eq (mul (add b1 d2) c2) (mul (add b2 d1) c2)))
                                      (muleq1 ((add b1 d2) (add b2 d1) c2))
                                      h2))
                                  (addmul (b2 d1 c2)))))))
                        (ax_mp ((eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                          (ax_mp ((eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1)))) (im (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                            (eqtr ((add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                            (addass ((mul b2 c2) (mul d1 c2) (mul a1 d1))))
                          (ax_mp ((eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                            (ax_mp ((eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (im (eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                              (eqtr4 ((add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                              (ax_mp ((eq (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))))
                                (addeq2 ((mul b2 c2) (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                (ax_mp ((eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                  (ax_mp ((eq (add (mul d1 c2) (mul a1 d1)) (add (mul c2 d1) (mul a1 d1))) (im (eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1)))))
                                    (eqtr ((add (mul d1 c2) (mul a1 d1)) (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                    (ax_mp ((eq (mul d1 c2) (mul c2 d1)) (eq (add (mul d1 c2) (mul a1 d1)) (add (mul c2 d1) (mul a1 d1))))
                                      (addeq1 ((mul d1 c2) (mul c2 d1) (mul a1 d1)))
                                      (mulcom (d1 c2))))
                                  (ax_mp ((eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                    (ax_mp ((eq (add (mul c2 d1) (mul a1 d1)) (add (mul a1 d1) (mul c2 d1))) (im (eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1)))))
                                      (eqtr ((add (mul c2 d1) (mul a1 d1)) (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))))
                                      (addcom ((mul c2 d1) (mul a1 d1))))
                                    (ax_mp ((eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))))
                                      (ax_mp ((eq (mul (add a1 c2) d1) (add (mul a1 d1) (mul c2 d1))) (im (eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1)))))
                                        (eqtr3 ((add (mul a1 d1) (mul c2 d1)) (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))))
                                        (addmul (a1 c2 d1)))
                                      (ax_mp ((eq (mul (add a2 c1) d1) (add (mul a2 d1) (mul c1 d1))) (eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))))
                                        (ax_mp ((eq (mul (add a1 c2) d1) (mul (add a2 c1) d1)) (im (eq (mul (add a2 c1) d1) (add (mul a2 d1) (mul c1 d1))) (eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1)))))
                                          (eqtr ((mul (add a1 c2) d1) (mul (add a2 c1) d1) (add (mul a2 d1) (mul c1 d1))))
                                          (ax_mp ((eq (add a1 c2) (add a2 c1)) (eq (mul (add a1 c2) d1) (mul (add a2 c1) d1)))
                                            (muleq1 ((add a1 c2) (add a2 c1) d1))
                                            h1))
                                        (addmul (a2 c1 d1))))))))
                            (ax_mp ((eq (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))))
                              (ax_mp ((eq (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (im (eq (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1))))))
                                (eqtr3 ((add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))))
                                (addass ((mul a2 d1) (mul c1 d1) (mul b2 c2))))
                              (addcom ((add (mul a2 d1) (mul c1 d1)) (mul b2 c2))))))))))
                (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                  (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))))) (im (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                    (eqtr3 ((add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                    (addass ((add (mul a2 b2) (mul c1 b1)) (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))))
                  (ax_mp ((eq (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                    (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1)))) (im (eq (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                      (eqtr ((add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                      (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1)))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1)))))
                        (addeq1 ((add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))))
                        (addcom ((add (mul a2 b2) (mul c1 b1)) (mul b1 c2)))))
                    (addass ((mul b1 c2) (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))))))))
    (ax_mp ((eq (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
      (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1)))) (im (eq (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))))
        (eqtr ((add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
        (add4 ((mul a2 b2) (mul c1 b1) (mul c2 d2) (mul a1 d1))))
      (ax_mp ((eq (add (mul c1 b1) (mul a1 d1)) (add (mul a1 d1) (mul c1 b1))) (eq (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
        (addeq2 ((add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1)) (add (mul a1 d1) (mul c1 b1))))
        (addcom ((mul c1 b1) (mul a1 d1))))))))

(local theorem zmulzn ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (zmul (znsub a c) (znsub b d)) (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c))))
()
(mpbir ((eq (add (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a d) (mul b c))) (add (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))))) (eq (zmul (znsub a c) (znsub b d)) (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c)))))
  (:conv (iff (eq (zmul (znsub a c) (znsub b d)) (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c)))) (eq (add (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a d) (mul b c))) (add (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))))))
    (iff
      (eq
        (:unfold zmul ((znsub a c) (znsub b d)) ()
          (znsub (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d))))))
        (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c))))
      (eq (add (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a d) (mul b c))) (add (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))))))
    (zneqb ((add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))) (add (mul a d) (mul b c)))))
  (zmulznlem ((zfst (znsub a c)) (zfst (znsub b d)) (zsnd (znsub a c)) (zsnd (znsub b d)) a b c d)
    (mpbi ((eq (znsub (zfst (znsub a c)) (zsnd (znsub a c))) (znsub a c)) (eq (add (zfst (znsub a c)) c) (add a (zsnd (znsub a c)))))
      (zneqb ((zfst (znsub a c)) a (zsnd (znsub a c)) c))
      (zfstsnd ((znsub a c))))
    (mpbi ((eq (znsub (zfst (znsub b d)) (zsnd (znsub b d))) (znsub b d)) (eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))))
      (zneqb ((zfst (znsub b d)) b (zsnd (znsub b d)) d))
      (zfstsnd ((znsub b d)))))))

(local theorem zmulcom ((a nat ()) (b nat ())) ()
  (eq (zmul a b) (zmul b a))
()
(ax_mp ((eq (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))) (eq (zmul a b) (zmul b a)))
  (ax_mp ((eq (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst b) (zfst a)) (mul (zsnd b) (zsnd a)))) (im (eq (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))) (eq (zmul a b) (zmul b a))))
    (:conv (im (eq (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst b) (zfst a)) (mul (zsnd b) (zsnd a)))) (im (eq (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))) (eq (zmul a b) (zmul b a))))
      (im
        (eq (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst b) (zfst a)) (mul (zsnd b) (zsnd a))))
        (im
          (eq (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a))))
          (eq
            (:unfold zmul (a b) ()
              (znsub (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))
            (:unfold zmul (b a) ()
              (znsub (add (mul (zfst b) (zfst a)) (mul (zsnd b) (zsnd a))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a))))))))
      (znsubeq ((add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst b) (zfst a)) (mul (zsnd b) (zsnd a))) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a))))))
    (ax_mp ((eq (mul (zsnd a) (zsnd b)) (mul (zsnd b) (zsnd a))) (eq (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst b) (zfst a)) (mul (zsnd b) (zsnd a)))))
      (ax_mp ((eq (mul (zfst a) (zfst b)) (mul (zfst b) (zfst a))) (im (eq (mul (zsnd a) (zsnd b)) (mul (zsnd b) (zsnd a))) (eq (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst b) (zfst a)) (mul (zsnd b) (zsnd a))))))
        (addeq ((mul (zfst a) (zfst b)) (mul (zfst b) (zfst a)) (mul (zsnd a) (zsnd b)) (mul (zsnd b) (zsnd a))))
        (mulcom ((zfst a) (zfst b))))
      (mulcom ((zsnd a) (zsnd b)))))
  (ax_mp ((eq (add (mul (zsnd a) (zfst b)) (mul (zfst a) (zsnd b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))) (eq (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))))
    (ax_mp ((eq (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zsnd a) (zfst b)) (mul (zfst a) (zsnd b)))) (im (eq (add (mul (zsnd a) (zfst b)) (mul (zfst a) (zsnd b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))) (eq (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a))))))
      (eqtr ((add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zsnd a) (zfst b)) (mul (zfst a) (zsnd b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))))
      (addcom ((mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))
    (ax_mp ((eq (mul (zfst a) (zsnd b)) (mul (zsnd b) (zfst a))) (eq (add (mul (zsnd a) (zfst b)) (mul (zfst a) (zsnd b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a)))))
      (ax_mp ((eq (mul (zsnd a) (zfst b)) (mul (zfst b) (zsnd a))) (im (eq (mul (zfst a) (zsnd b)) (mul (zsnd b) (zfst a))) (eq (add (mul (zsnd a) (zfst b)) (mul (zfst a) (zsnd b))) (add (mul (zfst b) (zsnd a)) (mul (zsnd b) (zfst a))))))
        (addeq ((mul (zsnd a) (zfst b)) (mul (zfst b) (zsnd a)) (mul (zfst a) (zsnd b)) (mul (zsnd b) (zfst a))))
        (mulcom ((zsnd a) (zfst b))))
      (mulcom ((zfst a) (zsnd b)))))))

(local theorem zmulass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zmul (zmul a b) c) (zmul a (zmul b c)))
()
(ax_mp ((eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (zmul a (zmul b c))) (eq (zmul (zmul a b) c) (zmul a (zmul b c))))
  (ax_mp ((eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (zmul (zmul a b) c)) (im (eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (zmul a (zmul b c))) (eq (zmul (zmul a b) c) (zmul a (zmul b c)))))
    (eqtr3 ((zmul (zmul a b) c) (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (zmul a (zmul b c))))
    (ax_mp ((eq (znsub (zfst c) (zsnd c)) c) (eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (zmul (zmul a b) c)))
      (zmuleq2 ((zmul a b) (znsub (zfst c) (zsnd c)) c))
      (zfstsnd (c))))
  (ax_mp ((eq (zmul a (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))) (eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (zmul a (zmul b c))))
    (eqcom ((zmul a (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))))
    (ax_mp ((eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))) (eq (zmul a (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))))
      (ax_mp ((eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (zmul a (zmul b c))) (im (eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))) (eq (zmul a (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c))))))
        (eqtr3 ((zmul a (zmul b c)) (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))))
        (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (zmul a (zmul b c))))
          (zmuleq1 ((znsub (zfst a) (zsnd a)) a (zmul b c)))
          (zfstsnd (a))))
      (ax_mp ((eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))))) (eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))))
        (ax_mp ((eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))))) (im (eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))))) (eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (zmul (zmul a b) (znsub (zfst c) (zsnd c))))))
          (eqtr4 ((zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))) (zmul (zmul a b) (znsub (zfst c) (zsnd c)))))
          (:conv (eq (zmul (znsub (zfst a) (zsnd a)) (zmul b c)) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))))
            (eq
              (zmul
                (znsub (zfst a) (zsnd a))
                (:unfold zmul (b c) ()
                  (znsub (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))))
              (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))))
            (zmulzn ((zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))))))
        (ax_mp ((eq (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))) (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))))) (eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))))))
          (ax_mp ((eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))))) (im (eq (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))) (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))))) (eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))))))
            (eqtr4 ((zmul (zmul a b) (znsub (zfst c) (zsnd c))) (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))) (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))))))
            (:conv (eq (zmul (zmul a b) (znsub (zfst c) (zsnd c))) (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))))
              (eq
                (zmul
                  (:unfold zmul (a b) ()
                    (znsub (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))
                  (znsub (zfst c) (zsnd c)))
                (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))))
              (zmulzn ((add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c)))))
          (ax_mp ((eq (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))) (eq (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))) (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))))))
            (ax_mp ((eq (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c)))) (im (eq (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))) (eq (znsub (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)))) (znsub (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))))))
              (znsubeq ((add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))))
              (ax_mp ((eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (eq (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c)))))
                (ax_mp ((eq (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (im (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (eq (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))))))
                  (eqtr4 ((add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c)))))
                  (ax_mp ((eq (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (eq (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                    (ax_mp ((eq (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c))))) (im (eq (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (eq (add (mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                      (addeq ((mul (zfst a) (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (mul (zsnd a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))
                      (muladd ((zfst a) (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)))))
                    (muladd ((zsnd a) (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c))))))
                (ax_mp ((eq (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                  (ax_mp ((eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (im (eq (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                    (eqtr4 ((add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                    (ax_mp ((eq (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))))
                      (ax_mp ((eq (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c)))) (im (eq (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))))
                        (addeq ((mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zfst c)) (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (mul (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (zsnd c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))
                        (addmul ((mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b)) (zfst c))))
                      (addmul ((mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)) (zsnd c)))))
                  (ax_mp ((eq (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))) (eq (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))))
                    (ax_mp ((eq (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))) (im (eq (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))) (eq (add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))))
                      (eqtr4 ((add (add (mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))))
                      (addass ((mul (zfst a) (mul (zfst b) (zfst c))) (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                    (ax_mp ((eq (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))) (eq (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                      (ax_mp ((eq (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))) (im (eq (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))) (eq (add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))))
                        (eqtr4 ((add (add (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                        (addass ((mul (mul (zfst a) (zfst b)) (zfst c)) (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))))
                      (ax_mp ((eq (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))) (eq (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))))
                        (eqcom ((add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                        (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (eq (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                          (ax_mp ((eq (mul (mul (zfst a) (zfst b)) (zfst c)) (mul (zfst a) (mul (zfst b) (zfst c)))) (im (eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (eq (add (mul (mul (zfst a) (zfst b)) (zfst c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (add (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))))
                            (addeq ((mul (mul (zfst a) (zfst b)) (zfst c)) (mul (zfst a) (mul (zfst b) (zfst c))) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                            (mulass ((zfst a) (zfst b) (zfst c))))
                          (ax_mp ((eq (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                            (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))))) (im (eq (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                              (eqtr ((add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                              (addlass ((mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))
                            (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (eq (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                              (ax_mp ((eq (mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (zfst a) (mul (zsnd b) (zsnd c)))) (im (eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (eq (add (mul (mul (zfst a) (zsnd b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))) (add (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))))
                                (addeq ((mul (mul (zfst a) (zsnd b)) (zsnd c)) (mul (zfst a) (mul (zsnd b) (zsnd c))) (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))
                                (mulass ((zfst a) (zsnd b) (zsnd c))))
                              (ax_mp ((eq (add (mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))
                                (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))) (add (mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zfst c)))) (im (eq (add (mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                                  (eqtr ((add (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c))) (add (mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))
                                  (addcom ((mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (mul (zsnd a) (zfst b)) (zsnd c)))))
                                (ax_mp ((eq (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (zsnd a) (mul (zsnd b) (zfst c)))) (eq (add (mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c))))))
                                  (ax_mp ((eq (mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (zsnd a) (mul (zfst b) (zsnd c)))) (im (eq (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (zsnd a) (mul (zsnd b) (zfst c)))) (eq (add (mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zfst c))) (add (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (zsnd a) (mul (zsnd b) (zfst c)))))))
                                    (addeq ((mul (mul (zsnd a) (zfst b)) (zsnd c)) (mul (zsnd a) (mul (zfst b) (zsnd c))) (mul (mul (zsnd a) (zsnd b)) (zfst c)) (mul (zsnd a) (mul (zsnd b) (zfst c)))))
                                    (mulass ((zsnd a) (zfst b) (zsnd c))))
                                  (mulass ((zsnd a) (zsnd b) (zfst c))))))))))))))
            (ax_mp ((eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (eq (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))))
              (ax_mp ((eq (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (im (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (eq (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))))))
                (eqtr4 ((add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))))
                (ax_mp ((eq (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (eq (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                  (ax_mp ((eq (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c))))) (im (eq (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (eq (add (mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                    (addeq ((mul (zfst a) (add (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (mul (add (mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c))) (zsnd a)) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))
                    (muladd ((zfst a) (mul (zfst b) (zsnd c)) (mul (zsnd b) (zfst c)))))
                  (addmul ((mul (zfst b) (zfst c)) (mul (zsnd b) (zsnd c)) (zsnd a)))))
              (ax_mp ((eq (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                (ax_mp ((eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (im (eq (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                  (eqtr4 ((add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                  (ax_mp ((eq (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))))
                    (ax_mp ((eq (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c)))) (im (eq (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (eq (add (mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))))
                      (addeq ((mul (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (zsnd c)) (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (mul (zfst c) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))
                      (addmul ((mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b)) (zsnd c))))
                    (muladd ((zfst c) (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))))))
                (ax_mp ((eq (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))) (eq (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))))
                  (ax_mp ((eq (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))) (im (eq (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))) (eq (add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))))
                    (eqtr4 ((add (add (mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))))
                    (addass ((mul (zfst a) (mul (zfst b) (zsnd c))) (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                  (ax_mp ((eq (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))) (eq (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                    (ax_mp ((eq (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))) (im (eq (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))) (eq (add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))))
                      (eqtr4 ((add (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                      (addass ((mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))))
                    (ax_mp ((eq (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))) (eq (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))))
                      (eqcom ((add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                      (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (eq (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                        (ax_mp ((eq (mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (zfst a) (mul (zfst b) (zsnd c)))) (im (eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (eq (add (mul (mul (zfst a) (zfst b)) (zsnd c)) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (add (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))))
                          (addeq ((mul (mul (zfst a) (zfst b)) (zsnd c)) (mul (zfst a) (mul (zfst b) (zsnd c))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                          (mulass ((zfst a) (zfst b) (zsnd c))))
                        (ax_mp ((eq (add (mul (zfst c) (mul (zfst a) (zsnd b))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                          (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))))) (im (eq (add (mul (zfst c) (mul (zfst a) (zsnd b))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                            (eqtr ((add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst c) (mul (zfst a) (zsnd b))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                            (addlass ((mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst c) (mul (zsnd a) (zfst b))))))
                          (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (eq (add (mul (zfst c) (mul (zfst a) (zsnd b))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                            (ax_mp ((eq (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst a) (mul (zsnd b) (zfst c)))) (im (eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (eq (add (mul (zfst c) (mul (zfst a) (zsnd b))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b))))) (add (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))))
                              (addeq ((mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst a) (mul (zsnd b) (zfst c))) (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))
                              (ax_mp ((eq (mul (mul (zfst a) (zsnd b)) (zfst c)) (mul (zfst a) (mul (zsnd b) (zfst c)))) (eq (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst a) (mul (zsnd b) (zfst c)))))
                                (ax_mp ((eq (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (mul (zfst a) (zsnd b)) (zfst c))) (im (eq (mul (mul (zfst a) (zsnd b)) (zfst c)) (mul (zfst a) (mul (zsnd b) (zfst c)))) (eq (mul (zfst c) (mul (zfst a) (zsnd b))) (mul (zfst a) (mul (zsnd b) (zfst c))))))
                                  (eqtr ((mul (zfst c) (mul (zfst a) (zsnd b))) (mul (mul (zfst a) (zsnd b)) (zfst c)) (mul (zfst a) (mul (zsnd b) (zfst c)))))
                                  (mulcom ((zfst c) (mul (zfst a) (zsnd b)))))
                                (mulass ((zfst a) (zsnd b) (zfst c)))))
                            (ax_mp ((eq (add (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))
                              (ax_mp ((eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (add (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zsnd a) (zsnd b)) (zsnd c)))) (im (eq (add (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))) (eq (add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                                (eqtr ((add (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (add (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))
                                (addcom ((mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (zfst c) (mul (zsnd a) (zfst b))))))
                              (ax_mp ((eq (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))) (eq (add (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))
                                (ax_mp ((eq (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zfst b) (zfst c)) (zsnd a))) (im (eq (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))) (eq (add (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zsnd a) (zsnd b)) (zsnd c))) (add (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))))
                                  (addeq ((mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zfst b) (zfst c)) (zsnd a)) (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))
                                  (ax_mp ((eq (mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (mul (zfst b) (zfst c)) (zsnd a))) (eq (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zfst b) (zfst c)) (zsnd a))))
                                    (ax_mp ((eq (mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (zfst c) (mul (zsnd a) (zfst b)))) (im (eq (mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (mul (zfst b) (zfst c)) (zsnd a))) (eq (mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zfst b) (zfst c)) (zsnd a)))))
                                      (eqtr3 ((mul (zfst c) (mul (zsnd a) (zfst b))) (mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (mul (zfst b) (zfst c)) (zsnd a))))
                                      (mulass ((zfst c) (zsnd a) (zfst b))))
                                    (ax_mp ((eq (mul (mul (zfst c) (zfst b)) (zsnd a)) (mul (mul (zfst b) (zfst c)) (zsnd a))) (eq (mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (mul (zfst b) (zfst c)) (zsnd a))))
                                      (ax_mp ((eq (mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (mul (zfst c) (zfst b)) (zsnd a))) (im (eq (mul (mul (zfst c) (zfst b)) (zsnd a)) (mul (mul (zfst b) (zfst c)) (zsnd a))) (eq (mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (mul (zfst b) (zfst c)) (zsnd a)))))
                                        (eqtr ((mul (mul (zfst c) (zsnd a)) (zfst b)) (mul (mul (zfst c) (zfst b)) (zsnd a)) (mul (mul (zfst b) (zfst c)) (zsnd a))))
                                        (mulrass ((zfst c) (zsnd a) (zfst b))))
                                      (ax_mp ((eq (mul (zfst c) (zfst b)) (mul (zfst b) (zfst c))) (eq (mul (mul (zfst c) (zfst b)) (zsnd a)) (mul (mul (zfst b) (zfst c)) (zsnd a))))
                                        (muleq1 ((mul (zfst c) (zfst b)) (mul (zfst b) (zfst c)) (zsnd a)))
                                        (mulcom ((zfst c) (zfst b)))))))
                                (ax_mp ((eq (mul (mul (zsnd b) (zsnd a)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))) (eq (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))
                                  (ax_mp ((eq (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd a)) (zsnd c))) (im (eq (mul (mul (zsnd b) (zsnd a)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))) (eq (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a)))))
                                    (eqtr ((mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd a)) (zsnd c)) (mul (mul (zsnd b) (zsnd c)) (zsnd a))))
                                    (ax_mp ((eq (mul (zsnd a) (zsnd b)) (mul (zsnd b) (zsnd a))) (eq (mul (mul (zsnd a) (zsnd b)) (zsnd c)) (mul (mul (zsnd b) (zsnd a)) (zsnd c))))
                                      (muleq1 ((mul (zsnd a) (zsnd b)) (mul (zsnd b) (zsnd a)) (zsnd c)))
                                      (mulcom ((zsnd a) (zsnd b)))))
                                  (mulrass ((zsnd b) (zsnd a) (zsnd c)))))))))))))))))))))

(local theorem zmuladd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zmul a (zadd b c)) (zadd (zmul a b) (zmul a c)))
()
(ax_mp ((eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (zadd (zmul a b) (zmul a c))) (eq (zmul a (zadd b c)) (zadd (zmul a b) (zmul a c))))
  (ax_mp ((eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (zmul a (zadd b c))) (im (eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (zadd (zmul a b) (zmul a c))) (eq (zmul a (zadd b c)) (zadd (zmul a b) (zmul a c)))))
    (eqtr3 ((zmul a (zadd b c)) (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (zadd (zmul a b) (zmul a c))))
    (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (zmul a (zadd b c))))
      (zmuleq1 ((znsub (zfst a) (zsnd a)) a (zadd b c)))
      (zfstsnd (a))))
  (ax_mp ((eq (zadd (zmul a b) (zmul a c)) (zmul (znsub (zfst a) (zsnd a)) (zadd b c))) (eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (zadd (zmul a b) (zmul a c))))
    (eqcom ((zadd (zmul a b) (zmul a c)) (zmul (znsub (zfst a) (zsnd a)) (zadd b c))))
    (ax_mp ((eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))))) (eq (zadd (zmul a b) (zmul a c)) (zmul (znsub (zfst a) (zsnd a)) (zadd b c))))
      (ax_mp ((eq (zadd (zmul a b) (zmul a c)) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))))) (im (eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))))) (eq (zadd (zmul a b) (zmul a c)) (zmul (znsub (zfst a) (zsnd a)) (zadd b c)))))
        (eqtr4 ((zadd (zmul a b) (zmul a c)) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))) (zmul (znsub (zfst a) (zsnd a)) (zadd b c))))
        (:conv (eq (zadd (zmul a b) (zmul a c)) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))))
          (eq
            (zadd
              (:unfold zmul (a b) ()
                (znsub (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)))))
              (:unfold zmul (a c) ()
                (znsub (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))))
            (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))))
          (zaddzn ((add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c))) (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))))))
      (ax_mp ((eq (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))) (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))))) (eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))))))
        (ax_mp ((eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))))) (im (eq (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))) (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))))) (eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))))))
          (eqtr4 ((zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))) (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))))))
          (:conv (eq (zmul (znsub (zfst a) (zsnd a)) (zadd b c)) (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))))
            (eq
              (zmul
                (znsub (zfst a) (zsnd a))
                (:unfold zadd (b c) ()
                  (znsub (add (zfst b) (zfst c)) (add (zsnd b) (zsnd c)))))
              (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))))
            (zmulzn ((zfst a) (add (zfst b) (zfst c)) (zsnd a) (add (zsnd b) (zsnd c))))))
        (ax_mp ((eq (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))) (eq (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))) (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))))))
          (ax_mp ((eq (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c))))) (im (eq (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))) (eq (znsub (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c))))) (znsub (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))))))
            (znsubeq ((add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))))
            (ax_mp ((eq (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c))))) (eq (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c))))))
              (ax_mp ((eq (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c))))) (im (eq (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c))))) (eq (add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))))))
                (eqtr4 ((add (add (mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b))) (add (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))) (add (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c)))) (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c))))))
                (add4 ((mul (zfst a) (zfst b)) (mul (zsnd a) (zsnd b)) (mul (zfst a) (zfst c)) (mul (zsnd a) (zsnd c)))))
              (ax_mp ((eq (mul (zsnd a) (add (zsnd b) (zsnd c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c)))) (eq (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c))))))
                (ax_mp ((eq (mul (zfst a) (add (zfst b) (zfst c))) (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c)))) (im (eq (mul (zsnd a) (add (zsnd b) (zsnd c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c)))) (eq (add (mul (zfst a) (add (zfst b) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c)))) (add (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c)))))))
                  (addeq ((mul (zfst a) (add (zfst b) (zfst c))) (add (mul (zfst a) (zfst b)) (mul (zfst a) (zfst c))) (mul (zsnd a) (add (zsnd b) (zsnd c))) (add (mul (zsnd a) (zsnd b)) (mul (zsnd a) (zsnd c)))))
                  (muladd ((zfst a) (zfst b) (zfst c))))
                (muladd ((zsnd a) (zsnd b) (zsnd c))))))
          (ax_mp ((eq (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))) (add (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c))))) (eq (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))))
            (ax_mp ((eq (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c))))) (im (eq (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))) (add (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c))))) (eq (add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))))))
              (eqtr4 ((add (add (mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b))) (add (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))) (add (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))) (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)))))
              (add4 ((mul (zfst a) (zsnd b)) (mul (zsnd a) (zfst b)) (mul (zfst a) (zsnd c)) (mul (zsnd a) (zfst c)))))
            (ax_mp ((eq (mul (add (zfst b) (zfst c)) (zsnd a)) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))) (eq (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))) (add (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c))))))
              (ax_mp ((eq (mul (zfst a) (add (zsnd b) (zsnd c))) (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c)))) (im (eq (mul (add (zfst b) (zfst c)) (zsnd a)) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))) (eq (add (mul (zfst a) (add (zsnd b) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a))) (add (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))))))
                (addeq ((mul (zfst a) (add (zsnd b) (zsnd c))) (add (mul (zfst a) (zsnd b)) (mul (zfst a) (zsnd c))) (mul (add (zfst b) (zfst c)) (zsnd a)) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))))
                (muladd ((zfst a) (zsnd b) (zsnd c))))
              (ax_mp ((eq (mul (zsnd a) (add (zfst b) (zfst c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))) (eq (mul (add (zfst b) (zfst c)) (zsnd a)) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))))
                (ax_mp ((eq (mul (add (zfst b) (zfst c)) (zsnd a)) (mul (zsnd a) (add (zfst b) (zfst c)))) (im (eq (mul (zsnd a) (add (zfst b) (zfst c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))) (eq (mul (add (zfst b) (zfst c)) (zsnd a)) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c))))))
                  (eqtr ((mul (add (zfst b) (zfst c)) (zsnd a)) (mul (zsnd a) (add (zfst b) (zfst c))) (add (mul (zsnd a) (zfst b)) (mul (zsnd a) (zfst c)))))
                  (mulcom ((add (zfst b) (zfst c)) (zsnd a))))
                (muladd ((zsnd a) (zfst b) (zfst c))))))))))))

(local theorem zaddmul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zmul (zadd a b) c) (zadd (zmul a c) (zmul b c)))
()
(ax_mp ((eq (zmul c (zadd a b)) (zadd (zmul a c) (zmul b c))) (eq (zmul (zadd a b) c) (zadd (zmul a c) (zmul b c))))
  (ax_mp ((eq (zmul (zadd a b) c) (zmul c (zadd a b))) (im (eq (zmul c (zadd a b)) (zadd (zmul a c) (zmul b c))) (eq (zmul (zadd a b) c) (zadd (zmul a c) (zmul b c)))))
    (eqtr ((zmul (zadd a b) c) (zmul c (zadd a b)) (zadd (zmul a c) (zmul b c))))
    (zmulcom ((zadd a b) c)))
  (ax_mp ((eq (zadd (zmul c a) (zmul c b)) (zadd (zmul a c) (zmul b c))) (eq (zmul c (zadd a b)) (zadd (zmul a c) (zmul b c))))
    (ax_mp ((eq (zmul c (zadd a b)) (zadd (zmul c a) (zmul c b))) (im (eq (zadd (zmul c a) (zmul c b)) (zadd (zmul a c) (zmul b c))) (eq (zmul c (zadd a b)) (zadd (zmul a c) (zmul b c)))))
      (eqtr ((zmul c (zadd a b)) (zadd (zmul c a) (zmul c b)) (zadd (zmul a c) (zmul b c))))
      (zmuladd (c a b)))
    (ax_mp ((eq (zmul c b) (zmul b c)) (eq (zadd (zmul c a) (zmul c b)) (zadd (zmul a c) (zmul b c))))
      (ax_mp ((eq (zmul c a) (zmul a c)) (im (eq (zmul c b) (zmul b c)) (eq (zadd (zmul c a) (zmul c b)) (zadd (zmul a c) (zmul b c)))))
        (zaddeq ((zmul c a) (zmul a c) (zmul c b) (zmul b c)))
        (zmulcom (c a)))
      (zmulcom (c b))))))

(local theorem zmulsub ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zmul a (zsub b c)) (zsub (zmul a b) (zmul a c)))
()
(ax_mp ((eq (zsub (zmul a b) (zmul a c)) (zmul a (zsub b c))) (eq (zmul a (zsub b c)) (zsub (zmul a b) (zmul a c))))
  (eqcom ((zsub (zmul a b) (zmul a c)) (zmul a (zsub b c))))
  (mpbir ((eq (zadd (zmul a (zsub b c)) (zmul a c)) (zmul a b)) (eq (zsub (zmul a b) (zmul a c)) (zmul a (zsub b c))))
    (eqzsub ((zmul a b) (zmul a (zsub b c)) (zmul a c)))
    (ax_mp ((eq (zmul a (zadd (zsub b c) c)) (zmul a b)) (eq (zadd (zmul a (zsub b c)) (zmul a c)) (zmul a b)))
      (ax_mp ((eq (zmul a (zadd (zsub b c) c)) (zadd (zmul a (zsub b c)) (zmul a c))) (im (eq (zmul a (zadd (zsub b c) c)) (zmul a b)) (eq (zadd (zmul a (zsub b c)) (zmul a c)) (zmul a b))))
        (eqtr3 ((zadd (zmul a (zsub b c)) (zmul a c)) (zmul a (zadd (zsub b c) c)) (zmul a b)))
        (zmuladd (a (zsub b c) c)))
      (ax_mp ((eq (zadd (zsub b c) c) b) (eq (zmul a (zadd (zsub b c) c)) (zmul a b)))
        (zmuleq2 (a (zadd (zsub b c) c) b))
        (znpcan (b c)))))))

(local theorem zsubmul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (zmul (zsub a b) c) (zsub (zmul a c) (zmul b c)))
()
(ax_mp ((eq (zmul c (zsub a b)) (zsub (zmul a c) (zmul b c))) (eq (zmul (zsub a b) c) (zsub (zmul a c) (zmul b c))))
  (ax_mp ((eq (zmul (zsub a b) c) (zmul c (zsub a b))) (im (eq (zmul c (zsub a b)) (zsub (zmul a c) (zmul b c))) (eq (zmul (zsub a b) c) (zsub (zmul a c) (zmul b c)))))
    (eqtr ((zmul (zsub a b) c) (zmul c (zsub a b)) (zsub (zmul a c) (zmul b c))))
    (zmulcom ((zsub a b) c)))
  (ax_mp ((eq (zsub (zmul c a) (zmul c b)) (zsub (zmul a c) (zmul b c))) (eq (zmul c (zsub a b)) (zsub (zmul a c) (zmul b c))))
    (ax_mp ((eq (zmul c (zsub a b)) (zsub (zmul c a) (zmul c b))) (im (eq (zsub (zmul c a) (zmul c b)) (zsub (zmul a c) (zmul b c))) (eq (zmul c (zsub a b)) (zsub (zmul a c) (zmul b c)))))
      (eqtr ((zmul c (zsub a b)) (zsub (zmul c a) (zmul c b)) (zsub (zmul a c) (zmul b c))))
      (zmulsub (c a b)))
    (ax_mp ((eq (zmul c b) (zmul b c)) (eq (zsub (zmul c a) (zmul c b)) (zsub (zmul a c) (zmul b c))))
      (ax_mp ((eq (zmul c a) (zmul a c)) (im (eq (zmul c b) (zmul b c)) (eq (zsub (zmul c a) (zmul c b)) (zsub (zmul a c) (zmul b c)))))
        (zsubeq ((zmul c a) (zmul a c) (zmul c b) (zmul b c)))
        (zmulcom (c a)))
      (zmulcom (c b))))))

(local theorem zmul01 ((a nat ())) ()
  (eq (zmul (d0) a) (d0))
()
(ax_mp ((eq (zmul (zsub (d0) (d0)) a) (d0)) (eq (zmul (d0) a) (d0)))
  (ax_mp ((eq (zmul (zsub (d0) (d0)) a) (zmul (d0) a)) (im (eq (zmul (zsub (d0) (d0)) a) (d0)) (eq (zmul (d0) a) (d0))))
    (eqtr3 ((zmul (d0) a) (zmul (zsub (d0) (d0)) a) (d0)))
    (ax_mp ((eq (zsub (d0) (d0)) (d0)) (eq (zmul (zsub (d0) (d0)) a) (zmul (d0) a)))
      (zmuleq1 ((zsub (d0) (d0)) (d0) a))
      (zsubid ((d0)))))
  (ax_mp ((eq (zsub (zmul (d0) a) (zmul (d0) a)) (d0)) (eq (zmul (zsub (d0) (d0)) a) (d0)))
    (ax_mp ((eq (zmul (zsub (d0) (d0)) a) (zsub (zmul (d0) a) (zmul (d0) a))) (im (eq (zsub (zmul (d0) a) (zmul (d0) a)) (d0)) (eq (zmul (zsub (d0) (d0)) a) (d0))))
      (eqtr ((zmul (zsub (d0) (d0)) a) (zsub (zmul (d0) a) (zmul (d0) a)) (d0)))
      (zsubmul ((d0) (d0) a)))
    (zsubid ((zmul (d0) a))))))

(local theorem zmul02 ((a nat ())) ()
  (eq (zmul a (d0)) (d0))
()
(ax_mp ((eq (zmul (d0) a) (d0)) (eq (zmul a (d0)) (d0)))
  (ax_mp ((eq (zmul a (d0)) (zmul (d0) a)) (im (eq (zmul (d0) a) (d0)) (eq (zmul a (d0)) (d0))))
    (eqtr ((zmul a (d0)) (zmul (d0) a) (d0)))
    (zmulcom (a (d0))))
  (zmul01 (a))))

(local theorem zmul11 ((a nat ())) ()
  (eq (zmul (b0 (d1)) a) a)
()
(:let H1 (zfstsnd (a))
(ax_mp ((eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) a) (eq (zmul (b0 (d1)) a) a))
  (ax_mp ((eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) (zmul (b0 (d1)) a)) (im (eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) a) (eq (zmul (b0 (d1)) a) a)))
    (eqtr3 ((zmul (b0 (d1)) a) (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) a))
    (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) (zmul (b0 (d1)) a)))
      (ax_mp ((eq (znsub (d1) (d0)) (b0 (d1))) (im (eq (znsub (zfst a) (zsnd a)) a) (eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) (zmul (b0 (d1)) a))))
        (zmuleq ((znsub (d1) (d0)) (b0 (d1)) (znsub (zfst a) (zsnd a)) a))
        (znsub02 ((d1))))
      H1))
  (ax_mp ((eq (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) a) (eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) a))
    (ax_mp ((eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))))) (im (eq (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) a) (eq (zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) a)))
      (eqtr ((zmul (znsub (d1) (d0)) (znsub (zfst a) (zsnd a))) (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) a))
      (zmulzn ((d1) (zfst a) (d0) (zsnd a))))
    (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) a))
      (ax_mp ((eq (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) (znsub (zfst a) (zsnd a))) (im (eq (znsub (zfst a) (zsnd a)) a) (eq (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) a)))
        (eqtr ((znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) (znsub (zfst a) (zsnd a)) a))
        (ax_mp ((eq (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (zsnd a)) (eq (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) (znsub (zfst a) (zsnd a))))
          (ax_mp ((eq (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (zfst a)) (im (eq (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (zsnd a)) (eq (znsub (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0)))) (znsub (zfst a) (zsnd a)))))
            (znsubeq ((add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (zfst a) (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (zsnd a)))
            (ax_mp ((eq (add (zfst a) (d0)) (zfst a)) (eq (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (zfst a)))
              (ax_mp ((eq (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (zfst a) (d0))) (im (eq (add (zfst a) (d0)) (zfst a)) (eq (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (zfst a))))
                (eqtr ((add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (zfst a) (d0)) (zfst a)))
                (ax_mp ((eq (mul (d0) (zsnd a)) (d0)) (eq (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (zfst a) (d0))))
                  (ax_mp ((eq (mul (d1) (zfst a)) (zfst a)) (im (eq (mul (d0) (zsnd a)) (d0)) (eq (add (mul (d1) (zfst a)) (mul (d0) (zsnd a))) (add (zfst a) (d0)))))
                    (addeq ((mul (d1) (zfst a)) (zfst a) (mul (d0) (zsnd a)) (d0)))
                    (mul11 ((zfst a))))
                  (mul01 ((zsnd a)))))
              (add0 ((zfst a)))))
          (ax_mp ((eq (add (zsnd a) (d0)) (zsnd a)) (eq (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (zsnd a)))
            (ax_mp ((eq (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (add (zsnd a) (d0))) (im (eq (add (zsnd a) (d0)) (zsnd a)) (eq (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (zsnd a))))
              (eqtr ((add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (add (zsnd a) (d0)) (zsnd a)))
              (ax_mp ((eq (mul (zfst a) (d0)) (d0)) (eq (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (add (zsnd a) (d0))))
                (ax_mp ((eq (mul (d1) (zsnd a)) (zsnd a)) (im (eq (mul (zfst a) (d0)) (d0)) (eq (add (mul (d1) (zsnd a)) (mul (zfst a) (d0))) (add (zsnd a) (d0)))))
                  (addeq ((mul (d1) (zsnd a)) (zsnd a) (mul (zfst a) (d0)) (d0)))
                  (mul11 ((zsnd a))))
                (mul02 ((zfst a)))))
            (add0 ((zsnd a))))))
      H1)))))

(local theorem zmul12 ((a nat ())) ()
  (eq (zmul a (b0 (d1))) a)
()
(ax_mp ((eq (zmul (b0 (d1)) a) a) (eq (zmul a (b0 (d1))) a))
  (ax_mp ((eq (zmul a (b0 (d1))) (zmul (b0 (d1)) a)) (im (eq (zmul (b0 (d1)) a) a) (eq (zmul a (b0 (d1))) a)))
    (eqtr ((zmul a (b0 (d1))) (zmul (b0 (d1)) a) a))
    (zmulcom (a (b0 (d1)))))
  (zmul11 (a))))

(local theorem zmulneg1 ((a nat ()) (b nat ())) ()
  (eq (zmul (zneg a) b) (zneg (zmul a b)))
()
(ax_mp ((eq (zmul (zsub (d0) a) b) (zneg (zmul a b))) (eq (zmul (zneg a) b) (zneg (zmul a b))))
  (ax_mp ((eq (zmul (zsub (d0) a) b) (zmul (zneg a) b)) (im (eq (zmul (zsub (d0) a) b) (zneg (zmul a b))) (eq (zmul (zneg a) b) (zneg (zmul a b)))))
    (eqtr3 ((zmul (zneg a) b) (zmul (zsub (d0) a) b) (zneg (zmul a b))))
    (ax_mp ((eq (zsub (d0) a) (zneg a)) (eq (zmul (zsub (d0) a) b) (zmul (zneg a) b)))
      (zmuleq1 ((zsub (d0) a) (zneg a) b))
      (zsub01 (a))))
  (ax_mp ((eq (zsub (zmul (d0) b) (zmul a b)) (zneg (zmul a b))) (eq (zmul (zsub (d0) a) b) (zneg (zmul a b))))
    (ax_mp ((eq (zmul (zsub (d0) a) b) (zsub (zmul (d0) b) (zmul a b))) (im (eq (zsub (zmul (d0) b) (zmul a b)) (zneg (zmul a b))) (eq (zmul (zsub (d0) a) b) (zneg (zmul a b)))))
      (eqtr ((zmul (zsub (d0) a) b) (zsub (zmul (d0) b) (zmul a b)) (zneg (zmul a b))))
      (zsubmul ((d0) a b)))
    (ax_mp ((eq (zsub (d0) (zmul a b)) (zneg (zmul a b))) (eq (zsub (zmul (d0) b) (zmul a b)) (zneg (zmul a b))))
      (ax_mp ((eq (zsub (zmul (d0) b) (zmul a b)) (zsub (d0) (zmul a b))) (im (eq (zsub (d0) (zmul a b)) (zneg (zmul a b))) (eq (zsub (zmul (d0) b) (zmul a b)) (zneg (zmul a b)))))
        (eqtr ((zsub (zmul (d0) b) (zmul a b)) (zsub (d0) (zmul a b)) (zneg (zmul a b))))
        (ax_mp ((eq (zmul (d0) b) (d0)) (eq (zsub (zmul (d0) b) (zmul a b)) (zsub (d0) (zmul a b))))
          (zsubeq1 ((zmul (d0) b) (d0) (zmul a b)))
          (zmul01 (b))))
      (zsub01 ((zmul a b)))))))

(local theorem zmulneg2 ((a nat ()) (b nat ())) ()
  (eq (zmul a (zneg b)) (zneg (zmul a b)))
()
(ax_mp ((eq (zmul (zneg b) a) (zneg (zmul a b))) (eq (zmul a (zneg b)) (zneg (zmul a b))))
  (ax_mp ((eq (zmul a (zneg b)) (zmul (zneg b) a)) (im (eq (zmul (zneg b) a) (zneg (zmul a b))) (eq (zmul a (zneg b)) (zneg (zmul a b)))))
    (eqtr ((zmul a (zneg b)) (zmul (zneg b) a) (zneg (zmul a b))))
    (zmulcom (a (zneg b))))
  (ax_mp ((eq (zneg (zmul b a)) (zneg (zmul a b))) (eq (zmul (zneg b) a) (zneg (zmul a b))))
    (ax_mp ((eq (zmul (zneg b) a) (zneg (zmul b a))) (im (eq (zneg (zmul b a)) (zneg (zmul a b))) (eq (zmul (zneg b) a) (zneg (zmul a b)))))
      (eqtr ((zmul (zneg b) a) (zneg (zmul b a)) (zneg (zmul a b))))
      (zmulneg1 (b a)))
    (ax_mp ((eq (zmul b a) (zmul a b)) (eq (zneg (zmul b a)) (zneg (zmul a b))))
      (znegeq ((zmul b a) (zmul a b)))
      (zmulcom (b a))))))

(local theorem zmul2neg ((a nat ()) (b nat ())) ()
  (eq (zmul (zneg a) (zneg b)) (zmul a b))
()
(ax_mp ((eq (zneg (zmul a (zneg b))) (zmul a b)) (eq (zmul (zneg a) (zneg b)) (zmul a b)))
  (ax_mp ((eq (zmul (zneg a) (zneg b)) (zneg (zmul a (zneg b)))) (im (eq (zneg (zmul a (zneg b))) (zmul a b)) (eq (zmul (zneg a) (zneg b)) (zmul a b))))
    (eqtr ((zmul (zneg a) (zneg b)) (zneg (zmul a (zneg b))) (zmul a b)))
    (zmulneg1 (a (zneg b))))
  (mpbi ((eq (zneg (zmul a b)) (zmul a (zneg b))) (eq (zneg (zmul a (zneg b))) (zmul a b)))
    (znegeqcom ((zmul a b) (zmul a (zneg b))))
    (ax_mp ((eq (zmul a (zneg b)) (zneg (zmul a b))) (eq (zneg (zmul a b)) (zmul a (zneg b))))
      (eqcom ((zmul a (zneg b)) (zneg (zmul a b))))
      (zmulneg2 (a b))))))

(local theorem zmulb0 ((a nat ()) (b nat ())) ()
  (eq (zmul (b0 a) (b0 b)) (b0 (mul a b)))
()
(ax_mp ((eq (zmul (znsub a (d0)) (znsub b (d0))) (b0 (mul a b))) (eq (zmul (b0 a) (b0 b)) (b0 (mul a b))))
  (ax_mp ((eq (zmul (znsub a (d0)) (znsub b (d0))) (zmul (b0 a) (b0 b))) (im (eq (zmul (znsub a (d0)) (znsub b (d0))) (b0 (mul a b))) (eq (zmul (b0 a) (b0 b)) (b0 (mul a b)))))
    (eqtr3 ((zmul (b0 a) (b0 b)) (zmul (znsub a (d0)) (znsub b (d0))) (b0 (mul a b))))
    (ax_mp ((eq (znsub b (d0)) (b0 b)) (eq (zmul (znsub a (d0)) (znsub b (d0))) (zmul (b0 a) (b0 b))))
      (ax_mp ((eq (znsub a (d0)) (b0 a)) (im (eq (znsub b (d0)) (b0 b)) (eq (zmul (znsub a (d0)) (znsub b (d0))) (zmul (b0 a) (b0 b)))))
        (zmuleq ((znsub a (d0)) (b0 a) (znsub b (d0)) (b0 b)))
        (znsub02 (a)))
      (znsub02 (b))))
  (ax_mp ((eq (b0 (mul a b)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))) (eq (zmul (znsub a (d0)) (znsub b (d0))) (b0 (mul a b))))
    (ax_mp ((eq (zmul (znsub a (d0)) (znsub b (d0))) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))) (im (eq (b0 (mul a b)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))) (eq (zmul (znsub a (d0)) (znsub b (d0))) (b0 (mul a b)))))
      (eqtr4 ((zmul (znsub a (d0)) (znsub b (d0))) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0)))) (b0 (mul a b))))
      (zmulzn (a b (d0) (d0))))
    (ax_mp ((eq (znsub (mul a b) (d0)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))) (eq (b0 (mul a b)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))))
      (ax_mp ((eq (znsub (mul a b) (d0)) (b0 (mul a b))) (im (eq (znsub (mul a b) (d0)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))) (eq (b0 (mul a b)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0)))))))
        (eqtr3 ((b0 (mul a b)) (znsub (mul a b) (d0)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))))
        (znsub02 ((mul a b))))
      (ax_mp ((eq (d0) (add (mul a (d0)) (mul b (d0)))) (eq (znsub (mul a b) (d0)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0))))))
        (ax_mp ((eq (mul a b) (add (mul a b) (mul (d0) (d0)))) (im (eq (d0) (add (mul a (d0)) (mul b (d0)))) (eq (znsub (mul a b) (d0)) (znsub (add (mul a b) (mul (d0) (d0))) (add (mul a (d0)) (mul b (d0)))))))
          (znsubeq ((mul a b) (add (mul a b) (mul (d0) (d0))) (d0) (add (mul a (d0)) (mul b (d0)))))
          (ax_mp ((eq (add (mul a b) (d0)) (mul a b)) (eq (mul a b) (add (mul a b) (mul (d0) (d0)))))
            (ax_mp ((eq (add (mul a b) (mul (d0) (d0))) (add (mul a b) (d0))) (im (eq (add (mul a b) (d0)) (mul a b)) (eq (mul a b) (add (mul a b) (mul (d0) (d0))))))
              (eqtr2 ((add (mul a b) (mul (d0) (d0))) (add (mul a b) (d0)) (mul a b)))
              (ax_mp ((eq (mul (d0) (d0)) (d0)) (eq (add (mul a b) (mul (d0) (d0))) (add (mul a b) (d0))))
                (addeq2 ((mul a b) (mul (d0) (d0)) (d0)))
                (mul0 ((d0)))))
            (add0 ((mul a b)))))
        (ax_mp ((eq (add (d0) (d0)) (d0)) (eq (d0) (add (mul a (d0)) (mul b (d0)))))
          (ax_mp ((eq (add (mul a (d0)) (mul b (d0))) (add (d0) (d0))) (im (eq (add (d0) (d0)) (d0)) (eq (d0) (add (mul a (d0)) (mul b (d0))))))
            (eqtr2 ((add (mul a (d0)) (mul b (d0))) (add (d0) (d0)) (d0)))
            (ax_mp ((eq (mul b (d0)) (d0)) (eq (add (mul a (d0)) (mul b (d0))) (add (d0) (d0))))
              (ax_mp ((eq (mul a (d0)) (d0)) (im (eq (mul b (d0)) (d0)) (eq (add (mul a (d0)) (mul b (d0))) (add (d0) (d0)))))
                (addeq ((mul a (d0)) (d0) (mul b (d0)) (d0)))
                (mul0 (a)))
              (mul0 (b))))
          (add0 ((d0)))))))))

(local def zabs ((n nat ())) (nat ())
()
(add (zfst n) (zsnd n)))

(local theorem zabseqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zabs _n1) (zabs _n2)))
()
(:conv (im _G (eq (zabs _n1) (zabs _n2)))
  (im
    _G
    (eq
      (:unfold zabs (_n1) ()
        (add (zfst _n1) (zsnd _n1)))
      (:unfold zabs (_n2) ()
        (add (zfst _n2) (zsnd _n2)))))
  (addeqd (_G (zfst _n1) (zfst _n2) (zsnd _n1) (zsnd _n2))
    (zfsteqd (_G _n1 _n2)
      _nh)
    (zsndeqd (_G _n1 _n2)
      _nh))))

(local theorem zabseq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zabs _n1) (zabs _n2)))
()
(zabseqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zabsb0 ((n nat ())) ()
  (eq (zabs (b0 n)) n)
()
(ax_mp ((eq (add n (d0)) n) (eq (zabs (b0 n)) n))
  (ax_mp ((eq (zabs (b0 n)) (add n (d0))) (im (eq (add n (d0)) n) (eq (zabs (b0 n)) n)))
    (eqtr ((zabs (b0 n)) (add n (d0)) n))
    (ax_mp ((eq (zsnd (b0 n)) (d0)) (eq (zabs (b0 n)) (add n (d0))))
      (ax_mp ((eq (zfst (b0 n)) n) (im (eq (zsnd (b0 n)) (d0)) (eq (zabs (b0 n)) (add n (d0)))))
        (:conv (im (eq (zfst (b0 n)) n) (im (eq (zsnd (b0 n)) (d0)) (eq (zabs (b0 n)) (add n (d0)))))
          (im
            (eq (zfst (b0 n)) n)
            (im
              (eq (zsnd (b0 n)) (d0))
              (eq
                (:unfold zabs ((b0 n)) ()
                  (add (zfst (b0 n)) (zsnd (b0 n))))
                (add n (d0)))))
          (addeq ((zfst (b0 n)) n (zsnd (b0 n)) (d0))))
        (zfstb0 (n)))
      (zsndb0 (n))))
  (add0 (n))))

(local theorem zabsneg ((n nat ())) ()
  (eq (zabs (zneg n)) (zabs n))
()
(ax_mp ((eq (add (zsnd (zneg n)) (zfst (zneg n))) (zabs n)) (eq (zabs (zneg n)) (zabs n)))
  (ax_mp ((eq (zabs (zneg n)) (add (zsnd (zneg n)) (zfst (zneg n)))) (im (eq (add (zsnd (zneg n)) (zfst (zneg n))) (zabs n)) (eq (zabs (zneg n)) (zabs n))))
    (eqtr ((zabs (zneg n)) (add (zsnd (zneg n)) (zfst (zneg n))) (zabs n)))
    (:conv (eq (zabs (zneg n)) (add (zsnd (zneg n)) (zfst (zneg n))))
      (eq
        (:unfold zabs ((zneg n)) ()
          (add (zfst (zneg n)) (zsnd (zneg n))))
        (add (zsnd (zneg n)) (zfst (zneg n))))
      (addcom ((zfst (zneg n)) (zsnd (zneg n))))))
  (ax_mp ((eq (zfst (zneg n)) (zsnd n)) (eq (add (zsnd (zneg n)) (zfst (zneg n))) (zabs n)))
    (ax_mp ((eq (zsnd (zneg n)) (zfst n)) (im (eq (zfst (zneg n)) (zsnd n)) (eq (add (zsnd (zneg n)) (zfst (zneg n))) (zabs n))))
      (:conv (im (eq (zsnd (zneg n)) (zfst n)) (im (eq (zfst (zneg n)) (zsnd n)) (eq (add (zsnd (zneg n)) (zfst (zneg n))) (zabs n))))
        (im
          (eq (zsnd (zneg n)) (zfst n))
          (im
            (eq (zfst (zneg n)) (zsnd n))
            (eq
              (add (zsnd (zneg n)) (zfst (zneg n)))
              (:unfold zabs (n) ()
                (add (zfst n) (zsnd n))))))
        (addeq ((zsnd (zneg n)) (zfst n) (zfst (zneg n)) (zsnd n))))
      (zsndneg (n)))
    (zfstneg (n)))))

(local theorem zabszn ((m nat ()) (n nat ())) ()
  (eq (zabs (znsub m n)) (add (sub m n) (sub n m)))
()
(ax_mp ((eq (zsnd (znsub m n)) (sub n m)) (eq (zabs (znsub m n)) (add (sub m n) (sub n m))))
  (ax_mp ((eq (zfst (znsub m n)) (sub m n)) (im (eq (zsnd (znsub m n)) (sub n m)) (eq (zabs (znsub m n)) (add (sub m n) (sub n m)))))
    (:conv (im (eq (zfst (znsub m n)) (sub m n)) (im (eq (zsnd (znsub m n)) (sub n m)) (eq (zabs (znsub m n)) (add (sub m n) (sub n m)))))
      (im
        (eq (zfst (znsub m n)) (sub m n))
        (im
          (eq (zsnd (znsub m n)) (sub n m))
          (eq
            (:unfold zabs ((znsub m n)) ()
              (add (zfst (znsub m n)) (zsnd (znsub m n))))
            (add (sub m n) (sub n m)))))
      (addeq ((zfst (znsub m n)) (sub m n) (zsnd (znsub m n)) (sub n m))))
    (zfstznsub (m n)))
  (zsndznsub (m n))))

(local theorem lezabszn ((m nat ()) (n nat ())) ()
  (im (le n m) (eq (zabs (znsub m n)) (sub m n)))
()
(syl5eq ((le n m) (zabs (znsub m n)) (add (sub m n) (sub n m)) (sub m n))
  (zabszn (m n))
  (syl6eq ((le n m) (add (sub m n) (sub n m)) (add (sub m n) (d0)) (sub m n))
    (add0 ((sub m n)))
    (sylbi ((le n m) (eq (sub n m) (d0)) (eq (add (sub m n) (sub n m)) (add (sub m n) (d0))))
      (lesubeq0 (n m))
      (addeq2 ((sub m n) (sub n m) (d0)))))))

(local theorem zabscom ((m nat ()) (n nat ())) ()
  (eq (zabs (znsub m n)) (zabs (znsub n m)))
()
(ax_mp ((eq (add (sub m n) (sub n m)) (zabs (znsub n m))) (eq (zabs (znsub m n)) (zabs (znsub n m))))
  (ax_mp ((eq (zabs (znsub m n)) (add (sub m n) (sub n m))) (im (eq (add (sub m n) (sub n m)) (zabs (znsub n m))) (eq (zabs (znsub m n)) (zabs (znsub n m)))))
    (eqtr ((zabs (znsub m n)) (add (sub m n) (sub n m)) (zabs (znsub n m))))
    (zabszn (m n)))
  (ax_mp ((eq (zabs (znsub n m)) (add (sub n m) (sub m n))) (eq (add (sub m n) (sub n m)) (zabs (znsub n m))))
    (ax_mp ((eq (add (sub m n) (sub n m)) (add (sub n m) (sub m n))) (im (eq (zabs (znsub n m)) (add (sub n m) (sub m n))) (eq (add (sub m n) (sub n m)) (zabs (znsub n m)))))
      (eqtr4 ((add (sub m n) (sub n m)) (add (sub n m) (sub m n)) (zabs (znsub n m))))
      (addcom ((sub m n) (sub n m))))
    (zabszn (n m)))))

(local theorem zabseq0 ((n nat ())) ()
  (iff (eq (zabs n) (d0)) (eq n (d0)))
()
(ax_mp ((iff (an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq n (d0))) (iff (eq (zabs n) (d0)) (eq n (d0))))
  (ax_mp ((iff (eq (zabs n) (d0)) (an (eq (zfst n) (d0)) (eq (zsnd n) (d0)))) (im (iff (an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq n (d0))) (iff (eq (zabs n) (d0)) (eq n (d0)))))
    (bitr ((eq (zabs n) (d0)) (an (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq n (d0))))
    (:conv (iff (eq (zabs n) (d0)) (an (eq (zfst n) (d0)) (eq (zsnd n) (d0))))
      (iff
        (eq
          (:unfold zabs (n) ()
            (add (zfst n) (zsnd n)))
          (d0))
        (an (eq (zfst n) (d0)) (eq (zsnd n) (d0))))
      (addeq0 ((zfst n) (zsnd n)))))
  (zfstsndeq0 (n))))

(local theorem b0zabs ((a nat ())) ()
  (iff (eq (b0 (zabs a)) a) (zle (d0) a))
()
(ax_mp ((iff (eq a (b0 (zabs a))) (zle (d0) a)) (iff (eq (b0 (zabs a)) a) (zle (d0) a)))
  (ax_mp ((iff (eq (b0 (zabs a)) a) (eq a (b0 (zabs a)))) (im (iff (eq a (b0 (zabs a))) (zle (d0) a)) (iff (eq (b0 (zabs a)) a) (zle (d0) a))))
    (bitr ((eq (b0 (zabs a)) a) (eq a (b0 (zabs a))) (zle (d0) a)))
    (eqcomb ((b0 (zabs a)) a)))
  (ibii ((eq a (b0 (zabs a))) (zle (d0) a))
    (mpbiri ((eq a (b0 (zabs a))) (zle (d0) (b0 (zabs a))) (zle (d0) a))
      (zle0b0 ((zabs a)))
      (zleeq2 ((d0) a (b0 (zabs a)))))
    (sylbi ((zle (d0) a) (eq a (b0 (div a (d2)))) (eq a (b0 (zabs a))))
      (zle02eq (a))
      (eqtr4d ((eq a (b0 (div a (d2)))) a (b0 (div a (d2))) (b0 (zabs a)))
        (id ((eq a (b0 (div a (d2))))))
        (b0eqd ((eq a (b0 (div a (d2)))) (zabs a) (div a (d2)))
          (syl6eq ((eq a (b0 (div a (d2)))) (zabs a) (zabs (b0 (div a (d2)))) (div a (d2)))
            (zabsb0 ((div a (d2))))
            (zabseq (a (b0 (div a (d2))))))))))))

(local theorem zb0orb0 ((a nat ())) ()
  (or (eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a)))))
()
(mpbi ((or (zle (d0) a) (zle a (d0))) (or (eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a))))))
  (ax_mp ((iff (zle a (d0)) (eq a (zneg (b0 (zabs a))))) (iff (or (zle (d0) a) (zle a (d0))) (or (eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a)))))))
    (ax_mp ((iff (zle (d0) a) (eq a (b0 (zabs a)))) (im (iff (zle a (d0)) (eq a (zneg (b0 (zabs a))))) (iff (or (zle (d0) a) (zle a (d0))) (or (eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a))))))))
      (oreq ((zle (d0) a) (eq a (b0 (zabs a))) (zle a (d0)) (eq a (zneg (b0 (zabs a))))))
      (ax_mp ((iff (eq (b0 (zabs a)) a) (zle (d0) a)) (iff (zle (d0) a) (eq a (b0 (zabs a)))))
        (ax_mp ((iff (eq a (b0 (zabs a))) (eq (b0 (zabs a)) a)) (im (iff (eq (b0 (zabs a)) a) (zle (d0) a)) (iff (zle (d0) a) (eq a (b0 (zabs a))))))
          (bitr2 ((eq a (b0 (zabs a))) (eq (b0 (zabs a)) a) (zle (d0) a)))
          (eqcomb (a (b0 (zabs a)))))
        (b0zabs (a))))
    (ax_mp ((iff (zle (d0) (zneg a)) (eq a (zneg (b0 (zabs a))))) (iff (zle a (d0)) (eq a (zneg (b0 (zabs a))))))
      (ax_mp ((iff (zle (d0) (zneg a)) (zle a (d0))) (im (iff (zle (d0) (zneg a)) (eq a (zneg (b0 (zabs a))))) (iff (zle a (d0)) (eq a (zneg (b0 (zabs a)))))))
        (bitr3 ((zle a (d0)) (zle (d0) (zneg a)) (eq a (zneg (b0 (zabs a))))))
        (zle0neg (a)))
      (ax_mp ((iff (eq (b0 (zabs (zneg a))) (zneg a)) (eq a (zneg (b0 (zabs a))))) (iff (zle (d0) (zneg a)) (eq a (zneg (b0 (zabs a))))))
        (ax_mp ((iff (eq (b0 (zabs (zneg a))) (zneg a)) (zle (d0) (zneg a))) (im (iff (eq (b0 (zabs (zneg a))) (zneg a)) (eq a (zneg (b0 (zabs a))))) (iff (zle (d0) (zneg a)) (eq a (zneg (b0 (zabs a)))))))
          (bitr3 ((zle (d0) (zneg a)) (eq (b0 (zabs (zneg a))) (zneg a)) (eq a (zneg (b0 (zabs a))))))
          (b0zabs ((zneg a))))
        (ax_mp ((iff (eq (b0 (zabs a)) (zneg a)) (eq a (zneg (b0 (zabs a))))) (iff (eq (b0 (zabs (zneg a))) (zneg a)) (eq a (zneg (b0 (zabs a))))))
          (ax_mp ((iff (eq (b0 (zabs (zneg a))) (zneg a)) (eq (b0 (zabs a)) (zneg a))) (im (iff (eq (b0 (zabs a)) (zneg a)) (eq a (zneg (b0 (zabs a))))) (iff (eq (b0 (zabs (zneg a))) (zneg a)) (eq a (zneg (b0 (zabs a)))))))
            (bitr ((eq (b0 (zabs (zneg a))) (zneg a)) (eq (b0 (zabs a)) (zneg a)) (eq a (zneg (b0 (zabs a))))))
            (ax_mp ((eq (b0 (zabs (zneg a))) (b0 (zabs a))) (iff (eq (b0 (zabs (zneg a))) (zneg a)) (eq (b0 (zabs a)) (zneg a))))
              (eqeq1 ((b0 (zabs (zneg a))) (b0 (zabs a)) (zneg a)))
              (ax_mp ((eq (zabs (zneg a)) (zabs a)) (eq (b0 (zabs (zneg a))) (b0 (zabs a))))
                (b0eq ((zabs (zneg a)) (zabs a)))
                (zabsneg (a)))))
          (eqznegcom ((b0 (zabs a)) a))))))
  (zleorle ((d0) a))))

(local theorem zabsmul ((m nat ()) (n nat ())) ()
  (eq (zabs (zmul m n)) (mul (zabs m) (zabs n)))
()
(:let H1 (eqtr4 ((zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n)) (mul (zabs (b0 (zabs m))) (zabs n))))
(:let H2 (eor ((eq n (b0 (zabs n))) (eq n (zneg (b0 (zabs n)))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n)))))
(:let H3 (eqtr ((zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (zabs (b0 (mul (zabs m) (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))))
(:let H4 (zabseq ((zmul (b0 (zabs m)) (b0 (zabs n))) (b0 (mul (zabs m) (zabs n)))))
(:let H5 (zmulb0 ((zabs m) (zabs n)))
(:let H6 (ax_mp ((eq (zmul (b0 (zabs m)) (b0 (zabs n))) (b0 (mul (zabs m) (zabs n)))) (eq (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (zabs (b0 (mul (zabs m) (zabs n))))))
  H4
  H5)
(:let H7 (ax_mp ((eq (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (zabs (b0 (mul (zabs m) (zabs n))))) (im (eq (zabs (b0 (mul (zabs m) (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))) (eq (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n)))))))
  H3
  H6)
(:let H8 (eqtr4 ((zabs (b0 (mul (zabs m) (zabs n)))) (mul (zabs m) (zabs n)) (mul (zabs m) (zabs (b0 (zabs n))))))
(:let H9 (zabsb0 ((mul (zabs m) (zabs n))))
(:let H10 (ax_mp ((eq (zabs (b0 (mul (zabs m) (zabs n)))) (mul (zabs m) (zabs n))) (im (eq (mul (zabs m) (zabs (b0 (zabs n)))) (mul (zabs m) (zabs n))) (eq (zabs (b0 (mul (zabs m) (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n)))))))
  H8
  H9)
(:let H11 (muleq2 ((zabs m) (zabs (b0 (zabs n))) (zabs n)))
(:let H12 (zabsb0 ((zabs n)))
(:let H13 (ax_mp ((eq (zabs (b0 (zabs n))) (zabs n)) (eq (mul (zabs m) (zabs (b0 (zabs n)))) (mul (zabs m) (zabs n))))
  H11
  H12)
(:let H14 (ax_mp ((eq (mul (zabs m) (zabs (b0 (zabs n)))) (mul (zabs m) (zabs n))) (eq (zabs (b0 (mul (zabs m) (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))))
  H10
  H13)
(:let H15 (ax_mp ((eq (zabs (b0 (mul (zabs m) (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))) (eq (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))))
  H7
  H14)
(:let H16 (eqidd ((eq n (b0 (zabs n))) (b0 (zabs m))))
(:let H17 (id ((eq n (b0 (zabs n)))))
(:let H18 (zmuleqd ((eq n (b0 (zabs n))) (b0 (zabs m)) (b0 (zabs m)) n (b0 (zabs n)))
  H16
  H17)
(:let H19 (zabseqd ((eq n (b0 (zabs n))) (zmul (b0 (zabs m)) n) (zmul (b0 (zabs m)) (b0 (zabs n))))
  H18)
(:let H20 (eqidd ((eq n (b0 (zabs n))) (zabs m)))
(:let H21 (zabseqd ((eq n (b0 (zabs n))) n (b0 (zabs n)))
  H17)
(:let H22 (muleqd ((eq n (b0 (zabs n))) (zabs m) (zabs m) (zabs n) (zabs (b0 (zabs n))))
  H20
  H21)
(:let H23 (eqeqd ((eq n (b0 (zabs n))) (zabs (zmul (b0 (zabs m)) n)) (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (mul (zabs m) (zabs n)) (mul (zabs m) (zabs (b0 (zabs n)))))
  H19
  H22)
(:let H24 (mpbiri ((eq n (b0 (zabs n))) (eq (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n))))
  H15
  H23)
(:let H25 (ax_mp ((im (eq n (b0 (zabs n))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n)))) (im (im (eq n (zneg (b0 (zabs n)))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n)))) (im (or (eq n (b0 (zabs n))) (eq n (zneg (b0 (zabs n))))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n))))))
  H2
  H24)
(:let H26 (eqtr ((zabs (zmul (b0 (zabs m)) (zneg (b0 (zabs n))))) (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n)))))))
(:let H27 (zabseq ((zmul (b0 (zabs m)) (zneg (b0 (zabs n)))) (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))))
(:let H28 (zmulneg2 ((b0 (zabs m)) (b0 (zabs n))))
(:let H29 (ax_mp ((eq (zmul (b0 (zabs m)) (zneg (b0 (zabs n)))) (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (eq (zabs (zmul (b0 (zabs m)) (zneg (b0 (zabs n))))) (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n)))))))
  H27
  H28)
(:let H30 (ax_mp ((eq (zabs (zmul (b0 (zabs m)) (zneg (b0 (zabs n))))) (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n)))))) (im (eq (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n)))))) (eq (zabs (zmul (b0 (zabs m)) (zneg (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n))))))))
  H26
  H29)
(:let H31 (eqtr4 ((zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (mul (zabs m) (zabs (zneg (b0 (zabs n)))))))
(:let H32 (zabsneg ((zmul (b0 (zabs m)) (b0 (zabs n)))))
(:let H33 (ax_mp ((eq (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (zabs (zmul (b0 (zabs m)) (b0 (zabs n))))) (im (eq (mul (zabs m) (zabs (zneg (b0 (zabs n))))) (zabs (zmul (b0 (zabs m)) (b0 (zabs n))))) (eq (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n))))))))
  H31
  H32)
(:let H34 (eqtr4 ((mul (zabs m) (zabs (zneg (b0 (zabs n))))) (mul (zabs m) (zabs (b0 (zabs n)))) (zabs (zmul (b0 (zabs m)) (b0 (zabs n))))))
(:let H35 (muleq2 ((zabs m) (zabs (zneg (b0 (zabs n)))) (zabs (b0 (zabs n)))))
(:let H36 (zabsneg ((b0 (zabs n))))
(:let H37 (ax_mp ((eq (zabs (zneg (b0 (zabs n)))) (zabs (b0 (zabs n)))) (eq (mul (zabs m) (zabs (zneg (b0 (zabs n))))) (mul (zabs m) (zabs (b0 (zabs n))))))
  H35
  H36)
(:let H38 (ax_mp ((eq (mul (zabs m) (zabs (zneg (b0 (zabs n))))) (mul (zabs m) (zabs (b0 (zabs n))))) (im (eq (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))) (eq (mul (zabs m) (zabs (zneg (b0 (zabs n))))) (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))))))
  H34
  H37)
(:let H39 (ax_mp ((eq (zabs (zmul (b0 (zabs m)) (b0 (zabs n)))) (mul (zabs m) (zabs (b0 (zabs n))))) (eq (mul (zabs m) (zabs (zneg (b0 (zabs n))))) (zabs (zmul (b0 (zabs m)) (b0 (zabs n))))))
  H38
  H15)
(:let H40 (ax_mp ((eq (mul (zabs m) (zabs (zneg (b0 (zabs n))))) (zabs (zmul (b0 (zabs m)) (b0 (zabs n))))) (eq (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n)))))))
  H33
  H39)
(:let H41 (ax_mp ((eq (zabs (zneg (zmul (b0 (zabs m)) (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n)))))) (eq (zabs (zmul (b0 (zabs m)) (zneg (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n)))))))
  H30
  H40)
(:let H42 (eqidd ((eq n (zneg (b0 (zabs n)))) (b0 (zabs m))))
(:let H43 (id ((eq n (zneg (b0 (zabs n))))))
(:let H44 (zmuleqd ((eq n (zneg (b0 (zabs n)))) (b0 (zabs m)) (b0 (zabs m)) n (zneg (b0 (zabs n))))
  H42
  H43)
(:let H45 (zabseqd ((eq n (zneg (b0 (zabs n)))) (zmul (b0 (zabs m)) n) (zmul (b0 (zabs m)) (zneg (b0 (zabs n)))))
  H44)
(:let H46 (eqidd ((eq n (zneg (b0 (zabs n)))) (zabs m)))
(:let H47 (zabseqd ((eq n (zneg (b0 (zabs n)))) n (zneg (b0 (zabs n))))
  H43)
(:let H48 (muleqd ((eq n (zneg (b0 (zabs n)))) (zabs m) (zabs m) (zabs n) (zabs (zneg (b0 (zabs n)))))
  H46
  H47)
(:let H49 (eqeqd ((eq n (zneg (b0 (zabs n)))) (zabs (zmul (b0 (zabs m)) n)) (zabs (zmul (b0 (zabs m)) (zneg (b0 (zabs n))))) (mul (zabs m) (zabs n)) (mul (zabs m) (zabs (zneg (b0 (zabs n))))))
  H45
  H48)
(:let H50 (mpbiri ((eq n (zneg (b0 (zabs n)))) (eq (zabs (zmul (b0 (zabs m)) (zneg (b0 (zabs n))))) (mul (zabs m) (zabs (zneg (b0 (zabs n)))))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n))))
  H41
  H49)
(:let H51 (ax_mp ((im (eq n (zneg (b0 (zabs n)))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n)))) (im (or (eq n (b0 (zabs n))) (eq n (zneg (b0 (zabs n))))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n)))))
  H25
  H50)
(:let H52 (zb0orb0 (n))
(:let H53 (ax_mp ((or (eq n (b0 (zabs n))) (eq n (zneg (b0 (zabs n))))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n))))
  H51
  H52)
(:let H54 (ax_mp ((eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n))) (im (eq (mul (zabs (b0 (zabs m))) (zabs n)) (mul (zabs m) (zabs n))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs (b0 (zabs m))) (zabs n)))))
  H1
  H53)
(:let H55 (muleq1 ((zabs (b0 (zabs m))) (zabs m) (zabs n)))
(:let H56 (zabsb0 ((zabs m)))
(:let H57 (ax_mp ((eq (zabs (b0 (zabs m))) (zabs m)) (eq (mul (zabs (b0 (zabs m))) (zabs n)) (mul (zabs m) (zabs n))))
  H55
  H56)
(:let H58 (ax_mp ((eq (mul (zabs (b0 (zabs m))) (zabs n)) (mul (zabs m) (zabs n))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs (b0 (zabs m))) (zabs n))))
  H54
  H57)
(:let H59 (id ((eq m (b0 (zabs m)))))
(:let H60 (id ((eq m (zneg (b0 (zabs m))))))
(ax_mp ((or (eq m (b0 (zabs m))) (eq m (zneg (b0 (zabs m))))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n))))
  (ax_mp ((im (eq m (zneg (b0 (zabs m)))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n)))) (im (or (eq m (b0 (zabs m))) (eq m (zneg (b0 (zabs m))))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n)))))
    (ax_mp ((im (eq m (b0 (zabs m))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n)))) (im (im (eq m (zneg (b0 (zabs m)))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n)))) (im (or (eq m (b0 (zabs m))) (eq m (zneg (b0 (zabs m))))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n))))))
      (eor ((eq m (b0 (zabs m))) (eq m (zneg (b0 (zabs m)))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n)))))
      (mpbiri ((eq m (b0 (zabs m))) (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs (b0 (zabs m))) (zabs n))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n))))
        H58
        (eqeqd ((eq m (b0 (zabs m))) (zabs (zmul m n)) (zabs (zmul (b0 (zabs m)) n)) (mul (zabs m) (zabs n)) (mul (zabs (b0 (zabs m))) (zabs n)))
          (zabseqd ((eq m (b0 (zabs m))) (zmul m n) (zmul (b0 (zabs m)) n))
            (zmuleqd ((eq m (b0 (zabs m))) m (b0 (zabs m)) n n)
              H59
              (eqidd ((eq m (b0 (zabs m))) n))))
          (muleqd ((eq m (b0 (zabs m))) (zabs m) (zabs (b0 (zabs m))) (zabs n) (zabs n))
            (zabseqd ((eq m (b0 (zabs m))) m (b0 (zabs m)))
              H59)
            (eqidd ((eq m (b0 (zabs m))) (zabs n)))))))
    (mpbiri ((eq m (zneg (b0 (zabs m)))) (eq (zabs (zmul (zneg (b0 (zabs m))) n)) (mul (zabs (zneg (b0 (zabs m)))) (zabs n))) (eq (zabs (zmul m n)) (mul (zabs m) (zabs n))))
      (ax_mp ((eq (zabs (zneg (zmul (b0 (zabs m)) n))) (mul (zabs (zneg (b0 (zabs m)))) (zabs n))) (eq (zabs (zmul (zneg (b0 (zabs m))) n)) (mul (zabs (zneg (b0 (zabs m)))) (zabs n))))
        (ax_mp ((eq (zabs (zmul (zneg (b0 (zabs m))) n)) (zabs (zneg (zmul (b0 (zabs m)) n)))) (im (eq (zabs (zneg (zmul (b0 (zabs m)) n))) (mul (zabs (zneg (b0 (zabs m)))) (zabs n))) (eq (zabs (zmul (zneg (b0 (zabs m))) n)) (mul (zabs (zneg (b0 (zabs m)))) (zabs n)))))
          (eqtr ((zabs (zmul (zneg (b0 (zabs m))) n)) (zabs (zneg (zmul (b0 (zabs m)) n))) (mul (zabs (zneg (b0 (zabs m)))) (zabs n))))
          (ax_mp ((eq (zmul (zneg (b0 (zabs m))) n) (zneg (zmul (b0 (zabs m)) n))) (eq (zabs (zmul (zneg (b0 (zabs m))) n)) (zabs (zneg (zmul (b0 (zabs m)) n)))))
            (zabseq ((zmul (zneg (b0 (zabs m))) n) (zneg (zmul (b0 (zabs m)) n))))
            (zmulneg1 ((b0 (zabs m)) n))))
        (ax_mp ((eq (mul (zabs (zneg (b0 (zabs m)))) (zabs n)) (zabs (zmul (b0 (zabs m)) n))) (eq (zabs (zneg (zmul (b0 (zabs m)) n))) (mul (zabs (zneg (b0 (zabs m)))) (zabs n))))
          (ax_mp ((eq (zabs (zneg (zmul (b0 (zabs m)) n))) (zabs (zmul (b0 (zabs m)) n))) (im (eq (mul (zabs (zneg (b0 (zabs m)))) (zabs n)) (zabs (zmul (b0 (zabs m)) n))) (eq (zabs (zneg (zmul (b0 (zabs m)) n))) (mul (zabs (zneg (b0 (zabs m)))) (zabs n)))))
            (eqtr4 ((zabs (zneg (zmul (b0 (zabs m)) n))) (zabs (zmul (b0 (zabs m)) n)) (mul (zabs (zneg (b0 (zabs m)))) (zabs n))))
            (zabsneg ((zmul (b0 (zabs m)) n))))
          (ax_mp ((eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs (b0 (zabs m))) (zabs n))) (eq (mul (zabs (zneg (b0 (zabs m)))) (zabs n)) (zabs (zmul (b0 (zabs m)) n))))
            (ax_mp ((eq (mul (zabs (zneg (b0 (zabs m)))) (zabs n)) (mul (zabs (b0 (zabs m))) (zabs n))) (im (eq (zabs (zmul (b0 (zabs m)) n)) (mul (zabs (b0 (zabs m))) (zabs n))) (eq (mul (zabs (zneg (b0 (zabs m)))) (zabs n)) (zabs (zmul (b0 (zabs m)) n)))))
              (eqtr4 ((mul (zabs (zneg (b0 (zabs m)))) (zabs n)) (mul (zabs (b0 (zabs m))) (zabs n)) (zabs (zmul (b0 (zabs m)) n))))
              (ax_mp ((eq (zabs (zneg (b0 (zabs m)))) (zabs (b0 (zabs m)))) (eq (mul (zabs (zneg (b0 (zabs m)))) (zabs n)) (mul (zabs (b0 (zabs m))) (zabs n))))
                (muleq1 ((zabs (zneg (b0 (zabs m)))) (zabs (b0 (zabs m))) (zabs n)))
                (zabsneg ((b0 (zabs m))))))
            H58)))
      (eqeqd ((eq m (zneg (b0 (zabs m)))) (zabs (zmul m n)) (zabs (zmul (zneg (b0 (zabs m))) n)) (mul (zabs m) (zabs n)) (mul (zabs (zneg (b0 (zabs m)))) (zabs n)))
        (zabseqd ((eq m (zneg (b0 (zabs m)))) (zmul m n) (zmul (zneg (b0 (zabs m))) n))
          (zmuleqd ((eq m (zneg (b0 (zabs m)))) m (zneg (b0 (zabs m))) n n)
            H60
            (eqidd ((eq m (zneg (b0 (zabs m)))) n))))
        (muleqd ((eq m (zneg (b0 (zabs m)))) (zabs m) (zabs (zneg (b0 (zabs m)))) (zabs n) (zabs n))
          (zabseqd ((eq m (zneg (b0 (zabs m)))) m (zneg (b0 (zabs m))))
            H60)
          (eqidd ((eq m (zneg (b0 (zabs m)))) (zabs n)))))))
  (zb0orb0 (m))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(local theorem eqmdvdsub2 ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (eqm n a b) (dvd n (zabs (znsub b a))))
()
(ax_mp ((or (le a b) (le b a)) (iff (eqm n a b) (dvd n (zabs (znsub b a)))))
  (ax_mp ((im (le b a) (iff (eqm n a b) (dvd n (zabs (znsub b a))))) (im (or (le a b) (le b a)) (iff (eqm n a b) (dvd n (zabs (znsub b a))))))
    (ax_mp ((im (le a b) (iff (eqm n a b) (dvd n (zabs (znsub b a))))) (im (im (le b a) (iff (eqm n a b) (dvd n (zabs (znsub b a))))) (im (or (le a b) (le b a)) (iff (eqm n a b) (dvd n (zabs (znsub b a)))))))
      (eor ((le a b) (le b a) (iff (eqm n a b) (dvd n (zabs (znsub b a))))))
      (bitr4d ((le a b) (eqm n a b) (dvd n (sub b a)) (dvd n (zabs (znsub b a))))
        (eqmdvdsub (a b n))
        (dvdeq2d ((le a b) n (zabs (znsub b a)) (sub b a))
          (lezabszn (b a)))))
    (syl5bb ((le b a) (eqm n a b) (eqm n b a) (dvd n (zabs (znsub b a))))
      (eqmcomb (a b n))
      (bitr4d ((le b a) (eqm n b a) (dvd n (sub a b)) (dvd n (zabs (znsub b a))))
        (eqmdvdsub (b a n))
        (dvdeq2d ((le b a) n (zabs (znsub b a)) (sub a b))
          (syl5eq ((le b a) (zabs (znsub b a)) (zabs (znsub a b)) (sub a b))
            (zabscom (b a))
            (lezabszn (a b)))))))
  (leorle (a b))))

(local theorem eqmdvdsub3 ((a nat ()) (n nat ())) ()
  (iff (eqm n (zfst a) (zsnd a)) (dvd n (zabs a)))
()
(ax_mp ((iff (eqm n (zsnd a) (zfst a)) (dvd n (zabs a))) (iff (eqm n (zfst a) (zsnd a)) (dvd n (zabs a))))
  (ax_mp ((iff (eqm n (zfst a) (zsnd a)) (eqm n (zsnd a) (zfst a))) (im (iff (eqm n (zsnd a) (zfst a)) (dvd n (zabs a))) (iff (eqm n (zfst a) (zsnd a)) (dvd n (zabs a)))))
    (bitr ((eqm n (zfst a) (zsnd a)) (eqm n (zsnd a) (zfst a)) (dvd n (zabs a))))
    (eqmcomb ((zfst a) (zsnd a) n)))
  (ax_mp ((iff (dvd n (zabs (znsub (zfst a) (zsnd a)))) (dvd n (zabs a))) (iff (eqm n (zsnd a) (zfst a)) (dvd n (zabs a))))
    (ax_mp ((iff (eqm n (zsnd a) (zfst a)) (dvd n (zabs (znsub (zfst a) (zsnd a))))) (im (iff (dvd n (zabs (znsub (zfst a) (zsnd a)))) (dvd n (zabs a))) (iff (eqm n (zsnd a) (zfst a)) (dvd n (zabs a)))))
      (bitr ((eqm n (zsnd a) (zfst a)) (dvd n (zabs (znsub (zfst a) (zsnd a)))) (dvd n (zabs a))))
      (eqmdvdsub2 ((zsnd a) (zfst a) n)))
    (ax_mp ((eq (zabs (znsub (zfst a) (zsnd a))) (zabs a)) (iff (dvd n (zabs (znsub (zfst a) (zsnd a)))) (dvd n (zabs a))))
      (dvdeq2 (n (zabs (znsub (zfst a) (zsnd a))) (zabs a)))
      (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (zabs (znsub (zfst a) (zsnd a))) (zabs a)))
        (zabseq ((znsub (zfst a) (zsnd a)) a))
        (zfstsnd (a)))))))

(local def zdvd ((m nat ()) (n nat ())) (wff ())
()
(dvd (zabs m) (zabs n)))

(local theorem zdvdeqd ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_mh (im _G (eq _m1 _m2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (iff (zdvd _m1 _n1) (zdvd _m2 _n2)))
()
(:conv (im _G (iff (zdvd _m1 _n1) (zdvd _m2 _n2)))
  (im
    _G
    (iff
      (:unfold zdvd (_m1 _n1) ()
        (dvd (zabs _m1) (zabs _n1)))
      (:unfold zdvd (_m2 _n2) ()
        (dvd (zabs _m2) (zabs _n2)))))
  (dvdeqd (_G (zabs _m1) (zabs _m2) (zabs _n1) (zabs _n2))
    (zabseqd (_G _m1 _m2)
      _mh)
    (zabseqd (_G _n1 _n2)
      _nh))))

(local theorem zdvdeq ((_m1 nat ()) (_m2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _m1 _m2) (im (eq _n1 _n2) (iff (zdvd _m1 _n1) (zdvd _m2 _n2))))
()
(exp ((eq _m1 _m2) (eq _n1 _n2) (iff (zdvd _m1 _n1) (zdvd _m2 _n2)))
  (zdvdeqd ((an (eq _m1 _m2) (eq _n1 _n2)) _m1 _m2 _n1 _n2)
    (anl ((eq _m1 _m2) (eq _n1 _n2)))
    (anr ((eq _m1 _m2) (eq _n1 _n2))))))

(local theorem zdvdeq1d ((_G wff ()) (_m1 nat ()) (_m2 nat ()) (n nat ()))
  ((_h (im _G (eq _m1 _m2))))
  (im _G (iff (zdvd _m1 n) (zdvd _m2 n)))
()
(zdvdeqd (_G _m1 _m2 n n)
  _h
  (eqidd (_G n))))

(local theorem zdvdeq1 ((_m1 nat ()) (_m2 nat ()) (n nat ())) ()
  (im (eq _m1 _m2) (iff (zdvd _m1 n) (zdvd _m2 n)))
()
(zdvdeq1d ((eq _m1 _m2) _m1 _m2 n)
  (id ((eq _m1 _m2)))))

(local theorem zdvdeq2d ((_G wff ()) (m nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (iff (zdvd m _n1) (zdvd m _n2)))
()
(zdvdeqd (_G m m _n1 _n2)
  (eqidd (_G m))
  _h))

(local theorem zdvdeq2 ((m nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (iff (zdvd m _n1) (zdvd m _n2)))
()
(zdvdeq2d ((eq _n1 _n2) m _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zdvdid ((a nat ())) ()
  (zdvd a a)
()
(:conv (zdvd a a)
  (:unfold zdvd (a a) ()
    (dvd (zabs a) (zabs a)))
  (dvdid ((zabs a)))))

(local theorem zdvdtr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (zdvd a b) (im (zdvd b c) (zdvd a c)))
()
(:conv (im (zdvd a b) (im (zdvd b c) (zdvd a c)))
  (im
    (:unfold zdvd (a b) ()
      (dvd (zabs a) (zabs b)))
    (im
      (:unfold zdvd (b c) ()
        (dvd (zabs b) (zabs c)))
      (:unfold zdvd (a c) ()
        (dvd (zabs a) (zabs c)))))
  (dvdtr ((zabs a) (zabs b) (zabs c)))))

(local theorem zdvdb0 ((a nat ()) (b nat ())) ()
  (iff (zdvd (b0 a) (b0 b)) (dvd a b))
()
(ax_mp ((eq (zabs (b0 b)) b) (iff (zdvd (b0 a) (b0 b)) (dvd a b)))
  (ax_mp ((eq (zabs (b0 a)) a) (im (eq (zabs (b0 b)) b) (iff (zdvd (b0 a) (b0 b)) (dvd a b))))
    (:conv (im (eq (zabs (b0 a)) a) (im (eq (zabs (b0 b)) b) (iff (zdvd (b0 a) (b0 b)) (dvd a b))))
      (im
        (eq (zabs (b0 a)) a)
        (im
          (eq (zabs (b0 b)) b)
          (iff
            (:unfold zdvd ((b0 a) (b0 b)) ()
              (dvd (zabs (b0 a)) (zabs (b0 b))))
            (dvd a b))))
      (dvdeq ((zabs (b0 a)) a (zabs (b0 b)) b)))
    (zabsb0 (a)))
  (zabsb0 (b))))

(local theorem zdvdb01 ((a nat ()) (b nat ())) ()
  (iff (zdvd (b0 a) b) (dvd a (zabs b)))
()
(ax_mp ((eq (zabs (b0 a)) a) (iff (zdvd (b0 a) b) (dvd a (zabs b))))
  (:conv (im (eq (zabs (b0 a)) a) (iff (zdvd (b0 a) b) (dvd a (zabs b))))
    (im
      (eq (zabs (b0 a)) a)
      (iff
        (:unfold zdvd ((b0 a) b) ()
          (dvd (zabs (b0 a)) (zabs b)))
        (dvd a (zabs b))))
    (dvdeq1 ((zabs (b0 a)) a (zabs b))))
  (zabsb0 (a))))

(local theorem zdvdb02 ((a nat ()) (b nat ())) ()
  (iff (zdvd a (b0 b)) (dvd (zabs a) b))
()
(ax_mp ((eq (zabs (b0 b)) b) (iff (zdvd a (b0 b)) (dvd (zabs a) b)))
  (:conv (im (eq (zabs (b0 b)) b) (iff (zdvd a (b0 b)) (dvd (zabs a) b)))
    (im
      (eq (zabs (b0 b)) b)
      (iff
        (:unfold zdvd (a (b0 b)) ()
          (dvd (zabs a) (zabs (b0 b))))
        (dvd (zabs a) b)))
    (dvdeq2 ((zabs a) (zabs (b0 b)) b)))
  (zabsb0 (b))))

(local theorem zdvdneg1 ((a nat ()) (b nat ())) ()
  (iff (zdvd (zneg a) b) (zdvd a b))
()
(ax_mp ((eq (zabs (zneg a)) (zabs a)) (iff (zdvd (zneg a) b) (zdvd a b)))
  (:conv (im (eq (zabs (zneg a)) (zabs a)) (iff (zdvd (zneg a) b) (zdvd a b)))
    (im
      (eq (zabs (zneg a)) (zabs a))
      (iff
        (:unfold zdvd ((zneg a) b) ()
          (dvd (zabs (zneg a)) (zabs b)))
        (:unfold zdvd (a b) ()
          (dvd (zabs a) (zabs b)))))
    (dvdeq1 ((zabs (zneg a)) (zabs a) (zabs b))))
  (zabsneg (a))))

(local theorem zdvdneg2 ((a nat ()) (b nat ())) ()
  (iff (zdvd a (zneg b)) (zdvd a b))
()
(ax_mp ((eq (zabs (zneg b)) (zabs b)) (iff (zdvd a (zneg b)) (zdvd a b)))
  (:conv (im (eq (zabs (zneg b)) (zabs b)) (iff (zdvd a (zneg b)) (zdvd a b)))
    (im
      (eq (zabs (zneg b)) (zabs b))
      (iff
        (:unfold zdvd (a (zneg b)) ()
          (dvd (zabs a) (zabs (zneg b))))
        (:unfold zdvd (a b) ()
          (dvd (zabs a) (zabs b)))))
    (dvdeq2 ((zabs a) (zabs (zneg b)) (zabs b))))
  (zabsneg (b))))

(local theorem eqmzdvdsub ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (eqm n a b) (zdvd (b0 n) (znsub b a)))
()
(ax_mp ((iff (zdvd (b0 n) (znsub b a)) (dvd n (zabs (znsub b a)))) (iff (eqm n a b) (zdvd (b0 n) (znsub b a))))
  (ax_mp ((iff (eqm n a b) (dvd n (zabs (znsub b a)))) (im (iff (zdvd (b0 n) (znsub b a)) (dvd n (zabs (znsub b a)))) (iff (eqm n a b) (zdvd (b0 n) (znsub b a)))))
    (bitr4 ((eqm n a b) (dvd n (zabs (znsub b a))) (zdvd (b0 n) (znsub b a))))
    (eqmdvdsub2 (a b n)))
  (ax_mp ((eq (zabs (b0 n)) n) (iff (zdvd (b0 n) (znsub b a)) (dvd n (zabs (znsub b a)))))
    (:conv (im (eq (zabs (b0 n)) n) (iff (zdvd (b0 n) (znsub b a)) (dvd n (zabs (znsub b a)))))
      (im
        (eq (zabs (b0 n)) n)
        (iff
          (:unfold zdvd ((b0 n) (znsub b a)) ()
            (dvd (zabs (b0 n)) (zabs (znsub b a))))
          (dvd n (zabs (znsub b a)))))
      (dvdeq1 ((zabs (b0 n)) n (zabs (znsub b a)))))
    (zabsb0 (n)))))

(local theorem zdvd01 ((a nat ())) ()
  (iff (zdvd (d0) a) (eq a (d0)))
()
(ax_mp ((iff (zdvd (b0 (d0)) a) (eq a (d0))) (iff (zdvd (d0) a) (eq a (d0))))
  (ax_mp ((iff (zdvd (b0 (d0)) a) (zdvd (d0) a)) (im (iff (zdvd (b0 (d0)) a) (eq a (d0))) (iff (zdvd (d0) a) (eq a (d0)))))
    (bitr3 ((zdvd (d0) a) (zdvd (b0 (d0)) a) (eq a (d0))))
    (ax_mp ((eq (b0 (d0)) (d0)) (iff (zdvd (b0 (d0)) a) (zdvd (d0) a)))
      (zdvdeq1 ((b0 (d0)) (d0) a))
      (b00 ())))
  (ax_mp ((iff (dvd (d0) (zabs a)) (eq a (d0))) (iff (zdvd (b0 (d0)) a) (eq a (d0))))
    (ax_mp ((iff (zdvd (b0 (d0)) a) (dvd (d0) (zabs a))) (im (iff (dvd (d0) (zabs a)) (eq a (d0))) (iff (zdvd (b0 (d0)) a) (eq a (d0)))))
      (bitr ((zdvd (b0 (d0)) a) (dvd (d0) (zabs a)) (eq a (d0))))
      (zdvdb01 ((d0) a)))
    (ax_mp ((iff (eq (zabs a) (d0)) (eq a (d0))) (iff (dvd (d0) (zabs a)) (eq a (d0))))
      (ax_mp ((iff (dvd (d0) (zabs a)) (eq (zabs a) (d0))) (im (iff (eq (zabs a) (d0)) (eq a (d0))) (iff (dvd (d0) (zabs a)) (eq a (d0)))))
        (bitr ((dvd (d0) (zabs a)) (eq (zabs a) (d0)) (eq a (d0))))
        (dvd01 ((zabs a))))
      (zabseq0 (a))))))

(local theorem zdvd02 ((a nat ())) ()
  (zdvd a (d0))
()
(mpbi ((zdvd a (b0 (d0))) (zdvd a (d0)))
  (ax_mp ((eq (b0 (d0)) (d0)) (iff (zdvd a (b0 (d0))) (zdvd a (d0))))
    (zdvdeq2 (a (b0 (d0)) (d0)))
    (b00 ()))
  (mpbir ((dvd (zabs a) (d0)) (zdvd a (b0 (d0))))
    (zdvdb02 (a (d0)))
    (dvd02 ((zabs a))))))

(local theorem zdvd11 ((a nat ())) ()
  (zdvd (b0 (d1)) a)
()
(mpbir ((dvd (d1) (zabs a)) (zdvd (b0 (d1)) a))
  (zdvdb01 ((d1) a))
  (dvd11 ((zabs a)))))

(local theorem zdvd12 ((a nat ())) ()
  (iff (zdvd a (b0 (d1))) (eq (zabs a) (d1)))
()
(ax_mp ((iff (dvd (zabs a) (d1)) (eq (zabs a) (d1))) (iff (zdvd a (b0 (d1))) (eq (zabs a) (d1))))
  (ax_mp ((iff (zdvd a (b0 (d1))) (dvd (zabs a) (d1))) (im (iff (dvd (zabs a) (d1)) (eq (zabs a) (d1))) (iff (zdvd a (b0 (d1))) (eq (zabs a) (d1)))))
    (bitr ((zdvd a (b0 (d1))) (dvd (zabs a) (d1)) (eq (zabs a) (d1))))
    (zdvdb02 (a (d1))))
  (dvd12 ((zabs a)))))

(local theorem zdvdmul1 ((a nat ()) (b nat ())) ()
  (zdvd a (zmul b a))
()
(mpbir ((dvd (zabs a) (mul (zabs b) (zabs a))) (zdvd a (zmul b a)))
  (ax_mp ((eq (zabs (zmul b a)) (mul (zabs b) (zabs a))) (iff (zdvd a (zmul b a)) (dvd (zabs a) (mul (zabs b) (zabs a)))))
    (:conv (im (eq (zabs (zmul b a)) (mul (zabs b) (zabs a))) (iff (zdvd a (zmul b a)) (dvd (zabs a) (mul (zabs b) (zabs a)))))
      (im
        (eq (zabs (zmul b a)) (mul (zabs b) (zabs a)))
        (iff
          (:unfold zdvd (a (zmul b a)) ()
            (dvd (zabs a) (zabs (zmul b a))))
          (dvd (zabs a) (mul (zabs b) (zabs a)))))
      (dvdeq2 ((zabs a) (zabs (zmul b a)) (mul (zabs b) (zabs a)))))
    (zabsmul (b a)))
  (dvdmul1 ((zabs a) (zabs b)))))

(local theorem zdvdmul2 ((a nat ()) (b nat ())) ()
  (zdvd a (zmul a b))
()
(mpbi ((zdvd a (zmul b a)) (zdvd a (zmul a b)))
  (ax_mp ((eq (zmul b a) (zmul a b)) (iff (zdvd a (zmul b a)) (zdvd a (zmul a b))))
    (zdvdeq2 (a (zmul b a) (zmul a b)))
    (zmulcom (b a)))
  (zdvdmul1 (a b))))

(local theorem izdvd ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (zmul c a) b) (zdvd a b))
()
(mpbii ((eq (zmul c a) b) (zdvd a (zmul c a)) (zdvd a b))
  (zdvdmul1 (a c))
  (zdvdeq2 (a (zmul c a) b))))

(local theorem izdvd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (zmul a c) b) (zdvd a b))
()
(mpbii ((eq (zmul a c) b) (zdvd a (zmul a c)) (zdvd a b))
  (zdvdmul2 (a c))
  (zdvdeq2 (a (zmul a c) b))))

(local theorem zdvddef ((a nat ()) (b nat ()) (c nat)) ()
  (iff (zdvd a b) (ex c (eq (zmul c a) b)))
()
(:let H1 (zb0orb0 (b))
(:let H2 (zdvdb0 ((zabs a) (zabs b)))
(:let H3 (zmulb0 ((div (zabs b) (zabs a)) (zabs a)))
(:let H4 (divmul ((zabs b) (zabs a)))
(:let H5 (b0eqd ((dvd (zabs a) (zabs b)) (mul (div (zabs b) (zabs a)) (zabs a)) (zabs b))
  H4)
(:let H6 (syl5eq ((dvd (zabs a) (zabs b)) (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a))) (b0 (mul (div (zabs b) (zabs a)) (zabs a))) (b0 (zabs b)))
  H3
  H5)
(:let H7 (anl ((eq a (b0 (zabs a))) (eq b (b0 (zabs b)))))
(:let H8 (anr ((eq a (b0 (zabs a))) (eq b (b0 (zabs b)))))
(:let H9 (znegeqd ((dvd (zabs a) (zabs b)) (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a))) (b0 (zabs b)))
  H6)
(:let H10 (anl ((eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))))
(:let H11 (anr ((eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))))
(:let H12 (zdvdneg1 ((b0 (zabs a)) (b0 (zabs b))))
(:let H13 (anl ((eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))))
(:let H14 (anr ((eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))))
(:let H15 (anl ((eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))))
(:let H16 (anr ((eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))))
(ibii ((zdvd a b) (ex c (eq (zmul c a) b)))
  (ax_mp ((or (eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
    (ax_mp ((im (eq a (zneg (b0 (zabs a)))) (im (zdvd a b) (ex c (eq (zmul c a) b)))) (im (or (eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a))))) (im (zdvd a b) (ex c (eq (zmul c a) b)))))
      (ax_mp ((im (eq a (b0 (zabs a))) (im (zdvd a b) (ex c (eq (zmul c a) b)))) (im (im (eq a (zneg (b0 (zabs a)))) (im (zdvd a b) (ex c (eq (zmul c a) b)))) (im (or (eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))))
        (eor ((eq a (b0 (zabs a))) (eq a (zneg (b0 (zabs a)))) (im (zdvd a b) (ex c (eq (zmul c a) b)))))
        (mpi ((eq a (b0 (zabs a))) (or (eq b (b0 (zabs b))) (eq b (zneg (b0 (zabs b))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
          H1
          (eorda ((eq a (b0 (zabs a))) (eq b (b0 (zabs b))) (eq b (zneg (b0 (zabs b)))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
            (mpbiri ((an (eq a (b0 (zabs a))) (eq b (b0 (zabs b)))) (im (zdvd (b0 (zabs a)) (b0 (zabs b))) (ex c (eq (zmul c (b0 (zabs a))) (b0 (zabs b))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
              (sylbi ((zdvd (b0 (zabs a)) (b0 (zabs b))) (dvd (zabs a) (zabs b)) (ex c (eq (zmul c (b0 (zabs a))) (b0 (zabs b)))))
                H2
                (syl ((dvd (zabs a) (zabs b)) (eq (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a))) (b0 (zabs b))) (ex c (eq (zmul c (b0 (zabs a))) (b0 (zabs b)))))
                  (iexe (c (b0 (div (zabs b) (zabs a))) (eq (zmul c (b0 (zabs a))) (b0 (zabs b))) (eq (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a))) (b0 (zabs b))))
                    (eqeq1d ((eq c (b0 (div (zabs b) (zabs a)))) (zmul c (b0 (zabs a))) (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a))) (b0 (zabs b)))
                      (zmuleq1 (c (b0 (div (zabs b) (zabs a))) (b0 (zabs a))))))
                  H6))
              (imeqd ((an (eq a (b0 (zabs a))) (eq b (b0 (zabs b)))) (zdvd a b) (zdvd (b0 (zabs a)) (b0 (zabs b))) (ex c (eq (zmul c a) b)) (ex c (eq (zmul c (b0 (zabs a))) (b0 (zabs b)))))
                (zdvdeqd ((an (eq a (b0 (zabs a))) (eq b (b0 (zabs b)))) a (b0 (zabs a)) b (b0 (zabs b)))
                  H7
                  H8)
                (exeqd ((an (eq a (b0 (zabs a))) (eq b (b0 (zabs b)))) c (eq (zmul c a) b) (eq (zmul c (b0 (zabs a))) (b0 (zabs b))))
                  (eqeqd ((an (eq a (b0 (zabs a))) (eq b (b0 (zabs b)))) (zmul c a) (zmul c (b0 (zabs a))) b (b0 (zabs b)))
                    (zmuleq2d ((an (eq a (b0 (zabs a))) (eq b (b0 (zabs b)))) c a (b0 (zabs a)))
                      H7)
                    H8))))
            (mpbiri ((an (eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))) (im (zdvd (b0 (zabs a)) (zneg (b0 (zabs b)))) (ex c (eq (zmul c (b0 (zabs a))) (zneg (b0 (zabs b)))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
              (sylbi ((zdvd (b0 (zabs a)) (zneg (b0 (zabs b)))) (zdvd (b0 (zabs a)) (b0 (zabs b))) (ex c (eq (zmul c (b0 (zabs a))) (zneg (b0 (zabs b))))))
                (zdvdneg2 ((b0 (zabs a)) (b0 (zabs b))))
                (sylbi ((zdvd (b0 (zabs a)) (b0 (zabs b))) (dvd (zabs a) (zabs b)) (ex c (eq (zmul c (b0 (zabs a))) (zneg (b0 (zabs b))))))
                  H2
                  (syl ((dvd (zabs a) (zabs b)) (eq (zmul (zneg (b0 (div (zabs b) (zabs a)))) (b0 (zabs a))) (zneg (b0 (zabs b)))) (ex c (eq (zmul c (b0 (zabs a))) (zneg (b0 (zabs b))))))
                    (iexe (c (zneg (b0 (div (zabs b) (zabs a)))) (eq (zmul c (b0 (zabs a))) (zneg (b0 (zabs b)))) (eq (zmul (zneg (b0 (div (zabs b) (zabs a)))) (b0 (zabs a))) (zneg (b0 (zabs b)))))
                      (eqeq1d ((eq c (zneg (b0 (div (zabs b) (zabs a))))) (zmul c (b0 (zabs a))) (zmul (zneg (b0 (div (zabs b) (zabs a)))) (b0 (zabs a))) (zneg (b0 (zabs b))))
                        (zmuleq1 (c (zneg (b0 (div (zabs b) (zabs a)))) (b0 (zabs a))))))
                    (syl5eq ((dvd (zabs a) (zabs b)) (zmul (zneg (b0 (div (zabs b) (zabs a)))) (b0 (zabs a))) (zneg (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a)))) (zneg (b0 (zabs b))))
                      (zmulneg1 ((b0 (div (zabs b) (zabs a))) (b0 (zabs a))))
                      H9))))
              (imeqd ((an (eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))) (zdvd a b) (zdvd (b0 (zabs a)) (zneg (b0 (zabs b)))) (ex c (eq (zmul c a) b)) (ex c (eq (zmul c (b0 (zabs a))) (zneg (b0 (zabs b))))))
                (zdvdeqd ((an (eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))) a (b0 (zabs a)) b (zneg (b0 (zabs b))))
                  H10
                  H11)
                (exeqd ((an (eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))) c (eq (zmul c a) b) (eq (zmul c (b0 (zabs a))) (zneg (b0 (zabs b)))))
                  (eqeqd ((an (eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))) (zmul c a) (zmul c (b0 (zabs a))) b (zneg (b0 (zabs b))))
                    (zmuleq2d ((an (eq a (b0 (zabs a))) (eq b (zneg (b0 (zabs b))))) c a (b0 (zabs a)))
                      H10)
                    H11)))))))
      (mpi ((eq a (zneg (b0 (zabs a)))) (or (eq b (b0 (zabs b))) (eq b (zneg (b0 (zabs b))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
        H1
        (eorda ((eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b))) (eq b (zneg (b0 (zabs b)))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
          (mpbiri ((an (eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))) (im (zdvd (zneg (b0 (zabs a))) (b0 (zabs b))) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (b0 (zabs b))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
            (sylbi ((zdvd (zneg (b0 (zabs a))) (b0 (zabs b))) (zdvd (b0 (zabs a)) (b0 (zabs b))) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (b0 (zabs b)))))
              H12
              (sylbi ((zdvd (b0 (zabs a)) (b0 (zabs b))) (dvd (zabs a) (zabs b)) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (b0 (zabs b)))))
                H2
                (syl ((dvd (zabs a) (zabs b)) (eq (zmul (zneg (b0 (div (zabs b) (zabs a)))) (zneg (b0 (zabs a)))) (b0 (zabs b))) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (b0 (zabs b)))))
                  (iexe (c (zneg (b0 (div (zabs b) (zabs a)))) (eq (zmul c (zneg (b0 (zabs a)))) (b0 (zabs b))) (eq (zmul (zneg (b0 (div (zabs b) (zabs a)))) (zneg (b0 (zabs a)))) (b0 (zabs b))))
                    (eqeq1d ((eq c (zneg (b0 (div (zabs b) (zabs a))))) (zmul c (zneg (b0 (zabs a)))) (zmul (zneg (b0 (div (zabs b) (zabs a)))) (zneg (b0 (zabs a)))) (b0 (zabs b)))
                      (zmuleq1 (c (zneg (b0 (div (zabs b) (zabs a)))) (zneg (b0 (zabs a)))))))
                  (syl5eq ((dvd (zabs a) (zabs b)) (zmul (zneg (b0 (div (zabs b) (zabs a)))) (zneg (b0 (zabs a)))) (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a))) (b0 (zabs b)))
                    (zmul2neg ((b0 (div (zabs b) (zabs a))) (b0 (zabs a))))
                    H6))))
            (imeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))) (zdvd a b) (zdvd (zneg (b0 (zabs a))) (b0 (zabs b))) (ex c (eq (zmul c a) b)) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (b0 (zabs b)))))
              (zdvdeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))) a (zneg (b0 (zabs a))) b (b0 (zabs b)))
                H13
                H14)
              (exeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))) c (eq (zmul c a) b) (eq (zmul c (zneg (b0 (zabs a)))) (b0 (zabs b))))
                (eqeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))) (zmul c a) (zmul c (zneg (b0 (zabs a)))) b (b0 (zabs b)))
                  (zmuleq2d ((an (eq a (zneg (b0 (zabs a)))) (eq b (b0 (zabs b)))) c a (zneg (b0 (zabs a))))
                    H13)
                  H14))))
          (mpbiri ((an (eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))) (im (zdvd (zneg (b0 (zabs a))) (zneg (b0 (zabs b)))) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b)))))) (im (zdvd a b) (ex c (eq (zmul c a) b))))
            (sylbi ((zdvd (zneg (b0 (zabs a))) (zneg (b0 (zabs b)))) (zdvd (zneg (b0 (zabs a))) (b0 (zabs b))) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b))))))
              (zdvdneg2 ((zneg (b0 (zabs a))) (b0 (zabs b))))
              (sylbi ((zdvd (zneg (b0 (zabs a))) (b0 (zabs b))) (zdvd (b0 (zabs a)) (b0 (zabs b))) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b))))))
                H12
                (sylbi ((zdvd (b0 (zabs a)) (b0 (zabs b))) (dvd (zabs a) (zabs b)) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b))))))
                  H2
                  (syl ((dvd (zabs a) (zabs b)) (eq (zmul (b0 (div (zabs b) (zabs a))) (zneg (b0 (zabs a)))) (zneg (b0 (zabs b)))) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b))))))
                    (iexe (c (b0 (div (zabs b) (zabs a))) (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b)))) (eq (zmul (b0 (div (zabs b) (zabs a))) (zneg (b0 (zabs a)))) (zneg (b0 (zabs b)))))
                      (eqeq1d ((eq c (b0 (div (zabs b) (zabs a)))) (zmul c (zneg (b0 (zabs a)))) (zmul (b0 (div (zabs b) (zabs a))) (zneg (b0 (zabs a)))) (zneg (b0 (zabs b))))
                        (zmuleq1 (c (b0 (div (zabs b) (zabs a))) (zneg (b0 (zabs a)))))))
                    (syl5eq ((dvd (zabs a) (zabs b)) (zmul (b0 (div (zabs b) (zabs a))) (zneg (b0 (zabs a)))) (zneg (zmul (b0 (div (zabs b) (zabs a))) (b0 (zabs a)))) (zneg (b0 (zabs b))))
                      (zmulneg2 ((b0 (div (zabs b) (zabs a))) (b0 (zabs a))))
                      H9)))))
            (imeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))) (zdvd a b) (zdvd (zneg (b0 (zabs a))) (zneg (b0 (zabs b)))) (ex c (eq (zmul c a) b)) (ex c (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b))))))
              (zdvdeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))) a (zneg (b0 (zabs a))) b (zneg (b0 (zabs b))))
                H15
                H16)
              (exeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))) c (eq (zmul c a) b) (eq (zmul c (zneg (b0 (zabs a)))) (zneg (b0 (zabs b)))))
                (eqeqd ((an (eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))) (zmul c a) (zmul c (zneg (b0 (zabs a)))) b (zneg (b0 (zabs b))))
                  (zmuleq2d ((an (eq a (zneg (b0 (zabs a)))) (eq b (zneg (b0 (zabs b))))) c a (zneg (b0 (zabs a))))
                    H15)
                  H16)))))))
    (zb0orb0 (a)))
  (eex (c (eq (zmul c a) b) (zdvd a b))
    (izdvd (a b c)))))))))))))))))))))

(local theorem zdvdadd1 ((a nat ()) (b nat ()) (n nat ())) ()
  (im (zdvd n a) (iff (zdvd n b) (zdvd n (zadd a b))))
((x nat) (y nat) (z nat))
(sylbi ((zdvd n a) (ex x (eq (zmul x n) a)) (iff (zdvd n b) (zdvd n (zadd a b))))
  (zdvddef (n a x))
  (eex (x (eq (zmul x n) a) (iff (zdvd n b) (zdvd n (zadd a b))))
    (ibid ((eq (zmul x n) a) (zdvd n b) (zdvd n (zadd a b)))
      (syl5bi ((eq (zmul x n) a) (zdvd n b) (ex y (eq (zmul y n) b)) (zdvd n (zadd a b)))
        (zdvddef (n b y))
        (eexda (y (eq (zmul x n) a) (eq (zmul y n) b) (zdvd n (zadd a b)))
          (syl ((an (eq (zmul x n) a) (eq (zmul y n) b)) (eq (zmul (zadd x y) n) (zadd a b)) (zdvd n (zadd a b)))
            (izdvd (n (zadd a b) (zadd x y)))
            (syl5eq ((an (eq (zmul x n) a) (eq (zmul y n) b)) (zmul (zadd x y) n) (zadd (zmul x n) (zmul y n)) (zadd a b))
              (zaddmul (x y n))
              (imp ((eq (zmul x n) a) (eq (zmul y n) b) (eq (zadd (zmul x n) (zmul y n)) (zadd a b)))
                (zaddeq ((zmul x n) a (zmul y n) b)))))))
      (syl5bi ((eq (zmul x n) a) (zdvd n (zadd a b)) (ex z (eq (zmul z n) (zadd a b))) (zdvd n b))
        (zdvddef (n (zadd a b) z))
        (eexda (z (eq (zmul x n) a) (eq (zmul z n) (zadd a b)) (zdvd n b))
          (syl ((an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (eq (zmul (zsub z x) n) b) (zdvd n b))
            (izdvd (n b (zsub z x)))
            (sylib ((an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (eq (zadd a (zmul (zsub z x) n)) (zadd a b)) (eq (zmul (zsub z x) n) b))
              (zaddcan2 (a (zmul (zsub z x) n) b))
              (eqtr3d ((an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (zadd a (zmul (zsub z x) n)) (zadd (zmul x n) (zmul (zsub z x) n)) (zadd a b))
                (anwl ((eq (zmul x n) a) (eq (zmul z n) (zadd a b)) (eq (zadd (zmul x n) (zmul (zsub z x) n)) (zadd a (zmul (zsub z x) n))))
                  (zaddeq1 ((zmul x n) a (zmul (zsub z x) n))))
                (syl5eqr ((an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (zadd (zmul x n) (zmul (zsub z x) n)) (zmul (zadd x (zsub z x)) n) (zadd a b))
                  (zaddmul (x (zsub z x) n))
                  (eqtrd ((an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (zmul (zadd x (zsub z x)) n) (zmul z n) (zadd a b))
                    (casesda ((an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (eq n (d0)) (eq (zmul (zadd x (zsub z x)) n) (zmul z n)))
                      (anwr ((an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (eq n (d0)) (eq (zmul (zadd x (zsub z x)) n) (zmul z n)))
                        (eqtr4d ((eq n (d0)) (zmul (zadd x (zsub z x)) n) (d0) (zmul z n))
                          (syl6eq ((eq n (d0)) (zmul (zadd x (zsub z x)) n) (zmul (zadd x (zsub z x)) (d0)) (d0))
                            (zmul02 ((zadd x (zsub z x))))
                            (zmuleq2 ((zadd x (zsub z x)) n (d0))))
                          (syl6eq ((eq n (d0)) (zmul z n) (zmul z (d0)) (d0))
                            (zmul02 (z))
                            (zmuleq2 (z n (d0))))))
                      (zmuleq1d ((an (an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (not (eq n (d0)))) (zadd x (zsub z x)) z n)
                        (a1i ((an (an (eq (zmul x n) a) (eq (zmul z n) (zadd a b))) (not (eq n (d0)))) (eq (zadd x (zsub z x)) z))
                          (zpncan3 (x z)))))
                    (anr ((eq (zmul x n) a) (eq (zmul z n) (zadd a b)))))))))))))))

(local theorem zdvdadd2 ((a nat ()) (b nat ()) (n nat ())) ()
  (im (zdvd n a) (iff (zdvd n b) (zdvd n (zadd b a))))
()
(syl6bb ((zdvd n a) (zdvd n b) (zdvd n (zadd a b)) (zdvd n (zadd b a)))
  (ax_mp ((eq (zadd a b) (zadd b a)) (iff (zdvd n (zadd a b)) (zdvd n (zadd b a))))
    (zdvdeqd ((eq (zadd a b) (zadd b a)) n n (zadd a b) (zadd b a))
      (eqidd ((eq (zadd a b) (zadd b a)) n))
      (id ((eq (zadd a b) (zadd b a)))))
    (zaddcom (a b)))
  (zdvdadd1 (a b n))))

(local theorem zdvdmul12 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (zdvd a b) (zdvd a (zmul c b)))
()
(mpi ((zdvd a b) (zdvd b (zmul c b)) (zdvd a (zmul c b)))
  (zdvdmul1 (b c))
  (zdvdtr (a b (zmul c b)))))

(local theorem zdvdmul11 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (zdvd a b) (zdvd a (zmul b c)))
()
(mpi ((zdvd a b) (zdvd b (zmul b c)) (zdvd a (zmul b c)))
  (zdvdmul2 (b c))
  (zdvdtr (a b (zmul b c)))))

(local def zmod ((a nat ()) (n nat ())) (nat ())
()
(mod (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))

(local theorem zmodeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (zmod _a1 _n1) (zmod _a2 _n2)))
()
(:conv (im _G (eq (zmod _a1 _n1) (zmod _a2 _n2)))
  (im
    _G
    (eq
      (:unfold zmod (_a1 _n1) ()
        (mod (zabs (znsub (add (zfst _a1) _n1) (mod (zsnd _a1) _n1))) _n1))
      (:unfold zmod (_a2 _n2) ()
        (mod (zabs (znsub (add (zfst _a2) _n2) (mod (zsnd _a2) _n2))) _n2))))
  (modeqd (_G (zabs (znsub (add (zfst _a1) _n1) (mod (zsnd _a1) _n1))) (zabs (znsub (add (zfst _a2) _n2) (mod (zsnd _a2) _n2))) _n1 _n2)
    (zabseqd (_G (znsub (add (zfst _a1) _n1) (mod (zsnd _a1) _n1)) (znsub (add (zfst _a2) _n2) (mod (zsnd _a2) _n2)))
      (znsubeqd (_G (add (zfst _a1) _n1) (add (zfst _a2) _n2) (mod (zsnd _a1) _n1) (mod (zsnd _a2) _n2))
        (addeqd (_G (zfst _a1) (zfst _a2) _n1 _n2)
          (zfsteqd (_G _a1 _a2)
            _ah)
          _nh)
        (modeqd (_G (zsnd _a1) (zsnd _a2) _n1 _n2)
          (zsndeqd (_G _a1 _a2)
            _ah)
          _nh)))
    _nh)))

(local theorem zmodeq ((_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _n1 _n2) (eq (zmod _a1 _n1) (zmod _a2 _n2))))
()
(exp ((eq _a1 _a2) (eq _n1 _n2) (eq (zmod _a1 _n1) (zmod _a2 _n2)))
  (zmodeqd ((an (eq _a1 _a2) (eq _n1 _n2)) _a1 _a2 _n1 _n2)
    (anl ((eq _a1 _a2) (eq _n1 _n2)))
    (anr ((eq _a1 _a2) (eq _n1 _n2))))))

(local theorem zmodeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (n nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (zmod _a1 n) (zmod _a2 n)))
()
(zmodeqd (_G _a1 _a2 n n)
  _h
  (eqidd (_G n))))

(local theorem zmodeq1 ((_a1 nat ()) (_a2 nat ()) (n nat ())) ()
  (im (eq _a1 _a2) (eq (zmod _a1 n) (zmod _a2 n)))
()
(zmodeq1d ((eq _a1 _a2) _a1 _a2 n)
  (id ((eq _a1 _a2)))))

(local theorem zmodeq2d ((_G wff ()) (a nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (zmod a _n1) (zmod a _n2)))
()
(zmodeqd (_G a a _n1 _n2)
  (eqidd (_G a))
  _h))

(local theorem zmodeq2 ((a nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (zmod a _n1) (zmod a _n2)))
()
(zmodeq2d ((eq _n1 _n2) a _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem zmod02 ((a nat ())) ()
  (eq (zmod a (d0)) (zabs a))
()
(ax_mp ((eq (mod (zabs a) (d0)) (zabs a)) (eq (zmod a (d0)) (zabs a)))
  (ax_mp ((eq (zmod a (d0)) (mod (zabs a) (d0))) (im (eq (mod (zabs a) (d0)) (zabs a)) (eq (zmod a (d0)) (zabs a))))
    (eqtr ((zmod a (d0)) (mod (zabs a) (d0)) (zabs a)))
    (ax_mp ((eq (zabs (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0)))) (zabs a)) (eq (zmod a (d0)) (mod (zabs a) (d0))))
      (:conv (im (eq (zabs (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0)))) (zabs a)) (eq (zmod a (d0)) (mod (zabs a) (d0))))
        (im
          (eq (zabs (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0)))) (zabs a))
          (eq
            (:unfold zmod (a (d0)) ()
              (mod (zabs (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0)))) (d0)))
            (mod (zabs a) (d0))))
        (modeq1 ((zabs (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0)))) (zabs a) (d0))))
      (ax_mp ((eq (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) a) (eq (zabs (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0)))) (zabs a)))
        (zabseq ((znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) a))
        (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (eq (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) a))
          (ax_mp ((eq (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) (znsub (zfst a) (zsnd a))) (im (eq (znsub (zfst a) (zsnd a)) a) (eq (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) a)))
            (eqtr ((znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) (znsub (zfst a) (zsnd a)) a))
            (ax_mp ((eq (mod (zsnd a) (d0)) (zsnd a)) (eq (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) (znsub (zfst a) (zsnd a))))
              (ax_mp ((eq (add (zfst a) (d0)) (zfst a)) (im (eq (mod (zsnd a) (d0)) (zsnd a)) (eq (znsub (add (zfst a) (d0)) (mod (zsnd a) (d0))) (znsub (zfst a) (zsnd a)))))
                (znsubeq ((add (zfst a) (d0)) (zfst a) (mod (zsnd a) (d0)) (zsnd a)))
                (add02 ((zfst a))))
              (mod0 ((zsnd a)))))
          (zfstsnd (a))))))
  (mod0 ((zabs a)))))

(local theorem zmodb00 ((a nat ())) ()
  (eq (zmod (b0 a) (d0)) a)
()
(ax_mp ((eq (zabs (b0 a)) a) (eq (zmod (b0 a) (d0)) a))
  (ax_mp ((eq (zmod (b0 a) (d0)) (zabs (b0 a))) (im (eq (zabs (b0 a)) a) (eq (zmod (b0 a) (d0)) a)))
    (eqtr ((zmod (b0 a) (d0)) (zabs (b0 a)) a))
    (zmod02 ((b0 a))))
  (zabsb0 (a))))

(local theorem zmodn02 ((a nat ()) (n nat ())) ()
  (im (ne n (d0)) (eq (zmod a n) (mod (sub (add (zfst a) n) (mod (zsnd a) n)) n)))
()
(:conv (im (ne n (d0)) (eq (zmod a n) (mod (sub (add (zfst a) n) (mod (zsnd a) n)) n)))
  (im
    (ne n (d0))
    (eq
      (:unfold zmod (a n) ()
        (mod (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))
      (mod (sub (add (zfst a) n) (mod (zsnd a) n)) n)))
  (modeq1d ((ne n (d0)) (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) (sub (add (zfst a) n) (mod (zsnd a) n)) n)
    (syl6eq ((ne n (d0)) (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) (zabs (b0 (sub (add (zfst a) n) (mod (zsnd a) n)))) (sub (add (zfst a) n) (mod (zsnd a) n)))
      (zabsb0 ((sub (add (zfst a) n) (mod (zsnd a) n))))
      (zabseqd ((ne n (d0)) (znsub (add (zfst a) n) (mod (zsnd a) n)) (b0 (sub (add (zfst a) n) (mod (zsnd a) n))))
        (syl ((ne n (d0)) (le (mod (zsnd a) n) (add (zfst a) n)) (eq (znsub (add (zfst a) n) (mod (zsnd a) n)) (b0 (sub (add (zfst a) n) (mod (zsnd a) n)))))
          (znsubpos ((add (zfst a) n) (mod (zsnd a) n)))
          (letrd ((ne n (d0)) (mod (zsnd a) n) n (add (zfst a) n))
            (syl ((ne n (d0)) (lt (mod (zsnd a) n) n) (le (mod (zsnd a) n) n))
              (ltle ((mod (zsnd a) n) n))
              (modlt ((zsnd a) n)))
            (a1i ((ne n (d0)) (le n (add (zfst a) n)))
              (leaddid2 (n (zfst a)))))))))))

(local theorem zmodb0 ((a nat ()) (n nat ())) ()
  (eq (zmod (b0 a) n) (mod a n))
()
(cases ((eq n (d0)) (eq (zmod (b0 a) n) (mod a n)))
  (eqtr4d ((eq n (d0)) (zmod (b0 a) n) (zmod (b0 a) (d0)) (mod a n))
    (zmodeq2 ((b0 a) n (d0)))
    (syl6eqr ((eq n (d0)) (mod a n) (zabs (b0 a)) (zmod (b0 a) (d0)))
      (zmod02 ((b0 a)))
      (syl6eqr ((eq n (d0)) (mod a n) a (zabs (b0 a)))
        (zabsb0 (a))
        (syl6eq ((eq n (d0)) (mod a n) (mod a (d0)) a)
          (mod0 (a))
          (modeq2 (a n (d0)))))))
  (syl6eq ((not (eq n (d0))) (zmod (b0 a) n) (mod (add a n) n) (mod a n))
    (:conv (eq (mod (add a n) n) (mod a n))
      (:sym (:unfold eqm (n (add a n) a) ()
        (eq (mod (add a n) n) (mod a n))))
      (eqmaddn (a n)))
    (syl6eq ((not (eq n (d0))) (zmod (b0 a) n) (mod (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) n) (mod (add a n) n))
      (ax_mp ((eq (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (add a n)) (eq (mod (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) n) (mod (add a n) n)))
        (modeq1 ((sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (add a n) n))
        (ax_mp ((eq (sub (add a n) (d0)) (add a n)) (eq (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (add a n)))
          (ax_mp ((eq (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (sub (add a n) (d0))) (im (eq (sub (add a n) (d0)) (add a n)) (eq (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (add a n))))
            (eqtr ((sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (sub (add a n) (d0)) (add a n)))
            (ax_mp ((eq (mod (zsnd (b0 a)) n) (d0)) (eq (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (sub (add a n) (d0))))
              (ax_mp ((eq (add (zfst (b0 a)) n) (add a n)) (im (eq (mod (zsnd (b0 a)) n) (d0)) (eq (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) (sub (add a n) (d0)))))
                (subeq ((add (zfst (b0 a)) n) (add a n) (mod (zsnd (b0 a)) n) (d0)))
                (ax_mp ((eq (zfst (b0 a)) a) (eq (add (zfst (b0 a)) n) (add a n)))
                  (addeq1 ((zfst (b0 a)) a n))
                  (zfstb0 (a))))
              (ax_mp ((eq (mod (d0) n) (d0)) (eq (mod (zsnd (b0 a)) n) (d0)))
                (ax_mp ((eq (mod (zsnd (b0 a)) n) (mod (d0) n)) (im (eq (mod (d0) n) (d0)) (eq (mod (zsnd (b0 a)) n) (d0))))
                  (eqtr ((mod (zsnd (b0 a)) n) (mod (d0) n) (d0)))
                  (ax_mp ((eq (zsnd (b0 a)) (d0)) (eq (mod (zsnd (b0 a)) n) (mod (d0) n)))
                    (modeq1 ((zsnd (b0 a)) (d0) n))
                    (zsndb0 (a))))
                (mod01 (n)))))
          (sub02 ((add a n)))))
      (:conv (im (not (eq n (d0))) (eq (zmod (b0 a) n) (mod (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) n)))
        (im
          (:sym (:unfold ne (n (d0)) ()
            (not (eq n (d0)))))
          (eq (zmod (b0 a) n) (mod (sub (add (zfst (b0 a)) n) (mod (zsnd (b0 a)) n)) n)))
        (zmodn02 ((b0 a) n)))))))

(local theorem zmodb1 ((a nat ()) (n nat ())) ()
  (im (lt a n) (eq (zmod (b1 a) n) (sub n (suc a))))
()
(:let H1 (lt01S (a))
(:let H2 (modid (n))
(eqtrd ((lt a n) (zmod (b1 a) n) (mod (sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) n) (sub n (suc a)))
  (syl ((lt a n) (ne n (d0)) (eq (zmod (b1 a) n) (mod (sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) n)))
    (zmodn02 ((b1 a) n))
    (sylib ((lt a n) (lt (d0) n) (ne n (d0)))
      (lt01 (n))
      (ax_mp ((le (d0) a) (im (lt a n) (lt (d0) n)))
        (lelttr ((d0) a n))
        (le01 (a)))))
  (syl5eq ((lt a n) (mod (sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) n) (mod (sub n (mod (suc a) n)) n) (sub n (suc a)))
    (ax_mp ((eq (sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) (sub n (mod (suc a) n))) (eq (mod (sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) n) (mod (sub n (mod (suc a) n)) n)))
      (modeq1 ((sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) (sub n (mod (suc a) n)) n))
      (ax_mp ((eq (mod (zsnd (b1 a)) n) (mod (suc a) n)) (eq (sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) (sub n (mod (suc a) n))))
        (ax_mp ((eq (add (zfst (b1 a)) n) n) (im (eq (mod (zsnd (b1 a)) n) (mod (suc a) n)) (eq (sub (add (zfst (b1 a)) n) (mod (zsnd (b1 a)) n)) (sub n (mod (suc a) n)))))
          (subeq ((add (zfst (b1 a)) n) n (mod (zsnd (b1 a)) n) (mod (suc a) n)))
          (ax_mp ((eq (add (d0) n) n) (eq (add (zfst (b1 a)) n) n))
            (ax_mp ((eq (add (zfst (b1 a)) n) (add (d0) n)) (im (eq (add (d0) n) n) (eq (add (zfst (b1 a)) n) n)))
              (eqtr ((add (zfst (b1 a)) n) (add (d0) n) n))
              (ax_mp ((eq (zfst (b1 a)) (d0)) (eq (add (zfst (b1 a)) n) (add (d0) n)))
                (addeq1 ((zfst (b1 a)) (d0) n))
                (zfstb1 (a))))
            (add01 (n))))
        (ax_mp ((eq (zsnd (b1 a)) (suc a)) (eq (mod (zsnd (b1 a)) n) (mod (suc a) n)))
          (modeq1 ((zsnd (b1 a)) (suc a) n))
          (zsndb1 (a)))))
    (sylbi ((lt a n) (or (lt (suc a) n) (eq (suc a) n)) (eq (mod (sub n (mod (suc a) n)) n) (sub n (suc a))))
      (:conv (iff (lt a n) (or (lt (suc a) n) (eq (suc a) n)))
        (iff
          (:unfold lt (a n) ()
            (le (suc a) n))
          (or (lt (suc a) n) (eq (suc a) n)))
        (leloe ((suc a) n)))
      (ax_mp ((im (eq (suc a) n) (eq (mod (sub n (mod (suc a) n)) n) (sub n (suc a)))) (im (or (lt (suc a) n) (eq (suc a) n)) (eq (mod (sub n (mod (suc a) n)) n) (sub n (suc a)))))
        (ax_mp ((im (lt (suc a) n) (eq (mod (sub n (mod (suc a) n)) n) (sub n (suc a)))) (im (im (eq (suc a) n) (eq (mod (sub n (mod (suc a) n)) n) (sub n (suc a)))) (im (or (lt (suc a) n) (eq (suc a) n)) (eq (mod (sub n (mod (suc a) n)) n) (sub n (suc a))))))
          (eor ((lt (suc a) n) (eq (suc a) n) (eq (mod (sub n (mod (suc a) n)) n) (sub n (suc a)))))
          (eqtrd ((lt (suc a) n) (mod (sub n (mod (suc a) n)) n) (mod (sub n (suc a)) n) (sub n (suc a)))
            (modeq1d ((lt (suc a) n) (sub n (mod (suc a) n)) (sub n (suc a)) n)
              (subeq2d ((lt (suc a) n) n (mod (suc a) n) (suc a))
                (modlteq ((suc a) n))))
            (syl ((lt (suc a) n) (lt (sub n (suc a)) n) (eq (mod (sub n (suc a)) n) (sub n (suc a))))
              (modlteq ((sub n (suc a)) n))
              (sylan ((lt (suc a) n) (lt (d0) n) (lt (d0) (suc a)) (lt (sub n (suc a)) n))
                (subltid (n (suc a)))
                (ax_mp ((lt (d0) (suc a)) (im (lt (suc a) n) (lt (d0) n)))
                  (lttr ((d0) (suc a) n))
                  H1)
                (a1i ((lt (suc a) n) (lt (d0) (suc a)))
                  H1)))))
        (eqtr4d ((eq (suc a) n) (mod (sub n (mod (suc a) n)) n) (mod n n) (sub n (suc a)))
          (modeq1d ((eq (suc a) n) (sub n (mod (suc a) n)) n n)
            (syl6eq ((eq (suc a) n) (sub n (mod (suc a) n)) (sub n (d0)) n)
              (sub02 (n))
              (subeq2d ((eq (suc a) n) n (mod (suc a) n) (d0))
                (syl6eq ((eq (suc a) n) (mod (suc a) n) (mod n n) (d0))
                  H2
                  (modeq1 ((suc a) n n))))))
          (syl6eqr ((eq (suc a) n) (sub n (suc a)) (d0) (mod n n))
            H2
            (syl6eq ((eq (suc a) n) (sub n (suc a)) (sub n n) (d0))
              (subid (n))
              (subeq2 (n (suc a) n))))))))))))

(local theorem zmod01 ((a nat ())) ()
  (eq (zmod (d0) a) (d0))
()
(ax_mp ((eq (zmod (b0 (d0)) a) (d0)) (eq (zmod (d0) a) (d0)))
  (ax_mp ((eq (zmod (b0 (d0)) a) (zmod (d0) a)) (im (eq (zmod (b0 (d0)) a) (d0)) (eq (zmod (d0) a) (d0))))
    (eqtr3 ((zmod (d0) a) (zmod (b0 (d0)) a) (d0)))
    (ax_mp ((eq (b0 (d0)) (d0)) (eq (zmod (b0 (d0)) a) (zmod (d0) a)))
      (zmodeq1 ((b0 (d0)) (d0) a))
      (b00 ())))
  (ax_mp ((eq (mod (d0) a) (d0)) (eq (zmod (b0 (d0)) a) (d0)))
    (ax_mp ((eq (zmod (b0 (d0)) a) (mod (d0) a)) (im (eq (mod (d0) a) (d0)) (eq (zmod (b0 (d0)) a) (d0))))
      (eqtr ((zmod (b0 (d0)) a) (mod (d0) a) (d0)))
      (zmodb0 ((d0) a)))
    (mod01 (a)))))

(local theorem zmodmodid ((a nat ()) (n nat ())) ()
  (eq (mod (zmod a n) n) (zmod a n))
()
(:conv (eq (mod (zmod a n) n) (zmod a n))
  (eq
    (mod
      (:unfold zmod (a n) ()
        (mod (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))
      n)
    (:unfold zmod (a n) ()
      (mod (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n)))
  (modmodid ((zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))))

(local theorem zmodeq0 ((a nat ()) (n nat ())) ()
  (iff (eq (zmod a n) (d0)) (zdvd (b0 n) a))
()
(ax_mp ((iff (zdvd (b0 n) a) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))) (iff (eq (zmod a n) (d0)) (zdvd (b0 n) a)))
  (ax_mp ((iff (eq (zmod a n) (d0)) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))) (im (iff (zdvd (b0 n) a) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))) (iff (eq (zmod a n) (d0)) (zdvd (b0 n) a))))
    (bitr4 ((eq (zmod a n) (d0)) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (zdvd (b0 n) a)))
    (:conv (iff (eq (zmod a n) (d0)) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))))
      (iff
        (eq
          (:unfold zmod (a n) ()
            (mod (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))
          (d0))
        (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))))
      (modeq0 ((zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))))
  (ax_mp ((iff (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (dvd n (zabs a))) (iff (zdvd (b0 n) a) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))))
    (ax_mp ((iff (zdvd (b0 n) a) (dvd n (zabs a))) (im (iff (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (dvd n (zabs a))) (iff (zdvd (b0 n) a) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))))))
      (bitr4 ((zdvd (b0 n) a) (dvd n (zabs a)) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))))
      (zdvdb01 (n a)))
    (trud ((iff (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (dvd n (zabs a))))
      (syl6bb ((tru) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (eqm n (zfst a) (zsnd a)) (dvd n (zabs a)))
        (eqmdvdsub3 (a n))
        (syl5bbr ((tru) (dvd n (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (eqm n (mod (zsnd a) n) (add (zfst a) n)) (eqm n (zfst a) (zsnd a)))
          (eqmdvdsub2 ((mod (zsnd a) n) (add (zfst a) n) n))
          (syl6bb ((tru) (eqm n (mod (zsnd a) n) (add (zfst a) n)) (eqm n (zsnd a) (zfst a)) (eqm n (zfst a) (zsnd a)))
            (eqmcomb ((zsnd a) (zfst a) n))
            (eqmeqm23d ((tru) (mod (zsnd a) n) (zsnd a) (add (zfst a) n) (zfst a) n)
              (a1i ((tru) (eqm n (mod (zsnd a) n) (zsnd a)))
                (eqmmod ((zsnd a) n)))
              (a1i ((tru) (eqm n (add (zfst a) n) (zfst a)))
                (eqmaddn ((zfst a) n)))))))))))

(local def zeqm ((n nat ()) (a nat ()) (b nat ())) (wff ())
()
(zdvd (b0 n) (zsub a b)))

(local theorem zeqmeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_nh (im _G (eq _n1 _n2)))
   (_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (iff (zeqm _n1 _a1 _b1) (zeqm _n2 _a2 _b2)))
()
(:conv (im _G (iff (zeqm _n1 _a1 _b1) (zeqm _n2 _a2 _b2)))
  (im
    _G
    (iff
      (:unfold zeqm (_n1 _a1 _b1) ()
        (zdvd (b0 _n1) (zsub _a1 _b1)))
      (:unfold zeqm (_n2 _a2 _b2) ()
        (zdvd (b0 _n2) (zsub _a2 _b2)))))
  (zdvdeqd (_G (b0 _n1) (b0 _n2) (zsub _a1 _b1) (zsub _a2 _b2))
    (b0eqd (_G _n1 _n2)
      _nh)
    (zsubeqd (_G _a1 _a2 _b1 _b2)
      _ah
      _bh))))

(local theorem zeqmeq ((_n1 nat ()) (_n2 nat ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _n1 _n2) (im (eq _a1 _a2) (im (eq _b1 _b2) (iff (zeqm _n1 _a1 _b1) (zeqm _n2 _a2 _b2)))))
()
(exp ((eq _n1 _n2) (eq _a1 _a2) (im (eq _b1 _b2) (iff (zeqm _n1 _a1 _b1) (zeqm _n2 _a2 _b2))))
  (exp ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2) (iff (zeqm _n1 _a1 _b1) (zeqm _n2 _a2 _b2)))
    (zeqmeqd ((an (an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2)) _n1 _n2 _a1 _a2 _b1 _b2)
      (anwl ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2) (eq _n1 _n2))
        (anl ((eq _n1 _n2) (eq _a1 _a2))))
      (anwl ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2) (eq _a1 _a2))
        (anr ((eq _n1 _n2) (eq _a1 _a2))))
      (anr ((an (eq _n1 _n2) (eq _a1 _a2)) (eq _b1 _b2)))))))

(local theorem zeqmeq1d ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (a nat ()) (b nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (iff (zeqm _n1 a b) (zeqm _n2 a b)))
()
(zeqmeqd (_G _n1 _n2 a a b b)
  _h
  (eqidd (_G a))
  (eqidd (_G b))))

(local theorem zeqmeq1 ((_n1 nat ()) (_n2 nat ()) (a nat ()) (b nat ())) ()
  (im (eq _n1 _n2) (iff (zeqm _n1 a b) (zeqm _n2 a b)))
()
(zeqmeq1d ((eq _n1 _n2) _n1 _n2 a b)
  (id ((eq _n1 _n2)))))

(local theorem zeqmeq2d ((_G wff ()) (n nat ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (zeqm n _a1 b) (zeqm n _a2 b)))
()
(zeqmeqd (_G n n _a1 _a2 b b)
  (eqidd (_G n))
  _h
  (eqidd (_G b))))

(local theorem zeqmeq2 ((n nat ()) (_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (iff (zeqm n _a1 b) (zeqm n _a2 b)))
()
(zeqmeq2d ((eq _a1 _a2) n _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem zeqmeq3d ((_G wff ()) (n nat ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (iff (zeqm n a _b1) (zeqm n a _b2)))
()
(zeqmeqd (_G n n a a _b1 _b2)
  (eqidd (_G n))
  (eqidd (_G a))
  _h))

(local theorem zeqmeq3 ((n nat ()) (a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (iff (zeqm n a _b1) (zeqm n a _b2)))
()
(zeqmeq3d ((eq _b1 _b2) n a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem zeqmid ((a nat ()) (n nat ())) ()
  (zeqm n a a)
()
(mpbir ((zdvd (b0 n) (d0)) (zeqm n a a))
  (ax_mp ((eq (zsub a a) (d0)) (iff (zeqm n a a) (zdvd (b0 n) (d0))))
    (:conv (im (eq (zsub a a) (d0)) (iff (zeqm n a a) (zdvd (b0 n) (d0))))
      (im
        (eq (zsub a a) (d0))
        (iff
          (:unfold zeqm (n a a) ()
            (zdvd (b0 n) (zsub a a)))
          (zdvd (b0 n) (d0))))
      (zdvdeq2 ((b0 n) (zsub a a) (d0))))
    (zsubid (a)))
  (zdvd02 ((b0 n)))))

(local theorem zeqmidd ((G wff ()) (a nat ()) (n nat ())) ()
  (im G (zeqm n a a))
()
(a1i (G (zeqm n a a))
  (zeqmid (a n))))

(local theorem zeqmtr ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (im (zeqm n a b) (im (zeqm n b c) (zeqm n a c)))
()
(syl6ib ((zeqm n a b) (zeqm n b c) (zdvd (b0 n) (zadd (zsub b c) (zsub a b))) (zeqm n a c))
  (ax_mp ((eq (zadd (zsub b c) (zsub a b)) (zsub a c)) (iff (zdvd (b0 n) (zadd (zsub b c) (zsub a b))) (zeqm n a c)))
    (:conv (im (eq (zadd (zsub b c) (zsub a b)) (zsub a c)) (iff (zdvd (b0 n) (zadd (zsub b c) (zsub a b))) (zeqm n a c)))
      (im
        (eq (zadd (zsub b c) (zsub a b)) (zsub a c))
        (iff
          (zdvd (b0 n) (zadd (zsub b c) (zsub a b)))
          (:unfold zeqm (n a c) ()
            (zdvd (b0 n) (zsub a c)))))
      (zdvdeq2 ((b0 n) (zadd (zsub b c) (zsub a b)) (zsub a c))))
    (znpncan2 (a b c)))
  (bi1d ((zeqm n a b) (zeqm n b c) (zdvd (b0 n) (zadd (zsub b c) (zsub a b))))
    (:conv (im (zeqm n a b) (iff (zeqm n b c) (zdvd (b0 n) (zadd (zsub b c) (zsub a b)))))
      (im
        (:unfold zeqm (n a b) ()
          (zdvd (b0 n) (zsub a b)))
        (iff
          (:unfold zeqm (n b c) ()
            (zdvd (b0 n) (zsub b c)))
          (zdvd (b0 n) (zadd (zsub b c) (zsub a b)))))
      (zdvdadd2 ((zsub a b) (zsub b c) (b0 n)))))))

(local theorem zeqmtrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h1 (im G (zeqm n a b)))
   (h2 (im G (zeqm n b c))))
  (im G (zeqm n a c))
()
(sylc (G (zeqm n a b) (zeqm n b c) (zeqm n a c))
  (zeqmtr (a b c n))
  h1
  h2))

(local theorem zeqmcomb ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (zeqm n a b) (zeqm n b a))
()
(ax_mp ((iff (zdvd (b0 n) (zneg (zsub a b))) (zeqm n b a)) (iff (zeqm n a b) (zeqm n b a)))
  (ax_mp ((iff (zdvd (b0 n) (zneg (zsub a b))) (zeqm n a b)) (im (iff (zdvd (b0 n) (zneg (zsub a b))) (zeqm n b a)) (iff (zeqm n a b) (zeqm n b a))))
    (bitr3 ((zeqm n a b) (zdvd (b0 n) (zneg (zsub a b))) (zeqm n b a)))
    (:conv (iff (zdvd (b0 n) (zneg (zsub a b))) (zeqm n a b))
      (iff
        (zdvd (b0 n) (zneg (zsub a b)))
        (:unfold zeqm (n a b) ()
          (zdvd (b0 n) (zsub a b))))
      (zdvdneg2 ((b0 n) (zsub a b)))))
  (ax_mp ((eq (zneg (zsub a b)) (zsub b a)) (iff (zdvd (b0 n) (zneg (zsub a b))) (zeqm n b a)))
    (:conv (im (eq (zneg (zsub a b)) (zsub b a)) (iff (zdvd (b0 n) (zneg (zsub a b))) (zeqm n b a)))
      (im
        (eq (zneg (zsub a b)) (zsub b a))
        (iff
          (zdvd (b0 n) (zneg (zsub a b)))
          (:unfold zeqm (n b a) ()
            (zdvd (b0 n) (zsub b a)))))
      (zdvdeq2 ((b0 n) (zneg (zsub a b)) (zsub b a))))
    (znegsub (a b)))))

(local theorem zeqmcom ((a nat ()) (b nat ()) (n nat ())) ()
  (im (zeqm n a b) (zeqm n b a))
()
(bi1i ((zeqm n a b) (zeqm n b a))
  (zeqmcomb (a b n))))

(local theorem zeqmcomd ((G wff ()) (a nat ()) (b nat ()) (n nat ()))
  ((h (im G (zeqm n a b))))
  (im G (zeqm n b a))
()
(syl (G (zeqm n a b) (zeqm n b a))
  (zeqmcom (a b n))
  h))

(local theorem zeqmtr4d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h1 (im G (zeqm n a b)))
   (h2 (im G (zeqm n c b))))
  (im G (zeqm n a c))
()
(zeqmtrd (G a b c n)
  h1
  (zeqmcomd (G c b n)
    h2)))

(local theorem zeqmtr3d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h1 (im G (zeqm n b a)))
   (h2 (im G (zeqm n b c))))
  (im G (zeqm n a c))
()
(zeqmtrd (G a b c n)
  (zeqmcomd (G b a n)
    h1)
  h2))

(local theorem eqzeqm ((a nat ()) (b nat ()) (n nat ())) ()
  (im (eq a b) (zeqm n a b))
()
(mpbii ((eq a b) (zeqm n a a) (zeqm n a b))
  (zeqmid (a n))
  (zeqmeq3 (n a a b))))

(local theorem eqzeqmd ((G wff ()) (a nat ()) (b nat ()) (n nat ()))
  ((h (im G (eq a b))))
  (im G (zeqm n a b))
()
(syl (G (eq a b) (zeqm n a b))
  (eqzeqm (a b n))
  h))

(local theorem zeqmeqm ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (zeqm n (b0 a) (b0 b)) (eqm n a b))
()
(ax_mp ((iff (eqm n a b) (zdvd (b0 n) (znsub a b))) (iff (zeqm n (b0 a) (b0 b)) (eqm n a b)))
  (ax_mp ((iff (zeqm n (b0 a) (b0 b)) (zdvd (b0 n) (znsub a b))) (im (iff (eqm n a b) (zdvd (b0 n) (znsub a b))) (iff (zeqm n (b0 a) (b0 b)) (eqm n a b))))
    (bitr4 ((zeqm n (b0 a) (b0 b)) (zdvd (b0 n) (znsub a b)) (eqm n a b)))
    (ax_mp ((eq (zsub (b0 a) (b0 b)) (znsub a b)) (iff (zeqm n (b0 a) (b0 b)) (zdvd (b0 n) (znsub a b))))
      (:conv (im (eq (zsub (b0 a) (b0 b)) (znsub a b)) (iff (zeqm n (b0 a) (b0 b)) (zdvd (b0 n) (znsub a b))))
        (im
          (eq (zsub (b0 a) (b0 b)) (znsub a b))
          (iff
            (:unfold zeqm (n (b0 a) (b0 b)) ()
              (zdvd (b0 n) (zsub (b0 a) (b0 b))))
            (zdvd (b0 n) (znsub a b))))
        (zdvdeq2 ((b0 n) (zsub (b0 a) (b0 b)) (znsub a b))))
      (zsubb0 (a b))))
  (ax_mp ((iff (eqm n b a) (zdvd (b0 n) (znsub a b))) (iff (eqm n a b) (zdvd (b0 n) (znsub a b))))
    (ax_mp ((iff (eqm n a b) (eqm n b a)) (im (iff (eqm n b a) (zdvd (b0 n) (znsub a b))) (iff (eqm n a b) (zdvd (b0 n) (znsub a b)))))
      (bitr ((eqm n a b) (eqm n b a) (zdvd (b0 n) (znsub a b))))
      (eqmcomb (a b n)))
    (eqmzdvdsub (b a n)))))

(local theorem zeqm03 ((a nat ()) (n nat ())) ()
  (iff (zeqm n a (d0)) (zdvd (b0 n) a))
()
(ax_mp ((eq (zsub a (d0)) a) (iff (zeqm n a (d0)) (zdvd (b0 n) a)))
  (:conv (im (eq (zsub a (d0)) a) (iff (zeqm n a (d0)) (zdvd (b0 n) a)))
    (im
      (eq (zsub a (d0)) a)
      (iff
        (:unfold zeqm (n a (d0)) ()
          (zdvd (b0 n) (zsub a (d0))))
        (zdvd (b0 n) a)))
    (zdvdeq2 ((b0 n) (zsub a (d0)) a)))
  (zsub02 (a))))

(local theorem zeqmznsub ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (zeqm n (znsub a b) (d0)) (eqm n a b))
()
(ax_mp ((iff (eqm n a b) (zdvd (b0 n) (znsub a b))) (iff (zeqm n (znsub a b) (d0)) (eqm n a b)))
  (ax_mp ((iff (zeqm n (znsub a b) (d0)) (zdvd (b0 n) (znsub a b))) (im (iff (eqm n a b) (zdvd (b0 n) (znsub a b))) (iff (zeqm n (znsub a b) (d0)) (eqm n a b))))
    (bitr4 ((zeqm n (znsub a b) (d0)) (zdvd (b0 n) (znsub a b)) (eqm n a b)))
    (zeqm03 ((znsub a b) n)))
  (ax_mp ((iff (eqm n b a) (zdvd (b0 n) (znsub a b))) (iff (eqm n a b) (zdvd (b0 n) (znsub a b))))
    (ax_mp ((iff (eqm n a b) (eqm n b a)) (im (iff (eqm n b a) (zdvd (b0 n) (znsub a b))) (iff (eqm n a b) (zdvd (b0 n) (znsub a b)))))
      (bitr ((eqm n a b) (eqm n b a) (zdvd (b0 n) (znsub a b))))
      (eqmcomb (a b n)))
    (eqmzdvdsub (b a n)))))

(local theorem zeqmsub ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (zeqm n (zsub a b) (d0)) (zeqm n a b))
()
(ax_mp ((eq (zsub (zsub a b) (d0)) (zsub a b)) (iff (zeqm n (zsub a b) (d0)) (zeqm n a b)))
  (:conv (im (eq (zsub (zsub a b) (d0)) (zsub a b)) (iff (zeqm n (zsub a b) (d0)) (zeqm n a b)))
    (im
      (eq (zsub (zsub a b) (d0)) (zsub a b))
      (iff
        (:unfold zeqm (n (zsub a b) (d0)) ()
          (zdvd (b0 n) (zsub (zsub a b) (d0))))
        (:unfold zeqm (n a b) ()
          (zdvd (b0 n) (zsub a b)))))
    (zdvdeq2 ((b0 n) (zsub (zsub a b) (d0)) (zsub a b))))
  (zsub02 ((zsub a b)))))

(local theorem zeqmid0 ((n nat ())) ()
  (zeqm n (b0 n) (d0))
()
(mpbir ((zdvd (b0 n) (b0 n)) (zeqm n (b0 n) (d0)))
  (zeqm03 ((b0 n) n))
  (zdvdid ((b0 n)))))

(local theorem zeqm01 ((a nat ()) (b nat ())) ()
  (iff (zeqm (d0) a b) (eq a b))
()
(ax_mp ((iff (zdvd (d0) (zsub a b)) (eq a b)) (iff (zeqm (d0) a b) (eq a b)))
  (ax_mp ((iff (zeqm (d0) a b) (zdvd (d0) (zsub a b))) (im (iff (zdvd (d0) (zsub a b)) (eq a b)) (iff (zeqm (d0) a b) (eq a b))))
    (bitr ((zeqm (d0) a b) (zdvd (d0) (zsub a b)) (eq a b)))
    (ax_mp ((eq (b0 (d0)) (d0)) (iff (zeqm (d0) a b) (zdvd (d0) (zsub a b))))
      (:conv (im (eq (b0 (d0)) (d0)) (iff (zeqm (d0) a b) (zdvd (d0) (zsub a b))))
        (im
          (eq (b0 (d0)) (d0))
          (iff
            (:unfold zeqm ((d0) a b) ()
              (zdvd (b0 (d0)) (zsub a b)))
            (zdvd (d0) (zsub a b))))
        (zdvdeq1 ((b0 (d0)) (d0) (zsub a b))))
      (b00 ())))
  (ax_mp ((iff (eq (zsub a b) (d0)) (eq a b)) (iff (zdvd (d0) (zsub a b)) (eq a b)))
    (ax_mp ((iff (zdvd (d0) (zsub a b)) (eq (zsub a b) (d0))) (im (iff (eq (zsub a b) (d0)) (eq a b)) (iff (zdvd (d0) (zsub a b)) (eq a b))))
      (bitr ((zdvd (d0) (zsub a b)) (eq (zsub a b) (d0)) (eq a b)))
      (zdvd01 ((zsub a b))))
    (zsubeq0 (a b)))))

(local theorem zeqmeqm23d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (zeqm n a b)))
   (h2 (im G (zeqm n c d))))
  (im G (iff (zeqm n a c) (zeqm n b d)))
()
(ibida (G (zeqm n a c) (zeqm n b d))
  (sylc ((an G (zeqm n a c)) (zeqm n b a) (zeqm n a d) (zeqm n b d))
    (zeqmtr (b a d n))
    (syl ((an G (zeqm n a c)) (zeqm n a b) (zeqm n b a))
      (zeqmcom (a b n))
      (anwl (G (zeqm n a c) (zeqm n a b))
        h1))
    (sylc ((an G (zeqm n a c)) (zeqm n a c) (zeqm n c d) (zeqm n a d))
      (zeqmtr (a c d n))
      (anr (G (zeqm n a c)))
      (anwl (G (zeqm n a c) (zeqm n c d))
        h2)))
  (sylc ((an G (zeqm n b d)) (zeqm n a b) (zeqm n b c) (zeqm n a c))
    (zeqmtr (a b c n))
    (anwl (G (zeqm n b d) (zeqm n a b))
      h1)
    (sylc ((an G (zeqm n b d)) (zeqm n b d) (zeqm n d c) (zeqm n b c))
      (zeqmtr (b d c n))
      (anr (G (zeqm n b d)))
      (syl ((an G (zeqm n b d)) (zeqm n c d) (zeqm n d c))
        (zeqmcom (c d n))
        (anwl (G (zeqm n b d) (zeqm n c d))
          h2))))))

(local theorem zeqmeqm2 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (im (zeqm n a b) (iff (zeqm n a c) (zeqm n b c)))
()
(zeqmeqm23d ((zeqm n a b) a b c c n)
  (id ((zeqm n a b)))
  (a1i ((zeqm n a b) (zeqm n c c))
    (zeqmid (c n)))))

(local theorem zeqmeqm3 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (im (zeqm n b c) (iff (zeqm n a b) (zeqm n a c)))
()
(zeqmeqm23d ((zeqm n b c) a a b c n)
  (a1i ((zeqm n b c) (zeqm n a a))
    (zeqmid (a n)))
  (id ((zeqm n b c)))))

(local theorem zeqmadd1 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (zeqm n (zadd a c) (zadd b c)) (zeqm n a b))
()
(ax_mp ((eq (zsub (zadd a c) (zadd b c)) (zsub a b)) (iff (zeqm n (zadd a c) (zadd b c)) (zeqm n a b)))
  (:conv (im (eq (zsub (zadd a c) (zadd b c)) (zsub a b)) (iff (zeqm n (zadd a c) (zadd b c)) (zeqm n a b)))
    (im
      (eq (zsub (zadd a c) (zadd b c)) (zsub a b))
      (iff
        (:unfold zeqm (n (zadd a c) (zadd b c)) ()
          (zdvd (b0 n) (zsub (zadd a c) (zadd b c))))
        (:unfold zeqm (n a b) ()
          (zdvd (b0 n) (zsub a b)))))
    (zdvdeq2 ((b0 n) (zsub (zadd a c) (zadd b c)) (zsub a b))))
  (zpnpcan1 (a b c))))

(local theorem zeqmadd2 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (zeqm n (zadd a b) (zadd a c)) (zeqm n b c))
()
(ax_mp ((eq (zsub (zadd a b) (zadd a c)) (zsub b c)) (iff (zeqm n (zadd a b) (zadd a c)) (zeqm n b c)))
  (:conv (im (eq (zsub (zadd a b) (zadd a c)) (zsub b c)) (iff (zeqm n (zadd a b) (zadd a c)) (zeqm n b c)))
    (im
      (eq (zsub (zadd a b) (zadd a c)) (zsub b c))
      (iff
        (:unfold zeqm (n (zadd a b) (zadd a c)) ()
          (zdvd (b0 n) (zsub (zadd a b) (zadd a c))))
        (:unfold zeqm (n b c) ()
          (zdvd (b0 n) (zsub b c)))))
    (zdvdeq2 ((b0 n) (zsub (zadd a b) (zadd a c)) (zsub b c))))
  (zpnpcan2 (a b c))))

(local theorem zeqmadd1d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h (im G (zeqm n a b))))
  (im G (zeqm n (zadd a c) (zadd b c)))
()
(sylibr (G (zeqm n a b) (zeqm n (zadd a c) (zadd b c)))
  (zeqmadd1 (a b c n))
  h))

(local theorem zeqmadd2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h (im G (zeqm n b c))))
  (im G (zeqm n (zadd a b) (zadd a c)))
()
(sylibr (G (zeqm n b c) (zeqm n (zadd a b) (zadd a c)))
  (zeqmadd2 (a b c n))
  h))

(local theorem zeqmaddd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (zeqm n a b)))
   (h2 (im G (zeqm n c d))))
  (im G (zeqm n (zadd a c) (zadd b d)))
()
(sylc (G (zeqm n (zadd a c) (zadd b c)) (zeqm n (zadd b c) (zadd b d)) (zeqm n (zadd a c) (zadd b d)))
  (zeqmtr ((zadd a c) (zadd b c) (zadd b d) n))
  (zeqmadd1d (G a b c n)
    h1)
  (zeqmadd2d (G b c d n)
    h2)))

(local theorem zeqmneg ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (zeqm n (zneg a) (zneg b)) (zeqm n a b))
()
(ax_mp ((iff (zeqm n (zneg b) (zneg a)) (zeqm n a b)) (iff (zeqm n (zneg a) (zneg b)) (zeqm n a b)))
  (ax_mp ((iff (zeqm n (zneg a) (zneg b)) (zeqm n (zneg b) (zneg a))) (im (iff (zeqm n (zneg b) (zneg a)) (zeqm n a b)) (iff (zeqm n (zneg a) (zneg b)) (zeqm n a b))))
    (bitr ((zeqm n (zneg a) (zneg b)) (zeqm n (zneg b) (zneg a)) (zeqm n a b)))
    (zeqmcomb ((zneg a) (zneg b) n)))
  (ax_mp ((eq (zsub (zneg b) (zneg a)) (zsub a b)) (iff (zeqm n (zneg b) (zneg a)) (zeqm n a b)))
    (:conv (im (eq (zsub (zneg b) (zneg a)) (zsub a b)) (iff (zeqm n (zneg b) (zneg a)) (zeqm n a b)))
      (im
        (eq (zsub (zneg b) (zneg a)) (zsub a b))
        (iff
          (:unfold zeqm (n (zneg b) (zneg a)) ()
            (zdvd (b0 n) (zsub (zneg b) (zneg a))))
          (:unfold zeqm (n a b) ()
            (zdvd (b0 n) (zsub a b)))))
      (zdvdeq2 ((b0 n) (zsub (zneg b) (zneg a)) (zsub a b))))
    (znegsub2 (b a)))))

(local theorem zeqmsub1 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (zeqm n (zsub a c) (zsub b c)) (zeqm n a b))
()
(:conv (iff (zeqm n (zsub a c) (zsub b c)) (zeqm n a b))
  (iff
    (zeqm
      n
      (:unfold zsub (a c) ()
        (zadd a (zneg c)))
      (:unfold zsub (b c) ()
        (zadd b (zneg c))))
    (zeqm n a b))
  (zeqmadd1 (a b (zneg c) n))))

(local theorem zeqmsub2 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (zeqm n (zsub a b) (zsub a c)) (zeqm n b c))
()
(ax_mp ((iff (zeqm n (zneg b) (zneg c)) (zeqm n b c)) (iff (zeqm n (zsub a b) (zsub a c)) (zeqm n b c)))
  (ax_mp ((iff (zeqm n (zsub a b) (zsub a c)) (zeqm n (zneg b) (zneg c))) (im (iff (zeqm n (zneg b) (zneg c)) (zeqm n b c)) (iff (zeqm n (zsub a b) (zsub a c)) (zeqm n b c))))
    (bitr ((zeqm n (zsub a b) (zsub a c)) (zeqm n (zneg b) (zneg c)) (zeqm n b c)))
    (:conv (iff (zeqm n (zsub a b) (zsub a c)) (zeqm n (zneg b) (zneg c)))
      (iff
        (zeqm
          n
          (:unfold zsub (a b) ()
            (zadd a (zneg b)))
          (:unfold zsub (a c) ()
            (zadd a (zneg c))))
        (zeqm n (zneg b) (zneg c)))
      (zeqmadd2 (a (zneg b) (zneg c) n))))
  (zeqmneg (b c n))))

(local theorem zeqmsubd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (zeqm n a b)))
   (h2 (im G (zeqm n c d))))
  (im G (zeqm n (zsub a c) (zsub b d)))
()
(sylc (G (zeqm n (zsub a c) (zsub b c)) (zeqm n (zsub b c) (zsub b d)) (zeqm n (zsub a c) (zsub b d)))
  (zeqmtr ((zsub a c) (zsub b c) (zsub b d) n))
  (sylibr (G (zeqm n a b) (zeqm n (zsub a c) (zsub b c)))
    (zeqmsub1 (a b c n))
    h1)
  (sylibr (G (zeqm n c d) (zeqm n (zsub b c) (zsub b d)))
    (zeqmsub2 (b c d n))
    h2)))

(local theorem zeqmznsub1 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (zeqm n (znsub a c) (znsub b c)) (eqm n a b))
()
(ax_mp ((iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (eqm n a b)) (iff (zeqm n (znsub a c) (znsub b c)) (eqm n a b)))
  (ax_mp ((iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (zeqm n (znsub a c) (znsub b c))) (im (iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (eqm n a b)) (iff (zeqm n (znsub a c) (znsub b c)) (eqm n a b))))
    (bitr3 ((zeqm n (znsub a c) (znsub b c)) (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (eqm n a b)))
    (ax_mp ((eq (zsub (b0 b) (b0 c)) (znsub b c)) (iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (zeqm n (znsub a c) (znsub b c))))
      (ax_mp ((eq (zsub (b0 a) (b0 c)) (znsub a c)) (im (eq (zsub (b0 b) (b0 c)) (znsub b c)) (iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (zeqm n (znsub a c) (znsub b c)))))
        (ax_mp ((eq n n) (im (eq (zsub (b0 a) (b0 c)) (znsub a c)) (im (eq (zsub (b0 b) (b0 c)) (znsub b c)) (iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (zeqm n (znsub a c) (znsub b c))))))
          (zeqmeq (n n (zsub (b0 a) (b0 c)) (znsub a c) (zsub (b0 b) (b0 c)) (znsub b c)))
          (eqid (n)))
        (zsubb0 (a c)))
      (zsubb0 (b c))))
  (ax_mp ((iff (zeqm n (b0 a) (b0 b)) (eqm n a b)) (iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (eqm n a b)))
    (ax_mp ((iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (zeqm n (b0 a) (b0 b))) (im (iff (zeqm n (b0 a) (b0 b)) (eqm n a b)) (iff (zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (eqm n a b))))
      (bitr ((zeqm n (zsub (b0 a) (b0 c)) (zsub (b0 b) (b0 c))) (zeqm n (b0 a) (b0 b)) (eqm n a b)))
      (zeqmsub1 ((b0 a) (b0 b) (b0 c) n)))
    (zeqmeqm (a b n)))))

(local theorem zeqmznsub2 ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (iff (zeqm n (znsub a b) (znsub a c)) (eqm n b c))
()
(ax_mp ((iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (eqm n b c)) (iff (zeqm n (znsub a b) (znsub a c)) (eqm n b c)))
  (ax_mp ((iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (zeqm n (znsub a b) (znsub a c))) (im (iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (eqm n b c)) (iff (zeqm n (znsub a b) (znsub a c)) (eqm n b c))))
    (bitr3 ((zeqm n (znsub a b) (znsub a c)) (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (eqm n b c)))
    (ax_mp ((eq (zsub (b0 a) (b0 c)) (znsub a c)) (iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (zeqm n (znsub a b) (znsub a c))))
      (ax_mp ((eq (zsub (b0 a) (b0 b)) (znsub a b)) (im (eq (zsub (b0 a) (b0 c)) (znsub a c)) (iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (zeqm n (znsub a b) (znsub a c)))))
        (ax_mp ((eq n n) (im (eq (zsub (b0 a) (b0 b)) (znsub a b)) (im (eq (zsub (b0 a) (b0 c)) (znsub a c)) (iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (zeqm n (znsub a b) (znsub a c))))))
          (zeqmeq (n n (zsub (b0 a) (b0 b)) (znsub a b) (zsub (b0 a) (b0 c)) (znsub a c)))
          (eqid (n)))
        (zsubb0 (a b)))
      (zsubb0 (a c))))
  (ax_mp ((iff (zeqm n (b0 b) (b0 c)) (eqm n b c)) (iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (eqm n b c)))
    (ax_mp ((iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (zeqm n (b0 b) (b0 c))) (im (iff (zeqm n (b0 b) (b0 c)) (eqm n b c)) (iff (zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (eqm n b c))))
      (bitr ((zeqm n (zsub (b0 a) (b0 b)) (zsub (b0 a) (b0 c))) (zeqm n (b0 b) (b0 c)) (eqm n b c)))
      (zeqmsub2 ((b0 a) (b0 b) (b0 c) n)))
    (zeqmeqm (b c n)))))

(local theorem zeqmznsubd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (eqm n a b)))
   (h2 (im G (eqm n c d))))
  (im G (zeqm n (znsub a c) (znsub b d)))
()
(sylc (G (zeqm n (znsub a c) (znsub b c)) (zeqm n (znsub b c) (znsub b d)) (zeqm n (znsub a c) (znsub b d)))
  (zeqmtr ((znsub a c) (znsub b c) (znsub b d) n))
  (sylibr (G (eqm n a b) (zeqm n (znsub a c) (znsub b c)))
    (zeqmznsub1 (a b c n))
    h1)
  (sylibr (G (eqm n c d) (zeqm n (znsub b c) (znsub b d)))
    (zeqmznsub2 (b c d n))
    h2)))

(local theorem zeqmaddn ((a nat ()) (n nat ())) ()
  (zeqm n (zadd a (b0 n)) a)
()
(mpbi ((zeqm n (zadd a (b0 n)) (zadd a (d0))) (zeqm n (zadd a (b0 n)) a))
  (ax_mp ((eq (zadd a (d0)) a) (iff (zeqm n (zadd a (b0 n)) (zadd a (d0))) (zeqm n (zadd a (b0 n)) a)))
    (zeqmeq3 (n (zadd a (b0 n)) (zadd a (d0)) a))
    (zadd02 (a)))
  (mpbir ((zeqm n (b0 n) (d0)) (zeqm n (zadd a (b0 n)) (zadd a (d0))))
    (zeqmadd2 (a (b0 n) (d0) n))
    (zeqmid0 (n)))))

(local theorem zeqmmod ((a nat ()) (n nat ())) ()
  (im (ne n (d0)) (zeqm n (b0 (zmod a n)) a))
()
(syl ((ne n (d0)) (zeqm n (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) a) (zeqm n (b0 (zmod a n)) a))
  (ax_mp ((zeqm n (b0 (zmod a n)) (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))) (im (zeqm n (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) a) (zeqm n (b0 (zmod a n)) a)))
    (zeqmtr ((b0 (zmod a n)) (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) a n))
    (mpbir ((eqm n (zmod a n) (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (zeqm n (b0 (zmod a n)) (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))))
      (zeqmeqm ((zmod a n) (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))
      (:conv (eqm n (zmod a n) (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))
        (eqm
          n
          (:unfold zmod (a n) ()
            (mod (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n))
          (zabs (znsub (add (zfst a) n) (mod (zsnd a) n))))
        (eqmmod ((zabs (znsub (add (zfst a) n) (mod (zsnd a) n))) n)))))
  (mpbird ((ne n (d0)) (zeqm n (znsub (add (zfst a) n) (mod (zsnd a) n)) a) (zeqm n (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) a))
    (zeqmeq2d ((ne n (d0)) n (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (znsub (add (zfst a) n) (mod (zsnd a) n)) a)
      (sylibr ((ne n (d0)) (zle (d0) (znsub (add (zfst a) n) (mod (zsnd a) n))) (eq (b0 (zabs (znsub (add (zfst a) n) (mod (zsnd a) n)))) (znsub (add (zfst a) n) (mod (zsnd a) n))))
        (b0zabs ((znsub (add (zfst a) n) (mod (zsnd a) n))))
        (sylibr ((ne n (d0)) (le (mod (zsnd a) n) (add (zfst a) n)) (zle (d0) (znsub (add (zfst a) n) (mod (zsnd a) n))))
          (zle0znsub ((add (zfst a) n) (mod (zsnd a) n)))
          (letrd ((ne n (d0)) (mod (zsnd a) n) n (add (zfst a) n))
            (syl ((ne n (d0)) (lt (mod (zsnd a) n) n) (le (mod (zsnd a) n) n))
              (ltle ((mod (zsnd a) n) n))
              (modlt ((zsnd a) n)))
            (a1i ((ne n (d0)) (le n (add (zfst a) n)))
              (leaddid2 (n (zfst a))))))))
    (sylib ((ne n (d0)) (zeqm n (znsub (add (zfst a) n) (mod (zsnd a) n)) (znsub (zfst a) (zsnd a))) (zeqm n (znsub (add (zfst a) n) (mod (zsnd a) n)) a))
      (ax_mp ((eq (znsub (zfst a) (zsnd a)) a) (iff (zeqm n (znsub (add (zfst a) n) (mod (zsnd a) n)) (znsub (zfst a) (zsnd a))) (zeqm n (znsub (add (zfst a) n) (mod (zsnd a) n)) a)))
        (zeqmeq3 (n (znsub (add (zfst a) n) (mod (zsnd a) n)) (znsub (zfst a) (zsnd a)) a))
        (zfstsnd (a)))
      (zeqmznsubd ((ne n (d0)) (add (zfst a) n) (zfst a) (mod (zsnd a) n) (zsnd a) n)
        (a1i ((ne n (d0)) (eqm n (add (zfst a) n) (zfst a)))
          (eqmaddn ((zfst a) n)))
        (a1i ((ne n (d0)) (eqm n (mod (zsnd a) n) (zsnd a)))
          (eqmmod ((zsnd a) n))))))))

(local theorem zmodeqmod ((a nat ()) (b nat ()) (n nat ())) ()
  (im (ne n (d0)) (iff (eq (zmod a n) (zmod b n)) (zeqm n a b)))
()
(syl5bb ((ne n (d0)) (eq (zmod a n) (zmod b n)) (zeqm n (b0 (zmod a n)) (b0 (zmod b n))) (zeqm n a b))
  (ibii ((eq (zmod a n) (zmod b n)) (zeqm n (b0 (zmod a n)) (b0 (zmod b n))))
    (syl ((eq (zmod a n) (zmod b n)) (eq (b0 (zmod a n)) (b0 (zmod b n))) (zeqm n (b0 (zmod a n)) (b0 (zmod b n))))
      (eqzeqm ((b0 (zmod a n)) (b0 (zmod b n)) n))
      (b0eq ((zmod a n) (zmod b n))))
    (eqtr3g ((zeqm n (b0 (zmod a n)) (b0 (zmod b n))) (mod (zmod a n) n) (mod (zmod b n) n) (zmod a n) (zmod b n))
      (zmodmodid (a n))
      (zmodmodid (b n))
      (bi1i ((zeqm n (b0 (zmod a n)) (b0 (zmod b n))) (eq (mod (zmod a n) n) (mod (zmod b n) n)))
        (:conv (iff (zeqm n (b0 (zmod a n)) (b0 (zmod b n))) (eq (mod (zmod a n) n) (mod (zmod b n) n)))
          (iff
            (zeqm n (b0 (zmod a n)) (b0 (zmod b n)))
            (:sym (:unfold eqm (n (zmod a n) (zmod b n)) ()
              (eq (mod (zmod a n) n) (mod (zmod b n) n)))))
          (zeqmeqm ((zmod a n) (zmod b n) n))))))
  (zeqmeqm23d ((ne n (d0)) (b0 (zmod a n)) a (b0 (zmod b n)) b n)
    (zeqmmod (a n))
    (zeqmmod (b n)))))

(local theorem dvdzeqm ((G wff ()) (a nat ()) (b nat ()) (m nat ()) (n nat ()))
  ((h1 (im G (dvd m n)))
   (h2 (im G (zeqm n a b))))
  (im G (zeqm m a b))
()
(sylc (G (dvd (zabs (b0 m)) (zabs (b0 n))) (dvd (zabs (b0 n)) (zabs (zsub a b))) (zeqm m a b))
  (:conv (im (dvd (zabs (b0 m)) (zabs (b0 n))) (im (dvd (zabs (b0 n)) (zabs (zsub a b))) (zeqm m a b)))
    (im
      (dvd (zabs (b0 m)) (zabs (b0 n)))
      (im
        (dvd (zabs (b0 n)) (zabs (zsub a b)))
        (:unfold zeqm (m a b) ()
          (:unfold zdvd ((b0 m) (zsub a b)) ()
            (dvd (zabs (b0 m)) (zabs (zsub a b)))))))
    (dvdtr ((zabs (b0 m)) (zabs (b0 n)) (zabs (zsub a b)))))
  (sylibr (G (dvd m n) (dvd (zabs (b0 m)) (zabs (b0 n))))
    (ax_mp ((eq (zabs (b0 n)) n) (iff (dvd (zabs (b0 m)) (zabs (b0 n))) (dvd m n)))
      (ax_mp ((eq (zabs (b0 m)) m) (im (eq (zabs (b0 n)) n) (iff (dvd (zabs (b0 m)) (zabs (b0 n))) (dvd m n))))
        (dvdeq ((zabs (b0 m)) m (zabs (b0 n)) n))
        (zabsb0 (m)))
      (zabsb0 (n)))
    h1)
  (:conv (im G (dvd (zabs (b0 n)) (zabs (zsub a b))))
    (im
      G
      (:sym (:unfold zeqm (n a b) ()
        (:unfold zdvd ((b0 n) (zsub a b)) ()
          (dvd (zabs (b0 n)) (zabs (zsub a b)))))))
    h2)))

(local theorem zeqm11 ((a nat ()) (b nat ())) ()
  (zeqm (d1) a b)
()
(:conv (zeqm (d1) a b)
  (:unfold zeqm ((d1) a b) ()
    (zdvd (b0 (d1)) (zsub a b)))
  (zdvd11 ((zsub a b)))))

(local def gcd ((a nat ()) (b nat ())) (nat ())
((d nat) (x nat))
(the (ab d (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))))))

(local theorem gcdeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (gcd _a1 _b1) (gcd _a2 _b2)))
((d nat) (x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eq (gcd _a1 _b1) (gcd _a2 _b2)))
  (im
    _G
    (eq
      (:unfold gcd (_a1 _b1) (d x)
        (the (ab d (al x (iff (dvd x d) (an (dvd x _a1) (dvd x _b1)))))))
      (:unfold gcd (_a2 _b2) (d x)
        (the (ab d (al x (iff (dvd x d) (an (dvd x _a2) (dvd x _b2)))))))))
  (theeqd (_G (ab d (al x (iff (dvd x d) (an (dvd x _a1) (dvd x _b1))))) (ab d (al x (iff (dvd x d) (an (dvd x _a2) (dvd x _b2))))))
    (abeqd (_G d (al x (iff (dvd x d) (an (dvd x _a1) (dvd x _b1)))) (al x (iff (dvd x d) (an (dvd x _a2) (dvd x _b2)))))
      (aleqd (_G x (iff (dvd x d) (an (dvd x _a1) (dvd x _b1))) (iff (dvd x d) (an (dvd x _a2) (dvd x _b2))))
        (bieqd (_G (dvd x d) (dvd x d) (an (dvd x _a1) (dvd x _b1)) (an (dvd x _a2) (dvd x _b2)))
          (biidd (_G (dvd x d)))
          (aneqd (_G (dvd x _a1) (dvd x _a2) (dvd x _b1) (dvd x _b2))
            (dvdeqd (_G x x _a1 _a2)
              H1
              _ah)
            (dvdeqd (_G x x _b1 _b2)
              H1
              _bh)))))))))

(local theorem gcdeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (gcd _a1 _b1) (gcd _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (gcd _a1 _b1) (gcd _a2 _b2)))
  (gcdeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem gcdeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (gcd _a1 b) (gcd _a2 b)))
()
(gcdeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem gcdeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (gcd _a1 b) (gcd _a2 b)))
()
(gcdeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem gcdeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (gcd a _b1) (gcd a _b2)))
()
(gcdeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem gcdeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (gcd a _b1) (gcd a _b2)))
()
(gcdeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem gcdcom ((a nat ()) (b nat ())) ()
  (eq (gcd a b) (gcd b a))
((d1 nat) (d2 nat) (x nat) (y nat))
(ax_mp ((eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))) (eq (gcd a b) (gcd b a)))
  (:conv (im (eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))) (eq (gcd a b) (gcd b a)))
    (im
      (eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a))))))
      (eq
        (:unfold gcd (a b) (d1 x)
          (the (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b)))))))
        (:unfold gcd (b a) (d2 y)
          (the (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))))))
    (theeqd ((eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))) (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a))))))
      (id ((eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a))))))))))
  (cbvab (d1 d2 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b)))) (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))
    (cbvald (x y (eq d1 d2) (iff (dvd x d1) (an (dvd x a) (dvd x b))) (iff (dvd y d2) (an (dvd y b) (dvd y a))))
      (bieqd ((an (eq d1 d2) (eq x y)) (dvd x d1) (dvd y d2) (an (dvd x a) (dvd x b)) (an (dvd y b) (dvd y a)))
        (dvdeqd ((an (eq d1 d2) (eq x y)) x y d1 d2)
          (anr ((eq d1 d2) (eq x y)))
          (anl ((eq d1 d2) (eq x y))))
        (syl5bb ((an (eq d1 d2) (eq x y)) (an (dvd x a) (dvd x b)) (an (dvd x b) (dvd x a)) (an (dvd y b) (dvd y a)))
          (ancomb ((dvd x a) (dvd x b)))
          (anwr ((eq d1 d2) (eq x y) (iff (an (dvd x b) (dvd x a)) (an (dvd y b) (dvd y a))))
            (aneqd ((eq x y) (dvd x b) (dvd y b) (dvd x a) (dvd y a))
              (dvdeq1 (x y b))
              (dvdeq1 (x y a))))))))))

(local theorem eqgcd ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (x nat))
  ((h (im G (iff (dvd x d) (an (dvd x a) (dvd x b))))))
  (im G (eq (gcd a b) d))
((d2 nat) (y nat))
(:let H1 (iald (x G (iff (dvd x d) (an (dvd x a) (dvd x b))))
  h)
(:let H2 (anwl (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))))
  H1)
(:conv (im G (eq (gcd a b) d))
  (im
    G
    (eq
      (:unfold gcd (a b) (d2 y)
        (the (ab d2 (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))))))
      d))
  (eqtheabd (G d d2 (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))))
    (ibida (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (eq d2 d))
      (dvdasymd ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) d2 d)
        (mpbird ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (an (dvd d2 a) (dvd d2 b)) (dvd d2 d))
          (rsyl ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (iff (dvd d2 d) (an (dvd d2 a) (dvd d2 b))))
            H2
            (eale (x d2 (iff (dvd x d) (an (dvd x a) (dvd x b))) (iff (dvd d2 d) (an (dvd d2 a) (dvd d2 b))))
              (bieqd ((eq x d2) (dvd x d) (dvd d2 d) (an (dvd x a) (dvd x b)) (an (dvd d2 a) (dvd d2 b)))
                (dvdeq1 (x d2 d))
                (aneqd ((eq x d2) (dvd x a) (dvd d2 a) (dvd x b) (dvd d2 b))
                  (dvdeq1 (x d2 a))
                  (dvdeq1 (x d2 b))))))
          (mpbii ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (dvd d2 d2) (an (dvd d2 a) (dvd d2 b)))
            (dvdid (d2))
            (anwr (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (iff (dvd d2 d2) (an (dvd d2 a) (dvd d2 b))))
              (eale (y d2 (iff (dvd y d2) (an (dvd y a) (dvd y b))) (iff (dvd d2 d2) (an (dvd d2 a) (dvd d2 b))))
                (bieqd ((eq y d2) (dvd y d2) (dvd d2 d2) (an (dvd y a) (dvd y b)) (an (dvd d2 a) (dvd d2 b)))
                  (dvdeq1 (y d2 d2))
                  (aneqd ((eq y d2) (dvd y a) (dvd d2 a) (dvd y b) (dvd d2 b))
                    (dvdeq1 (y d2 a))
                    (dvdeq1 (y d2 b))))))))
        (mpbird ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (an (dvd d a) (dvd d b)) (dvd d d2))
          (anwr (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (iff (dvd d d2) (an (dvd d a) (dvd d b))))
            (eale (y d (iff (dvd y d2) (an (dvd y a) (dvd y b))) (iff (dvd d d2) (an (dvd d a) (dvd d b))))
              (bieqd ((eq y d) (dvd y d2) (dvd d d2) (an (dvd y a) (dvd y b)) (an (dvd d a) (dvd d b)))
                (dvdeq1 (y d d2))
                (aneqd ((eq y d) (dvd y a) (dvd d a) (dvd y b) (dvd d b))
                  (dvdeq1 (y d a))
                  (dvdeq1 (y d b))))))
          (mpbii ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (dvd d d) (an (dvd d a) (dvd d b)))
            (dvdid (d))
            (rsyl ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (iff (dvd d d) (an (dvd d a) (dvd d b))))
              H2
              (eale (x d (iff (dvd x d) (an (dvd x a) (dvd x b))) (iff (dvd d d) (an (dvd d a) (dvd d b))))
                (bieqd ((eq x d) (dvd x d) (dvd d d) (an (dvd x a) (dvd x b)) (an (dvd d a) (dvd d b)))
                  (dvdeq1 (x d d))
                  (aneqd ((eq x d) (dvd x a) (dvd d a) (dvd x b) (dvd d b))
                    (dvdeq1 (x d a))
                    (dvdeq1 (x d b)))))))))
      (mpbird ((an G (eq d2 d)) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))))
        (cbvald (y x (an G (eq d2 d)) (iff (dvd y d2) (an (dvd y a) (dvd y b))) (iff (dvd x d) (an (dvd x a) (dvd x b))))
          (bieqd ((an (an G (eq d2 d)) (eq y x)) (dvd y d2) (dvd x d) (an (dvd y a) (dvd y b)) (an (dvd x a) (dvd x b)))
            (dvdeqd ((an (an G (eq d2 d)) (eq y x)) y x d2 d)
              (anr ((an G (eq d2 d)) (eq y x)))
              (anlr (G (eq d2 d) (eq y x))))
            (anwr ((an G (eq d2 d)) (eq y x) (iff (an (dvd y a) (dvd y b)) (an (dvd x a) (dvd x b))))
              (aneqd ((eq y x) (dvd y a) (dvd x a) (dvd y b) (dvd x b))
                (dvdeq1 (y x a))
                (dvdeq1 (y x b))))))
        (anwl (G (eq d2 d) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))))
          H1))))))))

(local theorem gcd00 () ()
  (eq (gcd (d0) (d0)) (d0))
((x nat))
(:let H1 (dvd02 (x))
(trud ((eq (gcd (d0) (d0)) (d0)))
  (eqgcd ((tru) (d0) (d0) (d0) x)
    (a1i ((tru) (iff (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
      (ax_mp ((an (dvd x (d0)) (dvd x (d0))) (iff (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
        (ax_mp ((dvd x (d0)) (im (an (dvd x (d0)) (dvd x (d0))) (iff (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0))))))
          (bith ((dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
          H1)
        (ax_mp ((dvd x (d0)) (an (dvd x (d0)) (dvd x (d0))))
          (ax_mp ((dvd x (d0)) (im (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
            (ian ((dvd x (d0)) (dvd x (d0))))
            H1)
          H1)))))))

(local def bgcd ((a nat ()) (b nat ())) (nat ())
((d nat) (x nat) (y nat))
(least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))))

(local theorem bgcdeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (bgcd _a1 _b1) (bgcd _a2 _b2)))
((d nat) (x nat) (y nat))
(:conv (im _G (eq (bgcd _a1 _b1) (bgcd _a2 _b2)))
  (im
    _G
    (eq
      (:unfold bgcd (_a1 _b1) (d x y)
        (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x _a1) (add (mul y _b1) d))))))))
      (:unfold bgcd (_a2 _b2) (d x y)
        (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x _a2) (add (mul y _b2) d))))))))))
  (leasteqd (_G (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x _a1) (add (mul y _b1) d)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x _a2) (add (mul y _b2) d)))))))
    (abeqd (_G d (an (lt (d0) d) (ex x (ex y (eq (mul x _a1) (add (mul y _b1) d))))) (an (lt (d0) d) (ex x (ex y (eq (mul x _a2) (add (mul y _b2) d))))))
      (aneqd (_G (lt (d0) d) (lt (d0) d) (ex x (ex y (eq (mul x _a1) (add (mul y _b1) d)))) (ex x (ex y (eq (mul x _a2) (add (mul y _b2) d)))))
        (biidd (_G (lt (d0) d)))
        (exeqd (_G x (ex y (eq (mul x _a1) (add (mul y _b1) d))) (ex y (eq (mul x _a2) (add (mul y _b2) d))))
          (exeqd (_G y (eq (mul x _a1) (add (mul y _b1) d)) (eq (mul x _a2) (add (mul y _b2) d)))
            (eqeqd (_G (mul x _a1) (mul x _a2) (add (mul y _b1) d) (add (mul y _b2) d))
              (muleqd (_G x x _a1 _a2)
                (eqidd (_G x))
                _ah)
              (addeqd (_G (mul y _b1) (mul y _b2) d d)
                (muleqd (_G y y _b1 _b2)
                  (eqidd (_G y))
                  _bh)
                (eqidd (_G d)))))))))))

(local theorem bgcdeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (bgcd _a1 _b1) (bgcd _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (bgcd _a1 _b1) (bgcd _a2 _b2)))
  (bgcdeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem bgcdeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (bgcd _a1 b) (bgcd _a2 b)))
()
(bgcdeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem bgcdeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (bgcd _a1 b) (bgcd _a2 b)))
()
(bgcdeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem bgcdeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (bgcd a _b1) (bgcd a _b2)))
()
(bgcdeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem bgcdeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (bgcd a _b1) (bgcd a _b2)))
()
(bgcdeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem dfbgcd ((a nat ()) (b nat ()) (d nat) (x nat) (y nat)) ()
  (eq (bgcd a b) (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))))
((d2 nat) (w nat) (z nat))
(ax_mp ((eqs (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))) (eq (bgcd a b) (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))))))
  (:conv (im (eqs (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))) (eq (bgcd a b) (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))))))
    (im
      (eqs (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))))
      (eq
        (:unfold bgcd (a b) (d2 z w)
          (least (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))))
        (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))))))
    (leasteq ((ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))))))
  (cbvab (d2 d (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))) (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))
    (aneqd ((eq d2 d) (lt (d0) d2) (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))
      (lteq2 ((d0) d2 d))
      (cbvexd (z x (eq d2 d) (ex w (eq (mul z a) (add (mul w b) d2))) (ex y (eq (mul x a) (add (mul y b) d))))
        (cbvexd (w y (an (eq d2 d) (eq z x)) (eq (mul z a) (add (mul w b) d2)) (eq (mul x a) (add (mul y b) d)))
          (eqeqd ((an (an (eq d2 d) (eq z x)) (eq w y)) (mul z a) (mul x a) (add (mul w b) d2) (add (mul y b) d))
            (muleq1d ((an (an (eq d2 d) (eq z x)) (eq w y)) z x a)
              (anlr ((eq d2 d) (eq z x) (eq w y))))
            (addeqd ((an (an (eq d2 d) (eq z x)) (eq w y)) (mul w b) (mul y b) d2 d)
              (anwr ((an (eq d2 d) (eq z x)) (eq w y) (eq (mul w b) (mul y b)))
                (muleq1 (w y b)))
              (anll ((eq d2 d) (eq z x) (eq w y)))))))))))

(local theorem bgcd01 ((b nat ())) ()
  (eq (bgcd (d0) b) (d0))
((d nat) (d2 nat) (x nat) (y nat))
(ax_mp ((not (ex d (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))) (eq (bgcd (d0) b) (d0)))
  (:conv (im (not (ex d (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))) (eq (bgcd (d0) b) (d0)))
    (im
      (not (ex d (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2)))))))))
      (eq
        (:unfold bgcd ((d0) b) (d2 x y)
          (least (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))
        (d0)))
    (least0 ((ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2)))))) d)))
  (ngen (d (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))
    (mt ((fal) (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))
      (sylbi ((el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))) (an (lt (d0) d) (ex x (ex y (eq (d0) (add (mul y b) d))))) (fal))
        (elabe (d2 d (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))) (an (lt (d0) d) (ex x (ex y (eq (d0) (add (mul y b) d))))))
          (aneqd ((eq d2 d) (lt (d0) d2) (lt (d0) d) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2)))) (ex x (ex y (eq (d0) (add (mul y b) d)))))
            (lteq2 ((d0) d2 d))
            (exeqd ((eq d2 d) x (ex y (eq (mul x (d0)) (add (mul y b) d2))) (ex y (eq (d0) (add (mul y b) d))))
              (exeqd ((eq d2 d) y (eq (mul x (d0)) (add (mul y b) d2)) (eq (d0) (add (mul y b) d)))
                (eqeqd ((eq d2 d) (mul x (d0)) (d0) (add (mul y b) d2) (add (mul y b) d))
                  (a1i ((eq d2 d) (eq (mul x (d0)) (d0)))
                    (mul02 (x)))
                  (addeq2 ((mul y b) d2 d)))))))
        (imp ((lt (d0) d) (ex x (ex y (eq (d0) (add (mul y b) d)))) (fal))
          (eexd (x (lt (d0) d) (ex y (eq (d0) (add (mul y b) d))) (fal))
            (eexd (y (lt (d0) d) (eq (d0) (add (mul y b) d)) (fal))
              (syl ((lt (d0) d) (not (eq (d0) (add (mul y b) d))) (im (eq (d0) (add (mul y b) d)) (fal)))
                (absurd ((eq (d0) (add (mul y b) d)) (fal)))
                (syl ((lt (d0) d) (lt (d0) (add (mul y b) d)) (not (eq (d0) (add (mul y b) d))))
                  (:conv (im (lt (d0) (add (mul y b) d)) (not (eq (d0) (add (mul y b) d))))
                    (im
                      (lt (d0) (add (mul y b) d))
                      (:sym (:unfold ne ((d0) (add (mul y b) d)) ()
                        (not (eq (d0) (add (mul y b) d))))))
                    (ltne ((d0) (add (mul y b) d))))
                  (mpi ((lt (d0) d) (le d (add (mul y b) d)) (lt (d0) (add (mul y b) d)))
                    (leaddid2 (d (mul y b)))
                    (ltletr ((d0) d (add (mul y b) d))))))))))
      (notfal ())))))

(local theorem bgcdlem ((a nat ()) (b nat ()) (x nat) (y nat)) ()
  (im (ne a (d0)) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
((d nat) (w nat) (z nat))
(sylib ((ne a (d0)) (el (bgcd a b) (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
  (elabe (d (bgcd a b) (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
    (aneqd ((eq d (bgcd a b)) (lt (d0) d) (lt (d0) (bgcd a b)) (ex z (ex w (eq (mul z a) (add (mul w b) d)))) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
      (lteq2 ((d0) d (bgcd a b)))
      (cbvexd (z x (eq d (bgcd a b)) (ex w (eq (mul z a) (add (mul w b) d))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
        (cbvexd (w y (an (eq d (bgcd a b)) (eq z x)) (eq (mul z a) (add (mul w b) d)) (eq (mul x a) (add (mul y b) (bgcd a b))))
          (eqeqd ((an (an (eq d (bgcd a b)) (eq z x)) (eq w y)) (mul z a) (mul x a) (add (mul w b) d) (add (mul y b) (bgcd a b)))
            (muleq1d ((an (an (eq d (bgcd a b)) (eq z x)) (eq w y)) z x a)
              (anlr ((eq d (bgcd a b)) (eq z x) (eq w y))))
            (addeqd ((an (an (eq d (bgcd a b)) (eq z x)) (eq w y)) (mul w b) (mul y b) d (bgcd a b))
              (anwr ((an (eq d (bgcd a b)) (eq z x)) (eq w y) (eq (mul w b) (mul y b)))
                (muleq1 (w y b)))
              (anll ((eq d (bgcd a b)) (eq z x) (eq w y)))))))))
  (syl ((ne a (d0)) (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))) (el (bgcd a b) (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
    (:conv (im (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))) (el (bgcd a b) (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
      (im
        (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))))
        (el
          (:unfold bgcd (a b) (d z w)
            (least (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
          (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
      (leastel ((ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))) a)))
    (sylibr ((ne a (d0)) (an (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) a))))) (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
      (elabe (d a (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))) (an (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) a))))))
        (aneqd ((eq d a) (lt (d0) d) (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) d)))) (ex z (ex w (eq (mul z a) (add (mul w b) a)))))
          (lteq2 ((d0) d a))
          (exeqd ((eq d a) z (ex w (eq (mul z a) (add (mul w b) d))) (ex w (eq (mul z a) (add (mul w b) a))))
            (exeqd ((eq d a) w (eq (mul z a) (add (mul w b) d)) (eq (mul z a) (add (mul w b) a)))
              (eqeq2d ((eq d a) (mul z a) (add (mul w b) d) (add (mul w b) a))
                (addeq2 ((mul w b) d a)))))))
      (iand ((ne a (d0)) (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) a)))))
        (ax_mp ((iff (lt (d0) a) (ne a (d0))) (im (ne a (d0)) (lt (d0) a)))
          (bi2 ((lt (d0) a) (ne a (d0))))
          (lt01 (a)))
        (iexde (z (ne a (d0)) (d1) (ex w (eq (mul z a) (add (mul w b) a))))
          (iexde (w (an (ne a (d0)) (eq z (d1))) (d0) (eq (mul z a) (add (mul w b) a)))
            (eqtr4d ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul z a) a (add (mul w b) a))
              (syl6eq ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul z a) (mul (d1) a) a)
                (mul11 (a))
                (muleq1d ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) z (d1) a)
                  (anlr ((ne a (d0)) (eq z (d1)) (eq w (d0))))))
              (syl6eq ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (add (mul w b) a) (add (d0) a) a)
                (add01 (a))
                (addeq1d ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul w b) (d0) a)
                  (syl6eq ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul w b) (mul (d0) b) (d0))
                    (mul01 (b))
                    (anwr ((an (ne a (d0)) (eq z (d1))) (eq w (d0)) (eq (mul w b) (mul (d0) b)))
                      (muleq1 (w (d0) b))))))))))))))

(local theorem bgcdpos ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (lt (d0) (bgcd a b)))
((x nat) (y nat))
(anld ((ne a (d0)) (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
  (bgcdlem (a b x y))))

(local theorem bgcdbezout ((a nat ()) (b nat ()) (x nat) (y nat)) ()
  (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
()
(:let H1 (anll ((eq a (d0)) (eq x (d0)) (eq y (d0))))
(cases ((eq a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
  (iexde (x (eq a (d0)) (d0) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
    (iexde (y (an (eq a (d0)) (eq x (d0))) (d0) (eq (mul x a) (add (mul y b) (bgcd a b))))
      (eqtr4d ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (mul x a) (mul (d0) (d0)) (add (mul y b) (bgcd a b)))
        (muleqd ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) x (d0) a (d0))
          (anlr ((eq a (d0)) (eq x (d0)) (eq y (d0))))
          H1)
        (syl6eqr ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (add (mul y b) (bgcd a b)) (d0) (mul (d0) (d0)))
          (mul01 ((d0)))
          (syl6eq ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (add (mul y b) (bgcd a b)) (add (d0) (d0)) (d0))
            (add0 ((d0)))
            (addeqd ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (mul y b) (d0) (bgcd a b) (d0))
              (syl6eq ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (mul y b) (mul (d0) b) (d0))
                (mul01 (b))
                (anwr ((an (eq a (d0)) (eq x (d0))) (eq y (d0)) (eq (mul y b) (mul (d0) b)))
                  (muleq1 (y (d0) b))))
              (syl6eq ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (bgcd a b) (bgcd (d0) b) (d0))
                (bgcd01 (b))
                (bgcdeq1d ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) a (d0) b)
                  H1))))))))
  (anrd ((not (eq a (d0))) (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
    (:conv (im (not (eq a (d0))) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
      (im
        (:sym (:unfold ne (a (d0)) ()
          (not (eq a (d0)))))
        (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
      (bgcdlem (a b x y)))))))

(local theorem bgcdled ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (x nat ()) (y nat ()))
  ((h (im G (lt (d0) d)))
   (h2 (im G (eq (mul x a) (add (mul y b) d)))))
  (im G (le (bgcd a b) d))
((d2 nat) (w nat) (z nat))
(syl (G (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))) (le (bgcd a b) d))
  (:conv (im (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))) (le (bgcd a b) d))
    (im
      (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))))
      (le
        (:unfold bgcd (a b) (d2 z w)
          (least (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))))
        d))
    (leastle ((ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) d)))
  (sylibr (G (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))) (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))))
    (elabe (d2 d (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))) (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))
      (aneqd ((eq d2 d) (lt (d0) d2) (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))
        (lteq2 ((d0) d2 d))
        (exeqd ((eq d2 d) z (ex w (eq (mul z a) (add (mul w b) d2))) (ex w (eq (mul z a) (add (mul w b) d))))
          (exeqd ((eq d2 d) w (eq (mul z a) (add (mul w b) d2)) (eq (mul z a) (add (mul w b) d)))
            (eqeq2d ((eq d2 d) (mul z a) (add (mul w b) d2) (add (mul w b) d))
              (addeq2 ((mul w b) d2 d)))))))
    (iand (G (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))
      h
      (iexde (z G x (ex w (eq (mul z a) (add (mul w b) d))))
        (iexde (w (an G (eq z x)) y (eq (mul z a) (add (mul w b) d)))
          (mpbird ((an (an G (eq z x)) (eq w y)) (eq (mul x a) (add (mul y b) d)) (eq (mul z a) (add (mul w b) d)))
            (eqeqd ((an (an G (eq z x)) (eq w y)) (mul z a) (mul x a) (add (mul w b) d) (add (mul y b) d))
              (muleq1d ((an (an G (eq z x)) (eq w y)) z x a)
                (anlr (G (eq z x) (eq w y))))
              (addeq1d ((an (an G (eq z x)) (eq w y)) (mul w b) (mul y b) d)
                (anwr ((an G (eq z x)) (eq w y) (eq (mul w b) (mul y b)))
                  (muleq1 (w y b)))))
            (anwll (G (eq z x) (eq w y) (eq (mul x a) (add (mul y b) d)))
              h2))))))))

(local theorem bgcd02 ((a nat ())) ()
  (eq (bgcd a (d0)) a)
((x nat) (y nat))
(:let H1 (mul11 (a))
(:let H2 (add01 ((bgcd a (d0))))
(:let H3 (addeq1 ((mul y (d0)) (d0) (bgcd a (d0))))
(:let H4 (mul0 (y))
(:let H5 (ax_mp ((eq (mul y (d0)) (d0)) (eq (add (mul y (d0)) (bgcd a (d0))) (add (d0) (bgcd a (d0)))))
  H3
  H4)
(:let H6 (anr ((not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))))
(:let H7 (syl6eq ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (mul x a) (add (mul y (d0)) (bgcd a (d0))) (add (d0) (bgcd a (d0))))
  H5
  H6)
(:let H8 (syl6eq ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (mul x a) (add (d0) (bgcd a (d0))) (bgcd a (d0)))
  H2
  H7)
(cases ((eq a (d0)) (eq (bgcd a (d0)) a))
  (eqtr4d ((eq a (d0)) (bgcd a (d0)) (d0) a)
    (syl6eq ((eq a (d0)) (bgcd a (d0)) (bgcd (d0) (d0)) (d0))
      (bgcd01 ((d0)))
      (bgcdeq1 (a (d0) (d0))))
    (id ((eq a (d0)))))
  (leasymd ((not (eq a (d0))) (bgcd a (d0)) a)
    (bgcdled ((not (eq a (d0))) a (d0) a (d1) (d0))
      (bi2i ((lt (d0) a) (not (eq a (d0))))
        (:conv (iff (lt (d0) a) (not (eq a (d0))))
          (iff
            (lt (d0) a)
            (:sym (:unfold ne (a (d0)) ()
              (not (eq a (d0))))))
          (lt01 (a))))
      (a1i ((not (eq a (d0))) (eq (mul (d1) a) (add (mul (d0) (d0)) a)))
        (ax_mp ((eq a (add (mul (d0) (d0)) a)) (eq (mul (d1) a) (add (mul (d0) (d0)) a)))
          (ax_mp ((eq (mul (d1) a) a) (im (eq a (add (mul (d0) (d0)) a)) (eq (mul (d1) a) (add (mul (d0) (d0)) a))))
            (eqtr ((mul (d1) a) a (add (mul (d0) (d0)) a)))
            H1)
          (ax_mp ((eq (add (mul (d0) (d0)) a) a) (eq a (add (mul (d0) (d0)) a)))
            (eqcom ((add (mul (d0) (d0)) a) a))
            (ax_mp ((eq (add (d0) a) a) (eq (add (mul (d0) (d0)) a) a))
              (ax_mp ((eq (add (mul (d0) (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul (d0) (d0)) a) a)))
                (eqtr ((add (mul (d0) (d0)) a) (add (d0) a) a))
                (ax_mp ((eq (mul (d0) (d0)) (d0)) (eq (add (mul (d0) (d0)) a) (add (d0) a)))
                  (addeq1 ((mul (d0) (d0)) (d0) a))
                  (mul01 ((d0)))))
              (add01 (a)))))))
    (mpi ((not (eq a (d0))) (ex x (ex y (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))))) (le a (bgcd a (d0))))
      (bgcdbezout (a (d0) x y))
      (eexd (x (not (eq a (d0))) (ex y (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (le a (bgcd a (d0))))
        (eexda (y (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))) (le a (bgcd a (d0))))
          (mpbid ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (le (mul (d1) a) (mul x a)) (le a (bgcd a (d0))))
            (leeqd ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (mul (d1) a) a (mul x a) (bgcd a (d0)))
              (a1i ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq (mul (d1) a) a))
                H1)
              H8)
            (syl ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (le (d1) x) (le (mul (d1) a) (mul x a)))
              (lemul1a ((d1) x a))
              (sylibr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (ne x (d0)) (le (d1) x))
                (:conv (iff (le (d1) x) (ne x (d0)))
                  (iff
                    (:sym (:unfold lt ((d0) x) ()
                      (le
                        (:sym (:unfold d1 () ()
                          (suc (d0))))
                        x)))
                    (ne x (d0)))
                  (lt01 (x)))
                (:conv (im (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (ne x (d0)))
                  (im
                    (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))))
                    (:unfold ne (x (d0)) ()
                      (not (eq x (d0)))))
                  (mtand ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq (bgcd a (d0)) (d0)) (eq x (d0)))
                    (anwl ((not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))) (not (eq (bgcd a (d0)) (d0))))
                      (syl ((not (eq a (d0))) (lt (d0) (bgcd a (d0))) (not (eq (bgcd a (d0)) (d0))))
                        (:conv (im (lt (d0) (bgcd a (d0))) (not (eq (bgcd a (d0)) (d0))))
                          (im
                            (lt (d0) (bgcd a (d0)))
                            (:sym (:unfold ne ((bgcd a (d0)) (d0)) ()
                              (not (eq (bgcd a (d0)) (d0))))))
                          (ltner ((d0) (bgcd a (d0)))))
                        (:conv (im (not (eq a (d0))) (lt (d0) (bgcd a (d0))))
                          (im
                            (:sym (:unfold ne (a (d0)) ()
                              (not (eq a (d0)))))
                            (lt (d0) (bgcd a (d0))))
                          (bgcdpos (a (d0))))))
                    (eqtr3d ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0))) (bgcd a (d0)) (mul x a) (d0))
                      (anwl ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0)) (eq (mul x a) (bgcd a (d0))))
                        H8)
                      (syl6eq ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0))) (mul x a) (mul (d0) a) (d0))
                        (mul01 (a))
                        (anwr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0)) (eq (mul x a) (mul (d0) a)))
                          (muleq1 (x (d0) a))))))))))))))))))))))))

(local theorem dvdbgcd ((a nat ()) (b nat ()) (d nat ())) ()
  (im (an (dvd d a) (dvd d b)) (dvd d (bgcd a b)))
((x nat) (y nat))
(mpi ((an (dvd d a) (dvd d b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (dvd d (bgcd a b)))
  (bgcdbezout (a b x y))
  (eexd (x (an (dvd d a) (dvd d b)) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (bgcd a b)))
    (eexda (y (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd d (bgcd a b)))
      (mpbird ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (add (mul y b) (bgcd a b))) (dvd d (bgcd a b)))
        (syl ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (mul y b)) (iff (dvd d (bgcd a b)) (dvd d (add (mul y b) (bgcd a b)))))
          (dvdadd1 ((mul y b) (bgcd a b) d))
          (syl ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d b) (dvd d (mul y b)))
            (dvdmul12 (d b y))
            (anlr ((dvd d a) (dvd d b) (eq (mul x a) (add (mul y b) (bgcd a b)))))))
        (mpbid ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (mul x a)) (dvd d (add (mul y b) (bgcd a b))))
          (anwr ((an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b))) (iff (dvd d (mul x a)) (dvd d (add (mul y b) (bgcd a b)))))
            (dvdeq2 (d (mul x a) (add (mul y b) (bgcd a b)))))
          (anwll ((dvd d a) (dvd d b) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd d (mul x a)))
            (dvdmul12 (d a x)))))))))

(local theorem bgcddvd1lem ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (q nat ()) (r nat ()) (u nat ()) (x nat ()) (y nat ()))
  ((h1 (im G (ne a (d0))))
   (h2 (im G (eq (mul x a) (add (mul y b) d))))
   (h3 (im G (ne b (d0))))
   (h4 (im G (eq (add (mul d q) r) a)))
   (h5 (im G (le x u)))
   (h6 (im G (le y u))))
  (im G (eq (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul (sub (mul u a) y) q) b) r)))
()
(:let H1 (mul12 (u))
(sylib (G (eq (add (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b)))) (eq (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul (sub (mul u a) y) q) b) r)))
  (addcan1 ((mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))))
  (syl5eqr (G (add (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (mul y q) b)) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))))
    (addass ((mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a) (mul (mul y q) b)))
    (eqtr4d (G (add (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (mul y q) b)) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))))
      (addeq1d (G (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b))
        (syl5eqr (G (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (add (suc (mul (sub (mul u b) x) q)) (mul x q)) a) (mul (suc (mul (mul u b) q)) a))
          (addmul ((suc (mul (sub (mul u b) x) q)) (mul x q) a))
          (muleq1d (G (add (suc (mul (sub (mul u b) x) q)) (mul x q)) (suc (mul (mul u b) q)) a)
            (syl5eq (G (add (suc (mul (sub (mul u b) x) q)) (mul x q)) (suc (add (mul (sub (mul u b) x) q) (mul x q))) (suc (mul (mul u b) q)))
              (addS1 ((mul (sub (mul u b) x) q) (mul x q)))
              (suceqd (G (add (mul (sub (mul u b) x) q) (mul x q)) (mul (mul u b) q))
                (syl5eqr (G (add (mul (sub (mul u b) x) q) (mul x q)) (mul (add (sub (mul u b) x) x) q) (mul (mul u b) q))
                  (addmul ((sub (mul u b) x) x q))
                  (muleq1d (G (add (sub (mul u b) x) x) (mul u b) q)
                    (syl (G (le x (mul u b)) (eq (add (sub (mul u b) x) x) (mul u b)))
                      (npcan ((mul u b) x))
                      (letrd (G x u (mul u b))
                        h5
                        (sylib (G (le (mul u (d1)) (mul u b)) (le u (mul u b)))
                          (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u b)) (le u (mul u b))))
                            (leeq1 ((mul u (d1)) u (mul u b)))
                            H1)
                          (syl (G (le (d1) b) (le (mul u (d1)) (mul u b)))
                            (lemul2a (u (d1) b))
                            (sylibr (G (ne b (d0)) (le (d1) b))
                              (:conv (iff (le (d1) b) (ne b (d0)))
                                (iff
                                  (:sym (:unfold lt ((d0) b) ()
                                    (le
                                      (:sym (:unfold d1 () ()
                                        (suc (d0))))
                                      b)))
                                  (ne b (d0)))
                                (lt01 (b)))
                              h3))))))))))))
      (syl5eq (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul y q) b) (mul (mul x q) a))) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)))
        (ax_mp ((eq (add (mul (mul x q) a) (mul (mul y q) b)) (add (mul (mul y q) b) (mul (mul x q) a))) (eq (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul y q) b) (mul (mul x q) a)))))
          (addeq2 ((add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b)) (add (mul (mul y q) b) (mul (mul x q) a))))
          (addcom ((mul (mul x q) a) (mul (mul y q) b))))
        (syl5eqr (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul y q) b) (mul (mul x q) a))) (add (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (mul (mul x q) a)) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)))
          (addass ((add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b) (mul (mul x q) a)))
          (eqtr4d (G (add (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (mul (mul x q) a)) (add (add (mul (mul (mul u a) q) b) r) (mul (mul x q) a)) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)))
            (addeq1d (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) r) (mul (mul x q) a))
              (syl5eq (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (add (add (mul (mul (sub (mul u a) y) q) b) (mul (mul y q) b)) r) (add (mul (mul (mul u a) q) b) r))
                (addrass ((mul (mul (sub (mul u a) y) q) b) r (mul (mul y q) b)))
                (addeq1d (G (add (mul (mul (sub (mul u a) y) q) b) (mul (mul y q) b)) (mul (mul (mul u a) q) b) r)
                  (syl5eqr (G (add (mul (mul (sub (mul u a) y) q) b) (mul (mul y q) b)) (mul (add (mul (sub (mul u a) y) q) (mul y q)) b) (mul (mul (mul u a) q) b))
                    (addmul ((mul (sub (mul u a) y) q) (mul y q) b))
                    (muleq1d (G (add (mul (sub (mul u a) y) q) (mul y q)) (mul (mul u a) q) b)
                      (syl5eqr (G (add (mul (sub (mul u a) y) q) (mul y q)) (mul (add (sub (mul u a) y) y) q) (mul (mul u a) q))
                        (addmul ((sub (mul u a) y) y q))
                        (muleq1d (G (add (sub (mul u a) y) y) (mul u a) q)
                          (syl (G (le y (mul u a)) (eq (add (sub (mul u a) y) y) (mul u a)))
                            (npcan ((mul u a) y))
                            (letrd (G y u (mul u a))
                              h6
                              (sylib (G (le (mul u (d1)) (mul u a)) (le u (mul u a)))
                                (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u a)) (le u (mul u a))))
                                  (leeq1 ((mul u (d1)) u (mul u a)))
                                  H1)
                                (syl (G (le (d1) a) (le (mul u (d1)) (mul u a)))
                                  (lemul2a (u (d1) a))
                                  (sylibr (G (ne a (d0)) (le (d1) a))
                                    (:conv (iff (le (d1) a) (ne a (d0)))
                                      (iff
                                        (:sym (:unfold lt ((d0) a) ()
                                          (le
                                            (:sym (:unfold d1 () ()
                                              (suc (d0))))
                                            a)))
                                        (ne a (d0)))
                                      (lt01 (a)))
                                    h1))))))))))))
            (syl6eqr (G (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (mul u a) q) b) (mul (mul x q) a)) r) (add (add (mul (mul (mul u a) q) b) r) (mul (mul x q) a)))
              (addrass ((mul (mul (mul u a) q) b) r (mul (mul x q) a)))
              (syl6eqr (G (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) (add (mul (mul x q) a) r)) (add (add (mul (mul (mul u a) q) b) (mul (mul x q) a)) r))
                (addass ((mul (mul (mul u a) q) b) (mul (mul x q) a) r))
                (syl5eq (G (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) (add (mul (mul x q) a) r)))
                  (ax_mp ((eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a)) (eq (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b))))
                    (addeq1 ((mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b)))
                    (ax_mp ((eq (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)) (eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a)))
                      (ax_mp ((eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u b) q) a) a)) (im (eq (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)) (eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a))))
                        (eqtr ((mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)))
                        (mulS1 ((mul (mul u b) q) a)))
                      (ax_mp ((eq (mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b)) (eq (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)))
                        (addeq1 ((mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b) a))
                        (ax_mp ((eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)) (eq (mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b)))
                          (ax_mp ((eq (mul (mul (mul u b) q) a) (mul (mul u b) (mul q a))) (im (eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)) (eq (mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b))))
                            (eqtr ((mul (mul (mul u b) q) a) (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)))
                            (mulass ((mul u b) q a)))
                          (ax_mp ((eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)) (eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)))
                            (ax_mp ((eq (mul (mul u b) (mul q a)) (mul u (mul b (mul q a)))) (im (eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)) (eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b))))
                              (eqtr ((mul (mul u b) (mul q a)) (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)))
                              (mulass (u b (mul q a))))
                            (ax_mp ((eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b))) (eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)))
                              (ax_mp ((eq (mul u (mul b (mul q a))) (mul u (mul (mul a q) b))) (im (eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b))) (eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b))))
                                (eqtr4 ((mul u (mul b (mul q a))) (mul u (mul (mul a q) b)) (mul (mul (mul u a) q) b)))
                                (ax_mp ((eq (mul b (mul q a)) (mul (mul a q) b)) (eq (mul u (mul b (mul q a))) (mul u (mul (mul a q) b))))
                                  (muleq2 (u (mul b (mul q a)) (mul (mul a q) b)))
                                  (ax_mp ((eq (mul (mul q a) b) (mul (mul a q) b)) (eq (mul b (mul q a)) (mul (mul a q) b)))
                                    (ax_mp ((eq (mul b (mul q a)) (mul (mul q a) b)) (im (eq (mul (mul q a) b) (mul (mul a q) b)) (eq (mul b (mul q a)) (mul (mul a q) b))))
                                      (eqtr ((mul b (mul q a)) (mul (mul q a) b) (mul (mul a q) b)))
                                      (mulcom (b (mul q a))))
                                    (ax_mp ((eq (mul q a) (mul a q)) (eq (mul (mul q a) b) (mul (mul a q) b)))
                                      (muleq1 ((mul q a) (mul a q) b))
                                      (mulcom (q a))))))
                              (ax_mp ((eq (mul (mul u (mul a q)) b) (mul u (mul (mul a q) b))) (eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b))))
                                (ax_mp ((eq (mul (mul (mul u a) q) b) (mul (mul u (mul a q)) b)) (im (eq (mul (mul u (mul a q)) b) (mul u (mul (mul a q) b))) (eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b)))))
                                  (eqtr ((mul (mul (mul u a) q) b) (mul (mul u (mul a q)) b) (mul u (mul (mul a q) b))))
                                  (ax_mp ((eq (mul (mul u a) q) (mul u (mul a q))) (eq (mul (mul (mul u a) q) b) (mul (mul u (mul a q)) b)))
                                    (muleq1 ((mul (mul u a) q) (mul u (mul a q)) b))
                                    (mulass (u a q))))
                                (mulass (u (mul a q) b)))))))))
                  (syl5eq (G (add (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) (add a (mul (mul y q) b))) (add (mul (mul (mul u a) q) b) (add (mul (mul x q) a) r)))
                    (addass ((mul (mul (mul u a) q) b) a (mul (mul y q) b)))
                    (addeq2d (G (mul (mul (mul u a) q) b) (add a (mul (mul y q) b)) (add (mul (mul x q) a) r))
                      (syl5eq (G (add a (mul (mul y q) b)) (add (mul (mul y q) b) a) (add (mul (mul x q) a) r))
                        (addcom (a (mul (mul y q) b)))
                        (eqtr3d (G (add (mul (mul y q) b) a) (add (mul (mul y q) b) (add (mul d q) r)) (add (mul (mul x q) a) r))
                          (addeq2d (G (mul (mul y q) b) (add (mul d q) r) a)
                            h4)
                          (syl5eqr (G (add (mul (mul y q) b) (add (mul d q) r)) (add (add (mul (mul y q) b) (mul d q)) r) (add (mul (mul x q) a) r))
                            (addass ((mul (mul y q) b) (mul d q) r))
                            (addeq1d (G (add (mul (mul y q) b) (mul d q)) (mul (mul x q) a) r)
                              (syl5eq (G (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q)) (mul (mul x q) a))
                                (ax_mp ((eq (mul (mul y q) b) (mul (mul y b) q)) (eq (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q))))
                                  (addeq1 ((mul (mul y q) b) (mul (mul y b) q) (mul d q)))
                                  (mulrass (y q b)))
                                (syl5eqr (G (add (mul (mul y b) q) (mul d q)) (mul (add (mul y b) d) q) (mul (mul x q) a))
                                  (addmul ((mul y b) d q))
                                  (syl6eq (G (mul (add (mul y b) d) q) (mul (mul x a) q) (mul (mul x q) a))
                                    (mulrass (x a q))
                                    (muleq1d (G (add (mul y b) d) (mul x a) q)
                                      (eqcomd (G (mul x a) (add (mul y b) d))
                                        h2))))))))))))))))))))))

(local theorem bgcddvd2lem ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (q nat ()) (r nat ()) (u nat ()) (x nat ()) (y nat ()))
  ((h1 (im G (ne a (d0))))
   (h2 (im G (eq (mul x a) (add (mul y b) d))))
   (h3 (im G (ne b (d0))))
   (h4 (im G (eq (add (mul d q) r) b)))
   (h5 (im G (le (mul x q) u)))
   (h6 (im G (lt (mul y q) u))))
  (im G (eq (mul (sub (mul u b) (mul x q)) a) (add (mul (sub (mul u a) (suc (mul y q))) b) r)))
()
(:let H1 (mul12 (u))
(sylib (G (eq (add (mul (sub (mul u b) (mul x q)) a) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b)))) (eq (mul (sub (mul u b) (mul x q)) a) (add (mul (sub (mul u a) (suc (mul y q))) b) r)))
  (addcan1 ((mul (sub (mul u b) (mul x q)) a) (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))))
  (syl5eqr (G (add (mul (sub (mul u b) (mul x q)) a) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (suc (mul y q)) b)) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))))
    (addass ((mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a) (mul (suc (mul y q)) b)))
    (eqtr4d (G (add (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (suc (mul y q)) b)) (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))))
      (addeq1d (G (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (mul u b) a) (mul (suc (mul y q)) b))
        (syl5eqr (G (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (add (sub (mul u b) (mul x q)) (mul x q)) a) (mul (mul u b) a))
          (addmul ((sub (mul u b) (mul x q)) (mul x q) a))
          (muleq1d (G (add (sub (mul u b) (mul x q)) (mul x q)) (mul u b) a)
            (syl (G (le (mul x q) (mul u b)) (eq (add (sub (mul u b) (mul x q)) (mul x q)) (mul u b)))
              (npcan ((mul u b) (mul x q)))
              (letrd (G (mul x q) u (mul u b))
                h5
                (sylib (G (le (mul u (d1)) (mul u b)) (le u (mul u b)))
                  (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u b)) (le u (mul u b))))
                    (leeq1 ((mul u (d1)) u (mul u b)))
                    H1)
                  (syl (G (le (d1) b) (le (mul u (d1)) (mul u b)))
                    (lemul2a (u (d1) b))
                    (sylibr (G (ne b (d0)) (le (d1) b))
                      (:conv (iff (le (d1) b) (ne b (d0)))
                        (iff
                          (:sym (:unfold lt ((d0) b) ()
                            (le
                              (:sym (:unfold d1 () ()
                                (suc (d0))))
                              b)))
                          (ne b (d0)))
                        (lt01 (b)))
                      h3))))))))
      (syl5eq (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (suc (mul y q)) b) (mul (mul x q) a))) (add (mul (mul u b) a) (mul (suc (mul y q)) b)))
        (ax_mp ((eq (add (mul (mul x q) a) (mul (suc (mul y q)) b)) (add (mul (suc (mul y q)) b) (mul (mul x q) a))) (eq (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (suc (mul y q)) b) (mul (mul x q) a)))))
          (addeq2 ((add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b)) (add (mul (suc (mul y q)) b) (mul (mul x q) a))))
          (addcom ((mul (mul x q) a) (mul (suc (mul y q)) b))))
        (syl5eqr (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (suc (mul y q)) b) (mul (mul x q) a))) (add (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (mul (mul x q) a)) (add (mul (mul u b) a) (mul (suc (mul y q)) b)))
          (addass ((add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b) (mul (mul x q) a)))
          (eqtr4d (G (add (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (mul (mul x q) a)) (add (add (mul (mul u a) b) r) (mul (mul x q) a)) (add (mul (mul u b) a) (mul (suc (mul y q)) b)))
            (addeq1d (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) r) (mul (mul x q) a))
              (syl5eq (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (add (add (mul (sub (mul u a) (suc (mul y q))) b) (mul (suc (mul y q)) b)) r) (add (mul (mul u a) b) r))
                (addrass ((mul (sub (mul u a) (suc (mul y q))) b) r (mul (suc (mul y q)) b)))
                (addeq1d (G (add (mul (sub (mul u a) (suc (mul y q))) b) (mul (suc (mul y q)) b)) (mul (mul u a) b) r)
                  (syl5eqr (G (add (mul (sub (mul u a) (suc (mul y q))) b) (mul (suc (mul y q)) b)) (mul (add (sub (mul u a) (suc (mul y q))) (suc (mul y q))) b) (mul (mul u a) b))
                    (addmul ((sub (mul u a) (suc (mul y q))) (suc (mul y q)) b))
                    (muleq1d (G (add (sub (mul u a) (suc (mul y q))) (suc (mul y q))) (mul u a) b)
                      (syl (G (le (suc (mul y q)) (mul u a)) (eq (add (sub (mul u a) (suc (mul y q))) (suc (mul y q))) (mul u a)))
                        (npcan ((mul u a) (suc (mul y q))))
                        (letrd (G (suc (mul y q)) u (mul u a))
                          (:conv (im G (le (suc (mul y q)) u))
                            (im
                              G
                              (:sym (:unfold lt ((mul y q) u) ()
                                (le (suc (mul y q)) u))))
                            h6)
                          (sylib (G (le (mul u (d1)) (mul u a)) (le u (mul u a)))
                            (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u a)) (le u (mul u a))))
                              (leeq1 ((mul u (d1)) u (mul u a)))
                              H1)
                            (syl (G (le (d1) a) (le (mul u (d1)) (mul u a)))
                              (lemul2a (u (d1) a))
                              (sylibr (G (ne a (d0)) (le (d1) a))
                                (:conv (iff (le (d1) a) (ne a (d0)))
                                  (iff
                                    (:sym (:unfold lt ((d0) a) ()
                                      (le
                                        (:sym (:unfold d1 () ()
                                          (suc (d0))))
                                        a)))
                                    (ne a (d0)))
                                  (lt01 (a)))
                                h1))))))))))
            (syl6eqr (G (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (add (mul (mul u a) b) (mul (mul x q) a)) r) (add (add (mul (mul u a) b) r) (mul (mul x q) a)))
              (addrass ((mul (mul u a) b) r (mul (mul x q) a)))
              (syl6eqr (G (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (add (mul (mul x q) a) r)) (add (add (mul (mul u a) b) (mul (mul x q) a)) r))
                (addass ((mul (mul u a) b) (mul (mul x q) a) r))
                (syl5eq (G (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (add (mul (mul x q) a) r)))
                  (ax_mp ((eq (mul (mul u b) a) (mul (mul u a) b)) (eq (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (mul (suc (mul y q)) b))))
                    (addeq1 ((mul (mul u b) a) (mul (mul u a) b) (mul (suc (mul y q)) b)))
                    (mulrass (u b a)))
                  (addeq2d (G (mul (mul u a) b) (mul (suc (mul y q)) b) (add (mul (mul x q) a) r))
                    (syl5eq (G (mul (suc (mul y q)) b) (add (mul (mul y q) b) b) (add (mul (mul x q) a) r))
                      (mulS1 ((mul y q) b))
                      (eqtr3d (G (add (mul (mul y q) b) b) (add (mul (mul y q) b) (add (mul d q) r)) (add (mul (mul x q) a) r))
                        (addeq2d (G (mul (mul y q) b) (add (mul d q) r) b)
                          h4)
                        (syl5eqr (G (add (mul (mul y q) b) (add (mul d q) r)) (add (add (mul (mul y q) b) (mul d q)) r) (add (mul (mul x q) a) r))
                          (addass ((mul (mul y q) b) (mul d q) r))
                          (addeq1d (G (add (mul (mul y q) b) (mul d q)) (mul (mul x q) a) r)
                            (syl5eq (G (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q)) (mul (mul x q) a))
                              (ax_mp ((eq (mul (mul y q) b) (mul (mul y b) q)) (eq (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q))))
                                (addeq1 ((mul (mul y q) b) (mul (mul y b) q) (mul d q)))
                                (mulrass (y q b)))
                              (syl5eqr (G (add (mul (mul y b) q) (mul d q)) (mul (add (mul y b) d) q) (mul (mul x q) a))
                                (addmul ((mul y b) d q))
                                (syl6eq (G (mul (add (mul y b) d) q) (mul (mul x a) q) (mul (mul x q) a))
                                  (mulrass (x a q))
                                  (muleq1d (G (add (mul y b) d) (mul x a) q)
                                    (eqcomd (G (mul x a) (add (mul y b) d))
                                      h2)))))))))))))))))))))

(local theorem bgcddvd1 ((a nat ()) (b nat ())) ()
  (dvd (bgcd a b) a)
((x nat) (y nat))
(cases ((eq a (d0)) (dvd (bgcd a b) a))
  (mpbiri ((eq a (d0)) (dvd (bgcd a b) (d0)) (dvd (bgcd a b) a))
    (dvd02 ((bgcd a b)))
    (dvdeq2 ((bgcd a b) a (d0))))
  (mpi ((not (eq a (d0))) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (dvd (bgcd a b) a))
    (bgcdbezout (a b x y))
    (eexd (x (not (eq a (d0))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd (bgcd a b) a))
      (eexda (y (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd (bgcd a b) a))
        (casesda ((an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq b (d0)) (dvd (bgcd a b) a))
          (anwr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq b (d0)) (dvd (bgcd a b) a))
            (mpbii ((eq b (d0)) (dvd (bgcd a b) (bgcd a b)) (dvd (bgcd a b) a))
              (dvdid ((bgcd a b)))
              (dvdeq2d ((eq b (d0)) (bgcd a b) (bgcd a b) a)
                (syl6eq ((eq b (d0)) (bgcd a b) (bgcd a (d0)) a)
                  (bgcd02 (a))
                  (bgcdeq2 (a b (d0)))))))
          (sylib ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (eq (mod a (bgcd a b)) (d0)) (dvd (bgcd a b) a))
            (modeq0 (a (bgcd a b)))
            (mpd ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (lt (mod a (bgcd a b)) (bgcd a b)) (eq (mod a (bgcd a b)) (d0)))
              (anwll ((not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq b (d0))) (lt (mod a (bgcd a b)) (bgcd a b)))
                (syl ((not (eq a (d0))) (ne (bgcd a b) (d0)) (lt (mod a (bgcd a b)) (bgcd a b)))
                  (modlt (a (bgcd a b)))
                  (sylib ((not (eq a (d0))) (lt (d0) (bgcd a b)) (ne (bgcd a b) (d0)))
                    (lt01 ((bgcd a b)))
                    (:conv (im (not (eq a (d0))) (lt (d0) (bgcd a b)))
                      (im
                        (:sym (:unfold ne (a (d0)) ()
                          (not (eq a (d0)))))
                        (lt (d0) (bgcd a b)))
                      (bgcdpos (a b))))))
              (syl5bi ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (lt (mod a (bgcd a b)) (bgcd a b)) (not (le (bgcd a b) (mod a (bgcd a b)))) (eq (mod a (bgcd a b)) (d0)))
                (ltnle ((mod a (bgcd a b)) (bgcd a b)))
                (con1d ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (eq (mod a (bgcd a b)) (d0)) (le (bgcd a b) (mod a (bgcd a b))))
                  (exp ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))) (le (bgcd a b) (mod a (bgcd a b))))
                    (bgcdled ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) a b (mod a (bgcd a b)) (suc (mul (sub (mul (max x y) b) x) (div a (bgcd a b)))) (mul (sub (mul (max x y) a) y) (div a (bgcd a b))))
                      (sylibr ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne (mod a (bgcd a b)) (d0)) (lt (d0) (mod a (bgcd a b))))
                        (lt01 ((mod a (bgcd a b))))
                        (:conv (im (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne (mod a (bgcd a b)) (d0)))
                          (im
                            (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))))
                            (:unfold ne ((mod a (bgcd a b)) (d0)) ()
                              (not (eq (mod a (bgcd a b)) (d0)))))
                          (anr ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))))))
                      (bgcddvd1lem ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) a b (bgcd a b) (div a (bgcd a b)) (mod a (bgcd a b)) (max x y) x y)
                        (:conv (im (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne a (d0)))
                          (im
                            (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))))
                            (:unfold ne (a (d0)) ()
                              (not (eq a (d0)))))
                          (an3l ((not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq b (d0))) (not (eq (mod a (bgcd a b)) (d0))))))
                        (anllr ((not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq b (d0))) (not (eq (mod a (bgcd a b)) (d0)))))
                        (:conv (im (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne b (d0)))
                          (im
                            (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))))
                            (:unfold ne (b (d0)) ()
                              (not (eq b (d0)))))
                          (anlr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0))) (not (eq (mod a (bgcd a b)) (d0))))))
                        (a1i ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (eq (add (mul (bgcd a b) (div a (bgcd a b))) (mod a (bgcd a b))) a))
                          (divmod (a (bgcd a b))))
                        (a1i ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (le x (max x y)))
                          (lemax1 (x y)))
                        (a1i ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (le y (max x y)))
                          (lemax2 (x y))))))))))))))))

(local theorem bgcddvd2 ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (dvd (bgcd a b) b))
((x nat) (y nat))
(casesda ((ne a (d0)) (eq b (d0)) (dvd (bgcd a b) b))
  (anwr ((ne a (d0)) (eq b (d0)) (dvd (bgcd a b) b))
    (mpbiri ((eq b (d0)) (dvd (bgcd a b) (d0)) (dvd (bgcd a b) b))
      (dvd02 ((bgcd a b)))
      (dvdeq2 ((bgcd a b) b (d0)))))
  (mpi ((an (ne a (d0)) (not (eq b (d0)))) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (dvd (bgcd a b) b))
    (bgcdbezout (a b x y))
    (eexd (x (an (ne a (d0)) (not (eq b (d0)))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd (bgcd a b) b))
      (eexda (y (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd (bgcd a b) b))
        (sylib ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq (mod b (bgcd a b)) (d0)) (dvd (bgcd a b) b))
          (modeq0 (b (bgcd a b)))
          (mpd ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (lt (mod b (bgcd a b)) (bgcd a b)) (eq (mod b (bgcd a b)) (d0)))
            (anwll ((ne a (d0)) (not (eq b (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (lt (mod b (bgcd a b)) (bgcd a b)))
              (syl ((ne a (d0)) (ne (bgcd a b) (d0)) (lt (mod b (bgcd a b)) (bgcd a b)))
                (modlt (b (bgcd a b)))
                (sylib ((ne a (d0)) (lt (d0) (bgcd a b)) (ne (bgcd a b) (d0)))
                  (lt01 ((bgcd a b)))
                  (bgcdpos (a b)))))
            (syl5bi ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (lt (mod b (bgcd a b)) (bgcd a b)) (not (le (bgcd a b) (mod b (bgcd a b)))) (eq (mod b (bgcd a b)) (d0)))
              (ltnle ((mod b (bgcd a b)) (bgcd a b)))
              (con1d ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq (mod b (bgcd a b)) (d0)) (le (bgcd a b) (mod b (bgcd a b))))
                (exp ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0))) (le (bgcd a b) (mod b (bgcd a b))))
                  (bgcdled ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) a b (mod b (bgcd a b)) (sub (mul (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))) b) (mul x (div b (bgcd a b)))) (sub (mul (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))) a) (suc (mul y (div b (bgcd a b))))))
                    (sylibr ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (ne (mod b (bgcd a b)) (d0)) (lt (d0) (mod b (bgcd a b))))
                      (lt01 ((mod b (bgcd a b))))
                      (:conv (im (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (ne (mod b (bgcd a b)) (d0)))
                        (im
                          (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0))))
                          (:unfold ne ((mod b (bgcd a b)) (d0)) ()
                            (not (eq (mod b (bgcd a b)) (d0)))))
                        (anr ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))))))
                    (bgcddvd2lem ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) a b (bgcd a b) (div b (bgcd a b)) (mod b (bgcd a b)) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))) x y)
                      (an3l ((ne a (d0)) (not (eq b (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq (mod b (bgcd a b)) (d0)))))
                      (anlr ((an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq (mod b (bgcd a b)) (d0)))))
                      (:conv (im (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (ne b (d0)))
                        (im
                          (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0))))
                          (:unfold ne (b (d0)) ()
                            (not (eq b (d0)))))
                        (anllr ((ne a (d0)) (not (eq b (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq (mod b (bgcd a b)) (d0))))))
                      (a1i ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (eq (add (mul (bgcd a b) (div b (bgcd a b))) (mod b (bgcd a b))) b))
                        (divmod (b (bgcd a b))))
                      (a1i ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (le (mul x (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                        (lemax1 ((mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                      (a1i ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (lt (mul y (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                        (:conv (lt (mul y (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))))
                          (:unfold lt ((mul y (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))) ()
                            (le (suc (mul y (div b (bgcd a b)))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                          (lemax2 ((mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))))))))))))))))))

(local theorem dvdbgcdb ((a nat ()) (b nat ()) (d nat ())) ()
  (im (ne a (d0)) (iff (dvd d (bgcd a b)) (an (dvd d a) (dvd d b))))
()
(:let H1 (anr ((ne a (d0)) (dvd d (bgcd a b))))
(ibid ((ne a (d0)) (dvd d (bgcd a b)) (an (dvd d a) (dvd d b)))
  (exp ((ne a (d0)) (dvd d (bgcd a b)) (an (dvd d a) (dvd d b)))
    (iand ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd d a) (dvd d b))
      (sylc ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd d (bgcd a b)) (dvd (bgcd a b) a) (dvd d a))
        (dvdtr (d (bgcd a b) a))
        H1
        (a1i ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd (bgcd a b) a))
          (bgcddvd1 (a b))))
      (sylc ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd d (bgcd a b)) (dvd (bgcd a b) b) (dvd d b))
        (dvdtr (d (bgcd a b) b))
        H1
        (anwl ((ne a (d0)) (dvd d (bgcd a b)) (dvd (bgcd a b) b))
          (bgcddvd2 (a b))))))
  (a1i ((ne a (d0)) (im (an (dvd d a) (dvd d b)) (dvd d (bgcd a b))))
    (dvdbgcd (a b d))))))

(local theorem gcdbgcd ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (eq (gcd a b) (bgcd a b)))
((d nat))
(eqgcd ((ne a (d0)) a b (bgcd a b) d)
  (dvdbgcdb (a b d))))

(local theorem gcd01 ((b nat ())) ()
  (eq (gcd (d0) b) b)
((d nat))
(trud ((eq (gcd (d0) b) b))
  (eqgcd ((tru) (d0) b b d)
    (a1i ((tru) (iff (dvd d b) (an (dvd d (d0)) (dvd d b))))
      (ax_mp ((iff (an (dvd d (d0)) (dvd d b)) (dvd d b)) (iff (dvd d b) (an (dvd d (d0)) (dvd d b))))
        (bicom ((an (dvd d (d0)) (dvd d b)) (dvd d b)))
        (ax_mp ((dvd d (d0)) (iff (an (dvd d (d0)) (dvd d b)) (dvd d b)))
          (bian1 ((dvd d (d0)) (dvd d b)))
          (dvd02 (d))))))))

(local theorem dvdgcdlem ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (x nat))
  ((h (im G (iff (dvd x d) (an (dvd x a) (dvd x b))))))
  (im G (iff (dvd c (gcd a b)) (an (dvd c a) (dvd c b))))
()
(bitrd (G (dvd c (gcd a b)) (dvd c d) (an (dvd c a) (dvd c b)))
  (dvdeq2d (G c (gcd a b) d)
    (eqgcd (G a b d x)
      h))
  (syl (G (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (iff (dvd c d) (an (dvd c a) (dvd c b))))
    (eale (x c (iff (dvd x d) (an (dvd x a) (dvd x b))) (iff (dvd c d) (an (dvd c a) (dvd c b))))
      (bieqd ((eq x c) (dvd x d) (dvd c d) (an (dvd x a) (dvd x b)) (an (dvd c a) (dvd c b)))
        (dvdeq1 (x c d))
        (aneqd ((eq x c) (dvd x a) (dvd c a) (dvd x b) (dvd c b))
          (dvdeq1 (x c a))
          (dvdeq1 (x c b)))))
    (iald (x G (iff (dvd x d) (an (dvd x a) (dvd x b))))
      h))))

(local theorem dvdgcd ((a nat ()) (b nat ()) (d nat ())) ()
  (iff (dvd d (gcd a b)) (an (dvd d a) (dvd d b)))
((x nat))
(cases ((eq a (d0)) (iff (dvd d (gcd a b)) (an (dvd d a) (dvd d b))))
  (dvdgcdlem ((eq a (d0)) a b d b x)
    (bicomd ((eq a (d0)) (an (dvd x a) (dvd x b)) (dvd x b))
      (syl ((eq a (d0)) (dvd x a) (iff (an (dvd x a) (dvd x b)) (dvd x b)))
        (bian1 ((dvd x a) (dvd x b)))
        (mpbiri ((eq a (d0)) (dvd x (d0)) (dvd x a))
          (dvd02 (x))
          (dvdeq2 (x a (d0)))))))
  (dvdgcdlem ((not (eq a (d0))) a b d (bgcd a b) x)
    (:conv (im (not (eq a (d0))) (iff (dvd x (bgcd a b)) (an (dvd x a) (dvd x b))))
      (im
        (:sym (:unfold ne (a (d0)) ()
          (not (eq a (d0)))))
        (iff (dvd x (bgcd a b)) (an (dvd x a) (dvd x b))))
      (dvdbgcdb (a b x))))))

(local theorem gcddvd1 ((a nat ()) (b nat ())) ()
  (dvd (gcd a b) a)
()
(ax_mp ((an (dvd (gcd a b) a) (dvd (gcd a b) b)) (dvd (gcd a b) a))
  (anl ((dvd (gcd a b) a) (dvd (gcd a b) b)))
  (mpbi ((dvd (gcd a b) (gcd a b)) (an (dvd (gcd a b) a) (dvd (gcd a b) b)))
    (dvdgcd (a b (gcd a b)))
    (dvdid ((gcd a b))))))

(local theorem gcddvd2 ((a nat ()) (b nat ())) ()
  (dvd (gcd a b) b)
()
(ax_mp ((an (dvd (gcd a b) a) (dvd (gcd a b) b)) (dvd (gcd a b) b))
  (anr ((dvd (gcd a b) a) (dvd (gcd a b) b)))
  (mpbi ((dvd (gcd a b) (gcd a b)) (an (dvd (gcd a b) a) (dvd (gcd a b) b)))
    (dvdgcd (a b (gcd a b)))
    (dvdid ((gcd a b))))))

(local theorem gcd02 ((a nat ())) ()
  (eq (gcd a (d0)) a)
()
(ax_mp ((eq (gcd (d0) a) a) (eq (gcd a (d0)) a))
  (ax_mp ((eq (gcd a (d0)) (gcd (d0) a)) (im (eq (gcd (d0) a) a) (eq (gcd a (d0)) a)))
    (eqtr ((gcd a (d0)) (gcd (d0) a) a))
    (gcdcom (a (d0))))
  (gcd01 (a))))

(local theorem bezout ((a nat ()) (b nat ()) (x nat) (y nat)) ()
  (im (ne a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))))
()
(mpbiri ((ne a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))))
  (bgcdbezout (a b x y))
  (exeqd ((ne a (d0)) x (ex y (eq (mul x a) (add (mul y b) (gcd a b)))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
    (exeqd ((ne a (d0)) y (eq (mul x a) (add (mul y b) (gcd a b))) (eq (mul x a) (add (mul y b) (bgcd a b))))
      (eqeq2d ((ne a (d0)) (mul x a) (add (mul y b) (gcd a b)) (add (mul y b) (bgcd a b)))
        (addeq2d ((ne a (d0)) (mul y b) (gcd a b) (bgcd a b))
          (gcdbgcd (a b))))))))

(local def coprime ((a nat ()) (b nat ())) (wff ())
()
(eq (gcd a b) (d1)))

(local theorem coprimeeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (iff (coprime _a1 _b1) (coprime _a2 _b2)))
()
(:conv (im _G (iff (coprime _a1 _b1) (coprime _a2 _b2)))
  (im
    _G
    (iff
      (:unfold coprime (_a1 _b1) ()
        (eq (gcd _a1 _b1) (d1)))
      (:unfold coprime (_a2 _b2) ()
        (eq (gcd _a2 _b2) (d1)))))
  (eqeqd (_G (gcd _a1 _b1) (gcd _a2 _b2) (d1) (d1))
    (gcdeqd (_G _a1 _a2 _b1 _b2)
      _ah
      _bh)
    (eqidd (_G (d1))))))

(local theorem coprimeeq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (iff (coprime _a1 _b1) (coprime _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (iff (coprime _a1 _b1) (coprime _a2 _b2)))
  (coprimeeqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem coprimeeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (coprime _a1 b) (coprime _a2 b)))
()
(coprimeeqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem coprimeeq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (iff (coprime _a1 b) (coprime _a2 b)))
()
(coprimeeq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem coprimeeq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (iff (coprime a _b1) (coprime a _b2)))
()
(coprimeeqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem coprimeeq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (iff (coprime a _b1) (coprime a _b2)))
()
(coprimeeq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem copcom ((a nat ()) (b nat ())) ()
  (iff (coprime a b) (coprime b a))
()
(ax_mp ((eq (gcd a b) (gcd b a)) (iff (coprime a b) (coprime b a)))
  (:conv (im (eq (gcd a b) (gcd b a)) (iff (coprime a b) (coprime b a)))
    (im
      (eq (gcd a b) (gcd b a))
      (iff
        (:unfold coprime (a b) ()
          (eq (gcd a b) (d1)))
        (:unfold coprime (b a) ()
          (eq (gcd b a) (d1)))))
    (eqeq1 ((gcd a b) (gcd b a) (d1))))
  (gcdcom (a b))))

(local theorem dvdcop ((G wff ()) (a nat ()) (b nat ()) (d nat ()))
  ((h1 (im G (coprime a b)))
   (h2 (im G (dvd d a)))
   (h3 (im G (dvd d b))))
  (im G (eq d (d1)))
()
(sylib (G (dvd d (d1)) (eq d (d1)))
  (dvd12 (d))
  (mpbid (G (dvd d (gcd a b)) (dvd d (d1)))
    (dvdeq2d (G d (gcd a b) (d1))
      (:conv (im G (eq (gcd a b) (d1)))
        (im
          G
          (:sym (:unfold coprime (a b) ()
            (eq (gcd a b) (d1)))))
        h1))
    (sylibr (G (an (dvd d a) (dvd d b)) (dvd d (gcd a b)))
      (dvdgcd (a b d))
      (iand (G (dvd d a) (dvd d b))
        h2
        h3)))))

(local theorem dfcop2 ((a nat ()) (b nat ()) (x nat)) ()
  (iff (coprime a b) (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))))
((y nat))
(ibii ((coprime a b) (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))))
  (ialda (x (coprime a b) (dvd x a) (im (dvd x b) (eq x (d1))))
    (exp ((an (coprime a b) (dvd x a)) (dvd x b) (eq x (d1)))
      (dvdcop ((an (an (coprime a b) (dvd x a)) (dvd x b)) a b x)
        (anll ((coprime a b) (dvd x a) (dvd x b)))
        (anlr ((coprime a b) (dvd x a) (dvd x b)))
        (anr ((an (coprime a b) (dvd x a)) (dvd x b))))))
  (:conv (im (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (coprime a b))
    (im
      (al x (im (dvd x a) (im (dvd x b) (eq x (d1)))))
      (:unfold coprime (a b) ()
        (eq (gcd a b) (d1))))
    (eqgcd ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) a b (d1) y)
      (ibid ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (dvd y (d1)) (an (dvd y a) (dvd y b)))
        (a1i ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (im (dvd y (d1)) (an (dvd y a) (dvd y b))))
          (iand ((dvd y (d1)) (dvd y a) (dvd y b))
            (mpi ((dvd y (d1)) (dvd (d1) a) (dvd y a))
              (dvd11 (a))
              (dvdtr (y (d1) a)))
            (mpi ((dvd y (d1)) (dvd (d1) b) (dvd y b))
              (dvd11 (b))
              (dvdtr (y (d1) b)))))
        (exp ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b)) (dvd y (d1)))
          (sylibr ((an (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b))) (eq y (d1)) (dvd y (d1)))
            (dvd12 (y))
            (mpd ((an (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b))) (dvd y b) (eq y (d1)))
              (anrr ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (dvd y a) (dvd y b)))
              (mpd ((an (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b))) (dvd y a) (im (dvd y b) (eq y (d1))))
                (anrl ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (dvd y a) (dvd y b)))
                (anwl ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b)) (im (dvd y a) (im (dvd y b) (eq y (d1)))))
                  (eale (x y (im (dvd x a) (im (dvd x b) (eq x (d1)))) (im (dvd y a) (im (dvd y b) (eq y (d1)))))
                    (imeqd ((eq x y) (dvd x a) (dvd y a) (im (dvd x b) (eq x (d1))) (im (dvd y b) (eq y (d1))))
                      (dvdeq1 (x y a))
                      (imeqd ((eq x y) (dvd x b) (dvd y b) (eq x (d1)) (eq y (d1)))
                        (dvdeq1 (x y b))
                        (eqeq1 (x y (d1))))))))))))))))

(local theorem copbezout ((G wff ()) (a nat ()) (b nat ()) (x nat) (y nat))
  ((h1 (im G (coprime a b)))
   (h2 (im G (ne a (d0)))))
  (im G (ex x (ex y (eq (mul x a) (add (mul y b) (d1))))))
()
(mpbid (G (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))) (ex x (ex y (eq (mul x a) (add (mul y b) (d1))))))
  (exeqd (G x (ex y (eq (mul x a) (add (mul y b) (gcd a b)))) (ex y (eq (mul x a) (add (mul y b) (d1)))))
    (exeqd (G y (eq (mul x a) (add (mul y b) (gcd a b))) (eq (mul x a) (add (mul y b) (d1))))
      (eqeq2d (G (mul x a) (add (mul y b) (gcd a b)) (add (mul y b) (d1)))
        (addeq2d (G (mul y b) (gcd a b) (d1))
          (:conv (im G (eq (gcd a b) (d1)))
            (im
              G
              (:sym (:unfold coprime (a b) ()
                (eq (gcd a b) (d1)))))
            h1)))))
  (syl (G (ne a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))))
    (bezout (a b x y))
    h2)))

(local theorem copdvdmul2 ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (coprime a b)))
   (h2 (im G (dvd a (mul b c)))))
  (im G (dvd a c))
((x nat) (y nat))
(:let H1 (mul11 (c))
(casesda (G (eq a (d0)) (dvd a c))
  (mpbid ((an G (eq a (d0))) (dvd a (mul b c)) (dvd a c))
    (dvdeq2d ((an G (eq a (d0))) a (mul b c) c)
      (syl6eq ((an G (eq a (d0))) (mul b c) (mul (d1) c) c)
        H1
        (muleq1d ((an G (eq a (d0))) b (d1) c)
          (eqtr3d ((an G (eq a (d0))) b (gcd a b) (d1))
            (anwr (G (eq a (d0)) (eq (gcd a b) b))
              (syl6eq ((eq a (d0)) (gcd a b) (gcd (d0) b) b)
                (gcd01 (b))
                (gcdeq1 (a (d0) b))))
            (anwl (G (eq a (d0)) (eq (gcd a b) (d1)))
              (:conv (im G (eq (gcd a b) (d1)))
                (im
                  G
                  (:sym (:unfold coprime (a b) ()
                    (eq (gcd a b) (d1)))))
                h1))))))
    (anwl (G (eq a (d0)) (dvd a (mul b c)))
      h2))
  (mpd ((an G (not (eq a (d0)))) (ex x (ex y (eq (mul x a) (add (mul y b) (d1))))) (dvd a c))
    (copbezout ((an G (not (eq a (d0)))) a b x y)
      (anwl (G (not (eq a (d0))) (coprime a b))
        h1)
      (:conv (im (an G (not (eq a (d0)))) (ne a (d0)))
        (im
          (an G (not (eq a (d0))))
          (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
        (anr (G (not (eq a (d0)))))))
    (eexd (x (an G (not (eq a (d0)))) (ex y (eq (mul x a) (add (mul y b) (d1)))) (dvd a c))
      (eexda (y (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1))) (dvd a c))
        (mpbird ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (add (mul (mul b c) y) c)) (dvd a c))
          (syl ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (mul (mul b c) y)) (iff (dvd a c) (dvd a (add (mul (mul b c) y) c))))
            (dvdadd1 ((mul (mul b c) y) c a))
            (syl ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (mul b c)) (dvd a (mul (mul b c) y)))
              (dvdmul11 (a (mul b c) y))
              (anwll (G (not (eq a (d0))) (eq (mul x a) (add (mul y b) (d1))) (dvd a (mul b c)))
                h2)))
          (mpbii ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (mul (mul x c) a)) (dvd a (add (mul (mul b c) y) c)))
            (dvdmul1 (a (mul x c)))
            (dvdeq2d ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) a (mul (mul x c) a) (add (mul (mul b c) y) c))
              (syl5eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul (mul x c) a) (mul (mul x a) c) (add (mul (mul b c) y) c))
                (mulrass (x c a))
                (syl6eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul (mul x a) c) (add (mul (mul b y) c) (mul (d1) c)) (add (mul (mul b c) y) c))
                  (ax_mp ((eq (mul (d1) c) c) (eq (add (mul (mul b y) c) (mul (d1) c)) (add (mul (mul b c) y) c)))
                    (ax_mp ((eq (mul (mul b y) c) (mul (mul b c) y)) (im (eq (mul (d1) c) c) (eq (add (mul (mul b y) c) (mul (d1) c)) (add (mul (mul b c) y) c))))
                      (addeq ((mul (mul b y) c) (mul (mul b c) y) (mul (d1) c) c))
                      (mulrass (b y c)))
                    H1)
                  (syl6eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul (mul x a) c) (mul (add (mul b y) (d1)) c) (add (mul (mul b y) c) (mul (d1) c)))
                    (addmul ((mul b y) (d1) c))
                    (muleq1d ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul x a) (add (mul b y) (d1)) c)
                      (syl6eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul x a) (add (mul y b) (d1)) (add (mul b y) (d1)))
                        (ax_mp ((eq (mul y b) (mul b y)) (eq (add (mul y b) (d1)) (add (mul b y) (d1))))
                          (addeq1 ((mul y b) (mul b y) (d1)))
                          (mulcom (y b)))
                        (anr ((an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))))))))))))))))))

(local theorem copdvdmul1 ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (coprime a c)))
   (h2 (im G (dvd a (mul b c)))))
  (im G (dvd a b))
()
(copdvdmul2 (G a c b)
  h1
  (sylib (G (dvd a (mul b c)) (dvd a (mul c b)))
    (ax_mp ((eq (mul b c) (mul c b)) (iff (dvd a (mul b c)) (dvd a (mul c b))))
      (dvdeq2 (a (mul b c) (mul c b)))
      (mulcom (b c)))
    h2)))

(local def invm ((a nat ()) (n nat ())) (nat ())
((b nat))
(least (ab b (eqm n (mul a b) (d1)))))

(local theorem invmeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (invm _a1 _n1) (invm _a2 _n2)))
((b nat))
(:conv (im _G (eq (invm _a1 _n1) (invm _a2 _n2)))
  (im
    _G
    (eq
      (:unfold invm (_a1 _n1) (b)
        (least (ab b (eqm _n1 (mul _a1 b) (d1)))))
      (:unfold invm (_a2 _n2) (b)
        (least (ab b (eqm _n2 (mul _a2 b) (d1)))))))
  (leasteqd (_G (ab b (eqm _n1 (mul _a1 b) (d1))) (ab b (eqm _n2 (mul _a2 b) (d1))))
    (abeqd (_G b (eqm _n1 (mul _a1 b) (d1)) (eqm _n2 (mul _a2 b) (d1)))
      (eqmeqd (_G _n1 _n2 (mul _a1 b) (mul _a2 b) (d1) (d1))
        _nh
        (muleqd (_G _a1 _a2 b b)
          _ah
          (eqidd (_G b)))
        (eqidd (_G (d1))))))))

(local theorem invmeq ((_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _n1 _n2) (eq (invm _a1 _n1) (invm _a2 _n2))))
()
(exp ((eq _a1 _a2) (eq _n1 _n2) (eq (invm _a1 _n1) (invm _a2 _n2)))
  (invmeqd ((an (eq _a1 _a2) (eq _n1 _n2)) _a1 _a2 _n1 _n2)
    (anl ((eq _a1 _a2) (eq _n1 _n2)))
    (anr ((eq _a1 _a2) (eq _n1 _n2))))))

(local theorem invmeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (n nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (invm _a1 n) (invm _a2 n)))
()
(invmeqd (_G _a1 _a2 n n)
  _h
  (eqidd (_G n))))

(local theorem invmeq1 ((_a1 nat ()) (_a2 nat ()) (n nat ())) ()
  (im (eq _a1 _a2) (eq (invm _a1 n) (invm _a2 n)))
()
(invmeq1d ((eq _a1 _a2) _a1 _a2 n)
  (id ((eq _a1 _a2)))))

(local theorem invmeq2d ((_G wff ()) (a nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (invm a _n1) (invm a _n2)))
()
(invmeqd (_G a a _n1 _n2)
  (eqidd (_G a))
  _h))

(local theorem invmeq2 ((a nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (invm a _n1) (invm a _n2)))
()
(invmeq2d ((eq _n1 _n2) a _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem mulinvmlem ((G wff ()) (a nat ()) (b nat ()) (n nat ()))
  ((h (im G (eqm n (mul a b) (d1)))))
  (im G (eqm n (mul a (invm a n)) (d1)))
((x nat))
(sylib (G (el (invm a n) (ab x (eqm n (mul a x) (d1)))) (eqm n (mul a (invm a n)) (d1)))
  (elabe (x (invm a n) (eqm n (mul a x) (d1)) (eqm n (mul a (invm a n)) (d1)))
    (eqmeq2d ((eq x (invm a n)) n (mul a x) (mul a (invm a n)) (d1))
      (muleq2 (a x (invm a n)))))
  (syl (G (el b (ab x (eqm n (mul a x) (d1)))) (el (invm a n) (ab x (eqm n (mul a x) (d1)))))
    (:conv (im (el b (ab x (eqm n (mul a x) (d1)))) (el (invm a n) (ab x (eqm n (mul a x) (d1)))))
      (im
        (el b (ab x (eqm n (mul a x) (d1))))
        (el
          (:unfold invm (a n) (x)
            (least (ab x (eqm n (mul a x) (d1)))))
          (ab x (eqm n (mul a x) (d1)))))
      (leastel ((ab x (eqm n (mul a x) (d1))) b)))
    (sylibr (G (eqm n (mul a b) (d1)) (el b (ab x (eqm n (mul a x) (d1)))))
      (elabe (x b (eqm n (mul a x) (d1)) (eqm n (mul a b) (d1)))
        (eqmeq2d ((eq x b) n (mul a x) (mul a b) (d1))
          (muleq2 (a x b))))
      h))))

(local theorem mulinvm ((G wff ()) (a nat ()) (n nat ()))
  ((h (im G (coprime a n))))
  (im G (eqm n (mul a (invm a n)) (d1)))
((x nat) (y nat))
(:let H1 (:conv (im G (eq (gcd a n) (d1)))
  (im
    G
    (:sym (:unfold coprime (a n) ()
      (eq (gcd a n) (d1)))))
  h)
(casesda (G (eq a (d0)) (eqm n (mul a (invm a n)) (d1)))
  (mpbiri ((an G (eq a (d0))) (eqm (d1) (mul a (invm a n)) (d1)) (eqm n (mul a (invm a n)) (d1)))
    (eqm11 ((mul a (invm a n)) (d1)))
    (eqmeq1d ((an G (eq a (d0))) n (d1) (mul a (invm a n)) (d1))
      (eqtr3d ((an G (eq a (d0))) n (gcd a n) (d1))
        (syl6eq ((an G (eq a (d0))) (gcd a n) (gcd (d0) n) n)
          (gcd01 (n))
          (anwr (G (eq a (d0)) (eq (gcd a n) (gcd (d0) n)))
            (gcdeq1 (a (d0) n))))
        (anwl (G (eq a (d0)) (eq (gcd a n) (d1)))
          H1))))
  (casesda ((an G (not (eq a (d0)))) (eq n (d0)) (eqm n (mul a (invm a n)) (d1)))
    (mulinvmlem ((an (an G (not (eq a (d0)))) (eq n (d0))) a (d1) n)
      (syl ((an (an G (not (eq a (d0)))) (eq n (d0))) (eq (mul a (d1)) (d1)) (eqm n (mul a (d1)) (d1)))
        (eqeqm ((mul a (d1)) (d1) n))
        (syl5eq ((an (an G (not (eq a (d0)))) (eq n (d0))) (mul a (d1)) a (d1))
          (mul12 (a))
          (eqtr3d ((an (an G (not (eq a (d0)))) (eq n (d0))) a (gcd a n) (d1))
            (syl6eq ((an (an G (not (eq a (d0)))) (eq n (d0))) (gcd a n) (gcd a (d0)) a)
              (gcd02 (a))
              (anwr ((an G (not (eq a (d0)))) (eq n (d0)) (eq (gcd a n) (gcd a (d0))))
                (gcdeq2 (a n (d0)))))
            (anwll (G (not (eq a (d0))) (eq n (d0)) (eq (gcd a n) (d1)))
              H1)))))
    (mpd ((an (an G (not (eq a (d0)))) (not (eq n (d0)))) (ex x (ex y (eq (mul x a) (add (mul y n) (d1))))) (eqm n (mul a (invm a n)) (d1)))
      (copbezout ((an (an G (not (eq a (d0)))) (not (eq n (d0)))) a n x y)
        (anwll (G (not (eq a (d0))) (not (eq n (d0))) (coprime a n))
          h)
        (:conv (im (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (ne a (d0)))
          (im
            (an (an G (not (eq a (d0)))) (not (eq n (d0))))
            (:unfold ne (a (d0)) ()
              (not (eq a (d0)))))
          (anlr (G (not (eq a (d0))) (not (eq n (d0)))))))
      (eexd (x (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (ex y (eq (mul x a) (add (mul y n) (d1)))) (eqm n (mul a (invm a n)) (d1)))
        (eexda (y (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1))) (eqm n (mul a (invm a n)) (d1)))
          (mulinvmlem ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) a x n)
            (mpbid ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eqm n (add (mul y n) (d1)) (add (d0) (d1))) (eqm n (mul a x) (d1)))
              (eqmeq23d ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (add (mul y n) (d1)) (mul a x) (add (d0) (d1)) (d1) n)
                (eqtr3d ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (add (mul y n) (d1)) (mul x a) (mul a x))
                  (anr ((an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))))
                  (a1i ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eq (mul x a) (mul a x)))
                    (mulcom (x a))))
                (a1i ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eq (add (d0) (d1)) (d1)))
                  (add01 ((d1)))))
              (eqmadd1d ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (mul y n) (d0) (d1) n)
                (a1i ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eqm n (mul y n) (d0)))
                  (mpbir ((dvd n (mul y n)) (eqm n (mul y n) (d0)))
                    (eqm03 ((mul y n) n))
                    (dvdmul1 (n y))))))))))))))

(local def pset ((a nat ())) (set ())
((n nat) (x nat))
(ab n (an (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a))))) (dvd (suc (mul (fst a) (suc n))) (snd a)))))

(local theorem pseteqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()))
  ((_ah (im _G (eq _a1 _a2))))
  (im _G (eqs (pset _a1) (pset _a2)))
((n nat) (x nat))
(:let H1 (eqidd (_G (d0)))
(:let H2 (fsteqd (_G _a1 _a2)
  _ah)
(:let H3 (sndeqd (_G _a1 _a2)
  _ah)
(:conv (im _G (eqs (pset _a1) (pset _a2)))
  (im
    _G
    (eqs
      (:unfold pset (_a1) (n x)
        (ab n (an (an (an (lt (d0) (fst _a1)) (lt (d0) (snd _a1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a1))))) (dvd (suc (mul (fst _a1) (suc n))) (snd _a1)))))
      (:unfold pset (_a2) (n x)
        (ab n (an (an (an (lt (d0) (fst _a2)) (lt (d0) (snd _a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a2))))) (dvd (suc (mul (fst _a2) (suc n))) (snd _a2)))))))
  (abeqd (_G n (an (an (an (lt (d0) (fst _a1)) (lt (d0) (snd _a1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a1))))) (dvd (suc (mul (fst _a1) (suc n))) (snd _a1))) (an (an (an (lt (d0) (fst _a2)) (lt (d0) (snd _a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a2))))) (dvd (suc (mul (fst _a2) (suc n))) (snd _a2))))
    (aneqd (_G (an (an (lt (d0) (fst _a1)) (lt (d0) (snd _a1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a1))))) (an (an (lt (d0) (fst _a2)) (lt (d0) (snd _a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a2))))) (dvd (suc (mul (fst _a1) (suc n))) (snd _a1)) (dvd (suc (mul (fst _a2) (suc n))) (snd _a2)))
      (aneqd (_G (an (lt (d0) (fst _a1)) (lt (d0) (snd _a1))) (an (lt (d0) (fst _a2)) (lt (d0) (snd _a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a1)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a2)))))
        (aneqd (_G (lt (d0) (fst _a1)) (lt (d0) (fst _a2)) (lt (d0) (snd _a1)) (lt (d0) (snd _a2)))
          (lteqd (_G (d0) (d0) (fst _a1) (fst _a2))
            H1
            H2)
          (lteqd (_G (d0) (d0) (snd _a1) (snd _a2))
            H1
            H3))
        (aleqd (_G x (im (an (lt (d0) x) (le x n)) (dvd x (fst _a1))) (im (an (lt (d0) x) (le x n)) (dvd x (fst _a2))))
          (imeqd (_G (an (lt (d0) x) (le x n)) (an (lt (d0) x) (le x n)) (dvd x (fst _a1)) (dvd x (fst _a2)))
            (biidd (_G (an (lt (d0) x) (le x n))))
            (dvdeqd (_G x x (fst _a1) (fst _a2))
              (eqidd (_G x))
              H2))))
      (dvdeqd (_G (suc (mul (fst _a1) (suc n))) (suc (mul (fst _a2) (suc n))) (snd _a1) (snd _a2))
        (suceqd (_G (mul (fst _a1) (suc n)) (mul (fst _a2) (suc n)))
          (muleqd (_G (fst _a1) (fst _a2) (suc n) (suc n))
            H2
            (eqidd (_G (suc n)))))
        H3))))))))

(local theorem pseteq ((_a1 nat ()) (_a2 nat ())) ()
  (im (eq _a1 _a2) (eqs (pset _a1) (pset _a2)))
()
(pseteqd ((eq _a1 _a2) _a1 _a2)
  (id ((eq _a1 _a2)))))

(local theorem elpset ((m nat ()) (n nat ()) (v nat ()) (x nat)) ()
  (iff (el n (pset (pr m v))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
((x1 nat) (y nat))
(:let H1 (fstpr (m v))
(:let H2 (a1i ((eq y n) (eq (fst (pr m v)) m))
  H1)
(:let H3 (sndpr (m v))
(:let H4 (a1i ((eq y n) (eq (snd (pr m v)) v))
  H3)
(:let H5 (anr ((eq y n) (eq x1 x)))
(:conv (iff (el n (pset (pr m v))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
  (iff
    (el
      n
      (:unfold pset ((pr m v)) (y x1)
        (ab y (an (an (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))))) (dvd (suc (mul (fst (pr m v)) (suc y))) (snd (pr m v)))))))
    (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
  (elabe (y n (an (an (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))))) (dvd (suc (mul (fst (pr m v)) (suc y))) (snd (pr m v)))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
    (aneqd ((eq y n) (an (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))))) (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul (fst (pr m v)) (suc y))) (snd (pr m v))) (dvd (suc (mul m (suc n))) v))
      (aneqd ((eq y n) (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (an (lt (d0) m) (lt (d0) v)) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
        (aneqd ((eq y n) (lt (d0) (fst (pr m v))) (lt (d0) m) (lt (d0) (snd (pr m v))) (lt (d0) v))
          (lteq2d ((eq y n) (d0) (fst (pr m v)) m)
            H2)
          (lteq2d ((eq y n) (d0) (snd (pr m v)) v)
            H4))
        (cbvald (x1 x (eq y n) (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))) (im (an (lt (d0) x) (le x n)) (dvd x m)))
          (imeqd ((an (eq y n) (eq x1 x)) (an (lt (d0) x1) (le x1 y)) (an (lt (d0) x) (le x n)) (dvd x1 (fst (pr m v))) (dvd x m))
            (aneqd ((an (eq y n) (eq x1 x)) (lt (d0) x1) (lt (d0) x) (le x1 y) (le x n))
              (anwr ((eq y n) (eq x1 x) (iff (lt (d0) x1) (lt (d0) x)))
                (lteq2 ((d0) x1 x)))
              (leeqd ((an (eq y n) (eq x1 x)) x1 x y n)
                H5
                (anl ((eq y n) (eq x1 x)))))
            (dvdeqd ((an (eq y n) (eq x1 x)) x1 x (fst (pr m v)) m)
              H5
              (a1i ((an (eq y n) (eq x1 x)) (eq (fst (pr m v)) m))
                H1)))))
      (dvdeqd ((eq y n) (suc (mul (fst (pr m v)) (suc y))) (suc (mul m (suc n))) (snd (pr m v)) v)
        (suceqd ((eq y n) (mul (fst (pr m v)) (suc y)) (mul m (suc n)))
          (muleqd ((eq y n) (fst (pr m v)) m (suc y) (suc n))
            H2
            (suceq (y n))))
        H4))))))))))

(local theorem elpset1 ((m nat ()) (n nat ())) ()
  (not (el n (pset (pr m (d1)))))
((x nat))
(ax_mp ((im (el n (pset (pr m (d1)))) (not (el n (pset (pr m (d1)))))) (not (el n (pset (pr m (d1))))))
  (inot ((el n (pset (pr m (d1))))))
  (sylbi ((el n (pset (pr m (d1)))) (an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (not (el n (pset (pr m (d1))))))
    (elpset (m n (d1) x))
    (sylc ((an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (not (lt (mul m (suc n)) (suc (d0)))) (lt (mul m (suc n)) (suc (d0))) (not (el n (pset (pr m (d1))))))
      (absurd ((lt (mul m (suc n)) (suc (d0))) (not (el n (pset (pr m (d1)))))))
      (sylib ((an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (le (suc (d0)) (mul m (suc n))) (not (lt (mul m (suc n)) (suc (d0)))))
        (lenlt ((suc (d0)) (mul m (suc n))))
        (syl ((an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (lt (d0) m) (le (suc (d0)) (mul m (suc n))))
          (sylibr ((lt (d0) m) (an (lt (d0) m) (lt (d0) (suc n))) (le (suc (d0)) (mul m (suc n))))
            (:conv (iff (le (suc (d0)) (mul m (suc n))) (an (lt (d0) m) (lt (d0) (suc n))))
              (iff
                (:sym (:unfold lt ((d0) (mul m (suc n))) ()
                  (le (suc (d0)) (mul m (suc n)))))
                (an (lt (d0) m) (lt (d0) (suc n))))
              (mulpos (m (suc n))))
            (iand ((lt (d0) m) (lt (d0) m) (lt (d0) (suc n)))
              (id ((lt (d0) m)))
              (a1i ((lt (d0) m) (lt (d0) (suc n)))
                (lt01S (n)))))
          (an3l ((lt (d0) m) (lt (d0) (d1)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (dvd (suc (mul m (suc n))) (d1))))))
      (:conv (im (an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (lt (mul m (suc n)) (suc (d0))))
        (im
          (an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1)))
          (:unfold lt ((mul m (suc n)) (suc (d0))) ()
            (le (suc (mul m (suc n))) (suc (d0)))))
        (dvdle ((an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (suc (mul m (suc n))) (suc (d0)))
          (a1i ((an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (ne (suc (d0)) (d0)))
            (:conv (ne (suc (d0)) (d0))
              (ne
                (:sym (:unfold d1 () ()
                  (suc (d0))))
                (d0))
              (d1ne0 ())))
          (:conv (im (an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1))) (dvd (suc (mul m (suc n))) (suc (d0))))
            (im
              (an (an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1)))
              (dvd
                (suc (mul m (suc n)))
                (:sym (:unfold d1 () ()
                  (suc (d0))))))
            (anr ((an (an (lt (d0) m) (lt (d0) (d1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (d1)))))))))))

(local theorem psetSlem1 ((G wff ()) (i nat ()) (j nat ()) (m nat ()) (n nat ()) (x nat))
  ((h1 (im G (al x (im (an (lt (d0) x) (lt x n)) (dvd x m)))))
   (h2 (im G (lt i j)))
   (h3 (im G (lt j n))))
  (im G (coprime (suc (mul m (suc i))) (suc (mul m (suc j)))))
((u nat))
(:let H1 (anwll (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j)))) (lt i j))
  h2)
(:let H2 (anlr (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j))))))
(sylibr (G (al u (im (dvd u (suc (mul m (suc i)))) (im (dvd u (suc (mul m (suc j)))) (eq u (d1))))) (coprime (suc (mul m (suc i))) (suc (mul m (suc j)))))
  (dfcop2 ((suc (mul m (suc i))) (suc (mul m (suc j))) u))
  (iald (u G (im (dvd u (suc (mul m (suc i)))) (im (dvd u (suc (mul m (suc j)))) (eq u (d1)))))
    (exp (G (dvd u (suc (mul m (suc i)))) (im (dvd u (suc (mul m (suc j)))) (eq u (d1))))
      (exp ((an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j)))) (eq u (d1)))
        (sylib ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (d1)) (eq u (d1)))
          (dvd12 (u))
          (mpbird ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (add (mul m (suc i)) (d1))) (dvd u (d1)))
            (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (mul m (suc i))) (iff (dvd u (d1)) (dvd u (add (mul m (suc i)) (d1)))))
              (dvdadd1 ((mul m (suc i)) (d1) u))
              (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u m) (dvd u (mul m (suc i))))
                (dvdmul11 (u m (suc i)))
                (sylc ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (sub j i)) (dvd (sub j i) m) (dvd u m))
                  (dvdtr (u (sub j i) m))
                  (mpbird ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i))) (dvd u (sub j i)))
                    (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (mul (suc (mul m (suc j))) (suc i))) (iff (dvd u (sub j i)) (dvd u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)))))
                      (dvdadd1 ((mul (suc (mul m (suc j))) (suc i)) (sub j i) u))
                      (anwr ((an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j)))) (dvd u (mul (suc (mul m (suc j))) (suc i))))
                        (dvdmul11 (u (suc (mul m (suc j))) (suc i)))))
                    (mpbird ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (mul (suc (mul m (suc i))) (suc j))) (dvd u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i))))
                      (dvdeq2d ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)) (mul (suc (mul m (suc i))) (suc j)))
                        (syl5eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)) (add (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i)) (mul (suc (mul m (suc i))) (suc j)))
                          (ax_mp ((eq (mul (suc (mul m (suc j))) (suc i)) (add (mul (mul m (suc j)) (suc i)) (suc i))) (eq (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)) (add (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i))))
                            (addeq1 ((mul (suc (mul m (suc j))) (suc i)) (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i)))
                            (mulS1 ((mul m (suc j)) (suc i))))
                          (syl5eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i)) (add (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i))) (mul (suc (mul m (suc i))) (suc j)))
                            (addass ((mul (mul m (suc j)) (suc i)) (suc i) (sub j i)))
                            (syl6eqr ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i))) (add (mul (mul m (suc i)) (suc j)) (suc j)) (mul (suc (mul m (suc i))) (suc j)))
                              (mulS1 ((mul m (suc i)) (suc j)))
                              (syl6eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i))) (add (mul (mul m (suc j)) (suc i)) (suc j)) (add (mul (mul m (suc i)) (suc j)) (suc j)))
                                (ax_mp ((eq (mul (mul m (suc j)) (suc i)) (mul (mul m (suc i)) (suc j))) (eq (add (mul (mul m (suc j)) (suc i)) (suc j)) (add (mul (mul m (suc i)) (suc j)) (suc j))))
                                  (addeq1 ((mul (mul m (suc j)) (suc i)) (mul (mul m (suc i)) (suc j)) (suc j)))
                                  (mulrass (m (suc j) (suc i))))
                                (addeq2d ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i)) (suc j))
                                  (syl5eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (suc i) (sub j i)) (suc (add i (sub j i))) (suc j))
                                    (addS1 (i (sub j i)))
                                    (suceqd ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add i (sub j i)) j)
                                      (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (le i j) (eq (add i (sub j i)) j))
                                        (pncan3 (i j))
                                        (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (lt i j) (le i j))
                                          (ltle (i j))
                                          H1))))))))))
                      (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (suc (mul m (suc i)))) (dvd u (mul (suc (mul m (suc i))) (suc j))))
                        (dvdmul11 (u (suc (mul m (suc i))) (suc j)))
                        H2)))
                  (sylc ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))) (an (lt (d0) (sub j i)) (lt (sub j i) n)) (dvd (sub j i) m))
                    (eale (x (sub j i) (im (an (lt (d0) x) (lt x n)) (dvd x m)) (im (an (lt (d0) (sub j i)) (lt (sub j i) n)) (dvd (sub j i) m)))
                      (imeqd ((eq x (sub j i)) (an (lt (d0) x) (lt x n)) (an (lt (d0) (sub j i)) (lt (sub j i) n)) (dvd x m) (dvd (sub j i) m))
                        (aneqd ((eq x (sub j i)) (lt (d0) x) (lt (d0) (sub j i)) (lt x n) (lt (sub j i) n))
                          (lteq2 ((d0) x (sub j i)))
                          (lteq1 (x (sub j i) n)))
                        (dvdeq1 (x (sub j i) m))))
                    (anwll (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j)))) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))))
                      h1)
                    (iand ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (lt (d0) (sub j i)) (lt (sub j i) n))
                      (sylib ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (lt i j) (lt (d0) (sub j i)))
                        (subpos (i j))
                        H1)
                      (lelttrd ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (sub j i) j n)
                        (a1i ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (le (sub j i) j))
                          (subleid (j i)))
                        (anwll (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j)))) (lt j n))
                          h3)))))))
            (sylibr ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (suc (mul m (suc i)))) (dvd u (add (mul m (suc i)) (d1))))
              (ax_mp ((eq (add (mul m (suc i)) (d1)) (suc (mul m (suc i)))) (iff (dvd u (add (mul m (suc i)) (d1))) (dvd u (suc (mul m (suc i))))))
                (dvdeq2 (u (add (mul m (suc i)) (d1)) (suc (mul m (suc i)))))
                (add12 ((mul m (suc i)))))
              H2))))))))))

(local theorem psetSlem2 ((G wff ()) (a nat ()) (b nat ()) (m nat ()) (n nat ()) (x nat))
  ((h1 (im G (al x (im (an (lt (d0) x) (lt x n)) (dvd x m)))))
   (h2 (im G (ne a b)))
   (h3 (im G (lt a n)))
   (h4 (im G (lt b n))))
  (im G (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
()
(mpd (G (or (lt a b) (lt b a)) (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
  (sylib (G (ne a b) (or (lt a b) (lt b a)))
    (neltlt (a b))
    h2)
  (eorda (G (lt a b) (lt b a) (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
    (psetSlem1 ((an G (lt a b)) a b m n x)
      (anwl (G (lt a b) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))))
        h1)
      (anr (G (lt a b)))
      (anwl (G (lt a b) (lt b n))
        h4))
    (sylib ((an G (lt b a)) (coprime (suc (mul m (suc b))) (suc (mul m (suc a)))) (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
      (copcom ((suc (mul m (suc b))) (suc (mul m (suc a)))))
      (psetSlem1 ((an G (lt b a)) b a m n x)
        (anwl (G (lt b a) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))))
          h1)
        (anr (G (lt b a)))
        (anwl (G (lt b a) (lt a n))
          h3))))))

(local theorem psetS ((G wff ()) (a nat ()) (m nat ()) (n nat ()) (v nat ()) (x nat))
  ((h1 (im G (lt (d0) m)))
   (h2 (im G (lt (d0) v)))
   (h3 (im G (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))))
  (im G (iff (el a (pset (pr m (mul v (suc (mul m (suc n))))))) (or (el a (pset (pr m v))) (eq a n))))
((y nat))
(:let H1 (mulpos (v (suc (mul m (suc n)))))
(:let H2 (anlr (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (not (eq a n))))
(:let H3 (anlr ((an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
(:let H4 (syl ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))
  H3
  H2)
(:let H5 (lt01S ((mul m (suc n))))
(syl5bb (G (el a (pset (pr m (mul v (suc (mul m (suc n))))))) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (el a (pset (pr m v))) (eq a n)))
  (elpset (m a (mul v (suc (mul m (suc n)))) x))
  (syl6bbr (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)) (or (el a (pset (pr m v))) (eq a n)))
    (oreq1i ((el a (pset (pr m v))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n))
      (elpset (m a v x)))
    (ibid (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
      (exp (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
        (syla ((an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
          (:conv (im (im (not (eq a n)) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
            (im
              (:sym (:unfold or ((eq a n) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v))) ()
                (im (not (eq a n)) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)))))
              (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
            (orcom ((eq a n) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)))))
          (iand ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v))
            (iand ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))
              (iand ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt (d0) m) (lt (d0) v))
                (anwll (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (not (eq a n)) (lt (d0) m))
                  h1)
                (anld ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                  (sylib ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt (d0) (mul v (suc (mul m (suc n))))) (an (lt (d0) v) (lt (d0) (suc (mul m (suc n))))))
                    H1
                    (syl ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (lt (d0) (mul v (suc (mul m (suc n))))))
                      (anllr ((lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
                      H2))))
              H4)
            (copdvdmul1 ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (suc (mul m (suc a))) v (suc (mul m (suc n))))
              (psetSlem2 ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) a n m (max (suc a) (suc n)) y)
                (sylib ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (al x (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m))) (al y (im (an (lt (d0) y) (lt y (max (suc a) (suc n)))) (dvd y m))))
                  (cbval (x y (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m)) (im (an (lt (d0) y) (lt y (max (suc a) (suc n)))) (dvd y m)))
                    (imeqd ((eq x y) (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (an (lt (d0) y) (lt y (max (suc a) (suc n)))) (dvd x m) (dvd y m))
                      (aneqd ((eq x y) (lt (d0) x) (lt (d0) y) (lt x (max (suc a) (suc n))) (lt y (max (suc a) (suc n))))
                        (lteq2 ((d0) x y))
                        (lteq1 (x y (max (suc a) (suc n)))))
                      (dvdeq1 (x y m))))
                  (sylc ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (al x (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m))))
                    (al2imi (x (im (an (lt (d0) x) (le x a)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)) (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m)))
                      (syl6 ((im (an (lt (d0) x) (le x a)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)) (im (or (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n))) (dvd x m)) (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m)))
                        (imim1i ((an (lt (d0) x) (lt x (max (suc a) (suc n)))) (or (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n))) (dvd x m))
                          (sylib ((an (lt (d0) x) (lt x (max (suc a) (suc n)))) (an (lt (d0) x) (or (le x a) (le x n))) (or (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n))))
                            (andi ((lt (d0) x) (le x a) (le x n)))
                            (ax_mp ((im (lt x (max (suc a) (suc n))) (or (le x a) (le x n))) (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (an (lt (d0) x) (or (le x a) (le x n)))))
                              (anim2 ((lt (d0) x) (lt x (max (suc a) (suc n))) (or (le x a) (le x n))))
                              (sylbi ((lt x (max (suc a) (suc n))) (or (lt x (suc a)) (lt x (suc n))) (or (le x a) (le x n)))
                                (ltmax (x (suc a) (suc n)))
                                (ax_mp ((iff (or (le x a) (le x n)) (or (lt x (suc a)) (lt x (suc n)))) (im (or (lt x (suc a)) (lt x (suc n))) (or (le x a) (le x n))))
                                  (bi2 ((or (le x a) (le x n)) (or (lt x (suc a)) (lt x (suc n)))))
                                  (oreqi ((le x a) (lt x (suc a)) (le x n) (lt x (suc n)))
                                    (leltsuc (x a))
                                    (leltsuc (x n))))))))
                        (eor ((an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n)) (dvd x m)))))
                    H4
                    (anwll (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (not (eq a n)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
                      h3)))
                (:conv (im (an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (ne a n))
                  (im
                    (an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)))
                    (:unfold ne (a n) ()
                      (not (eq a n))))
                  (anr ((an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)))))
                (a1i ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt a (max (suc a) (suc n))))
                  (:conv (lt a (max (suc a) (suc n)))
                    (:unfold lt (a (max (suc a) (suc n))) ()
                      (le (suc a) (max (suc a) (suc n))))
                    (lemax1 ((suc a) (suc n)))))
                (a1i ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt n (max (suc a) (suc n))))
                  (:conv (lt n (max (suc a) (suc n)))
                    (:unfold lt (n (max (suc a) (suc n))) ()
                      (le (suc n) (max (suc a) (suc n))))
                    (lemax2 ((suc a) (suc n))))))
              (anwl ((an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))
                (anrr (G (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))))))))
      (eord (G (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
        (animd (G (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))
          (a1i (G (im (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))))
            (ax_mp ((im (an (lt (d0) m) (lt (d0) v)) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))))) (im (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))))
              (anim1 ((an (lt (d0) m) (lt (d0) v)) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))))
              (ax_mp ((im (lt (d0) v) (lt (d0) (mul v (suc (mul m (suc n)))))) (im (an (lt (d0) m) (lt (d0) v)) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))))))
                (anim2 ((lt (d0) m) (lt (d0) v) (lt (d0) (mul v (suc (mul m (suc n)))))))
                (sylibr ((lt (d0) v) (an (lt (d0) v) (lt (d0) (suc (mul m (suc n))))) (lt (d0) (mul v (suc (mul m (suc n))))))
                  H1
                  (iand ((lt (d0) v) (lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                    (id ((lt (d0) v)))
                    (a1i ((lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                      H5))))))
          (a1i (G (im (dvd (suc (mul m (suc a))) v) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
            (dvdmul11 ((suc (mul m (suc a))) v (suc (mul m (suc n)))))))
        (syl5ibrcom (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (eq a n) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n)))))))
          (aneqd ((eq a n) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))) (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n))))))
            (aneq2d ((eq a n) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
              (aleqd ((eq a n) x (im (an (lt (d0) x) (le x a)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)))
                (imeq1d ((eq a n) (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n)) (dvd x m))
                  (aneq2d ((eq a n) (lt (d0) x) (le x a) (le x n))
                    (leeq2 (x a n))))))
            (dvdeq1d ((eq a n) (suc (mul m (suc a))) (suc (mul m (suc n))) (mul v (suc (mul m (suc n)))))
              (suceqd ((eq a n) (mul m (suc a)) (mul m (suc n)))
                (muleq2d ((eq a n) m (suc a) (suc n))
                  (suceq (a n))))))
          (iand (G (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n))))))
            (iand (G (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
              (iand (G (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))))
                h1
                (sylibr (G (an (lt (d0) v) (lt (d0) (suc (mul m (suc n))))) (lt (d0) (mul v (suc (mul m (suc n))))))
                  H1
                  (iand (G (lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                    h2
                    (a1i (G (lt (d0) (suc (mul m (suc n)))))
                      H5))))
              h3)
            (a1i (G (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n))))))
              (dvdmul1 ((suc (mul m (suc n))) v)))))))))))))))

(local theorem lcmex ((m nat) (n nat ()) (x nat)) ()
  (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))))
((_1 nat) (a nat) (x1 nat))
(ind (_1 x1 n (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x x1)) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m))))))
  (exeqd ((eq _1 n) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))))
    (aneqd ((eq _1 n) (lt (d0) m) (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
      (biidd ((eq _1 n) (lt (d0) m)))
      (aleqd ((eq _1 n) x (im (an (lt (d0) x) (le x _1)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)))
        (imeqd ((eq _1 n) (an (lt (d0) x) (le x _1)) (an (lt (d0) x) (le x n)) (dvd x m) (dvd x m))
          (aneqd ((eq _1 n) (lt (d0) x) (lt (d0) x) (le x _1) (le x n))
            (biidd ((eq _1 n) (lt (d0) x)))
            (leeqd ((eq _1 n) x x _1 n)
              (eqidd ((eq _1 n) x))
              (id ((eq _1 n)))))
          (biidd ((eq _1 n) (dvd x m)))))))
  (exeqd ((eq _1 (d0)) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m)))))
    (aneqd ((eq _1 (d0)) (lt (d0) m) (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m))) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))
      (biidd ((eq _1 (d0)) (lt (d0) m)))
      (aleqd ((eq _1 (d0)) x (im (an (lt (d0) x) (le x _1)) (dvd x m)) (im (an (lt (d0) x) (le x (d0))) (dvd x m)))
        (imeqd ((eq _1 (d0)) (an (lt (d0) x) (le x _1)) (an (lt (d0) x) (le x (d0))) (dvd x m) (dvd x m))
          (aneqd ((eq _1 (d0)) (lt (d0) x) (lt (d0) x) (le x _1) (le x (d0)))
            (biidd ((eq _1 (d0)) (lt (d0) x)))
            (leeqd ((eq _1 (d0)) x x _1 (d0))
              (eqidd ((eq _1 (d0)) x))
              (id ((eq _1 (d0))))))
          (biidd ((eq _1 (d0)) (dvd x m)))))))
  (exeqd ((eq _1 x1) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x x1)) (dvd x m)))))
    (aneqd ((eq _1 x1) (lt (d0) m) (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m))) (al x (im (an (lt (d0) x) (le x x1)) (dvd x m))))
      (biidd ((eq _1 x1) (lt (d0) m)))
      (aleqd ((eq _1 x1) x (im (an (lt (d0) x) (le x _1)) (dvd x m)) (im (an (lt (d0) x) (le x x1)) (dvd x m)))
        (imeqd ((eq _1 x1) (an (lt (d0) x) (le x _1)) (an (lt (d0) x) (le x x1)) (dvd x m) (dvd x m))
          (aneqd ((eq _1 x1) (lt (d0) x) (lt (d0) x) (le x _1) (le x x1))
            (biidd ((eq _1 x1) (lt (d0) x)))
            (leeqd ((eq _1 x1) x x _1 x1)
              (eqidd ((eq _1 x1) x))
              (id ((eq _1 x1)))))
          (biidd ((eq _1 x1) (dvd x m)))))))
  (exeqd ((eq _1 (suc x1)) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m)))))
    (aneqd ((eq _1 (suc x1)) (lt (d0) m) (lt (d0) m) (al x (im (an (lt (d0) x) (le x _1)) (dvd x m))) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m))))
      (biidd ((eq _1 (suc x1)) (lt (d0) m)))
      (aleqd ((eq _1 (suc x1)) x (im (an (lt (d0) x) (le x _1)) (dvd x m)) (im (an (lt (d0) x) (le x (suc x1))) (dvd x m)))
        (imeqd ((eq _1 (suc x1)) (an (lt (d0) x) (le x _1)) (an (lt (d0) x) (le x (suc x1))) (dvd x m) (dvd x m))
          (aneqd ((eq _1 (suc x1)) (lt (d0) x) (lt (d0) x) (le x _1) (le x (suc x1)))
            (biidd ((eq _1 (suc x1)) (lt (d0) x)))
            (leeqd ((eq _1 (suc x1)) x x _1 (suc x1))
              (eqidd ((eq _1 (suc x1)) x))
              (id ((eq _1 (suc x1))))))
          (biidd ((eq _1 (suc x1)) (dvd x m)))))))
  (ax_mp ((an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))))
    (:conv (im (an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))))
      (im
        (an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))))
        (ex
          m
          (an
            (:unfold lt ((d0) m) ()
              (le (suc (d0)) m))
            (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))))
      (iexe (m (d1) (an (le (suc (d0)) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m)))) (an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))))
        (aneqd ((eq m (d1)) (le (suc (d0)) m) (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))))
          (leeq2 ((suc (d0)) m (d1)))
          (aleqd ((eq m (d1)) x (im (an (lt (d0) x) (le x (d0))) (dvd x m)) (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))
            (imeq2d ((eq m (d1)) (an (lt (d0) x) (le x (d0))) (dvd x m) (dvd x (d1)))
              (dvdeq2 (x m (d1))))))))
    (ax_mp ((al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))) (an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))))
      (ax_mp ((le (suc (d0)) (d1)) (im (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))) (an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))))))
        (ian ((le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))))
        (:conv (le (suc (d0)) (d1))
          (:sym (:unfold lt ((d0) (d1)) ()
            (le (suc (d0)) (d1))))
          (d0lt1 ())))
      (ax_gen (x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))
        (imp ((lt (d0) x) (le x (d0)) (dvd x (d1)))
          (sylbi ((lt (d0) x) (not (le x (d0))) (im (le x (d0)) (dvd x (d1))))
            (ltnle ((d0) x))
            (absurd ((le x (d0)) (dvd x (d1)))))))))
  (sylbi ((ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x x1)) (dvd x m))))) (ex a (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m))))))
    (cbvex (m a (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x x1)) (dvd x m)))) (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a)))))
      (aneqd ((eq m a) (lt (d0) m) (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x m))) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a))))
        (:conv (im (eq m a) (iff (lt (d0) m) (le (suc (d0)) a)))
          (im
            (eq m a)
            (iff
              (:unfold lt ((d0) m) ()
                (le (suc (d0)) m))
              (le (suc (d0)) a)))
          (leeq2 ((suc (d0)) m a)))
        (aleqd ((eq m a) x (im (an (lt (d0) x) (le x x1)) (dvd x m)) (im (an (lt (d0) x) (le x x1)) (dvd x a)))
          (imeq2d ((eq m a) (an (lt (d0) x) (le x x1)) (dvd x m) (dvd x a))
            (dvdeq2 (x m a))))))
    (eex (a (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a)))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m))))))
      (sylan ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a)))) (le (suc (d0)) (mul a (suc x1))) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m))))))
        (iexe (m (mul a (suc x1)) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m)))) (an (le (suc (d0)) (mul a (suc x1))) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1)))))))
          (aneqd ((eq m (mul a (suc x1))) (lt (d0) m) (le (suc (d0)) (mul a (suc x1))) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m))) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1))))))
            (:conv (im (eq m (mul a (suc x1))) (iff (lt (d0) m) (le (suc (d0)) (mul a (suc x1)))))
              (im
                (eq m (mul a (suc x1)))
                (iff
                  (:unfold lt ((d0) m) ()
                    (le (suc (d0)) m))
                  (le (suc (d0)) (mul a (suc x1)))))
              (leeq2 ((suc (d0)) m (mul a (suc x1)))))
            (aleqd ((eq m (mul a (suc x1))) x (im (an (lt (d0) x) (le x (suc x1))) (dvd x m)) (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1)))))
              (imeq2d ((eq m (mul a (suc x1))) (an (lt (d0) x) (le x (suc x1))) (dvd x m) (dvd x (mul a (suc x1))))
                (dvdeq2 (x m (mul a (suc x1))))))))
        (sylibr ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a)))) (an (lt (d0) a) (lt (d0) (suc x1))) (le (suc (d0)) (mul a (suc x1))))
          (:conv (iff (le (suc (d0)) (mul a (suc x1))) (an (lt (d0) a) (lt (d0) (suc x1))))
            (iff
              (:sym (:unfold lt ((d0) (mul a (suc x1))) ()
                (le (suc (d0)) (mul a (suc x1)))))
              (an (lt (d0) a) (lt (d0) (suc x1))))
            (mulpos (a (suc x1))))
          (iand ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a)))) (lt (d0) a) (lt (d0) (suc x1)))
            (:conv (im (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a)))) (lt (d0) a))
              (im
                (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a))))
                (:unfold lt ((d0) a) ()
                  (le (suc (d0)) a)))
              (anl ((le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a))))))
            (a1i ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a)))) (lt (d0) (suc x1)))
              (lt01S (x1)))))
        (anwr ((le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x x1)) (dvd x a))) (al x (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1))))))
          (alimi (x (im (an (lt (d0) x) (le x x1)) (dvd x a)) (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1)))))
            (sylbi ((im (an (lt (d0) x) (le x x1)) (dvd x a)) (im (lt (d0) x) (im (le x x1) (dvd x a))) (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1)))))
              (impexp ((lt (d0) x) (le x x1) (dvd x a)))
              (sylibr ((im (lt (d0) x) (im (le x x1) (dvd x a))) (im (lt (d0) x) (im (le x (suc x1)) (dvd x (mul a (suc x1))))) (im (an (lt (d0) x) (le x (suc x1))) (dvd x (mul a (suc x1)))))
                (impexp ((lt (d0) x) (le x (suc x1)) (dvd x (mul a (suc x1)))))
                (ax_mp ((im (im (le x x1) (dvd x a)) (im (le x (suc x1)) (dvd x (mul a (suc x1))))) (im (im (lt (d0) x) (im (le x x1) (dvd x a))) (im (lt (d0) x) (im (le x (suc x1)) (dvd x (mul a (suc x1)))))))
                  (imim2 ((lt (d0) x) (im (le x x1) (dvd x a)) (im (le x (suc x1)) (dvd x (mul a (suc x1))))))
                  (syl5bi ((im (le x x1) (dvd x a)) (le x (suc x1)) (or (lt x (suc x1)) (eq x (suc x1))) (dvd x (mul a (suc x1))))
                    (leloe (x (suc x1)))
                    (eord ((im (le x x1) (dvd x a)) (lt x (suc x1)) (eq x (suc x1)) (dvd x (mul a (suc x1))))
                      (syl5bir ((im (le x x1) (dvd x a)) (lt x (suc x1)) (le x x1) (dvd x (mul a (suc x1))))
                        (leltsuc (x x1))
                        (imim2i ((le x x1) (dvd x a) (dvd x (mul a (suc x1))))
                          (dvdmul11 (x a (suc x1)))))
                      (a1i ((im (le x x1) (dvd x a)) (im (eq x (suc x1)) (dvd x (mul a (suc x1)))))
                        (mpbii ((eq x (suc x1)) (dvd x (mul a x)) (dvd x (mul a (suc x1))))
                          (dvdmul1 (x a))
                          (dvdeq2d ((eq x (suc x1)) x (mul a x) (mul a (suc x1)))
                            (muleq2 (a x (suc x1))))))))))))))))))

(local theorem psetsep ((b nat) (n nat ()) (x nat) (p wff (x))) ()
  (ex b (eqs (pset b) (ab x (an (lt x n) p))))
((_1 nat) (a nat) (m nat) (v nat) (y nat) (z nat))
(:let H1 (anrl ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
(:let H2 (bitr ((el y (ab x (an (lt x (suc v)) p))) (sb y x (an (lt x (suc v)) p)) (an (lt y (suc v)) (sb y x p))))
(:let H3 (elab (y x (an (lt x (suc v)) p)))
(:let H4 (ax_mp ((iff (el y (ab x (an (lt x (suc v)) p))) (sb y x (an (lt x (suc v)) p))) (im (iff (sb y x (an (lt x (suc v)) p)) (an (lt y (suc v)) (sb y x p))) (iff (el y (ab x (an (lt x (suc v)) p))) (an (lt y (suc v)) (sb y x p)))))
  H2
  H3)
(:let H5 (nfv ((lt y (suc v)) x))
(:let H6 (nfsb1 (x y p))
(:let H7 (nfan (x (lt y (suc v)) (sb y x p))
  H5
  H6)
(:let H8 (lteq1 (x y (suc v)))
(:let H9 (sbq (x y p))
(:let H10 (aneqd ((eq x y) (lt x (suc v)) (lt y (suc v)) p (sb y x p))
  H8
  H9)
(:let H11 (sbeh (x y (an (lt x (suc v)) p) (an (lt y (suc v)) (sb y x p)))
  H7
  H10)
(:let H12 (ax_mp ((iff (sb y x (an (lt x (suc v)) p)) (an (lt y (suc v)) (sb y x p))) (iff (el y (ab x (an (lt x (suc v)) p))) (an (lt y (suc v)) (sb y x p))))
  H4
  H11)
(:let H13 (an3l ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n) (sb v x p) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))
(:let H14 (bitr ((el y (ab x (an (lt x v) p))) (sb y x (an (lt x v) p)) (an (lt y v) (sb y x p))))
(:let H15 (elab (y x (an (lt x v) p)))
(:let H16 (ax_mp ((iff (el y (ab x (an (lt x v) p))) (sb y x (an (lt x v) p))) (im (iff (sb y x (an (lt x v) p)) (an (lt y v) (sb y x p))) (iff (el y (ab x (an (lt x v) p))) (an (lt y v) (sb y x p)))))
  H14
  H15)
(:let H17 (nfv ((lt y v) x))
(:let H18 (nfan (x (lt y v) (sb y x p))
  H17
  H6)
(:let H19 (lteq1 (x y v))
(:let H20 (aneqd ((eq x y) (lt x v) (lt y v) p (sb y x p))
  H19
  H9)
(:let H21 (sbeh (x y (an (lt x v) p) (an (lt y v) (sb y x p)))
  H18
  H20)
(:let H22 (ax_mp ((iff (sb y x (an (lt x v) p)) (an (lt y v) (sb y x p))) (iff (el y (ab x (an (lt x v) p))) (an (lt y v) (sb y x p))))
  H16
  H21)
(:let H23 (ax_mp ((iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
  (ax_mp ((iff (an (lt y (suc v)) (sb y x p)) (an (or (lt y v) (eq y v)) (sb y x p))) (im (iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))))))
    (bitr ((an (lt y (suc v)) (sb y x p)) (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
    (aneq1i ((lt y (suc v)) (or (lt y v) (eq y v)) (sb y x p))
      (ax_mp ((iff (le y v) (or (lt y v) (eq y v))) (iff (lt y (suc v)) (or (lt y v) (eq y v))))
        (ax_mp ((iff (le y v) (lt y (suc v))) (im (iff (le y v) (or (lt y v) (eq y v))) (iff (lt y (suc v)) (or (lt y v) (eq y v)))))
          (bitr3 ((lt y (suc v)) (le y v) (or (lt y v) (eq y v))))
          (leltsuc (y v)))
        (leloe (y v)))))
  (ax_mp ((iff (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p))) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
    (ax_mp ((iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p)))) (im (iff (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p))) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))))))
      (bitr ((an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p))) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
      (andir ((lt y v) (eq y v) (sb y x p))))
    (oreq2i ((an (lt y v) (sb y x p)) (an (eq y v) (sb y x p)) (an (eq y v) (sb v x p)))
      (ax_mp ((im (eq y v) (iff (sb y x p) (sb v x p))) (iff (an (eq y v) (sb y x p)) (an (eq y v) (sb v x p))))
        (aneq2a ((eq y v) (sb y x p) (sb v x p)))
        (sbeq1 (x y v p))))))
(ax_mp ((ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
  (eex (m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
    (mpd ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
      (indlt ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) _1 v n (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))))
        (exeqd ((eq _1 n) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p)))))
          (aneqd ((eq _1 n) (lt (d0) a) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p))) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))
            (biidd ((eq _1 n) (lt (d0) a)))
            (eqseqd ((eq _1 n) (pset (pr m a)) (pset (pr m a)) (ab x (an (lt x _1) p)) (ab x (an (lt x n) p)))
              (eqsidd ((eq _1 n) (pset (pr m a))))
              (abeqd ((eq _1 n) x (an (lt x _1) p) (an (lt x n) p))
                (aneqd ((eq _1 n) (lt x _1) (lt x n) p p)
                  (lteqd ((eq _1 n) x x _1 n)
                    (eqidd ((eq _1 n) x))
                    (id ((eq _1 n))))
                  (biidd ((eq _1 n) p)))))))
        (exeqd ((eq _1 (d0)) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p)))))
          (aneqd ((eq _1 (d0)) (lt (d0) a) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p))) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))
            (biidd ((eq _1 (d0)) (lt (d0) a)))
            (eqseqd ((eq _1 (d0)) (pset (pr m a)) (pset (pr m a)) (ab x (an (lt x _1) p)) (ab x (an (lt x (d0)) p)))
              (eqsidd ((eq _1 (d0)) (pset (pr m a))))
              (abeqd ((eq _1 (d0)) x (an (lt x _1) p) (an (lt x (d0)) p))
                (aneqd ((eq _1 (d0)) (lt x _1) (lt x (d0)) p p)
                  (lteqd ((eq _1 (d0)) x x _1 (d0))
                    (eqidd ((eq _1 (d0)) x))
                    (id ((eq _1 (d0)))))
                  (biidd ((eq _1 (d0)) p)))))))
        (exeqd ((eq _1 v) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
          (aneqd ((eq _1 v) (lt (d0) a) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p))) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))
            (biidd ((eq _1 v) (lt (d0) a)))
            (eqseqd ((eq _1 v) (pset (pr m a)) (pset (pr m a)) (ab x (an (lt x _1) p)) (ab x (an (lt x v) p)))
              (eqsidd ((eq _1 v) (pset (pr m a))))
              (abeqd ((eq _1 v) x (an (lt x _1) p) (an (lt x v) p))
                (aneqd ((eq _1 v) (lt x _1) (lt x v) p p)
                  (lteqd ((eq _1 v) x x _1 v)
                    (eqidd ((eq _1 v) x))
                    (id ((eq _1 v))))
                  (biidd ((eq _1 v) p)))))))
        (exeqd ((eq _1 (suc v)) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))))
          (aneqd ((eq _1 (suc v)) (lt (d0) a) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x _1) p))) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))
            (biidd ((eq _1 (suc v)) (lt (d0) a)))
            (eqseqd ((eq _1 (suc v)) (pset (pr m a)) (pset (pr m a)) (ab x (an (lt x _1) p)) (ab x (an (lt x (suc v)) p)))
              (eqsidd ((eq _1 (suc v)) (pset (pr m a))))
              (abeqd ((eq _1 (suc v)) x (an (lt x _1) p) (an (lt x (suc v)) p))
                (aneqd ((eq _1 (suc v)) (lt x _1) (lt x (suc v)) p p)
                  (lteqd ((eq _1 (suc v)) x x _1 (suc v))
                    (eqidd ((eq _1 (suc v)) x))
                    (id ((eq _1 (suc v)))))
                  (biidd ((eq _1 (suc v)) p)))))))
        (a1i ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))))
          (ax_mp ((an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))))
            (iexe (a (d1) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p)))) (an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))))
              (aneqd ((eq a (d1)) (lt (d0) a) (lt (d0) (d1)) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))))
                (lteq2 ((d0) a (d1)))
                (eqseq1d ((eq a (d1)) (pset (pr m a)) (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))
                  (pseteqd ((eq a (d1)) (pr m a) (pr m (d1)))
                    (preq2 (m a (d1)))))))
            (ax_mp ((eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))) (an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))))
              (ax_mp ((lt (d0) (d1)) (im (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))) (an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))))))
                (ian ((lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))))
                (d0lt1 ()))
              (eqab2i ((pset (pr m (d1))) x (an (lt x (d0)) p))
                (ax_mp ((not (an (lt x (d0)) p)) (iff (el x (pset (pr m (d1)))) (an (lt x (d0)) p)))
                  (ax_mp ((not (el x (pset (pr m (d1))))) (im (not (an (lt x (d0)) p)) (iff (el x (pset (pr m (d1)))) (an (lt x (d0)) p))))
                    (binth ((el x (pset (pr m (d1)))) (an (lt x (d0)) p)))
                    (elpset1 (m x)))
                  (mt ((lt x (d0)) (an (lt x (d0)) p))
                    (anl ((lt x (d0)) p))
                    (lt02 (x))))))))
        (imp ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))))
          (casesda ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p) (im (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))))))
            (syl6ibr ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex b (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))))
              (cbvex (a b (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))) (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p)))))
                (aneqd ((eq a b) (lt (d0) a) (lt (d0) b) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))
                  (lteq2 ((d0) a b))
                  (eqseq1d ((eq a b) (pset (pr m a)) (pset (pr m b)) (ab x (an (lt x (suc v)) p)))
                    (pseteqd ((eq a b) (pr m a) (pr m b))
                      (preq2 (m a b))))))
              (eexda (a (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))) (ex b (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))))
                (syl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)))) (ex b (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))))
                  (iexe (b (mul a (suc (mul m (suc v)))) (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p)))) (an (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)))))
                    (aneqd ((eq b (mul a (suc (mul m (suc v))))) (lt (d0) b) (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p))))
                      (lteq2 ((d0) b (mul a (suc (mul m (suc v))))))
                      (eqseq1d ((eq b (mul a (suc (mul m (suc v))))) (pset (pr m b)) (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)))
                        (pseteqd ((eq b (mul a (suc (mul m (suc v))))) (pr m b) (pr m (mul a (suc (mul m (suc v))))))
                          (preq2 (m b (mul a (suc (mul m (suc v))))))))))
                  (iand ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p))))
                    (sylibr ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt (d0) a) (lt (d0) (suc (mul m (suc v))))) (lt (d0) (mul a (suc (mul m (suc v))))))
                      (mulpos (a (suc (mul m (suc v)))))
                      (iand ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) a) (lt (d0) (suc (mul m (suc v)))))
                        H1
                        (a1i ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) (suc (mul m (suc v)))))
                          (lt01S ((mul m (suc v)))))))
                    (eqrd ((pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)) (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) y)
                      (syl6bbr ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m (mul a (suc (mul m (suc v))))))) (an (lt y (suc v)) (sb y x p)) (el y (ab x (an (lt x (suc v)) p))))
                        H12
                        (bitrd ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m (mul a (suc (mul m (suc v))))))) (or (el y (pset (pr m a))) (eq y v)) (an (lt y (suc v)) (sb y x p)))
                          (psetS ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) y m v a z)
                            (anld ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
                              H13)
                            H1
                            (sylib ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))) (al z (im (an (lt (d0) z) (le z v)) (dvd z m))))
                              (cbval (x z (im (an (lt (d0) x) (le x v)) (dvd x m)) (im (an (lt (d0) z) (le z v)) (dvd z m)))
                                (imeqd ((eq x z) (an (lt (d0) x) (le x v)) (an (lt (d0) z) (le z v)) (dvd x m) (dvd z m))
                                  (aneqd ((eq x z) (lt (d0) x) (lt (d0) z) (le x v) (le z v))
                                    (lteq2 ((d0) x z))
                                    (leeq1 (x z v)))
                                  (dvdeq1 (x z m))))
                              (mpd ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))))
                                (anrd ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
                                  H13)
                                (rsyl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (le v n) (im (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (al x (im (an (lt (d0) x) (le x v)) (dvd x m)))))
                                  (syl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (le (suc v) n) (le v n))
                                    (ax_mp ((le v (suc v)) (im (le (suc v) n) (le v n)))
                                      (letr (v (suc v) n))
                                      (lesucid (v)))
                                    (:conv (im (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (le (suc v) n))
                                      (im
                                        (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
                                        (:sym (:unfold lt (v n) ()
                                          (le (suc v) n))))
                                      (anllr ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n) (sb v x p) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))))
                                  (alimd (x (le v n) (im (an (lt (d0) x) (le x n)) (dvd x m)) (im (an (lt (d0) x) (le x v)) (dvd x m)))
                                    (imim1d ((le v n) (an (lt (d0) x) (le x v)) (an (lt (d0) x) (le x n)) (dvd x m))
                                      (anim2d ((le v n) (lt (d0) x) (le x v) (le x n))
                                        (com12 ((le x v) (le v n) (le x n))
                                          (letr (x v n))))))))))
                          (bitr4d ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (or (el y (pset (pr m a))) (eq y v)) (or (an (lt y v) (sb y x p)) (eq y v)) (an (lt y (suc v)) (sb y x p)))
                            (oreq1d ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m a))) (an (lt y v) (sb y x p)) (eq y v))
                              (syl6bb ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m a))) (el y (ab x (an (lt x v) p))) (an (lt y v) (sb y x p)))
                                H22
                                (eleq2d ((pset (pr m a)) (ab x (an (lt x v) p)) (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) y)
                                  (anrr ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))))
                            (syl5bb ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))) (or (an (lt y v) (sb y x p)) (eq y v)))
                              H23
                              (oreq2d ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)) (eq y v))
                                (syl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (sb v x p) (iff (an (eq y v) (sb v x p)) (eq y v)))
                                  (bian2 ((eq y v) (sb v x p)))
                                  (anlr ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))))))))))))))
            (bi2d ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))
              (exeqd ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
                (aneq2d ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))
                  (eqseq2d ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (pset (pr m a)) (ab x (an (lt x (suc v)) p)) (ab x (an (lt x v) p)))
                    (eqrd ((ab x (an (lt x (suc v)) p)) (ab x (an (lt x v) p)) (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) y)
                      (syl5bb ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (el y (ab x (an (lt x (suc v)) p))) (an (lt y (suc v)) (sb y x p)) (el y (ab x (an (lt x v) p))))
                        H12
                        (syl6bbr ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (an (lt y (suc v)) (sb y x p)) (an (lt y v) (sb y x p)) (el y (ab x (an (lt x v) p))))
                          H22
                          (syl5bb ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))) (an (lt y v) (sb y x p)))
                            H23
                            (syl ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (not (an (eq y v) (sb v x p))) (iff (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))) (an (lt y v) (sb y x p))))
                              (bior2 ((an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))))
                              (anwr ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p)) (not (an (eq y v) (sb v x p))))
                                (ax_mp ((im (an (eq y v) (sb v x p)) (sb v x p)) (im (not (sb v x p)) (not (an (eq y v) (sb v x p)))))
                                  (con3 ((an (eq y v) (sb v x p)) (sb v x p)))
                                  (anr ((eq y v) (sb v x p)))))))))))))))))
      (eexda (a (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p)))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
        (iexde (b (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (pr m a) (eqs (pset b) (ab x (an (lt x n) p))))
          (eqstrd ((pset b) (pset (pr m a)) (ab x (an (lt x n) p)) (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (eq b (pr m a))))
            (anwr ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (eq b (pr m a)) (eqs (pset b) (pset (pr m a))))
              (pseteq (b (pr m a))))
            (anwl ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (eq b (pr m a)) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))
              (anrr ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p)))))))))))
  (lcmex (m n x)))))))))))))))))))))))))))

(local theorem expset ((A set ()) (a nat)) ()
  (iff (finite A) (ex a (eqs (pset a) A)))
((n nat) (x nat) (y nat))
(:let H1 (sylib ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (el x (pset (pr (fst a) (snd a)))) (an (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
  (elpset ((fst a) x (snd a) y))
  (mpbird ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (el x A) (el x (pset (pr (fst a) (snd a)))))
    (eleq2d ((pset (pr (fst a) (snd a))) A (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) x)
      (eqstrd ((pset (pr (fst a) (snd a))) (pset a) A (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)))
        (a1i ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (eqs (pset (pr (fst a) (snd a))) (pset a)))
          (ax_mp ((eq (pr (fst a) (snd a)) a) (eqs (pset (pr (fst a) (snd a))) (pset a)))
            (pseteq ((pr (fst a) (snd a)) a))
            (fstsnd (a))))
        (anll ((eqs (pset a) A) (eq n (snd a)) (el x A)))))
    (anr ((an (eqs (pset a) A) (eq n (snd a))) (el x A)))))
(:conv (iff (finite A) (ex a (eqs (pset a) A)))
  (iff
    (:unfold finite (A) (n x)
      (ex n (al x (im (el x A) (lt x n)))))
    (ex a (eqs (pset a) A)))
  (ibii ((ex n (al x (im (el x A) (lt x n)))) (ex a (eqs (pset a) A)))
    (eex (n (al x (im (el x A) (lt x n))) (ex a (eqs (pset a) A)))
      (mpbii ((al x (im (el x A) (lt x n))) (ex a (eqs (pset a) (ab y (an (lt y n) (el y A))))) (ex a (eqs (pset a) A)))
        (psetsep (a n y (el y A)))
        (exeqd ((al x (im (el x A) (lt x n))) a (eqs (pset a) (ab y (an (lt y n) (el y A)))) (eqs (pset a) A))
          (eqseq2d ((al x (im (el x A) (lt x n))) (pset a) (ab y (an (lt y n) (el y A))) A)
            (eqab1d (A (al x (im (el x A) (lt x n))) y (an (lt y n) (el y A)))
              (syl ((al x (im (el x A) (lt x n))) (im (el y A) (lt y n)) (iff (an (lt y n) (el y A)) (el y A)))
                (bian1a ((lt y n) (el y A)))
                (eale (x y (im (el x A) (lt x n)) (im (el y A) (lt y n)))
                  (imeqd ((eq x y) (el x A) (el y A) (lt x n) (lt y n))
                    (eleq1 (A x y))
                    (lteq1 (x y n))))))))))
    (eex (a (eqs (pset a) A) (ex n (al x (im (el x A) (lt x n)))))
      (iexde (n (eqs (pset a) A) (snd a) (al x (im (el x A) (lt x n))))
        (ialda (x (an (eqs (pset a) A) (eq n (snd a))) (el x A) (lt x n))
          (:conv (im (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (lt x n))
            (im
              (an (an (eqs (pset a) A) (eq n (snd a))) (el x A))
              (:unfold lt (x n) ()
                (le (suc x) n)))
            (letrd ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (suc x) (suc (mul (fst a) (suc x))) n)
              (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (le (suc x) (mul (fst a) (suc x))) (le (suc x) (suc (mul (fst a) (suc x)))))
                (mpi ((le (suc x) (mul (fst a) (suc x))) (le (mul (fst a) (suc x)) (suc (mul (fst a) (suc x)))) (le (suc x) (suc (mul (fst a) (suc x)))))
                  (lesucid ((mul (fst a) (suc x))))
                  (letr ((suc x) (mul (fst a) (suc x)) (suc (mul (fst a) (suc x))))))
                (sylib ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (le (mul (d1) (suc x)) (mul (fst a) (suc x))) (le (suc x) (mul (fst a) (suc x))))
                  (ax_mp ((eq (mul (d1) (suc x)) (suc x)) (iff (le (mul (d1) (suc x)) (mul (fst a) (suc x))) (le (suc x) (mul (fst a) (suc x)))))
                    (leeq1 ((mul (d1) (suc x)) (suc x) (mul (fst a) (suc x))))
                    (mul11 ((suc x))))
                  (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (le (d1) (fst a)) (le (mul (d1) (suc x)) (mul (fst a) (suc x))))
                    (lemul1a ((d1) (fst a) (suc x)))
                    (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (an (le (d1) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))) (le (d1) (fst a)))
                      (an3l ((le (d1) (fst a)) (lt (d0) (snd a)) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a)))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
                      (:conv (im (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (an (le (d1) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
                        (im
                          (an (an (eqs (pset a) A) (eq n (snd a))) (el x A))
                          (an
                            (an
                              (an
                                (:sym (:unfold lt ((d0) (fst a)) ()
                                  (le
                                    (:sym (:unfold d1 () ()
                                      (suc (d0))))
                                    (fst a))))
                                (lt (d0) (snd a)))
                              (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a)))))
                            (dvd (suc (mul (fst a) (suc x))) (snd a))))
                        H1)))))
              (letrd ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (suc (mul (fst a) (suc x))) (snd a) n)
                (dvdle ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (suc (mul (fst a) (suc x))) (snd a))
                  (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (lt (d0) (snd a)) (ne (snd a) (d0)))
                    (ltner ((d0) (snd a)))
                    (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))) (lt (d0) (snd a)))
                      (anllr ((lt (d0) (fst a)) (lt (d0) (snd a)) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a)))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
                      H1))
                  (anrd ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a)))
                    H1))
                (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (eq n (snd a)) (le (snd a) n))
                  (eqler (n (snd a)))
                  (anlr ((eqs (pset a) A) (eq n (snd a)) (el x A))))))))))))))

(local theorem psetfn ((a nat) (x nat) (p wff (x)) (v nat (x))) ()
  (im (finite (ab x p)) (ex a (al x (im p (eq (app (pset a) x) v)))))
((y nat))
(rsyl ((finite (ab x p)) (ex a (eqs (pset a) (res (lam y (sbn y x v)) (ab x p)))) (ex a (al x (im p (eq (app (pset a) x) v)))))
  (sylib ((finite (ab x p)) (finite (res (lam y (sbn y x v)) (ab x p))) (ex a (eqs (pset a) (res (lam y (sbn y x v)) (ab x p)))))
    (expset ((res (lam y (sbn y x v)) (ab x p)) a))
    (finlam ((ab x p) y (sbn y x v))))
  (eximi (a (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) (al x (im p (eq (app (pset a) x) v))))
    (ialdh (x (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) (im p (eq (app (pset a) x) v)))
      (nfeqs (x (pset a) (res (lam y (sbn y x v)) (ab x p)))
        (nfsv ((pset a) x))
        (nfres (x (lam y (sbn y x v)) (ab x p))
          (nflam (x y (sbn y x v))
            (nfsbn1 (x y v)))
          (nfab1 (x p))))
      (exp ((eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p (eq (app (pset a) x) v))
        (eqtrd ((an (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p) (app (pset a) x) (app (res (lam y (sbn y x v)) (ab x p)) x) v)
          (anwl ((eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p (eq (app (pset a) x) (app (res (lam y (sbn y x v)) (ab x p)) x)))
            (appeq1 ((pset a) (res (lam y (sbn y x v)) (ab x p)) x)))
          (syl6eq ((an (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p) (app (res (lam y (sbn y x v)) (ab x p)) x) (app (lam y (sbn y x v)) x) v)
            (ax_mp ((eq (app (lam x v) x) v) (eq (app (lam y (sbn y x v)) x) v))
              (ax_mp ((eq (app (lam x v) x) (app (lam y (sbn y x v)) x)) (im (eq (app (lam x v) x) v) (eq (app (lam y (sbn y x v)) x) v)))
                (eqtr3 ((app (lam y (sbn y x v)) x) (app (lam x v) x) v))
                (ax_mp ((eqs (lam x v) (lam y (sbn y x v))) (eq (app (lam x v) x) (app (lam y (sbn y x v)) x)))
                  (appeq1 ((lam x v) (lam y (sbn y x v)) x))
                  (cbvlams (x y v))))
              (applam (x v)))
            (anwr ((eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p (eq (app (res (lam y (sbn y x v)) (ab x p)) x) (app (lam y (sbn y x v)) x)))
              (sylbir (p (el x (ab x p)) (eq (app (res (lam y (sbn y x v)) (ab x p)) x) (app (lam y (sbn y x v)) x)))
                (abid (x p))
                (resapp ((ab x p) (lam y (sbn y x v)) x)))))))))))

(def rec ((z nat ()) (S set ()) (n nat ())) (nat ())
((a nat) (i nat) (v nat))
(the (ab v (ex a (an (an (eq (app (pset a) (d0)) z) (eq (app (pset a) n) v)) (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))))))

(local theorem receqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Sh (im _G (eqs _S1 _S2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (rec _z1 _S1 _n1) (rec _z2 _S2 _n2)))
((a nat) (i nat) (v nat))
(:conv (im _G (eq (rec _z1 _S1 _n1) (rec _z2 _S2 _n2)))
  (im
    _G
    (eq
      (:unfold rec (_z1 _S1 _n1) (a i v)
        (the (ab v (ex a (an (an (eq (app (pset a) (d0)) _z1) (eq (app (pset a) _n1) v)) (al i (im (lt i _n1) (eq (app (pset a) (suc i)) (app _S1 (app (pset a) i))))))))))
      (:unfold rec (_z2 _S2 _n2) (a i v)
        (the (ab v (ex a (an (an (eq (app (pset a) (d0)) _z2) (eq (app (pset a) _n2) v)) (al i (im (lt i _n2) (eq (app (pset a) (suc i)) (app _S2 (app (pset a) i))))))))))))
  (theeqd (_G (ab v (ex a (an (an (eq (app (pset a) (d0)) _z1) (eq (app (pset a) _n1) v)) (al i (im (lt i _n1) (eq (app (pset a) (suc i)) (app _S1 (app (pset a) i)))))))) (ab v (ex a (an (an (eq (app (pset a) (d0)) _z2) (eq (app (pset a) _n2) v)) (al i (im (lt i _n2) (eq (app (pset a) (suc i)) (app _S2 (app (pset a) i)))))))))
    (abeqd (_G v (ex a (an (an (eq (app (pset a) (d0)) _z1) (eq (app (pset a) _n1) v)) (al i (im (lt i _n1) (eq (app (pset a) (suc i)) (app _S1 (app (pset a) i))))))) (ex a (an (an (eq (app (pset a) (d0)) _z2) (eq (app (pset a) _n2) v)) (al i (im (lt i _n2) (eq (app (pset a) (suc i)) (app _S2 (app (pset a) i))))))))
      (exeqd (_G a (an (an (eq (app (pset a) (d0)) _z1) (eq (app (pset a) _n1) v)) (al i (im (lt i _n1) (eq (app (pset a) (suc i)) (app _S1 (app (pset a) i)))))) (an (an (eq (app (pset a) (d0)) _z2) (eq (app (pset a) _n2) v)) (al i (im (lt i _n2) (eq (app (pset a) (suc i)) (app _S2 (app (pset a) i)))))))
        (aneqd (_G (an (eq (app (pset a) (d0)) _z1) (eq (app (pset a) _n1) v)) (an (eq (app (pset a) (d0)) _z2) (eq (app (pset a) _n2) v)) (al i (im (lt i _n1) (eq (app (pset a) (suc i)) (app _S1 (app (pset a) i))))) (al i (im (lt i _n2) (eq (app (pset a) (suc i)) (app _S2 (app (pset a) i))))))
          (aneqd (_G (eq (app (pset a) (d0)) _z1) (eq (app (pset a) (d0)) _z2) (eq (app (pset a) _n1) v) (eq (app (pset a) _n2) v))
            (eqeqd (_G (app (pset a) (d0)) (app (pset a) (d0)) _z1 _z2)
              (eqidd (_G (app (pset a) (d0))))
              _zh)
            (eqeqd (_G (app (pset a) _n1) (app (pset a) _n2) v v)
              (appeqd (_G (pset a) (pset a) _n1 _n2)
                (eqsidd (_G (pset a)))
                _nh)
              (eqidd (_G v))))
          (aleqd (_G i (im (lt i _n1) (eq (app (pset a) (suc i)) (app _S1 (app (pset a) i)))) (im (lt i _n2) (eq (app (pset a) (suc i)) (app _S2 (app (pset a) i)))))
            (imeqd (_G (lt i _n1) (lt i _n2) (eq (app (pset a) (suc i)) (app _S1 (app (pset a) i))) (eq (app (pset a) (suc i)) (app _S2 (app (pset a) i))))
              (lteqd (_G i i _n1 _n2)
                (eqidd (_G i))
                _nh)
              (eqeqd (_G (app (pset a) (suc i)) (app (pset a) (suc i)) (app _S1 (app (pset a) i)) (app _S2 (app (pset a) i)))
                (eqidd (_G (app (pset a) (suc i))))
                (appeqd (_G _S1 _S2 (app (pset a) i) (app (pset a) i))
                  _Sh
                  (eqidd (_G (app (pset a) i)))))))))))))

(local theorem receq ((_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _z1 _z2) (im (eqs _S1 _S2) (im (eq _n1 _n2) (eq (rec _z1 _S1 _n1) (rec _z2 _S2 _n2)))))
()
(exp ((eq _z1 _z2) (eqs _S1 _S2) (im (eq _n1 _n2) (eq (rec _z1 _S1 _n1) (rec _z2 _S2 _n2))))
  (exp ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq (rec _z1 _S1 _n1) (rec _z2 _S2 _n2)))
    (receqd ((an (an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)) _z1 _z2 _S1 _S2 _n1 _n2)
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq _z1 _z2))
        (anl ((eq _z1 _z2) (eqs _S1 _S2))))
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eqs _S1 _S2))
        (anr ((eq _z1 _z2) (eqs _S1 _S2))))
      (anr ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)))))))

(local theorem receq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (rec _z1 S n) (rec _z2 S n)))
()
(receqd (_G _z1 _z2 S S n n)
  _h
  (eqsidd (_G S))
  (eqidd (_G n))))

(local theorem receq1 ((_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq _z1 _z2) (eq (rec _z1 S n) (rec _z2 S n)))
()
(receq1d ((eq _z1 _z2) _z1 _z2 S n)
  (id ((eq _z1 _z2)))))

(local theorem receq2d ((_G wff ()) (z nat ()) (_S1 set ()) (_S2 set ()) (n nat ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eq (rec z _S1 n) (rec z _S2 n)))
()
(receqd (_G z z _S1 _S2 n n)
  (eqidd (_G z))
  _h
  (eqidd (_G n))))

(local theorem receq2 ((z nat ()) (_S1 set ()) (_S2 set ()) (n nat ())) ()
  (im (eqs _S1 _S2) (eq (rec z _S1 n) (rec z _S2 n)))
()
(receq2d ((eqs _S1 _S2) z _S1 _S2 n)
  (id ((eqs _S1 _S2)))))

(local theorem receq3d ((_G wff ()) (z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (rec z S _n1) (rec z S _n2)))
()
(receqd (_G z z S S _n1 _n2)
  (eqidd (_G z))
  (eqsidd (_G S))
  _h))

(local theorem receq3 ((z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (rec z S _n1) (rec z S _n2)))
()
(receq3d ((eq _n1 _n2) z S _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem reclem ((G wff ()) (S set ()) (a nat ()) (n nat ()) (v nat ()) (z nat ()) (i nat))
  ((h1 (im G (eq (app (pset a) (d0)) z)))
   (h2 (im G (eq (app (pset a) n) v)))
   (h3 (im G (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))))
  (im G (eq (rec z S n) v))
((_1 nat) (b nat) (u nat) (x1 nat))
(:let H1 (id ((eq _1 n)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x1)))
(:let H4 (id ((eq _1 (suc x1))))
(:let H5 (anlr ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt x1 n) (eq (app (pset b) x1) (app (pset a) x1))))
(:let H6 (lteq1 (i x1 n))
(:let H7 (suceq (i x1))
(:let H8 (pseteq (b a))
(:let H9 (anwr ((an G (eq u v)) (eq b a) (eqs (pset b) (pset a)))
  H8)
(:conv (im G (eq (rec z S n) v))
  (im
    G
    (eq
      (:unfold rec (z S n) (b i u)
        (the (ab u (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))))
      v))
  (eqtheabd (G v u (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
    (ibid (G (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (eq u v))
      (eexda (b G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq u v))
        (eqtr3d ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) u (app (pset b) n) v)
          (anwr (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset b) n) u))
            (anlr ((eq (app (pset b) (d0)) z) (eq (app (pset b) n) u) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
          (eqtrd ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (app (pset b) n) (app (pset a) n) v)
            (indlt ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) _1 x1 n (eq (app (pset b) _1) (app (pset a) _1)) (eq (app (pset b) (d0)) (app (pset a) (d0))) (eq (app (pset b) n) (app (pset a) n)) (eq (app (pset b) x1) (app (pset a) x1)) (eq (app (pset b) (suc x1)) (app (pset a) (suc x1))))
              (eqeqd ((eq _1 n) (app (pset b) _1) (app (pset b) n) (app (pset a) _1) (app (pset a) n))
                (appeqd ((eq _1 n) (pset b) (pset b) _1 n)
                  (eqsidd ((eq _1 n) (pset b)))
                  H1)
                (appeqd ((eq _1 n) (pset a) (pset a) _1 n)
                  (eqsidd ((eq _1 n) (pset a)))
                  H1))
              (eqeqd ((eq _1 (d0)) (app (pset b) _1) (app (pset b) (d0)) (app (pset a) _1) (app (pset a) (d0)))
                (appeqd ((eq _1 (d0)) (pset b) (pset b) _1 (d0))
                  (eqsidd ((eq _1 (d0)) (pset b)))
                  H2)
                (appeqd ((eq _1 (d0)) (pset a) (pset a) _1 (d0))
                  (eqsidd ((eq _1 (d0)) (pset a)))
                  H2))
              (eqeqd ((eq _1 x1) (app (pset b) _1) (app (pset b) x1) (app (pset a) _1) (app (pset a) x1))
                (appeqd ((eq _1 x1) (pset b) (pset b) _1 x1)
                  (eqsidd ((eq _1 x1) (pset b)))
                  H3)
                (appeqd ((eq _1 x1) (pset a) (pset a) _1 x1)
                  (eqsidd ((eq _1 x1) (pset a)))
                  H3))
              (eqeqd ((eq _1 (suc x1)) (app (pset b) _1) (app (pset b) (suc x1)) (app (pset a) _1) (app (pset a) (suc x1)))
                (appeqd ((eq _1 (suc x1)) (pset b) (pset b) _1 (suc x1))
                  (eqsidd ((eq _1 (suc x1)) (pset b)))
                  H4)
                (appeqd ((eq _1 (suc x1)) (pset a) (pset a) _1 (suc x1))
                  (eqsidd ((eq _1 (suc x1)) (pset a)))
                  H4))
              (eqtr4d ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (app (pset b) (d0)) z (app (pset a) (d0)))
                (anwr (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset b) (d0)) z))
                  (anll ((eq (app (pset b) (d0)) z) (eq (app (pset b) n) u) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
                (anwl (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset a) (d0)) z))
                  h1))
              (eqtrd ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt x1 n)) (eq (app (pset b) x1) (app (pset a) x1))) (app (pset b) (suc x1)) (app S (app (pset b) x1)) (app (pset a) (suc x1)))
                (mpd ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt x1 n)) (eq (app (pset b) x1) (app (pset a) x1))) (lt x1 n) (eq (app (pset b) (suc x1)) (app S (app (pset b) x1))))
                  H5
                  (rsyl ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt x1 n)) (eq (app (pset b) x1) (app (pset a) x1))) (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (im (lt x1 n) (eq (app (pset b) (suc x1)) (app S (app (pset b) x1)))))
                    (anllr (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (lt x1 n) (eq (app (pset b) x1) (app (pset a) x1))))
                    (anwr ((an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))) (im (lt x1 n) (eq (app (pset b) (suc x1)) (app S (app (pset b) x1)))))
                      (eale (i x1 (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))) (im (lt x1 n) (eq (app (pset b) (suc x1)) (app S (app (pset b) x1)))))
                        (imeqd ((eq i x1) (lt i n) (lt x1 n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))) (eq (app (pset b) (suc x1)) (app S (app (pset b) x1))))
                          H6
                          (eqeqd ((eq i x1) (app (pset b) (suc i)) (app (pset b) (suc x1)) (app S (app (pset b) i)) (app S (app (pset b) x1)))
                            (appeq2d ((eq i x1) (pset b) (suc i) (suc x1))
                              H7)
                            (appeq2d ((eq i x1) S (app (pset b) i) (app (pset b) x1))
                              (appeq2 ((pset b) i x1)))))))))
                (eqtr4d ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt x1 n)) (eq (app (pset b) x1) (app (pset a) x1))) (app S (app (pset b) x1)) (app S (app (pset a) x1)) (app (pset a) (suc x1)))
                  (anwr ((an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt x1 n)) (eq (app (pset b) x1) (app (pset a) x1)) (eq (app S (app (pset b) x1)) (app S (app (pset a) x1))))
                    (appeq2 (S (app (pset b) x1) (app (pset a) x1))))
                  (mpd ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt x1 n)) (eq (app (pset b) x1) (app (pset a) x1))) (lt x1 n) (eq (app (pset a) (suc x1)) (app S (app (pset a) x1))))
                    H5
                    (anw3l (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (lt x1 n) (eq (app (pset b) x1) (app (pset a) x1)) (im (lt x1 n) (eq (app (pset a) (suc x1)) (app S (app (pset a) x1)))))
                      (rsyl (G (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))) (im (lt x1 n) (eq (app (pset a) (suc x1)) (app S (app (pset a) x1)))))
                        h3
                        (eale (i x1 (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))) (im (lt x1 n) (eq (app (pset a) (suc x1)) (app S (app (pset a) x1)))))
                          (imeqd ((eq i x1) (lt i n) (lt x1 n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))) (eq (app (pset a) (suc x1)) (app S (app (pset a) x1))))
                            H6
                            (eqeqd ((eq i x1) (app (pset a) (suc i)) (app (pset a) (suc x1)) (app S (app (pset a) i)) (app S (app (pset a) x1)))
                              (appeq2d ((eq i x1) (pset a) (suc i) (suc x1))
                                H7)
                              (appeq2d ((eq i x1) S (app (pset a) i) (app (pset a) x1))
                                (appeq2 ((pset a) i x1))))))))))))
            (anwl (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset a) n) v))
              h2))))
      (exp (G (eq u v) (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
        (iexde (b (an G (eq u v)) a (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))))
          (iand ((an (an G (eq u v)) (eq b a)) (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))
            (iand ((an (an G (eq u v)) (eq b a)) (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u))
              (eqtrd ((an (an G (eq u v)) (eq b a)) (app (pset b) (d0)) (app (pset a) (d0)) z)
                (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) (d0))
                  H9)
                (anwll (G (eq u v) (eq b a) (eq (app (pset a) (d0)) z))
                  h1))
              (eqtrd ((an (an G (eq u v)) (eq b a)) (app (pset b) n) (app (pset a) n) u)
                (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) n)
                  H9)
                (eqtr4d ((an (an G (eq u v)) (eq b a)) (app (pset a) n) v u)
                  (anwll (G (eq u v) (eq b a) (eq (app (pset a) n) v))
                    h2)
                  (anlr (G (eq u v) (eq b a))))))
            (mpbird ((an (an G (eq u v)) (eq b a)) (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))
              (aleqd ((an (an G (eq u v)) (eq b a)) i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))) (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
                (imeq2d ((an (an G (eq u v)) (eq b a)) (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))
                  (eqeqd ((an (an G (eq u v)) (eq b a)) (app (pset b) (suc i)) (app (pset a) (suc i)) (app S (app (pset b) i)) (app S (app (pset a) i)))
                    (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) (suc i))
                      H9)
                    (appeq2d ((an (an G (eq u v)) (eq b a)) S (app (pset b) i) (app (pset a) i))
                      (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) i)
                        H9)))))
              (anwll (G (eq u v) (eq b a) (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))
                h3))))))))))))))))))

(theorem rec0 ((z nat ()) (S set ())) ()
  (eq (rec z S (d0)) z)
((a nat) (i nat) (x nat))
(:let H1 (mpi ((al x (im (eq x (d0)) (eq (app (pset a) x) z))) (eq (d0) (d0)) (eq (app (pset a) (d0)) z))
  (eqid ((d0)))
  (eale (x (d0) (im (eq x (d0)) (eq (app (pset a) x) z)) (im (eq (d0) (d0)) (eq (app (pset a) (d0)) z)))
    (imeqd ((eq x (d0)) (eq x (d0)) (eq (d0) (d0)) (eq (app (pset a) x) z) (eq (app (pset a) (d0)) z))
      (eqeq1 (x (d0) (d0)))
      (eqeq1d ((eq x (d0)) (app (pset a) x) (app (pset a) (d0)) z)
        (appeq2 ((pset a) x (d0)))))))
(ax_mp ((ex a (al x (im (eq x (d0)) (eq (app (pset a) x) z)))) (eq (rec z S (d0)) z))
  (eex (a (al x (im (eq x (d0)) (eq (app (pset a) x) z))) (eq (rec z S (d0)) z))
    (reclem ((al x (im (eq x (d0)) (eq (app (pset a) x) z))) S a (d0) z z i)
      H1
      H1
      (a1i ((al x (im (eq x (d0)) (eq (app (pset a) x) z))) (al i (im (lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))
        (ax_gen (i (im (lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
          (ax_mp ((not (lt i (d0))) (im (lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
            (absurd ((lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
            (lt02 (i)))))))
  (ax_mp ((finite (ab x (eq x (d0)))) (ex a (al x (im (eq x (d0)) (eq (app (pset a) x) z)))))
    (psetfn (a x (eq x (d0)) z))
    (snfin ((d0) x))))))

(theorem recS ((z nat ()) (S set ()) (n nat ())) ()
  (eq (rec z S (suc n)) (app S (rec z S n)))
((a nat) (k nat) (m nat) (x nat) (y nat))
(:let H1 (ifneg ((eq x (suc k)) (app S (rec z S k)) (rec z S x)))
(:let H2 (anr ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)))
(:let H3 (anlr ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le y k)))
(:let H4 (mpd ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (rec z S y) (app (pset a) y)))
  H3
  (anwr ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k) (im (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (rec z S y) (app (pset a) y))))
    (ealde ((eq (rec z S y) (app (pset a) y)) x (le y k) y (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))
      (syl6 ((an (le y k) (eq x y)) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) y) (rec z S y)) (eq (rec z S y) (app (pset a) y)))
        (eqcom ((app (pset a) y) (rec z S y)))
        (bi1d ((an (le y k) (eq x y)) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) y) (rec z S y)))
          (bitrd ((an (le y k) (eq x y)) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) y) (rec z S y)))
            (syl ((an (le y k) (eq x y)) (le x (suc k)) (iff (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))
              (biim1 ((le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))
              (mpbird ((an (le y k) (eq x y)) (le y (suc k)) (le x (suc k)))
                (anwr ((le y k) (eq x y) (iff (le x (suc k)) (le y (suc k))))
                  (leeq1 (x y (suc k))))
                (letrd ((an (le y k) (eq x y)) y k (suc k))
                  (anl ((le y k) (eq x y)))
                  (a1i ((an (le y k) (eq x y)) (le k (suc k)))
                    (lesucid (k))))))
            (eqeqd ((an (le y k) (eq x y)) (app (pset a) x) (app (pset a) y) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S y))
              (anwr ((le y k) (eq x y) (eq (app (pset a) x) (app (pset a) y)))
                (appeq2 ((pset a) x y)))
              (eqtrd ((an (le y k) (eq x y)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x) (rec z S y))
                (syl ((an (le y k) (eq x y)) (not (eq x (suc k))) (eq (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x)))
                  H1
                  (syl ((an (le y k) (eq x y)) (lt x (suc k)) (not (eq x (suc k))))
                    (:conv (im (lt x (suc k)) (not (eq x (suc k))))
                      (im
                        (lt x (suc k))
                        (:sym (:unfold ne (x (suc k)) ()
                          (not (eq x (suc k))))))
                      (ltne (x (suc k))))
                    (sylib ((an (le y k) (eq x y)) (le x k) (lt x (suc k)))
                      (leltsuc (x k))
                      (imp ((le y k) (eq x y) (le x k))
                        (syl5ibrcom ((le y k) (le x k) (eq x y) (le y k))
                          (leeq1 (x y k))
                          (id ((le y k))))))))
                (anwr ((le y k) (eq x y) (eq (rec z S x) (rec z S y)))
                  (receq3 (z S x y)))))))))))
(trud ((eq (rec z S (suc n)) (app S (rec z S n))))
  (indstr ((tru) m k n (eq (rec z S (suc m)) (app S (rec z S m))) (eq (rec z S (suc n)) (app S (rec z S n))) (eq (rec z S (suc k)) (app S (rec z S k))))
    (eqeqd ((eq m n) (rec z S (suc m)) (rec z S (suc n)) (app S (rec z S m)) (app S (rec z S n)))
      (receq3d ((eq m n) z S (suc m) (suc n))
        (suceq (m n)))
      (appeq2d ((eq m n) S (rec z S m) (rec z S n))
        (receq3 (z S m n))))
    (eqeqd ((eq m k) (rec z S (suc m)) (rec z S (suc k)) (app S (rec z S m)) (app S (rec z S k)))
      (receq3d ((eq m k) z S (suc m) (suc k))
        (suceq (m k)))
      (appeq2d ((eq m k) S (rec z S m) (rec z S k))
        (receq3 (z S m k))))
    (anwr ((tru) (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (eq (rec z S (suc k)) (app S (rec z S k))))
      (mpi ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (ex a (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (eq (rec z S (suc k)) (app S (rec z S k))))
        (ax_mp ((finite (ab x (le x (suc k)))) (ex a (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))))
          (psetfn (a x (le x (suc k)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))
          (lefin ((suc k) x)))
        (eexda (a (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (rec z S (suc k)) (app S (rec z S k))))
          (reclem ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) S a (suc k) (app S (rec z S k)) z y)
            (anwr ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (app (pset a) (d0)) z))
              (syl6eq ((al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (app (pset a) (d0)) (rec z S (d0)) z)
                (rec0 (z S))
                (mpi ((al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le (d0) (suc k)) (eq (app (pset a) (d0)) (rec z S (d0))))
                  (le01 ((suc k)))
                  (eale (x (d0) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (im (le (d0) (suc k)) (eq (app (pset a) (d0)) (rec z S (d0)))))
                    (imeqd ((eq x (d0)) (le x (suc k)) (le (d0) (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) (d0)) (rec z S (d0))))
                      (leeq1 (x (d0) (suc k)))
                      (eqeqd ((eq x (d0)) (app (pset a) x) (app (pset a) (d0)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S (d0)))
                        (appeq2 ((pset a) x (d0)))
                        (eqtrd ((eq x (d0)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x) (rec z S (d0)))
                          (syl ((eq x (d0)) (not (eq x (suc k))) (eq (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x)))
                            H1
                            (ax_mp ((im (eq x (suc k)) (not (eq x (d0)))) (im (eq x (d0)) (not (eq x (suc k)))))
                              (con2 ((eq x (suc k)) (eq x (d0))))
                              (:conv (im (eq x (suc k)) (not (eq x (d0))))
                                (im
                                  (eq x (suc k))
                                  (:sym (:unfold ne (x (d0)) ()
                                    (not (eq x (d0))))))
                                (sucne0 (x k)))))
                          (receq3 (z S x (d0))))))))))
            (anwr ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (app (pset a) (suc k)) (app S (rec z S k))))
              (mpi ((al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le (suc k) (suc k)) (eq (app (pset a) (suc k)) (app S (rec z S k))))
                (leid ((suc k)))
                (eale (x (suc k) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (im (le (suc k) (suc k)) (eq (app (pset a) (suc k)) (app S (rec z S k)))))
                  (imeqd ((eq x (suc k)) (le x (suc k)) (le (suc k) (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) (suc k)) (app S (rec z S k))))
                    (leeq1 (x (suc k) (suc k)))
                    (eqeqd ((eq x (suc k)) (app (pset a) x) (app (pset a) (suc k)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (app S (rec z S k)))
                      (appeq2 ((pset a) x (suc k)))
                      (ifpos ((eq x (suc k)) (app S (rec z S k)) (rec z S x))))))))
            (iald (y (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (im (lt y (suc k)) (eq (app (pset a) (suc y)) (app S (app (pset a) y)))))
              (syl5bir ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (lt y (suc k)) (le y k) (eq (app (pset a) (suc y)) (app S (app (pset a) y))))
                (leltsuc (y k))
                (exp ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k) (eq (app (pset a) (suc y)) (app S (app (pset a) y))))
                  (eqtrd ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (app (pset a) y)))
                    (mpd ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (le (suc y) (suc k)) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                      (sylib ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (le y k) (le (suc y) (suc k)))
                        (lesuc (y k))
                        H2)
                      (rsyl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (im (le (suc y) (suc k)) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))))))
                        H3
                        (eale (x (suc y) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (im (le (suc y) (suc k)) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))))))
                          (imeqd ((eq x (suc y)) (le x (suc k)) (le (suc y) (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                            (leeq1 (x (suc y) (suc k)))
                            (eqeqd ((eq x (suc y)) (app (pset a) x) (app (pset a) (suc y)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))))
                              (appeq2 ((pset a) x (suc y)))
                              (ifeqd ((eq x (suc y)) (eq x (suc k)) (eq y k) (app S (rec z S k)) (app S (rec z S k)) (rec z S x) (rec z S (suc y)))
                                (syl6bb ((eq x (suc y)) (eq x (suc k)) (eq (suc y) (suc k)) (eq y k))
                                  (peano2 (y k))
                                  (eqeq1 (x (suc y) (suc k))))
                                (eqidd ((eq x (suc y)) (app S (rec z S k))))
                                (receq3 (z S x (suc y)))))))))
                    (casesda ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (app (pset a) y))))
                      (eqtr4d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (rec z S k)) (app S (app (pset a) y)))
                        (anwr ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (rec z S k))))
                          (ifpos ((eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                        (appeq2d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k)) S (app (pset a) y) (rec z S k))
                          (eqtr3d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k)) (app (pset a) y) (rec z S y) (rec z S k))
                            (anwl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (rec z S y) (app (pset a) y)))
                              H4)
                            (anwr ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (rec z S y) (rec z S k)))
                              (receq3 (z S y k))))))
                      (eqtrd ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (rec z S (suc y)) (app S (app (pset a) y)))
                        (anwr ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k)) (eq (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (rec z S (suc y))))
                          (ifneg ((eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                        (eqtrd ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (rec z S (suc y)) (app S (rec z S y)) (app S (app (pset a) y)))
                          (mpd ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (lt y k) (eq (rec z S (suc y)) (app S (rec z S y))))
                            (imp ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k)) (lt y k))
                              (syl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (or (lt y k) (eq y k)) (im (not (eq y k)) (lt y k)))
                                (:conv (im (or (lt y k) (eq y k)) (im (not (eq y k)) (lt y k)))
                                  (im
                                    (or (lt y k) (eq y k))
                                    (:sym (:unfold or ((eq y k) (lt y k)) ()
                                      (im (not (eq y k)) (lt y k)))))
                                  (orcom ((lt y k) (eq y k))))
                                (sylib ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (le y k) (or (lt y k) (eq y k)))
                                  (leloe (y k))
                                  H2)))
                            (rsyl ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (im (lt y k) (eq (rec z S (suc y)) (app S (rec z S y)))))
                              (an3l ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le y k) (not (eq y k))))
                              (eale (m y (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m)))) (im (lt y k) (eq (rec z S (suc y)) (app S (rec z S y)))))
                                (imeqd ((eq m y) (lt m k) (lt y k) (eq (rec z S (suc m)) (app S (rec z S m))) (eq (rec z S (suc y)) (app S (rec z S y))))
                                  (lteq1 (m y k))
                                  (eqeqd ((eq m y) (rec z S (suc m)) (rec z S (suc y)) (app S (rec z S m)) (app S (rec z S y)))
                                    (receq3d ((eq m y) z S (suc m) (suc y))
                                      (suceq (m y)))
                                    (appeq2d ((eq m y) S (rec z S m) (rec z S y))
                                      (receq3 (z S m y))))))))
                          (appeq2d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) S (rec z S y) (app (pset a) y))
                            (anwl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k)) (eq (rec z S y) (app (pset a) y)))
                              H4))))))))))))))))))))

(local def recnaux ((z nat ()) (S set ()) (n nat ())) (nat ())
((p nat))
(rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n))

(local theorem recnauxeqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Sh (im _G (eqs _S1 _S2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (recnaux _z1 _S1 _n1) (recnaux _z2 _S2 _n2)))
((p nat))
(:conv (im _G (eq (recnaux _z1 _S1 _n1) (recnaux _z2 _S2 _n2)))
  (im
    _G
    (eq
      (:unfold recnaux (_z1 _S1 _n1) (p)
        (rec (pr (d0) _z1) (lam p (pr (suc (fst p)) (app _S1 p))) _n1))
      (:unfold recnaux (_z2 _S2 _n2) (p)
        (rec (pr (d0) _z2) (lam p (pr (suc (fst p)) (app _S2 p))) _n2))))
  (receqd (_G (pr (d0) _z1) (pr (d0) _z2) (lam p (pr (suc (fst p)) (app _S1 p))) (lam p (pr (suc (fst p)) (app _S2 p))) _n1 _n2)
    (preqd (_G (d0) (d0) _z1 _z2)
      (eqidd (_G (d0)))
      _zh)
    (lameqd (_G p (pr (suc (fst p)) (app _S1 p)) (pr (suc (fst p)) (app _S2 p)))
      (preqd (_G (suc (fst p)) (suc (fst p)) (app _S1 p) (app _S2 p))
        (eqidd (_G (suc (fst p))))
        (appeqd (_G _S1 _S2 p p)
          _Sh
          (eqidd (_G p)))))
    _nh)))

(local theorem recnauxeq ((_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _z1 _z2) (im (eqs _S1 _S2) (im (eq _n1 _n2) (eq (recnaux _z1 _S1 _n1) (recnaux _z2 _S2 _n2)))))
()
(exp ((eq _z1 _z2) (eqs _S1 _S2) (im (eq _n1 _n2) (eq (recnaux _z1 _S1 _n1) (recnaux _z2 _S2 _n2))))
  (exp ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq (recnaux _z1 _S1 _n1) (recnaux _z2 _S2 _n2)))
    (recnauxeqd ((an (an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)) _z1 _z2 _S1 _S2 _n1 _n2)
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq _z1 _z2))
        (anl ((eq _z1 _z2) (eqs _S1 _S2))))
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eqs _S1 _S2))
        (anr ((eq _z1 _z2) (eqs _S1 _S2))))
      (anr ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)))))))

(local theorem recnauxeq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (recnaux _z1 S n) (recnaux _z2 S n)))
()
(recnauxeqd (_G _z1 _z2 S S n n)
  _h
  (eqsidd (_G S))
  (eqidd (_G n))))

(local theorem recnauxeq1 ((_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq _z1 _z2) (eq (recnaux _z1 S n) (recnaux _z2 S n)))
()
(recnauxeq1d ((eq _z1 _z2) _z1 _z2 S n)
  (id ((eq _z1 _z2)))))

(local theorem recnauxeq2d ((_G wff ()) (z nat ()) (_S1 set ()) (_S2 set ()) (n nat ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eq (recnaux z _S1 n) (recnaux z _S2 n)))
()
(recnauxeqd (_G z z _S1 _S2 n n)
  (eqidd (_G z))
  _h
  (eqidd (_G n))))

(local theorem recnauxeq2 ((z nat ()) (_S1 set ()) (_S2 set ()) (n nat ())) ()
  (im (eqs _S1 _S2) (eq (recnaux z _S1 n) (recnaux z _S2 n)))
()
(recnauxeq2d ((eqs _S1 _S2) z _S1 _S2 n)
  (id ((eqs _S1 _S2)))))

(local theorem recnauxeq3d ((_G wff ()) (z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (recnaux z S _n1) (recnaux z S _n2)))
()
(recnauxeqd (_G z z S S _n1 _n2)
  (eqidd (_G z))
  (eqsidd (_G S))
  _h))

(local theorem recnauxeq3 ((z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (recnaux z S _n1) (recnaux z S _n2)))
()
(recnauxeq3d ((eq _n1 _n2) z S _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem recnaux0 ((S set ()) (z nat ())) ()
  (eq (recnaux z S (d0)) (pr (d0) z))
((x1 nat))
(:conv (eq (recnaux z S (d0)) (pr (d0) z))
  (eq
    (:unfold recnaux (z S (d0)) (x1)
      (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0)))
    (pr (d0) z))
  (rec0 ((pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1)))))))

(local theorem recnauxS2 ((S set ()) (n nat ()) (z nat ())) ()
  (eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
((p nat))
(ax_mp ((eq (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))))
  (ax_mp ((eq (recnaux z S (suc n)) (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n))) (im (eq (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))))
    (eqtr ((recnaux z S (suc n)) (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))))
    (:conv (eq (recnaux z S (suc n)) (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)))
      (eq
        (:unfold recnaux (z S (suc n)) (p)
          (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) (suc n)))
        (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)))
      (recS ((pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n))))
  (:conv (eq (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
    (eq
      (app
        (lam p (pr (suc (fst p)) (app S p)))
        (:sym (:unfold recnaux (z S n) (p)
          (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n))))
      (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
    (applame ((recnaux z S n) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))) p (pr (suc (fst p)) (app S p)))
      (preqd ((eq p (recnaux z S n)) (suc (fst p)) (suc (fst (recnaux z S n))) (app S p) (app S (recnaux z S n)))
        (suceqd ((eq p (recnaux z S n)) (fst p) (fst (recnaux z S n)))
          (fsteq (p (recnaux z S n))))
        (appeq2 (S p (recnaux z S n))))))))

(local theorem recnauxfst ((S set ()) (n nat ()) (z nat ())) ()
  (eq (fst (recnaux z S n)) n)
((_1 nat) (x1 nat))
(:let H1 (id ((eq _1 n)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x1)))
(:let H4 (id ((eq _1 (suc x1))))
(ind (_1 x1 n (eq (fst (recnaux z S _1)) _1) (eq (fst (recnaux z S (d0))) (d0)) (eq (fst (recnaux z S n)) n) (eq (fst (recnaux z S x1)) x1) (eq (fst (recnaux z S (suc x1))) (suc x1)))
  (eqeqd ((eq _1 n) (fst (recnaux z S _1)) (fst (recnaux z S n)) _1 n)
    (fsteqd ((eq _1 n) (recnaux z S _1) (recnaux z S n))
      (recnauxeqd ((eq _1 n) z z S S _1 n)
        (eqidd ((eq _1 n) z))
        (eqsidd ((eq _1 n) S))
        H1))
    H1)
  (eqeqd ((eq _1 (d0)) (fst (recnaux z S _1)) (fst (recnaux z S (d0))) _1 (d0))
    (fsteqd ((eq _1 (d0)) (recnaux z S _1) (recnaux z S (d0)))
      (recnauxeqd ((eq _1 (d0)) z z S S _1 (d0))
        (eqidd ((eq _1 (d0)) z))
        (eqsidd ((eq _1 (d0)) S))
        H2))
    H2)
  (eqeqd ((eq _1 x1) (fst (recnaux z S _1)) (fst (recnaux z S x1)) _1 x1)
    (fsteqd ((eq _1 x1) (recnaux z S _1) (recnaux z S x1))
      (recnauxeqd ((eq _1 x1) z z S S _1 x1)
        (eqidd ((eq _1 x1) z))
        (eqsidd ((eq _1 x1) S))
        H3))
    H3)
  (eqeqd ((eq _1 (suc x1)) (fst (recnaux z S _1)) (fst (recnaux z S (suc x1))) _1 (suc x1))
    (fsteqd ((eq _1 (suc x1)) (recnaux z S _1) (recnaux z S (suc x1)))
      (recnauxeqd ((eq _1 (suc x1)) z z S S _1 (suc x1))
        (eqidd ((eq _1 (suc x1)) z))
        (eqsidd ((eq _1 (suc x1)) S))
        H4))
    H4)
  (ax_mp ((eq (fst (pr (d0) z)) (d0)) (eq (fst (recnaux z S (d0))) (d0)))
    (ax_mp ((eq (fst (recnaux z S (d0))) (fst (pr (d0) z))) (im (eq (fst (pr (d0) z)) (d0)) (eq (fst (recnaux z S (d0))) (d0))))
      (eqtr ((fst (recnaux z S (d0))) (fst (pr (d0) z)) (d0)))
      (ax_mp ((eq (recnaux z S (d0)) (pr (d0) z)) (eq (fst (recnaux z S (d0))) (fst (pr (d0) z))))
        (fsteq ((recnaux z S (d0)) (pr (d0) z)))
        (recnaux0 (S z))))
    (fstpr ((d0) z)))
  (syl5eq ((eq (fst (recnaux z S x1)) x1) (fst (recnaux z S (suc x1))) (suc (fst (recnaux z S x1))) (suc x1))
    (ax_mp ((eq (fst (pr (suc (fst (recnaux z S x1))) (app S (recnaux z S x1)))) (suc (fst (recnaux z S x1)))) (eq (fst (recnaux z S (suc x1))) (suc (fst (recnaux z S x1)))))
      (ax_mp ((eq (fst (recnaux z S (suc x1))) (fst (pr (suc (fst (recnaux z S x1))) (app S (recnaux z S x1))))) (im (eq (fst (pr (suc (fst (recnaux z S x1))) (app S (recnaux z S x1)))) (suc (fst (recnaux z S x1)))) (eq (fst (recnaux z S (suc x1))) (suc (fst (recnaux z S x1))))))
        (eqtr ((fst (recnaux z S (suc x1))) (fst (pr (suc (fst (recnaux z S x1))) (app S (recnaux z S x1)))) (suc (fst (recnaux z S x1)))))
        (ax_mp ((eq (recnaux z S (suc x1)) (pr (suc (fst (recnaux z S x1))) (app S (recnaux z S x1)))) (eq (fst (recnaux z S (suc x1))) (fst (pr (suc (fst (recnaux z S x1))) (app S (recnaux z S x1))))))
          (fsteq ((recnaux z S (suc x1)) (pr (suc (fst (recnaux z S x1))) (app S (recnaux z S x1)))))
          (recnauxS2 (S x1 z))))
      (fstpr ((suc (fst (recnaux z S x1))) (app S (recnaux z S x1)))))
    (suceq ((fst (recnaux z S x1)) x1)))))))))

(local def recn ((z nat ()) (S set ()) (n nat ())) (nat ())
()
(snd (recnaux z S n)))

(local theorem recneqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Sh (im _G (eqs _S1 _S2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (recn _z1 _S1 _n1) (recn _z2 _S2 _n2)))
()
(:conv (im _G (eq (recn _z1 _S1 _n1) (recn _z2 _S2 _n2)))
  (im
    _G
    (eq
      (:unfold recn (_z1 _S1 _n1) ()
        (snd (recnaux _z1 _S1 _n1)))
      (:unfold recn (_z2 _S2 _n2) ()
        (snd (recnaux _z2 _S2 _n2)))))
  (sndeqd (_G (recnaux _z1 _S1 _n1) (recnaux _z2 _S2 _n2))
    (recnauxeqd (_G _z1 _z2 _S1 _S2 _n1 _n2)
      _zh
      _Sh
      _nh))))

(local theorem recneq ((_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _z1 _z2) (im (eqs _S1 _S2) (im (eq _n1 _n2) (eq (recn _z1 _S1 _n1) (recn _z2 _S2 _n2)))))
()
(exp ((eq _z1 _z2) (eqs _S1 _S2) (im (eq _n1 _n2) (eq (recn _z1 _S1 _n1) (recn _z2 _S2 _n2))))
  (exp ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq (recn _z1 _S1 _n1) (recn _z2 _S2 _n2)))
    (recneqd ((an (an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)) _z1 _z2 _S1 _S2 _n1 _n2)
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq _z1 _z2))
        (anl ((eq _z1 _z2) (eqs _S1 _S2))))
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eqs _S1 _S2))
        (anr ((eq _z1 _z2) (eqs _S1 _S2))))
      (anr ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)))))))

(local theorem recneq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (recn _z1 S n) (recn _z2 S n)))
()
(recneqd (_G _z1 _z2 S S n n)
  _h
  (eqsidd (_G S))
  (eqidd (_G n))))

(local theorem recneq1 ((_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq _z1 _z2) (eq (recn _z1 S n) (recn _z2 S n)))
()
(recneq1d ((eq _z1 _z2) _z1 _z2 S n)
  (id ((eq _z1 _z2)))))

(local theorem recneq2d ((_G wff ()) (z nat ()) (_S1 set ()) (_S2 set ()) (n nat ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eq (recn z _S1 n) (recn z _S2 n)))
()
(recneqd (_G z z _S1 _S2 n n)
  (eqidd (_G z))
  _h
  (eqidd (_G n))))

(local theorem recneq2 ((z nat ()) (_S1 set ()) (_S2 set ()) (n nat ())) ()
  (im (eqs _S1 _S2) (eq (recn z _S1 n) (recn z _S2 n)))
()
(recneq2d ((eqs _S1 _S2) z _S1 _S2 n)
  (id ((eqs _S1 _S2)))))

(local theorem recneq3d ((_G wff ()) (z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (recn z S _n1) (recn z S _n2)))
()
(recneqd (_G z z S S _n1 _n2)
  (eqidd (_G z))
  (eqsidd (_G S))
  _h))

(local theorem recneq3 ((z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (recn z S _n1) (recn z S _n2)))
()
(recneq3d ((eq _n1 _n2) z S _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem recn0 ((S set ()) (z nat ())) ()
  (eq (recn z S (d0)) z)
((x1 nat))
(ax_mp ((eq (snd (pr (d0) z)) z) (eq (recn z S (d0)) z))
  (ax_mp ((eq (recn z S (d0)) (snd (pr (d0) z))) (im (eq (snd (pr (d0) z)) z) (eq (recn z S (d0)) z)))
    (eqtr ((recn z S (d0)) (snd (pr (d0) z)) z))
    (ax_mp ((eq (recnaux z S (d0)) (pr (d0) z)) (eq (recn z S (d0)) (snd (pr (d0) z))))
      (:conv (im (eq (recnaux z S (d0)) (pr (d0) z)) (eq (recn z S (d0)) (snd (pr (d0) z))))
        (im
          (eq (recnaux z S (d0)) (pr (d0) z))
          (eq
            (:unfold recn (z S (d0)) ()
              (snd (recnaux z S (d0))))
            (snd (pr (d0) z))))
        (sndeq ((recnaux z S (d0)) (pr (d0) z))))
      (:conv (eq (recnaux z S (d0)) (pr (d0) z))
        (eq
          (:unfold recnaux (z S (d0)) (x1)
            (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0)))
          (pr (d0) z))
        (rec0 ((pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))))))))
  (sndpr ((d0) z))))

(local theorem recnS ((S set ()) (n nat ()) (z nat ())) ()
  (eq (recn z S (suc n)) (app S (pr n (recn z S n))))
()
(ax_mp ((eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (recn z S n)))) (eq (recn z S (suc n)) (app S (pr n (recn z S n)))))
  (ax_mp ((eq (recn z S (suc n)) (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))) (im (eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (recn z S n)))) (eq (recn z S (suc n)) (app S (pr n (recn z S n))))))
    (eqtr ((recn z S (suc n)) (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (recn z S n)))))
    (ax_mp ((eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (eq (recn z S (suc n)) (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))))
      (:conv (im (eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (eq (recn z S (suc n)) (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))))
        (im
          (eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
          (eq
            (:unfold recn (z S (suc n)) ()
              (snd (recnaux z S (suc n))))
            (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))))
        (sndeq ((recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))))
      (recnauxS2 (S n z))))
  (ax_mp ((eq (app S (recnaux z S n)) (app S (pr n (recn z S n)))) (eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (recn z S n)))))
    (ax_mp ((eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (recnaux z S n))) (im (eq (app S (recnaux z S n)) (app S (pr n (recn z S n)))) (eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (recn z S n))))))
      (eqtr ((snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (recnaux z S n)) (app S (pr n (recn z S n)))))
      (sndpr ((suc (fst (recnaux z S n))) (app S (recnaux z S n)))))
    (ax_mp ((eq (recnaux z S n) (pr n (recn z S n))) (eq (app S (recnaux z S n)) (app S (pr n (recn z S n)))))
      (appeq2 (S (recnaux z S n) (pr n (recn z S n))))
      (ax_mp ((eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (recn z S n))) (eq (recnaux z S n) (pr n (recn z S n))))
        (ax_mp ((eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (recnaux z S n)) (im (eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (recn z S n))) (eq (recnaux z S n) (pr n (recn z S n)))))
          (eqtr3 ((recnaux z S n) (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (recn z S n))))
          (fstsnd ((recnaux z S n))))
        (ax_mp ((eq (fst (recnaux z S n)) n) (eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (recn z S n))))
          (:conv (im (eq (fst (recnaux z S n)) n) (eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (recn z S n))))
            (im
              (eq (fst (recnaux z S n)) n)
              (eq
                (pr (fst (recnaux z S n)) (snd (recnaux z S n)))
                (pr
                  n
                  (:unfold recn (z S n) ()
                    (snd (recnaux z S n))))))
            (preq1 ((fst (recnaux z S n)) n (snd (recnaux z S n)))))
          (recnauxfst (S n z))))))))

(local def ocase ((z nat ()) (S set ())) (set ())
((i nat) (n nat))
(lam n (recn z (lam i (app S (fst i))) n)))

(local theorem ocaseeqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Sh (im _G (eqs _S1 _S2))))
  (im _G (eqs (ocase _z1 _S1) (ocase _z2 _S2)))
((i nat) (n nat))
(:conv (im _G (eqs (ocase _z1 _S1) (ocase _z2 _S2)))
  (im
    _G
    (eqs
      (:unfold ocase (_z1 _S1) (i n)
        (lam n (recn _z1 (lam i (app _S1 (fst i))) n)))
      (:unfold ocase (_z2 _S2) (i n)
        (lam n (recn _z2 (lam i (app _S2 (fst i))) n)))))
  (lameqd (_G n (recn _z1 (lam i (app _S1 (fst i))) n) (recn _z2 (lam i (app _S2 (fst i))) n))
    (recneqd (_G _z1 _z2 (lam i (app _S1 (fst i))) (lam i (app _S2 (fst i))) n n)
      _zh
      (lameqd (_G i (app _S1 (fst i)) (app _S2 (fst i)))
        (appeqd (_G _S1 _S2 (fst i) (fst i))
          _Sh
          (eqidd (_G (fst i)))))
      (eqidd (_G n))))))

(local theorem ocaseeq ((_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ())) ()
  (im (eq _z1 _z2) (im (eqs _S1 _S2) (eqs (ocase _z1 _S1) (ocase _z2 _S2))))
()
(exp ((eq _z1 _z2) (eqs _S1 _S2) (eqs (ocase _z1 _S1) (ocase _z2 _S2)))
  (ocaseeqd ((an (eq _z1 _z2) (eqs _S1 _S2)) _z1 _z2 _S1 _S2)
    (anl ((eq _z1 _z2) (eqs _S1 _S2)))
    (anr ((eq _z1 _z2) (eqs _S1 _S2))))))

(local theorem ocaseeq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (S set ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eqs (ocase _z1 S) (ocase _z2 S)))
()
(ocaseeqd (_G _z1 _z2 S S)
  _h
  (eqsidd (_G S))))

(local theorem ocaseeq1 ((_z1 nat ()) (_z2 nat ()) (S set ())) ()
  (im (eq _z1 _z2) (eqs (ocase _z1 S) (ocase _z2 S)))
()
(ocaseeq1d ((eq _z1 _z2) _z1 _z2 S)
  (id ((eq _z1 _z2)))))

(local theorem ocaseeq2d ((_G wff ()) (z nat ()) (_S1 set ()) (_S2 set ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eqs (ocase z _S1) (ocase z _S2)))
()
(ocaseeqd (_G z z _S1 _S2)
  (eqidd (_G z))
  _h))

(local theorem ocaseeq2 ((z nat ()) (_S1 set ()) (_S2 set ())) ()
  (im (eqs _S1 _S2) (eqs (ocase z _S1) (ocase z _S2)))
()
(ocaseeq2d ((eqs _S1 _S2) z _S1 _S2)
  (id ((eqs _S1 _S2)))))

(local theorem ocaseval ((S set ()) (i nat) (n nat ()) (z nat ())) ()
  (eq (app (ocase z S) n) (recn z (lam i (app S (fst i))) n))
((x1 nat))
(:conv (eq (app (ocase z S) n) (recn z (lam i (app S (fst i))) n))
  (eq
    (app
      (:unfold ocase (z S) (i x1)
        (lam x1 (recn z (lam i (app S (fst i))) x1)))
      n)
    (recn z (lam i (app S (fst i))) n))
  (applame (n (recn z (lam i (app S (fst i))) n) x1 (recn z (lam i (app S (fst i))) x1))
    (recneq3 (z (lam i (app S (fst i))) x1 n)))))

(local theorem ocase0 ((S set ()) (z nat ())) ()
  (eq (app (ocase z S) (d0)) z)
((x1 nat))
(ax_mp ((eq (recn z (lam x1 (app S (fst x1))) (d0)) z) (eq (app (ocase z S) (d0)) z))
  (ax_mp ((eq (app (ocase z S) (d0)) (recn z (lam x1 (app S (fst x1))) (d0))) (im (eq (recn z (lam x1 (app S (fst x1))) (d0)) z) (eq (app (ocase z S) (d0)) z)))
    (eqtr ((app (ocase z S) (d0)) (recn z (lam x1 (app S (fst x1))) (d0)) z))
    (ocaseval (S x1 (d0) z)))
  (recn0 ((lam x1 (app S (fst x1))) z))))

(local theorem ocaseS ((S set ()) (n nat ()) (z nat ())) ()
  (eq (app (ocase z S) (suc n)) (app S n))
((i nat))
(ax_mp ((eq (recn z (lam i (app S (fst i))) (suc n)) (app S n)) (eq (app (ocase z S) (suc n)) (app S n)))
  (ax_mp ((eq (app (ocase z S) (suc n)) (recn z (lam i (app S (fst i))) (suc n))) (im (eq (recn z (lam i (app S (fst i))) (suc n)) (app S n)) (eq (app (ocase z S) (suc n)) (app S n))))
    (eqtr ((app (ocase z S) (suc n)) (recn z (lam i (app S (fst i))) (suc n)) (app S n)))
    (ocaseval (S i (suc n) z)))
  (ax_mp ((eq (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n))) (app S n)) (eq (recn z (lam i (app S (fst i))) (suc n)) (app S n)))
    (ax_mp ((eq (recn z (lam i (app S (fst i))) (suc n)) (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n)))) (im (eq (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n))) (app S n)) (eq (recn z (lam i (app S (fst i))) (suc n)) (app S n))))
      (eqtr ((recn z (lam i (app S (fst i))) (suc n)) (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n))) (app S n)))
      (recnS ((lam i (app S (fst i))) n z)))
    (ax_mp ((eq (app (lam i (app S (fst i))) (pr n (app (ocase z S) n))) (app S n)) (eq (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n))) (app S n)))
      (ax_mp ((eq (app (lam i (app S (fst i))) (pr n (app (ocase z S) n))) (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n)))) (im (eq (app (lam i (app S (fst i))) (pr n (app (ocase z S) n))) (app S n)) (eq (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n))) (app S n))))
        (eqtr3 ((app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n))) (app (lam i (app S (fst i))) (pr n (app (ocase z S) n))) (app S n)))
        (ax_mp ((eq (pr n (app (ocase z S) n)) (pr n (recn z (lam i (app S (fst i))) n))) (eq (app (lam i (app S (fst i))) (pr n (app (ocase z S) n))) (app (lam i (app S (fst i))) (pr n (recn z (lam i (app S (fst i))) n)))))
          (appeq2 ((lam i (app S (fst i))) (pr n (app (ocase z S) n)) (pr n (recn z (lam i (app S (fst i))) n))))
          (ax_mp ((eq (app (ocase z S) n) (recn z (lam i (app S (fst i))) n)) (eq (pr n (app (ocase z S) n)) (pr n (recn z (lam i (app S (fst i))) n))))
            (preq2 (n (app (ocase z S) n) (recn z (lam i (app S (fst i))) n)))
            (ocaseval (S i n z)))))
      (applame ((pr n (app (ocase z S) n)) (app S n) i (app S (fst i)))
        (appeq2d ((eq i (pr n (app (ocase z S) n))) S (fst i) n)
          (syl6eq ((eq i (pr n (app (ocase z S) n))) (fst i) (fst (pr n (app (ocase z S) n))) n)
            (fstpr (n (app (ocase z S) n)))
            (fsteq (i (pr n (app (ocase z S) n)))))))))))

(local def ocasep ((z wff ()) (S set ())) (set ())
((n nat))
(ab n (ifp (eq n (d0)) z (el (sub n (d1)) S))))

(local theorem ocasepeqd ((_G wff ()) (_z1 wff ()) (_z2 wff ()) (_S1 set ()) (_S2 set ()))
  ((_zh (im _G (iff _z1 _z2)))
   (_Sh (im _G (eqs _S1 _S2))))
  (im _G (eqs (ocasep _z1 _S1) (ocasep _z2 _S2)))
((n nat))
(:conv (im _G (eqs (ocasep _z1 _S1) (ocasep _z2 _S2)))
  (im
    _G
    (eqs
      (:unfold ocasep (_z1 _S1) (n)
        (ab n (ifp (eq n (d0)) _z1 (el (sub n (d1)) _S1))))
      (:unfold ocasep (_z2 _S2) (n)
        (ab n (ifp (eq n (d0)) _z2 (el (sub n (d1)) _S2))))))
  (abeqd (_G n (ifp (eq n (d0)) _z1 (el (sub n (d1)) _S1)) (ifp (eq n (d0)) _z2 (el (sub n (d1)) _S2)))
    (ifpeqd (_G (eq n (d0)) (eq n (d0)) _z1 _z2 (el (sub n (d1)) _S1) (el (sub n (d1)) _S2))
      (biidd (_G (eq n (d0))))
      _zh
      (eleqd (_G (sub n (d1)) (sub n (d1)) _S1 _S2)
        (eqidd (_G (sub n (d1))))
        _Sh)))))

(local theorem ocasepeq ((_z1 wff ()) (_z2 wff ()) (_S1 set ()) (_S2 set ())) ()
  (im (iff _z1 _z2) (im (eqs _S1 _S2) (eqs (ocasep _z1 _S1) (ocasep _z2 _S2))))
()
(exp ((iff _z1 _z2) (eqs _S1 _S2) (eqs (ocasep _z1 _S1) (ocasep _z2 _S2)))
  (ocasepeqd ((an (iff _z1 _z2) (eqs _S1 _S2)) _z1 _z2 _S1 _S2)
    (anl ((iff _z1 _z2) (eqs _S1 _S2)))
    (anr ((iff _z1 _z2) (eqs _S1 _S2))))))

(local theorem ocasepeq1d ((_G wff ()) (_z1 wff ()) (_z2 wff ()) (S set ()))
  ((_h (im _G (iff _z1 _z2))))
  (im _G (eqs (ocasep _z1 S) (ocasep _z2 S)))
()
(ocasepeqd (_G _z1 _z2 S S)
  _h
  (eqsidd (_G S))))

(local theorem ocasepeq1 ((_z1 wff ()) (_z2 wff ()) (S set ())) ()
  (im (iff _z1 _z2) (eqs (ocasep _z1 S) (ocasep _z2 S)))
()
(ocasepeq1d ((iff _z1 _z2) _z1 _z2 S)
  (id ((iff _z1 _z2)))))

(local theorem ocasepeq2d ((_G wff ()) (z wff ()) (_S1 set ()) (_S2 set ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eqs (ocasep z _S1) (ocasep z _S2)))
()
(ocasepeqd (_G z z _S1 _S2)
  (biidd (_G z))
  _h))

(local theorem ocasepeq2 ((z wff ()) (_S1 set ()) (_S2 set ())) ()
  (im (eqs _S1 _S2) (eqs (ocasep z _S1) (ocasep z _S2)))
()
(ocasepeq2d ((eqs _S1 _S2) z _S1 _S2)
  (id ((eqs _S1 _S2)))))

(local theorem ocasep0 ((S set ()) (z wff ())) ()
  (iff (el (d0) (ocasep z S)) z)
((x1 nat))
(:conv (iff (el (d0) (ocasep z S)) z)
  (iff
    (el
      (d0)
      (:unfold ocasep (z S) (x1)
        (ab x1 (ifp (eq x1 (d0)) z (el (sub x1 (d1)) S)))))
    z)
  (elabe (x1 (d0) (ifp (eq x1 (d0)) z (el (sub x1 (d1)) S)) z)
    (ifppos ((eq x1 (d0)) z (el (sub x1 (d1)) S))))))

(local theorem ocasepS ((S set ()) (n nat ()) (z wff ())) ()
  (iff (el (suc n) (ocasep z S)) (el n S))
((x1 nat))
(:conv (iff (el (suc n) (ocasep z S)) (el n S))
  (iff
    (el
      (suc n)
      (:unfold ocasep (z S) (x1)
        (ab x1 (ifp (eq x1 (d0)) z (el (sub x1 (d1)) S)))))
    (el n S))
  (elabe (x1 (suc n) (ifp (eq x1 (d0)) z (el (sub x1 (d1)) S)) (el n S))
    (syl6bb ((eq x1 (suc n)) (ifp (eq x1 (d0)) z (el (sub x1 (d1)) S)) (el (sub (suc n) (d1)) S) (el n S))
      (ax_mp ((eq (sub (suc n) (d1)) n) (iff (el (sub (suc n) (d1)) S) (el n S)))
        (eleq1 (S (sub (suc n) (d1)) n))
        (sucsub1 (n)))
      (syl6bb ((eq x1 (suc n)) (ifp (eq x1 (d0)) z (el (sub x1 (d1)) S)) (ifp (eq (suc n) (d0)) z (el (sub (suc n) (d1)) S)) (el (sub (suc n) (d1)) S))
        (ax_mp ((not (eq (suc n) (d0))) (iff (ifp (eq (suc n) (d0)) z (el (sub (suc n) (d1)) S)) (el (sub (suc n) (d1)) S)))
          (ifpneg ((eq (suc n) (d0)) z (el (sub (suc n) (d1)) S)))
          (:conv (not (eq (suc n) (d0)))
            (:sym (:unfold ne ((suc n) (d0)) ()
              (not (eq (suc n) (d0)))))
            (peano1 (n))))
        (ifpeqd ((eq x1 (suc n)) (eq x1 (d0)) (eq (suc n) (d0)) z z (el (sub x1 (d1)) S) (el (sub (suc n) (d1)) S))
          (eqeq1 (x1 (suc n) (d0)))
          (biidd ((eq x1 (suc n)) z))
          (eleq1d (S (eq x1 (suc n)) (sub x1 (d1)) (sub (suc n) (d1)))
            (subeq1 (x1 (suc n) (d1))))))))))

(local def Tail ((S set ())) (set ())
((n nat))
(ab n (el (suc n) S)))

(local theorem Taileqd ((_G wff ()) (_S1 set ()) (_S2 set ()))
  ((_Sh (im _G (eqs _S1 _S2))))
  (im _G (eqs (Tail _S1) (Tail _S2)))
((n nat))
(:conv (im _G (eqs (Tail _S1) (Tail _S2)))
  (im
    _G
    (eqs
      (:unfold Tail (_S1) (n)
        (ab n (el (suc n) _S1)))
      (:unfold Tail (_S2) (n)
        (ab n (el (suc n) _S2)))))
  (abeqd (_G n (el (suc n) _S1) (el (suc n) _S2))
    (eleqd (_G (suc n) (suc n) _S1 _S2)
      (eqidd (_G (suc n)))
      _Sh))))

(local theorem Taileq ((_S1 set ()) (_S2 set ())) ()
  (im (eqs _S1 _S2) (eqs (Tail _S1) (Tail _S2)))
()
(Taileqd ((eqs _S1 _S2) _S1 _S2)
  (id ((eqs _S1 _S2)))))

(local theorem elTail ((S set ()) (n nat ())) ()
  (iff (el n (Tail S)) (el (suc n) S))
((_1 nat))
(:conv (iff (el n (Tail S)) (el (suc n) S))
  (iff
    (el
      n
      (:unfold Tail (S) (_1)
        (ab _1 (el (suc _1) S))))
    (el (suc n) S))
  (elabe (_1 n (el (suc _1) S) (el (suc n) S))
    (eleqd ((eq _1 n) (suc _1) (suc n) S S)
      (suceqd ((eq _1 n) _1 n)
        (id ((eq _1 n))))
      (eqsidd ((eq _1 n) S))))))

(local theorem Tail_ocasep ((S set ()) (z wff ())) ()
  (eqs (Tail (ocasep z S)) S)
((x1 nat))
(:conv (eqs (Tail (ocasep z S)) S)
  (:unfold eqs ((Tail (ocasep z S)) S) (x1)
    (al x1 (iff (el x1 (Tail (ocasep z S))) (el x1 S))))
  (ax_gen (x1 (iff (el x1 (Tail (ocasep z S))) (el x1 S)))
    (ax_mp ((iff (el (suc x1) (ocasep z S)) (el x1 S)) (iff (el x1 (Tail (ocasep z S))) (el x1 S)))
      (ax_mp ((iff (el x1 (Tail (ocasep z S))) (el (suc x1) (ocasep z S))) (im (iff (el (suc x1) (ocasep z S)) (el x1 S)) (iff (el x1 (Tail (ocasep z S))) (el x1 S))))
        (bitr ((el x1 (Tail (ocasep z S))) (el (suc x1) (ocasep z S)) (el x1 S)))
        (elTail ((ocasep z S) x1)))
      (ocasepS (S x1 z))))))

(local theorem ocasep_Tail ((S set ())) ()
  (eqs (ocasep (el (d0) S) (Tail S)) S)
((x1 nat) (x2 nat))
(:conv (eqs (ocasep (el (d0) S) (Tail S)) S)
  (:unfold eqs ((ocasep (el (d0) S) (Tail S)) S) (x1)
    (al x1 (iff (el x1 (ocasep (el (d0) S) (Tail S))) (el x1 S))))
  (ax_gen (x1 (iff (el x1 (ocasep (el (d0) S) (Tail S))) (el x1 S)))
    (cases ((eq x1 (d0)) (iff (el x1 (ocasep (el (d0) S) (Tail S))) (el x1 S)))
      (mpbiri ((eq x1 (d0)) (iff (el (d0) (ocasep (el (d0) S) (Tail S))) (el (d0) S)) (iff (el x1 (ocasep (el (d0) S) (Tail S))) (el x1 S)))
        (ocasep0 ((Tail S) (el (d0) S)))
        (bieqd ((eq x1 (d0)) (el x1 (ocasep (el (d0) S) (Tail S))) (el (d0) (ocasep (el (d0) S) (Tail S))) (el x1 S) (el (d0) S))
          (eleq1 ((ocasep (el (d0) S) (Tail S)) x1 (d0)))
          (eleq1 (S x1 (d0)))))
      (sylbi ((not (eq x1 (d0))) (ex x2 (eq x1 (suc x2))) (iff (el x1 (ocasep (el (d0) S) (Tail S))) (el x1 S)))
        (:conv (iff (not (eq x1 (d0))) (ex x2 (eq x1 (suc x2))))
          (iff
            (:sym (:unfold ne (x1 (d0)) ()
              (not (eq x1 (d0)))))
            (ex x2 (eq x1 (suc x2))))
          (exsuc (x2 x1)))
        (eex (x2 (eq x1 (suc x2)) (iff (el x1 (ocasep (el (d0) S) (Tail S))) (el x1 S)))
          (mpbiri ((eq x1 (suc x2)) (iff (el (suc x2) (ocasep (el (d0) S) (Tail S))) (el (suc x2) S)) (iff (el x1 (ocasep (el (d0) S) (Tail S))) (el x1 S)))
            (ax_mp ((iff (el x2 (Tail S)) (el (suc x2) S)) (iff (el (suc x2) (ocasep (el (d0) S) (Tail S))) (el (suc x2) S)))
              (ax_mp ((iff (el (suc x2) (ocasep (el (d0) S) (Tail S))) (el x2 (Tail S))) (im (iff (el x2 (Tail S)) (el (suc x2) S)) (iff (el (suc x2) (ocasep (el (d0) S) (Tail S))) (el (suc x2) S))))
                (bitr ((el (suc x2) (ocasep (el (d0) S) (Tail S))) (el x2 (Tail S)) (el (suc x2) S)))
                (ocasepS ((Tail S) x2 (el (d0) S))))
              (elTail (S x2)))
            (bieqd ((eq x1 (suc x2)) (el x1 (ocasep (el (d0) S) (Tail S))) (el (suc x2) (ocasep (el (d0) S) (Tail S))) (el x1 S) (el (suc x2) S))
              (eleq1 ((ocasep (el (d0) S) (Tail S)) x1 (suc x2)))
              (eleq1 (S x1 (suc x2)))))))))))

(def obind ((a nat ()) (F set ())) (nat ())
()
(app (ocase (d0) F) a))

(local theorem obindeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_F1 set ()) (_F2 set ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_Fh (im _G (eqs _F1 _F2))))
  (im _G (eq (obind _a1 _F1) (obind _a2 _F2)))
()
(:conv (im _G (eq (obind _a1 _F1) (obind _a2 _F2)))
  (im
    _G
    (eq
      (:unfold obind (_a1 _F1) ()
        (app (ocase (d0) _F1) _a1))
      (:unfold obind (_a2 _F2) ()
        (app (ocase (d0) _F2) _a2))))
  (appeqd (_G (ocase (d0) _F1) (ocase (d0) _F2) _a1 _a2)
    (ocaseeqd (_G (d0) (d0) _F1 _F2)
      (eqidd (_G (d0)))
      _Fh)
    _ah)))

(local theorem obindeq ((_a1 nat ()) (_a2 nat ()) (_F1 set ()) (_F2 set ())) ()
  (im (eq _a1 _a2) (im (eqs _F1 _F2) (eq (obind _a1 _F1) (obind _a2 _F2))))
()
(exp ((eq _a1 _a2) (eqs _F1 _F2) (eq (obind _a1 _F1) (obind _a2 _F2)))
  (obindeqd ((an (eq _a1 _a2) (eqs _F1 _F2)) _a1 _a2 _F1 _F2)
    (anl ((eq _a1 _a2) (eqs _F1 _F2)))
    (anr ((eq _a1 _a2) (eqs _F1 _F2))))))

(local theorem obindeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (F set ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (obind _a1 F) (obind _a2 F)))
()
(obindeqd (_G _a1 _a2 F F)
  _h
  (eqsidd (_G F))))

(local theorem obindeq1 ((_a1 nat ()) (_a2 nat ()) (F set ())) ()
  (im (eq _a1 _a2) (eq (obind _a1 F) (obind _a2 F)))
()
(obindeq1d ((eq _a1 _a2) _a1 _a2 F)
  (id ((eq _a1 _a2)))))

(local theorem obindeq2d ((_G wff ()) (a nat ()) (_F1 set ()) (_F2 set ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eq (obind a _F1) (obind a _F2)))
()
(obindeqd (_G a a _F1 _F2)
  (eqidd (_G a))
  _h))

(local theorem obindeq2 ((a nat ()) (_F1 set ()) (_F2 set ())) ()
  (im (eqs _F1 _F2) (eq (obind a _F1) (obind a _F2)))
()
(obindeq2d ((eqs _F1 _F2) a _F1 _F2)
  (id ((eqs _F1 _F2)))))

(theorem obind0 ((F set ())) ()
  (eq (obind (d0) F) (d0))
()
(:conv (eq (obind (d0) F) (d0))
  (eq
    (:unfold obind ((d0) F) ()
      (app (ocase (d0) F) (d0)))
    (d0))
  (ocase0 (F (d0)))))

(theorem obindS ((n nat ()) (F set ())) ()
  (eq (obind (suc n) F) (app F n))
()
(:conv (eq (obind (suc n) F) (app F n))
  (eq
    (:unfold obind ((suc n) F) ()
      (app (ocase (d0) F) (suc n)))
    (app F n))
  (ocaseS (F n (d0)))))

(local theorem obindS2 ((n nat ()) (x nat)) ()
  (eq (obind n (lam x (suc x))) n)
((x1 nat))
(cases ((eq n (d0)) (eq (obind n (lam x (suc x))) n))
  (mpbiri ((eq n (d0)) (eq (obind (d0) (lam x (suc x))) (d0)) (eq (obind n (lam x (suc x))) n))
    (obind0 ((lam x (suc x))))
    (eqeqd ((eq n (d0)) (obind n (lam x (suc x))) (obind (d0) (lam x (suc x))) n (d0))
      (obindeq1 (n (d0) (lam x (suc x))))
      (id ((eq n (d0))))))
  (sylbi ((not (eq n (d0))) (ex x1 (eq n (suc x1))) (eq (obind n (lam x (suc x))) n))
    (:conv (iff (not (eq n (d0))) (ex x1 (eq n (suc x1))))
      (iff
        (:sym (:unfold ne (n (d0)) ()
          (not (eq n (d0)))))
        (ex x1 (eq n (suc x1))))
      (exsuc (x1 n)))
    (eex (x1 (eq n (suc x1)) (eq (obind n (lam x (suc x))) n))
      (mpbiri ((eq n (suc x1)) (eq (obind (suc x1) (lam x (suc x))) (suc x1)) (eq (obind n (lam x (suc x))) n))
        (ax_mp ((eq (app (lam x (suc x)) x1) (suc x1)) (eq (obind (suc x1) (lam x (suc x))) (suc x1)))
          (ax_mp ((eq (obind (suc x1) (lam x (suc x))) (app (lam x (suc x)) x1)) (im (eq (app (lam x (suc x)) x1) (suc x1)) (eq (obind (suc x1) (lam x (suc x))) (suc x1))))
            (eqtr ((obind (suc x1) (lam x (suc x))) (app (lam x (suc x)) x1) (suc x1)))
            (obindS (x1 (lam x (suc x)))))
          (applame (x1 (suc x1) x (suc x))
            (suceq (x x1))))
        (eqeqd ((eq n (suc x1)) (obind n (lam x (suc x))) (obind (suc x1) (lam x (suc x))) n (suc x1))
          (obindeq1 (n (suc x1) (lam x (suc x))))
          (id ((eq n (suc x1))))))))))

(local theorem obindeqS ((F set ()) (a nat ()) (m nat) (n nat ())) ()
  (iff (eq (obind n F) (suc a)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a)))))
()
(:let H1 (anr ((eq (obind n F) (suc a)) (eq n (suc m))))
(:let H2 (obindS (m F))
(ibii ((eq (obind n F) (suc a)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a)))))
  (cases ((eq n (d0)) (im (eq (obind n F) (suc a)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a))))))
    (syl5 ((eq n (d0)) (eq (obind n F) (suc a)) (ne (obind n F) (d0)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a)))))
      (sucne0 ((obind n F) a))
      (syl ((eq n (d0)) (eq (obind n F) (d0)) (im (ne (obind n F) (d0)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a))))))
        (:conv (im (eq (obind n F) (d0)) (im (ne (obind n F) (d0)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a))))))
          (im
            (eq (obind n F) (d0))
            (im
              (:unfold ne ((obind n F) (d0)) ()
                (not (eq (obind n F) (d0))))
              (ex m (an (eq n (suc m)) (eq (app F m) (suc a))))))
          (absurdr ((eq (obind n F) (d0)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a)))))))
        (syl6eq ((eq n (d0)) (obind n F) (obind (d0) F) (d0))
          (obind0 (F))
          (obindeq1 (n (d0) F)))))
    (sylbi ((not (eq n (d0))) (ex m (eq n (suc m))) (im (eq (obind n F) (suc a)) (ex m (an (eq n (suc m)) (eq (app F m) (suc a))))))
      (:conv (iff (not (eq n (d0))) (ex m (eq n (suc m))))
        (iff
          (:sym (:unfold ne (n (d0)) ()
            (not (eq n (d0)))))
          (ex m (eq n (suc m))))
        (exsuc (m n)))
      (com12 ((eq (obind n F) (suc a)) (ex m (eq n (suc m))) (ex m (an (eq n (suc m)) (eq (app F m) (suc a)))))
        (eximd (m (eq (obind n F) (suc a)) (eq n (suc m)) (an (eq n (suc m)) (eq (app F m) (suc a))))
          (exp ((eq (obind n F) (suc a)) (eq n (suc m)) (an (eq n (suc m)) (eq (app F m) (suc a))))
            (iand ((an (eq (obind n F) (suc a)) (eq n (suc m))) (eq n (suc m)) (eq (app F m) (suc a)))
              H1
              (eqtr3d ((an (eq (obind n F) (suc a)) (eq n (suc m))) (app F m) (obind n F) (suc a))
                (syl6eq ((an (eq (obind n F) (suc a)) (eq n (suc m))) (obind n F) (obind (suc m) F) (app F m))
                  H2
                  (obindeq1d ((an (eq (obind n F) (suc a)) (eq n (suc m))) n (suc m) F)
                    H1))
                (anl ((eq (obind n F) (suc a)) (eq n (suc m)))))))))))
  (eex (m (an (eq n (suc m)) (eq (app F m) (suc a))) (eq (obind n F) (suc a)))
    (eqtrd ((an (eq n (suc m)) (eq (app F m) (suc a))) (obind n F) (app F m) (suc a))
      (anwl ((eq n (suc m)) (eq (app F m) (suc a)) (eq (obind n F) (app F m)))
        (syl6eq ((eq n (suc m)) (obind n F) (obind (suc m) F) (app F m))
          H2
          (obindeq1 (n (suc m) F))))
      (anr ((eq n (suc m)) (eq (app F m) (suc a))))))))))

(def pow ((a nat ()) (b nat ())) (nat ())
((n nat))
(rec (d1) (lam n (mul a n)) b))

(local theorem poweqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (pow _a1 _b1) (pow _a2 _b2)))
((n nat))
(:conv (im _G (eq (pow _a1 _b1) (pow _a2 _b2)))
  (im
    _G
    (eq
      (:unfold pow (_a1 _b1) (n)
        (rec (d1) (lam n (mul _a1 n)) _b1))
      (:unfold pow (_a2 _b2) (n)
        (rec (d1) (lam n (mul _a2 n)) _b2))))
  (receqd (_G (d1) (d1) (lam n (mul _a1 n)) (lam n (mul _a2 n)) _b1 _b2)
    (eqidd (_G (d1)))
    (lameqd (_G n (mul _a1 n) (mul _a2 n))
      (muleqd (_G _a1 _a2 n n)
        _ah
        (eqidd (_G n))))
    _bh)))

(local theorem poweq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (pow _a1 _b1) (pow _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (pow _a1 _b1) (pow _a2 _b2)))
  (poweqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem poweq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (pow _a1 b) (pow _a2 b)))
()
(poweqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem poweq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (pow _a1 b) (pow _a2 b)))
()
(poweq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem poweq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (pow a _b1) (pow a _b2)))
()
(poweqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem poweq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (pow a _b1) (pow a _b2)))
()
(poweq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(theorem pow0 ((a nat ())) ()
  (eq (pow a (d0)) (d1))
((x1 nat))
(:conv (eq (pow a (d0)) (d1))
  (eq
    (:unfold pow (a (d0)) (x1)
      (rec (d1) (lam x1 (mul a x1)) (d0)))
    (d1))
  (rec0 ((d1) (lam x1 (mul a x1))))))

(theorem powS ((a nat ()) (b nat ())) ()
  (eq (pow a (suc b)) (mul a (pow a b)))
((n nat))
(ax_mp ((eq (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b))) (eq (pow a (suc b)) (mul a (pow a b))))
  (ax_mp ((eq (pow a (suc b)) (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b))) (im (eq (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b))) (eq (pow a (suc b)) (mul a (pow a b)))))
    (eqtr ((pow a (suc b)) (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b))))
    (:conv (eq (pow a (suc b)) (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)))
      (eq
        (:unfold pow (a (suc b)) (n)
          (rec (d1) (lam n (mul a n)) (suc b)))
        (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)))
      (recS ((d1) (lam n (mul a n)) b))))
  (:conv (eq (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b)))
    (eq
      (app
        (lam n (mul a n))
        (:sym (:unfold pow (a b) (n)
          (rec (d1) (lam n (mul a n)) b))))
      (mul a (pow a b)))
    (applame ((pow a b) (mul a (pow a b)) n (mul a n))
      (muleq2 (a n (pow a b)))))))

(local theorem powS2 ((a nat ()) (b nat ())) ()
  (eq (pow a (suc b)) (mul (pow a b) a))
()
(ax_mp ((eq (mul a (pow a b)) (mul (pow a b) a)) (eq (pow a (suc b)) (mul (pow a b) a)))
  (ax_mp ((eq (pow a (suc b)) (mul a (pow a b))) (im (eq (mul a (pow a b)) (mul (pow a b) a)) (eq (pow a (suc b)) (mul (pow a b) a))))
    (eqtr ((pow a (suc b)) (mul a (pow a b)) (mul (pow a b) a)))
    (powS (a b)))
  (mulcom (a (pow a b)))))

(local theorem pow12 ((a nat ())) ()
  (eq (pow a (d1)) a)
()
(ax_mp ((eq (mul a (pow a (d0))) a) (eq (pow a (d1)) a))
  (ax_mp ((eq (pow a (d1)) (mul a (pow a (d0)))) (im (eq (mul a (pow a (d0))) a) (eq (pow a (d1)) a)))
    (eqtr ((pow a (d1)) (mul a (pow a (d0))) a))
    (:conv (eq (pow a (d1)) (mul a (pow a (d0))))
      (eq
        (pow
          a
          (:unfold d1 () ()
            (suc (d0))))
        (mul a (pow a (d0))))
      (powS (a (d0)))))
  (ax_mp ((eq (mul a (d1)) a) (eq (mul a (pow a (d0))) a))
    (ax_mp ((eq (mul a (pow a (d0))) (mul a (d1))) (im (eq (mul a (d1)) a) (eq (mul a (pow a (d0))) a)))
      (eqtr ((mul a (pow a (d0))) (mul a (d1)) a))
      (ax_mp ((eq (pow a (d0)) (d1)) (eq (mul a (pow a (d0))) (mul a (d1))))
        (muleq2 (a (pow a (d0)) (d1)))
        (pow0 (a))))
    (mul12 (a)))))

(local theorem pow22 ((a nat ())) ()
  (eq (pow a (d2)) (mul a a))
()
(ax_mp ((eq (mul a (pow a (d1))) (mul a a)) (eq (pow a (d2)) (mul a a)))
  (ax_mp ((eq (pow a (d2)) (mul a (pow a (d1)))) (im (eq (mul a (pow a (d1))) (mul a a)) (eq (pow a (d2)) (mul a a))))
    (eqtr ((pow a (d2)) (mul a (pow a (d1))) (mul a a)))
    (:conv (eq (pow a (d2)) (mul a (pow a (d1))))
      (eq
        (pow
          a
          (:unfold d2 () ()
            (suc (d1))))
        (mul a (pow a (d1))))
      (powS (a (d1)))))
  (ax_mp ((eq (pow a (d1)) a) (eq (mul a (pow a (d1))) (mul a a)))
    (muleq2 (a (pow a (d1)) a))
    (pow12 (a)))))

(local theorem pow11 ((b nat ())) ()
  (eq (pow (d1) b) (d1))
((_1 nat) (x1 nat))
(:let H1 (eqidd ((eq _1 b) (d1)))
(:let H2 (eqidd ((eq _1 (d0)) (d1)))
(:let H3 (eqidd ((eq _1 x1) (d1)))
(:let H4 (eqidd ((eq _1 (suc x1)) (d1)))
(ind (_1 x1 b (eq (pow (d1) _1) (d1)) (eq (pow (d1) (d0)) (d1)) (eq (pow (d1) b) (d1)) (eq (pow (d1) x1) (d1)) (eq (pow (d1) (suc x1)) (d1)))
  (eqeqd ((eq _1 b) (pow (d1) _1) (pow (d1) b) (d1) (d1))
    (poweqd ((eq _1 b) (d1) (d1) _1 b)
      H1
      (id ((eq _1 b))))
    H1)
  (eqeqd ((eq _1 (d0)) (pow (d1) _1) (pow (d1) (d0)) (d1) (d1))
    (poweqd ((eq _1 (d0)) (d1) (d1) _1 (d0))
      H2
      (id ((eq _1 (d0)))))
    H2)
  (eqeqd ((eq _1 x1) (pow (d1) _1) (pow (d1) x1) (d1) (d1))
    (poweqd ((eq _1 x1) (d1) (d1) _1 x1)
      H3
      (id ((eq _1 x1))))
    H3)
  (eqeqd ((eq _1 (suc x1)) (pow (d1) _1) (pow (d1) (suc x1)) (d1) (d1))
    (poweqd ((eq _1 (suc x1)) (d1) (d1) _1 (suc x1))
      H4
      (id ((eq _1 (suc x1)))))
    H4)
  (pow0 ((d1)))
  (syl5eq ((eq (pow (d1) x1) (d1)) (pow (d1) (suc x1)) (mul (d1) (pow (d1) x1)) (d1))
    (powS ((d1) x1))
    (syl5eq ((eq (pow (d1) x1) (d1)) (mul (d1) (pow (d1) x1)) (pow (d1) x1) (d1))
      (mul11 ((pow (d1) x1)))
      (id ((eq (pow (d1) x1) (d1))))))))))))

(local theorem powpos ((a nat ()) (b nat ())) ()
  (im (lt (d0) a) (lt (d0) (pow a b)))
((_1 nat) (x1 nat))
(indd ((lt (d0) a) _1 x1 b (lt (d0) (pow a _1)) (lt (d0) (pow a (d0))) (lt (d0) (pow a b)) (lt (d0) (pow a x1)) (lt (d0) (pow a (suc x1))))
  (lteqd ((eq _1 b) (d0) (d0) (pow a _1) (pow a b))
    (eqidd ((eq _1 b) (d0)))
    (poweqd ((eq _1 b) a a _1 b)
      (eqidd ((eq _1 b) a))
      (id ((eq _1 b)))))
  (lteqd ((eq _1 (d0)) (d0) (d0) (pow a _1) (pow a (d0)))
    (eqidd ((eq _1 (d0)) (d0)))
    (poweqd ((eq _1 (d0)) a a _1 (d0))
      (eqidd ((eq _1 (d0)) a))
      (id ((eq _1 (d0))))))
  (lteqd ((eq _1 x1) (d0) (d0) (pow a _1) (pow a x1))
    (eqidd ((eq _1 x1) (d0)))
    (poweqd ((eq _1 x1) a a _1 x1)
      (eqidd ((eq _1 x1) a))
      (id ((eq _1 x1)))))
  (lteqd ((eq _1 (suc x1)) (d0) (d0) (pow a _1) (pow a (suc x1)))
    (eqidd ((eq _1 (suc x1)) (d0)))
    (poweqd ((eq _1 (suc x1)) a a _1 (suc x1))
      (eqidd ((eq _1 (suc x1)) a))
      (id ((eq _1 (suc x1))))))
  (a1i ((lt (d0) a) (lt (d0) (pow a (d0))))
    (mpbir ((lt (d0) (d1)) (lt (d0) (pow a (d0))))
      (ax_mp ((eq (pow a (d0)) (d1)) (iff (lt (d0) (pow a (d0))) (lt (d0) (d1))))
        (lteq2 ((d0) (pow a (d0)) (d1)))
        (pow0 (a)))
      (d0lt1 ())))
  (sylibr ((an (lt (d0) a) (lt (d0) (pow a x1))) (lt (d0) (mul a (pow a x1))) (lt (d0) (pow a (suc x1))))
    (ax_mp ((eq (pow a (suc x1)) (mul a (pow a x1))) (iff (lt (d0) (pow a (suc x1))) (lt (d0) (mul a (pow a x1)))))
      (lteq2 ((d0) (pow a (suc x1)) (mul a (pow a x1))))
      (powS (a x1)))
    (bi2i ((lt (d0) (mul a (pow a x1))) (an (lt (d0) a) (lt (d0) (pow a x1))))
      (mulpos (a (pow a x1)))))))

(local theorem powne0 ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (ne (pow a b) (d0)))
()
(sylbir ((ne a (d0)) (lt (d0) a) (ne (pow a b) (d0)))
  (lt01 (a))
  (sylib ((lt (d0) a) (lt (d0) (pow a b)) (ne (pow a b) (d0)))
    (lt01 ((pow a b)))
    (powpos (a b)))))

(local theorem pow2ne0 ((b nat ())) ()
  (ne (pow (d2) b) (d0))
()
(ax_mp ((ne (d2) (d0)) (ne (pow (d2) b) (d0)))
  (powne0 ((d2) b))
  (d2ne0 ())))

(local theorem powltid2 ((a nat ()) (b nat ())) ()
  (im (lt (d1) a) (lt b (pow a b)))
((_1 nat) (x1 nat))
(:let H1 (id ((eq _1 b)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x1)))
(:let H4 (id ((eq _1 (suc x1))))
(:let H5 (d0lt1 ())
(indd ((lt (d1) a) _1 x1 b (lt _1 (pow a _1)) (lt (d0) (pow a (d0))) (lt b (pow a b)) (lt x1 (pow a x1)) (lt (suc x1) (pow a (suc x1))))
  (lteqd ((eq _1 b) _1 b (pow a _1) (pow a b))
    H1
    (poweqd ((eq _1 b) a a _1 b)
      (eqidd ((eq _1 b) a))
      H1))
  (lteqd ((eq _1 (d0)) _1 (d0) (pow a _1) (pow a (d0)))
    H2
    (poweqd ((eq _1 (d0)) a a _1 (d0))
      (eqidd ((eq _1 (d0)) a))
      H2))
  (lteqd ((eq _1 x1) _1 x1 (pow a _1) (pow a x1))
    H3
    (poweqd ((eq _1 x1) a a _1 x1)
      (eqidd ((eq _1 x1) a))
      H3))
  (lteqd ((eq _1 (suc x1)) _1 (suc x1) (pow a _1) (pow a (suc x1)))
    H4
    (poweqd ((eq _1 (suc x1)) a a _1 (suc x1))
      (eqidd ((eq _1 (suc x1)) a))
      H4))
  (a1i ((lt (d1) a) (lt (d0) (pow a (d0))))
    (mpbir ((lt (d0) (d1)) (lt (d0) (pow a (d0))))
      (ax_mp ((eq (pow a (d0)) (d1)) (iff (lt (d0) (pow a (d0))) (lt (d0) (d1))))
        (lteq2 ((d0) (pow a (d0)) (d1)))
        (pow0 (a)))
      H5))
  (lelttrd ((an (lt (d1) a) (lt x1 (pow a x1))) (suc x1) (pow a x1) (pow a (suc x1)))
    (:conv (im (an (lt (d1) a) (lt x1 (pow a x1))) (le (suc x1) (pow a x1)))
      (im
        (an (lt (d1) a) (lt x1 (pow a x1)))
        (:sym (:unfold lt (x1 (pow a x1)) ()
          (le (suc x1) (pow a x1)))))
      (anr ((lt (d1) a) (lt x1 (pow a x1)))))
    (sylib ((an (lt (d1) a) (lt x1 (pow a x1))) (lt (mul (d1) (pow a x1)) (mul a (pow a x1))) (lt (pow a x1) (pow a (suc x1))))
      (ax_mp ((eq (mul a (pow a x1)) (pow a (suc x1))) (iff (lt (mul (d1) (pow a x1)) (mul a (pow a x1))) (lt (pow a x1) (pow a (suc x1)))))
        (ax_mp ((eq (mul (d1) (pow a x1)) (pow a x1)) (im (eq (mul a (pow a x1)) (pow a (suc x1))) (iff (lt (mul (d1) (pow a x1)) (mul a (pow a x1))) (lt (pow a x1) (pow a (suc x1))))))
          (lteq ((mul (d1) (pow a x1)) (pow a x1) (mul a (pow a x1)) (pow a (suc x1))))
          (mul11 ((pow a x1))))
        (ax_mp ((eq (pow a (suc x1)) (mul a (pow a x1))) (eq (mul a (pow a x1)) (pow a (suc x1))))
          (eqcom ((pow a (suc x1)) (mul a (pow a x1))))
          (powS (a x1))))
      (mpbid ((an (lt (d1) a) (lt x1 (pow a x1))) (lt (d1) a) (lt (mul (d1) (pow a x1)) (mul a (pow a x1))))
        (syl ((an (lt (d1) a) (lt x1 (pow a x1))) (lt (d0) (pow a x1)) (iff (lt (d1) a) (lt (mul (d1) (pow a x1)) (mul a (pow a x1)))))
          (ltmul1 ((d1) a (pow a x1)))
          (syl ((an (lt (d1) a) (lt x1 (pow a x1))) (lt (d0) a) (lt (d0) (pow a x1)))
            (powpos (a x1))
            (anwl ((lt (d1) a) (lt x1 (pow a x1)) (lt (d0) a))
              (ax_mp ((lt (d0) (d1)) (im (lt (d1) a) (lt (d0) a)))
                (lttr ((d0) (d1) a))
                H5))))
        (anl ((lt (d1) a) (lt x1 (pow a x1))))))))))))))

(local theorem powadd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pow a (add b c)) (mul (pow a b) (pow a c)))
((_1 nat) (x1 nat))
(:let H1 (eqidd ((eq _1 c) a))
(:let H2 (id ((eq _1 c)))
(:let H3 (eqidd ((eq _1 (d0)) a))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 x1) a))
(:let H6 (id ((eq _1 x1)))
(:let H7 (eqidd ((eq _1 (suc x1)) a))
(:let H8 (id ((eq _1 (suc x1))))
(ind (_1 x1 c (eq (pow a (add b _1)) (mul (pow a b) (pow a _1))) (eq (pow a (add b (d0))) (mul (pow a b) (pow a (d0)))) (eq (pow a (add b c)) (mul (pow a b) (pow a c))) (eq (pow a (add b x1)) (mul (pow a b) (pow a x1))) (eq (pow a (add b (suc x1))) (mul (pow a b) (pow a (suc x1)))))
  (eqeqd ((eq _1 c) (pow a (add b _1)) (pow a (add b c)) (mul (pow a b) (pow a _1)) (mul (pow a b) (pow a c)))
    (poweqd ((eq _1 c) a a (add b _1) (add b c))
      H1
      (addeqd ((eq _1 c) b b _1 c)
        (eqidd ((eq _1 c) b))
        H2))
    (muleqd ((eq _1 c) (pow a b) (pow a b) (pow a _1) (pow a c))
      (eqidd ((eq _1 c) (pow a b)))
      (poweqd ((eq _1 c) a a _1 c)
        H1
        H2)))
  (eqeqd ((eq _1 (d0)) (pow a (add b _1)) (pow a (add b (d0))) (mul (pow a b) (pow a _1)) (mul (pow a b) (pow a (d0))))
    (poweqd ((eq _1 (d0)) a a (add b _1) (add b (d0)))
      H3
      (addeqd ((eq _1 (d0)) b b _1 (d0))
        (eqidd ((eq _1 (d0)) b))
        H4))
    (muleqd ((eq _1 (d0)) (pow a b) (pow a b) (pow a _1) (pow a (d0)))
      (eqidd ((eq _1 (d0)) (pow a b)))
      (poweqd ((eq _1 (d0)) a a _1 (d0))
        H3
        H4)))
  (eqeqd ((eq _1 x1) (pow a (add b _1)) (pow a (add b x1)) (mul (pow a b) (pow a _1)) (mul (pow a b) (pow a x1)))
    (poweqd ((eq _1 x1) a a (add b _1) (add b x1))
      H5
      (addeqd ((eq _1 x1) b b _1 x1)
        (eqidd ((eq _1 x1) b))
        H6))
    (muleqd ((eq _1 x1) (pow a b) (pow a b) (pow a _1) (pow a x1))
      (eqidd ((eq _1 x1) (pow a b)))
      (poweqd ((eq _1 x1) a a _1 x1)
        H5
        H6)))
  (eqeqd ((eq _1 (suc x1)) (pow a (add b _1)) (pow a (add b (suc x1))) (mul (pow a b) (pow a _1)) (mul (pow a b) (pow a (suc x1))))
    (poweqd ((eq _1 (suc x1)) a a (add b _1) (add b (suc x1)))
      H7
      (addeqd ((eq _1 (suc x1)) b b _1 (suc x1))
        (eqidd ((eq _1 (suc x1)) b))
        H8))
    (muleqd ((eq _1 (suc x1)) (pow a b) (pow a b) (pow a _1) (pow a (suc x1)))
      (eqidd ((eq _1 (suc x1)) (pow a b)))
      (poweqd ((eq _1 (suc x1)) a a _1 (suc x1))
        H7
        H8)))
  (ax_mp ((eq (mul (pow a b) (pow a (d0))) (pow a b)) (eq (pow a (add b (d0))) (mul (pow a b) (pow a (d0)))))
    (ax_mp ((eq (pow a (add b (d0))) (pow a b)) (im (eq (mul (pow a b) (pow a (d0))) (pow a b)) (eq (pow a (add b (d0))) (mul (pow a b) (pow a (d0))))))
      (eqtr4 ((pow a (add b (d0))) (pow a b) (mul (pow a b) (pow a (d0)))))
      (ax_mp ((eq (add b (d0)) b) (eq (pow a (add b (d0))) (pow a b)))
        (poweq2 (a (add b (d0)) b))
        (add0 (b))))
    (ax_mp ((eq (mul (pow a b) (d1)) (pow a b)) (eq (mul (pow a b) (pow a (d0))) (pow a b)))
      (ax_mp ((eq (mul (pow a b) (pow a (d0))) (mul (pow a b) (d1))) (im (eq (mul (pow a b) (d1)) (pow a b)) (eq (mul (pow a b) (pow a (d0))) (pow a b))))
        (eqtr ((mul (pow a b) (pow a (d0))) (mul (pow a b) (d1)) (pow a b)))
        (ax_mp ((eq (pow a (d0)) (d1)) (eq (mul (pow a b) (pow a (d0))) (mul (pow a b) (d1))))
          (muleq2 ((pow a b) (pow a (d0)) (d1)))
          (pow0 (a))))
      (mul12 ((pow a b)))))
  (eqtr4g ((eq (pow a (add b x1)) (mul (pow a b) (pow a x1))) (pow a (suc (add b x1))) (mul (pow a b) (mul (pow a x1) a)) (pow a (add b (suc x1))) (mul (pow a b) (pow a (suc x1))))
    (ax_mp ((eq (add b (suc x1)) (suc (add b x1))) (eq (pow a (add b (suc x1))) (pow a (suc (add b x1)))))
      (poweq2 (a (add b (suc x1)) (suc (add b x1))))
      (addS (b x1)))
    (ax_mp ((eq (pow a (suc x1)) (mul (pow a x1) a)) (eq (mul (pow a b) (pow a (suc x1))) (mul (pow a b) (mul (pow a x1) a))))
      (muleq2 ((pow a b) (pow a (suc x1)) (mul (pow a x1) a)))
      (powS2 (a x1)))
    (syl5eq ((eq (pow a (add b x1)) (mul (pow a b) (pow a x1))) (pow a (suc (add b x1))) (mul (pow a (add b x1)) a) (mul (pow a b) (mul (pow a x1) a)))
      (powS2 (a (add b x1)))
      (syl6eq ((eq (pow a (add b x1)) (mul (pow a b) (pow a x1))) (mul (pow a (add b x1)) a) (mul (mul (pow a b) (pow a x1)) a) (mul (pow a b) (mul (pow a x1) a)))
        (mulass ((pow a b) (pow a x1) a))
        (muleq1 ((pow a (add b x1)) (mul (pow a b) (pow a x1)) a)))))))))))))))

(local theorem powmul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pow a (mul b c)) (pow (pow a b) c))
((_1 nat) (x1 nat))
(:let H1 (id ((eq _1 c)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x1)))
(:let H4 (id ((eq _1 (suc x1))))
(ind (_1 x1 c (eq (pow a (mul b _1)) (pow (pow a b) _1)) (eq (pow a (mul b (d0))) (pow (pow a b) (d0))) (eq (pow a (mul b c)) (pow (pow a b) c)) (eq (pow a (mul b x1)) (pow (pow a b) x1)) (eq (pow a (mul b (suc x1))) (pow (pow a b) (suc x1))))
  (eqeqd ((eq _1 c) (pow a (mul b _1)) (pow a (mul b c)) (pow (pow a b) _1) (pow (pow a b) c))
    (poweqd ((eq _1 c) a a (mul b _1) (mul b c))
      (eqidd ((eq _1 c) a))
      (muleqd ((eq _1 c) b b _1 c)
        (eqidd ((eq _1 c) b))
        H1))
    (poweqd ((eq _1 c) (pow a b) (pow a b) _1 c)
      (eqidd ((eq _1 c) (pow a b)))
      H1))
  (eqeqd ((eq _1 (d0)) (pow a (mul b _1)) (pow a (mul b (d0))) (pow (pow a b) _1) (pow (pow a b) (d0)))
    (poweqd ((eq _1 (d0)) a a (mul b _1) (mul b (d0)))
      (eqidd ((eq _1 (d0)) a))
      (muleqd ((eq _1 (d0)) b b _1 (d0))
        (eqidd ((eq _1 (d0)) b))
        H2))
    (poweqd ((eq _1 (d0)) (pow a b) (pow a b) _1 (d0))
      (eqidd ((eq _1 (d0)) (pow a b)))
      H2))
  (eqeqd ((eq _1 x1) (pow a (mul b _1)) (pow a (mul b x1)) (pow (pow a b) _1) (pow (pow a b) x1))
    (poweqd ((eq _1 x1) a a (mul b _1) (mul b x1))
      (eqidd ((eq _1 x1) a))
      (muleqd ((eq _1 x1) b b _1 x1)
        (eqidd ((eq _1 x1) b))
        H3))
    (poweqd ((eq _1 x1) (pow a b) (pow a b) _1 x1)
      (eqidd ((eq _1 x1) (pow a b)))
      H3))
  (eqeqd ((eq _1 (suc x1)) (pow a (mul b _1)) (pow a (mul b (suc x1))) (pow (pow a b) _1) (pow (pow a b) (suc x1)))
    (poweqd ((eq _1 (suc x1)) a a (mul b _1) (mul b (suc x1)))
      (eqidd ((eq _1 (suc x1)) a))
      (muleqd ((eq _1 (suc x1)) b b _1 (suc x1))
        (eqidd ((eq _1 (suc x1)) b))
        H4))
    (poweqd ((eq _1 (suc x1)) (pow a b) (pow a b) _1 (suc x1))
      (eqidd ((eq _1 (suc x1)) (pow a b)))
      H4))
  (ax_mp ((eq (pow a (d0)) (pow (pow a b) (d0))) (eq (pow a (mul b (d0))) (pow (pow a b) (d0))))
    (ax_mp ((eq (pow a (mul b (d0))) (pow a (d0))) (im (eq (pow a (d0)) (pow (pow a b) (d0))) (eq (pow a (mul b (d0))) (pow (pow a b) (d0)))))
      (eqtr ((pow a (mul b (d0))) (pow a (d0)) (pow (pow a b) (d0))))
      (ax_mp ((eq (mul b (d0)) (d0)) (eq (pow a (mul b (d0))) (pow a (d0))))
        (poweq2 (a (mul b (d0)) (d0)))
        (mul0 (b))))
    (ax_mp ((eq (pow (pow a b) (d0)) (d1)) (eq (pow a (d0)) (pow (pow a b) (d0))))
      (ax_mp ((eq (pow a (d0)) (d1)) (im (eq (pow (pow a b) (d0)) (d1)) (eq (pow a (d0)) (pow (pow a b) (d0)))))
        (eqtr4 ((pow a (d0)) (d1) (pow (pow a b) (d0))))
        (pow0 (a)))
      (pow0 ((pow a b)))))
  (syl5eq ((eq (pow a (mul b x1)) (pow (pow a b) x1)) (pow a (mul b (suc x1))) (pow a (add (mul b x1) b)) (pow (pow a b) (suc x1)))
    (ax_mp ((eq (mul b (suc x1)) (add (mul b x1) b)) (eq (pow a (mul b (suc x1))) (pow a (add (mul b x1) b))))
      (poweq2 (a (mul b (suc x1)) (add (mul b x1) b)))
      (mulS (b x1)))
    (syl5eq ((eq (pow a (mul b x1)) (pow (pow a b) x1)) (pow a (add (mul b x1) b)) (mul (pow a (mul b x1)) (pow a b)) (pow (pow a b) (suc x1)))
      (powadd (a (mul b x1) b))
      (syl6eqr ((eq (pow a (mul b x1)) (pow (pow a b) x1)) (mul (pow a (mul b x1)) (pow a b)) (mul (pow (pow a b) x1) (pow a b)) (pow (pow a b) (suc x1)))
        (powS2 ((pow a b) x1))
        (muleq1 ((pow a (mul b x1)) (pow (pow a b) x1) (pow a b))))))))))))

(local theorem powdvd ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b c) (dvd (pow a b) (pow a c)))
()
(mpbii ((le b c) (dvd (pow a b) (mul (pow a (sub c b)) (pow a b))) (dvd (pow a b) (pow a c)))
  (dvdmul1 ((pow a b) (pow a (sub c b))))
  (dvdeq2d ((le b c) (pow a b) (mul (pow a (sub c b)) (pow a b)) (pow a c))
    (syl5eqr ((le b c) (mul (pow a (sub c b)) (pow a b)) (pow a (add (sub c b) b)) (pow a c))
      (powadd (a (sub c b) b))
      (poweq2d ((le b c) a (add (sub c b) b) c)
        (npcan (c b)))))))

(local theorem powdvd1 ((a nat ()) (b nat ())) ()
  (im (lt (d0) b) (dvd a (pow a b)))
()
(sylib ((lt (d0) b) (dvd (pow a (d1)) (pow a b)) (dvd a (pow a b)))
  (ax_mp ((eq (pow a (d1)) a) (iff (dvd (pow a (d1)) (pow a b)) (dvd a (pow a b))))
    (dvdeq1 ((pow a (d1)) a (pow a b)))
    (pow12 (a)))
  (:conv (im (lt (d0) b) (dvd (pow a (d1)) (pow a b)))
    (im
      (:unfold lt ((d0) b) ()
        (le (suc (d0)) b))
      (dvd
        (pow
          a
          (:unfold d1 () ()
            (suc (d0))))
        (pow a b)))
    (powdvd (a (suc (d0)) b)))))

(local theorem lepow2a ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne a (d0)) (im (le b c) (le (pow a b) (pow a c))))
()
(exp ((ne a (d0)) (le b c) (le (pow a b) (pow a c)))
  (dvdle ((an (ne a (d0)) (le b c)) (pow a b) (pow a c))
    (anwl ((ne a (d0)) (le b c) (ne (pow a c) (d0)))
      (powne0 (a c)))
    (anwr ((ne a (d0)) (le b c) (dvd (pow a b) (pow a c)))
      (powdvd (a b c))))))

(local theorem ltpow2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d1) a) (iff (lt b c) (lt (pow a b) (pow a c))))
()
(:let H1 (lttr ((d0) (d1) a))
(:let H2 (d0lt1 ())
(:let H3 (ax_mp ((lt (d0) (d1)) (im (lt (d1) a) (lt (d0) a)))
  H1
  H2)
(ibida ((lt (d1) a) (lt b c) (lt (pow a b) (pow a c)))
  (mpbid ((an (lt (d1) a) (lt b c)) (lt (mul (d1) (pow a b)) (mul (pow a (sub c b)) (pow a b))) (lt (pow a b) (pow a c)))
    (lteqd ((an (lt (d1) a) (lt b c)) (mul (d1) (pow a b)) (pow a b) (mul (pow a (sub c b)) (pow a b)) (pow a c))
      (a1i ((an (lt (d1) a) (lt b c)) (eq (mul (d1) (pow a b)) (pow a b)))
        (mul11 ((pow a b))))
      (syl5eqr ((an (lt (d1) a) (lt b c)) (mul (pow a (sub c b)) (pow a b)) (pow a (add (sub c b) b)) (pow a c))
        (powadd (a (sub c b) b))
        (poweq2d ((an (lt (d1) a) (lt b c)) a (add (sub c b) b) c)
          (syl ((an (lt (d1) a) (lt b c)) (le b c) (eq (add (sub c b) b) c))
            (npcan (c b))
            (anwr ((lt (d1) a) (lt b c) (le b c))
              (ltle (b c)))))))
    (mpbid ((an (lt (d1) a) (lt b c)) (lt (d1) (pow a (sub c b))) (lt (mul (d1) (pow a b)) (mul (pow a (sub c b)) (pow a b))))
      (syl ((an (lt (d1) a) (lt b c)) (lt (d0) (pow a b)) (iff (lt (d1) (pow a (sub c b))) (lt (mul (d1) (pow a b)) (mul (pow a (sub c b)) (pow a b)))))
        (ltmul1 ((d1) (pow a (sub c b)) (pow a b)))
        (syl ((an (lt (d1) a) (lt b c)) (lt (d0) a) (lt (d0) (pow a b)))
          (powpos (a b))
          (anwl ((lt (d1) a) (lt b c) (lt (d0) a))
            H3)))
      (lelttrd ((an (lt (d1) a) (lt b c)) (d1) (sub c b) (pow a (sub c b)))
        (sylib ((an (lt (d1) a) (lt b c)) (lt b c) (le (d1) (sub c b)))
          (:conv (iff (lt b c) (le (d1) (sub c b)))
            (iff
              (lt b c)
              (:sym (:unfold lt ((d0) (sub c b)) ()
                (le
                  (:sym (:unfold d1 () ()
                    (suc (d0))))
                  (sub c b)))))
            (subpos (b c)))
          (anr ((lt (d1) a) (lt b c))))
        (anwl ((lt (d1) a) (lt b c) (lt (sub c b) (pow a (sub c b))))
          (powltid2 (a (sub c b)))))))
  (imp ((lt (d1) a) (lt (pow a b) (pow a c)) (lt b c))
    (sylibr ((lt (d1) a) (im (not (le (pow a c) (pow a b))) (not (le c b))) (im (lt (pow a b) (pow a c)) (lt b c)))
      (imeqi ((lt (pow a b) (pow a c)) (not (le (pow a c) (pow a b))) (lt b c) (not (le c b)))
        (ltnle ((pow a b) (pow a c)))
        (ltnle (b c)))
      (con3d ((lt (d1) a) (le c b) (le (pow a c) (pow a b)))
        (syl ((lt (d1) a) (ne a (d0)) (im (le c b) (le (pow a c) (pow a b))))
          (lepow2a (a c b))
          (sylib ((lt (d1) a) (lt (d0) a) (ne a (d0)))
            (lt01 (a))
            H3))))))))))

(local theorem lepow2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d1) a) (iff (le b c) (le (pow a b) (pow a c))))
()
(syl5bb ((lt (d1) a) (le b c) (not (lt c b)) (le (pow a b) (pow a c)))
  (lenlt (b c))
  (syl6bbr ((lt (d1) a) (not (lt c b)) (not (lt (pow a c) (pow a b))) (le (pow a b) (pow a c)))
    (lenlt ((pow a b) (pow a c)))
    (noteqd ((lt (d1) a) (lt c b) (lt (pow a c) (pow a b)))
      (ltpow2 (a c b))))))

(def shl ((a nat ()) (n nat ())) (nat ())
()
(mul a (pow (d2) n)))

(local theorem shleqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (shl _a1 _n1) (shl _a2 _n2)))
()
(:conv (im _G (eq (shl _a1 _n1) (shl _a2 _n2)))
  (im
    _G
    (eq
      (:unfold shl (_a1 _n1) ()
        (mul _a1 (pow (d2) _n1)))
      (:unfold shl (_a2 _n2) ()
        (mul _a2 (pow (d2) _n2)))))
  (muleqd (_G _a1 _a2 (pow (d2) _n1) (pow (d2) _n2))
    _ah
    (poweqd (_G (d2) (d2) _n1 _n2)
      (eqidd (_G (d2)))
      _nh))))

(local theorem shleq ((_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _n1 _n2) (eq (shl _a1 _n1) (shl _a2 _n2))))
()
(exp ((eq _a1 _a2) (eq _n1 _n2) (eq (shl _a1 _n1) (shl _a2 _n2)))
  (shleqd ((an (eq _a1 _a2) (eq _n1 _n2)) _a1 _a2 _n1 _n2)
    (anl ((eq _a1 _a2) (eq _n1 _n2)))
    (anr ((eq _a1 _a2) (eq _n1 _n2))))))

(local theorem shleq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (n nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (shl _a1 n) (shl _a2 n)))
()
(shleqd (_G _a1 _a2 n n)
  _h
  (eqidd (_G n))))

(local theorem shleq1 ((_a1 nat ()) (_a2 nat ()) (n nat ())) ()
  (im (eq _a1 _a2) (eq (shl _a1 n) (shl _a2 n)))
()
(shleq1d ((eq _a1 _a2) _a1 _a2 n)
  (id ((eq _a1 _a2)))))

(local theorem shleq2d ((_G wff ()) (a nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (shl a _n1) (shl a _n2)))
()
(shleqd (_G a a _n1 _n2)
  (eqidd (_G a))
  _h))

(local theorem shleq2 ((a nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (shl a _n1) (shl a _n2)))
()
(shleq2d ((eq _n1 _n2) a _n1 _n2)
  (id ((eq _n1 _n2)))))

(def shr ((a nat ()) (n nat ())) (nat ())
()
(div a (pow (d2) n)))

(local theorem shreqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (shr _a1 _n1) (shr _a2 _n2)))
()
(:conv (im _G (eq (shr _a1 _n1) (shr _a2 _n2)))
  (im
    _G
    (eq
      (:unfold shr (_a1 _n1) ()
        (div _a1 (pow (d2) _n1)))
      (:unfold shr (_a2 _n2) ()
        (div _a2 (pow (d2) _n2)))))
  (diveqd (_G _a1 _a2 (pow (d2) _n1) (pow (d2) _n2))
    _ah
    (poweqd (_G (d2) (d2) _n1 _n2)
      (eqidd (_G (d2)))
      _nh))))

(local theorem shreq ((_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _n1 _n2) (eq (shr _a1 _n1) (shr _a2 _n2))))
()
(exp ((eq _a1 _a2) (eq _n1 _n2) (eq (shr _a1 _n1) (shr _a2 _n2)))
  (shreqd ((an (eq _a1 _a2) (eq _n1 _n2)) _a1 _a2 _n1 _n2)
    (anl ((eq _a1 _a2) (eq _n1 _n2)))
    (anr ((eq _a1 _a2) (eq _n1 _n2))))))

(local theorem shreq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (n nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (shr _a1 n) (shr _a2 n)))
()
(shreqd (_G _a1 _a2 n n)
  _h
  (eqidd (_G n))))

(local theorem shreq1 ((_a1 nat ()) (_a2 nat ()) (n nat ())) ()
  (im (eq _a1 _a2) (eq (shr _a1 n) (shr _a2 n)))
()
(shreq1d ((eq _a1 _a2) _a1 _a2 n)
  (id ((eq _a1 _a2)))))

(local theorem shreq2d ((_G wff ()) (a nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (shr a _n1) (shr a _n2)))
()
(shreqd (_G a a _n1 _n2)
  (eqidd (_G a))
  _h))

(local theorem shreq2 ((a nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (shr a _n1) (shr a _n2)))
()
(shreq2d ((eq _n1 _n2) a _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem shl01 ((b nat ())) ()
  (eq (shl (d0) b) (d0))
()
(:conv (eq (shl (d0) b) (d0))
  (eq
    (:unfold shl ((d0) b) ()
      (mul (d0) (pow (d2) b)))
    (d0))
  (mul01 ((pow (d2) b)))))

(local theorem shl02 ((a nat ())) ()
  (eq (shl a (d0)) a)
()
(ax_mp ((eq (mul a (d1)) a) (eq (shl a (d0)) a))
  (ax_mp ((eq (shl a (d0)) (mul a (d1))) (im (eq (mul a (d1)) a) (eq (shl a (d0)) a)))
    (eqtr ((shl a (d0)) (mul a (d1)) a))
    (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (shl a (d0)) (mul a (d1))))
      (:conv (im (eq (pow (d2) (d0)) (d1)) (eq (shl a (d0)) (mul a (d1))))
        (im
          (eq (pow (d2) (d0)) (d1))
          (eq
            (:unfold shl (a (d0)) ()
              (mul a (pow (d2) (d0))))
            (mul a (d1))))
        (muleq2 (a (pow (d2) (d0)) (d1))))
      (pow0 ((d2)))))
  (mul12 (a))))

(local theorem shl11 ((b nat ())) ()
  (eq (shl (d1) b) (pow (d2) b))
()
(:conv (eq (shl (d1) b) (pow (d2) b))
  (eq
    (:unfold shl ((d1) b) ()
      (mul (d1) (pow (d2) b)))
    (pow (d2) b))
  (mul11 ((pow (d2) b)))))

(local theorem shl12 ((a nat ())) ()
  (eq (shl a (d1)) (b0 a))
()
(ax_mp ((eq (mul a (d2)) (b0 a)) (eq (shl a (d1)) (b0 a)))
  (ax_mp ((eq (shl a (d1)) (mul a (d2))) (im (eq (mul a (d2)) (b0 a)) (eq (shl a (d1)) (b0 a))))
    (eqtr ((shl a (d1)) (mul a (d2)) (b0 a)))
    (ax_mp ((eq (pow (d2) (d1)) (d2)) (eq (shl a (d1)) (mul a (d2))))
      (:conv (im (eq (pow (d2) (d1)) (d2)) (eq (shl a (d1)) (mul a (d2))))
        (im
          (eq (pow (d2) (d1)) (d2))
          (eq
            (:unfold shl (a (d1)) ()
              (mul a (pow (d2) (d1))))
            (mul a (d2))))
        (muleq2 (a (pow (d2) (d1)) (d2))))
      (pow12 ((d2)))))
  (b0mul22 (a))))

(local theorem shlshl ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shl (shl a b) c) (shl a (add b c)))
()
(ax_mp ((eq (shl a (add b c)) (mul a (mul (pow (d2) b) (pow (d2) c)))) (eq (shl (shl a b) c) (shl a (add b c))))
  (ax_mp ((eq (shl (shl a b) c) (mul a (mul (pow (d2) b) (pow (d2) c)))) (im (eq (shl a (add b c)) (mul a (mul (pow (d2) b) (pow (d2) c)))) (eq (shl (shl a b) c) (shl a (add b c)))))
    (eqtr4 ((shl (shl a b) c) (mul a (mul (pow (d2) b) (pow (d2) c))) (shl a (add b c))))
    (:conv (eq (shl (shl a b) c) (mul a (mul (pow (d2) b) (pow (d2) c))))
      (eq
        (:unfold shl ((shl a b) c) ()
          (mul
            (:unfold shl (a b) ()
              (mul a (pow (d2) b)))
            (pow (d2) c)))
        (mul a (mul (pow (d2) b) (pow (d2) c))))
      (mulass (a (pow (d2) b) (pow (d2) c)))))
  (ax_mp ((eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (shl a (add b c)) (mul a (mul (pow (d2) b) (pow (d2) c)))))
    (:conv (im (eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (shl a (add b c)) (mul a (mul (pow (d2) b) (pow (d2) c)))))
      (im
        (eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c)))
        (eq
          (:unfold shl (a (add b c)) ()
            (mul a (pow (d2) (add b c))))
          (mul a (mul (pow (d2) b) (pow (d2) c)))))
      (muleq2 (a (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c)))))
    (powadd ((d2) b c)))))

(local theorem shladd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shl (add a b) c) (add (shl a c) (shl b c)))
()
(:conv (eq (shl (add a b) c) (add (shl a c) (shl b c)))
  (eq
    (:unfold shl ((add a b) c) ()
      (mul (add a b) (pow (d2) c)))
    (add
      (:unfold shl (a c) ()
        (mul a (pow (d2) c)))
      (:unfold shl (b c) ()
        (mul b (pow (d2) c)))))
  (addmul (a b (pow (d2) c)))))

(local theorem shlpow2dvd ((a nat ()) (b nat ())) ()
  (dvd (pow (d2) b) (shl a b))
()
(:conv (dvd (pow (d2) b) (shl a b))
  (dvd
    (pow (d2) b)
    (:unfold shl (a b) ()
      (mul a (pow (d2) b))))
  (dvdmul1 ((pow (d2) b) a))))

(local theorem shl2dvd ((a nat ()) (b nat ())) ()
  (im (lt (d0) b) (dvd (d2) (shl a b)))
()
(rsyl ((lt (d0) b) (dvd (d2) (pow (d2) b)) (dvd (d2) (shl a b)))
  (powdvd1 ((d2) b))
  (mpi ((dvd (d2) (pow (d2) b)) (dvd (pow (d2) b) (shl a b)) (dvd (d2) (shl a b)))
    (shlpow2dvd (a b))
    (dvdtr ((d2) (pow (d2) b) (shl a b))))))

(local theorem shr01 ((b nat ())) ()
  (eq (shr (d0) b) (d0))
()
(:conv (eq (shr (d0) b) (d0))
  (eq
    (:unfold shr ((d0) b) ()
      (div (d0) (pow (d2) b)))
    (d0))
  (div01 ((pow (d2) b)))))

(local theorem shr02 ((a nat ())) ()
  (eq (shr a (d0)) a)
()
(ax_mp ((eq (div a (d1)) a) (eq (shr a (d0)) a))
  (ax_mp ((eq (shr a (d0)) (div a (d1))) (im (eq (div a (d1)) a) (eq (shr a (d0)) a)))
    (eqtr ((shr a (d0)) (div a (d1)) a))
    (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (shr a (d0)) (div a (d1))))
      (:conv (im (eq (pow (d2) (d0)) (d1)) (eq (shr a (d0)) (div a (d1))))
        (im
          (eq (pow (d2) (d0)) (d1))
          (eq
            (:unfold shr (a (d0)) ()
              (div a (pow (d2) (d0))))
            (div a (d1))))
        (diveq2 (a (pow (d2) (d0)) (d1))))
      (pow0 ((d2)))))
  (div12 (a))))

(local theorem shr12 ((a nat ())) ()
  (eq (shr a (d1)) (div a (d2)))
()
(ax_mp ((eq (pow (d2) (d1)) (d2)) (eq (shr a (d1)) (div a (d2))))
  (:conv (im (eq (pow (d2) (d1)) (d2)) (eq (shr a (d1)) (div a (d2))))
    (im
      (eq (pow (d2) (d1)) (d2))
      (eq
        (:unfold shr (a (d1)) ()
          (div a (pow (d2) (d1))))
        (div a (d2))))
    (diveq2 (a (pow (d2) (d1)) (d2))))
  (pow12 ((d2)))))

(local theorem shrshr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shr (shr a b) c) (shr a (add b c)))
()
(ax_mp ((eq (shr a (add b c)) (div a (mul (pow (d2) b) (pow (d2) c)))) (eq (shr (shr a b) c) (shr a (add b c))))
  (ax_mp ((eq (shr (shr a b) c) (div a (mul (pow (d2) b) (pow (d2) c)))) (im (eq (shr a (add b c)) (div a (mul (pow (d2) b) (pow (d2) c)))) (eq (shr (shr a b) c) (shr a (add b c)))))
    (eqtr4 ((shr (shr a b) c) (div a (mul (pow (d2) b) (pow (d2) c))) (shr a (add b c))))
    (:conv (eq (shr (shr a b) c) (div a (mul (pow (d2) b) (pow (d2) c))))
      (eq
        (:unfold shr ((shr a b) c) ()
          (div
            (:unfold shr (a b) ()
              (div a (pow (d2) b)))
            (pow (d2) c)))
        (div a (mul (pow (d2) b) (pow (d2) c))))
      (divdiv (a (pow (d2) b) (pow (d2) c)))))
  (ax_mp ((eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (shr a (add b c)) (div a (mul (pow (d2) b) (pow (d2) c)))))
    (:conv (im (eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (shr a (add b c)) (div a (mul (pow (d2) b) (pow (d2) c)))))
      (im
        (eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c)))
        (eq
          (:unfold shr (a (add b c)) ()
            (div a (pow (d2) (add b c))))
          (div a (mul (pow (d2) b) (pow (d2) c)))))
      (diveq2 (a (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c)))))
    (powadd ((d2) b c)))))

(local theorem shrmodadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shr (mod a (pow (d2) (add b c))) b) (mod (shr a b) (pow (d2) c)))
()
(ax_mp ((eq (mod (shr a b) (pow (d2) c)) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)) (eq (shr (mod a (pow (d2) (add b c))) b) (mod (shr a b) (pow (d2) c))))
  (ax_mp ((eq (shr (mod a (pow (d2) (add b c))) b) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)) (im (eq (mod (shr a b) (pow (d2) c)) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)) (eq (shr (mod a (pow (d2) (add b c))) b) (mod (shr a b) (pow (d2) c)))))
    (eqtr4 ((shr (mod a (pow (d2) (add b c))) b) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b) (mod (shr a b) (pow (d2) c))))
    (ax_mp ((eq (mod a (pow (d2) (add b c))) (mod a (mul (pow (d2) b) (pow (d2) c)))) (eq (shr (mod a (pow (d2) (add b c))) b) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)))
      (shreq1 ((mod a (pow (d2) (add b c))) (mod a (mul (pow (d2) b) (pow (d2) c))) b))
      (ax_mp ((eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (mod a (pow (d2) (add b c))) (mod a (mul (pow (d2) b) (pow (d2) c)))))
        (modeq2 (a (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))))
        (powadd ((d2) b c)))))
  (:conv (eq (mod (shr a b) (pow (d2) c)) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b))
    (eq
      (mod
        (:unfold shr (a b) ()
          (div a (pow (d2) b)))
        (pow (d2) c))
      (:unfold shr ((mod a (mul (pow (d2) b) (pow (d2) c))) b) ()
        (div (mod a (mul (pow (d2) b) (pow (d2) c))) (pow (d2) b))))
    (divmod1 (a (pow (d2) b) (pow (d2) c))))))

(local theorem shrmodadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shr (mod a (pow (d2) (add b c))) c) (mod (shr a c) (pow (d2) b)))
()
(ax_mp ((eq (shr (mod a (pow (d2) (add c b))) c) (mod (shr a c) (pow (d2) b))) (eq (shr (mod a (pow (d2) (add b c))) c) (mod (shr a c) (pow (d2) b))))
  (ax_mp ((eq (shr (mod a (pow (d2) (add b c))) c) (shr (mod a (pow (d2) (add c b))) c)) (im (eq (shr (mod a (pow (d2) (add c b))) c) (mod (shr a c) (pow (d2) b))) (eq (shr (mod a (pow (d2) (add b c))) c) (mod (shr a c) (pow (d2) b)))))
    (eqtr ((shr (mod a (pow (d2) (add b c))) c) (shr (mod a (pow (d2) (add c b))) c) (mod (shr a c) (pow (d2) b))))
    (ax_mp ((eq (mod a (pow (d2) (add b c))) (mod a (pow (d2) (add c b)))) (eq (shr (mod a (pow (d2) (add b c))) c) (shr (mod a (pow (d2) (add c b))) c)))
      (shreq1 ((mod a (pow (d2) (add b c))) (mod a (pow (d2) (add c b))) c))
      (ax_mp ((eq (pow (d2) (add b c)) (pow (d2) (add c b))) (eq (mod a (pow (d2) (add b c))) (mod a (pow (d2) (add c b)))))
        (modeq2 (a (pow (d2) (add b c)) (pow (d2) (add c b))))
        (ax_mp ((eq (add b c) (add c b)) (eq (pow (d2) (add b c)) (pow (d2) (add c b))))
          (poweq2 ((d2) (add b c) (add c b)))
          (addcom (b c))))))
  (shrmodadd1 (a c b))))

(local theorem shrmodsub ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le c b) (eq (shr (mod a (pow (d2) b)) c) (mod (shr a c) (pow (d2) (sub b c)))))
()
(syl6eq ((le c b) (shr (mod a (pow (d2) b)) c) (shr (mod a (pow (d2) (add (sub b c) c))) c) (mod (shr a c) (pow (d2) (sub b c))))
  (shrmodadd2 (a (sub b c) c))
  (shreq1d ((le c b) (mod a (pow (d2) b)) (mod a (pow (d2) (add (sub b c) c))) c)
    (modeq2d ((le c b) a (pow (d2) b) (pow (d2) (add (sub b c) c)))
      (poweq2d ((le c b) (d2) b (add (sub b c) c))
        (eqcomd ((le c b) (add (sub b c) c) b)
          (npcan (b c))))))))

(local theorem shrshladd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shr (add (shl a b) c) b) (add a (shr c b)))
()
(ax_mp ((ne (pow (d2) b) (d0)) (eq (shr (add (shl a b) c) b) (add a (shr c b))))
  (:conv (im (ne (pow (d2) b) (d0)) (eq (shr (add (shl a b) c) b) (add a (shr c b))))
    (im
      (ne (pow (d2) b) (d0))
      (eq
        (:unfold shr ((add (shl a b) c) b) ()
          (div
            (add
              (:unfold shl (a b) ()
                (mul a (pow (d2) b)))
              c)
            (pow (d2) b)))
        (add
          a
          (:unfold shr (c b) ()
            (div c (pow (d2) b))))))
    (muladddiv1 (a (pow (d2) b) c)))
  (pow2ne0 (b))))

(local theorem shrshladdid ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt c (pow (d2) b)) (eq (shr (add (shl a b) c) b) a))
()
(ax_mp ((ne (pow (d2) b) (d0)) (im (lt c (pow (d2) b)) (eq (shr (add (shl a b) c) b) a)))
  (:conv (im (ne (pow (d2) b) (d0)) (im (lt c (pow (d2) b)) (eq (shr (add (shl a b) c) b) a)))
    (im
      (ne (pow (d2) b) (d0))
      (im
        (lt c (pow (d2) b))
        (eq
          (:unfold shr ((add (shl a b) c) b) ()
            (div
              (add
                (:unfold shl (a b) ()
                  (mul a (pow (d2) b)))
                c)
              (pow (d2) b)))
          a)))
    (exp ((ne (pow (d2) b) (d0)) (lt c (pow (d2) b)) (eq (div (add (mul a (pow (d2) b)) c) (pow (d2) b)) a))
      (muladddiv1lt (a (pow (d2) b) c))))
  (pow2ne0 (b))))

(local theorem shrshlid ((a nat ()) (b nat ())) ()
  (eq (shr (shl a b) b) a)
()
(ax_mp ((ne (pow (d2) b) (d0)) (eq (shr (shl a b) b) a))
  (:conv (im (ne (pow (d2) b) (d0)) (eq (shr (shl a b) b) a))
    (im
      (ne (pow (d2) b) (d0))
      (eq
        (:unfold shr ((shl a b) b) ()
          (div
            (:unfold shl (a b) ()
              (mul a (pow (d2) b)))
            (pow (d2) b)))
        a))
    (muldiv1 (a (pow (d2) b))))
  (pow2ne0 (b))))

(local theorem shrshl1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le c b) (eq (shr (shl a b) c) (shl a (sub b c))))
()
(syl6eq ((le c b) (shr (shl a b) c) (shr (shl (shl a (sub b c)) c) c) (shl a (sub b c)))
  (shrshlid ((shl a (sub b c)) c))
  (shreq1d ((le c b) (shl a b) (shl (shl a (sub b c)) c) c)
    (syl6eqr ((le c b) (shl a b) (shl a (add (sub b c) c)) (shl (shl a (sub b c)) c))
      (shlshl (a (sub b c) c))
      (shleq2d ((le c b) a b (add (sub b c) c))
        (eqcomd ((le c b) (add (sub b c) c) b)
          (npcan (b c))))))))

(local theorem shrshl2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b c) (eq (shr (shl a b) c) (shr a (sub c b))))
()
(syl6eq ((le b c) (shr (shl a b) c) (shr (shr (shl a b) b) (sub c b)) (shr a (sub c b)))
  (ax_mp ((eq (shr (shl a b) b) a) (eq (shr (shr (shl a b) b) (sub c b)) (shr a (sub c b))))
    (shreq1 ((shr (shl a b) b) a (sub c b)))
    (shrshlid (a b)))
  (syl6eqr ((le b c) (shr (shl a b) c) (shr (shl a b) (add b (sub c b))) (shr (shr (shl a b) b) (sub c b)))
    (shrshr ((shl a b) b (sub c b)))
    (shreq2d ((le b c) (shl a b) c (add b (sub c b)))
      (eqcomd ((le b c) (add b (sub c b)) c)
        (pncan3 (b c)))))))

(local theorem shreq0 ((a nat ()) (b nat ())) ()
  (iff (eq (shr a b) (d0)) (lt a (pow (d2) b)))
()
(ax_mp ((ne (pow (d2) b) (d0)) (iff (eq (shr a b) (d0)) (lt a (pow (d2) b))))
  (:conv (im (ne (pow (d2) b) (d0)) (iff (eq (shr a b) (d0)) (lt a (pow (d2) b))))
    (im
      (ne (pow (d2) b) (d0))
      (iff
        (eq
          (:unfold shr (a b) ()
            (div a (pow (d2) b)))
          (d0))
        (lt a (pow (d2) b))))
    (diveq0 (a (pow (d2) b))))
  (pow2ne0 (b))))

(def ns ((a nat ())) (set ())
((x nat))
(ab x (odd (shr a x))))

(local theorem nseqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()))
  ((_ah (im _G (eq _a1 _a2))))
  (im _G (eqs (ns _a1) (ns _a2)))
((x nat))
(:conv (im _G (eqs (ns _a1) (ns _a2)))
  (im
    _G
    (eqs
      (:unfold ns (_a1) (x)
        (ab x (odd (shr _a1 x))))
      (:unfold ns (_a2) (x)
        (ab x (odd (shr _a2 x))))))
  (abeqd (_G x (odd (shr _a1 x)) (odd (shr _a2 x)))
    (oddeqd (_G (shr _a1 x) (shr _a2 x))
      (shreqd (_G _a1 _a2 x x)
        _ah
        (eqidd (_G x)))))))

(local theorem nseq ((_a1 nat ()) (_a2 nat ())) ()
  (im (eq _a1 _a2) (eqs (ns _a1) (ns _a2)))
()
(nseqd ((eq _a1 _a2) _a1 _a2)
  (id ((eq _a1 _a2)))))

(local theorem elnel ((a nat ()) (b nat ())) ()
  (iff (el a (ns b)) (odd (shr b a)))
((_1 nat))
(:conv (iff (el a (ns b)) (odd (shr b a)))
  (iff
    (el
      a
      (:unfold ns (b) (_1)
        (ab _1 (odd (shr b _1)))))
    (odd (shr b a)))
  (elabe (_1 a (odd (shr b _1)) (odd (shr b a)))
    (oddeqd ((eq _1 a) (shr b _1) (shr b a))
      (shreqd ((eq _1 a) b b _1 a)
        (eqidd ((eq _1 a) b))
        (id ((eq _1 a))))))))

(local theorem elneqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (iff (el a (ns c)) (el b (ns d))))
()
(eleqd (G a b (ns c) (ns d))
  h1
  (nseqd (G c d)
    h2)))

(local theorem elneq2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h (im G (eq b c))))
  (im G (iff (el a (ns b)) (el a (ns c))))
()
(elneqd (G a a b c)
  (eqidd (G a))
  h))

(local theorem elneq2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq b c) (iff (el a (ns b)) (el a (ns c))))
()
(elneq2d ((eq b c) a b c)
  (id ((eq b c)))))

(local theorem elneq ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (eq a b) (im (eq c d) (iff (el a (ns c)) (el b (ns d)))))
()
(exp ((eq a b) (eq c d) (iff (el a (ns c)) (el b (ns d))))
  (elneqd ((an (eq a b) (eq c d)) a b c d)
    (anl ((eq a b) (eq c d)))
    (anr ((eq a b) (eq c d))))))

(local theorem appneq1d ((G wff ()) (f nat ()) (g nat ()) (x nat ()))
  ((h (im G (eq f g))))
  (im G (eq (app (ns f) x) (app (ns g) x)))
()
(appeq1d (G (ns f) (ns g) x)
  (nseqd (G f g)
    h)))

(local theorem appneq1 ((f nat ()) (g nat ()) (x nat ())) ()
  (im (eq f g) (eq (app (ns f) x) (app (ns g) x)))
()
(appneq1d ((eq f g) f g x)
  (id ((eq f g)))))

(local theorem nfns ((x nat) (a nat (x)))
  ((h (nfn x a)))
  (nfs x (ns a))
((x1 nat))
(nfslem (x x1 (ns x1) a (ns a))
  (nseq (x1 a))
  h))

(local theorem el01 ((a nat ())) ()
  (iff (el (d0) (ns a)) (odd a))
()
(ax_mp ((iff (odd (shr a (d0))) (odd a)) (iff (el (d0) (ns a)) (odd a)))
  (ax_mp ((iff (el (d0) (ns a)) (odd (shr a (d0)))) (im (iff (odd (shr a (d0))) (odd a)) (iff (el (d0) (ns a)) (odd a))))
    (bitr ((el (d0) (ns a)) (odd (shr a (d0))) (odd a)))
    (elnel ((d0) a)))
  (ax_mp ((eq (shr a (d0)) a) (iff (odd (shr a (d0))) (odd a)))
    (oddeq ((shr a (d0)) a))
    (shr02 (a)))))

(local theorem elshr ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (el a (ns (shr b c))) (el (add a c) (ns b)))
()
(ax_mp ((iff (odd (shr (shr b c) a)) (el (add a c) (ns b))) (iff (el a (ns (shr b c))) (el (add a c) (ns b))))
  (ax_mp ((iff (el a (ns (shr b c))) (odd (shr (shr b c) a))) (im (iff (odd (shr (shr b c) a)) (el (add a c) (ns b))) (iff (el a (ns (shr b c))) (el (add a c) (ns b)))))
    (bitr ((el a (ns (shr b c))) (odd (shr (shr b c) a)) (el (add a c) (ns b))))
    (elnel (a (shr b c))))
  (ax_mp ((iff (el (add a c) (ns b)) (odd (shr b (add a c)))) (iff (odd (shr (shr b c) a)) (el (add a c) (ns b))))
    (ax_mp ((iff (odd (shr (shr b c) a)) (odd (shr b (add a c)))) (im (iff (el (add a c) (ns b)) (odd (shr b (add a c)))) (iff (odd (shr (shr b c) a)) (el (add a c) (ns b)))))
      (bitr4 ((odd (shr (shr b c) a)) (odd (shr b (add a c))) (el (add a c) (ns b))))
      (ax_mp ((eq (shr (shr b c) a) (shr b (add a c))) (iff (odd (shr (shr b c) a)) (odd (shr b (add a c)))))
        (oddeq ((shr (shr b c) a) (shr b (add a c))))
        (ax_mp ((eq (shr b (add c a)) (shr b (add a c))) (eq (shr (shr b c) a) (shr b (add a c))))
          (ax_mp ((eq (shr (shr b c) a) (shr b (add c a))) (im (eq (shr b (add c a)) (shr b (add a c))) (eq (shr (shr b c) a) (shr b (add a c)))))
            (eqtr ((shr (shr b c) a) (shr b (add c a)) (shr b (add a c))))
            (shrshr (b c a)))
          (ax_mp ((eq (add c a) (add a c)) (eq (shr b (add c a)) (shr b (add a c))))
            (shreq2 (b (add c a) (add a c)))
            (addcom (c a))))))
    (elnel ((add a c) b)))))

(local theorem elshl ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (el a (ns (shl b c))) (an (le c a) (el (sub a c) (ns b))))
()
(ax_mp ((iff (odd (shr (shl b c) a)) (an (le c a) (el (sub a c) (ns b)))) (iff (el a (ns (shl b c))) (an (le c a) (el (sub a c) (ns b)))))
  (ax_mp ((iff (el a (ns (shl b c))) (odd (shr (shl b c) a))) (im (iff (odd (shr (shl b c) a)) (an (le c a) (el (sub a c) (ns b)))) (iff (el a (ns (shl b c))) (an (le c a) (el (sub a c) (ns b))))))
    (bitr ((el a (ns (shl b c))) (odd (shr (shl b c) a)) (an (le c a) (el (sub a c) (ns b)))))
    (elnel (a (shl b c))))
  (rbid ((le c a) (odd (shr (shl b c) a)) (an (le c a) (el (sub a c) (ns b))))
    (sylbi ((odd (shr (shl b c) a)) (not (dvd (d2) (shr (shl b c) a))) (le c a))
      (odddvd ((shr (shl b c) a)))
      (ax_mp ((im (not (le c a)) (dvd (d2) (shr (shl b c) a))) (im (not (dvd (d2) (shr (shl b c) a))) (le c a)))
        (con1 ((le c a) (dvd (d2) (shr (shl b c) a))))
        (sylbir ((not (le c a)) (lt a c) (dvd (d2) (shr (shl b c) a)))
          (ltnle (a c))
          (mpbird ((lt a c) (dvd (d2) (shl b (sub c a))) (dvd (d2) (shr (shl b c) a)))
            (dvdeq2d ((lt a c) (d2) (shr (shl b c) a) (shl b (sub c a)))
              (rsyl ((lt a c) (le a c) (eq (shr (shl b c) a) (shl b (sub c a))))
                (ltle (a c))
                (shrshl1 (b c a))))
            (sylbi ((lt a c) (lt (d0) (sub c a)) (dvd (d2) (shl b (sub c a))))
              (subpos (a c))
              (shl2dvd (b (sub c a))))))))
    (anl ((le c a) (el (sub a c) (ns b))))
    (bitr4d ((le c a) (odd (shr (shl b c) a)) (el (sub a c) (ns b)) (an (le c a) (el (sub a c) (ns b))))
      (syl6bbr ((le c a) (odd (shr (shl b c) a)) (odd (shr b (sub a c))) (el (sub a c) (ns b)))
        (elnel ((sub a c) b))
        (oddeqd ((le c a) (shr (shl b c) a) (shr b (sub a c)))
          (shrshl2 (b c a))))
      (bian1 ((le c a) (el (sub a c) (ns b))))))))

(local theorem elmodpow2 ((a nat ()) (n nat ()) (x nat ())) ()
  (iff (el x (ns (mod a (pow (d2) n)))) (an (lt x n) (el x (ns a))))
()
(ax_mp ((iff (odd (shr (mod a (pow (d2) n)) x)) (an (lt x n) (el x (ns a)))) (iff (el x (ns (mod a (pow (d2) n)))) (an (lt x n) (el x (ns a)))))
  (ax_mp ((iff (el x (ns (mod a (pow (d2) n)))) (odd (shr (mod a (pow (d2) n)) x))) (im (iff (odd (shr (mod a (pow (d2) n)) x)) (an (lt x n) (el x (ns a)))) (iff (el x (ns (mod a (pow (d2) n)))) (an (lt x n) (el x (ns a))))))
    (bitr ((el x (ns (mod a (pow (d2) n)))) (odd (shr (mod a (pow (d2) n)) x)) (an (lt x n) (el x (ns a)))))
    (elnel (x (mod a (pow (d2) n)))))
  (ax_mp ((iff (an (lt x n) (odd (shr (mod a (pow (d2) n)) x))) (an (lt x n) (el x (ns a)))) (iff (odd (shr (mod a (pow (d2) n)) x)) (an (lt x n) (el x (ns a)))))
    (ax_mp ((iff (an (lt x n) (odd (shr (mod a (pow (d2) n)) x))) (odd (shr (mod a (pow (d2) n)) x))) (im (iff (an (lt x n) (odd (shr (mod a (pow (d2) n)) x))) (an (lt x n) (el x (ns a)))) (iff (odd (shr (mod a (pow (d2) n)) x)) (an (lt x n) (el x (ns a))))))
      (bitr3 ((odd (shr (mod a (pow (d2) n)) x)) (an (lt x n) (odd (shr (mod a (pow (d2) n)) x))) (an (lt x n) (el x (ns a)))))
      (ax_mp ((im (odd (shr (mod a (pow (d2) n)) x)) (lt x n)) (iff (an (lt x n) (odd (shr (mod a (pow (d2) n)) x))) (odd (shr (mod a (pow (d2) n)) x))))
        (bian1a ((lt x n) (odd (shr (mod a (pow (d2) n)) x))))
        (ax_mp ((im (not (lt x n)) (not (odd (shr (mod a (pow (d2) n)) x)))) (im (odd (shr (mod a (pow (d2) n)) x)) (lt x n)))
          (ax_3 ((lt x n) (odd (shr (mod a (pow (d2) n)) x))))
          (sylbir ((not (lt x n)) (le n x) (not (odd (shr (mod a (pow (d2) n)) x))))
            (lenlt (n x))
            (mpbiri ((le n x) (not (odd (d0))) (not (odd (shr (mod a (pow (d2) n)) x))))
              (odd0 ())
              (noteqd ((le n x) (odd (shr (mod a (pow (d2) n)) x)) (odd (d0)))
                (oddeqd ((le n x) (shr (mod a (pow (d2) n)) x) (d0))
                  (sylibr ((le n x) (lt (mod a (pow (d2) n)) (pow (d2) x)) (eq (shr (mod a (pow (d2) n)) x) (d0)))
                    (shreq0 ((mod a (pow (d2) n)) x))
                    (syl ((le n x) (le (pow (d2) n) (pow (d2) x)) (lt (mod a (pow (d2) n)) (pow (d2) x)))
                      (ax_mp ((lt (mod a (pow (d2) n)) (pow (d2) n)) (im (le (pow (d2) n) (pow (d2) x)) (lt (mod a (pow (d2) n)) (pow (d2) x))))
                        (ltletr ((mod a (pow (d2) n)) (pow (d2) n) (pow (d2) x)))
                        (ax_mp ((ne (pow (d2) n) (d0)) (lt (mod a (pow (d2) n)) (pow (d2) n)))
                          (modlt (a (pow (d2) n)))
                          (pow2ne0 (n))))
                      (ax_mp ((ne (d2) (d0)) (im (le n x) (le (pow (d2) n) (pow (d2) x))))
                        (lepow2a ((d2) n x))
                        (d2ne0 ())))))))))))
    (ax_mp ((im (lt x n) (iff (odd (shr (mod a (pow (d2) n)) x)) (el x (ns a)))) (iff (an (lt x n) (odd (shr (mod a (pow (d2) n)) x))) (an (lt x n) (el x (ns a)))))
      (aneq2a ((lt x n) (odd (shr (mod a (pow (d2) n)) x)) (el x (ns a))))
      (syl6bbr ((lt x n) (odd (shr (mod a (pow (d2) n)) x)) (odd (shr a x)) (el x (ns a)))
        (elnel (x a))
        (bitr4g ((lt x n) (not (dvd (d2) (shr (mod a (pow (d2) n)) x))) (not (dvd (d2) (shr a x))) (odd (shr (mod a (pow (d2) n)) x)) (odd (shr a x)))
          (odddvd ((shr (mod a (pow (d2) n)) x)))
          (odddvd ((shr a x)))
          (noteqd ((lt x n) (dvd (d2) (shr (mod a (pow (d2) n)) x)) (dvd (d2) (shr a x)))
            (syl ((lt x n) (eqm (d2) (shr (mod a (pow (d2) n)) x) (shr a x)) (iff (dvd (d2) (shr (mod a (pow (d2) n)) x)) (dvd (d2) (shr a x))))
              (eqmdvd ((shr (mod a (pow (d2) n)) x) (shr a x) (d2)))
              (mpbird ((lt x n) (eqm (d2) (mod (shr a x) (pow (d2) (sub n x))) (shr a x)) (eqm (d2) (shr (mod a (pow (d2) n)) x) (shr a x)))
                (eqmeq2d ((lt x n) (d2) (shr (mod a (pow (d2) n)) x) (mod (shr a x) (pow (d2) (sub n x))) (shr a x))
                  (syl ((lt x n) (le x n) (eq (shr (mod a (pow (d2) n)) x) (mod (shr a x) (pow (d2) (sub n x)))))
                    (shrmodsub (a n x))
                    (ltle (x n))))
                (dvdeqm ((lt x n) (mod (shr a x) (pow (d2) (sub n x))) (shr a x) (d2) (pow (d2) (sub n x)))
                  (sylbi ((lt x n) (lt (d0) (sub n x)) (dvd (d2) (pow (d2) (sub n x))))
                    (subpos (x n))
                    (powdvd1 ((d2) (sub n x))))
                  (a1i ((lt x n) (eqm (pow (d2) (sub n x)) (mod (shr a x) (pow (d2) (sub n x))) (shr a x)))
                    (eqmmod ((shr a x) (pow (d2) (sub n x)))))))))))))))

(local theorem shrss ((a nat ()) (b nat ()) (n nat ())) ()
  (im (subset (ns a) (ns b)) (subset (ns (shr a n)) (ns (shr b n))))
((x nat))
(:conv (im (subset (ns a) (ns b)) (subset (ns (shr a n)) (ns (shr b n))))
  (im
    (subset (ns a) (ns b))
    (:unfold subset ((ns (shr a n)) (ns (shr b n))) (x)
      (al x (im (el x (ns (shr a n))) (el x (ns (shr b n)))))))
  (iald (x (subset (ns a) (ns b)) (im (el x (ns (shr a n))) (el x (ns (shr b n)))))
    (syl5bi ((subset (ns a) (ns b)) (el x (ns (shr a n))) (el (add x n) (ns a)) (el x (ns (shr b n))))
      (elshr (x a n))
      (syl6ibr ((subset (ns a) (ns b)) (el (add x n) (ns a)) (el (add x n) (ns b)) (el x (ns (shr b n))))
        (elshr (x b n))
        (ssel ((ns a) (ns b) (add x n))))))))

(local theorem shlss ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (subset (ns a) (ns b)) (subset (ns (shl a n)) (ns (shl b n))))
((x nat))
(ibii ((subset (ns a) (ns b)) (subset (ns (shl a n)) (ns (shl b n))))
  (:conv (im (subset (ns a) (ns b)) (subset (ns (shl a n)) (ns (shl b n))))
    (im
      (subset (ns a) (ns b))
      (:unfold subset ((ns (shl a n)) (ns (shl b n))) (x)
        (al x (im (el x (ns (shl a n))) (el x (ns (shl b n)))))))
    (iald (x (subset (ns a) (ns b)) (im (el x (ns (shl a n))) (el x (ns (shl b n)))))
      (syl5bi ((subset (ns a) (ns b)) (el x (ns (shl a n))) (an (le n x) (el (sub x n) (ns a))) (el x (ns (shl b n))))
        (elshl (x a n))
        (syl6ibr ((subset (ns a) (ns b)) (an (le n x) (el (sub x n) (ns a))) (an (le n x) (el (sub x n) (ns b))) (el x (ns (shl b n))))
          (elshl (x b n))
          (anim2d ((subset (ns a) (ns b)) (le n x) (el (sub x n) (ns a)) (el (sub x n) (ns b)))
            (ssel ((ns a) (ns b) (sub x n))))))))
  (sylib ((subset (ns (shl a n)) (ns (shl b n))) (subset (ns (shr (shl a n) n)) (ns (shr (shl b n) n))) (subset (ns a) (ns b)))
    (ax_mp ((eqs (ns (shr (shl b n) n)) (ns b)) (iff (subset (ns (shr (shl a n) n)) (ns (shr (shl b n) n))) (subset (ns a) (ns b))))
      (ax_mp ((eqs (ns (shr (shl a n) n)) (ns a)) (im (eqs (ns (shr (shl b n) n)) (ns b)) (iff (subset (ns (shr (shl a n) n)) (ns (shr (shl b n) n))) (subset (ns a) (ns b)))))
        (sseq ((ns (shr (shl a n) n)) (ns a) (ns (shr (shl b n) n)) (ns b)))
        (ax_mp ((eq (shr (shl a n) n) a) (eqs (ns (shr (shl a n) n)) (ns a)))
          (nseq ((shr (shl a n) n) a))
          (shrshlid (a n))))
      (ax_mp ((eq (shr (shl b n) n) b) (eqs (ns (shr (shl b n) n)) (ns b)))
        (nseq ((shr (shl b n) n) b))
        (shrshlid (b n))))
    (shrss ((shl a n) (shl b n) n)))))

(local theorem eldiv2 ((a nat ()) (b nat ())) ()
  (iff (el a (ns (div b (d2)))) (el (suc a) (ns b)))
()
(ax_mp ((iff (el a (ns (shr b (d1)))) (el (suc a) (ns b))) (iff (el a (ns (div b (d2)))) (el (suc a) (ns b))))
  (ax_mp ((iff (el a (ns (shr b (d1)))) (el a (ns (div b (d2))))) (im (iff (el a (ns (shr b (d1)))) (el (suc a) (ns b))) (iff (el a (ns (div b (d2)))) (el (suc a) (ns b)))))
    (bitr3 ((el a (ns (div b (d2)))) (el a (ns (shr b (d1)))) (el (suc a) (ns b))))
    (ax_mp ((eq (shr b (d1)) (div b (d2))) (iff (el a (ns (shr b (d1)))) (el a (ns (div b (d2))))))
      (elneq2 (a (shr b (d1)) (div b (d2))))
      (shr12 (b))))
  (ax_mp ((iff (el (add a (d1)) (ns b)) (el (suc a) (ns b))) (iff (el a (ns (shr b (d1)))) (el (suc a) (ns b))))
    (ax_mp ((iff (el a (ns (shr b (d1)))) (el (add a (d1)) (ns b))) (im (iff (el (add a (d1)) (ns b)) (el (suc a) (ns b))) (iff (el a (ns (shr b (d1)))) (el (suc a) (ns b)))))
      (bitr ((el a (ns (shr b (d1)))) (el (add a (d1)) (ns b)) (el (suc a) (ns b))))
      (elshr (a b (d1))))
    (ax_mp ((eq (add a (d1)) (suc a)) (iff (el (add a (d1)) (ns b)) (el (suc a) (ns b))))
      (eleq1 ((ns b) (add a (d1)) (suc a)))
      (add12 (a))))))

(local theorem elb0 ((a nat ()) (b nat ())) ()
  (iff (el a (ns (b0 b))) (an (lt (d0) a) (el (sub a (d1)) (ns b))))
()
(ax_mp ((iff (el a (ns (shl b (d1)))) (an (lt (d0) a) (el (sub a (d1)) (ns b)))) (iff (el a (ns (b0 b))) (an (lt (d0) a) (el (sub a (d1)) (ns b)))))
  (ax_mp ((iff (el a (ns (shl b (d1)))) (el a (ns (b0 b)))) (im (iff (el a (ns (shl b (d1)))) (an (lt (d0) a) (el (sub a (d1)) (ns b)))) (iff (el a (ns (b0 b))) (an (lt (d0) a) (el (sub a (d1)) (ns b))))))
    (bitr3 ((el a (ns (b0 b))) (el a (ns (shl b (d1)))) (an (lt (d0) a) (el (sub a (d1)) (ns b)))))
    (ax_mp ((eq (shl b (d1)) (b0 b)) (iff (el a (ns (shl b (d1)))) (el a (ns (b0 b)))))
      (elneq2 (a (shl b (d1)) (b0 b)))
      (shl12 (b))))
  (:conv (iff (el a (ns (shl b (d1)))) (an (lt (d0) a) (el (sub a (d1)) (ns b))))
    (iff
      (el a (ns (shl b (d1))))
      (an
        (:unfold lt ((d0) a) ()
          (le
            (:sym (:unfold d1 () ()
              (suc (d0))))
            a))
        (el (sub a (d1)) (ns b))))
    (elshl (a b (d1))))))

(local theorem elb1 ((a nat ()) (b nat ())) ()
  (iff (el a (ns (b1 b))) (or (eq a (d0)) (el (sub a (d1)) (ns b))))
()
(cases ((eq a (d0)) (iff (el a (ns (b1 b))) (or (eq a (d0)) (el (sub a (d1)) (ns b)))))
  (bithd ((eq a (d0)) (el a (ns (b1 b))) (or (eq a (d0)) (el (sub a (d1)) (ns b))))
    (mpbiri ((eq a (d0)) (el (d0) (ns (b1 b))) (el a (ns (b1 b))))
      (mpbir ((odd (b1 b)) (el (d0) (ns (b1 b))))
        (el01 ((b1 b)))
        (b1odd (b)))
      (eleq1 ((ns (b1 b)) a (d0))))
    (orl ((eq a (d0)) (el (sub a (d1)) (ns b)))))
  (bicomd ((not (eq a (d0))) (or (eq a (d0)) (el (sub a (d1)) (ns b))) (el a (ns (b1 b))))
    (bitrd ((not (eq a (d0))) (or (eq a (d0)) (el (sub a (d1)) (ns b))) (el (sub a (d1)) (ns b)) (el a (ns (b1 b))))
      (bior1 ((eq a (d0)) (el (sub a (d1)) (ns b))))
      (syl5bb ((not (eq a (d0))) (el (sub a (d1)) (ns b)) (el (suc (sub a (d1))) (ns (b1 b))) (el a (ns (b1 b))))
        (ax_mp ((iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (suc (sub a (d1))) (ns (b1 b)))) (iff (el (sub a (d1)) (ns b)) (el (suc (sub a (d1))) (ns (b1 b)))))
          (ax_mp ((iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (sub a (d1)) (ns b))) (im (iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (suc (sub a (d1))) (ns (b1 b)))) (iff (el (sub a (d1)) (ns b)) (el (suc (sub a (d1))) (ns (b1 b))))))
            (bitr3 ((el (sub a (d1)) (ns b)) (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (suc (sub a (d1))) (ns (b1 b)))))
            (ax_mp ((eq (div (b1 b) (d2)) b) (iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (sub a (d1)) (ns b))))
              (elneq2 ((sub a (d1)) (div (b1 b) (d2)) b))
              (b1div2 (b))))
          (eldiv2 ((sub a (d1)) (b1 b))))
        (eleq1d ((ns (b1 b)) (not (eq a (d0))) (suc (sub a (d1))) a)
          (:conv (im (not (eq a (d0))) (eq (suc (sub a (d1))) a))
            (im
              (:sym (:unfold ne (a (d0)) ()
                (not (eq a (d0)))))
              (eq (suc (sub a (d1))) a))
            (sub1can (a)))))))))

(local theorem elb00 ((b nat ())) ()
  (not (el (d0) (ns (b0 b))))
()
(mt ((lt (d0) (d0)) (el (d0) (ns (b0 b))))
  (sylbi ((el (d0) (ns (b0 b))) (an (lt (d0) (d0)) (el (sub (d0) (d1)) (ns b))) (lt (d0) (d0)))
    (elb0 ((d0) b))
    (anl ((lt (d0) (d0)) (el (sub (d0) (d1)) (ns b)))))
  (ltirr ((d0)))))

(local theorem elb10 ((b nat ())) ()
  (el (d0) (ns (b1 b)))
()
(mpbir ((or (eq (d0) (d0)) (el (sub (d0) (d1)) (ns b))) (el (d0) (ns (b1 b))))
  (elb1 ((d0) b))
  (ax_mp ((eq (d0) (d0)) (or (eq (d0) (d0)) (el (sub (d0) (d1)) (ns b))))
    (orl ((eq (d0) (d0)) (el (sub (d0) (d1)) (ns b))))
    (eqid ((d0))))))

(local theorem elb0S ((a nat ()) (b nat ())) ()
  (iff (el (suc a) (ns (b0 b))) (el a (ns b)))
()
(ax_mp ((iff (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))) (iff (el (suc a) (ns (b0 b))) (el a (ns b))))
  (ax_mp ((iff (el (suc a) (ns (b0 b))) (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b)))) (im (iff (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))) (iff (el (suc a) (ns (b0 b))) (el a (ns b)))))
    (bitr ((el (suc a) (ns (b0 b))) (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))))
    (elb0 ((suc a) b)))
  (ax_mp ((iff (el (sub (suc a) (d1)) (ns b)) (el a (ns b))) (iff (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))))
    (ax_mp ((iff (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el (sub (suc a) (d1)) (ns b))) (im (iff (el (sub (suc a) (d1)) (ns b)) (el a (ns b))) (iff (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b)))))
      (bitr ((an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el (sub (suc a) (d1)) (ns b)) (el a (ns b))))
      (ax_mp ((lt (d0) (suc a)) (iff (an (lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))) (el (sub (suc a) (d1)) (ns b))))
        (bian1 ((lt (d0) (suc a)) (el (sub (suc a) (d1)) (ns b))))
        (lt01S (a))))
    (ax_mp ((eq (sub (suc a) (d1)) a) (iff (el (sub (suc a) (d1)) (ns b)) (el a (ns b))))
      (eleq1 ((ns b) (sub (suc a) (d1)) a))
      (sucsub1 (a))))))

(local theorem elb1S ((a nat ()) (b nat ())) ()
  (iff (el (suc a) (ns (b1 b))) (el a (ns b)))
()
(ax_mp ((iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))) (iff (el (suc a) (ns (b1 b))) (el a (ns b))))
  (ax_mp ((iff (el (suc a) (ns (b1 b))) (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b)))) (im (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))) (iff (el (suc a) (ns (b1 b))) (el a (ns b)))))
    (bitr ((el (suc a) (ns (b1 b))) (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))))
    (elb1 ((suc a) b)))
  (ax_mp ((iff (el (sub (suc a) (d1)) (ns b)) (el a (ns b))) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b))))
    (ax_mp ((iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el (sub (suc a) (d1)) (ns b))) (im (iff (el (sub (suc a) (d1)) (ns b)) (el a (ns b))) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el a (ns b)))))
      (bitr ((or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el (sub (suc a) (d1)) (ns b)) (el a (ns b))))
      (ax_mp ((not (eq (suc a) (d0))) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))) (el (sub (suc a) (d1)) (ns b))))
        (bior1 ((eq (suc a) (d0)) (el (sub (suc a) (d1)) (ns b))))
        (:conv (not (eq (suc a) (d0)))
          (:sym (:unfold ne ((suc a) (d0)) ()
            (not (eq (suc a) (d0)))))
          (peano1 (a)))))
    (ax_mp ((eq (sub (suc a) (d1)) a) (iff (el (sub (suc a) (d1)) (ns b)) (el a (ns b))))
      (eleq1 ((ns b) (sub (suc a) (d1)) a))
      (sucsub1 (a))))))

(local theorem bndextle ((a nat ()) (b nat ()) (n nat ()) (x nat)) ()
  (im (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n))))
((_1 nat) (x1 nat))
(:let H1 (id ((eq _1 n)))
(:let H2 (eqidd ((eq _1 n) (d2)))
(:let H3 (poweqd ((eq _1 n) (d2) (d2) _1 n)
  H2
  H1)
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 (d0)) (d2)))
(:let H6 (poweqd ((eq _1 (d0)) (d2) (d2) _1 (d0))
  H5
  H4)
(:let H7 (id ((eq _1 x1)))
(:let H8 (eqidd ((eq _1 x1) (d2)))
(:let H9 (poweqd ((eq _1 x1) (d2) (d2) _1 x1)
  H8
  H7)
(:let H10 (id ((eq _1 (suc x1))))
(:let H11 (eqidd ((eq _1 (suc x1)) (d2)))
(:let H12 (poweqd ((eq _1 (suc x1)) (d2) (d2) _1 (suc x1))
  H11
  H10)
(:let H13 (ltsucid (x1))
(:let H14 (powS2 ((d2) x1))
(:let H15 (powdvd ((d2) x1 (suc x1)))
(:let H16 (lesucid (x1))
(:let H17 (ax_mp ((le x1 (suc x1)) (dvd (pow (d2) x1) (pow (d2) (suc x1))))
  H15
  H16)
(ind (_1 x1 n (im (al x (im (lt x _1) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) _1)) (mod b (pow (d2) _1)))) (im (al x (im (lt x (d0)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0))))) (im (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n)))) (im (al x (im (lt x x1) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (im (al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1))))))
  (imeqd ((eq _1 n) (al x (im (lt x _1) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) _1)) (mod b (pow (d2) _1))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n))))
    (aleqd ((eq _1 n) x (im (lt x _1) (im (el x (ns a)) (el x (ns b)))) (im (lt x n) (im (el x (ns a)) (el x (ns b)))))
      (imeqd ((eq _1 n) (lt x _1) (lt x n) (im (el x (ns a)) (el x (ns b))) (im (el x (ns a)) (el x (ns b))))
        (lteqd ((eq _1 n) x x _1 n)
          (eqidd ((eq _1 n) x))
          H1)
        (biidd ((eq _1 n) (im (el x (ns a)) (el x (ns b)))))))
    (leeqd ((eq _1 n) (mod a (pow (d2) _1)) (mod a (pow (d2) n)) (mod b (pow (d2) _1)) (mod b (pow (d2) n)))
      (modeqd ((eq _1 n) a a (pow (d2) _1) (pow (d2) n))
        (eqidd ((eq _1 n) a))
        H3)
      (modeqd ((eq _1 n) b b (pow (d2) _1) (pow (d2) n))
        (eqidd ((eq _1 n) b))
        H3)))
  (imeqd ((eq _1 (d0)) (al x (im (lt x _1) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x (d0)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) _1)) (mod b (pow (d2) _1))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))))
    (aleqd ((eq _1 (d0)) x (im (lt x _1) (im (el x (ns a)) (el x (ns b)))) (im (lt x (d0)) (im (el x (ns a)) (el x (ns b)))))
      (imeqd ((eq _1 (d0)) (lt x _1) (lt x (d0)) (im (el x (ns a)) (el x (ns b))) (im (el x (ns a)) (el x (ns b))))
        (lteqd ((eq _1 (d0)) x x _1 (d0))
          (eqidd ((eq _1 (d0)) x))
          H4)
        (biidd ((eq _1 (d0)) (im (el x (ns a)) (el x (ns b)))))))
    (leeqd ((eq _1 (d0)) (mod a (pow (d2) _1)) (mod a (pow (d2) (d0))) (mod b (pow (d2) _1)) (mod b (pow (d2) (d0))))
      (modeqd ((eq _1 (d0)) a a (pow (d2) _1) (pow (d2) (d0)))
        (eqidd ((eq _1 (d0)) a))
        H6)
      (modeqd ((eq _1 (d0)) b b (pow (d2) _1) (pow (d2) (d0)))
        (eqidd ((eq _1 (d0)) b))
        H6)))
  (imeqd ((eq _1 x1) (al x (im (lt x _1) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x x1) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) _1)) (mod b (pow (d2) _1))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1))))
    (aleqd ((eq _1 x1) x (im (lt x _1) (im (el x (ns a)) (el x (ns b)))) (im (lt x x1) (im (el x (ns a)) (el x (ns b)))))
      (imeqd ((eq _1 x1) (lt x _1) (lt x x1) (im (el x (ns a)) (el x (ns b))) (im (el x (ns a)) (el x (ns b))))
        (lteqd ((eq _1 x1) x x _1 x1)
          (eqidd ((eq _1 x1) x))
          H7)
        (biidd ((eq _1 x1) (im (el x (ns a)) (el x (ns b)))))))
    (leeqd ((eq _1 x1) (mod a (pow (d2) _1)) (mod a (pow (d2) x1)) (mod b (pow (d2) _1)) (mod b (pow (d2) x1)))
      (modeqd ((eq _1 x1) a a (pow (d2) _1) (pow (d2) x1))
        (eqidd ((eq _1 x1) a))
        H9)
      (modeqd ((eq _1 x1) b b (pow (d2) _1) (pow (d2) x1))
        (eqidd ((eq _1 x1) b))
        H9)))
  (imeqd ((eq _1 (suc x1)) (al x (im (lt x _1) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) _1)) (mod b (pow (d2) _1))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1)))))
    (aleqd ((eq _1 (suc x1)) x (im (lt x _1) (im (el x (ns a)) (el x (ns b)))) (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b)))))
      (imeqd ((eq _1 (suc x1)) (lt x _1) (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))) (im (el x (ns a)) (el x (ns b))))
        (lteqd ((eq _1 (suc x1)) x x _1 (suc x1))
          (eqidd ((eq _1 (suc x1)) x))
          H10)
        (biidd ((eq _1 (suc x1)) (im (el x (ns a)) (el x (ns b)))))))
    (leeqd ((eq _1 (suc x1)) (mod a (pow (d2) _1)) (mod a (pow (d2) (suc x1))) (mod b (pow (d2) _1)) (mod b (pow (d2) (suc x1))))
      (modeqd ((eq _1 (suc x1)) a a (pow (d2) _1) (pow (d2) (suc x1)))
        (eqidd ((eq _1 (suc x1)) a))
        H12)
      (modeqd ((eq _1 (suc x1)) b b (pow (d2) _1) (pow (d2) (suc x1)))
        (eqidd ((eq _1 (suc x1)) b))
        H12)))
  (a1i ((al x (im (lt x (d0)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))))
    (mpbir ((le (d0) (mod b (pow (d2) (d0)))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))))
      (ax_mp ((eq (mod a (pow (d2) (d0))) (d0)) (iff (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))) (le (d0) (mod b (pow (d2) (d0))))))
        (leeq1 ((mod a (pow (d2) (d0))) (d0) (mod b (pow (d2) (d0)))))
        (ax_mp ((eq (mod a (d1)) (d0)) (eq (mod a (pow (d2) (d0))) (d0)))
          (ax_mp ((eq (mod a (pow (d2) (d0))) (mod a (d1))) (im (eq (mod a (d1)) (d0)) (eq (mod a (pow (d2) (d0))) (d0))))
            (eqtr ((mod a (pow (d2) (d0))) (mod a (d1)) (d0)))
            (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (mod a (pow (d2) (d0))) (mod a (d1))))
              (modeq2 (a (pow (d2) (d0)) (d1)))
              (pow0 ((d2)))))
          (mod12 (a))))
      (le01 ((mod b (pow (d2) (d0)))))))
  (rsyl ((im (al x (im (lt x x1) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (im (al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (im (al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1))))))
    (imim1i ((al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x x1) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1))))
      (alimi (x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b)))) (im (lt x x1) (im (el x (ns a)) (el x (ns b)))))
        (imim1i ((lt x x1) (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))
          (mpi ((lt x x1) (lt x1 (suc x1)) (lt x (suc x1)))
            H13
            (lttr (x x1 (suc x1)))))))
    (a2i ((al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1)))))
      (rsyl ((al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (im (el x1 (ns a)) (el x1 (ns b))) (im (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1))))))
        (mpi ((al x (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b))))) (lt x1 (suc x1)) (im (el x1 (ns a)) (el x1 (ns b))))
          H13
          (eale (x x1 (im (lt x (suc x1)) (im (el x (ns a)) (el x (ns b)))) (im (lt x1 (suc x1)) (im (el x1 (ns a)) (el x1 (ns b)))))
            (imeqd ((eq x x1) (lt x (suc x1)) (lt x1 (suc x1)) (im (el x (ns a)) (el x (ns b))) (im (el x1 (ns a)) (el x1 (ns b))))
              (lteq1 (x x1 (suc x1)))
              (imeqd ((eq x x1) (el x (ns a)) (el x1 (ns a)) (el x (ns b)) (el x1 (ns b)))
                (eleq1 ((ns a) x x1))
                (eleq1 ((ns b) x x1))))))
        (exp ((im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1)))))
          (sylib ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (le (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1)))))
            (ax_mp ((eq (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod b (pow (d2) (suc x1)))) (iff (le (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1))))))
              (ax_mp ((eq (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod a (pow (d2) (suc x1)))) (im (eq (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod b (pow (d2) (suc x1)))) (iff (le (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)))) (le (mod a (pow (d2) (suc x1))) (mod b (pow (d2) (suc x1)))))))
                (leeq ((add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod a (pow (d2) (suc x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod b (pow (d2) (suc x1)))))
                (divmod ((mod a (pow (d2) (suc x1))) (pow (d2) x1))))
              (divmod ((mod b (pow (d2) (suc x1))) (pow (d2) x1))))
            (sylibr ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (le (add (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod a (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1)))) (le (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)))))
              (ax_mp ((eq (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1)))) (iff (le (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)))) (le (add (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod a (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1))))))
                (ax_mp ((eq (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod a (pow (d2) x1)))) (im (eq (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1)))) (iff (le (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)))) (le (add (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod a (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1)))))))
                  (leeq ((add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod a (pow (d2) x1))) (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1)))))
                  (ax_mp ((eq (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod a (pow (d2) x1))) (eq (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod a (pow (d2) x1)))))
                    (ax_mp ((eq (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2)))) (im (eq (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod a (pow (d2) x1))) (eq (add (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod a (pow (d2) x1))))))
                      (addeq ((mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod a (pow (d2) x1))))
                      (ax_mp ((eq (div (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div a (pow (d2) x1)) (d2))) (eq (mul (pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1))) (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2)))))
                        (muleq2 ((pow (d2) x1) (div (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div a (pow (d2) x1)) (d2))))
                        (ax_mp ((eq (mod (div a (pow (d2) x1)) (d2)) (div (mod a (mul (pow (d2) x1) (d2))) (pow (d2) x1))) (eq (div (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div a (pow (d2) x1)) (d2))))
                          (ax_mp ((eq (div (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (div (mod a (mul (pow (d2) x1) (d2))) (pow (d2) x1))) (im (eq (mod (div a (pow (d2) x1)) (d2)) (div (mod a (mul (pow (d2) x1) (d2))) (pow (d2) x1))) (eq (div (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div a (pow (d2) x1)) (d2)))))
                            (eqtr4 ((div (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (div (mod a (mul (pow (d2) x1) (d2))) (pow (d2) x1)) (mod (div a (pow (d2) x1)) (d2))))
                            (ax_mp ((eq (mod a (pow (d2) (suc x1))) (mod a (mul (pow (d2) x1) (d2)))) (eq (div (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (div (mod a (mul (pow (d2) x1) (d2))) (pow (d2) x1))))
                              (diveq1 ((mod a (pow (d2) (suc x1))) (mod a (mul (pow (d2) x1) (d2))) (pow (d2) x1)))
                              (ax_mp ((eq (pow (d2) (suc x1)) (mul (pow (d2) x1) (d2))) (eq (mod a (pow (d2) (suc x1))) (mod a (mul (pow (d2) x1) (d2)))))
                                (modeq2 (a (pow (d2) (suc x1)) (mul (pow (d2) x1) (d2))))
                                H14)))
                          (divmod1 (a (pow (d2) x1) (d2))))))
                    (ax_mp ((dvd (pow (d2) x1) (pow (d2) (suc x1))) (eq (mod (mod a (pow (d2) (suc x1))) (pow (d2) x1)) (mod a (pow (d2) x1))))
                      (modmod (a (pow (d2) x1) (pow (d2) (suc x1))))
                      H17)))
                (ax_mp ((eq (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod b (pow (d2) x1))) (eq (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1)))))
                  (ax_mp ((eq (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2)))) (im (eq (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod b (pow (d2) x1))) (eq (add (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (add (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod b (pow (d2) x1))))))
                    (addeq ((mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod b (pow (d2) x1))))
                    (ax_mp ((eq (div (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div b (pow (d2) x1)) (d2))) (eq (mul (pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1))) (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2)))))
                      (muleq2 ((pow (d2) x1) (div (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div b (pow (d2) x1)) (d2))))
                      (ax_mp ((eq (mod (div b (pow (d2) x1)) (d2)) (div (mod b (mul (pow (d2) x1) (d2))) (pow (d2) x1))) (eq (div (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div b (pow (d2) x1)) (d2))))
                        (ax_mp ((eq (div (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (div (mod b (mul (pow (d2) x1) (d2))) (pow (d2) x1))) (im (eq (mod (div b (pow (d2) x1)) (d2)) (div (mod b (mul (pow (d2) x1) (d2))) (pow (d2) x1))) (eq (div (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod (div b (pow (d2) x1)) (d2)))))
                          (eqtr4 ((div (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (div (mod b (mul (pow (d2) x1) (d2))) (pow (d2) x1)) (mod (div b (pow (d2) x1)) (d2))))
                          (ax_mp ((eq (mod b (pow (d2) (suc x1))) (mod b (mul (pow (d2) x1) (d2)))) (eq (div (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (div (mod b (mul (pow (d2) x1) (d2))) (pow (d2) x1))))
                            (diveq1 ((mod b (pow (d2) (suc x1))) (mod b (mul (pow (d2) x1) (d2))) (pow (d2) x1)))
                            (ax_mp ((eq (pow (d2) (suc x1)) (mul (pow (d2) x1) (d2))) (eq (mod b (pow (d2) (suc x1))) (mod b (mul (pow (d2) x1) (d2)))))
                              (modeq2 (b (pow (d2) (suc x1)) (mul (pow (d2) x1) (d2))))
                              H14)))
                        (divmod1 (b (pow (d2) x1) (d2))))))
                  (ax_mp ((dvd (pow (d2) x1) (pow (d2) (suc x1))) (eq (mod (mod b (pow (d2) (suc x1))) (pow (d2) x1)) (mod b (pow (d2) x1))))
                    (modmod (b (pow (d2) x1) (pow (d2) (suc x1))))
                    H17)))
              (leaddd ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2))) (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))
                (syl ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (le (mod (div a (pow (d2) x1)) (d2)) (mod (div b (pow (d2) x1)) (d2))) (le (mul (pow (d2) x1) (mod (div a (pow (d2) x1)) (d2))) (mul (pow (d2) x1) (mod (div b (pow (d2) x1)) (d2)))))
                  (lemul2a ((pow (d2) x1) (mod (div a (pow (d2) x1)) (d2)) (mod (div b (pow (d2) x1)) (d2))))
                  (sylibr ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (im (true (mod (div a (pow (d2) x1)) (d2))) (true (mod (div b (pow (d2) x1)) (d2)))) (le (mod (div a (pow (d2) x1)) (d2)) (mod (div b (pow (d2) x1)) (d2))))
                    (ax_mp ((bool (mod (div a (pow (d2) x1)) (d2))) (iff (le (mod (div a (pow (d2) x1)) (d2)) (mod (div b (pow (d2) x1)) (d2))) (im (true (mod (div a (pow (d2) x1)) (d2))) (true (mod (div b (pow (d2) x1)) (d2))))))
                      (letrueb ((mod (div a (pow (d2) x1)) (d2)) (mod (div b (pow (d2) x1)) (d2))))
                      (boolmod2 ((div a (pow (d2) x1)))))
                    (syl5bir ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (true (mod (div a (pow (d2) x1)) (d2))) (odd (div a (pow (d2) x1))) (true (mod (div b (pow (d2) x1)) (d2))))
                      (dfodd2 ((div a (pow (d2) x1))))
                      (syl6ib ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (odd (div a (pow (d2) x1))) (odd (div b (pow (d2) x1))) (true (mod (div b (pow (d2) x1)) (d2))))
                        (dfodd2 ((div b (pow (d2) x1))))
                        (syl5bir ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (odd (div a (pow (d2) x1))) (el x1 (ns a)) (odd (div b (pow (d2) x1))))
                          (:conv (iff (el x1 (ns a)) (odd (div a (pow (d2) x1))))
                            (iff
                              (el x1 (ns a))
                              (odd
                                (:sym (:unfold shr (a x1) ()
                                  (div a (pow (d2) x1))))))
                            (elnel (x1 a)))
                          (syl6ib ((an (im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))) (el x1 (ns a)) (el x1 (ns b)) (odd (div b (pow (d2) x1))))
                            (:conv (iff (el x1 (ns b)) (odd (div b (pow (d2) x1))))
                              (iff
                                (el x1 (ns b))
                                (odd
                                  (:sym (:unfold shr (b x1) ()
                                    (div b (pow (d2) x1))))))
                              (elnel (x1 b)))
                            (anl ((im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))))))))))
                (anr ((im (el x1 (ns a)) (el x1 (ns b))) (le (mod a (pow (d2) x1)) (mod b (pow (d2) x1)))))))))))))))))))))))))))))))

(local theorem bndext ((a nat ()) (b nat ()) (n nat ()) (x nat)) ()
  (im (al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (eqm (pow (d2) n) a b))
()
(:conv (im (al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (eqm (pow (d2) n) a b))
  (im
    (al x (im (lt x n) (iff (el x (ns a)) (el x (ns b)))))
    (:unfold eqm ((pow (d2) n) a b) ()
      (eq (mod a (pow (d2) n)) (mod b (pow (d2) n)))))
  (leasymd ((al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (mod a (pow (d2) n)) (mod b (pow (d2) n)))
    (syl ((al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n))))
      (bndextle (a b n x))
      (alimi (x (im (lt x n) (iff (el x (ns a)) (el x (ns b)))) (im (lt x n) (im (el x (ns a)) (el x (ns b)))))
        (imim2i ((lt x n) (iff (el x (ns a)) (el x (ns b))) (im (el x (ns a)) (el x (ns b))))
          (bi1 ((el x (ns a)) (el x (ns b)))))))
    (syl ((al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (al x (im (lt x n) (im (el x (ns b)) (el x (ns a))))) (le (mod b (pow (d2) n)) (mod a (pow (d2) n))))
      (bndextle (b a n x))
      (alimi (x (im (lt x n) (iff (el x (ns a)) (el x (ns b)))) (im (lt x n) (im (el x (ns b)) (el x (ns a)))))
        (imim2i ((lt x n) (iff (el x (ns a)) (el x (ns b))) (im (el x (ns b)) (el x (ns a))))
          (bi2 ((el x (ns a)) (el x (ns b))))))))))

(local theorem ssle ((a nat ()) (b nat ())) ()
  (im (subset (ns a) (ns b)) (le a b))
((x nat))
(:let H1 (powltid2 ((d2) (max a b)))
(:let H2 (d1lt2 ())
(:let H3 (ax_mp ((lt (d1) (d2)) (lt (max a b) (pow (d2) (max a b))))
  H1
  H2)
(sylib ((subset (ns a) (ns b)) (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))) (le a b))
  (ax_mp ((eq (mod b (pow (d2) (max a b))) b) (iff (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))) (le a b)))
    (ax_mp ((eq (mod a (pow (d2) (max a b))) a) (im (eq (mod b (pow (d2) (max a b))) b) (iff (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))) (le a b))))
      (leeq ((mod a (pow (d2) (max a b))) a (mod b (pow (d2) (max a b))) b))
      (ax_mp ((lt a (pow (d2) (max a b))) (eq (mod a (pow (d2) (max a b))) a))
        (modlteq (a (pow (d2) (max a b))))
        (ax_mp ((lt (max a b) (pow (d2) (max a b))) (lt a (pow (d2) (max a b))))
          (ax_mp ((le a (max a b)) (im (lt (max a b) (pow (d2) (max a b))) (lt a (pow (d2) (max a b)))))
            (lelttr (a (max a b) (pow (d2) (max a b))))
            (lemax1 (a b)))
          H3)))
    (ax_mp ((lt b (pow (d2) (max a b))) (eq (mod b (pow (d2) (max a b))) b))
      (modlteq (b (pow (d2) (max a b))))
      (ax_mp ((lt (max a b) (pow (d2) (max a b))) (lt b (pow (d2) (max a b))))
        (ax_mp ((le b (max a b)) (im (lt (max a b) (pow (d2) (max a b))) (lt b (pow (d2) (max a b)))))
          (lelttr (b (max a b) (pow (d2) (max a b))))
          (lemax2 (a b)))
        H3)))
  (syl ((subset (ns a) (ns b)) (al x (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))))
    (bndextle (a b (max a b) x))
    (:conv (im (subset (ns a) (ns b)) (al x (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b))))))
      (im
        (:unfold subset ((ns a) (ns b)) (x)
          (al x (im (el x (ns a)) (el x (ns b)))))
        (al x (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b))))))
      (alimi (x (im (el x (ns a)) (el x (ns b))) (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b)))))
        (ax_1 ((im (el x (ns a)) (el x (ns b))) (lt x (max a b))))))))))))

(theorem axext ((a nat ()) (b nat ())) ()
  (im (eqs (ns a) (ns b)) (eq a b))
()
(leasymd ((eqs (ns a) (ns b)) a b)
  (syl ((eqs (ns a) (ns b)) (subset (ns a) (ns b)) (le a b))
    (ssle (a b))
    (eqss ((ns a) (ns b))))
  (syl ((eqs (ns a) (ns b)) (subset (ns b) (ns a)) (le b a))
    (ssle (b a))
    (eqssr ((ns a) (ns b))))))

(local theorem nsinj ((a nat ()) (b nat ())) ()
  (iff (eqs (ns a) (ns b)) (eq a b))
()
(ibii ((eqs (ns a) (ns b)) (eq a b))
  (axext (a b))
  (nseq (a b))))

(theorem ellt ((a nat ()) (b nat ())) ()
  (im (el a (ns b)) (lt a b))
()
(sylbi ((el a (ns b)) (odd (shr b a)) (lt a b))
  (elnel (a b))
  (sylbi ((odd (shr b a)) (true (mod (shr b a) (d2))) (lt a b))
    (dfodd2 ((shr b a)))
    (ax_mp ((im (not (lt a b)) (eq (mod (shr b a) (d2)) (d0))) (im (true (mod (shr b a) (d2))) (lt a b)))
      (:conv (im (im (not (lt a b)) (eq (mod (shr b a) (d2)) (d0))) (im (true (mod (shr b a) (d2))) (lt a b)))
        (im
          (im (not (lt a b)) (eq (mod (shr b a) (d2)) (d0)))
          (im
            (:unfold true ((mod (shr b a) (d2))) ()
              (:unfold ne ((mod (shr b a) (d2)) (d0)) ()
                (not (eq (mod (shr b a) (d2)) (d0)))))
            (lt a b)))
        (con1 ((lt a b) (eq (mod (shr b a) (d2)) (d0)))))
      (sylbir ((not (lt a b)) (le b a) (eq (mod (shr b a) (d2)) (d0)))
        (lenlt (b a))
        (syl6eq ((le b a) (mod (shr b a) (d2)) (mod (d0) (d2)) (d0))
          (mod01 ((d2)))
          (modeq1d ((le b a) (shr b a) (d0) (d2))
            (sylibr ((le b a) (lt b (pow (d2) a)) (eq (shr b a) (d0)))
              (ax_mp ((ne (pow (d2) a) (d0)) (iff (eq (shr b a) (d0)) (lt b (pow (d2) a))))
                (:conv (im (ne (pow (d2) a) (d0)) (iff (eq (shr b a) (d0)) (lt b (pow (d2) a))))
                  (im
                    (ne (pow (d2) a) (d0))
                    (iff
                      (eq
                        (:unfold shr (b a) ()
                          (div b (pow (d2) a)))
                        (d0))
                      (lt b (pow (d2) a))))
                  (diveq0 (b (pow (d2) a))))
                (pow2ne0 (a)))
              (mpi ((le b a) (lt a (pow (d2) a)) (lt b (pow (d2) a)))
                (ax_mp ((lt (d1) (d2)) (lt a (pow (d2) a)))
                  (powltid2 ((d2) a))
                  (d1lt2 ()))
                (lelttr (b a (pow (d2) a))))))))))))

(local theorem el02 ((a nat ())) ()
  (not (el a (ns (d0))))
()
(mt ((lt a (d0)) (el a (ns (d0))))
  (ellt (a (d0)))
  (lt02 (a))))

(theorem nel0 ((a nat ())) ()
  (not (el a (ns (d0))))
()
(el02 (a)))

(local theorem ss01 ((A set ())) ()
  (subset (ns (d0)) A)
((x nat))
(:conv (subset (ns (d0)) A)
  (:unfold subset ((ns (d0)) A) (x)
    (al x (im (el x (ns (d0))) (el x A))))
  (ax_gen (x (im (el x (ns (d0))) (el x A)))
    (ax_mp ((not (el x (ns (d0)))) (im (el x (ns (d0))) (el x A)))
      (absurd ((el x (ns (d0))) (el x A)))
      (el02 (x))))))

(local theorem ss02 ((A set ())) ()
  (iff (subset A (ns (d0))) (eqs A (ns (d0))))
()
(ibii ((subset A (ns (d0))) (eqs A (ns (d0))))
  (mpi ((subset A (ns (d0))) (subset (ns (d0)) A) (eqs A (ns (d0))))
    (ss01 (A))
    (ssasym (A (ns (d0)))))
  (mpbiri ((eqs A (ns (d0))) (subset (ns (d0)) (ns (d0))) (subset A (ns (d0))))
    (ss01 ((ns (d0))))
    (sseq1 (A (ns (d0)) (ns (d0)))))))

(local theorem eq0al ((A set ()) (x nat)) ()
  (iff (eqs A (ns (d0))) (al x (not (el x A))))
()
(:conv (iff (eqs A (ns (d0))) (al x (not (el x A))))
  (iff
    (:unfold eqs (A (ns (d0))) (x)
      (al x (iff (el x A) (el x (ns (d0))))))
    (al x (not (el x A))))
  (aleqi (x (iff (el x A) (el x (ns (d0)))) (not (el x A)))
    (ax_mp ((iff (iff (el x A) (fal)) (not (el x A))) (iff (iff (el x A) (el x (ns (d0)))) (not (el x A))))
      (ax_mp ((iff (iff (el x A) (el x (ns (d0)))) (iff (el x A) (fal))) (im (iff (iff (el x A) (fal)) (not (el x A))) (iff (iff (el x A) (el x (ns (d0)))) (not (el x A)))))
        (bitr ((iff (el x A) (el x (ns (d0)))) (iff (el x A) (fal)) (not (el x A))))
        (ax_mp ((iff (el x (ns (d0))) (fal)) (iff (iff (el x A) (el x (ns (d0)))) (iff (el x A) (fal))))
          (bieq2 ((el x A) (el x (ns (d0))) (fal)))
          (mpbir ((not (el x (ns (d0)))) (iff (el x (ns (d0))) (fal)))
            (eqfal ((el x (ns (d0)))))
            (el02 (x)))))
      (eqfal ((el x A)))))))

(local theorem sseq0 ((A set ()) (B set ())) ()
  (im (subset A B) (im (eqs B (ns (d0))) (eqs A (ns (d0)))))
()
(syl6ib ((subset A B) (eqs B (ns (d0))) (subset A (ns (d0))) (eqs A (ns (d0))))
  (ss02 (A))
  (com12 ((eqs B (ns (d0))) (subset A B) (subset A (ns (d0))))
    (bi1d ((eqs B (ns (d0))) (subset A B) (subset A (ns (d0))))
      (sseq2 (A B (ns (d0))))))))

(local theorem in01 ((A set ())) ()
  (eqs (Inter (ns (d0)) A) (ns (d0)))
()
(mpbi ((subset (ns (d0)) A) (eqs (Inter (ns (d0)) A) (ns (d0))))
  (eqin1 ((ns (d0)) A))
  (ss01 (A))))

(local theorem in02 ((A set ())) ()
  (eqs (Inter A (ns (d0))) (ns (d0)))
()
(mpbi ((subset (ns (d0)) A) (eqs (Inter A (ns (d0))) (ns (d0))))
  (eqin2 ((ns (d0)) A))
  (ss01 (A))))

(local theorem inidm ((A set ())) ()
  (eqs (Inter A A) A)
()
(mpbi ((subset A A) (eqs (Inter A A) A))
  (eqin2 (A A))
  (ssid (A))))

(local theorem un01 ((A set ())) ()
  (eqs (Union (ns (d0)) A) A)
()
(mpbi ((subset (ns (d0)) A) (eqs (Union (ns (d0)) A) A))
  (equn1 ((ns (d0)) A))
  (ss01 (A))))

(local theorem un02 ((A set ())) ()
  (eqs (Union A (ns (d0))) A)
()
(mpbi ((subset (ns (d0)) A) (eqs (Union A (ns (d0))) A))
  (equn2 ((ns (d0)) A))
  (ss01 (A))))

(local theorem unidm ((A set ())) ()
  (eqs (Union A A) A)
()
(mpbi ((subset A A) (eqs (Union A A) A))
  (equn2 (A A))
  (ssid (A))))

(local theorem uneq0 ((A set ()) (B set ())) ()
  (iff (eqs (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0)))))
()
(ax_mp ((iff (subset (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))) (iff (eqs (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))))
  (ax_mp ((iff (subset (Union A B) (ns (d0))) (eqs (Union A B) (ns (d0)))) (im (iff (subset (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))) (iff (eqs (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0)))))))
    (bitr3 ((eqs (Union A B) (ns (d0))) (subset (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))))
    (ss02 ((Union A B))))
  (ax_mp ((iff (an (subset A (ns (d0))) (subset B (ns (d0)))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))) (iff (subset (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))))
    (ax_mp ((iff (subset (Union A B) (ns (d0))) (an (subset A (ns (d0))) (subset B (ns (d0))))) (im (iff (an (subset A (ns (d0))) (subset B (ns (d0)))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))) (iff (subset (Union A B) (ns (d0))) (an (eqs A (ns (d0))) (eqs B (ns (d0)))))))
      (bitr ((subset (Union A B) (ns (d0))) (an (subset A (ns (d0))) (subset B (ns (d0)))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))))
      (unss (A B (ns (d0)))))
    (ax_mp ((iff (subset B (ns (d0))) (eqs B (ns (d0)))) (iff (an (subset A (ns (d0))) (subset B (ns (d0)))) (an (eqs A (ns (d0))) (eqs B (ns (d0))))))
      (ax_mp ((iff (subset A (ns (d0))) (eqs A (ns (d0)))) (im (iff (subset B (ns (d0))) (eqs B (ns (d0)))) (iff (an (subset A (ns (d0))) (subset B (ns (d0)))) (an (eqs A (ns (d0))) (eqs B (ns (d0)))))))
        (aneq ((subset A (ns (d0))) (eqs A (ns (d0))) (subset B (ns (d0))) (eqs B (ns (d0)))))
        (ss02 (A)))
      (ss02 (B))))))

(local theorem cplv () ()
  (eqs (Compl (Univ)) (ns (d0)))
((x nat))
(eqri ((Compl (Univ)) (ns (d0)) x)
  (ax_mp ((not (el x (ns (d0)))) (iff (el x (Compl (Univ))) (el x (ns (d0)))))
    (ax_mp ((not (el x (Compl (Univ)))) (im (not (el x (ns (d0)))) (iff (el x (Compl (Univ))) (el x (ns (d0))))))
      (binth ((el x (Compl (Univ))) (el x (ns (d0)))))
      (ax_mp ((el x (Univ)) (not (el x (Compl (Univ)))))
        (ax_mp ((im (el x (Compl (Univ))) (not (el x (Univ)))) (im (el x (Univ)) (not (el x (Compl (Univ))))))
          (con2 ((el x (Compl (Univ))) (el x (Univ))))
          (ax_mp ((iff (el x (Compl (Univ))) (not (el x (Univ)))) (im (el x (Compl (Univ))) (not (el x (Univ)))))
            (bi1 ((el x (Compl (Univ))) (not (el x (Univ)))))
            (elcpl ((Univ) x))))
        (elv (x))))
    (el02 (x)))))

(local theorem cpl0 () ()
  (eqs (Compl (ns (d0))) (Univ))
()
(ax_mp ((eqs (Compl (Compl (Univ))) (Univ)) (eqs (Compl (ns (d0))) (Univ)))
  (ax_mp ((eqs (Compl (Compl (Univ))) (Compl (ns (d0)))) (im (eqs (Compl (Compl (Univ))) (Univ)) (eqs (Compl (ns (d0))) (Univ))))
    (eqstr3 ((Compl (ns (d0))) (Compl (Compl (Univ))) (Univ)))
    (ax_mp ((eqs (Compl (Univ)) (ns (d0))) (eqs (Compl (Compl (Univ))) (Compl (ns (d0)))))
      (cpleq ((Compl (Univ)) (ns (d0))))
      (cplv ())))
  (cplcpl ((Univ)))))

(local theorem incpl2 ((A set ())) ()
  (eqs (Inter A (Compl A)) (ns (d0)))
()
(mpbir ((eqs (Compl (Inter A (Compl A))) (Compl (ns (d0)))) (eqs (Inter A (Compl A)) (ns (d0))))
  (cplinj ((Inter A (Compl A)) (ns (d0))))
  (ax_mp ((eqs (Union (Compl A) (Compl (Compl A))) (Compl (ns (d0)))) (eqs (Compl (Inter A (Compl A))) (Compl (ns (d0)))))
    (ax_mp ((eqs (Compl (Inter A (Compl A))) (Union (Compl A) (Compl (Compl A)))) (im (eqs (Union (Compl A) (Compl (Compl A))) (Compl (ns (d0)))) (eqs (Compl (Inter A (Compl A))) (Compl (ns (d0))))))
      (eqstr ((Compl (Inter A (Compl A))) (Union (Compl A) (Compl (Compl A))) (Compl (ns (d0)))))
      (cplin (A (Compl A))))
    (ax_mp ((eqs (Compl (ns (d0))) (Univ)) (eqs (Union (Compl A) (Compl (Compl A))) (Compl (ns (d0)))))
      (ax_mp ((eqs (Union (Compl A) (Compl (Compl A))) (Univ)) (im (eqs (Compl (ns (d0))) (Univ)) (eqs (Union (Compl A) (Compl (Compl A))) (Compl (ns (d0))))))
        (eqstr4 ((Union (Compl A) (Compl (Compl A))) (Univ) (Compl (ns (d0)))))
        (uncpl2 ((Compl A))))
      (cpl0 ())))))

(local theorem incpl1 ((A set ())) ()
  (eqs (Inter (Compl A) A) (ns (d0)))
()
(ax_mp ((eqs (Inter A (Compl A)) (ns (d0))) (eqs (Inter (Compl A) A) (ns (d0))))
  (ax_mp ((eqs (Inter (Compl A) A) (Inter A (Compl A))) (im (eqs (Inter A (Compl A)) (ns (d0))) (eqs (Inter (Compl A) A) (ns (d0)))))
    (eqstr ((Inter (Compl A) A) (Inter A (Compl A)) (ns (d0))))
    (incom ((Compl A) A)))
  (incpl2 (A))))

(local theorem incpleq0 ((A set ()) (B set ())) ()
  (iff (eqs (Inter A (Compl B)) (ns (d0))) (subset A B))
((x nat))
(:conv (iff (eqs (Inter A (Compl B)) (ns (d0))) (subset A B))
  (iff
    (:unfold eqs ((Inter A (Compl B)) (ns (d0))) (x)
      (al x (iff (el x (Inter A (Compl B))) (el x (ns (d0))))))
    (:unfold subset (A B) (x)
      (al x (im (el x A) (el x B)))))
  (aleqi (x (iff (el x (Inter A (Compl B))) (el x (ns (d0)))) (im (el x A) (el x B)))
    (ax_mp ((iff (not (el x (Inter A (Compl B)))) (im (el x A) (el x B))) (iff (iff (el x (Inter A (Compl B))) (el x (ns (d0)))) (im (el x A) (el x B))))
      (ax_mp ((iff (iff (el x (Inter A (Compl B))) (el x (ns (d0)))) (not (el x (Inter A (Compl B))))) (im (iff (not (el x (Inter A (Compl B)))) (im (el x A) (el x B))) (iff (iff (el x (Inter A (Compl B))) (el x (ns (d0)))) (im (el x A) (el x B)))))
        (bitr ((iff (el x (Inter A (Compl B))) (el x (ns (d0)))) (not (el x (Inter A (Compl B)))) (im (el x A) (el x B))))
        (ax_mp ((not (el x (ns (d0)))) (iff (iff (el x (Inter A (Compl B))) (el x (ns (d0)))) (not (el x (Inter A (Compl B))))))
          (bibin2 ((el x (Inter A (Compl B))) (el x (ns (d0)))))
          (el02 (x))))
      (ax_mp ((iff (im (el x A) (el x B)) (not (an (el x A) (not (el x B))))) (iff (not (el x (Inter A (Compl B)))) (im (el x A) (el x B))))
        (ax_mp ((iff (not (el x (Inter A (Compl B)))) (not (an (el x A) (not (el x B))))) (im (iff (im (el x A) (el x B)) (not (an (el x A) (not (el x B))))) (iff (not (el x (Inter A (Compl B)))) (im (el x A) (el x B)))))
          (bitr4 ((not (el x (Inter A (Compl B)))) (not (an (el x A) (not (el x B)))) (im (el x A) (el x B))))
          (ax_mp ((iff (el x (Inter A (Compl B))) (an (el x A) (not (el x B)))) (iff (not (el x (Inter A (Compl B)))) (not (an (el x A) (not (el x B))))))
            (noteq ((el x (Inter A (Compl B))) (an (el x A) (not (el x B)))))
            (ax_mp ((iff (an (el x A) (el x (Compl B))) (an (el x A) (not (el x B)))) (iff (el x (Inter A (Compl B))) (an (el x A) (not (el x B)))))
              (ax_mp ((iff (el x (Inter A (Compl B))) (an (el x A) (el x (Compl B)))) (im (iff (an (el x A) (el x (Compl B))) (an (el x A) (not (el x B)))) (iff (el x (Inter A (Compl B))) (an (el x A) (not (el x B))))))
                (bitr ((el x (Inter A (Compl B))) (an (el x A) (el x (Compl B))) (an (el x A) (not (el x B)))))
                (elin (A (Compl B) x)))
              (aneq2i ((el x A) (el x (Compl B)) (not (el x B)))
                (elcpl (B x))))))
        (iman ((el x A) (el x B))))))))

(local theorem ineq0 ((A set ()) (B set ())) ()
  (iff (eqs (Inter A B) (ns (d0))) (subset A (Compl B)))
()
(ax_mp ((iff (eqs (Inter A (Compl (Compl B))) (ns (d0))) (subset A (Compl B))) (iff (eqs (Inter A B) (ns (d0))) (subset A (Compl B))))
  (ax_mp ((iff (eqs (Inter A (Compl (Compl B))) (ns (d0))) (eqs (Inter A B) (ns (d0)))) (im (iff (eqs (Inter A (Compl (Compl B))) (ns (d0))) (subset A (Compl B))) (iff (eqs (Inter A B) (ns (d0))) (subset A (Compl B)))))
    (bitr3 ((eqs (Inter A B) (ns (d0))) (eqs (Inter A (Compl (Compl B))) (ns (d0))) (subset A (Compl B))))
    (ax_mp ((eqs (Inter A (Compl (Compl B))) (Inter A B)) (iff (eqs (Inter A (Compl (Compl B))) (ns (d0))) (eqs (Inter A B) (ns (d0)))))
      (eqseq1 ((Inter A (Compl (Compl B))) (Inter A B) (ns (d0))))
      (ax_mp ((eqs (Compl (Compl B)) B) (eqs (Inter A (Compl (Compl B))) (Inter A B)))
        (ineq2 (A (Compl (Compl B)) B))
        (cplcpl (B)))))
  (incpleq0 (A (Compl B)))))

(local theorem ineq0r ((A set ()) (B set ())) ()
  (iff (eqs (Inter A B) (ns (d0))) (subset B (Compl A)))
()
(ax_mp ((iff (eqs (Inter B A) (ns (d0))) (subset B (Compl A))) (iff (eqs (Inter A B) (ns (d0))) (subset B (Compl A))))
  (ax_mp ((iff (eqs (Inter A B) (ns (d0))) (eqs (Inter B A) (ns (d0)))) (im (iff (eqs (Inter B A) (ns (d0))) (subset B (Compl A))) (iff (eqs (Inter A B) (ns (d0))) (subset B (Compl A)))))
    (bitr ((eqs (Inter A B) (ns (d0))) (eqs (Inter B A) (ns (d0))) (subset B (Compl A))))
    (ax_mp ((eqs (Inter A B) (Inter B A)) (iff (eqs (Inter A B) (ns (d0))) (eqs (Inter B A) (ns (d0)))))
      (eqseq1 ((Inter A B) (Inter B A) (ns (d0))))
      (incom (A B))))
  (ineq0 (B A))))

(local theorem sscpl2 ((A set ()) (B set ())) ()
  (iff (subset A (Compl B)) (subset B (Compl A)))
()
(ax_mp ((iff (eqs (Inter A B) (ns (d0))) (subset B (Compl A))) (iff (subset A (Compl B)) (subset B (Compl A))))
  (ax_mp ((iff (eqs (Inter A B) (ns (d0))) (subset A (Compl B))) (im (iff (eqs (Inter A B) (ns (d0))) (subset B (Compl A))) (iff (subset A (Compl B)) (subset B (Compl A)))))
    (bitr3 ((subset A (Compl B)) (eqs (Inter A B) (ns (d0))) (subset B (Compl A))))
    (ineq0 (A B)))
  (ineq0r (A B))))

(local theorem inincpl ((A set ()) (B set ())) ()
  (eqs (Inter A (Inter B (Compl A))) (ns (d0)))
()
(ax_mp ((eqs (Inter A (Compl A)) (ns (d0))) (eqs (Inter A (Inter B (Compl A))) (ns (d0))))
  (ax_mp ((subset (Inter A (Inter B (Compl A))) (Inter A (Compl A))) (im (eqs (Inter A (Compl A)) (ns (d0))) (eqs (Inter A (Inter B (Compl A))) (ns (d0)))))
    (sseq0 ((Inter A (Inter B (Compl A))) (Inter A (Compl A))))
    (ax_mp ((subset (Inter B (Compl A)) (Compl A)) (subset (Inter A (Inter B (Compl A))) (Inter A (Compl A))))
      (ssin2 (A (Inter B (Compl A)) (Compl A)))
      (inss2 (B (Compl A)))))
  (incpl2 (A))))

(local theorem unincpl ((A set ()) (B set ())) ()
  (eqs (Union A (Inter B (Compl A))) (Union A B))
()
(ax_mp ((eqs (Inter (Union A B) (Union A (Compl A))) (Union A B)) (eqs (Union A (Inter B (Compl A))) (Union A B)))
  (ax_mp ((eqs (Union A (Inter B (Compl A))) (Inter (Union A B) (Union A (Compl A)))) (im (eqs (Inter (Union A B) (Union A (Compl A))) (Union A B)) (eqs (Union A (Inter B (Compl A))) (Union A B))))
    (eqstr ((Union A (Inter B (Compl A))) (Inter (Union A B) (Union A (Compl A))) (Union A B)))
    (undi (A B (Compl A))))
  (mpbi ((subset (Union A B) (Union A (Compl A))) (eqs (Inter (Union A B) (Union A (Compl A))) (Union A B)))
    (eqin1 ((Union A B) (Union A (Compl A))))
    (mpbir ((subset (Union A B) (Univ)) (subset (Union A B) (Union A (Compl A))))
      (ax_mp ((eqs (Union A (Compl A)) (Univ)) (iff (subset (Union A B) (Union A (Compl A))) (subset (Union A B) (Univ))))
        (sseq2 ((Union A B) (Union A (Compl A)) (Univ)))
        (uncpl2 (A)))
      (ssv2 ((Union A B)))))))

(local theorem xp01 ((A set ())) ()
  (eqs (Xp (ns (d0)) A) (ns (d0)))
((x nat))
(mpbir ((al x (not (el x (Xp (ns (d0)) A)))) (eqs (Xp (ns (d0)) A) (ns (d0))))
  (eq0al ((Xp (ns (d0)) A) x))
  (ax_gen (x (not (el x (Xp (ns (d0)) A))))
    (mt ((el (fst x) (ns (d0))) (el x (Xp (ns (d0)) A)))
      (xpfst ((ns (d0)) A x))
      (el02 ((fst x)))))))

(local theorem xp02 ((A set ())) ()
  (eqs (Xp A (ns (d0))) (ns (d0)))
((x nat))
(mpbir ((al x (not (el x (Xp A (ns (d0)))))) (eqs (Xp A (ns (d0))) (ns (d0))))
  (eq0al ((Xp A (ns (d0))) x))
  (ax_gen (x (not (el x (Xp A (ns (d0))))))
    (mt ((el (snd x) (ns (d0))) (el x (Xp A (ns (d0)))))
      (xpsnd (A (ns (d0)) x))
      (el02 ((snd x)))))))

(local theorem dmeq0 ((A set ())) ()
  (iff (eqs (Dom A) (ns (d0))) (eqs A (ns (d0))))
()
(ax_mp ((iff (subset (Dom A) (ns (d0))) (eqs A (ns (d0)))) (iff (eqs (Dom A) (ns (d0))) (eqs A (ns (d0)))))
  (ax_mp ((iff (subset (Dom A) (ns (d0))) (eqs (Dom A) (ns (d0)))) (im (iff (subset (Dom A) (ns (d0))) (eqs A (ns (d0)))) (iff (eqs (Dom A) (ns (d0))) (eqs A (ns (d0))))))
    (bitr3 ((eqs (Dom A) (ns (d0))) (subset (Dom A) (ns (d0))) (eqs A (ns (d0)))))
    (ss02 ((Dom A))))
  (ax_mp ((iff (subset A (Xp (ns (d0)) (Univ))) (eqs A (ns (d0)))) (iff (subset (Dom A) (ns (d0))) (eqs A (ns (d0)))))
    (ax_mp ((iff (subset (Dom A) (ns (d0))) (subset A (Xp (ns (d0)) (Univ)))) (im (iff (subset A (Xp (ns (d0)) (Univ))) (eqs A (ns (d0)))) (iff (subset (Dom A) (ns (d0))) (eqs A (ns (d0))))))
      (bitr ((subset (Dom A) (ns (d0))) (subset A (Xp (ns (d0)) (Univ))) (eqs A (ns (d0)))))
      (ssdm ((ns (d0)) A)))
    (ax_mp ((iff (subset A (ns (d0))) (eqs A (ns (d0)))) (iff (subset A (Xp (ns (d0)) (Univ))) (eqs A (ns (d0)))))
      (ax_mp ((iff (subset A (Xp (ns (d0)) (Univ))) (subset A (ns (d0)))) (im (iff (subset A (ns (d0))) (eqs A (ns (d0)))) (iff (subset A (Xp (ns (d0)) (Univ))) (eqs A (ns (d0))))))
        (bitr ((subset A (Xp (ns (d0)) (Univ))) (subset A (ns (d0))) (eqs A (ns (d0)))))
        (ax_mp ((eqs (Xp (ns (d0)) (Univ)) (ns (d0))) (iff (subset A (Xp (ns (d0)) (Univ))) (subset A (ns (d0)))))
          (sseq2 (A (Xp (ns (d0)) (Univ)) (ns (d0))))
          (xp01 ((Univ)))))
      (ss02 (A))))))

(local theorem rneq0 ((A set ())) ()
  (iff (eqs (Ran A) (ns (d0))) (eqs A (ns (d0))))
()
(ax_mp ((iff (subset (Ran A) (ns (d0))) (eqs A (ns (d0)))) (iff (eqs (Ran A) (ns (d0))) (eqs A (ns (d0)))))
  (ax_mp ((iff (subset (Ran A) (ns (d0))) (eqs (Ran A) (ns (d0)))) (im (iff (subset (Ran A) (ns (d0))) (eqs A (ns (d0)))) (iff (eqs (Ran A) (ns (d0))) (eqs A (ns (d0))))))
    (bitr3 ((eqs (Ran A) (ns (d0))) (subset (Ran A) (ns (d0))) (eqs A (ns (d0)))))
    (ss02 ((Ran A))))
  (ax_mp ((iff (subset A (Xp (Univ) (ns (d0)))) (eqs A (ns (d0)))) (iff (subset (Ran A) (ns (d0))) (eqs A (ns (d0)))))
    (ax_mp ((iff (subset (Ran A) (ns (d0))) (subset A (Xp (Univ) (ns (d0))))) (im (iff (subset A (Xp (Univ) (ns (d0)))) (eqs A (ns (d0)))) (iff (subset (Ran A) (ns (d0))) (eqs A (ns (d0))))))
      (bitr ((subset (Ran A) (ns (d0))) (subset A (Xp (Univ) (ns (d0)))) (eqs A (ns (d0)))))
      (ssrn ((ns (d0)) A)))
    (ax_mp ((iff (subset A (ns (d0))) (eqs A (ns (d0)))) (iff (subset A (Xp (Univ) (ns (d0)))) (eqs A (ns (d0)))))
      (ax_mp ((iff (subset A (Xp (Univ) (ns (d0)))) (subset A (ns (d0)))) (im (iff (subset A (ns (d0))) (eqs A (ns (d0)))) (iff (subset A (Xp (Univ) (ns (d0)))) (eqs A (ns (d0))))))
        (bitr ((subset A (Xp (Univ) (ns (d0)))) (subset A (ns (d0))) (eqs A (ns (d0)))))
        (ax_mp ((eqs (Xp (Univ) (ns (d0))) (ns (d0))) (iff (subset A (Xp (Univ) (ns (d0)))) (subset A (ns (d0)))))
          (sseq2 (A (Xp (Univ) (ns (d0))) (ns (d0))))
          (xp02 ((Univ)))))
      (ss02 (A))))))

(local theorem dm0 () ()
  (eqs (Dom (ns (d0))) (ns (d0)))
()
(mpbir ((eqs (ns (d0)) (ns (d0))) (eqs (Dom (ns (d0))) (ns (d0))))
  (dmeq0 ((ns (d0))))
  (eqsid ((ns (d0))))))

(local theorem rn0 () ()
  (eqs (Ran (ns (d0))) (ns (d0)))
()
(mpbir ((eqs (ns (d0)) (ns (d0))) (eqs (Ran (ns (d0))) (ns (d0))))
  (rneq0 ((ns (d0))))
  (eqsid ((ns (d0))))))

(local theorem isf0 () ()
  (isfun (ns (d0)))
((x nat) (y nat) (z nat))
(:conv (isfun (ns (d0)))
  (:unfold isfun ((ns (d0))) (x y z)
    (al x (al y (al z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z)))))))
  (ax_gen (x (al y (al z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))))
    (ax_gen (y (al z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z)))))
      (ax_gen (z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))
        (ax_mp ((not (el (pr x y) (ns (d0)))) (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))
          (absurd ((el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))
          (el02 ((pr x y)))))))))

(local theorem app01 ((a nat ())) ()
  (eq (app (ns (d0)) a) (d0))
()
(ax_mp ((not (el a (Dom (ns (d0))))) (eq (app (ns (d0)) a) (d0)))
  (ndmapp ((ns (d0)) a))
  (mtbir ((el a (ns (d0))) (el a (Dom (ns (d0)))))
    (ax_mp ((eqs (Dom (ns (d0))) (ns (d0))) (iff (el a (Dom (ns (d0)))) (el a (ns (d0)))))
      (eleq2 ((Dom (ns (d0))) (ns (d0)) a))
      (dm0 ()))
    (el02 (a)))))

(local theorem disjne ((A set ()) (B set ()) (G wff ()) (x nat ()) (y nat ()))
  ((h1 (im G (eqs (Inter A B) (ns (d0)))))
   (h2 (im G (el x A)))
   (h3 (im G (el y B))))
  (im G (ne x y))
()
(mpi (G (not (el y (ns (d0)))) (ne x y))
  (el02 (y))
  (:conv (im G (im (not (el y (ns (d0)))) (ne x y)))
    (im
      G
      (im
        (not (el y (ns (d0))))
        (:unfold ne (x y) ()
          (not (eq x y)))))
    (con3d (G (eq x y) (el y (ns (d0))))
      (exp (G (eq x y) (el y (ns (d0))))
        (mpbid ((an G (eq x y)) (el y (Inter A B)) (el y (ns (d0))))
          (eleq2d ((Inter A B) (ns (d0)) (an G (eq x y)) y)
            (anwl (G (eq x y) (eqs (Inter A B) (ns (d0))))
              h1))
          (sylibr ((an G (eq x y)) (an (el y A) (el y B)) (el y (Inter A B)))
            (elin (A B y))
            (iand ((an G (eq x y)) (el y A) (el y B))
              (mpbid ((an G (eq x y)) (el x A) (el y A))
                (eleq1d (A (an G (eq x y)) x y)
                  (anr (G (eq x y))))
                (anwl (G (eq x y) (el x A))
                  h2))
              (anwl (G (eq x y) (el y B))
                h3)))))))))

(local theorem unisf ((A set ()) (B set ())) ()
  (im (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (iff (isfun (Union A B)) (an (isfun A) (isfun B))))
((x1 nat) (x2 nat) (x3 nat))
(:let H1 (elun (A B (pr x1 x3)))
(:let H2 (syl5bir ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (el x1 (Dom A)) (el x1 (Dom B))) (el x1 (Inter (Dom A) (Dom B))) (eq x2 x3))
  (elin ((Dom A) (Dom B) x1))
  (syl6 ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (el x1 (Inter (Dom A) (Dom B))) (el x1 (ns (d0))) (eq x2 x3))
    (ax_mp ((not (el x1 (ns (d0)))) (im (el x1 (ns (d0))) (eq x2 x3)))
      (absurd ((el x1 (ns (d0))) (eq x2 x3)))
      (el02 (x1)))
    (bi1d ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (el x1 (Inter (Dom A) (Dom B))) (el x1 (ns (d0))))
      (eleq2 ((Inter (Dom A) (Dom B)) (ns (d0)) x1)))))
(ibid ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (isfun (Union A B)) (an (isfun A) (isfun B)))
  (a1i ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (im (isfun (Union A B)) (an (isfun A) (isfun B))))
    (iand ((isfun (Union A B)) (isfun A) (isfun B))
      (ax_mp ((subset A (Union A B)) (im (isfun (Union A B)) (isfun A)))
        (isfss (A (Union A B)))
        (ssun1 (A B)))
      (ax_mp ((subset B (Union A B)) (im (isfun (Union A B)) (isfun B)))
        (isfss (B (Union A B)))
        (ssun2 (A B)))))
  (exp ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B)) (isfun (Union A B)))
    (:conv (im (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (isfun (Union A B)))
      (im
        (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B)))
        (:unfold isfun ((Union A B)) (x1 x2 x3)
          (al x1 (al x2 (al x3 (im (el (pr x1 x2) (Union A B)) (im (el (pr x1 x3) (Union A B)) (eq x2 x3))))))))
      (iald (x1 (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (al x2 (al x3 (im (el (pr x1 x2) (Union A B)) (im (el (pr x1 x3) (Union A B)) (eq x2 x3))))))
        (iald (x2 (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (al x3 (im (el (pr x1 x2) (Union A B)) (im (el (pr x1 x3) (Union A B)) (eq x2 x3)))))
          (iald (x3 (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (im (el (pr x1 x2) (Union A B)) (im (el (pr x1 x3) (Union A B)) (eq x2 x3))))
            (syl5bi ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) (Union A B)) (or (el (pr x1 x2) A) (el (pr x1 x2) B)) (im (el (pr x1 x3) (Union A B)) (eq x2 x3)))
              (elun (A B (pr x1 x2)))
              (eorda ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A) (el (pr x1 x2) B) (im (el (pr x1 x3) (Union A B)) (eq x2 x3)))
                (syl5bi ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) (Union A B)) (or (el (pr x1 x3) A) (el (pr x1 x3) B)) (eq x2 x3))
                  H1
                  (eorda ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) A) (el (pr x1 x3) B) (eq x2 x3))
                    (isfd (A (an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) A)) x1 x2 x3)
                      (anwll ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A) (el (pr x1 x3) A) (isfun A))
                        (anrl ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (isfun A) (isfun B))))
                      (anlr ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A) (el (pr x1 x3) A)))
                      (anr ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) A))))
                    (mpd ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (an (el x1 (Dom A)) (el x1 (Dom B))) (eq x2 x3))
                      (iand ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el x1 (Dom A)) (el x1 (Dom B)))
                        (syl ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x2) A) (el x1 (Dom A)))
                          (preldm (A x1 x2))
                          (anlr ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A) (el (pr x1 x3) B))))
                        (syl ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x3) B) (el x1 (Dom B)))
                          (preldm (B x1 x3))
                          (anr ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) A)) (el (pr x1 x3) B)))))
                      (anw3l ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B)) (el (pr x1 x2) A) (el (pr x1 x3) B) (im (an (el x1 (Dom A)) (el x1 (Dom B))) (eq x2 x3)))
                        H2))))
                (syl5bi ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) (Union A B)) (or (el (pr x1 x3) A) (el (pr x1 x3) B)) (eq x2 x3))
                  H1
                  (eorda ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) A) (el (pr x1 x3) B) (eq x2 x3))
                    (mpd ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) A)) (an (el x1 (Dom A)) (el x1 (Dom B))) (eq x2 x3))
                      (iand ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) A)) (el x1 (Dom A)) (el x1 (Dom B)))
                        (syl ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) A)) (el (pr x1 x3) A) (el x1 (Dom A)))
                          (preldm (A x1 x3))
                          (anr ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) A))))
                        (syl ((an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) A)) (el (pr x1 x2) B) (el x1 (Dom B)))
                          (preldm (B x1 x2))
                          (anlr ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B) (el (pr x1 x3) A)))))
                      (anw3l ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B)) (el (pr x1 x2) B) (el (pr x1 x3) A) (im (an (el x1 (Dom A)) (el x1 (Dom B))) (eq x2 x3)))
                        H2))
                    (isfd (B (an (an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) B)) x1 x2 x3)
                      (anwll ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B) (el (pr x1 x3) B) (isfun B))
                        (anrr ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (isfun A) (isfun B))))
                      (anlr ((an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B) (el (pr x1 x3) B)))
                      (anr ((an (an (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (an (isfun A) (isfun B))) (el (pr x1 x2) B)) (el (pr x1 x3) B)))))))))))))))))

(local theorem reseq0 ((A set ()) (F set ())) ()
  (iff (eqs (Inter (Dom F) A) (ns (d0))) (eqs (res F A) (ns (d0))))
()
(ax_mp ((iff (eqs (res F A) (ns (d0))) (subset (Dom F) (Compl A))) (iff (eqs (Inter (Dom F) A) (ns (d0))) (eqs (res F A) (ns (d0)))))
  (ax_mp ((iff (eqs (Inter (Dom F) A) (ns (d0))) (subset (Dom F) (Compl A))) (im (iff (eqs (res F A) (ns (d0))) (subset (Dom F) (Compl A))) (iff (eqs (Inter (Dom F) A) (ns (d0))) (eqs (res F A) (ns (d0))))))
    (bitr4 ((eqs (Inter (Dom F) A) (ns (d0))) (subset (Dom F) (Compl A)) (eqs (res F A) (ns (d0)))))
    (ineq0 ((Dom F) A)))
  (ax_mp ((iff (subset (Dom F) (Compl A)) (subset F (Compl (Xp A (Univ))))) (iff (eqs (res F A) (ns (d0))) (subset (Dom F) (Compl A))))
    (ax_mp ((iff (eqs (res F A) (ns (d0))) (subset F (Compl (Xp A (Univ))))) (im (iff (subset (Dom F) (Compl A)) (subset F (Compl (Xp A (Univ))))) (iff (eqs (res F A) (ns (d0))) (subset (Dom F) (Compl A)))))
      (bitr4 ((eqs (res F A) (ns (d0))) (subset F (Compl (Xp A (Univ)))) (subset (Dom F) (Compl A))))
      (:conv (iff (eqs (res F A) (ns (d0))) (subset F (Compl (Xp A (Univ)))))
        (iff
          (eqs
            (:unfold res (F A) ()
              (Inter F (Xp A (Univ))))
            (ns (d0)))
          (subset F (Compl (Xp A (Univ)))))
        (ineq0 (F (Xp A (Univ))))))
    (ax_mp ((iff (subset F (Compl (Xp A (Univ)))) (subset F (Xp (Compl A) (Univ)))) (iff (subset (Dom F) (Compl A)) (subset F (Compl (Xp A (Univ))))))
      (ax_mp ((iff (subset (Dom F) (Compl A)) (subset F (Xp (Compl A) (Univ)))) (im (iff (subset F (Compl (Xp A (Univ)))) (subset F (Xp (Compl A) (Univ)))) (iff (subset (Dom F) (Compl A)) (subset F (Compl (Xp A (Univ)))))))
        (bitr4 ((subset (Dom F) (Compl A)) (subset F (Xp (Compl A) (Univ))) (subset F (Compl (Xp A (Univ))))))
        (ssdm ((Compl A) F)))
      (ax_mp ((eqs (Compl (Xp A (Univ))) (Xp (Compl A) (Univ))) (iff (subset F (Compl (Xp A (Univ)))) (subset F (Xp (Compl A) (Univ)))))
        (sseq2 (F (Compl (Xp A (Univ))) (Xp (Compl A) (Univ))))
        (cplxpv2 (A)))))))

(local theorem dmdisj1 ((A set ()) (B set ())) ()
  (im (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (eqs (Inter A B) (ns (d0))))
((x nat) (y nat))
(sylbir ((eqs (Inter (Dom A) (Dom B)) (ns (d0))) (subset (Inter (Dom A) (Dom B)) (ns (d0))) (eqs (Inter A B) (ns (d0))))
  (ss02 ((Inter (Dom A) (Dom B))))
  (sylib ((subset (Inter (Dom A) (Dom B)) (ns (d0))) (subset (Inter A B) (ns (d0))) (eqs (Inter A B) (ns (d0))))
    (ss02 ((Inter A B)))
    (ssrd2 ((Inter A B) (ns (d0)) (subset (Inter (Dom A) (Dom B)) (ns (d0))) x y)
      (syl5bi ((subset (Inter (Dom A) (Dom B)) (ns (d0))) (el (pr x y) (Inter A B)) (an (el (pr x y) A) (el (pr x y) B)) (el (pr x y) (ns (d0))))
        (elin (A B (pr x y)))
        (syl5 ((subset (Inter (Dom A) (Dom B)) (ns (d0))) (an (el (pr x y) A) (el (pr x y) B)) (an (el x (Dom A)) (el x (Dom B))) (el (pr x y) (ns (d0))))
          (ax_mp ((im (el (pr x y) B) (el x (Dom B))) (im (an (el (pr x y) A) (el (pr x y) B)) (an (el x (Dom A)) (el x (Dom B)))))
            (ax_mp ((im (el (pr x y) A) (el x (Dom A))) (im (im (el (pr x y) B) (el x (Dom B))) (im (an (el (pr x y) A) (el (pr x y) B)) (an (el x (Dom A)) (el x (Dom B))))))
              (anim ((el (pr x y) A) (el x (Dom A)) (el (pr x y) B) (el x (Dom B))))
              (preldm (A x y)))
            (preldm (B x y)))
          (syl5bir ((subset (Inter (Dom A) (Dom B)) (ns (d0))) (an (el x (Dom A)) (el x (Dom B))) (el x (Inter (Dom A) (Dom B))) (el (pr x y) (ns (d0))))
            (elin ((Dom A) (Dom B) x))
            (syl6 ((subset (Inter (Dom A) (Dom B)) (ns (d0))) (el x (Inter (Dom A) (Dom B))) (el x (ns (d0))) (el (pr x y) (ns (d0))))
              (ax_mp ((not (el x (ns (d0)))) (im (el x (ns (d0))) (el (pr x y) (ns (d0)))))
                (absurd ((el x (ns (d0))) (el (pr x y) (ns (d0)))))
                (el02 (x)))
              (ssel ((Inter (Dom A) (Dom B)) (ns (d0)) x))))))))))

(local theorem dmdisj ((A set ()) (B set ())) ()
  (im (isfun (Union A B)) (iff (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (eqs (Inter A B) (ns (d0)))))
((x1 nat) (x2 nat) (x3 nat))
(:let H1 (anlr ((an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A) (el (pr x1 x3) B)))
(:let H2 (anr ((an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)))
(ibid ((isfun (Union A B)) (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (eqs (Inter A B) (ns (d0))))
  (a1i ((isfun (Union A B)) (im (eqs (Inter (Dom A) (Dom B)) (ns (d0))) (eqs (Inter A B) (ns (d0)))))
    (dmdisj1 (A B)))
  (exp ((isfun (Union A B)) (eqs (Inter A B) (ns (d0))) (eqs (Inter (Dom A) (Dom B)) (ns (d0))))
    (sylib ((an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (subset (Inter (Dom A) (Dom B)) (ns (d0))) (eqs (Inter (Dom A) (Dom B)) (ns (d0))))
      (ss02 ((Inter (Dom A) (Dom B))))
      (:conv (im (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (subset (Inter (Dom A) (Dom B)) (ns (d0))))
        (im
          (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0))))
          (:unfold subset ((Inter (Dom A) (Dom B)) (ns (d0))) (x1)
            (al x1 (im (el x1 (Inter (Dom A) (Dom B))) (el x1 (ns (d0)))))))
        (iald (x1 (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (im (el x1 (Inter (Dom A) (Dom B))) (el x1 (ns (d0)))))
          (syl5bi ((an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el x1 (Inter (Dom A) (Dom B))) (an (el x1 (Dom A)) (el x1 (Dom B))) (el x1 (ns (d0))))
            (elin ((Dom A) (Dom B) x1))
            (syl5bi ((an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (an (el x1 (Dom A)) (el x1 (Dom B))) (an (ex x2 (el (pr x1 x2) A)) (ex x3 (el (pr x1 x3) B))) (el x1 (ns (d0))))
              (ax_mp ((iff (el x1 (Dom B)) (ex x3 (el (pr x1 x3) B))) (iff (an (el x1 (Dom A)) (el x1 (Dom B))) (an (ex x2 (el (pr x1 x2) A)) (ex x3 (el (pr x1 x3) B)))))
                (ax_mp ((iff (el x1 (Dom A)) (ex x2 (el (pr x1 x2) A))) (im (iff (el x1 (Dom B)) (ex x3 (el (pr x1 x3) B))) (iff (an (el x1 (Dom A)) (el x1 (Dom B))) (an (ex x2 (el (pr x1 x2) A)) (ex x3 (el (pr x1 x3) B))))))
                  (aneq ((el x1 (Dom A)) (ex x2 (el (pr x1 x2) A)) (el x1 (Dom B)) (ex x3 (el (pr x1 x3) B))))
                  (eldm (A x1 x2)))
                (eldm (B x1 x3)))
              (impd ((an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (ex x2 (el (pr x1 x2) A)) (ex x3 (el (pr x1 x3) B)) (el x1 (ns (d0))))
                (eexda (x2 (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A) (im (ex x3 (el (pr x1 x3) B)) (el x1 (ns (d0)))))
                  (eexda (x3 (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B) (el x1 (ns (d0))))
                    (syl ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x2) (ns (d0))) (el x1 (ns (d0))))
                      (ax_mp ((not (el (pr x1 x2) (ns (d0)))) (im (el (pr x1 x2) (ns (d0))) (el x1 (ns (d0)))))
                        (absurd ((el (pr x1 x2) (ns (d0))) (el x1 (ns (d0)))))
                        (el02 ((pr x1 x2))))
                      (mpbid ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x2) (Inter A B)) (el (pr x1 x2) (ns (d0))))
                        (eleq2d ((Inter A B) (ns (d0)) (an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (pr x1 x2))
                          (anllr ((isfun (Union A B)) (eqs (Inter A B) (ns (d0))) (el (pr x1 x2) A) (el (pr x1 x3) B))))
                        (sylibr ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (an (el (pr x1 x2) A) (el (pr x1 x2) B)) (el (pr x1 x2) (Inter A B)))
                          (elin (A B (pr x1 x2)))
                          (iand ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x2) A) (el (pr x1 x2) B))
                            H1
                            (mpbird ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x3) B) (el (pr x1 x2) B))
                              (eleq1d (B (an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (pr x1 x2) (pr x1 x3))
                                (preq2d ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) x1 x2 x3)
                                  (isfd ((Union A B) (an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) x1 x2 x3)
                                    (an3l ((isfun (Union A B)) (eqs (Inter A B) (ns (d0))) (el (pr x1 x2) A) (el (pr x1 x3) B)))
                                    (rsyl ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x2) A) (el (pr x1 x2) (Union A B)))
                                      H1
                                      (elun1 (A B (pr x1 x2))))
                                    (rsyl ((an (an (an (isfun (Union A B)) (eqs (Inter A B) (ns (d0)))) (el (pr x1 x2) A)) (el (pr x1 x3) B)) (el (pr x1 x3) B) (el (pr x1 x3) (Union A B)))
                                      H2
                                      (elun2 (A B (pr x1 x3)))))))
                              H2))))))))))))))))))

(local theorem appleid1 ((f nat ()) (x nat ())) ()
  (le (app (ns f) x) f)
((x1 nat) (x2 nat) (x3 nat))
(cases ((ex x2 (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2)))) (le (app (ns f) x) f))
  (eex (x2 (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))) (le (app (ns f) x) f))
    (mpbird ((eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))) (le x2 f) (le (app (ns f) x) f))
      (leeq1d ((eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))) (app (ns f) x) x2 f)
        (:conv (im (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))) (eq (app (ns f) x) x2))
          (im
            (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2)))
            (eq
              (:unfold app ((ns f) x) (x3)
                (the (ab x3 (el (pr x x3) (ns f)))))
              x2))
          (theid (x1 (ab x3 (el (pr x x3) (ns f))) x2))))
      (rsyl ((eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))) (el x2 (ab x3 (el (pr x x3) (ns f)))) (le x2 f))
        (mpbiri ((eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))) (el x2 (ab x1 (eq x1 x2))) (el x2 (ab x3 (el (pr x x3) (ns f)))))
          (mpbir ((eq x2 x2) (el x2 (ab x1 (eq x1 x2))))
            (elabe (x1 x2 (eq x1 x2) (eq x2 x2))
              (eqeq1 (x1 x2 x2)))
            (eqid (x2)))
          (eleq2 ((ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2)) x2)))
        (sylbi ((el x2 (ab x3 (el (pr x x3) (ns f)))) (el (pr x x2) (ns f)) (le x2 f))
          (elabe (x3 x2 (el (pr x x3) (ns f)) (el (pr x x2) (ns f)))
            (eleq1d ((ns f) (eq x3 x2) (pr x x3) (pr x x2))
              (preq2 (x x3 x2))))
          (rsyl ((el (pr x x2) (ns f)) (lt (pr x x2) f) (le x2 f))
            (ellt ((pr x x2) f))
            (rsyl ((lt (pr x x2) f) (le (pr x x2) f) (le x2 f))
              (ltle ((pr x x2) f))
              (ax_mp ((le x2 (pr x x2)) (im (le (pr x x2) f) (le x2 f)))
                (letr (x2 (pr x x2) f))
                (leprid2 (x x2)))))))))
  (mpbiri ((not (ex x2 (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))))) (le (d0) f) (le (app (ns f) x) f))
    (le01 (f))
    (leeq1d ((not (ex x2 (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))))) (app (ns f) x) (d0) f)
      (:conv (im (not (ex x2 (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2))))) (eq (app (ns f) x) (d0)))
        (im
          (not (ex x2 (eqs (ab x3 (el (pr x x3) (ns f))) (ab x1 (eq x1 x2)))))
          (eq
            (:unfold app ((ns f) x) (x3)
              (the (ab x3 (el (pr x x3) (ns f)))))
            (d0)))
        (the0 (x1 x2 (ab x3 (el (pr x x3) (ns f))))))))))

(local theorem elobind ((F set ()) (n nat ()) (x nat ()) (y nat)) ()
  (iff (el x (ns (obind n F))) (ex y (an (eq n (suc y)) (el x (ns (app F y))))))
((x1 nat))
(cases ((eq n (d0)) (iff (el x (ns (obind n F))) (ex y (an (eq n (suc y)) (el x (ns (app F y)))))))
  (mpbiri ((eq n (d0)) (iff (el x (ns (d0))) (ex y (an (eq (d0) (suc y)) (el x (ns (app F y)))))) (iff (el x (ns (obind n F))) (ex y (an (eq n (suc y)) (el x (ns (app F y)))))))
    (ax_mp ((not (ex y (an (eq (d0) (suc y)) (el x (ns (app F y)))))) (iff (el x (ns (d0))) (ex y (an (eq (d0) (suc y)) (el x (ns (app F y)))))))
      (ax_mp ((not (el x (ns (d0)))) (im (not (ex y (an (eq (d0) (suc y)) (el x (ns (app F y)))))) (iff (el x (ns (d0))) (ex y (an (eq (d0) (suc y)) (el x (ns (app F y))))))))
        (binth ((el x (ns (d0))) (ex y (an (eq (d0) (suc y)) (el x (ns (app F y)))))))
        (nel0 (x)))
      (nexi (y (an (eq (d0) (suc y)) (el x (ns (app F y)))))
        (mt ((eq (suc y) (d0)) (an (eq (d0) (suc y)) (el x (ns (app F y)))))
          (anwl ((eq (d0) (suc y)) (el x (ns (app F y))) (eq (suc y) (d0)))
            (eqcom ((d0) (suc y))))
          (:conv (not (eq (suc y) (d0)))
            (:sym (:unfold ne ((suc y) (d0)) ()
              (not (eq (suc y) (d0)))))
            (peano1 (y))))))
    (bieqd ((eq n (d0)) (el x (ns (obind n F))) (el x (ns (d0))) (ex y (an (eq n (suc y)) (el x (ns (app F y))))) (ex y (an (eq (d0) (suc y)) (el x (ns (app F y))))))
      (elneq2d ((eq n (d0)) x (obind n F) (d0))
        (syl6eq ((eq n (d0)) (obind n F) (obind (d0) F) (d0))
          (obind0 (F))
          (obindeq1 (n (d0) F))))
      (exeqd ((eq n (d0)) y (an (eq n (suc y)) (el x (ns (app F y)))) (an (eq (d0) (suc y)) (el x (ns (app F y)))))
        (aneq1d ((eq n (d0)) (eq n (suc y)) (eq (d0) (suc y)) (el x (ns (app F y))))
          (eqeq1 (n (d0) (suc y)))))))
  (sylbi ((not (eq n (d0))) (ex x1 (eq n (suc x1))) (iff (el x (ns (obind n F))) (ex y (an (eq n (suc y)) (el x (ns (app F y)))))))
    (:conv (iff (not (eq n (d0))) (ex x1 (eq n (suc x1))))
      (iff
        (:sym (:unfold ne (n (d0)) ()
          (not (eq n (d0)))))
        (ex x1 (eq n (suc x1))))
      (exsuc (x1 n)))
    (eex (x1 (eq n (suc x1)) (iff (el x (ns (obind n F))) (ex y (an (eq n (suc y)) (el x (ns (app F y)))))))
      (mpbiri ((eq n (suc x1)) (iff (el x (ns (app F x1))) (ex y (an (eq y x1) (el x (ns (app F y)))))) (iff (el x (ns (obind n F))) (ex y (an (eq n (suc y)) (el x (ns (app F y)))))))
        (ax_mp ((iff (ex y (an (eq y x1) (el x (ns (app F y))))) (el x (ns (app F x1)))) (iff (el x (ns (app F x1))) (ex y (an (eq y x1) (el x (ns (app F y)))))))
          (bicom ((ex y (an (eq y x1) (el x (ns (app F y))))) (el x (ns (app F x1)))))
          (exeqe (y x1 (el x (ns (app F y))) (el x (ns (app F x1))))
            (elneq2d ((eq y x1) x (app F y) (app F x1))
              (appeq2 (F y x1)))))
        (bieqd ((eq n (suc x1)) (el x (ns (obind n F))) (el x (ns (app F x1))) (ex y (an (eq n (suc y)) (el x (ns (app F y))))) (ex y (an (eq y x1) (el x (ns (app F y))))))
          (elneq2d ((eq n (suc x1)) x (obind n F) (app F x1))
            (syl6eq ((eq n (suc x1)) (obind n F) (obind (suc x1) F) (app F x1))
              (obindS (x1 F))
              (obindeq1 (n (suc x1) F))))
          (exeqd ((eq n (suc x1)) y (an (eq n (suc y)) (el x (ns (app F y)))) (an (eq y x1) (el x (ns (app F y)))))
            (aneq1d ((eq n (suc x1)) (eq n (suc y)) (eq y x1) (el x (ns (app F y))))
              (syl6bb ((eq n (suc x1)) (eq n (suc y)) (eq x1 y) (eq y x1))
                (eqcomb (x1 y))
                (syl6bb ((eq n (suc x1)) (eq n (suc y)) (eq (suc x1) (suc y)) (eq x1 y))
                  (peano2 (x1 y))
                  (eqeq1 (n (suc x1) (suc y)))))))))))))

(local theorem el12 ((a nat ())) ()
  (iff (el a (ns (d1))) (eq a (d0)))
()
(ibii ((el a (ns (d1))) (eq a (d0)))
  (sylib ((el a (ns (d1))) (lt a (d1)) (eq a (d0)))
    (lt12 (a))
    (ellt (a (d1))))
  (mpbiri ((eq a (d0)) (el (d0) (ns (d1))) (el a (ns (d1))))
    (mpbir ((odd (d1)) (el (d0) (ns (d1))))
      (el01 ((d1)))
      (odd1 ()))
    (eleq1 ((ns (d1)) a (d0))))))

(local theorem elpow2 ((a nat ()) (n nat ())) ()
  (iff (el a (ns (pow (d2) n))) (eq a n))
()
(ax_mp ((iff (el a (ns (shl (d1) n))) (eq a n)) (iff (el a (ns (pow (d2) n))) (eq a n)))
  (ax_mp ((iff (el a (ns (shl (d1) n))) (el a (ns (pow (d2) n)))) (im (iff (el a (ns (shl (d1) n))) (eq a n)) (iff (el a (ns (pow (d2) n))) (eq a n))))
    (bitr3 ((el a (ns (pow (d2) n))) (el a (ns (shl (d1) n))) (eq a n)))
    (ax_mp ((eq (shl (d1) n) (pow (d2) n)) (iff (el a (ns (shl (d1) n))) (el a (ns (pow (d2) n)))))
      (elneq2 (a (shl (d1) n) (pow (d2) n)))
      (shl11 (n))))
  (ax_mp ((iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)) (iff (el a (ns (shl (d1) n))) (eq a n)))
    (ax_mp ((iff (el a (ns (shl (d1) n))) (an (le n a) (el (sub a n) (ns (d1))))) (im (iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)) (iff (el a (ns (shl (d1) n))) (eq a n))))
      (bitr ((el a (ns (shl (d1) n))) (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)))
      (elshl (a (d1) n)))
    (ax_mp ((iff (eq a n) (an (le n a) (le a n))) (iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)))
      (ax_mp ((iff (an (le n a) (el (sub a n) (ns (d1)))) (an (le n a) (le a n))) (im (iff (eq a n) (an (le n a) (le a n))) (iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n))))
        (bitr4 ((an (le n a) (el (sub a n) (ns (d1)))) (an (le n a) (le a n)) (eq a n)))
        (aneq2i ((le n a) (el (sub a n) (ns (d1))) (le a n))
          (ax_mp ((iff (le a n) (eq (sub a n) (d0))) (iff (el (sub a n) (ns (d1))) (le a n)))
            (ax_mp ((iff (el (sub a n) (ns (d1))) (eq (sub a n) (d0))) (im (iff (le a n) (eq (sub a n) (d0))) (iff (el (sub a n) (ns (d1))) (le a n))))
              (bitr4 ((el (sub a n) (ns (d1))) (eq (sub a n) (d0)) (le a n)))
              (el12 ((sub a n))))
            (lesubeq0 (a n)))))
      (ax_mp ((iff (eq n a) (an (le n a) (le a n))) (iff (eq a n) (an (le n a) (le a n))))
        (ax_mp ((iff (eq a n) (eq n a)) (im (iff (eq n a) (an (le n a) (le a n))) (iff (eq a n) (an (le n a) (le a n)))))
          (bitr ((eq a n) (eq n a) (an (le n a) (le a n))))
          (eqcomb (a n)))
        (eqlele (n a)))))))

(local theorem finns ((a nat ())) ()
  (finite (ns a))
((x nat))
(ax_mp ((finite (ab x (lt x a))) (finite (ns a)))
  (ax_mp ((subset (ns a) (ab x (lt x a))) (im (finite (ab x (lt x a))) (finite (ns a))))
    (finss ((ns a) (ab x (lt x a))))
    (mpbi ((al x (im (el x (ns a)) (lt x a))) (subset (ns a) (ab x (lt x a))))
      (ssab2 ((ns a) x (lt x a)))
      (ax_gen (x (im (el x (ns a)) (lt x a)))
        (ellt (x a)))))
  (ltfin (a x))))

(def lower ((A set ())) (nat ())
((n nat))
(the (ab n (eqs (ns n) A))))

(local theorem lowereqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eq (lower _A1) (lower _A2)))
((n nat))
(:conv (im _G (eq (lower _A1) (lower _A2)))
  (im
    _G
    (eq
      (:unfold lower (_A1) (n)
        (the (ab n (eqs (ns n) _A1))))
      (:unfold lower (_A2) (n)
        (the (ab n (eqs (ns n) _A2))))))
  (theeqd (_G (ab n (eqs (ns n) _A1)) (ab n (eqs (ns n) _A2)))
    (abeqd (_G n (eqs (ns n) _A1) (eqs (ns n) _A2))
      (eqseqd (_G (ns n) (ns n) _A1 _A2)
        (eqsidd (_G (ns n)))
        _Ah)))))

(local theorem lowereq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eq (lower _A1) (lower _A2)))
()
(lowereqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem nflower ((x nat) (A set (x)))
  ((h (nfs x A)))
  (nfn x (lower A))
((x1 nat))
(:conv (nfn x (lower A))
  (nfn
    x
    (:unfold lower (A) (x1)
      (the (ab x1 (eqs (ns x1) A)))))
  (nfthe (x (ab x1 (eqs (ns x1) A)))
    (nfab (x x1 (eqs (ns x1) A))
      (nfeqs (x (ns x1) A)
        (nfsv ((ns x1) x))
        h)))))

(theorem eqlower ((A set ())) ()
  (iff (finite A) (eqs A (ns (lower A))))
((m nat) (n nat) (x nat) (y nat) (z nat))
(:let H1 (biidd ((eq y z) (el x (ns n))))
(:let H2 (eqidd ((eq y z) x))
(:let H3 (id ((eq y z)))
(:let H4 (addeqd ((eq y z) x x y z)
  H2
  H3)
(:let H5 (eqsidd ((eq y z) A))
(:let H6 (eleqd ((eq y z) (add x y) (add x z) A A)
  H4
  H5)
(:let H7 (bieqd ((eq y z) (el x (ns n)) (el x (ns n)) (el (add x y) A) (el (add x z) A))
  H1
  H6)
(:let H8 (aleqd ((eq y z) x (iff (el x (ns n)) (el (add x y) A)) (iff (el x (ns n)) (el (add x z) A)))
  H7)
(:let H9 (exeqd ((eq y z) n (al x (iff (el x (ns n)) (el (add x y) A))) (al x (iff (el x (ns n)) (el (add x z) A))))
  H8)
(:let H10 (biidd ((eq y z) (ex n (eqs A (ns n)))))
(:let H11 (imeqd ((eq y z) (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n))) (ex n (eqs A (ns n))))
  H9
  H10)
(:let H12 (ifneg ((el z A) (b1 n) (b0 n)))
(:let H13 (ifpos ((el z A) (b1 n) (b0 n)))
(:let H14 (anr ((an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))))
(:let H15 (sub1can (y))
(:let H16 (anlr ((eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0))) (eq x (sub y (d1)))))
(:let H17 (:conv (im (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (ne y (d0)))
  (im
    (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1))))
    (:unfold ne (y (d0)) ()
      (not (eq y (d0)))))
  H16)
(:let H18 (syl ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (ne y (d0)) (eq (suc (sub y (d1))) y))
  H15
  H17)
(ibii ((finite A) (eqs A (ns (lower A))))
  (rsyl ((finite A) (ex n (eqs A (ns n))) (eqs A (ns (lower A))))
    (:conv (im (finite A) (ex n (eqs A (ns n))))
      (im
        (:unfold finite (A) (z y)
          (ex z (al y (im (el y A) (lt y z)))))
        (ex n (eqs A (ns n))))
      (eex (z (al y (im (el y A) (lt y z))) (ex n (eqs A (ns n))))
        (syl ((al y (im (el y A) (lt y z))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n))))
          (ind (y z z (im (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x (d0)) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex n (eqs A (ns n)))))
            H11
            (imeqd ((eq y (d0)) (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (al x (iff (el x (ns n)) (el (add x (d0)) A)))) (ex n (eqs A (ns n))) (ex n (eqs A (ns n))))
              (exeqd ((eq y (d0)) n (al x (iff (el x (ns n)) (el (add x y) A))) (al x (iff (el x (ns n)) (el (add x (d0)) A))))
                (aleqd ((eq y (d0)) x (iff (el x (ns n)) (el (add x y) A)) (iff (el x (ns n)) (el (add x (d0)) A)))
                  (bieqd ((eq y (d0)) (el x (ns n)) (el x (ns n)) (el (add x y) A) (el (add x (d0)) A))
                    (biidd ((eq y (d0)) (el x (ns n))))
                    (eleqd ((eq y (d0)) (add x y) (add x (d0)) A A)
                      (addeqd ((eq y (d0)) x x y (d0))
                        (eqidd ((eq y (d0)) x))
                        (id ((eq y (d0)))))
                      (eqsidd ((eq y (d0)) A))))))
              (biidd ((eq y (d0)) (ex n (eqs A (ns n))))))
            H11
            (imeqd ((eq y (suc z)) (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex n (eqs A (ns n))) (ex n (eqs A (ns n))))
              (exeqd ((eq y (suc z)) n (al x (iff (el x (ns n)) (el (add x y) A))) (al x (iff (el x (ns n)) (el (add x (suc z)) A))))
                (aleqd ((eq y (suc z)) x (iff (el x (ns n)) (el (add x y) A)) (iff (el x (ns n)) (el (add x (suc z)) A)))
                  (bieqd ((eq y (suc z)) (el x (ns n)) (el x (ns n)) (el (add x y) A) (el (add x (suc z)) A))
                    (biidd ((eq y (suc z)) (el x (ns n))))
                    (eleqd ((eq y (suc z)) (add x y) (add x (suc z)) A A)
                      (addeqd ((eq y (suc z)) x x y (suc z))
                        (eqidd ((eq y (suc z)) x))
                        (id ((eq y (suc z)))))
                      (eqsidd ((eq y (suc z)) A))))))
              (biidd ((eq y (suc z)) (ex n (eqs A (ns n))))))
            (eximi (n (al x (iff (el x (ns n)) (el (add x (d0)) A))) (eqs A (ns n)))
              (:conv (im (al x (iff (el x (ns n)) (el (add x (d0)) A))) (eqs A (ns n)))
                (im
                  (al x (iff (el x (ns n)) (el (add x (d0)) A)))
                  (:unfold eqs (A (ns n)) (x)
                    (al x (iff (el x A) (el x (ns n))))))
                (alimi (x (iff (el x (ns n)) (el (add x (d0)) A)) (iff (el x A) (el x (ns n))))
                  (bicomd ((iff (el x (ns n)) (el (add x (d0)) A)) (el x (ns n)) (el x A))
                    (syl6bb ((iff (el x (ns n)) (el (add x (d0)) A)) (el x (ns n)) (el (add x (d0)) A) (el x A))
                      (ax_mp ((eq (add x (d0)) x) (iff (el (add x (d0)) A) (el x A)))
                        (eleq1 (A (add x (d0)) x))
                        (add0 (x)))
                      (id ((iff (el x (ns n)) (el (add x (d0)) A)))))))))
            (imim1i ((ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n))))
              (sylib ((ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex m (al y (iff (el y (ns m)) (el (add y z) A)))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))))
                (cbvex (m n (al y (iff (el y (ns m)) (el (add y z) A))) (al x (iff (el x (ns n)) (el (add x z) A))))
                  (cbvald (y x (eq m n) (iff (el y (ns m)) (el (add y z) A)) (iff (el x (ns n)) (el (add x z) A)))
                    (bieqd ((an (eq m n) (eq y x)) (el y (ns m)) (el x (ns n)) (el (add y z) A) (el (add x z) A))
                      (elneqd ((an (eq m n) (eq y x)) y x m n)
                        (anr ((eq m n) (eq y x)))
                        (anl ((eq m n) (eq y x))))
                      (eleq1d (A (an (eq m n) (eq y x)) (add y z) (add x z))
                        (anwr ((eq m n) (eq y x) (eq (add y z) (add x z)))
                          (addeq1 (y x z)))))))
                (eex (n (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (ex m (al y (iff (el y (ns m)) (el (add y z) A)))))
                  (iexde (m (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (if (el z A) (b1 n) (b0 n)) (al y (iff (el y (ns m)) (el (add y z) A))))
                    (iald (y (an (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (eq m (if (el z A) (b1 n) (b0 n)))) (iff (el y (ns m)) (el (add y z) A)))
                      (impcom ((eq m (if (el z A) (b1 n) (b0 n))) (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (iff (el y (ns m)) (el (add y z) A)))
                        (casesda ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0)) (im (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (iff (el y (ns m)) (el (add y z) A))))
                          (a1d ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (iff (el y (ns m)) (el (add y z) A)) (al x (iff (el x (ns n)) (el (add x (suc z)) A))))
                            (mpbiri ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el z A)) (iff (el y (ns m)) (el (add y z) A)))
                              (ax_mp ((iff (odd (if (el z A) (b1 n) (b0 n))) (el z A)) (iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el z A)))
                                (ax_mp ((iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (odd (if (el z A) (b1 n) (b0 n)))) (im (iff (odd (if (el z A) (b1 n) (b0 n))) (el z A)) (iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el z A))))
                                  (bitr ((el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (odd (if (el z A) (b1 n) (b0 n))) (el z A)))
                                  (el01 ((if (el z A) (b1 n) (b0 n)))))
                                (ibii ((odd (if (el z A) (b1 n) (b0 n))) (el z A))
                                  (ax_mp ((im (not (el z A)) (not (odd (if (el z A) (b1 n) (b0 n))))) (im (odd (if (el z A) (b1 n) (b0 n))) (el z A)))
                                    (ax_3 ((el z A) (odd (if (el z A) (b1 n) (b0 n)))))
                                    (mtbird ((not (el z A)) (odd (b0 n)) (odd (if (el z A) (b1 n) (b0 n))))
                                      (oddeqd ((not (el z A)) (if (el z A) (b1 n) (b0 n)) (b0 n))
                                        H12)
                                      (a1i ((not (el z A)) (not (odd (b0 n))))
                                        (b0odd (n)))))
                                  (mpbiri ((el z A) (odd (b1 n)) (odd (if (el z A) (b1 n) (b0 n))))
                                    (b1odd (n))
                                    (oddeqd ((el z A) (if (el z A) (b1 n) (b0 n)) (b1 n))
                                      H13))))
                              (bieqd ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (el y (ns m)) (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el (add y z) A) (el z A))
                                (elneqd ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) y (d0) m (if (el z A) (b1 n) (b0 n)))
                                  (anr ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))))
                                  (anl ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0)))))
                                (eleq1d (A (an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (add y z) z)
                                  (syl6eq ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (add y z) (add (d0) z) z)
                                    (add01 (z))
                                    (anwr ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0)) (eq (add y z) (add (d0) z)))
                                      (addeq1 (y (d0) z))))))))
                          (ealde ((iff (el y (ns m)) (el (add y z) A)) x (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (sub y (d1)) (iff (el x (ns n)) (el (add x (suc z)) A)))
                            (bi1d ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (iff (el x (ns n)) (el (add x (suc z)) A)) (iff (el y (ns m)) (el (add y z) A)))
                              (bieqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (el x (ns n)) (el y (ns m)) (el (add x (suc z)) A) (el (add y z) A))
                                (mpbiri ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (iff (el (sub y (d1)) (ns n)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))) (iff (el x (ns n)) (el y (ns m))))
                                  (ax_mp ((iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))) (iff (el (sub y (d1)) (ns n)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))))
                                    (ax_mp ((iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (sub y (d1)) (ns n))) (im (iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))) (iff (el (sub y (d1)) (ns n)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n)))))))
                                      (bitr3 ((el (sub y (d1)) (ns n)) (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))))
                                      (ax_mp ((eq (div (if (el z A) (b1 n) (b0 n)) (d2)) n) (iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (sub y (d1)) (ns n))))
                                        (elneq2 ((sub y (d1)) (div (if (el z A) (b1 n) (b0 n)) (d2)) n))
                                        (cases ((el z A) (eq (div (if (el z A) (b1 n) (b0 n)) (d2)) n))
                                          (syl6eq ((el z A) (div (if (el z A) (b1 n) (b0 n)) (d2)) (div (b1 n) (d2)) n)
                                            (b1div2 (n))
                                            (diveq1d ((el z A) (if (el z A) (b1 n) (b0 n)) (b1 n) (d2))
                                              H13))
                                          (syl6eq ((not (el z A)) (div (if (el z A) (b1 n) (b0 n)) (d2)) (div (b0 n) (d2)) n)
                                            (b0div2 (n))
                                            (diveq1d ((not (el z A)) (if (el z A) (b1 n) (b0 n)) (b0 n) (d2))
                                              H12)))))
                                    (eldiv2 ((sub y (d1)) (if (el z A) (b1 n) (b0 n)))))
                                  (bieqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (el x (ns n)) (el (sub y (d1)) (ns n)) (el y (ns m)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n)))))
                                    (eleq1d ((ns n) (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) x (sub y (d1)))
                                      H14)
                                    (elneqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) y (suc (sub y (d1))) m (if (el z A) (b1 n) (b0 n)))
                                      (eqcomd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (suc (sub y (d1))) y)
                                        H18)
                                      (anll ((eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0))) (eq x (sub y (d1))))))))
                                (eleq1d (A (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (add x (suc z)) (add y z))
                                  (syl5eqr ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (add x (suc z)) (add (suc x) z) (add y z))
                                    (addSass (x z))
                                    (addeq1d ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (suc x) y z)
                                      (eqtrd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (suc x) (suc (sub y (d1))) y)
                                        (suceqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) x (sub y (d1)))
                                          H14)
                                        H18)))))))))))))))
          (iexde (n (al y (im (el y A) (lt y z))) (d0) (al x (iff (el x (ns n)) (el (add x z) A))))
            (iald (x (an (al y (im (el y A) (lt y z))) (eq n (d0))) (iff (el x (ns n)) (el (add x z) A)))
              (bitrd ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (el x (ns n)) (el x (ns (d0))) (el (add x z) A))
                (elneq2d ((an (al y (im (el y A) (lt y z))) (eq n (d0))) x n (d0))
                  (anr ((al y (im (el y A) (lt y z))) (eq n (d0)))))
                (binthd ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (el x (ns (d0))) (el (add x z) A))
                  (a1i ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (not (el x (ns (d0)))))
                    (el02 (x)))
                  (mtd ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (lt (add x z) z) (el (add x z) A))
                    (a1i ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (not (lt (add x z) z)))
                      (mpbi ((le z (add x z)) (not (lt (add x z) z)))
                        (lenlt (z (add x z)))
                        (leaddid2 (z x))))
                    (anwl ((al y (im (el y A) (lt y z))) (eq n (d0)) (im (el (add x z) A) (lt (add x z) z)))
                      (eale (y (add x z) (im (el y A) (lt y z)) (im (el (add x z) A) (lt (add x z) z)))
                        (imeqd ((eq y (add x z)) (el y A) (el (add x z) A) (lt y z) (lt (add x z) z))
                          (eleq1 (A y (add x z)))
                          (lteq1 (y (add x z) z)))))))))))))
    (eex (n (eqs A (ns n)) (eqs A (ns (lower A))))
      (eqstrd (A (ns n) (ns (lower A)) (eqs A (ns n)))
        (id ((eqs A (ns n))))
        (nseqd ((eqs A (ns n)) n (lower A))
          (eqcomd ((eqs A (ns n)) (lower A) n)
            (:conv (im (eqs A (ns n)) (eq (lower A) n))
              (im
                (eqs A (ns n))
                (eq
                  (:unfold lower (A) (x)
                    (the (ab x (eqs (ns x) A))))
                  n))
              (eqtheabd ((eqs A (ns n)) n x (eqs (ns x) A))
                (syl6bb ((eqs A (ns n)) (eqs (ns x) A) (eqs (ns x) (ns n)) (eq x n))
                  (nsinj (x n))
                  (eqseq2 ((ns x) A (ns n)))))))))))
  (mpbiri ((eqs A (ns (lower A))) (finite (ns (lower A))) (finite A))
    (finns ((lower A)))
    (fineq (A (ns (lower A)))))))))))))))))))))))))

(local theorem ellower ((A set ()) (a nat ())) ()
  (im (finite A) (iff (el a (ns (lower A))) (el a A)))
()
(bicomd ((finite A) (el a A) (el a (ns (lower A))))
  (eleq2d (A (ns (lower A)) (finite A) a)
    (ax_mp ((iff (finite A) (eqs A (ns (lower A)))) (im (finite A) (eqs A (ns (lower A)))))
      (bi1 ((finite A) (eqs A (ns (lower A)))))
      (eqlower (A))))))

(local theorem lowerns ((a nat ())) ()
  (eq (lower (ns a)) a)
()
(ax_mp ((eq a (lower (ns a))) (eq (lower (ns a)) a))
  (eqcom (a (lower (ns a))))
  (ax_mp ((eqs (ns a) (ns (lower (ns a)))) (eq a (lower (ns a))))
    (axext (a (lower (ns a))))
    (mpbi ((finite (ns a)) (eqs (ns a) (ns (lower (ns a)))))
      (eqlower ((ns a)))
      (finns (a))))))

(local theorem eqlower1 ((A set ()) (a nat ())) ()
  (im (finite A) (iff (eqs A (ns a)) (eq (lower A) a)))
()
(ibida ((finite A) (eqs A (ns a)) (eq (lower A) a))
  (anwr ((finite A) (eqs A (ns a)) (eq (lower A) a))
    (syl6eq ((eqs A (ns a)) (lower A) (lower (ns a)) a)
      (lowerns (a))
      (lowereq (A (ns a)))))
  (eqstrd (A (ns (lower A)) (ns a) (an (finite A) (eq (lower A) a)))
    (sylib ((an (finite A) (eq (lower A) a)) (finite A) (eqs A (ns (lower A))))
      (eqlower (A))
      (anl ((finite A) (eq (lower A) a))))
    (nseqd ((an (finite A) (eq (lower A) a)) (lower A) a)
      (anr ((finite A) (eq (lower A) a)))))))

(local theorem eqlower2 ((A set ()) (a nat ())) ()
  (im (finite A) (iff (eqs (ns a) A) (eq a (lower A))))
()
(bitr4g ((finite A) (eqs A (ns a)) (eq (lower A) a) (eqs (ns a) A) (eq a (lower A)))
  (eqscomb ((ns a) A))
  (eqcomb (a (lower A)))
  (eqlower1 (A a))))

(local theorem lowerinj ((A set ()) (B set ()) (a nat ())) ()
  (im (finite A) (im (finite B) (iff (eqs A B) (eq (lower A) (lower B)))))
()
(exp ((finite A) (finite B) (iff (eqs A B) (eq (lower A) (lower B))))
  (bitrd ((an (finite A) (finite B)) (eqs A B) (eqs (ns (lower A)) B) (eq (lower A) (lower B)))
    (eqseq1d ((an (finite A) (finite B)) A (ns (lower A)) B)
      (sylib ((an (finite A) (finite B)) (finite A) (eqs A (ns (lower A))))
        (eqlower (A))
        (anl ((finite A) (finite B)))))
    (anwr ((finite A) (finite B) (iff (eqs (ns (lower A)) B) (eq (lower A) (lower B))))
      (eqlower2 (B (lower A)))))))

(def sn ((a nat ())) (nat ())
()
(pow (d2) a))

(local theorem sneqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()))
  ((_ah (im _G (eq _a1 _a2))))
  (im _G (eq (sn _a1) (sn _a2)))
()
(:conv (im _G (eq (sn _a1) (sn _a2)))
  (im
    _G
    (eq
      (:unfold sn (_a1) ()
        (pow (d2) _a1))
      (:unfold sn (_a2) ()
        (pow (d2) _a2))))
  (poweqd (_G (d2) (d2) _a1 _a2)
    (eqidd (_G (d2)))
    _ah)))

(local theorem sneq ((_a1 nat ()) (_a2 nat ())) ()
  (im (eq _a1 _a2) (eq (sn _a1) (sn _a2)))
()
(sneqd ((eq _a1 _a2) _a1 _a2)
  (id ((eq _a1 _a2)))))

(theorem elsn ((a nat ()) (b nat ())) ()
  (iff (el a (ns (sn b))) (eq a b))
()
(:conv (iff (el a (ns (sn b))) (eq a b))
  (iff
    (el
      a
      (ns
        (:unfold sn (b) ()
          (pow (d2) b))))
    (eq a b))
  (elpow2 (a b))))

(local theorem snid ((a nat ())) ()
  (el a (ns (sn a)))
()
(mpbir ((eq a a) (el a (ns (sn a))))
  (elsn (a a))
  (eqid (a))))

(local theorem snss ((A set ()) (a nat ())) ()
  (iff (subset (ns (sn a)) A) (el a A))
((x nat))
(ax_mp ((iff (al x (im (eq x a) (el x A))) (el a A)) (iff (subset (ns (sn a)) A) (el a A)))
  (ax_mp ((iff (subset (ns (sn a)) A) (al x (im (eq x a) (el x A)))) (im (iff (al x (im (eq x a) (el x A))) (el a A)) (iff (subset (ns (sn a)) A) (el a A))))
    (bitr ((subset (ns (sn a)) A) (al x (im (eq x a) (el x A))) (el a A)))
    (:conv (iff (subset (ns (sn a)) A) (al x (im (eq x a) (el x A))))
      (iff
        (:unfold subset ((ns (sn a)) A) (x)
          (al x (im (el x (ns (sn a))) (el x A))))
        (al x (im (eq x a) (el x A))))
      (aleqi (x (im (el x (ns (sn a))) (el x A)) (im (eq x a) (el x A)))
        (imeq1i ((el x (ns (sn a))) (eq x a) (el x A))
          (elsn (x a))))))
  (aleqe (x a (el x A) (el a A))
    (eleq1 (A x a)))))

(local theorem sndisj ((A set ()) (a nat ())) ()
  (iff (eqs (Inter (ns (sn a)) A) (ns (d0))) (not (el a A)))
()
(ax_mp ((iff (subset (ns (sn a)) (Compl A)) (not (el a A))) (iff (eqs (Inter (ns (sn a)) A) (ns (d0))) (not (el a A))))
  (ax_mp ((iff (eqs (Inter (ns (sn a)) A) (ns (d0))) (subset (ns (sn a)) (Compl A))) (im (iff (subset (ns (sn a)) (Compl A)) (not (el a A))) (iff (eqs (Inter (ns (sn a)) A) (ns (d0))) (not (el a A)))))
    (bitr ((eqs (Inter (ns (sn a)) A) (ns (d0))) (subset (ns (sn a)) (Compl A)) (not (el a A))))
    (ineq0 ((ns (sn a)) A)))
  (ax_mp ((iff (el a (Compl A)) (not (el a A))) (iff (subset (ns (sn a)) (Compl A)) (not (el a A))))
    (ax_mp ((iff (subset (ns (sn a)) (Compl A)) (el a (Compl A))) (im (iff (el a (Compl A)) (not (el a A))) (iff (subset (ns (sn a)) (Compl A)) (not (el a A)))))
      (bitr ((subset (ns (sn a)) (Compl A)) (el a (Compl A)) (not (el a A))))
      (snss ((Compl A) a)))
    (elcpl (A a)))))

(local theorem subsnsn ((a nat ())) ()
  (subsn (ns (sn a)))
((x1 nat))
(mpbir ((subsn (ab x1 (eq x1 a))) (subsn (ns (sn a))))
  (ax_mp ((eqs (ns (sn a)) (ab x1 (eq x1 a))) (iff (subsn (ns (sn a))) (subsn (ab x1 (eq x1 a)))))
    (subsneq ((ns (sn a)) (ab x1 (eq x1 a))))
    (eqab2i ((ns (sn a)) x1 (eq x1 a))
      (elsn (x1 a))))
  (subsnsn2 (a x1))))

(local theorem thesn ((a nat ())) ()
  (eq (the (ns (sn a))) a)
((x1 nat))
(trud ((eq (the (ns (sn a))) a))
  (eqthed ((ns (sn a)) (tru) a x1)
    (a1i ((tru) (iff (el x1 (ns (sn a))) (eq x1 a)))
      (elsn (x1 a))))))

(local theorem sninj ((a nat ()) (b nat ())) ()
  (iff (eq (sn a) (sn b)) (eq a b))
()
(ibii ((eq (sn a) (sn b)) (eq a b))
  (eqtr3g ((eq (sn a) (sn b)) (the (ns (sn a))) (the (ns (sn b))) a b)
    (thesn (a))
    (thesn (b))
    (theeqd ((eq (sn a) (sn b)) (ns (sn a)) (ns (sn b)))
      (nseq ((sn a) (sn b)))))
  (sneq (a b))))

(local theorem subsnsssn ((A set ()) (a nat)) ()
  (iff (subsn A) (ex a (subset A (ns (sn a)))))
((x1 nat))
(ax_mp ((iff (ex a (subset A (ns (sn a)))) (ex a (al x1 (im (el x1 A) (eq x1 a))))) (iff (subsn A) (ex a (subset A (ns (sn a))))))
  (ax_mp ((iff (subsn A) (ex a (al x1 (im (el x1 A) (eq x1 a))))) (im (iff (ex a (subset A (ns (sn a)))) (ex a (al x1 (im (el x1 A) (eq x1 a))))) (iff (subsn A) (ex a (subset A (ns (sn a)))))))
    (bitr4 ((subsn A) (ex a (al x1 (im (el x1 A) (eq x1 a)))) (ex a (subset A (ns (sn a))))))
    (subsnex (A a x1)))
  (exeqi (a (subset A (ns (sn a))) (al x1 (im (el x1 A) (eq x1 a))))
    (:conv (iff (subset A (ns (sn a))) (al x1 (im (el x1 A) (eq x1 a))))
      (iff
        (:unfold subset (A (ns (sn a))) (x1)
          (al x1 (im (el x1 A) (el x1 (ns (sn a))))))
        (al x1 (im (el x1 A) (eq x1 a))))
      (aleqi (x1 (im (el x1 A) (el x1 (ns (sn a)))) (im (el x1 A) (eq x1 a)))
        (imeq2i ((el x1 A) (el x1 (ns (sn a))) (eq x1 a))
          (elsn (x1 a))))))))

(local theorem isfsn ((x nat ())) ()
  (isfun (ns (sn x)))
((x1 nat) (x2 nat) (x3 nat))
(:conv (isfun (ns (sn x)))
  (:unfold isfun ((ns (sn x))) (x1 x2 x3)
    (al x1 (al x2 (al x3 (im (el (pr x1 x2) (ns (sn x))) (im (el (pr x1 x3) (ns (sn x))) (eq x2 x3)))))))
  (ax_gen (x1 (al x2 (al x3 (im (el (pr x1 x2) (ns (sn x))) (im (el (pr x1 x3) (ns (sn x))) (eq x2 x3))))))
    (ax_gen (x2 (al x3 (im (el (pr x1 x2) (ns (sn x))) (im (el (pr x1 x3) (ns (sn x))) (eq x2 x3)))))
      (ax_gen (x3 (im (el (pr x1 x2) (ns (sn x))) (im (el (pr x1 x3) (ns (sn x))) (eq x2 x3))))
        (sylbi ((el (pr x1 x2) (ns (sn x))) (eq (pr x1 x2) x) (im (el (pr x1 x3) (ns (sn x))) (eq x2 x3)))
          (elsn ((pr x1 x2) x))
          (syl5bi ((eq (pr x1 x2) x) (el (pr x1 x3) (ns (sn x))) (eq (pr x1 x3) x) (eq x2 x3))
            (elsn ((pr x1 x3) x))
            (syl6 ((eq (pr x1 x2) x) (eq (pr x1 x3) x) (eq (pr x1 x2) (pr x1 x3)) (eq x2 x3))
              (sylbi ((eq (pr x1 x2) (pr x1 x3)) (an (eq x1 x1) (eq x2 x3)) (eq x2 x3))
                (prth (x1 x1 x2 x3))
                (anr ((eq x1 x1) (eq x2 x3))))
              (eqtr4 ((pr x1 x2) x (pr x1 x3)))))))))))

(local theorem dmsn ((x nat ()) (y nat ())) ()
  (eqs (Dom (ns (sn (pr x y)))) (ns (sn x)))
((x1 nat) (x2 nat))
(:conv (eqs (Dom (ns (sn (pr x y)))) (ns (sn x)))
  (:unfold eqs ((Dom (ns (sn (pr x y)))) (ns (sn x))) (x1)
    (al x1 (iff (el x1 (Dom (ns (sn (pr x y))))) (el x1 (ns (sn x))))))
  (ax_gen (x1 (iff (el x1 (Dom (ns (sn (pr x y))))) (el x1 (ns (sn x)))))
    (ax_mp ((iff (ex x2 (el (pr x1 x2) (ns (sn (pr x y))))) (el x1 (ns (sn x)))) (iff (el x1 (Dom (ns (sn (pr x y))))) (el x1 (ns (sn x)))))
      (ax_mp ((iff (el x1 (Dom (ns (sn (pr x y))))) (ex x2 (el (pr x1 x2) (ns (sn (pr x y)))))) (im (iff (ex x2 (el (pr x1 x2) (ns (sn (pr x y))))) (el x1 (ns (sn x)))) (iff (el x1 (Dom (ns (sn (pr x y))))) (el x1 (ns (sn x))))))
        (bitr ((el x1 (Dom (ns (sn (pr x y))))) (ex x2 (el (pr x1 x2) (ns (sn (pr x y))))) (el x1 (ns (sn x)))))
        (eldm ((ns (sn (pr x y))) x1 x2)))
      (ax_mp ((iff (el x1 (ns (sn x))) (ex x2 (an (eq x2 y) (eq x1 x)))) (iff (ex x2 (el (pr x1 x2) (ns (sn (pr x y))))) (el x1 (ns (sn x)))))
        (ax_mp ((iff (ex x2 (el (pr x1 x2) (ns (sn (pr x y))))) (ex x2 (an (eq x2 y) (eq x1 x)))) (im (iff (el x1 (ns (sn x))) (ex x2 (an (eq x2 y) (eq x1 x)))) (iff (ex x2 (el (pr x1 x2) (ns (sn (pr x y))))) (el x1 (ns (sn x))))))
          (bitr4 ((ex x2 (el (pr x1 x2) (ns (sn (pr x y))))) (ex x2 (an (eq x2 y) (eq x1 x))) (el x1 (ns (sn x)))))
          (exeqi (x2 (el (pr x1 x2) (ns (sn (pr x y)))) (an (eq x2 y) (eq x1 x)))
            (ax_mp ((iff (eq (pr x1 x2) (pr x y)) (an (eq x2 y) (eq x1 x))) (iff (el (pr x1 x2) (ns (sn (pr x y)))) (an (eq x2 y) (eq x1 x))))
              (ax_mp ((iff (el (pr x1 x2) (ns (sn (pr x y)))) (eq (pr x1 x2) (pr x y))) (im (iff (eq (pr x1 x2) (pr x y)) (an (eq x2 y) (eq x1 x))) (iff (el (pr x1 x2) (ns (sn (pr x y)))) (an (eq x2 y) (eq x1 x)))))
                (bitr ((el (pr x1 x2) (ns (sn (pr x y)))) (eq (pr x1 x2) (pr x y)) (an (eq x2 y) (eq x1 x))))
                (elsn ((pr x1 x2) (pr x y))))
              (ax_mp ((iff (an (eq x1 x) (eq x2 y)) (an (eq x2 y) (eq x1 x))) (iff (eq (pr x1 x2) (pr x y)) (an (eq x2 y) (eq x1 x))))
                (ax_mp ((iff (eq (pr x1 x2) (pr x y)) (an (eq x1 x) (eq x2 y))) (im (iff (an (eq x1 x) (eq x2 y)) (an (eq x2 y) (eq x1 x))) (iff (eq (pr x1 x2) (pr x y)) (an (eq x2 y) (eq x1 x)))))
                  (bitr ((eq (pr x1 x2) (pr x y)) (an (eq x1 x) (eq x2 y)) (an (eq x2 y) (eq x1 x))))
                  (prth (x1 x x2 y)))
                (ancomb ((eq x1 x) (eq x2 y)))))))
        (ax_mp ((iff (ex x2 (an (eq x2 y) (eq x1 x))) (eq x1 x)) (iff (el x1 (ns (sn x))) (ex x2 (an (eq x2 y) (eq x1 x)))))
          (ax_mp ((iff (el x1 (ns (sn x))) (eq x1 x)) (im (iff (ex x2 (an (eq x2 y) (eq x1 x))) (eq x1 x)) (iff (el x1 (ns (sn x))) (ex x2 (an (eq x2 y) (eq x1 x))))))
            (bitr4 ((el x1 (ns (sn x))) (eq x1 x) (ex x2 (an (eq x2 y) (eq x1 x)))))
            (elsn (x1 x)))
          (exeqe (x2 y (eq x1 x) (eq x1 x))
            (biidd ((eq x2 y) (eq x1 x))))))))))

(local theorem rnsn ((x nat ()) (y nat ())) ()
  (eqs (Ran (ns (sn (pr x y)))) (ns (sn y)))
((x1 nat) (x2 nat))
(:conv (eqs (Ran (ns (sn (pr x y)))) (ns (sn y)))
  (:unfold eqs ((Ran (ns (sn (pr x y)))) (ns (sn y))) (x1)
    (al x1 (iff (el x1 (Ran (ns (sn (pr x y))))) (el x1 (ns (sn y))))))
  (ax_gen (x1 (iff (el x1 (Ran (ns (sn (pr x y))))) (el x1 (ns (sn y)))))
    (ax_mp ((iff (ex x2 (el (pr x2 x1) (ns (sn (pr x y))))) (el x1 (ns (sn y)))) (iff (el x1 (Ran (ns (sn (pr x y))))) (el x1 (ns (sn y)))))
      (ax_mp ((iff (el x1 (Ran (ns (sn (pr x y))))) (ex x2 (el (pr x2 x1) (ns (sn (pr x y)))))) (im (iff (ex x2 (el (pr x2 x1) (ns (sn (pr x y))))) (el x1 (ns (sn y)))) (iff (el x1 (Ran (ns (sn (pr x y))))) (el x1 (ns (sn y))))))
        (bitr ((el x1 (Ran (ns (sn (pr x y))))) (ex x2 (el (pr x2 x1) (ns (sn (pr x y))))) (el x1 (ns (sn y)))))
        (elrn ((ns (sn (pr x y))) x1 x2)))
      (ax_mp ((iff (el x1 (ns (sn y))) (ex x2 (an (eq x2 x) (eq x1 y)))) (iff (ex x2 (el (pr x2 x1) (ns (sn (pr x y))))) (el x1 (ns (sn y)))))
        (ax_mp ((iff (ex x2 (el (pr x2 x1) (ns (sn (pr x y))))) (ex x2 (an (eq x2 x) (eq x1 y)))) (im (iff (el x1 (ns (sn y))) (ex x2 (an (eq x2 x) (eq x1 y)))) (iff (ex x2 (el (pr x2 x1) (ns (sn (pr x y))))) (el x1 (ns (sn y))))))
          (bitr4 ((ex x2 (el (pr x2 x1) (ns (sn (pr x y))))) (ex x2 (an (eq x2 x) (eq x1 y))) (el x1 (ns (sn y)))))
          (exeqi (x2 (el (pr x2 x1) (ns (sn (pr x y)))) (an (eq x2 x) (eq x1 y)))
            (ax_mp ((iff (eq (pr x2 x1) (pr x y)) (an (eq x2 x) (eq x1 y))) (iff (el (pr x2 x1) (ns (sn (pr x y)))) (an (eq x2 x) (eq x1 y))))
              (ax_mp ((iff (el (pr x2 x1) (ns (sn (pr x y)))) (eq (pr x2 x1) (pr x y))) (im (iff (eq (pr x2 x1) (pr x y)) (an (eq x2 x) (eq x1 y))) (iff (el (pr x2 x1) (ns (sn (pr x y)))) (an (eq x2 x) (eq x1 y)))))
                (bitr ((el (pr x2 x1) (ns (sn (pr x y)))) (eq (pr x2 x1) (pr x y)) (an (eq x2 x) (eq x1 y))))
                (elsn ((pr x2 x1) (pr x y))))
              (prth (x2 x x1 y)))))
        (ax_mp ((iff (ex x2 (an (eq x2 x) (eq x1 y))) (eq x1 y)) (iff (el x1 (ns (sn y))) (ex x2 (an (eq x2 x) (eq x1 y)))))
          (ax_mp ((iff (el x1 (ns (sn y))) (eq x1 y)) (im (iff (ex x2 (an (eq x2 x) (eq x1 y))) (eq x1 y)) (iff (el x1 (ns (sn y))) (ex x2 (an (eq x2 x) (eq x1 y))))))
            (bitr4 ((el x1 (ns (sn y))) (eq x1 y) (ex x2 (an (eq x2 x) (eq x1 y)))))
            (elsn (x1 y)))
          (exeqe (x2 x (eq x1 y) (eq x1 y))
            (biidd ((eq x2 x) (eq x1 y))))))))))

(def ins ((a nat ()) (b nat ())) (nat ())
((x nat))
(lower (ab x (or (eq x a) (el x (ns b))))))

(local theorem inseqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (ins _a1 _b1) (ins _a2 _b2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eq (ins _a1 _b1) (ins _a2 _b2)))
  (im
    _G
    (eq
      (:unfold ins (_a1 _b1) (x)
        (lower (ab x (or (eq x _a1) (el x (ns _b1))))))
      (:unfold ins (_a2 _b2) (x)
        (lower (ab x (or (eq x _a2) (el x (ns _b2))))))))
  (lowereqd (_G (ab x (or (eq x _a1) (el x (ns _b1)))) (ab x (or (eq x _a2) (el x (ns _b2)))))
    (abeqd (_G x (or (eq x _a1) (el x (ns _b1))) (or (eq x _a2) (el x (ns _b2))))
      (oreqd (_G (eq x _a1) (eq x _a2) (el x (ns _b1)) (el x (ns _b2)))
        (eqeqd (_G x x _a1 _a2)
          H1
          _ah)
        (eleqd (_G x x (ns _b1) (ns _b2))
          H1
          (nseqd (_G _b1 _b2)
            _bh))))))))

(local theorem inseq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (ins _a1 _b1) (ins _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (ins _a1 _b1) (ins _a2 _b2)))
  (inseqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem inseq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (ins _a1 b) (ins _a2 b)))
()
(inseqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem inseq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (ins _a1 b) (ins _a2 b)))
()
(inseq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem inseq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (ins a _b1) (ins a _b2)))
()
(inseqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem inseq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (ins a _b1) (ins a _b2)))
()
(inseq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(theorem elins ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (el a (ns (ins b c))) (or (eq a b) (el a (ns c))))
((x nat))
(ax_mp ((iff (el a (ab x (or (eq x b) (el x (ns c))))) (or (eq a b) (el a (ns c)))) (iff (el a (ns (ins b c))) (or (eq a b) (el a (ns c)))))
  (ax_mp ((iff (el a (ns (ins b c))) (el a (ab x (or (eq x b) (el x (ns c)))))) (im (iff (el a (ab x (or (eq x b) (el x (ns c))))) (or (eq a b) (el a (ns c)))) (iff (el a (ns (ins b c))) (or (eq a b) (el a (ns c))))))
    (bitr ((el a (ns (ins b c))) (el a (ab x (or (eq x b) (el x (ns c))))) (or (eq a b) (el a (ns c)))))
    (ax_mp ((finite (ab x (or (eq x b) (el x (ns c))))) (iff (el a (ns (ins b c))) (el a (ab x (or (eq x b) (el x (ns c)))))))
      (:conv (im (finite (ab x (or (eq x b) (el x (ns c))))) (iff (el a (ns (ins b c))) (el a (ab x (or (eq x b) (el x (ns c)))))))
        (im
          (finite (ab x (or (eq x b) (el x (ns c)))))
          (iff
            (el
              a
              (ns
                (:unfold ins (b c) (x)
                  (lower (ab x (or (eq x b) (el x (ns c))))))))
            (el a (ab x (or (eq x b) (el x (ns c)))))))
        (ellower ((ab x (or (eq x b) (el x (ns c)))) a)))
      (ax_mp ((finite (ab x (le x (max b c)))) (finite (ab x (or (eq x b) (el x (ns c))))))
        (ax_mp ((subset (ab x (or (eq x b) (el x (ns c)))) (ab x (le x (max b c)))) (im (finite (ab x (le x (max b c)))) (finite (ab x (or (eq x b) (el x (ns c)))))))
          (finss ((ab x (or (eq x b) (el x (ns c)))) (ab x (le x (max b c)))))
          (mpbi ((al x (im (or (eq x b) (el x (ns c))) (le x (max b c)))) (subset (ab x (or (eq x b) (el x (ns c)))) (ab x (le x (max b c)))))
            (ssab (x (or (eq x b) (el x (ns c))) (le x (max b c))))
            (ax_gen (x (im (or (eq x b) (el x (ns c))) (le x (max b c))))
              (ax_mp ((im (el x (ns c)) (le x (max b c))) (im (or (eq x b) (el x (ns c))) (le x (max b c))))
                (ax_mp ((im (eq x b) (le x (max b c))) (im (im (el x (ns c)) (le x (max b c))) (im (or (eq x b) (el x (ns c))) (le x (max b c)))))
                  (eor ((eq x b) (el x (ns c)) (le x (max b c))))
                  (mpbiri ((eq x b) (le b (max b c)) (le x (max b c)))
                    (lemax1 (b c))
                    (leeq1 (x b (max b c)))))
                (rsyl ((el x (ns c)) (lt x c) (le x (max b c)))
                  (ellt (x c))
                  (letrd ((lt x c) x c (max b c))
                    (ltle (x c))
                    (a1i ((lt x c) (le c (max b c)))
                      (lemax2 (b c)))))))))
        (lefin ((max b c) x)))))
  (elabe (x a (or (eq x b) (el x (ns c))) (or (eq a b) (el a (ns c))))
    (oreqd ((eq x a) (eq x b) (eq a b) (el x (ns c)) (el a (ns c)))
      (eqeq1 (x a b))
      (eleq1 ((ns c) x a))))))

(local theorem inscom ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (ins a (ins b c)) (ins b (ins a c)))
((x nat))
(ax_mp ((eqs (ns (ins a (ins b c))) (ns (ins b (ins a c)))) (eq (ins a (ins b c)) (ins b (ins a c))))
  (axext ((ins a (ins b c)) (ins b (ins a c))))
  (:conv (eqs (ns (ins a (ins b c))) (ns (ins b (ins a c))))
    (:unfold eqs ((ns (ins a (ins b c))) (ns (ins b (ins a c)))) (x)
      (al x (iff (el x (ns (ins a (ins b c)))) (el x (ns (ins b (ins a c)))))))
    (ax_gen (x (iff (el x (ns (ins a (ins b c)))) (el x (ns (ins b (ins a c))))))
      (bitr4gi ((or (eq x a) (el x (ns (ins b c)))) (or (eq x b) (el x (ns (ins a c)))) (el x (ns (ins a (ins b c)))) (el x (ns (ins b (ins a c)))))
        (elins (x a (ins b c)))
        (elins (x b (ins a c)))
        (bitr4gi ((or (eq x a) (or (eq x b) (el x (ns c)))) (or (eq x b) (or (eq x a) (el x (ns c)))) (or (eq x a) (el x (ns (ins b c)))) (or (eq x b) (el x (ns (ins a c)))))
          (ax_mp ((iff (el x (ns (ins b c))) (or (eq x b) (el x (ns c)))) (iff (or (eq x a) (el x (ns (ins b c)))) (or (eq x a) (or (eq x b) (el x (ns c))))))
            (oreq2 ((eq x a) (el x (ns (ins b c))) (or (eq x b) (el x (ns c)))))
            (elins (x b c)))
          (ax_mp ((iff (el x (ns (ins a c))) (or (eq x a) (el x (ns c)))) (iff (or (eq x b) (el x (ns (ins a c)))) (or (eq x b) (or (eq x a) (el x (ns c))))))
            (oreq2 ((eq x b) (el x (ns (ins a c))) (or (eq x a) (el x (ns c)))))
            (elins (x a c)))
          (or12 ((eq x a) (eq x b) (el x (ns c))))))))))

(local theorem b0ins ((a nat ()) (b nat ())) ()
  (eq (b0 (ins a b)) (ins (suc a) (b0 b)))
((x nat))
(ax_mp ((eqs (ns (b0 (ins a b))) (ns (ins (suc a) (b0 b)))) (eq (b0 (ins a b)) (ins (suc a) (b0 b))))
  (axext ((b0 (ins a b)) (ins (suc a) (b0 b))))
  (:conv (eqs (ns (b0 (ins a b))) (ns (ins (suc a) (b0 b))))
    (:unfold eqs ((ns (b0 (ins a b))) (ns (ins (suc a) (b0 b)))) (x)
      (al x (iff (el x (ns (b0 (ins a b)))) (el x (ns (ins (suc a) (b0 b)))))))
    (ax_gen (x (iff (el x (ns (b0 (ins a b)))) (el x (ns (ins (suc a) (b0 b))))))
      (bitr4gi ((an (lt (d0) x) (el (sub x (d1)) (ns (ins a b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (el x (ns (b0 (ins a b)))) (el x (ns (ins (suc a) (b0 b)))))
        (elb0 (x (ins a b)))
        (ax_mp ((iff (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))) (iff (el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))))
          (ax_mp ((iff (el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (el x (ns (b0 b))))) (im (iff (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))) (iff (el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))))
            (bitr ((el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))))
            (elins (x (suc a) (b0 b))))
          (ax_mp ((iff (el x (ns (b0 b))) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (iff (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))))
            (oreq2 ((eq x (suc a)) (el x (ns (b0 b))) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
            (elb0 (x b))))
        (rbid ((lt (d0) x) (an (lt (d0) x) (el (sub x (d1)) (ns (ins a b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
          (anl ((lt (d0) x) (el (sub x (d1)) (ns (ins a b)))))
          (ax_mp ((im (an (lt (d0) x) (el (sub x (d1)) (ns b))) (lt (d0) x)) (im (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (lt (d0) x)))
            (ax_mp ((im (eq x (suc a)) (lt (d0) x)) (im (im (an (lt (d0) x) (el (sub x (d1)) (ns b))) (lt (d0) x)) (im (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (lt (d0) x))))
              (eor ((eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))) (lt (d0) x)))
              (mpbiri ((eq x (suc a)) (lt (d0) (suc a)) (lt (d0) x))
                (lt01S (a))
                (lteq2 ((d0) x (suc a)))))
            (anl ((lt (d0) x) (el (sub x (d1)) (ns b)))))
          (bitrd ((lt (d0) x) (an (lt (d0) x) (el (sub x (d1)) (ns (ins a b)))) (el (sub x (d1)) (ns (ins a b))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
            (bian1 ((lt (d0) x) (el (sub x (d1)) (ns (ins a b)))))
            (syl5bb ((lt (d0) x) (el (sub x (d1)) (ns (ins a b))) (or (eq (sub x (d1)) a) (el (sub x (d1)) (ns b))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
              (elins ((sub x (d1)) a b))
              (oreqd ((lt (d0) x) (eq (sub x (d1)) a) (eq x (suc a)) (el (sub x (d1)) (ns b)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))
                (syl5bbr ((lt (d0) x) (eq (sub x (d1)) a) (eq (suc (sub x (d1))) (suc a)) (eq x (suc a)))
                  (peano2 ((sub x (d1)) a))
                  (eqeq1d ((lt (d0) x) (suc (sub x (d1))) x (suc a))
                    (sylbi ((lt (d0) x) (ne x (d0)) (eq (suc (sub x (d1))) x))
                      (lt01 (x))
                      (sub1can (x)))))
                (bicomd ((lt (d0) x) (an (lt (d0) x) (el (sub x (d1)) (ns b))) (el (sub x (d1)) (ns b)))
                  (bian1 ((lt (d0) x) (el (sub x (d1)) (ns b))))))))))))))

(local theorem b1ins ((n nat ())) ()
  (eq (b1 n) (ins (d0) (b0 n)))
((x nat))
(ax_mp ((eqs (ns (b1 n)) (ns (ins (d0) (b0 n)))) (eq (b1 n) (ins (d0) (b0 n))))
  (axext ((b1 n) (ins (d0) (b0 n))))
  (:conv (eqs (ns (b1 n)) (ns (ins (d0) (b0 n))))
    (:unfold eqs ((ns (b1 n)) (ns (ins (d0) (b0 n)))) (x)
      (al x (iff (el x (ns (b1 n))) (el x (ns (ins (d0) (b0 n)))))))
    (ax_gen (x (iff (el x (ns (b1 n))) (el x (ns (ins (d0) (b0 n))))))
      (bitr4gi ((or (eq x (d0)) (el (sub x (d1)) (ns n))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n)))) (el x (ns (b1 n))) (el x (ns (ins (d0) (b0 n)))))
        (elb1 (x n))
        (ax_mp ((iff (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))) (iff (el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
          (ax_mp ((iff (el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (el x (ns (b0 n))))) (im (iff (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))) (iff (el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n)))))))
            (bitr ((el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
            (elins (x (d0) (b0 n))))
          (ax_mp ((iff (el x (ns (b0 n))) (an (lt (d0) x) (el (sub x (d1)) (ns n)))) (iff (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
            (oreq2 ((eq x (d0)) (el x (ns (b0 n))) (an (lt (d0) x) (el (sub x (d1)) (ns n)))))
            (elb0 (x n))))
        (cases ((eq x (d0)) (iff (or (eq x (d0)) (el (sub x (d1)) (ns n))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
          (bithd ((eq x (d0)) (or (eq x (d0)) (el (sub x (d1)) (ns n))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n)))))
            (orl ((eq x (d0)) (el (sub x (d1)) (ns n))))
            (orl ((eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
          (oreq2d ((not (eq x (d0))) (eq x (d0)) (el (sub x (d1)) (ns n)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))
            (bicomd ((not (eq x (d0))) (an (lt (d0) x) (el (sub x (d1)) (ns n))) (el (sub x (d1)) (ns n)))
              (sylbir ((not (eq x (d0))) (lt (d0) x) (iff (an (lt (d0) x) (el (sub x (d1)) (ns n))) (el (sub x (d1)) (ns n))))
                (:conv (iff (lt (d0) x) (not (eq x (d0))))
                  (iff
                    (lt (d0) x)
                    (:sym (:unfold ne (x (d0)) ()
                      (not (eq x (d0))))))
                  (lt01 (x)))
                (bian1 ((lt (d0) x) (el (sub x (d1)) (ns n)))))))))))))

(local theorem insdiv2 ((a nat ()) (b nat ())) ()
  (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))
()
(:let H1 (b0ins (a (div b (d2))))
(ax_mp ((or (eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2))))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2)))))
  (ax_mp ((im (eq b (b1 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))) (im (or (eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2))))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))))
    (ax_mp ((im (eq b (b0 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))) (im (im (eq b (b1 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))) (im (or (eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2))))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2)))))))
      (eor ((eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))))
      (syl6eq ((eq b (b0 (div b (d2)))) (div (ins (suc a) b) (d2)) (div (b0 (ins a (div b (d2)))) (d2)) (ins a (div b (d2))))
        (b0div2 ((ins a (div b (d2)))))
        (diveq1d ((eq b (b0 (div b (d2)))) (ins (suc a) b) (b0 (ins a (div b (d2)))) (d2))
          (syl6eqr ((eq b (b0 (div b (d2)))) (ins (suc a) b) (ins (suc a) (b0 (div b (d2)))) (b0 (ins a (div b (d2)))))
            H1
            (inseq2 ((suc a) b (b0 (div b (d2)))))))))
    (syl6eq ((eq b (b1 (div b (d2)))) (div (ins (suc a) b) (d2)) (div (b1 (ins a (div b (d2)))) (d2)) (ins a (div b (d2))))
      (b1div2 ((ins a (div b (d2)))))
      (diveq1d ((eq b (b1 (div b (d2)))) (ins (suc a) b) (b1 (ins a (div b (d2)))) (d2))
        (syl6eqr ((eq b (b1 (div b (d2)))) (ins (suc a) b) (ins (d0) (b0 (ins a (div b (d2))))) (b1 (ins a (div b (d2)))))
          (b1ins ((ins a (div b (d2)))))
          (syl6eqr ((eq b (b1 (div b (d2)))) (ins (suc a) b) (ins (d0) (ins (suc a) (b0 (div b (d2))))) (ins (d0) (b0 (ins a (div b (d2))))))
            (ax_mp ((eq (b0 (ins a (div b (d2)))) (ins (suc a) (b0 (div b (d2))))) (eq (ins (d0) (b0 (ins a (div b (d2))))) (ins (d0) (ins (suc a) (b0 (div b (d2)))))))
              (inseq2 ((d0) (b0 (ins a (div b (d2)))) (ins (suc a) (b0 (div b (d2))))))
              H1)
            (syl6eq ((eq b (b1 (div b (d2)))) (ins (suc a) b) (ins (suc a) (ins (d0) (b0 (div b (d2))))) (ins (d0) (ins (suc a) (b0 (div b (d2))))))
              (inscom ((suc a) (d0) (b0 (div b (d2)))))
              (inseq2d ((eq b (b1 (div b (d2)))) (suc a) b (ins (d0) (b0 (div b (d2)))))
                (syl6eq ((eq b (b1 (div b (d2)))) b (b1 (div b (d2))) (ins (d0) (b0 (div b (d2)))))
                  (b1ins ((div b (d2))))
                  (id ((eq b (b1 (div b (d2))))))))))))))
  (b0orb1 (b)))))

(local theorem insunsn ((a nat ()) (b nat ())) ()
  (eqs (ns (ins a b)) (Union (ns (sn a)) (ns b)))
((x nat))
(eqri ((ns (ins a b)) (Union (ns (sn a)) (ns b)) x)
  (bitr4gi ((or (eq x a) (el x (ns b))) (or (el x (ns (sn a))) (el x (ns b))) (el x (ns (ins a b))) (el x (Union (ns (sn a)) (ns b))))
    (elins (x a b))
    (elun ((ns (sn a)) (ns b) x))
    (ax_mp ((iff (eq x a) (el x (ns (sn a)))) (iff (or (eq x a) (el x (ns b))) (or (el x (ns (sn a))) (el x (ns b)))))
      (oreq1 ((eq x a) (el x (ns (sn a))) (el x (ns b))))
      (ax_mp ((iff (el x (ns (sn a))) (eq x a)) (iff (eq x a) (el x (ns (sn a)))))
        (bicom ((el x (ns (sn a))) (eq x a)))
        (elsn (x a)))))))

(local theorem ins02 ((a nat ())) ()
  (eq (ins a (d0)) (sn a))
()
(ax_mp ((eqs (ns (ins a (d0))) (ns (sn a))) (eq (ins a (d0)) (sn a)))
  (axext ((ins a (d0)) (sn a)))
  (ax_mp ((eqs (Union (ns (sn a)) (ns (d0))) (ns (sn a))) (eqs (ns (ins a (d0))) (ns (sn a))))
    (ax_mp ((eqs (ns (ins a (d0))) (Union (ns (sn a)) (ns (d0)))) (im (eqs (Union (ns (sn a)) (ns (d0))) (ns (sn a))) (eqs (ns (ins a (d0))) (ns (sn a)))))
      (eqstr ((ns (ins a (d0))) (Union (ns (sn a)) (ns (d0))) (ns (sn a))))
      (insunsn (a (d0))))
    (un02 ((ns (sn a)))))))

(local theorem insss ((A set ()) (a nat ()) (b nat ())) ()
  (iff (subset (ns (ins a b)) A) (an (el a A) (subset (ns b) A)))
()
(ax_mp ((iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))) (iff (subset (ns (ins a b)) A) (an (el a A) (subset (ns b) A))))
  (ax_mp ((iff (subset (ns (ins a b)) A) (subset (Union (ns (sn a)) (ns b)) A)) (im (iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))) (iff (subset (ns (ins a b)) A) (an (el a A) (subset (ns b) A)))))
    (bitr ((subset (ns (ins a b)) A) (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))))
    (ax_mp ((eqs (ns (ins a b)) (Union (ns (sn a)) (ns b))) (iff (subset (ns (ins a b)) A) (subset (Union (ns (sn a)) (ns b)) A)))
      (sseq1 ((ns (ins a b)) (Union (ns (sn a)) (ns b)) A))
      (insunsn (a b))))
  (ax_mp ((iff (an (subset (ns (sn a)) A) (subset (ns b) A)) (an (el a A) (subset (ns b) A))) (iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))))
    (ax_mp ((iff (subset (Union (ns (sn a)) (ns b)) A) (an (subset (ns (sn a)) A) (subset (ns b) A))) (im (iff (an (subset (ns (sn a)) A) (subset (ns b) A)) (an (el a A) (subset (ns b) A))) (iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A)))))
      (bitr ((subset (Union (ns (sn a)) (ns b)) A) (an (subset (ns (sn a)) A) (subset (ns b) A)) (an (el a A) (subset (ns b) A))))
      (unss ((ns (sn a)) (ns b) A)))
    (aneq1i ((subset (ns (sn a)) A) (el a A) (subset (ns b) A))
      (snss (A a))))))

(local theorem ssins ((A set ()) (a nat ()) (b nat ())) ()
  (im (subset A (ns (ins a b))) (or (el a A) (subset A (ns b))))
((x nat))
(:conv (im (subset A (ns (ins a b))) (or (el a A) (subset A (ns b))))
  (im
    (subset A (ns (ins a b)))
    (:unfold or ((el a A) (subset A (ns b))) ()
      (im (not (el a A)) (subset A (ns b)))))
  (com12 ((not (el a A)) (subset A (ns (ins a b))) (subset A (ns b)))
    (bi1d ((not (el a A)) (subset A (ns (ins a b))) (subset A (ns b)))
      (:conv (im (not (el a A)) (iff (subset A (ns (ins a b))) (subset A (ns b))))
        (im
          (not (el a A))
          (iff
            (:unfold subset (A (ns (ins a b))) (x)
              (al x (im (el x A) (el x (ns (ins a b))))))
            (:unfold subset (A (ns b)) (x)
              (al x (im (el x A) (el x (ns b)))))))
        (aleqd ((not (el a A)) x (im (el x A) (el x (ns (ins a b)))) (im (el x A) (el x (ns b))))
          (syl ((not (el a A)) (im (el x A) (iff (el x (ns (ins a b))) (el x (ns b)))) (iff (im (el x A) (el x (ns (ins a b)))) (im (el x A) (el x (ns b)))))
            (imeq2a ((el x A) (el x (ns (ins a b))) (el x (ns b))))
            (exp ((not (el a A)) (el x A) (iff (el x (ns (ins a b))) (el x (ns b))))
              (syl5bb ((an (not (el a A)) (el x A)) (el x (ns (ins a b))) (or (eq x a) (el x (ns b))) (el x (ns b)))
                (elins (x a b))
                (syl ((an (not (el a A)) (el x A)) (not (eq x a)) (iff (or (eq x a) (el x (ns b))) (el x (ns b))))
                  (bior1 ((eq x a) (el x (ns b))))
                  (impcom ((el x A) (not (el a A)) (not (eq x a)))
                    (con3d ((el x A) (eq x a) (el a A))
                      (com12 ((eq x a) (el x A) (el a A))
                        (bi1d ((eq x a) (el x A) (el a A))
                          (eleq1 (A x a))))))))))))))))

(def upto ((n nat ())) (nat ())
()
(sub (pow (d2) n) (d1)))

(local theorem uptoeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()))
  ((_nh (im _G (eq _n1 _n2))))
  (im _G (eq (upto _n1) (upto _n2)))
()
(:conv (im _G (eq (upto _n1) (upto _n2)))
  (im
    _G
    (eq
      (:unfold upto (_n1) ()
        (sub (pow (d2) _n1) (d1)))
      (:unfold upto (_n2) ()
        (sub (pow (d2) _n2) (d1)))))
  (subeqd (_G (pow (d2) _n1) (pow (d2) _n2) (d1) (d1))
    (poweqd (_G (d2) (d2) _n1 _n2)
      (eqidd (_G (d2)))
      _nh)
    (eqidd (_G (d1))))))

(local theorem uptoeq ((_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (upto _n1) (upto _n2)))
()
(uptoeqd ((eq _n1 _n2) _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem upto0 () ()
  (eq (upto (d0)) (d0))
()
(ax_mp ((eq (sub (d1) (d1)) (d0)) (eq (upto (d0)) (d0)))
  (ax_mp ((eq (upto (d0)) (sub (d1) (d1))) (im (eq (sub (d1) (d1)) (d0)) (eq (upto (d0)) (d0))))
    (eqtr ((upto (d0)) (sub (d1) (d1)) (d0)))
    (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (upto (d0)) (sub (d1) (d1))))
      (:conv (im (eq (pow (d2) (d0)) (d1)) (eq (upto (d0)) (sub (d1) (d1))))
        (im
          (eq (pow (d2) (d0)) (d1))
          (eq
            (:unfold upto ((d0)) ()
              (sub (pow (d2) (d0)) (d1)))
            (sub (d1) (d1))))
        (subeq1 ((pow (d2) (d0)) (d1) (d1))))
      (pow0 ((d2)))))
  (subid ((d1)))))

(local theorem uptoadd1 ((n nat ())) ()
  (eq (add (upto n) (d1)) (pow (d2) n))
()
(ax_mp ((le (d1) (pow (d2) n)) (eq (add (upto n) (d1)) (pow (d2) n)))
  (:conv (im (le (d1) (pow (d2) n)) (eq (add (upto n) (d1)) (pow (d2) n)))
    (im
      (le (d1) (pow (d2) n))
      (eq
        (add
          (:unfold upto (n) ()
            (sub (pow (d2) n) (d1)))
          (d1))
        (pow (d2) n)))
    (npcan ((pow (d2) n) (d1))))
  (ax_mp ((lt (d0) (d2)) (le (d1) (pow (d2) n)))
    (:conv (im (lt (d0) (d2)) (le (d1) (pow (d2) n)))
      (im
        (lt (d0) (d2))
        (:sym (:unfold lt ((d0) (pow (d2) n)) ()
          (le
            (:sym (:unfold d1 () ()
              (suc (d0))))
            (pow (d2) n)))))
      (powpos ((d2) n)))
    (d0lt2 ()))))

(local theorem sucupto ((n nat ())) ()
  (eq (suc (upto n)) (pow (d2) n))
()
(ax_mp ((eq (add (upto n) (d1)) (pow (d2) n)) (eq (suc (upto n)) (pow (d2) n)))
  (ax_mp ((eq (add (upto n) (d1)) (suc (upto n))) (im (eq (add (upto n) (d1)) (pow (d2) n)) (eq (suc (upto n)) (pow (d2) n))))
    (eqtr3 ((suc (upto n)) (add (upto n) (d1)) (pow (d2) n)))
    (add12 ((upto n))))
  (uptoadd1 (n))))

(local theorem uptoS ((n nat ())) ()
  (eq (upto (suc n)) (b1 (upto n)))
()
(mpbi ((eq (add (upto (suc n)) (d1)) (add (b1 (upto n)) (d1))) (eq (upto (suc n)) (b1 (upto n))))
  (addcan1 ((upto (suc n)) (b1 (upto n)) (d1)))
  (ax_mp ((eq (pow (d2) (suc n)) (add (b1 (upto n)) (d1))) (eq (add (upto (suc n)) (d1)) (add (b1 (upto n)) (d1))))
    (ax_mp ((eq (add (upto (suc n)) (d1)) (pow (d2) (suc n))) (im (eq (pow (d2) (suc n)) (add (b1 (upto n)) (d1))) (eq (add (upto (suc n)) (d1)) (add (b1 (upto n)) (d1)))))
      (eqtr ((add (upto (suc n)) (d1)) (pow (d2) (suc n)) (add (b1 (upto n)) (d1))))
      (uptoadd1 ((suc n))))
    (ax_mp ((eq (mul (d2) (pow (d2) n)) (add (b1 (upto n)) (d1))) (eq (pow (d2) (suc n)) (add (b1 (upto n)) (d1))))
      (ax_mp ((eq (pow (d2) (suc n)) (mul (d2) (pow (d2) n))) (im (eq (mul (d2) (pow (d2) n)) (add (b1 (upto n)) (d1))) (eq (pow (d2) (suc n)) (add (b1 (upto n)) (d1)))))
        (eqtr ((pow (d2) (suc n)) (mul (d2) (pow (d2) n)) (add (b1 (upto n)) (d1))))
        (powS ((d2) n)))
      (ax_mp ((eq (mul (d2) (suc (upto n))) (add (b1 (upto n)) (d1))) (eq (mul (d2) (pow (d2) n)) (add (b1 (upto n)) (d1))))
        (ax_mp ((eq (mul (d2) (suc (upto n))) (mul (d2) (pow (d2) n))) (im (eq (mul (d2) (suc (upto n))) (add (b1 (upto n)) (d1))) (eq (mul (d2) (pow (d2) n)) (add (b1 (upto n)) (d1)))))
          (eqtr3 ((mul (d2) (pow (d2) n)) (mul (d2) (suc (upto n))) (add (b1 (upto n)) (d1))))
          (ax_mp ((eq (suc (upto n)) (pow (d2) n)) (eq (mul (d2) (suc (upto n))) (mul (d2) (pow (d2) n))))
            (muleq2 ((d2) (suc (upto n)) (pow (d2) n)))
            (sucupto (n))))
        (ax_mp ((eq (add (mul (d2) (upto n)) (d2)) (add (b1 (upto n)) (d1))) (eq (mul (d2) (suc (upto n))) (add (b1 (upto n)) (d1))))
          (ax_mp ((eq (mul (d2) (suc (upto n))) (add (mul (d2) (upto n)) (d2))) (im (eq (add (mul (d2) (upto n)) (d2)) (add (b1 (upto n)) (d1))) (eq (mul (d2) (suc (upto n))) (add (b1 (upto n)) (d1)))))
            (eqtr ((mul (d2) (suc (upto n))) (add (mul (d2) (upto n)) (d2)) (add (b1 (upto n)) (d1))))
            (mulS ((d2) (upto n))))
          (ax_mp ((eq (add (b1 (upto n)) (d1)) (add (b0 (upto n)) (d2))) (eq (add (mul (d2) (upto n)) (d2)) (add (b1 (upto n)) (d1))))
            (ax_mp ((eq (add (mul (d2) (upto n)) (d2)) (add (b0 (upto n)) (d2))) (im (eq (add (b1 (upto n)) (d1)) (add (b0 (upto n)) (d2))) (eq (add (mul (d2) (upto n)) (d2)) (add (b1 (upto n)) (d1)))))
              (eqtr4 ((add (mul (d2) (upto n)) (d2)) (add (b0 (upto n)) (d2)) (add (b1 (upto n)) (d1))))
              (ax_mp ((eq (mul (d2) (upto n)) (b0 (upto n))) (eq (add (mul (d2) (upto n)) (d2)) (add (b0 (upto n)) (d2))))
                (addeq1 ((mul (d2) (upto n)) (b0 (upto n)) (d2)))
                (b0mul21 ((upto n)))))
            (:conv (eq (add (b1 (upto n)) (d1)) (add (b0 (upto n)) (d2)))
              (eq
                (add
                  (:unfold b1 ((upto n)) ()
                    (suc (b0 (upto n))))
                  (d1))
                (add
                  (b0 (upto n))
                  (:unfold d2 () ()
                    (suc (d1)))))
              (addSass ((b0 (upto n)) (d1)))))))))))

(local theorem uptolem ((a nat ()) (n nat ())) ()
  (an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a))))
()
(trud ((an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
  (:conv (im (tru) (an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
    (im
      (tru)
      (an
        (eq
          (:unfold shr ((upto n) a) ()
            (div (upto n) (pow (d2) a)))
          (upto (sub n a)))
        (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
    (eqdivmod ((tru) (upto (sub n a)) (upto (min n a)) (upto n) (pow (d2) a))
      (ltletrd ((tru) (upto (min n a)) (pow (d2) (min n a)) (pow (d2) a))
        (a1i ((tru) (lt (upto (min n a)) (pow (d2) (min n a))))
          (ax_mp ((an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1))) (lt (upto (min n a)) (pow (d2) (min n a))))
            (:conv (im (an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1))) (lt (upto (min n a)) (pow (d2) (min n a))))
              (im
                (an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1)))
                (lt
                  (:unfold upto ((min n a)) ()
                    (sub (pow (d2) (min n a)) (d1)))
                  (pow (d2) (min n a))))
              (subltid ((pow (d2) (min n a)) (d1))))
            (ax_mp ((lt (d0) (d1)) (an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1))))
              (ax_mp ((lt (d0) (pow (d2) (min n a))) (im (lt (d0) (d1)) (an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1)))))
                (ian ((lt (d0) (pow (d2) (min n a))) (lt (d0) (d1))))
                (ax_mp ((lt (d0) (d2)) (lt (d0) (pow (d2) (min n a))))
                  (powpos ((d2) (min n a)))
                  (d0lt2 ())))
              (d0lt1 ()))))
        (a1i ((tru) (le (pow (d2) (min n a)) (pow (d2) a)))
          (ax_mp ((le (min n a) a) (le (pow (d2) (min n a)) (pow (d2) a)))
            (ax_mp ((ne (d2) (d0)) (im (le (min n a) a) (le (pow (d2) (min n a)) (pow (d2) a))))
              (lepow2a ((d2) (min n a) a))
              (d2ne0 ()))
            (minle2 (n a)))))
      (a1i ((tru) (eq (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (upto n)))
        (mpbi ((eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (upto n) (d1))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (upto n)))
          (addcan1 ((add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (upto n) (d1)))
          (ax_mp ((eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))) (eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (upto n) (d1))))
            (ax_mp ((eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1)))) (im (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))) (eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (upto n) (d1)))))
              (eqtr ((add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))))
              (addass ((mul (pow (d2) a) (upto (sub n a))) (upto (min n a)) (d1))))
            (ax_mp ((eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))))
              (ax_mp ((eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (im (eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1)))))
                (eqtr4 ((add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (add (upto n) (d1))))
                (ax_mp ((eq (add (upto (min n a)) (d1)) (pow (d2) (min n a))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                  (addeq2 ((mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1)) (pow (d2) (min n a))))
                  (uptoadd1 ((min n a)))))
              (ax_mp ((eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n)) (eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                (ax_mp ((eq (add (upto n) (d1)) (pow (d2) n)) (im (eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n)) (eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))))))
                  (eqtr4 ((add (upto n) (d1)) (pow (d2) n) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                  (uptoadd1 (n)))
                (ax_mp ((eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n)))
                  (ax_mp ((eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (im (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n))))
                    (eqtr3 ((add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)))
                    (ax_mp ((eq (mul (pow (d2) (min n a)) (d1)) (pow (d2) (min n a))) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                      (ax_mp ((eq (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a)))) (im (eq (mul (pow (d2) (min n a)) (d1)) (pow (d2) (min n a))) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))))))
                        (addeq ((mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1)) (pow (d2) (min n a))))
                        (cases ((le a n) (eq (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a)))))
                          (muleq1d ((le a n) (pow (d2) (min n a)) (pow (d2) a) (upto (sub n a)))
                            (poweq2d ((le a n) (d2) (min n a) a)
                              (eqmin2 (n a))))
                          (syl ((not (le a n)) (eq (upto (sub n a)) (d0)) (eq (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a)))))
                            (eqtr4d ((eq (upto (sub n a)) (d0)) (mul (pow (d2) (min n a)) (upto (sub n a))) (d0) (mul (pow (d2) a) (upto (sub n a))))
                              (syl6eq ((eq (upto (sub n a)) (d0)) (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d0)) (d0))
                                (mul0 ((pow (d2) (min n a))))
                                (muleq2 ((pow (d2) (min n a)) (upto (sub n a)) (d0))))
                              (syl6eq ((eq (upto (sub n a)) (d0)) (mul (pow (d2) a) (upto (sub n a))) (mul (pow (d2) a) (d0)) (d0))
                                (mul0 ((pow (d2) a)))
                                (muleq2 ((pow (d2) a) (upto (sub n a)) (d0)))))
                            (syl6eq ((not (le a n)) (upto (sub n a)) (upto (d0)) (d0))
                              (upto0 ())
                              (uptoeqd ((not (le a n)) (sub n a) (d0))
                                (nlesubeq0 (n a)))))))
                      (mul12 ((pow (d2) (min n a))))))
                  (ax_mp ((eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)))
                    (ax_mp ((eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1)))) (im (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n))))
                      (eqtr3 ((add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)))
                      (muladd ((pow (d2) (min n a)) (upto (sub n a)) (d1))))
                    (ax_mp ((eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)))
                      (ax_mp ((eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a)))) (im (eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n))))
                        (eqtr ((mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)))
                        (ax_mp ((eq (add (upto (sub n a)) (d1)) (pow (d2) (sub n a))) (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a)))))
                          (muleq2 ((pow (d2) (min n a)) (add (upto (sub n a)) (d1)) (pow (d2) (sub n a))))
                          (uptoadd1 ((sub n a)))))
                      (ax_mp ((eq (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)))
                        (ax_mp ((eq (pow (d2) (add (min n a) (sub n a))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a)))) (im (eq (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n))))
                          (eqtr3 ((mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)))
                          (powadd ((d2) (min n a) (sub n a))))
                        (ax_mp ((eq (add (min n a) (sub n a)) n) (eq (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)))
                          (poweq2 ((d2) (add (min n a) (sub n a)) n))
                          (minaddsub (n a))))))))))))))))

(local theorem shrupto ((a nat ()) (n nat ())) ()
  (eq (shr (upto n) a) (upto (sub n a)))
()
(ax_mp ((an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))) (eq (shr (upto n) a) (upto (sub n a))))
  (anl ((eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
  (uptolem (a n))))

(local theorem shlupto ((a nat ()) (n nat ())) ()
  (eq (add (shl (upto n) a) (upto a)) (upto (add n a)))
()
(mpbi ((eq (suc (add (shl (upto n) a) (upto a))) (suc (upto (add n a)))) (eq (add (shl (upto n) a) (upto a)) (upto (add n a))))
  (peano2 ((add (shl (upto n) a) (upto a)) (upto (add n a))))
  (ax_mp ((eq (add (shl (upto n) a) (suc (upto a))) (suc (upto (add n a)))) (eq (suc (add (shl (upto n) a) (upto a))) (suc (upto (add n a)))))
    (ax_mp ((eq (add (shl (upto n) a) (suc (upto a))) (suc (add (shl (upto n) a) (upto a)))) (im (eq (add (shl (upto n) a) (suc (upto a))) (suc (upto (add n a)))) (eq (suc (add (shl (upto n) a) (upto a))) (suc (upto (add n a))))))
      (eqtr3 ((suc (add (shl (upto n) a) (upto a))) (add (shl (upto n) a) (suc (upto a))) (suc (upto (add n a)))))
      (addS2 ((shl (upto n) a) (upto a))))
    (ax_mp ((eq (suc (upto (add n a))) (add (shl (upto n) a) (pow (d2) a))) (eq (add (shl (upto n) a) (suc (upto a))) (suc (upto (add n a)))))
      (ax_mp ((eq (add (shl (upto n) a) (suc (upto a))) (add (shl (upto n) a) (pow (d2) a))) (im (eq (suc (upto (add n a))) (add (shl (upto n) a) (pow (d2) a))) (eq (add (shl (upto n) a) (suc (upto a))) (suc (upto (add n a))))))
        (eqtr4 ((add (shl (upto n) a) (suc (upto a))) (add (shl (upto n) a) (pow (d2) a)) (suc (upto (add n a)))))
        (ax_mp ((eq (suc (upto a)) (pow (d2) a)) (eq (add (shl (upto n) a) (suc (upto a))) (add (shl (upto n) a) (pow (d2) a))))
          (addeq2 ((shl (upto n) a) (suc (upto a)) (pow (d2) a)))
          (sucupto (a))))
      (ax_mp ((eq (add (shl (upto n) a) (pow (d2) a)) (pow (d2) (add n a))) (eq (suc (upto (add n a))) (add (shl (upto n) a) (pow (d2) a))))
        (ax_mp ((eq (suc (upto (add n a))) (pow (d2) (add n a))) (im (eq (add (shl (upto n) a) (pow (d2) a)) (pow (d2) (add n a))) (eq (suc (upto (add n a))) (add (shl (upto n) a) (pow (d2) a)))))
          (eqtr4 ((suc (upto (add n a))) (pow (d2) (add n a)) (add (shl (upto n) a) (pow (d2) a))))
          (sucupto ((add n a))))
        (ax_mp ((eq (mul (suc (upto n)) (pow (d2) a)) (pow (d2) (add n a))) (eq (add (shl (upto n) a) (pow (d2) a)) (pow (d2) (add n a))))
          (ax_mp ((eq (mul (suc (upto n)) (pow (d2) a)) (add (shl (upto n) a) (pow (d2) a))) (im (eq (mul (suc (upto n)) (pow (d2) a)) (pow (d2) (add n a))) (eq (add (shl (upto n) a) (pow (d2) a)) (pow (d2) (add n a)))))
            (eqtr3 ((add (shl (upto n) a) (pow (d2) a)) (mul (suc (upto n)) (pow (d2) a)) (pow (d2) (add n a))))
            (:conv (eq (mul (suc (upto n)) (pow (d2) a)) (add (shl (upto n) a) (pow (d2) a)))
              (eq
                (mul (suc (upto n)) (pow (d2) a))
                (add
                  (:unfold shl ((upto n) a) ()
                    (mul (upto n) (pow (d2) a)))
                  (pow (d2) a)))
              (mulS1 ((upto n) (pow (d2) a)))))
          (ax_mp ((eq (pow (d2) (add n a)) (mul (pow (d2) n) (pow (d2) a))) (eq (mul (suc (upto n)) (pow (d2) a)) (pow (d2) (add n a))))
            (ax_mp ((eq (mul (suc (upto n)) (pow (d2) a)) (mul (pow (d2) n) (pow (d2) a))) (im (eq (pow (d2) (add n a)) (mul (pow (d2) n) (pow (d2) a))) (eq (mul (suc (upto n)) (pow (d2) a)) (pow (d2) (add n a)))))
              (eqtr4 ((mul (suc (upto n)) (pow (d2) a)) (mul (pow (d2) n) (pow (d2) a)) (pow (d2) (add n a))))
              (ax_mp ((eq (suc (upto n)) (pow (d2) n)) (eq (mul (suc (upto n)) (pow (d2) a)) (mul (pow (d2) n) (pow (d2) a))))
                (muleq1 ((suc (upto n)) (pow (d2) n) (pow (d2) a)))
                (sucupto (n))))
            (powadd ((d2) n a)))))))))

(theorem elupto ((k nat ()) (n nat ())) ()
  (iff (el k (ns (upto n))) (lt k n))
()
(ax_mp ((iff (odd (shr (upto n) k)) (lt k n)) (iff (el k (ns (upto n))) (lt k n)))
  (ax_mp ((iff (el k (ns (upto n))) (odd (shr (upto n) k))) (im (iff (odd (shr (upto n) k)) (lt k n)) (iff (el k (ns (upto n))) (lt k n))))
    (bitr ((el k (ns (upto n))) (odd (shr (upto n) k)) (lt k n)))
    (elnel (k (upto n))))
  (ax_mp ((iff (odd (upto (sub n k))) (lt k n)) (iff (odd (shr (upto n) k)) (lt k n)))
    (ax_mp ((iff (odd (shr (upto n) k)) (odd (upto (sub n k)))) (im (iff (odd (upto (sub n k))) (lt k n)) (iff (odd (shr (upto n) k)) (lt k n))))
      (bitr ((odd (shr (upto n) k)) (odd (upto (sub n k))) (lt k n)))
      (ax_mp ((eq (shr (upto n) k) (upto (sub n k))) (iff (odd (shr (upto n) k)) (odd (upto (sub n k)))))
        (oddeq ((shr (upto n) k) (upto (sub n k))))
        (shrupto (k n))))
    (ax_mp ((iff (lt k n) (not (eq (sub n k) (d0)))) (iff (odd (upto (sub n k))) (lt k n)))
      (ax_mp ((iff (odd (upto (sub n k))) (not (eq (sub n k) (d0)))) (im (iff (lt k n) (not (eq (sub n k) (d0)))) (iff (odd (upto (sub n k))) (lt k n))))
        (bitr4 ((odd (upto (sub n k))) (not (eq (sub n k) (d0))) (lt k n)))
        (ibii ((odd (upto (sub n k))) (not (eq (sub n k) (d0))))
          (mtd ((odd (upto (sub n k))) (odd (d0)) (eq (sub n k) (d0)))
            (a1i ((odd (upto (sub n k))) (not (odd (d0))))
              (odd0 ()))
            (com12 ((eq (sub n k) (d0)) (odd (upto (sub n k))) (odd (d0)))
              (bi1d ((eq (sub n k) (d0)) (odd (upto (sub n k))) (odd (d0)))
                (oddeqd ((eq (sub n k) (d0)) (upto (sub n k)) (d0))
                  (syl6eq ((eq (sub n k) (d0)) (upto (sub n k)) (upto (d0)) (d0))
                    (upto0 ())
                    (uptoeq ((sub n k) (d0))))))))
          (mpbii ((not (eq (sub n k) (d0))) (odd (b1 (upto (sub (sub n k) (d1))))) (odd (upto (sub n k))))
            (b1odd ((upto (sub (sub n k) (d1)))))
            (oddeqd ((not (eq (sub n k) (d0))) (b1 (upto (sub (sub n k) (d1)))) (upto (sub n k)))
              (syl5eqr ((not (eq (sub n k) (d0))) (b1 (upto (sub (sub n k) (d1)))) (upto (suc (sub (sub n k) (d1)))) (upto (sub n k)))
                (uptoS ((sub (sub n k) (d1))))
                (uptoeqd ((not (eq (sub n k) (d0))) (suc (sub (sub n k) (d1))) (sub n k))
                  (:conv (im (not (eq (sub n k) (d0))) (eq (suc (sub (sub n k) (d1))) (sub n k)))
                    (im
                      (:sym (:unfold ne ((sub n k) (d0)) ()
                        (not (eq (sub n k) (d0)))))
                      (eq (suc (sub (sub n k) (d1))) (sub n k)))
                    (sub1can ((sub n k))))))))))
      (ax_mp ((iff (lt (d0) (sub n k)) (not (eq (sub n k) (d0)))) (iff (lt k n) (not (eq (sub n k) (d0)))))
        (ax_mp ((iff (lt k n) (lt (d0) (sub n k))) (im (iff (lt (d0) (sub n k)) (not (eq (sub n k) (d0)))) (iff (lt k n) (not (eq (sub n k) (d0))))))
          (bitr ((lt k n) (lt (d0) (sub n k)) (not (eq (sub n k) (d0)))))
          (subpos (k n)))
        (:conv (iff (lt (d0) (sub n k)) (not (eq (sub n k) (d0))))
          (iff
            (lt (d0) (sub n k))
            (:sym (:unfold ne ((sub n k) (d0)) ()
              (not (eq (sub n k) (d0))))))
          (lt01 ((sub n k)))))))))

(local theorem uptoss ((a nat ()) (b nat ())) ()
  (iff (subset (ns (upto a)) (ns (upto b))) (le a b))
((x nat))
(ibii ((subset (ns (upto a)) (ns (upto b))) (le a b))
  (mpi ((subset (ns (upto a)) (ns (upto b))) (not (lt b b)) (le a b))
    (ltirr (b))
    (con1d ((subset (ns (upto a)) (ns (upto b))) (le a b) (lt b b))
      (syl5bir ((subset (ns (upto a)) (ns (upto b))) (not (le a b)) (lt b a) (lt b b))
        (ltnle (b a))
        (sylib ((subset (ns (upto a)) (ns (upto b))) (im (el b (ns (upto a))) (el b (ns (upto b)))) (im (lt b a) (lt b b)))
          (imeqi ((el b (ns (upto a))) (lt b a) (el b (ns (upto b))) (lt b b))
            (elupto (b a))
            (elupto (b b)))
          (ssel ((ns (upto a)) (ns (upto b)) b))))))
  (:conv (im (le a b) (subset (ns (upto a)) (ns (upto b))))
    (im
      (le a b)
      (:unfold subset ((ns (upto a)) (ns (upto b))) (x)
        (al x (im (el x (ns (upto a))) (el x (ns (upto b)))))))
    (iald (x (le a b) (im (el x (ns (upto a))) (el x (ns (upto b)))))
      (sylibr ((le a b) (im (lt x a) (lt x b)) (im (el x (ns (upto a))) (el x (ns (upto b)))))
        (imeqi ((el x (ns (upto a))) (lt x a) (el x (ns (upto b))) (lt x b))
          (elupto (x a))
          (elupto (x b)))
        (com12 ((lt x a) (le a b) (lt x b))
          (ltletr (x a b))))))))

(local theorem uptoS_ins ((a nat ())) ()
  (eq (upto (suc a)) (ins a (upto a)))
((x nat))
(ax_mp ((eqs (ns (upto (suc a))) (ns (ins a (upto a)))) (eq (upto (suc a)) (ins a (upto a))))
  (axext ((upto (suc a)) (ins a (upto a))))
  (:conv (eqs (ns (upto (suc a))) (ns (ins a (upto a))))
    (:unfold eqs ((ns (upto (suc a))) (ns (ins a (upto a)))) (x)
      (al x (iff (el x (ns (upto (suc a)))) (el x (ns (ins a (upto a)))))))
    (ax_gen (x (iff (el x (ns (upto (suc a)))) (el x (ns (ins a (upto a))))))
      (ax_mp ((iff (el x (ns (ins a (upto a)))) (lt x (suc a))) (iff (el x (ns (upto (suc a)))) (el x (ns (ins a (upto a))))))
        (ax_mp ((iff (el x (ns (upto (suc a)))) (lt x (suc a))) (im (iff (el x (ns (ins a (upto a)))) (lt x (suc a))) (iff (el x (ns (upto (suc a)))) (el x (ns (ins a (upto a)))))))
          (bitr4 ((el x (ns (upto (suc a)))) (lt x (suc a)) (el x (ns (ins a (upto a))))))
          (elupto (x (suc a))))
        (ax_mp ((iff (lt x (suc a)) (or (eq x a) (el x (ns (upto a))))) (iff (el x (ns (ins a (upto a)))) (lt x (suc a))))
          (ax_mp ((iff (el x (ns (ins a (upto a)))) (or (eq x a) (el x (ns (upto a))))) (im (iff (lt x (suc a)) (or (eq x a) (el x (ns (upto a))))) (iff (el x (ns (ins a (upto a)))) (lt x (suc a)))))
            (bitr4 ((el x (ns (ins a (upto a)))) (or (eq x a) (el x (ns (upto a)))) (lt x (suc a))))
            (elins (x a (upto a))))
          (ax_mp ((iff (le x a) (or (eq x a) (el x (ns (upto a))))) (iff (lt x (suc a)) (or (eq x a) (el x (ns (upto a))))))
            (ax_mp ((iff (le x a) (lt x (suc a))) (im (iff (le x a) (or (eq x a) (el x (ns (upto a))))) (iff (lt x (suc a)) (or (eq x a) (el x (ns (upto a)))))))
              (bitr3 ((lt x (suc a)) (le x a) (or (eq x a) (el x (ns (upto a))))))
              (leltsuc (x a)))
            (ax_mp ((iff (or (eq x a) (el x (ns (upto a)))) (or (lt x a) (eq x a))) (iff (le x a) (or (eq x a) (el x (ns (upto a))))))
              (ax_mp ((iff (le x a) (or (lt x a) (eq x a))) (im (iff (or (eq x a) (el x (ns (upto a)))) (or (lt x a) (eq x a))) (iff (le x a) (or (eq x a) (el x (ns (upto a)))))))
                (bitr4 ((le x a) (or (lt x a) (eq x a)) (or (eq x a) (el x (ns (upto a))))))
                (leloe (x a)))
              (ax_mp ((iff (or (el x (ns (upto a))) (eq x a)) (or (lt x a) (eq x a))) (iff (or (eq x a) (el x (ns (upto a)))) (or (lt x a) (eq x a))))
                (ax_mp ((iff (or (eq x a) (el x (ns (upto a)))) (or (el x (ns (upto a))) (eq x a))) (im (iff (or (el x (ns (upto a))) (eq x a)) (or (lt x a) (eq x a))) (iff (or (eq x a) (el x (ns (upto a)))) (or (lt x a) (eq x a)))))
                  (bitr ((or (eq x a) (el x (ns (upto a)))) (or (el x (ns (upto a))) (eq x a)) (or (lt x a) (eq x a))))
                  (orcomb ((eq x a) (el x (ns (upto a))))))
                (ax_mp ((iff (el x (ns (upto a))) (lt x a)) (iff (or (el x (ns (upto a))) (eq x a)) (or (lt x a) (eq x a))))
                  (oreq1 ((el x (ns (upto a))) (lt x a) (eq x a)))
                  (elupto (x a))))))))))))

(local theorem upto1_sn () ()
  (eq (upto (d1)) (sn (d0)))
()
(ax_mp ((eq (ins (d0) (upto (d0))) (sn (d0))) (eq (upto (d1)) (sn (d0))))
  (ax_mp ((eq (upto (d1)) (ins (d0) (upto (d0)))) (im (eq (ins (d0) (upto (d0))) (sn (d0))) (eq (upto (d1)) (sn (d0)))))
    (eqtr ((upto (d1)) (ins (d0) (upto (d0))) (sn (d0))))
    (:conv (eq (upto (d1)) (ins (d0) (upto (d0))))
      (eq
        (upto
          (:unfold d1 () ()
            (suc (d0))))
        (ins (d0) (upto (d0))))
      (uptoS_ins ((d0)))))
  (ax_mp ((eq (ins (d0) (d0)) (sn (d0))) (eq (ins (d0) (upto (d0))) (sn (d0))))
    (ax_mp ((eq (ins (d0) (upto (d0))) (ins (d0) (d0))) (im (eq (ins (d0) (d0)) (sn (d0))) (eq (ins (d0) (upto (d0))) (sn (d0)))))
      (eqtr ((ins (d0) (upto (d0))) (ins (d0) (d0)) (sn (d0))))
      (ax_mp ((eq (upto (d0)) (d0)) (eq (ins (d0) (upto (d0))) (ins (d0) (d0))))
        (inseq2 ((d0) (upto (d0)) (d0)))
        (upto0 ())))
    (ins02 ((d0))))))

(local theorem leupto ((a nat ()) (b nat ())) ()
  (iff (le a b) (le (upto a) (upto b)))
()
(ax_mp ((iff (le (upto a) (upto b)) (le (pow (d2) a) (pow (d2) b))) (iff (le a b) (le (upto a) (upto b))))
  (ax_mp ((iff (le a b) (le (pow (d2) a) (pow (d2) b))) (im (iff (le (upto a) (upto b)) (le (pow (d2) a) (pow (d2) b))) (iff (le a b) (le (upto a) (upto b)))))
    (bitr4 ((le a b) (le (pow (d2) a) (pow (d2) b)) (le (upto a) (upto b))))
    (ax_mp ((lt (d1) (d2)) (iff (le a b) (le (pow (d2) a) (pow (d2) b))))
      (lepow2 ((d2) a b))
      (d1lt2 ())))
  (ax_mp ((iff (le (add (upto a) (d1)) (add (upto b) (d1))) (le (pow (d2) a) (pow (d2) b))) (iff (le (upto a) (upto b)) (le (pow (d2) a) (pow (d2) b))))
    (ax_mp ((iff (le (upto a) (upto b)) (le (add (upto a) (d1)) (add (upto b) (d1)))) (im (iff (le (add (upto a) (d1)) (add (upto b) (d1))) (le (pow (d2) a) (pow (d2) b))) (iff (le (upto a) (upto b)) (le (pow (d2) a) (pow (d2) b)))))
      (bitr ((le (upto a) (upto b)) (le (add (upto a) (d1)) (add (upto b) (d1))) (le (pow (d2) a) (pow (d2) b))))
      (leadd1 ((upto a) (upto b) (d1))))
    (ax_mp ((eq (add (upto b) (d1)) (pow (d2) b)) (iff (le (add (upto a) (d1)) (add (upto b) (d1))) (le (pow (d2) a) (pow (d2) b))))
      (ax_mp ((eq (add (upto a) (d1)) (pow (d2) a)) (im (eq (add (upto b) (d1)) (pow (d2) b)) (iff (le (add (upto a) (d1)) (add (upto b) (d1))) (le (pow (d2) a) (pow (d2) b)))))
        (leeq ((add (upto a) (d1)) (pow (d2) a) (add (upto b) (d1)) (pow (d2) b)))
        (uptoadd1 (a)))
      (uptoadd1 (b))))))

(local theorem dffin2 ((A set ()) (n nat)) ()
  (iff (finite A) (ex n (subset A (ns (upto n)))))
((x nat))
(:conv (iff (finite A) (ex n (subset A (ns (upto n)))))
  (iff
    (:unfold finite (A) (n x)
      (ex n (al x (im (el x A) (lt x n)))))
    (ex n (subset A (ns (upto n)))))
  (exeqi (n (al x (im (el x A) (lt x n))) (subset A (ns (upto n))))
    (:conv (iff (al x (im (el x A) (lt x n))) (subset A (ns (upto n))))
      (iff
        (al x (im (el x A) (lt x n)))
        (:unfold subset (A (ns (upto n))) (x)
          (al x (im (el x A) (el x (ns (upto n)))))))
      (aleqi (x (im (el x A) (lt x n)) (im (el x A) (el x (ns (upto n)))))
        (imeq2i ((el x A) (lt x n) (el x (ns (upto n))))
          (ax_mp ((iff (el x (ns (upto n))) (lt x n)) (iff (lt x n) (el x (ns (upto n)))))
            (bicom ((el x (ns (upto n))) (lt x n)))
            (elupto (x n)))))))))

(local def size ((A set ())) (nat ())
((k nat))
(least (ab k (subset A (ns (upto k))))))

(local theorem sizeeqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eq (size _A1) (size _A2)))
((k nat))
(:conv (im _G (eq (size _A1) (size _A2)))
  (im
    _G
    (eq
      (:unfold size (_A1) (k)
        (least (ab k (subset _A1 (ns (upto k))))))
      (:unfold size (_A2) (k)
        (least (ab k (subset _A2 (ns (upto k))))))))
  (leasteqd (_G (ab k (subset _A1 (ns (upto k)))) (ab k (subset _A2 (ns (upto k)))))
    (abeqd (_G k (subset _A1 (ns (upto k))) (subset _A2 (ns (upto k))))
      (sseqd (_G _A1 _A2 (ns (upto k)) (ns (upto k)))
        _Ah
        (eqsidd (_G (ns (upto k)))))))))

(local theorem sizeeq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eq (size _A1) (size _A2)))
()
(sizeeqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem sssize ((A set ())) ()
  (iff (finite A) (subset A (ns (upto (size A)))))
((k nat) (n nat))
(ax_mp ((iff (ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A))))) (iff (finite A) (subset A (ns (upto (size A))))))
  (ax_mp ((iff (finite A) (ex n (subset A (ns (upto n))))) (im (iff (ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A))))) (iff (finite A) (subset A (ns (upto (size A)))))))
    (bitr ((finite A) (ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A))))))
    (dffin2 (A n)))
  (ibii ((ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A)))))
    (eex (n (subset A (ns (upto n))) (subset A (ns (upto (size A)))))
      (sylbir ((subset A (ns (upto n))) (el n (ab k (subset A (ns (upto k))))) (subset A (ns (upto (size A)))))
        (elabe (k n (subset A (ns (upto k))) (subset A (ns (upto n))))
          (sseq2d ((eq k n) A (ns (upto k)) (ns (upto n)))
            (nseqd ((eq k n) (upto k) (upto n))
              (uptoeq (k n)))))
        (sylib ((el n (ab k (subset A (ns (upto k))))) (el (size A) (ab k (subset A (ns (upto k))))) (subset A (ns (upto (size A)))))
          (elabe (k (size A) (subset A (ns (upto k))) (subset A (ns (upto (size A)))))
            (sseq2d ((eq k (size A)) A (ns (upto k)) (ns (upto (size A))))
              (nseqd ((eq k (size A)) (upto k) (upto (size A)))
                (uptoeq (k (size A))))))
          (:conv (im (el n (ab k (subset A (ns (upto k))))) (el (size A) (ab k (subset A (ns (upto k))))))
            (im
              (el n (ab k (subset A (ns (upto k)))))
              (el
                (:unfold size (A) (k)
                  (least (ab k (subset A (ns (upto k))))))
                (ab k (subset A (ns (upto k))))))
            (leastel ((ab k (subset A (ns (upto k)))) n))))))
    (iexe (n (size A) (subset A (ns (upto n))) (subset A (ns (upto (size A)))))
      (sseq2d ((eq n (size A)) A (ns (upto n)) (ns (upto (size A))))
        (nseqd ((eq n (size A)) (upto n) (upto (size A)))
          (uptoeq (n (size A)))))))))

(local theorem sizess1 ((A set ()) (k nat ())) ()
  (im (subset A (ns (upto k))) (le (size A) k))
((x nat))
(sylbir ((subset A (ns (upto k))) (el k (ab x (subset A (ns (upto x))))) (le (size A) k))
  (elabe (x k (subset A (ns (upto x))) (subset A (ns (upto k))))
    (sseq2d ((eq x k) A (ns (upto x)) (ns (upto k)))
      (nseqd ((eq x k) (upto x) (upto k))
        (uptoeq (x k)))))
  (:conv (im (el k (ab x (subset A (ns (upto x))))) (le (size A) k))
    (im
      (el k (ab x (subset A (ns (upto x)))))
      (le
        (:unfold size (A) (x)
          (least (ab x (subset A (ns (upto x))))))
        k))
    (leastle ((ab x (subset A (ns (upto x)))) k)))))

(local theorem sizess ((A set ()) (k nat ())) ()
  (im (finite A) (iff (subset A (ns (upto k))) (le (size A) k)))
()
(ibid ((finite A) (subset A (ns (upto k))) (le (size A) k))
  (a1i ((finite A) (im (subset A (ns (upto k))) (le (size A) k)))
    (sizess1 (A k)))
  (syl5bir ((finite A) (le (size A) k) (subset (ns (upto (size A))) (ns (upto k))) (subset A (ns (upto k))))
    (uptoss ((size A) k))
    (sylbi ((finite A) (subset A (ns (upto (size A)))) (im (subset (ns (upto (size A))) (ns (upto k))) (subset A (ns (upto k)))))
      (sssize (A))
      (sstr (A (ns (upto (size A))) (ns (upto k))))))))

(local theorem sizeupto ((n nat ())) ()
  (eq (size (ns (upto n))) n)
()
(:let H1 (finns ((upto n)))
(ax_mp ((le n (size (ns (upto n)))) (eq (size (ns (upto n))) n))
  (ax_mp ((le (size (ns (upto n))) n) (im (le n (size (ns (upto n)))) (eq (size (ns (upto n))) n)))
    (leasym ((size (ns (upto n))) n))
    (mpbi ((subset (ns (upto n)) (ns (upto n))) (le (size (ns (upto n))) n))
      (ax_mp ((finite (ns (upto n))) (iff (subset (ns (upto n)) (ns (upto n))) (le (size (ns (upto n))) n)))
        (sizess ((ns (upto n)) n))
        H1)
      (ssid ((ns (upto n))))))
  (mpbi ((subset (ns (upto n)) (ns (upto (size (ns (upto n)))))) (le n (size (ns (upto n)))))
    (uptoss (n (size (ns (upto n)))))
    (mpbi ((finite (ns (upto n))) (subset (ns (upto n)) (ns (upto (size (ns (upto n)))))))
      (sssize ((ns (upto n))))
      H1)))))

(def Bool () (nat ())
()
(ins (d0) (sn (d1))))

(local theorem elBool ((n nat ())) ()
  (iff (el n (ns (Bool))) (bool n))
()
(ax_mp ((iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)) (iff (el n (ns (Bool))) (bool n)))
  (ax_mp ((iff (el n (ns (Bool))) (or (eq n (d0)) (el n (ns (sn (d1)))))) (im (iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)) (iff (el n (ns (Bool))) (bool n))))
    (bitr ((el n (ns (Bool))) (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)))
    (:conv (iff (el n (ns (Bool))) (or (eq n (d0)) (el n (ns (sn (d1))))))
      (iff
        (el
          n
          (ns
            (:unfold Bool () ()
              (ins (d0) (sn (d1))))))
        (or (eq n (d0)) (el n (ns (sn (d1))))))
      (elins (n (d0) (sn (d1))))))
  (ax_mp ((iff (bool n) (or (eq n (d0)) (eq n (d1)))) (iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)))
    (ax_mp ((iff (or (eq n (d0)) (el n (ns (sn (d1))))) (or (eq n (d0)) (eq n (d1)))) (im (iff (bool n) (or (eq n (d0)) (eq n (d1)))) (iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n))))
      (bitr4 ((or (eq n (d0)) (el n (ns (sn (d1))))) (or (eq n (d0)) (eq n (d1))) (bool n)))
      (oreq2i ((eq n (d0)) (el n (ns (sn (d1)))) (eq n (d1)))
        (elsn (n (d1)))))
    (bool01 (n)))))

(local theorem Bool0 () ()
  (el (d0) (ns (Bool)))
()
(mpbir ((bool (d0)) (el (d0) (ns (Bool))))
  (elBool ((d0)))
  (bool0 ())))

(local theorem Bool1 () ()
  (el (d1) (ns (Bool)))
()
(mpbir ((bool (d1)) (el (d1) (ns (Bool))))
  (elBool ((d1)))
  (bool1 ())))

(local theorem Bool0d ((G wff ())) ()
  (im G (el (d0) (ns (Bool))))
()
(a1i (G (el (d0) (ns (Bool))))
  (Bool0 ())))

(local theorem Bool1d ((G wff ())) ()
  (im G (el (d1) (ns (Bool))))
()
(a1i (G (el (d1) (ns (Bool))))
  (Bool1 ())))

(local theorem boolfin () ()
  (finite (ns (Bool)))
((n nat))
(mpbir ((finite (ab n (bool n))) (finite (ns (Bool))))
  (ax_mp ((eqs (ns (Bool)) (ab n (bool n))) (iff (finite (ns (Bool))) (finite (ab n (bool n)))))
    (fineq ((ns (Bool)) (ab n (bool n))))
    (eqab2i ((ns (Bool)) n (bool n))
      (elBool (n))))
  (:conv (finite (ab n (bool n)))
    (finite
      (ab
        n
        (:unfold bool (n) ()
          (lt n (d2)))))
    (ltfin ((d2) n)))))

(def Option ((A set ())) (set ())
((n nat))
(ab n (or (eq n (d0)) (el (sub n (d1)) A))))

(local theorem Optioneqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Option _A1) (Option _A2)))
((n nat))
(:conv (im _G (eqs (Option _A1) (Option _A2)))
  (im
    _G
    (eqs
      (:unfold Option (_A1) (n)
        (ab n (or (eq n (d0)) (el (sub n (d1)) _A1))))
      (:unfold Option (_A2) (n)
        (ab n (or (eq n (d0)) (el (sub n (d1)) _A2))))))
  (abeqd (_G n (or (eq n (d0)) (el (sub n (d1)) _A1)) (or (eq n (d0)) (el (sub n (d1)) _A2)))
    (oreqd (_G (eq n (d0)) (eq n (d0)) (el (sub n (d1)) _A1) (el (sub n (d1)) _A2))
      (biidd (_G (eq n (d0))))
      (eleqd (_G (sub n (d1)) (sub n (d1)) _A1 _A2)
        (eqidd (_G (sub n (d1))))
        _Ah)))))

(local theorem Optioneq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Option _A1) (Option _A2)))
()
(Optioneqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem elopt ((A set ()) (a nat ())) ()
  (iff (el a (Option A)) (or (eq a (d0)) (el (sub a (d1)) A)))
((n nat))
(:conv (iff (el a (Option A)) (or (eq a (d0)) (el (sub a (d1)) A)))
  (iff
    (el
      a
      (:unfold Option (A) (n)
        (ab n (or (eq n (d0)) (el (sub n (d1)) A)))))
    (or (eq a (d0)) (el (sub a (d1)) A)))
  (elabe (n a (or (eq n (d0)) (el (sub n (d1)) A)) (or (eq a (d0)) (el (sub a (d1)) A)))
    (oreqd ((eq n a) (eq n (d0)) (eq a (d0)) (el (sub n (d1)) A) (el (sub a (d1)) A))
      (eqeq1 (n a (d0)))
      (eleq1d (A (eq n a) (sub n (d1)) (sub a (d1)))
        (subeq1 (n a (d1))))))))

(local theorem opt0 ((A set ())) ()
  (el (d0) (Option A))
()
(mpbir ((or (eq (d0) (d0)) (el (sub (d0) (d1)) A)) (el (d0) (Option A)))
  (elopt (A (d0)))
  (ax_mp ((eq (d0) (d0)) (or (eq (d0) (d0)) (el (sub (d0) (d1)) A)))
    (orl ((eq (d0) (d0)) (el (sub (d0) (d1)) A)))
    (eqid ((d0))))))

(local theorem optS ((A set ()) (a nat ())) ()
  (iff (el (suc a) (Option A)) (el a A))
()
(ax_mp ((iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)) (iff (el (suc a) (Option A)) (el a A)))
  (ax_mp ((iff (el (suc a) (Option A)) (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A))) (im (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)) (iff (el (suc a) (Option A)) (el a A))))
    (bitr ((el (suc a) (Option A)) (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)))
    (elopt (A (suc a))))
  (ax_mp ((iff (el (sub (suc a) (d1)) A) (el a A)) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)))
    (ax_mp ((iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el (sub (suc a) (d1)) A)) (im (iff (el (sub (suc a) (d1)) A) (el a A)) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A))))
      (bitr ((or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el (sub (suc a) (d1)) A) (el a A)))
      (ax_mp ((not (eq (suc a) (d0))) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el (sub (suc a) (d1)) A)))
        (bior1 ((eq (suc a) (d0)) (el (sub (suc a) (d1)) A)))
        (:conv (not (eq (suc a) (d0)))
          (:sym (:unfold ne ((suc a) (d0)) ()
            (not (eq (suc a) (d0)))))
          (peano1 (a)))))
    (ax_mp ((eq (sub (suc a) (d1)) a) (iff (el (sub (suc a) (d1)) A) (el a A)))
      (eleq1 (A (sub (suc a) (d1)) a))
      (sucsub1 (a))))))

(local theorem opt0d ((A set ()) (G wff ())) ()
  (im G (el (d0) (Option A)))
()
(a1i (G (el (d0) (Option A)))
  (opt0 (A))))

(local theorem optSd ((A set ()) (G wff ()) (a nat ()))
  ((h (im G (el a A))))
  (im G (el (suc a) (Option A)))
()
(sylibr (G (el a A) (el (suc a) (Option A)))
  (optS (A a))
  h))

(local theorem optss ((A set ()) (B set ())) ()
  (iff (subset (Option A) (Option B)) (subset A B))
((x1 nat) (x2 nat))
(ibii ((subset (Option A) (Option B)) (subset A B))
  (:conv (im (subset (Option A) (Option B)) (subset A B))
    (im
      (subset (Option A) (Option B))
      (:unfold subset (A B) (x1)
        (al x1 (im (el x1 A) (el x1 B)))))
    (iald (x1 (subset (Option A) (Option B)) (im (el x1 A) (el x1 B)))
      (sylib ((subset (Option A) (Option B)) (im (el (suc x1) (Option A)) (el (suc x1) (Option B))) (im (el x1 A) (el x1 B)))
        (imeqi ((el (suc x1) (Option A)) (el x1 A) (el (suc x1) (Option B)) (el x1 B))
          (optS (A x1))
          (optS (B x1)))
        (ssel ((Option A) (Option B) (suc x1))))))
  (:conv (im (subset A B) (subset (Option A) (Option B)))
    (im
      (subset A B)
      (:unfold subset ((Option A) (Option B)) (x2)
        (al x2 (im (el x2 (Option A)) (el x2 (Option B))))))
    (iald (x2 (subset A B) (im (el x2 (Option A)) (el x2 (Option B))))
      (sylibr ((subset A B) (im (or (eq x2 (d0)) (el (sub x2 (d1)) A)) (or (eq x2 (d0)) (el (sub x2 (d1)) B))) (im (el x2 (Option A)) (el x2 (Option B))))
        (imeqi ((el x2 (Option A)) (or (eq x2 (d0)) (el (sub x2 (d1)) A)) (el x2 (Option B)) (or (eq x2 (d0)) (el (sub x2 (d1)) B)))
          (elopt (A x2))
          (elopt (B x2)))
        (orim2d ((subset A B) (eq x2 (d0)) (el (sub x2 (d1)) A) (el (sub x2 (d1)) B))
          (ssel (A B (sub x2 (d1))))))))))

(local theorem optfin ((A set ())) ()
  (im (finite A) (finite (Option A)))
((m nat) (n nat) (x nat) (y nat))
(:let H1 (sub1can (x))
(:let H2 (:conv (im (not (eq x (d0))) (eq (suc (sub x (d1))) x))
  (im
    (:sym (:unfold ne (x (d0)) ()
      (not (eq x (d0)))))
    (eq (suc (sub x (d1))) x))
  H1)
(:let H3 (anwr ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0))) (eq (suc (sub x (d1))) x))
  H2)
(:let H4 (eqcomd ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (suc (sub x (d1))) x)
  H3)
(:conv (im (finite A) (finite (Option A)))
  (im
    (:unfold finite (A) (n y)
      (ex n (al y (im (el y A) (lt y n)))))
    (finite (Option A)))
  (eex (n (al y (im (el y A) (lt y n))) (finite (Option A)))
    (:conv (im (al y (im (el y A) (lt y n))) (finite (Option A)))
      (im
        (al y (im (el y A) (lt y n)))
        (:unfold finite ((Option A)) (m x)
          (ex m (al x (im (el x (Option A)) (lt x m))))))
      (iexde (m (al y (im (el y A) (lt y n))) (suc n) (al x (im (el x (Option A)) (lt x m))))
        (iald (x (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (im (el x (Option A)) (lt x m)))
          (casesda ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (eq x (d0)) (im (el x (Option A)) (lt x m)))
            (a1d ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (eq x (d0))) (lt x m) (el x (Option A)))
              (imp ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (eq x (d0)) (lt x m))
                (syl5ibrcom ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (lt x m) (eq x (d0)) (lt (d0) m))
                  (lteq1 (x (d0) m))
                  (anwr ((al y (im (el y A) (lt y n))) (eq m (suc n)) (lt (d0) m))
                    (mpbiri ((eq m (suc n)) (lt (d0) (suc n)) (lt (d0) m))
                      (lt01S (n))
                      (lteq2 ((d0) m (suc n))))))))
            (mpbird ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (im (el (suc (sub x (d1))) (Option A)) (lt (suc (sub x (d1))) (suc n))) (im (el x (Option A)) (lt x m)))
              (imeqd ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (el x (Option A)) (el (suc (sub x (d1))) (Option A)) (lt x m) (lt (suc (sub x (d1))) (suc n)))
                (eleq1d ((Option A) (an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) x (suc (sub x (d1))))
                  H4)
                (lteqd ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) x (suc (sub x (d1))) m (suc n))
                  H4
                  (anlr ((al y (im (el y A) (lt y n))) (eq m (suc n)) (not (eq x (d0)))))))
              (sylib ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (im (el (sub x (d1)) A) (lt (sub x (d1)) n)) (im (el (suc (sub x (d1))) (Option A)) (lt (suc (sub x (d1))) (suc n))))
                (imeqi ((el (sub x (d1)) A) (el (suc (sub x (d1))) (Option A)) (lt (sub x (d1)) n) (lt (suc (sub x (d1))) (suc n)))
                  (ax_mp ((iff (el (suc (sub x (d1))) (Option A)) (el (sub x (d1)) A)) (iff (el (sub x (d1)) A) (el (suc (sub x (d1))) (Option A))))
                    (bicom ((el (suc (sub x (d1))) (Option A)) (el (sub x (d1)) A)))
                    (optS (A (sub x (d1)))))
                  (ltsuc ((sub x (d1)) n)))
                (anwll ((al y (im (el y A) (lt y n))) (eq m (suc n)) (not (eq x (d0))) (im (el (sub x (d1)) A) (lt (sub x (d1)) n)))
                  (eale (y (sub x (d1)) (im (el y A) (lt y n)) (im (el (sub x (d1)) A) (lt (sub x (d1)) n)))
                    (imeqd ((eq y (sub x (d1))) (el y A) (el (sub x (d1)) A) (lt y n) (lt (sub x (d1)) n))
                      (eleq1 (A y (sub x (d1))))
                      (lteq1 (y (sub x (d1)) n))))))))))))))))))

(local theorem optns ((n nat ())) ()
  (eqs (Option (ns n)) (ns (b1 n)))
((x nat))
(:conv (eqs (Option (ns n)) (ns (b1 n)))
  (:unfold eqs ((Option (ns n)) (ns (b1 n))) (x)
    (al x (iff (el x (Option (ns n))) (el x (ns (b1 n))))))
  (ax_gen (x (iff (el x (Option (ns n))) (el x (ns (b1 n)))))
    (ax_mp ((iff (el x (ns (b1 n))) (or (eq x (d0)) (el (sub x (d1)) (ns n)))) (iff (el x (Option (ns n))) (el x (ns (b1 n)))))
      (ax_mp ((iff (el x (Option (ns n))) (or (eq x (d0)) (el (sub x (d1)) (ns n)))) (im (iff (el x (ns (b1 n))) (or (eq x (d0)) (el (sub x (d1)) (ns n)))) (iff (el x (Option (ns n))) (el x (ns (b1 n))))))
        (bitr4 ((el x (Option (ns n))) (or (eq x (d0)) (el (sub x (d1)) (ns n))) (el x (ns (b1 n)))))
        (elopt ((ns n) x)))
      (elb1 (x n))))))

(local theorem optupto ((n nat ())) ()
  (eqs (Option (ns (upto n))) (ns (upto (suc n))))
()
(ax_mp ((eqs (ns (upto (suc n))) (ns (b1 (upto n)))) (eqs (Option (ns (upto n))) (ns (upto (suc n)))))
  (ax_mp ((eqs (Option (ns (upto n))) (ns (b1 (upto n)))) (im (eqs (ns (upto (suc n))) (ns (b1 (upto n)))) (eqs (Option (ns (upto n))) (ns (upto (suc n))))))
    (eqstr4 ((Option (ns (upto n))) (ns (b1 (upto n))) (ns (upto (suc n)))))
    (optns ((upto n))))
  (ax_mp ((eq (upto (suc n)) (b1 (upto n))) (eqs (ns (upto (suc n))) (ns (b1 (upto n)))))
    (nseq ((upto (suc n)) (b1 (upto n))))
    (uptoS (n)))))

(def Power ((A set ())) (set ())
((x nat))
(ab x (subset (ns x) A)))

(local theorem Powereqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (Power _A1) (Power _A2)))
((x nat))
(:conv (im _G (eqs (Power _A1) (Power _A2)))
  (im
    _G
    (eqs
      (:unfold Power (_A1) (x)
        (ab x (subset (ns x) _A1)))
      (:unfold Power (_A2) (x)
        (ab x (subset (ns x) _A2)))))
  (abeqd (_G x (subset (ns x) _A1) (subset (ns x) _A2))
    (sseqd (_G (ns x) (ns x) _A1 _A2)
      (eqsidd (_G (ns x)))
      _Ah))))

(local theorem Powereq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (Power _A1) (Power _A2)))
()
(Powereqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem elPower ((A set ()) (a nat ())) ()
  (iff (el a (Power A)) (subset (ns a) A))
((x nat))
(:conv (iff (el a (Power A)) (subset (ns a) A))
  (iff
    (el
      a
      (:unfold Power (A) (x)
        (ab x (subset (ns x) A))))
    (subset (ns a) A))
  (elabe (x a (subset (ns x) A) (subset (ns a) A))
    (sseq1d ((eq x a) (ns x) (ns a) A)
      (nseq (x a))))))

(local theorem powerfin ((A set ())) ()
  (im (finite A) (finite (Power A)))
((a nat) (n nat) (x nat))
(sylbi ((finite A) (ex n (subset A (ns (upto n)))) (finite (Power A)))
  (dffin2 (A n))
  (eex (n (subset A (ns (upto n))) (finite (Power A)))
    (syl ((subset A (ns (upto n))) (al a (im (el a (Power A)) (lt a (suc (upto n))))) (finite (Power A)))
      (:conv (im (al a (im (el a (Power A)) (lt a (suc (upto n))))) (finite (Power A)))
        (im
          (al a (im (el a (Power A)) (lt a (suc (upto n)))))
          (:unfold finite ((Power A)) (x a)
            (ex x (al a (im (el a (Power A)) (lt a x))))))
        (iexe (x (suc (upto n)) (al a (im (el a (Power A)) (lt a x))) (al a (im (el a (Power A)) (lt a (suc (upto n))))))
          (aleqd ((eq x (suc (upto n))) a (im (el a (Power A)) (lt a x)) (im (el a (Power A)) (lt a (suc (upto n)))))
            (imeq2d ((eq x (suc (upto n))) (el a (Power A)) (lt a x) (lt a (suc (upto n))))
              (lteq2 (a x (suc (upto n))))))))
      (iald (a (subset A (ns (upto n))) (im (el a (Power A)) (lt a (suc (upto n)))))
        (syl5bi ((subset A (ns (upto n))) (el a (Power A)) (subset (ns a) A) (lt a (suc (upto n))))
          (elPower (A a))
          (com12 ((subset (ns a) A) (subset A (ns (upto n))) (lt a (suc (upto n))))
            (syl6 ((subset (ns a) A) (subset A (ns (upto n))) (subset (ns a) (ns (upto n))) (lt a (suc (upto n))))
              (sylib ((subset (ns a) (ns (upto n))) (le a (upto n)) (lt a (suc (upto n))))
                (leltsuc (a (upto n)))
                (ssle (a (upto n))))
              (sstr ((ns a) A (ns (upto n))))))))))))

(def power ((a nat ())) (nat ())
()
(lower (Power (ns a))))

(local theorem powereqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()))
  ((_ah (im _G (eq _a1 _a2))))
  (im _G (eq (power _a1) (power _a2)))
()
(:conv (im _G (eq (power _a1) (power _a2)))
  (im
    _G
    (eq
      (:unfold power (_a1) ()
        (lower (Power (ns _a1))))
      (:unfold power (_a2) ()
        (lower (Power (ns _a2))))))
  (lowereqd (_G (Power (ns _a1)) (Power (ns _a2)))
    (Powereqd (_G (ns _a1) (ns _a2))
      (nseqd (_G _a1 _a2)
        _ah)))))

(local theorem powereq ((_a1 nat ()) (_a2 nat ())) ()
  (im (eq _a1 _a2) (eq (power _a1) (power _a2)))
()
(powereqd ((eq _a1 _a2) _a1 _a2)
  (id ((eq _a1 _a2)))))

(local theorem elpower ((a nat ()) (b nat ())) ()
  (iff (el a (ns (power b))) (subset (ns a) (ns b)))
()
(ax_mp ((iff (el a (Power (ns b))) (subset (ns a) (ns b))) (iff (el a (ns (power b))) (subset (ns a) (ns b))))
  (ax_mp ((iff (el a (ns (power b))) (el a (Power (ns b)))) (im (iff (el a (Power (ns b))) (subset (ns a) (ns b))) (iff (el a (ns (power b))) (subset (ns a) (ns b)))))
    (bitr ((el a (ns (power b))) (el a (Power (ns b))) (subset (ns a) (ns b))))
    (ax_mp ((finite (Power (ns b))) (iff (el a (ns (power b))) (el a (Power (ns b)))))
      (:conv (im (finite (Power (ns b))) (iff (el a (ns (power b))) (el a (Power (ns b)))))
        (im
          (finite (Power (ns b)))
          (iff
            (el
              a
              (ns
                (:unfold power (b) ()
                  (lower (Power (ns b))))))
            (el a (Power (ns b)))))
        (ellower ((Power (ns b)) a)))
      (ax_mp ((finite (ns b)) (finite (Power (ns b))))
        (powerfin ((ns b)))
        (finns (b)))))
  (elPower ((ns b) a))))

(local theorem powerupto ((a nat ())) ()
  (eq (power (upto a)) (upto (pow (d2) a)))
((x nat) (y nat))
(ax_mp ((eqs (ns (power (upto a))) (ns (upto (pow (d2) a)))) (eq (power (upto a)) (upto (pow (d2) a))))
  (axext ((power (upto a)) (upto (pow (d2) a))))
  (:conv (eqs (ns (power (upto a))) (ns (upto (pow (d2) a))))
    (:unfold eqs ((ns (power (upto a))) (ns (upto (pow (d2) a)))) (x)
      (al x (iff (el x (ns (power (upto a)))) (el x (ns (upto (pow (d2) a)))))))
    (ax_gen (x (iff (el x (ns (power (upto a)))) (el x (ns (upto (pow (d2) a))))))
      (ax_mp ((iff (el x (ns (upto (pow (d2) a)))) (subset (ns x) (ns (upto a)))) (iff (el x (ns (power (upto a)))) (el x (ns (upto (pow (d2) a))))))
        (ax_mp ((iff (el x (ns (power (upto a)))) (subset (ns x) (ns (upto a)))) (im (iff (el x (ns (upto (pow (d2) a)))) (subset (ns x) (ns (upto a)))) (iff (el x (ns (power (upto a)))) (el x (ns (upto (pow (d2) a)))))))
          (bitr4 ((el x (ns (power (upto a)))) (subset (ns x) (ns (upto a))) (el x (ns (upto (pow (d2) a))))))
          (elpower (x (upto a))))
        (ax_mp ((iff (subset (ns x) (ns (upto a))) (lt x (pow (d2) a))) (iff (el x (ns (upto (pow (d2) a)))) (subset (ns x) (ns (upto a)))))
          (ax_mp ((iff (el x (ns (upto (pow (d2) a)))) (lt x (pow (d2) a))) (im (iff (subset (ns x) (ns (upto a))) (lt x (pow (d2) a))) (iff (el x (ns (upto (pow (d2) a)))) (subset (ns x) (ns (upto a))))))
            (bitr4 ((el x (ns (upto (pow (d2) a)))) (lt x (pow (d2) a)) (subset (ns x) (ns (upto a)))))
            (elupto (x (pow (d2) a))))
          (ibii ((subset (ns x) (ns (upto a))) (lt x (pow (d2) a)))
            (sylib ((subset (ns x) (ns (upto a))) (lt x (suc (upto a))) (lt x (pow (d2) a)))
              (ax_mp ((eq (suc (upto a)) (pow (d2) a)) (iff (lt x (suc (upto a))) (lt x (pow (d2) a))))
                (lteq2 (x (suc (upto a)) (pow (d2) a)))
                (sucupto (a)))
              (sylib ((subset (ns x) (ns (upto a))) (le x (upto a)) (lt x (suc (upto a))))
                (leltsuc (x (upto a)))
                (ssle (x (upto a)))))
            (sylbir ((lt x (pow (d2) a)) (eq (shr x a) (d0)) (subset (ns x) (ns (upto a))))
              (shreq0 (x a))
              (:conv (im (eq (shr x a) (d0)) (subset (ns x) (ns (upto a))))
                (im
                  (eq (shr x a) (d0))
                  (:unfold subset ((ns x) (ns (upto a))) (y)
                    (al y (im (el y (ns x)) (el y (ns (upto a)))))))
                (iald (y (eq (shr x a) (d0)) (im (el y (ns x)) (el y (ns (upto a)))))
                  (exp ((eq (shr x a) (d0)) (el y (ns x)) (el y (ns (upto a))))
                    (sylibr ((an (eq (shr x a) (d0)) (el y (ns x))) (lt y a) (el y (ns (upto a))))
                      (elupto (y a))
                      (mpi ((an (eq (shr x a) (d0)) (el y (ns x))) (not (el (sub y a) (ns (d0)))) (lt y a))
                        (el02 ((sub y a)))
                        (con1d ((an (eq (shr x a) (d0)) (el y (ns x))) (lt y a) (el (sub y a) (ns (d0))))
                          (exp ((an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a)) (el (sub y a) (ns (d0))))
                            (mpbid ((an (an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a))) (el (sub y a) (ns (shr x a))) (el (sub y a) (ns (d0))))
                              (elneq2d ((an (an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a))) (sub y a) (shr x a) (d0))
                                (anll ((eq (shr x a) (d0)) (el y (ns x)) (not (lt y a)))))
                              (sylibr ((an (an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a))) (el (add (sub y a) a) (ns x)) (el (sub y a) (ns (shr x a))))
                                (elshr ((sub y a) x a))
                                (mpbird ((an (an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a))) (el y (ns x)) (el (add (sub y a) a) (ns x)))
                                  (eleq1d ((ns x) (an (an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a))) (add (sub y a) a) y)
                                    (syl ((an (an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a))) (le a y) (eq (add (sub y a) a) y))
                                      (npcan (y a))
                                      (sylibr ((an (an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a))) (not (lt y a)) (le a y))
                                        (lenlt (a y))
                                        (anr ((an (eq (shr x a) (d0)) (el y (ns x))) (not (lt y a)))))))
                                  (anlr ((eq (shr x a) (d0)) (el y (ns x)) (not (lt y a))))))))))))))))))))))

(def sUnion ((A set ())) (set ())
((x nat) (y nat))
(ab x (ex y (an (el x (ns y)) (el y A)))))

(local theorem unieqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (sUnion _A1) (sUnion _A2)))
((x nat) (y nat))
(:conv (im _G (eqs (sUnion _A1) (sUnion _A2)))
  (im
    _G
    (eqs
      (:unfold sUnion (_A1) (x y)
        (ab x (ex y (an (el x (ns y)) (el y _A1)))))
      (:unfold sUnion (_A2) (x y)
        (ab x (ex y (an (el x (ns y)) (el y _A2)))))))
  (abeqd (_G x (ex y (an (el x (ns y)) (el y _A1))) (ex y (an (el x (ns y)) (el y _A2))))
    (exeqd (_G y (an (el x (ns y)) (el y _A1)) (an (el x (ns y)) (el y _A2)))
      (aneqd (_G (el x (ns y)) (el x (ns y)) (el y _A1) (el y _A2))
        (biidd (_G (el x (ns y))))
        (eleqd (_G y y _A1 _A2)
          (eqidd (_G y))
          _Ah))))))

(local theorem unieq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (sUnion _A1) (sUnion _A2)))
()
(unieqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem eluni ((A set ()) (a nat ()) (x nat)) ()
  (iff (el a (sUnion A)) (ex x (an (el a (ns x)) (el x A))))
((y nat))
(:conv (iff (el a (sUnion A)) (ex x (an (el a (ns x)) (el x A))))
  (iff
    (el
      a
      (:unfold sUnion (A) (y x)
        (ab y (ex x (an (el y (ns x)) (el x A))))))
    (ex x (an (el a (ns x)) (el x A))))
  (elabe (y a (ex x (an (el y (ns x)) (el x A))) (ex x (an (el a (ns x)) (el x A))))
    (exeqd ((eq y a) x (an (el y (ns x)) (el x A)) (an (el a (ns x)) (el x A)))
      (aneq1d ((eq y a) (el y (ns x)) (el a (ns x)) (el x A))
        (eleq1 ((ns x) y a)))))))

(local theorem elunii ((A set ()) (a nat ()) (b nat ())) ()
  (im (el a A) (im (el b (ns a)) (el b (sUnion A))))
((x1 nat))
(expcom ((el b (ns a)) (el a A) (el b (sUnion A)))
  (sylibr ((an (el b (ns a)) (el a A)) (ex x1 (an (el b (ns x1)) (el x1 A))) (el b (sUnion A)))
    (eluni (A b x1))
    (iexe (x1 a (an (el b (ns x1)) (el x1 A)) (an (el b (ns a)) (el a A)))
      (aneqd ((eq x1 a) (el b (ns x1)) (el b (ns a)) (el x1 A) (el a A))
        (elneq2 (b x1 a))
        (eleq1 (A x1 a)))))))

(local theorem elssuni ((A set ()) (a nat ())) ()
  (im (el a A) (subset (ns a) (sUnion A)))
((x1 nat))
(:conv (im (el a A) (subset (ns a) (sUnion A)))
  (im
    (el a A)
    (:unfold subset ((ns a) (sUnion A)) (x1)
      (al x1 (im (el x1 (ns a)) (el x1 (sUnion A))))))
  (iald (x1 (el a A) (im (el x1 (ns a)) (el x1 (sUnion A))))
    (elunii (A a x1)))))

(local theorem finuni ((A set ())) ()
  (im (finite A) (finite (sUnion A)))
((x1 nat) (x2 nat) (x3 nat))
(:conv (im (finite A) (finite (sUnion A)))
  (im
    (:unfold finite (A) (x1 x3)
      (ex x1 (al x3 (im (el x3 A) (lt x3 x1)))))
    (:unfold finite ((sUnion A)) (x1 x2)
      (ex x1 (al x2 (im (el x2 (sUnion A)) (lt x2 x1))))))
  (eximi (x1 (al x3 (im (el x3 A) (lt x3 x1))) (al x2 (im (el x2 (sUnion A)) (lt x2 x1))))
    (iald (x2 (al x3 (im (el x3 A) (lt x3 x1))) (im (el x2 (sUnion A)) (lt x2 x1)))
      (syl5bi ((al x3 (im (el x3 A) (lt x3 x1))) (el x2 (sUnion A)) (ex x3 (an (el x2 (ns x3)) (el x3 A))) (lt x2 x1))
        (eluni (A x2 x3))
        (sylibr ((al x3 (im (el x3 A) (lt x3 x1))) (al x3 (im (an (el x2 (ns x3)) (el x3 A)) (lt x2 x1))) (im (ex x3 (an (el x2 (ns x3)) (el x3 A))) (lt x2 x1)))
          (eexb (x3 (an (el x2 (ns x3)) (el x3 A)) (lt x2 x1)))
          (alimi (x3 (im (el x3 A) (lt x3 x1)) (im (an (el x2 (ns x3)) (el x3 A)) (lt x2 x1)))
            (syl5 ((im (el x3 A) (lt x3 x1)) (an (el x2 (ns x3)) (el x3 A)) (an (el x3 A) (el x2 (ns x3))) (lt x2 x1))
              (ancom ((el x2 (ns x3)) (el x3 A)))
              (sylibr ((im (el x3 A) (lt x3 x1)) (im (el x3 A) (im (el x2 (ns x3)) (lt x2 x1))) (im (an (el x3 A) (el x2 (ns x3))) (lt x2 x1)))
                (impexp ((el x3 A) (el x2 (ns x3)) (lt x2 x1)))
                (imim2i ((el x3 A) (lt x3 x1) (im (el x2 (ns x3)) (lt x2 x1)))
                  (com12 ((el x2 (ns x3)) (lt x3 x1) (lt x2 x1))
                    (syl ((el x2 (ns x3)) (lt x2 x3) (im (lt x3 x1) (lt x2 x1)))
                      (lttr (x2 x3 x1))
                      (ellt (x2 x3))))))))))))))

(local theorem xabfin ((A set ()) (G wff ()) (x nat) (B set (x)))
  ((h (im G (finite A)))
   (h2 (im (an G (el x A)) (finite B))))
  (im G (finite (xab x A B)))
((x1 nat) (x2 nat))
(:let H1 (id ((eq x2 x1)))
(sylc (G (subset (xab x A B) (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))) (finite (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))) (finite (xab x A B)))
  (finss ((xab x A B) (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))))
  (mpbird (G (subset (xab x1 A (ns (lower (sbs x1 x B)))) (xab x1 A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))) (subset (xab x A B) (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))))
    (sseqd (G (xab x A B) (xab x1 A (ns (lower (sbs x1 x B)))) (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))) (xab x1 A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))))
      (syl5eqs ((xab x A B) (xab x1 A (sbs x1 x B)) (xab x1 A (ns (lower (sbs x1 x B)))) G)
        (cbvxabs (A x x1 B))
        (xabeq2da (A G x1 (sbs x1 x B) (ns (lower (sbs x1 x B))))
          (sylib ((an G (el x1 A)) (finite (sbs x1 x B)) (eqs (sbs x1 x B) (ns (lower (sbs x1 x B)))))
            (eqlower ((sbs x1 x B)))
            (sbethh (x1 x (im (an G (el x A)) (finite B)) (im (an G (el x1 A)) (finite (sbs x1 x B))))
              (nfim (x (an G (el x1 A)) (finite (sbs x1 x B)))
                (nfv ((an G (el x1 A)) x))
                (nffin (x (sbs x1 x B))
                  (nfsbs1 (x x1 B))))
              h2
              (imeqd ((eq x x1) (an G (el x A)) (an G (el x1 A)) (finite B) (finite (sbs x1 x B)))
                (aneq2d ((eq x x1) G (el x A) (el x1 A))
                  (eleq1 (A x x1)))
                (fineqd ((eq x x1) B (sbs x1 x B))
                  (sbsq (x x1 B))))))))
      (a1i (G (eqs (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))) (xab x1 A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))))
        (ax_mp ((eqs (xab x1 A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))) (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))) (eqs (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))) (xab x1 A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))))
          (eqscom ((xab x1 A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))) (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))))
          (xabconst (A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)) x1)))))
    (xabssd (A G x1 (ns (lower (sbs x1 x B))) (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))
      (syl ((an G (el x1 A)) (el (lower (sbs x1 x B)) (Im (lam x2 (lower (sbs x2 x B))) A)) (subset (ns (lower (sbs x1 x B))) (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))))
        (elssuni ((Im (lam x2 (lower (sbs x2 x B))) A) (lower (sbs x1 x B))))
        (anwr (G (el x1 A) (el (lower (sbs x1 x B)) (Im (lam x2 (lower (sbs x2 x B))) A)))
          (ax_mp ((el (pr x1 (lower (sbs x1 x B))) (lam x2 (lower (sbs x2 x B)))) (im (el x1 A) (el (lower (sbs x1 x B)) (Im (lam x2 (lower (sbs x2 x B))) A))))
            (elimai (A (lam x2 (lower (sbs x2 x B))) x1 (lower (sbs x1 x B))))
            (mpbir ((ex x2 (eq (pr x1 (lower (sbs x1 x B))) (pr x2 (lower (sbs x2 x B))))) (el (pr x1 (lower (sbs x1 x B))) (lam x2 (lower (sbs x2 x B)))))
              (ellam ((pr x1 (lower (sbs x1 x B))) x2 (lower (sbs x2 x B))))
              (ax_mp ((eq (pr x1 (lower (sbs x1 x B))) (pr x1 (lower (sbs x1 x B)))) (ex x2 (eq (pr x1 (lower (sbs x1 x B))) (pr x2 (lower (sbs x2 x B))))))
                (iexe (x2 x1 (eq (pr x1 (lower (sbs x1 x B))) (pr x2 (lower (sbs x2 x B)))) (eq (pr x1 (lower (sbs x1 x B))) (pr x1 (lower (sbs x1 x B)))))
                  (eqeq2d ((eq x2 x1) (pr x1 (lower (sbs x1 x B))) (pr x2 (lower (sbs x2 x B))) (pr x1 (lower (sbs x1 x B))))
                    (preqd ((eq x2 x1) x2 x1 (lower (sbs x2 x B)) (lower (sbs x1 x B)))
                      H1
                      (lowereqd ((eq x2 x1) (sbs x2 x B) (sbs x1 x B))
                        (sbseq1d (x (eq x2 x1) x2 x1 B)
                          H1)))))
                (eqid ((pr x1 (lower (sbs x1 x B))))))))))))
  (sylc (G (finite A) (finite (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))) (finite (Xp A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A)))))
    (xpfin (A (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))))
    h
    (syl (G (finite (Im (lam x2 (lower (sbs x2 x B))) A)) (finite (sUnion (Im (lam x2 (lower (sbs x2 x B))) A))))
      (finuni ((Im (lam x2 (lower (sbs x2 x B))) A)))
      (syl (G (finite A) (finite (Im (lam x2 (lower (sbs x2 x B))) A)))
        (finlamima (A x2 (lower (sbs x2 x B))))
        h))))))

(local theorem sabfin ((A set ()) (G wff ()) (x nat) (y nat) (B set (x)))
  ((h (im G (im (el y B) (el x A))))
   (hA (im G (finite A)))
   (hB (im (an G (el x A)) (finite B))))
  (im G (finite (sab x B)))
()
(mpbird (G (finite (xab x A B)) (finite (sab x B)))
  (fineqd (G (sab x B) (xab x A B))
    (sabxab (A G x y B)
      h))
  (xabfin (A G x B)
    hA
    hB)))

(def cons ((a nat ()) (b nat ())) (nat ())
()
(suc (pr a b)))

(local theorem conseqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eq (cons _a1 _b1) (cons _a2 _b2)))
()
(:conv (im _G (eq (cons _a1 _b1) (cons _a2 _b2)))
  (im
    _G
    (eq
      (:unfold cons (_a1 _b1) ()
        (suc (pr _a1 _b1)))
      (:unfold cons (_a2 _b2) ()
        (suc (pr _a2 _b2)))))
  (suceqd (_G (pr _a1 _b1) (pr _a2 _b2))
    (preqd (_G _a1 _a2 _b1 _b2)
      _ah
      _bh))))

(local theorem conseq ((_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _b1 _b2) (eq (cons _a1 _b1) (cons _a2 _b2))))
()
(exp ((eq _a1 _a2) (eq _b1 _b2) (eq (cons _a1 _b1) (cons _a2 _b2)))
  (conseqd ((an (eq _a1 _a2) (eq _b1 _b2)) _a1 _a2 _b1 _b2)
    (anl ((eq _a1 _a2) (eq _b1 _b2)))
    (anr ((eq _a1 _a2) (eq _b1 _b2))))))

(local theorem conseq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (cons _a1 b) (cons _a2 b)))
()
(conseqd (_G _a1 _a2 b b)
  _h
  (eqidd (_G b))))

(local theorem conseq1 ((_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eq (cons _a1 b) (cons _a2 b)))
()
(conseq1d ((eq _a1 _a2) _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem conseq2d ((_G wff ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eq (cons a _b1) (cons a _b2)))
()
(conseqd (_G a a _b1 _b2)
  (eqidd (_G a))
  _h))

(local theorem conseq2 ((a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eq (cons a _b1) (cons a _b2)))
()
(conseq2d ((eq _b1 _b2) a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem consne0 ((a nat ()) (b nat ())) ()
  (ne (cons a b) (d0))
()
(:conv (ne (cons a b) (d0))
  (ne
    (:unfold cons (a b) ()
      (suc (pr a b)))
    (d0))
  (peano1 ((pr a b)))))

(local theorem ltconsid1 ((a nat ()) (b nat ())) ()
  (lt a (cons a b))
()
(mpbi ((le a (pr a b)) (lt a (cons a b)))
  (:conv (iff (le a (pr a b)) (lt a (cons a b)))
    (iff
      (le a (pr a b))
      (lt
        a
        (:unfold cons (a b) ()
          (suc (pr a b)))))
    (leltsuc (a (pr a b))))
  (leprid1 (a b))))

(local theorem ltconsid2 ((a nat ()) (b nat ())) ()
  (lt b (cons a b))
()
(mpbi ((le b (pr a b)) (lt b (cons a b)))
  (:conv (iff (le b (pr a b)) (lt b (cons a b)))
    (iff
      (le b (pr a b))
      (lt
        b
        (:unfold cons (a b) ()
          (suc (pr a b)))))
    (leltsuc (b (pr a b))))
  (leprid2 (a b))))

(local theorem consfstsnd ((a nat ())) ()
  (im (ne a (d0)) (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a))
()
(syl5eq ((ne a (d0)) (cons (fst (sub a (d1))) (snd (sub a (d1)))) (suc (sub a (d1))) a)
  (ax_mp ((eq (pr (fst (sub a (d1))) (snd (sub a (d1)))) (sub a (d1))) (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) (suc (sub a (d1)))))
    (:conv (im (eq (pr (fst (sub a (d1))) (snd (sub a (d1)))) (sub a (d1))) (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) (suc (sub a (d1)))))
      (im
        (eq (pr (fst (sub a (d1))) (snd (sub a (d1)))) (sub a (d1)))
        (eq
          (:unfold cons ((fst (sub a (d1))) (snd (sub a (d1)))) ()
            (suc (pr (fst (sub a (d1))) (snd (sub a (d1))))))
          (suc (sub a (d1)))))
      (suceq ((pr (fst (sub a (d1))) (snd (sub a (d1)))) (sub a (d1)))))
    (fstsnd ((sub a (d1)))))
  (sub1can (a))))

(local theorem excons ((a nat ()) (x nat) (y nat)) ()
  (iff (ne a (d0)) (ex x (ex y (eq a (cons x y)))))
()
(ibii ((ne a (d0)) (ex x (ex y (eq a (cons x y)))))
  (rsyl ((ne a (d0)) (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (ex x (ex y (eq a (cons x y)))))
    (consfstsnd (a))
    (iexde (x (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (fst (sub a (d1))) (ex y (eq a (cons x y))))
      (iexde (y (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (snd (sub a (d1))) (eq a (cons x y)))
        (eqtr3d ((an (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))) a (cons (fst (sub a (d1))) (snd (sub a (d1)))) (cons x y))
          (anll ((eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1)))) (eq y (snd (sub a (d1))))))
          (eqcomd ((an (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))) (cons x y) (cons (fst (sub a (d1))) (snd (sub a (d1)))))
            (conseqd ((an (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))) x (fst (sub a (d1))) y (snd (sub a (d1))))
              (anlr ((eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1)))) (eq y (snd (sub a (d1))))))
              (anr ((an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))))))))))
  (eex (x (ex y (eq a (cons x y))) (ne a (d0)))
    (eex (y (eq a (cons x y)) (ne a (d0)))
      (mpbiri ((eq a (cons x y)) (ne (cons x y) (d0)) (ne a (d0)))
        (consne0 (x y))
        (neeq1 (a (cons x y) (d0))))))))

(local theorem consinj ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (iff (eq (cons a c) (cons b d)) (an (eq a b) (eq c d)))
()
(ax_mp ((iff (eq (pr a c) (pr b d)) (an (eq a b) (eq c d))) (iff (eq (cons a c) (cons b d)) (an (eq a b) (eq c d))))
  (ax_mp ((iff (eq (cons a c) (cons b d)) (eq (pr a c) (pr b d))) (im (iff (eq (pr a c) (pr b d)) (an (eq a b) (eq c d))) (iff (eq (cons a c) (cons b d)) (an (eq a b) (eq c d)))))
    (bitr ((eq (cons a c) (cons b d)) (eq (pr a c) (pr b d)) (an (eq a b) (eq c d))))
    (:conv (iff (eq (cons a c) (cons b d)) (eq (pr a c) (pr b d)))
      (iff
        (eq
          (:unfold cons (a c) ()
            (suc (pr a c)))
          (:unfold cons (b d) ()
            (suc (pr b d))))
        (eq (pr a c) (pr b d)))
      (peano2 ((pr a c) (pr b d)))))
  (prth (a b c d))))

(local theorem conscan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (cons a c) (cons b c)) (eq a b))
()
(ax_mp ((iff (an (eq a b) (eq c c)) (eq a b)) (iff (eq (cons a c) (cons b c)) (eq a b)))
  (ax_mp ((iff (eq (cons a c) (cons b c)) (an (eq a b) (eq c c))) (im (iff (an (eq a b) (eq c c)) (eq a b)) (iff (eq (cons a c) (cons b c)) (eq a b))))
    (bitr ((eq (cons a c) (cons b c)) (an (eq a b) (eq c c)) (eq a b)))
    (consinj (a b c c)))
  (ax_mp ((eq c c) (iff (an (eq a b) (eq c c)) (eq a b)))
    (bian2 ((eq a b) (eq c c)))
    (eqid (c)))))

(local theorem conscan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (cons a b) (cons a c)) (eq b c))
()
(ax_mp ((iff (an (eq a a) (eq b c)) (eq b c)) (iff (eq (cons a b) (cons a c)) (eq b c)))
  (ax_mp ((iff (eq (cons a b) (cons a c)) (an (eq a a) (eq b c))) (im (iff (an (eq a a) (eq b c)) (eq b c)) (iff (eq (cons a b) (cons a c)) (eq b c))))
    (bitr ((eq (cons a b) (cons a c)) (an (eq a a) (eq b c)) (eq b c)))
    (consinj (a a b c)))
  (ax_mp ((eq a a) (iff (an (eq a a) (eq b c)) (eq b c)))
    (bian1 ((eq a a) (eq b c)))
    (eqid (a)))))

(local theorem consfst ((a nat ()) (b nat ())) ()
  (eq (fst (sub (cons a b) (d1))) a)
()
(ax_mp ((eq (fst (pr a b)) a) (eq (fst (sub (cons a b) (d1))) a))
  (ax_mp ((eq (fst (sub (cons a b) (d1))) (fst (pr a b))) (im (eq (fst (pr a b)) a) (eq (fst (sub (cons a b) (d1))) a)))
    (eqtr ((fst (sub (cons a b) (d1))) (fst (pr a b)) a))
    (ax_mp ((eq (sub (cons a b) (d1)) (pr a b)) (eq (fst (sub (cons a b) (d1))) (fst (pr a b))))
      (fsteq ((sub (cons a b) (d1)) (pr a b)))
      (:conv (eq (sub (cons a b) (d1)) (pr a b))
        (eq
          (sub
            (:unfold cons (a b) ()
              (suc (pr a b)))
            (d1))
          (pr a b))
        (sucsub1 ((pr a b))))))
  (fstpr (a b))))

(local theorem conssnd ((a nat ()) (b nat ())) ()
  (eq (snd (sub (cons a b) (d1))) b)
()
(ax_mp ((eq (snd (pr a b)) b) (eq (snd (sub (cons a b) (d1))) b))
  (ax_mp ((eq (snd (sub (cons a b) (d1))) (snd (pr a b))) (im (eq (snd (pr a b)) b) (eq (snd (sub (cons a b) (d1))) b)))
    (eqtr ((snd (sub (cons a b) (d1))) (snd (pr a b)) b))
    (ax_mp ((eq (sub (cons a b) (d1)) (pr a b)) (eq (snd (sub (cons a b) (d1))) (snd (pr a b))))
      (sndeq ((sub (cons a b) (d1)) (pr a b)))
      (:conv (eq (sub (cons a b) (d1)) (pr a b))
        (eq
          (sub
            (:unfold cons (a b) ()
              (suc (pr a b)))
            (d1))
          (pr a b))
        (sucsub1 ((pr a b))))))
  (sndpr (a b))))

(local theorem lecons1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a b) (le (cons a c) (cons b c)))
()
(ax_mp ((iff (le (pr a c) (pr b c)) (le (cons a c) (cons b c))) (iff (le a b) (le (cons a c) (cons b c))))
  (ax_mp ((iff (le a b) (le (pr a c) (pr b c))) (im (iff (le (pr a c) (pr b c)) (le (cons a c) (cons b c))) (iff (le a b) (le (cons a c) (cons b c)))))
    (bitr ((le a b) (le (pr a c) (pr b c)) (le (cons a c) (cons b c))))
    (lepr1 (a b c)))
  (:conv (iff (le (pr a c) (pr b c)) (le (cons a c) (cons b c)))
    (iff
      (le (pr a c) (pr b c))
      (le
        (:unfold cons (a c) ()
          (suc (pr a c)))
        (:unfold cons (b c) ()
          (suc (pr b c)))))
    (lesuc ((pr a c) (pr b c))))))

(local theorem lecons2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (cons a b) (cons a c)))
()
(ax_mp ((iff (le (pr a b) (pr a c)) (le (cons a b) (cons a c))) (iff (le b c) (le (cons a b) (cons a c))))
  (ax_mp ((iff (le b c) (le (pr a b) (pr a c))) (im (iff (le (pr a b) (pr a c)) (le (cons a b) (cons a c))) (iff (le b c) (le (cons a b) (cons a c)))))
    (bitr ((le b c) (le (pr a b) (pr a c)) (le (cons a b) (cons a c))))
    (lepr2 (a b c)))
  (:conv (iff (le (pr a b) (pr a c)) (le (cons a b) (cons a c)))
    (iff
      (le (pr a b) (pr a c))
      (le
        (:unfold cons (a b) ()
          (suc (pr a b)))
        (:unfold cons (a c) ()
          (suc (pr a c)))))
    (lesuc ((pr a b) (pr a c))))))

(local theorem ltcons1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a b) (lt (cons a c) (cons b c)))
()
(ax_mp ((iff (lt (pr a c) (pr b c)) (lt (cons a c) (cons b c))) (iff (lt a b) (lt (cons a c) (cons b c))))
  (ax_mp ((iff (lt a b) (lt (pr a c) (pr b c))) (im (iff (lt (pr a c) (pr b c)) (lt (cons a c) (cons b c))) (iff (lt a b) (lt (cons a c) (cons b c)))))
    (bitr ((lt a b) (lt (pr a c) (pr b c)) (lt (cons a c) (cons b c))))
    (ltpr1 (a b c)))
  (:conv (iff (lt (pr a c) (pr b c)) (lt (cons a c) (cons b c)))
    (iff
      (lt (pr a c) (pr b c))
      (lt
        (:unfold cons (a c) ()
          (suc (pr a c)))
        (:unfold cons (b c) ()
          (suc (pr b c)))))
    (ltsuc ((pr a c) (pr b c))))))

(local theorem ltcons2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt b c) (lt (cons a b) (cons a c)))
()
(ax_mp ((iff (lt (pr a b) (pr a c)) (lt (cons a b) (cons a c))) (iff (lt b c) (lt (cons a b) (cons a c))))
  (ax_mp ((iff (lt b c) (lt (pr a b) (pr a c))) (im (iff (lt (pr a b) (pr a c)) (lt (cons a b) (cons a c))) (iff (lt b c) (lt (cons a b) (cons a c)))))
    (bitr ((lt b c) (lt (pr a b) (pr a c)) (lt (cons a b) (cons a c))))
    (ltpr2 (a b c)))
  (:conv (iff (lt (pr a b) (pr a c)) (lt (cons a b) (cons a c)))
    (iff
      (lt (pr a b) (pr a c))
      (lt
        (:unfold cons (a b) ()
          (suc (pr a b)))
        (:unfold cons (a c) ()
          (suc (pr a c)))))
    (ltsuc ((pr a b) (pr a c))))))

(def sep ((n nat ()) (A set ())) (nat ())
()
(lower (Inter (ns n) A)))

(local theorem sepeqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (_A1 set ()) (_A2 set ()))
  ((_nh (im _G (eq _n1 _n2)))
   (_Ah (im _G (eqs _A1 _A2))))
  (im _G (eq (sep _n1 _A1) (sep _n2 _A2)))
()
(:conv (im _G (eq (sep _n1 _A1) (sep _n2 _A2)))
  (im
    _G
    (eq
      (:unfold sep (_n1 _A1) ()
        (lower (Inter (ns _n1) _A1)))
      (:unfold sep (_n2 _A2) ()
        (lower (Inter (ns _n2) _A2)))))
  (lowereqd (_G (Inter (ns _n1) _A1) (Inter (ns _n2) _A2))
    (ineqd (_G (ns _n1) (ns _n2) _A1 _A2)
      (nseqd (_G _n1 _n2)
        _nh)
      _Ah))))

(local theorem sepeq ((_n1 nat ()) (_n2 nat ()) (_A1 set ()) (_A2 set ())) ()
  (im (eq _n1 _n2) (im (eqs _A1 _A2) (eq (sep _n1 _A1) (sep _n2 _A2))))
()
(exp ((eq _n1 _n2) (eqs _A1 _A2) (eq (sep _n1 _A1) (sep _n2 _A2)))
  (sepeqd ((an (eq _n1 _n2) (eqs _A1 _A2)) _n1 _n2 _A1 _A2)
    (anl ((eq _n1 _n2) (eqs _A1 _A2)))
    (anr ((eq _n1 _n2) (eqs _A1 _A2))))))

(local theorem sepeq1d ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (A set ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (sep _n1 A) (sep _n2 A)))
()
(sepeqd (_G _n1 _n2 A A)
  _h
  (eqsidd (_G A))))

(local theorem sepeq1 ((_n1 nat ()) (_n2 nat ()) (A set ())) ()
  (im (eq _n1 _n2) (eq (sep _n1 A) (sep _n2 A)))
()
(sepeq1d ((eq _n1 _n2) _n1 _n2 A)
  (id ((eq _n1 _n2)))))

(local theorem sepeq2d ((_G wff ()) (n nat ()) (_A1 set ()) (_A2 set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eq (sep n _A1) (sep n _A2)))
()
(sepeqd (_G n n _A1 _A2)
  (eqidd (_G n))
  _h))

(local theorem sepeq2 ((n nat ()) (_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eq (sep n _A1) (sep n _A2)))
()
(sepeq2d ((eqs _A1 _A2) n _A1 _A2)
  (id ((eqs _A1 _A2)))))

(theorem elsep ((n nat ()) (A set ()) (a nat ())) ()
  (iff (el a (ns (sep n A))) (an (el a (ns n)) (el a A)))
()
(ax_mp ((iff (el a (Inter (ns n) A)) (an (el a (ns n)) (el a A))) (iff (el a (ns (sep n A))) (an (el a (ns n)) (el a A))))
  (ax_mp ((iff (el a (ns (sep n A))) (el a (Inter (ns n) A))) (im (iff (el a (Inter (ns n) A)) (an (el a (ns n)) (el a A))) (iff (el a (ns (sep n A))) (an (el a (ns n)) (el a A)))))
    (bitr ((el a (ns (sep n A))) (el a (Inter (ns n) A)) (an (el a (ns n)) (el a A))))
    (ax_mp ((finite (Inter (ns n) A)) (iff (el a (ns (sep n A))) (el a (Inter (ns n) A))))
      (:conv (im (finite (Inter (ns n) A)) (iff (el a (ns (sep n A))) (el a (Inter (ns n) A))))
        (im
          (finite (Inter (ns n) A))
          (iff
            (el
              a
              (ns
                (:unfold sep (n A) ()
                  (lower (Inter (ns n) A)))))
            (el a (Inter (ns n) A))))
        (ellower ((Inter (ns n) A) a)))
      (ax_mp ((finite (ns n)) (finite (Inter (ns n) A)))
        (ax_mp ((subset (Inter (ns n) A) (ns n)) (im (finite (ns n)) (finite (Inter (ns n) A))))
          (finss ((Inter (ns n) A) (ns n)))
          (inss1 ((ns n) A)))
        (finns (n)))))
  (elin ((ns n) A a))))

(local def func ((F set ()) (A set ()) (B set ())) (wff ())
()
(an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))

(local theorem funceqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (iff (func _F1 _A1 _B1) (func _F2 _A2 _B2)))
()
(:conv (im _G (iff (func _F1 _A1 _B1) (func _F2 _A2 _B2)))
  (im
    _G
    (iff
      (:unfold func (_F1 _A1 _B1) ()
        (an (an (isfun _F1) (eqs (Dom _F1) _A1)) (subset (Ran _F1) _B1)))
      (:unfold func (_F2 _A2 _B2) ()
        (an (an (isfun _F2) (eqs (Dom _F2) _A2)) (subset (Ran _F2) _B2)))))
  (aneqd (_G (an (isfun _F1) (eqs (Dom _F1) _A1)) (an (isfun _F2) (eqs (Dom _F2) _A2)) (subset (Ran _F1) _B1) (subset (Ran _F2) _B2))
    (aneqd (_G (isfun _F1) (isfun _F2) (eqs (Dom _F1) _A1) (eqs (Dom _F2) _A2))
      (isfeqd (_G _F1 _F2)
        _Fh)
      (eqseqd (_G (Dom _F1) (Dom _F2) _A1 _A2)
        (dmeqd (_G _F1 _F2)
          _Fh)
        _Ah))
    (sseqd (_G (Ran _F1) (Ran _F2) _B1 _B2)
      (rneqd (_G _F1 _F2)
        _Fh)
      _Bh))))

(local theorem funceq ((_F1 set ()) (_F2 set ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _F1 _F2) (im (eqs _A1 _A2) (im (eqs _B1 _B2) (iff (func _F1 _A1 _B1) (func _F2 _A2 _B2)))))
()
(exp ((eqs _F1 _F2) (eqs _A1 _A2) (im (eqs _B1 _B2) (iff (func _F1 _A1 _B1) (func _F2 _A2 _B2))))
  (exp ((an (eqs _F1 _F2) (eqs _A1 _A2)) (eqs _B1 _B2) (iff (func _F1 _A1 _B1) (func _F2 _A2 _B2)))
    (funceqd ((an (an (eqs _F1 _F2) (eqs _A1 _A2)) (eqs _B1 _B2)) _F1 _F2 _A1 _A2 _B1 _B2)
      (anwl ((an (eqs _F1 _F2) (eqs _A1 _A2)) (eqs _B1 _B2) (eqs _F1 _F2))
        (anl ((eqs _F1 _F2) (eqs _A1 _A2))))
      (anwl ((an (eqs _F1 _F2) (eqs _A1 _A2)) (eqs _B1 _B2) (eqs _A1 _A2))
        (anr ((eqs _F1 _F2) (eqs _A1 _A2))))
      (anr ((an (eqs _F1 _F2) (eqs _A1 _A2)) (eqs _B1 _B2)))))))

(local theorem funceq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (A set ()) (B set ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (iff (func _F1 A B) (func _F2 A B)))
()
(funceqd (_G _F1 _F2 A A B B)
  _h
  (eqsidd (_G A))
  (eqsidd (_G B))))

(local theorem funceq1 ((_F1 set ()) (_F2 set ()) (A set ()) (B set ())) ()
  (im (eqs _F1 _F2) (iff (func _F1 A B) (func _F2 A B)))
()
(funceq1d ((eqs _F1 _F2) _F1 _F2 A B)
  (id ((eqs _F1 _F2)))))

(local theorem funceq2d ((_G wff ()) (F set ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (iff (func F _A1 B) (func F _A2 B)))
()
(funceqd (_G F F _A1 _A2 B B)
  (eqsidd (_G F))
  _h
  (eqsidd (_G B))))

(local theorem funceq2 ((F set ()) (_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (iff (func F _A1 B) (func F _A2 B)))
()
(funceq2d ((eqs _A1 _A2) F _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem funceq3d ((_G wff ()) (F set ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (iff (func F A _B1) (func F A _B2)))
()
(funceqd (_G F F A A _B1 _B2)
  (eqsidd (_G F))
  (eqsidd (_G A))
  _h))

(local theorem funceq3 ((F set ()) (A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (iff (func F A _B1) (func F A _B2)))
()
(funceq3d ((eqs _B1 _B2) F A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem nffunc ((x nat) (F set (x)) (A set (x)) (B set (x)))
  ((hF (nfs x F))
   (hA (nfs x A))
   (hB (nfs x B)))
  (nf x (func F A B))
()
(:conv (nf x (func F A B))
  (nf
    x
    (:unfold func (F A B) ()
      (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B))))
  (nfan (x (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B))
    (nfan (x (isfun F) (eqs (Dom F) A))
      (nfisf (x F)
        hF)
      (nfeqs (x (Dom F) A)
        (nfdm (x F)
          hF)
        hA))
    (nfss (x (Ran F) B)
      (nfrn (x F)
        hF)
      hB))))

(local theorem funcisf ((A set ()) (B set ()) (F set ())) ()
  (im (func F A B) (isfun F))
()
(:conv (im (func F A B) (isfun F))
  (im
    (:unfold func (F A B) ()
      (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))
    (isfun F))
  (anll ((isfun F) (eqs (Dom F) A) (subset (Ran F) B)))))

(local theorem funcdm ((A set ()) (B set ()) (F set ())) ()
  (im (func F A B) (eqs (Dom F) A))
()
(:conv (im (func F A B) (eqs (Dom F) A))
  (im
    (:unfold func (F A B) ()
      (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))
    (eqs (Dom F) A))
  (anlr ((isfun F) (eqs (Dom F) A) (subset (Ran F) B)))))

(local theorem funcrn ((A set ()) (B set ()) (F set ())) ()
  (im (func F A B) (subset (Ran F) B))
()
(:conv (im (func F A B) (subset (Ran F) B))
  (im
    (:unfold func (F A B) ()
      (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))
    (subset (Ran F) B))
  (anr ((an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))))

(local theorem funcss3 ((A set ()) (B set ()) (C set ()) (F set ())) ()
  (im (subset B C) (im (func F A B) (func F A C)))
()
(:conv (im (subset B C) (im (func F A B) (func F A C)))
  (im
    (subset B C)
    (im
      (:unfold func (F A B) ()
        (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))
      (:unfold func (F A C) ()
        (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) C)))))
  (anim2d ((subset B C) (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B) (subset (Ran F) C))
    (com12 ((subset (Ran F) B) (subset B C) (subset (Ran F) C))
      (sstr ((Ran F) B C))))))

(local theorem funcal ((A set ()) (B set ()) (F set ()) (x nat)) ()
  (iff (func F A B) (an (an (isfun F) (eqs (Dom F) A)) (al x (im (el x A) (el (app F x) B)))))
()
(ax_mp ((im (an (isfun F) (eqs (Dom F) A)) (iff (subset (Ran F) B) (al x (im (el x A) (el (app F x) B))))) (iff (func F A B) (an (an (isfun F) (eqs (Dom F) A)) (al x (im (el x A) (el (app F x) B))))))
  (:conv (im (im (an (isfun F) (eqs (Dom F) A)) (iff (subset (Ran F) B) (al x (im (el x A) (el (app F x) B))))) (iff (func F A B) (an (an (isfun F) (eqs (Dom F) A)) (al x (im (el x A) (el (app F x) B))))))
    (im
      (im (an (isfun F) (eqs (Dom F) A)) (iff (subset (Ran F) B) (al x (im (el x A) (el (app F x) B)))))
      (iff
        (:unfold func (F A B) ()
          (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))
        (an (an (isfun F) (eqs (Dom F) A)) (al x (im (el x A) (el (app F x) B))))))
    (aneq2a ((an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B) (al x (im (el x A) (el (app F x) B))))))
  (bitrd ((an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B) (al x (im (el x (Dom F)) (el (app F x) B))) (al x (im (el x A) (el (app F x) B))))
    (anwl ((isfun F) (eqs (Dom F) A) (iff (subset (Ran F) B) (al x (im (el x (Dom F)) (el (app F x) B)))))
      (isfrnss (B F x)))
    (aleqd ((an (isfun F) (eqs (Dom F) A)) x (im (el x (Dom F)) (el (app F x) B)) (im (el x A) (el (app F x) B)))
      (imeq1d ((an (isfun F) (eqs (Dom F) A)) (el x (Dom F)) (el x A) (el (app F x) B))
        (eleq2d ((Dom F) A (an (isfun F) (eqs (Dom F) A)) x)
          (anr ((isfun F) (eqs (Dom F) A)))))))))

(local theorem funcres ((A set ()) (B set ()) (C set ()) (F set ())) ()
  (im (an (func F A B) (subset C A)) (func (res F C) C B))
()
(:conv (im (an (func F A B) (subset C A)) (func (res F C) C B))
  (im
    (an (func F A B) (subset C A))
    (:unfold func ((res F C) C B) ()
      (an (an (isfun (res F C)) (eqs (Dom (res F C)) C)) (subset (Ran (res F C)) B))))
  (iand ((an (func F A B) (subset C A)) (an (isfun (res F C)) (eqs (Dom (res F C)) C)) (subset (Ran (res F C)) B))
    (iand ((an (func F A B) (subset C A)) (isfun (res F C)) (eqs (Dom (res F C)) C))
      (syl ((an (func F A B) (subset C A)) (isfun F) (isfun (res F C)))
        (resisf (C F))
        (anwl ((func F A B) (subset C A) (isfun F))
          (funcisf (A B F))))
      (syl5eqs ((Dom (res F C)) (Inter (Dom F) C) C (an (func F A B) (subset C A)))
        (dmres (C F))
        (sylib ((an (func F A B) (subset C A)) (subset C (Dom F)) (eqs (Inter (Dom F) C) C))
          (eqin2 (C (Dom F)))
          (imp ((func F A B) (subset C A) (subset C (Dom F)))
            (bi2d ((func F A B) (subset C (Dom F)) (subset C A))
              (sseq2d ((func F A B) C (Dom F) A)
                (funcdm (A B F))))))))
    (syl ((an (func F A B) (subset C A)) (subset (Ran F) B) (subset (Ran (res F C)) B))
      (ax_mp ((subset (Ran (res F C)) (Ran F)) (im (subset (Ran F) B) (subset (Ran (res F C)) B)))
        (sstr ((Ran (res F C)) (Ran F) B))
        (ax_mp ((subset (res F C) F) (subset (Ran (res F C)) (Ran F)))
          (rnss ((res F C) F))
          (resss (F C))))
      (anwl ((func F A B) (subset C A) (subset (Ran F) B))
        (funcrn (A B F)))))))

(local theorem funcssxp ((A set ()) (B set ()) (F set ())) ()
  (im (func F A B) (subset F (Xp A B)))
((x1 nat))
(:conv (im (func F A B) (subset F (Xp A B)))
  (im
    (func F A B)
    (:unfold subset (F (Xp A B)) (x1)
      (al x1 (im (el x1 F) (el x1 (Xp A B))))))
  (ialda (x1 (func F A B) (el x1 F) (el x1 (Xp A B)))
    (sylibr ((an (func F A B) (el x1 F)) (an (el (fst x1) A) (el (snd x1) B)) (el x1 (Xp A B)))
      (elxp (A B x1))
      (iand ((an (func F A B) (el x1 F)) (el (fst x1) A) (el (snd x1) B))
        (mpbid ((an (func F A B) (el x1 F)) (el (fst x1) (Dom F)) (el (fst x1) A))
          (eleq2d ((Dom F) A (an (func F A B) (el x1 F)) (fst x1))
            (:conv (im (an (func F A B) (el x1 F)) (eqs (Dom F) A))
              (im
                (an
                  (:unfold func (F A B) ()
                    (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))
                  (el x1 F))
                (eqs (Dom F) A))
              (anllr ((isfun F) (eqs (Dom F) A) (subset (Ran F) B) (el x1 F)))))
          (anwr ((func F A B) (el x1 F) (el (fst x1) (Dom F)))
            (fsteldm (F x1))))
        (sseld ((Ran F) B (an (func F A B) (el x1 F)) (snd x1))
          (:conv (im (an (func F A B) (el x1 F)) (subset (Ran F) B))
            (im
              (an
                (:unfold func (F A B) ()
                  (an (an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B)))
                (el x1 F))
              (subset (Ran F) B))
            (anlr ((an (isfun F) (eqs (Dom F) A)) (subset (Ran F) B) (el x1 F))))
          (anwr ((func F A B) (el x1 F) (el (snd x1) (Ran F)))
            (sndelrn (F x1)))))))))

(local theorem funcfin ((A set ()) (B set ()) (F set ())) ()
  (im (func F A B) (im (finite A) (im (finite B) (finite F))))
()
(syl5 ((func F A B) (finite A) (im (finite B) (finite (Xp A B))) (im (finite B) (finite F)))
  (xpfin (A B))
  (imim2d ((func F A B) (finite B) (finite (Xp A B)) (finite F))
    (rsyl ((func F A B) (subset F (Xp A B)) (im (finite (Xp A B)) (finite F)))
      (funcssxp (A B F))
      (finss (F (Xp A B)))))))

(local theorem funcT ((A set ()) (B set ()) (F set ()) (x nat ())) ()
  (im (an (func F A B) (el x A)) (el (app F x) B))
()
(sseld ((Ran F) B (an (func F A B) (el x A)) (app F x))
  (anwl ((func F A B) (el x A) (subset (Ran F) B))
    (funcrn (A B F)))
  (sylc ((an (func F A B) (el x A)) (isfun F) (el x (Dom F)) (el (app F x) (Ran F)))
    (appelrn (F x))
    (anwl ((func F A B) (el x A) (isfun F))
      (funcisf (A B F)))
    (imp ((func F A B) (el x A) (el x (Dom F)))
      (bi2d ((func F A B) (el x (Dom F)) (el x A))
        (eleq2d ((Dom F) A (func F A B) x)
          (funcdm (A B F))))))))

(local theorem eqfunc ((A set ()) (B set ()) (C set ()) (F set ()) (G set ()) (x nat)) ()
  (im (an (func F A B) (func G A C)) (iff (eqs F G) (al x (im (el x A) (eq (app F x) (app G x))))))
()
(:let H1 (funcdm (A B F))
(:let H2 (anwl ((func F A B) (func G A C) (eqs (Dom F) A))
  H1)
(bitrd ((an (func F A B) (func G A C)) (eqs F G) (an (eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))) (al x (im (el x A) (eq (app F x) (app G x)))))
  (rsyl ((an (func F A B) (func G A C)) (an (isfun F) (isfun G)) (iff (eqs F G) (an (eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x)))))))
    (ax_mp ((im (func G A C) (isfun G)) (im (an (func F A B) (func G A C)) (an (isfun F) (isfun G))))
      (ax_mp ((im (func F A B) (isfun F)) (im (im (func G A C) (isfun G)) (im (an (func F A B) (func G A C)) (an (isfun F) (isfun G)))))
        (anim ((func F A B) (isfun F) (func G A C) (isfun G)))
        (funcisf (A B F)))
      (funcisf (A C G)))
    (eqisf (F G x)))
  (bitrd ((an (func F A B) (func G A C)) (an (eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))) (al x (im (el x (Dom F)) (eq (app F x) (app G x)))) (al x (im (el x A) (eq (app F x) (app G x)))))
    (syl ((an (func F A B) (func G A C)) (eqs (Dom F) (Dom G)) (iff (an (eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))))
      (bian1 ((eqs (Dom F) (Dom G)) (al x (im (el x (Dom F)) (eq (app F x) (app G x))))))
      (eqstr4d ((Dom F) A (Dom G) (an (func F A B) (func G A C)))
        H2
        (anwr ((func F A B) (func G A C) (eqs (Dom G) A))
          (funcdm (A C G)))))
    (aleqd ((an (func F A B) (func G A C)) x (im (el x (Dom F)) (eq (app F x) (app G x))) (im (el x A) (eq (app F x) (app G x))))
      (imeq1d ((an (func F A B) (func G A C)) (el x (Dom F)) (el x A) (eq (app F x) (app G x)))
        (eleq2d ((Dom F) A (an (func F A B) (func G A C)) x)
          H2))))))))

(local theorem funceq0 ((A set ()) (B set ()) (F set ())) ()
  (im (func F A B) (iff (eqs F (ns (d0))) (eqs A (ns (d0)))))
()
(syl5bbr ((func F A B) (eqs F (ns (d0))) (eqs (Dom F) (ns (d0))) (eqs A (ns (d0))))
  (dmeq0 (F))
  (eqseq1d ((func F A B) (Dom F) A (ns (d0)))
    (funcdm (A B F)))))

(local theorem func02 ((B set ()) (F set ())) ()
  (iff (func F (ns (d0)) B) (eqs F (ns (d0))))
()
(ax_mp ((iff (an (eqs F (ns (d0))) (subset (Ran F) B)) (eqs F (ns (d0)))) (iff (func F (ns (d0)) B) (eqs F (ns (d0)))))
  (ax_mp ((iff (func F (ns (d0)) B) (an (eqs F (ns (d0))) (subset (Ran F) B))) (im (iff (an (eqs F (ns (d0))) (subset (Ran F) B)) (eqs F (ns (d0)))) (iff (func F (ns (d0)) B) (eqs F (ns (d0))))))
    (bitr ((func F (ns (d0)) B) (an (eqs F (ns (d0))) (subset (Ran F) B)) (eqs F (ns (d0)))))
    (:conv (iff (func F (ns (d0)) B) (an (eqs F (ns (d0))) (subset (Ran F) B)))
      (iff
        (:unfold func (F (ns (d0)) B) ()
          (an (an (isfun F) (eqs (Dom F) (ns (d0)))) (subset (Ran F) B)))
        (an (eqs F (ns (d0))) (subset (Ran F) B)))
      (aneq1i ((an (isfun F) (eqs (Dom F) (ns (d0)))) (eqs F (ns (d0))) (subset (Ran F) B))
        (ax_mp ((iff (an (isfun F) (eqs F (ns (d0)))) (eqs F (ns (d0)))) (iff (an (isfun F) (eqs (Dom F) (ns (d0)))) (eqs F (ns (d0)))))
          (ax_mp ((iff (an (isfun F) (eqs (Dom F) (ns (d0)))) (an (isfun F) (eqs F (ns (d0))))) (im (iff (an (isfun F) (eqs F (ns (d0)))) (eqs F (ns (d0)))) (iff (an (isfun F) (eqs (Dom F) (ns (d0)))) (eqs F (ns (d0))))))
            (bitr ((an (isfun F) (eqs (Dom F) (ns (d0)))) (an (isfun F) (eqs F (ns (d0)))) (eqs F (ns (d0)))))
            (aneq2i ((isfun F) (eqs (Dom F) (ns (d0))) (eqs F (ns (d0))))
              (dmeq0 (F))))
          (ax_mp ((im (eqs F (ns (d0))) (isfun F)) (iff (an (isfun F) (eqs F (ns (d0)))) (eqs F (ns (d0)))))
            (bian1a ((isfun F) (eqs F (ns (d0)))))
            (mpbiri ((eqs F (ns (d0))) (isfun (ns (d0))) (isfun F))
              (isf0 ())
              (isfeq (F (ns (d0))))))))))
  (ax_mp ((im (eqs F (ns (d0))) (subset (Ran F) B)) (iff (an (eqs F (ns (d0))) (subset (Ran F) B)) (eqs F (ns (d0)))))
    (bian2a ((eqs F (ns (d0))) (subset (Ran F) B)))
    (mpbiri ((eqs F (ns (d0))) (subset (ns (d0)) B) (subset (Ran F) B))
      (ss01 (B))
      (sylbir ((eqs F (ns (d0))) (eqs (Ran F) (ns (d0))) (iff (subset (Ran F) B) (subset (ns (d0)) B)))
        (rneq0 (F))
        (sseq1 ((Ran F) (ns (d0)) B)))))))

(local theorem func03 ((A set ()) (F set ())) ()
  (iff (func F A (ns (d0))) (an (eqs F (ns (d0))) (eqs A (ns (d0)))))
()
(ax_mp ((iff (an (eqs F (ns (d0))) (func F A (ns (d0)))) (an (eqs F (ns (d0))) (eqs A (ns (d0))))) (iff (func F A (ns (d0))) (an (eqs F (ns (d0))) (eqs A (ns (d0))))))
  (ax_mp ((iff (an (eqs F (ns (d0))) (func F A (ns (d0)))) (func F A (ns (d0)))) (im (iff (an (eqs F (ns (d0))) (func F A (ns (d0)))) (an (eqs F (ns (d0))) (eqs A (ns (d0))))) (iff (func F A (ns (d0))) (an (eqs F (ns (d0))) (eqs A (ns (d0)))))))
    (bitr3 ((func F A (ns (d0))) (an (eqs F (ns (d0))) (func F A (ns (d0)))) (an (eqs F (ns (d0))) (eqs A (ns (d0))))))
    (ax_mp ((im (func F A (ns (d0))) (eqs F (ns (d0)))) (iff (an (eqs F (ns (d0))) (func F A (ns (d0)))) (func F A (ns (d0)))))
      (bian1a ((eqs F (ns (d0))) (func F A (ns (d0)))))
      (sylib ((func F A (ns (d0))) (eqs (Ran F) (ns (d0))) (eqs F (ns (d0))))
        (rneq0 (F))
        (sylib ((func F A (ns (d0))) (subset (Ran F) (ns (d0))) (eqs (Ran F) (ns (d0))))
          (ss02 ((Ran F)))
          (funcrn (A (ns (d0)) F))))))
  (ax_mp ((im (eqs F (ns (d0))) (iff (func F A (ns (d0))) (eqs A (ns (d0))))) (iff (an (eqs F (ns (d0))) (func F A (ns (d0)))) (an (eqs F (ns (d0))) (eqs A (ns (d0))))))
    (aneq2a ((eqs F (ns (d0))) (func F A (ns (d0))) (eqs A (ns (d0)))))
    (syl6bb ((eqs F (ns (d0))) (func F A (ns (d0))) (an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0)))) (eqs A (ns (d0))))
      (ax_mp ((iff (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs A (ns (d0)))) (iff (an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0)))) (eqs A (ns (d0)))))
        (ax_mp ((iff (an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0)))) (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A))) (im (iff (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs A (ns (d0)))) (iff (an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0)))) (eqs A (ns (d0))))))
          (bitr ((an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0)))) (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs A (ns (d0)))))
          (ax_mp ((subset (Ran (ns (d0))) (ns (d0))) (iff (an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0)))) (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A))))
            (bian2 ((an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0)))))
            (ax_mp ((eqs (Ran (ns (d0))) (ns (d0))) (subset (Ran (ns (d0))) (ns (d0))))
              (eqss ((Ran (ns (d0))) (ns (d0))))
              (rn0 ()))))
        (ax_mp ((iff (eqs (Dom (ns (d0))) A) (eqs A (ns (d0)))) (iff (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs A (ns (d0)))))
          (ax_mp ((iff (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs (Dom (ns (d0))) A)) (im (iff (eqs (Dom (ns (d0))) A) (eqs A (ns (d0)))) (iff (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs A (ns (d0))))))
            (bitr ((an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs (Dom (ns (d0))) A) (eqs A (ns (d0)))))
            (ax_mp ((isfun (ns (d0))) (iff (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (eqs (Dom (ns (d0))) A)))
              (bian1 ((isfun (ns (d0))) (eqs (Dom (ns (d0))) A)))
              (isf0 ())))
          (ax_mp ((iff (eqs (ns (d0)) A) (eqs A (ns (d0)))) (iff (eqs (Dom (ns (d0))) A) (eqs A (ns (d0)))))
            (ax_mp ((iff (eqs (Dom (ns (d0))) A) (eqs (ns (d0)) A)) (im (iff (eqs (ns (d0)) A) (eqs A (ns (d0)))) (iff (eqs (Dom (ns (d0))) A) (eqs A (ns (d0))))))
              (bitr ((eqs (Dom (ns (d0))) A) (eqs (ns (d0)) A) (eqs A (ns (d0)))))
              (ax_mp ((eqs (Dom (ns (d0))) (ns (d0))) (iff (eqs (Dom (ns (d0))) A) (eqs (ns (d0)) A)))
                (eqseq1 ((Dom (ns (d0))) (ns (d0)) A))
                (dm0 ())))
            (eqscomb ((ns (d0)) A)))))
      (:conv (im (eqs F (ns (d0))) (iff (func F A (ns (d0))) (an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0))))))
        (im
          (eqs F (ns (d0)))
          (iff
            (func F A (ns (d0)))
            (:sym (:unfold func ((ns (d0)) A (ns (d0))) ()
              (an (an (isfun (ns (d0))) (eqs (Dom (ns (d0))) A)) (subset (Ran (ns (d0))) (ns (d0))))))))
        (funceq1 (F (ns (d0)) A (ns (d0)))))))))

(local theorem unfunc ((A1 set ()) (A2 set ()) (B set ()) (F1 set ()) (F2 set ()) (G wff ()))
  ((h0 (im G (eqs (Inter A1 A2) (ns (d0)))))
   (h1 (im G (func F1 A1 B)))
   (h2 (im G (func F2 A2 B))))
  (im G (func (Union F1 F2) (Union A1 A2) B))
()
(:let H1 (funcdm (A1 B F1))
(:let H2 (syl (G (func F1 A1 B) (eqs (Dom F1) A1))
  H1
  h1)
(:let H3 (funcdm (A2 B F2))
(:let H4 (syl (G (func F2 A2 B) (eqs (Dom F2) A2))
  H3
  h2)
(:conv (im G (func (Union F1 F2) (Union A1 A2) B))
  (im
    G
    (:unfold func ((Union F1 F2) (Union A1 A2) B) ()
      (an (an (isfun (Union F1 F2)) (eqs (Dom (Union F1 F2)) (Union A1 A2))) (subset (Ran (Union F1 F2)) B))))
  (iand (G (an (isfun (Union F1 F2)) (eqs (Dom (Union F1 F2)) (Union A1 A2))) (subset (Ran (Union F1 F2)) B))
    (iand (G (isfun (Union F1 F2)) (eqs (Dom (Union F1 F2)) (Union A1 A2)))
      (mpbird (G (an (isfun F1) (isfun F2)) (isfun (Union F1 F2)))
        (syl (G (eqs (Inter (Dom F1) (Dom F2)) (ns (d0))) (iff (isfun (Union F1 F2)) (an (isfun F1) (isfun F2))))
          (unisf (F1 F2))
          (eqstrd ((Inter (Dom F1) (Dom F2)) (Inter A1 A2) (ns (d0)) G)
            (ineqd (G (Dom F1) A1 (Dom F2) A2)
              H2
              H4)
            h0))
        (iand (G (isfun F1) (isfun F2))
          (syl (G (func F1 A1 B) (isfun F1))
            (funcisf (A1 B F1))
            h1)
          (syl (G (func F2 A2 B) (isfun F2))
            (funcisf (A2 B F2))
            h2)))
      (syl5eqs ((Dom (Union F1 F2)) (Union (Dom F1) (Dom F2)) (Union A1 A2) G)
        (dmun (F1 F2))
        (uneqd (G (Dom F1) A1 (Dom F2) A2)
          H2
          H4)))
    (sylibr (G (subset (Union (Ran F1) (Ran F2)) B) (subset (Ran (Union F1 F2)) B))
      (ax_mp ((eqs (Ran (Union F1 F2)) (Union (Ran F1) (Ran F2))) (iff (subset (Ran (Union F1 F2)) B) (subset (Union (Ran F1) (Ran F2)) B)))
        (sseq1 ((Ran (Union F1 F2)) (Union (Ran F1) (Ran F2)) B))
        (rnun (F1 F2)))
      (sylibr (G (an (subset (Ran F1) B) (subset (Ran F2) B)) (subset (Union (Ran F1) (Ran F2)) B))
        (unss ((Ran F1) (Ran F2) B))
        (iand (G (subset (Ran F1) B) (subset (Ran F2) B))
          (syl (G (func F1 A1 B) (subset (Ran F1) B))
            (funcrn (A1 B F1))
            h1)
          (syl (G (func F2 A2 B) (subset (Ran F2) B))
            (funcrn (A2 B F2))
            h2)))))))))))

(local theorem funcappb ((A set ()) (B set ()) (F set ()) (a nat ()) (b nat ())) ()
  (im (func F A B) (iff (el (pr a b) F) (an (el a A) (eq (app F a) b))))
()
(bitrd ((func F A B) (el (pr a b) F) (an (el a (Dom F)) (eq (app F a) b)) (an (el a A) (eq (app F a) b)))
  (syl ((func F A B) (isfun F) (iff (el (pr a b) F) (an (el a (Dom F)) (eq (app F a) b))))
    (isfappb (F a b))
    (funcisf (A B F)))
  (aneq1d ((func F A B) (el a (Dom F)) (el a A) (eq (app F a) b))
    (eleq2d ((Dom F) A (func F A B) a)
      (funcdm (A B F))))))

(def Arrow ((A set ()) (B set ())) (set ())
((f nat))
(ab f (an (an (isfun (ns f)) (eqs (Dom (ns f)) A)) (subset (Ran (ns f)) B))))

(local theorem Arroweqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_Bh (im _G (eqs _B1 _B2))))
  (im _G (eqs (Arrow _A1 _B1) (Arrow _A2 _B2)))
((f nat))
(:conv (im _G (eqs (Arrow _A1 _B1) (Arrow _A2 _B2)))
  (im
    _G
    (eqs
      (:unfold Arrow (_A1 _B1) (f)
        (ab f (an (an (isfun (ns f)) (eqs (Dom (ns f)) _A1)) (subset (Ran (ns f)) _B1))))
      (:unfold Arrow (_A2 _B2) (f)
        (ab f (an (an (isfun (ns f)) (eqs (Dom (ns f)) _A2)) (subset (Ran (ns f)) _B2))))))
  (abeqd (_G f (an (an (isfun (ns f)) (eqs (Dom (ns f)) _A1)) (subset (Ran (ns f)) _B1)) (an (an (isfun (ns f)) (eqs (Dom (ns f)) _A2)) (subset (Ran (ns f)) _B2)))
    (aneqd (_G (an (isfun (ns f)) (eqs (Dom (ns f)) _A1)) (an (isfun (ns f)) (eqs (Dom (ns f)) _A2)) (subset (Ran (ns f)) _B1) (subset (Ran (ns f)) _B2))
      (aneqd (_G (isfun (ns f)) (isfun (ns f)) (eqs (Dom (ns f)) _A1) (eqs (Dom (ns f)) _A2))
        (biidd (_G (isfun (ns f))))
        (eqseqd (_G (Dom (ns f)) (Dom (ns f)) _A1 _A2)
          (eqsidd (_G (Dom (ns f))))
          _Ah))
      (sseqd (_G (Ran (ns f)) (Ran (ns f)) _B1 _B2)
        (eqsidd (_G (Ran (ns f))))
        _Bh)))))

(local theorem Arroweq ((_A1 set ()) (_A2 set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _A1 _A2) (im (eqs _B1 _B2) (eqs (Arrow _A1 _B1) (Arrow _A2 _B2))))
()
(exp ((eqs _A1 _A2) (eqs _B1 _B2) (eqs (Arrow _A1 _B1) (Arrow _A2 _B2)))
  (Arroweqd ((an (eqs _A1 _A2) (eqs _B1 _B2)) _A1 _A2 _B1 _B2)
    (anl ((eqs _A1 _A2) (eqs _B1 _B2)))
    (anr ((eqs _A1 _A2) (eqs _B1 _B2))))))

(local theorem Arroweq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (B set ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (Arrow _A1 B) (Arrow _A2 B)))
()
(Arroweqd (_G _A1 _A2 B B)
  _h
  (eqsidd (_G B))))

(local theorem Arroweq1 ((_A1 set ()) (_A2 set ()) (B set ())) ()
  (im (eqs _A1 _A2) (eqs (Arrow _A1 B) (Arrow _A2 B)))
()
(Arroweq1d ((eqs _A1 _A2) _A1 _A2 B)
  (id ((eqs _A1 _A2)))))

(local theorem Arroweq2d ((_G wff ()) (A set ()) (_B1 set ()) (_B2 set ()))
  ((_h (im _G (eqs _B1 _B2))))
  (im _G (eqs (Arrow A _B1) (Arrow A _B2)))
()
(Arroweqd (_G A A _B1 _B2)
  (eqsidd (_G A))
  _h))

(local theorem Arroweq2 ((A set ()) (_B1 set ()) (_B2 set ())) ()
  (im (eqs _B1 _B2) (eqs (Arrow A _B1) (Arrow A _B2)))
()
(Arroweq2d ((eqs _B1 _B2) A _B1 _B2)
  (id ((eqs _B1 _B2)))))

(local theorem elArrow ((A set ()) (B set ()) (f nat ())) ()
  (iff (el f (Arrow A B)) (func (ns f) A B))
((_1 nat))
(:let H1 (id ((eq _1 f)))
(:let H2 (nseqd ((eq _1 f) _1 f)
  H1)
(:conv (iff (el f (Arrow A B)) (func (ns f) A B))
  (iff
    (el
      f
      (:unfold Arrow (A B) (_1)
        (ab _1 (an (an (isfun (ns _1)) (eqs (Dom (ns _1)) A)) (subset (Ran (ns _1)) B)))))
    (func (ns f) A B))
  (elabe (_1 f (an (an (isfun (ns _1)) (eqs (Dom (ns _1)) A)) (subset (Ran (ns _1)) B)) (func (ns f) A B))
    (:conv (im (eq _1 f) (iff (an (an (isfun (ns _1)) (eqs (Dom (ns _1)) A)) (subset (Ran (ns _1)) B)) (func (ns f) A B)))
      (im
        (eq _1 f)
        (iff
          (an (an (isfun (ns _1)) (eqs (Dom (ns _1)) A)) (subset (Ran (ns _1)) B))
          (:unfold func ((ns f) A B) ()
            (an (an (isfun (ns f)) (eqs (Dom (ns f)) A)) (subset (Ran (ns f)) B)))))
      (aneqd ((eq _1 f) (an (isfun (ns _1)) (eqs (Dom (ns _1)) A)) (an (isfun (ns f)) (eqs (Dom (ns f)) A)) (subset (Ran (ns _1)) B) (subset (Ran (ns f)) B))
        (aneqd ((eq _1 f) (isfun (ns _1)) (isfun (ns f)) (eqs (Dom (ns _1)) A) (eqs (Dom (ns f)) A))
          (isfeqd ((eq _1 f) (ns _1) (ns f))
            H2)
          (eqseqd ((eq _1 f) (Dom (ns _1)) (Dom (ns f)) A A)
            (dmeqd ((eq _1 f) (ns _1) (ns f))
              H2)
            (eqsidd ((eq _1 f) A))))
        (sseqd ((eq _1 f) (Ran (ns _1)) (Ran (ns f)) B B)
          (rneqd ((eq _1 f) (ns _1) (ns f))
            H2)
          (eqsidd ((eq _1 f) B))))))))))

(local theorem Arrowisf ((A set ()) (B set ()) (f nat ())) ()
  (im (el f (Arrow A B)) (isfun (ns f)))
()
(sylbi ((el f (Arrow A B)) (func (ns f) A B) (isfun (ns f)))
  (elArrow (A B f))
  (funcisf (A B (ns f)))))

(local theorem Arrowdm ((A set ()) (B set ()) (f nat ())) ()
  (im (el f (Arrow A B)) (eqs (Dom (ns f)) A))
()
(sylbi ((el f (Arrow A B)) (func (ns f) A B) (eqs (Dom (ns f)) A))
  (elArrow (A B f))
  (funcdm (A B (ns f)))))

(local theorem Arrowrn ((A set ()) (B set ()) (f nat ())) ()
  (im (el f (Arrow A B)) (subset (Ran (ns f)) B))
()
(sylbi ((el f (Arrow A B)) (func (ns f) A B) (subset (Ran (ns f)) B))
  (elArrow (A B f))
  (funcrn (A B (ns f)))))

(local theorem Arrowssxp ((A set ()) (B set ())) ()
  (subset (Arrow A B) (Power (Xp A B)))
((x1 nat))
(:conv (subset (Arrow A B) (Power (Xp A B)))
  (:unfold subset ((Arrow A B) (Power (Xp A B))) (x1)
    (al x1 (im (el x1 (Arrow A B)) (el x1 (Power (Xp A B))))))
  (ax_gen (x1 (im (el x1 (Arrow A B)) (el x1 (Power (Xp A B)))))
    (sylibr ((el x1 (Arrow A B)) (subset (ns x1) (Xp A B)) (el x1 (Power (Xp A B))))
      (elPower ((Xp A B) x1))
      (sylbi ((el x1 (Arrow A B)) (func (ns x1) A B) (subset (ns x1) (Xp A B)))
        (elArrow (A B x1))
        (funcssxp (A B (ns x1))))))))

(local theorem Arrowfin ((A set ()) (B set ())) ()
  (im (finite A) (im (finite B) (finite (Arrow A B))))
()
(exp ((finite A) (finite B) (finite (Arrow A B)))
  (syl ((an (finite A) (finite B)) (finite (Power (Xp A B))) (finite (Arrow A B)))
    (ax_mp ((subset (Arrow A B) (Power (Xp A B))) (im (finite (Power (Xp A B))) (finite (Arrow A B))))
      (finss ((Arrow A B) (Power (Xp A B))))
      (Arrowssxp (A B)))
    (syl ((an (finite A) (finite B)) (finite (Xp A B)) (finite (Power (Xp A B))))
      (powerfin ((Xp A B)))
      (imp ((finite A) (finite B) (finite (Xp A B)))
        (xpfin (A B)))))))

(local theorem appT ((A set ()) (B set ()) (f nat ()) (x nat ())) ()
  (im (an (el f (Arrow A B)) (el x A)) (el (app (ns f) x) B))
()
(sylbi ((an (el f (Arrow A B)) (el x A)) (an (func (ns f) A B) (el x A)) (el (app (ns f) x) B))
  (aneq1i ((el f (Arrow A B)) (func (ns f) A B) (el x A))
    (elArrow (A B f)))
  (funcT (A B (ns f) x))))

(local theorem Arrow01 ((B set ())) ()
  (eqs (Arrow (ns (d0)) B) (ns (sn (d0))))
((x1 nat))
(:conv (eqs (Arrow (ns (d0)) B) (ns (sn (d0))))
  (:unfold eqs ((Arrow (ns (d0)) B) (ns (sn (d0)))) (x1)
    (al x1 (iff (el x1 (Arrow (ns (d0)) B)) (el x1 (ns (sn (d0)))))))
  (ax_gen (x1 (iff (el x1 (Arrow (ns (d0)) B)) (el x1 (ns (sn (d0))))))
    (ax_mp ((iff (el x1 (ns (sn (d0)))) (func (ns x1) (ns (d0)) B)) (iff (el x1 (Arrow (ns (d0)) B)) (el x1 (ns (sn (d0))))))
      (ax_mp ((iff (el x1 (Arrow (ns (d0)) B)) (func (ns x1) (ns (d0)) B)) (im (iff (el x1 (ns (sn (d0)))) (func (ns x1) (ns (d0)) B)) (iff (el x1 (Arrow (ns (d0)) B)) (el x1 (ns (sn (d0)))))))
        (bitr4 ((el x1 (Arrow (ns (d0)) B)) (func (ns x1) (ns (d0)) B) (el x1 (ns (sn (d0))))))
        (elArrow ((ns (d0)) B x1)))
      (ax_mp ((iff (func (ns x1) (ns (d0)) B) (eq x1 (d0))) (iff (el x1 (ns (sn (d0)))) (func (ns x1) (ns (d0)) B)))
        (ax_mp ((iff (el x1 (ns (sn (d0)))) (eq x1 (d0))) (im (iff (func (ns x1) (ns (d0)) B) (eq x1 (d0))) (iff (el x1 (ns (sn (d0)))) (func (ns x1) (ns (d0)) B))))
          (bitr4 ((el x1 (ns (sn (d0)))) (eq x1 (d0)) (func (ns x1) (ns (d0)) B)))
          (elsn (x1 (d0))))
        (ax_mp ((iff (eqs (ns x1) (ns (d0))) (eq x1 (d0))) (iff (func (ns x1) (ns (d0)) B) (eq x1 (d0))))
          (ax_mp ((iff (func (ns x1) (ns (d0)) B) (eqs (ns x1) (ns (d0)))) (im (iff (eqs (ns x1) (ns (d0))) (eq x1 (d0))) (iff (func (ns x1) (ns (d0)) B) (eq x1 (d0)))))
            (bitr ((func (ns x1) (ns (d0)) B) (eqs (ns x1) (ns (d0))) (eq x1 (d0))))
            (func02 (B (ns x1))))
          (nsinj (x1 (d0)))))))))

(local theorem Arrow02 ((A set ())) ()
  (im (not (eqs A (ns (d0)))) (eqs (Arrow A (ns (d0))) (ns (d0))))
((x1 nat))
(sylibr ((not (eqs A (ns (d0)))) (al x1 (not (el x1 (Arrow A (ns (d0)))))) (eqs (Arrow A (ns (d0))) (ns (d0))))
  (eq0al ((Arrow A (ns (d0))) x1))
  (iald (x1 (not (eqs A (ns (d0)))) (not (el x1 (Arrow A (ns (d0))))))
    (ax_mp ((im (el x1 (Arrow A (ns (d0)))) (eqs A (ns (d0)))) (im (not (eqs A (ns (d0)))) (not (el x1 (Arrow A (ns (d0)))))))
      (con3 ((el x1 (Arrow A (ns (d0)))) (eqs A (ns (d0)))))
      (sylbi ((el x1 (Arrow A (ns (d0)))) (func (ns x1) A (ns (d0))) (eqs A (ns (d0))))
        (elArrow (A (ns (d0)) x1))
        (sylbi ((func (ns x1) A (ns (d0))) (an (eqs (ns x1) (ns (d0))) (eqs A (ns (d0)))) (eqs A (ns (d0))))
          (func03 (A (ns x1)))
          (anr ((eqs (ns x1) (ns (d0))) (eqs A (ns (d0)))))))))))

(def rlam ((x nat) (a nat ()) (v nat (x))) (nat ())
()
(lower (res (lam x v) (ns a))))

(local theorem rlameqd ((_G wff ()) (x nat) (_a1 nat (x)) (_a2 nat (x)) (_v1 nat (x)) (_v2 nat (x)))
  ((_ah (im _G (eq _a1 _a2)))
   (_vh (im _G (eq _v1 _v2))))
  (im _G (eq (rlam x _a1 _v1) (rlam x _a2 _v2)))
()
(:conv (im _G (eq (rlam x _a1 _v1) (rlam x _a2 _v2)))
  (im
    _G
    (eq
      (:unfold rlam (x _a1 _v1) ()
        (lower (res (lam x _v1) (ns _a1))))
      (:unfold rlam (x _a2 _v2) ()
        (lower (res (lam x _v2) (ns _a2))))))
  (lowereqd (_G (res (lam x _v1) (ns _a1)) (res (lam x _v2) (ns _a2)))
    (reseqd (_G (lam x _v1) (lam x _v2) (ns _a1) (ns _a2))
      (lameqd (_G x _v1 _v2)
        _vh)
      (nseqd (_G _a1 _a2)
        _ah)))))

(local theorem rlameq1d ((_G wff ()) (x nat) (_a1 nat (x)) (_a2 nat (x)) (v nat (x)))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (rlam x _a1 v) (rlam x _a2 v)))
()
(rlameqd (_G x _a1 _a2 v v)
  _h
  (eqidd (_G v))))

(local theorem rlameq2d ((_G wff ()) (x nat) (a nat (x)) (_v1 nat (x)) (_v2 nat (x)))
  ((_h (im _G (eq _v1 _v2))))
  (im _G (eq (rlam x a _v1) (rlam x a _v2)))
()
(rlameqd (_G x a a _v1 _v2)
  (eqidd (_G a))
  _h))

(local theorem rlameq1 ((x nat) (a nat (x)) (b nat (x)) (c nat (x))) ()
  (im (eq a b) (eq (rlam x a c) (rlam x b c)))
()
(:conv (im (eq a b) (eq (rlam x a c) (rlam x b c)))
  (im
    (eq a b)
    (eq
      (:unfold rlam (x a c) ()
        (lower (res (lam x c) (ns a))))
      (:unfold rlam (x b c) ()
        (lower (res (lam x c) (ns b))))))
  (lowereqd ((eq a b) (res (lam x c) (ns a)) (res (lam x c) (ns b)))
    (reseq2d ((eq a b) (lam x c) (ns a) (ns b))
      (nseq (a b))))))

(local theorem rlameqs ((x nat) (a nat (x)) (b nat (x))) ()
  (eqs (ns (rlam x a b)) (res (lam x b) (ns a)))
()
(ax_mp ((eqs (res (lam x b) (ns a)) (ns (rlam x a b))) (eqs (ns (rlam x a b)) (res (lam x b) (ns a))))
  (eqscom ((res (lam x b) (ns a)) (ns (rlam x a b))))
  (mpbi ((finite (res (lam x b) (ns a))) (eqs (res (lam x b) (ns a)) (ns (rlam x a b))))
    (:conv (iff (finite (res (lam x b) (ns a))) (eqs (res (lam x b) (ns a)) (ns (rlam x a b))))
      (iff
        (finite (res (lam x b) (ns a)))
        (eqs
          (res (lam x b) (ns a))
          (ns
            (:unfold rlam (x a b) ()
              (lower (res (lam x b) (ns a)))))))
      (eqlower ((res (lam x b) (ns a)))))
    (ax_mp ((finite (ns a)) (finite (res (lam x b) (ns a))))
      (finlamh (x (ns a) b))
      (finns (a))))))

(local theorem elrlam ((p nat ()) (x nat) (a nat ()) (b nat (x))) ()
  (iff (el p (ns (rlam x a b))) (ex x (an (el x (ns a)) (eq p (pr x b)))))
()
(ax_mp ((iff (el p (res (lam x b) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (el p (ns (rlam x a b))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
  (ax_mp ((iff (el p (ns (rlam x a b))) (el p (res (lam x b) (ns a)))) (im (iff (el p (res (lam x b) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (el p (ns (rlam x a b))) (ex x (an (el x (ns a)) (eq p (pr x b)))))))
    (bitr ((el p (ns (rlam x a b))) (el p (res (lam x b) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
    (ax_mp ((finite (res (lam x b) (ns a))) (iff (el p (ns (rlam x a b))) (el p (res (lam x b) (ns a)))))
      (:conv (im (finite (res (lam x b) (ns a))) (iff (el p (ns (rlam x a b))) (el p (res (lam x b) (ns a)))))
        (im
          (finite (res (lam x b) (ns a)))
          (iff
            (el
              p
              (ns
                (:unfold rlam (x a b) ()
                  (lower (res (lam x b) (ns a))))))
            (el p (res (lam x b) (ns a)))))
        (ellower ((res (lam x b) (ns a)) p)))
      (ax_mp ((finite (ns a)) (finite (res (lam x b) (ns a))))
        (finlam ((ns a) x b))
        (finns (a)))))
  (ax_mp ((iff (an (el p (lam x b)) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (el p (res (lam x b) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
    (ax_mp ((iff (el p (res (lam x b) (ns a))) (an (el p (lam x b)) (el (fst p) (ns a)))) (im (iff (an (el p (lam x b)) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (el p (res (lam x b) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b)))))))
      (bitr ((el p (res (lam x b) (ns a))) (an (el p (lam x b)) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
      (elres ((lam x b) (ns a) p)))
    (ax_mp ((iff (an (ex x (eq p (pr x b))) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (an (el p (lam x b)) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
      (ax_mp ((iff (an (el p (lam x b)) (el (fst p) (ns a))) (an (ex x (eq p (pr x b))) (el (fst p) (ns a)))) (im (iff (an (ex x (eq p (pr x b))) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (an (el p (lam x b)) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b)))))))
        (bitr ((an (el p (lam x b)) (el (fst p) (ns a))) (an (ex x (eq p (pr x b))) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
        (aneq1i ((el p (lam x b)) (ex x (eq p (pr x b))) (el (fst p) (ns a)))
          (ellam (p x b))))
      (ax_mp ((iff (ex x (an (eq p (pr x b)) (el (fst p) (ns a)))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (an (ex x (eq p (pr x b))) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
        (ax_mp ((iff (ex x (an (eq p (pr x b)) (el (fst p) (ns a)))) (an (ex x (eq p (pr x b))) (el (fst p) (ns a)))) (im (iff (ex x (an (eq p (pr x b)) (el (fst p) (ns a)))) (ex x (an (el x (ns a)) (eq p (pr x b))))) (iff (an (ex x (eq p (pr x b))) (el (fst p) (ns a))) (ex x (an (el x (ns a)) (eq p (pr x b)))))))
          (bitr3 ((an (ex x (eq p (pr x b))) (el (fst p) (ns a))) (ex x (an (eq p (pr x b)) (el (fst p) (ns a)))) (ex x (an (el x (ns a)) (eq p (pr x b))))))
          (exan2 (x (eq p (pr x b)) (el (fst p) (ns a)))))
        (exeqi (x (an (eq p (pr x b)) (el (fst p) (ns a))) (an (el x (ns a)) (eq p (pr x b))))
          (ax_mp ((iff (an (el (fst p) (ns a)) (eq p (pr x b))) (an (el x (ns a)) (eq p (pr x b)))) (iff (an (eq p (pr x b)) (el (fst p) (ns a))) (an (el x (ns a)) (eq p (pr x b)))))
            (ax_mp ((iff (an (eq p (pr x b)) (el (fst p) (ns a))) (an (el (fst p) (ns a)) (eq p (pr x b)))) (im (iff (an (el (fst p) (ns a)) (eq p (pr x b))) (an (el x (ns a)) (eq p (pr x b)))) (iff (an (eq p (pr x b)) (el (fst p) (ns a))) (an (el x (ns a)) (eq p (pr x b))))))
              (bitr ((an (eq p (pr x b)) (el (fst p) (ns a))) (an (el (fst p) (ns a)) (eq p (pr x b))) (an (el x (ns a)) (eq p (pr x b)))))
              (ancomb ((eq p (pr x b)) (el (fst p) (ns a)))))
            (ax_mp ((im (eq p (pr x b)) (iff (el (fst p) (ns a)) (el x (ns a)))) (iff (an (el (fst p) (ns a)) (eq p (pr x b))) (an (el x (ns a)) (eq p (pr x b)))))
              (aneq1a ((el (fst p) (ns a)) (el x (ns a)) (eq p (pr x b))))
              (eleq1d ((ns a) (eq p (pr x b)) (fst p) x)
                (syl6eq ((eq p (pr x b)) (fst p) (fst (pr x b)) x)
                  (fstpr (x b))
                  (fsteq (p (pr x b)))))))))))))

(local theorem rlameq2a ((a nat ()) (x nat) (v nat (x)) (w nat (x))) ()
  (im (al x (im (el x (ns a)) (eq v w))) (eq (rlam x a v) (rlam x a w)))
((y nat))
(syl ((al x (im (el x (ns a)) (eq v w))) (eqs (ns (rlam x a v)) (ns (rlam x a w))) (eq (rlam x a v) (rlam x a w)))
  (axext ((rlam x a v) (rlam x a w)))
  (:conv (im (al x (im (el x (ns a)) (eq v w))) (eqs (ns (rlam x a v)) (ns (rlam x a w))))
    (im
      (al x (im (el x (ns a)) (eq v w)))
      (:unfold eqs ((ns (rlam x a v)) (ns (rlam x a w))) (y)
        (al y (iff (el y (ns (rlam x a v))) (el y (ns (rlam x a w)))))))
    (iald (y (al x (im (el x (ns a)) (eq v w))) (iff (el y (ns (rlam x a v))) (el y (ns (rlam x a w)))))
      (bitr4g ((al x (im (el x (ns a)) (eq v w))) (ex x (an (el x (ns a)) (eq y (pr x v)))) (ex x (an (el x (ns a)) (eq y (pr x w)))) (el y (ns (rlam x a v))) (el y (ns (rlam x a w))))
        (elrlam (y x a v))
        (elrlam (y x a w))
        (syl ((al x (im (el x (ns a)) (eq v w))) (al x (iff (an (el x (ns a)) (eq y (pr x v))) (an (el x (ns a)) (eq y (pr x w))))) (iff (ex x (an (el x (ns a)) (eq y (pr x v)))) (ex x (an (el x (ns a)) (eq y (pr x w))))))
          (exeq (x (an (el x (ns a)) (eq y (pr x v))) (an (el x (ns a)) (eq y (pr x w)))))
          (alimi (x (im (el x (ns a)) (eq v w)) (iff (an (el x (ns a)) (eq y (pr x v))) (an (el x (ns a)) (eq y (pr x w)))))
            (syl ((im (el x (ns a)) (eq v w)) (im (el x (ns a)) (iff (eq y (pr x v)) (eq y (pr x w)))) (iff (an (el x (ns a)) (eq y (pr x v))) (an (el x (ns a)) (eq y (pr x w)))))
              (aneq2a ((el x (ns a)) (eq y (pr x v)) (eq y (pr x w))))
              (imim2i ((el x (ns a)) (eq v w) (iff (eq y (pr x v)) (eq y (pr x w))))
                (eqeq2d ((eq v w) y (pr x v) (pr x w))
                  (preq2 (x v w))))))))))))

(local theorem rlameq2da ((G wff ()) (a nat ()) (x nat) (v nat (x)) (w nat (x)))
  ((h (im (an G (el x (ns a))) (eq v w))))
  (im G (eq (rlam x a v) (rlam x a w)))
()
(syl (G (al x (im (el x (ns a)) (eq v w))) (eq (rlam x a v) (rlam x a w)))
  (rlameq2a (a x v w))
  (ialda (x G (el x (ns a)) (eq v w))
    h)))

(local theorem nfrlam1 ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a)))
  (nfn x (rlam x a b))
()
(:conv (nfn x (rlam x a b))
  (nfn
    x
    (:unfold rlam (x a b) ()
      (lower (res (lam x b) (ns a)))))
  (nflower (x (res (lam x b) (ns a)))
    (nfres (x (lam x b) (ns a))
      (nflam1 (x b))
      (nfns (x a)
        h1)))))

(local theorem nfrlam ((x nat) (y nat) (a nat (x y)) (b nat (x y)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (rlam y a b))
()
(:conv (nfn x (rlam y a b))
  (nfn
    x
    (:unfold rlam (y a b) ()
      (lower (res (lam y b) (ns a)))))
  (nflower (x (res (lam y b) (ns a)))
    (nfres (x (lam y b) (ns a))
      (nflam (x y b)
        h2)
      (nfns (x a)
        h1)))))

(local theorem cbvrlamh ((x nat) (y nat) (a nat (x y)) (b nat (x y)) (c nat (x y)))
  ((h1 (nfn y b))
   (h2 (nfn x c))
   (e (im (eq x y) (eq b c))))
  (eq (rlam x a b) (rlam y a c))
()
(ax_mp ((eqs (res (lam x b) (ns a)) (res (lam y c) (ns a))) (eq (rlam x a b) (rlam y a c)))
  (:conv (im (eqs (res (lam x b) (ns a)) (res (lam y c) (ns a))) (eq (rlam x a b) (rlam y a c)))
    (im
      (eqs (res (lam x b) (ns a)) (res (lam y c) (ns a)))
      (eq
        (:unfold rlam (x a b) ()
          (lower (res (lam x b) (ns a))))
        (:unfold rlam (y a c) ()
          (lower (res (lam y c) (ns a))))))
    (lowereq ((res (lam x b) (ns a)) (res (lam y c) (ns a)))))
  (ax_mp ((eqs (lam x b) (lam y c)) (eqs (res (lam x b) (ns a)) (res (lam y c) (ns a))))
    (reseq1 ((lam x b) (lam y c) (ns a)))
    (cbvlamh (x y b c)
      h1
      h2
      e))))

(local theorem cbvrlam ((x nat) (y nat) (a nat (x y)) (b nat (x)) (c nat (y)))
  ((e (im (eq x y) (eq b c))))
  (eq (rlam x a b) (rlam y a c))
()
(cbvrlamh (x y a b c)
  (nfnv (b y))
  (nfnv (c x))
  e))

(local theorem cbvrlams ((x nat) (y nat) (a nat (x y)) (b nat (x))) ()
  (eq (rlam x a b) (rlam y a (sbn y x b)))
()
(cbvrlamh (x y a b (sbn y x b))
  (nfnv (b y))
  (nfsbn1 (x y b))
  (sbnq (x y b))))

(local theorem cbvrlamd ((x nat) (y nat) (G wff ()) (a nat (x y)) (b nat (x)) (c nat (y)))
  ((h (im (an G (eq x y)) (eq b c))))
  (im G (eq (rlam x a b) (rlam y a c)))
()
(eqtrd (G (rlam x a b) (rlam y a (sbn y x b)) (rlam y a c))
  (a1i (G (eq (rlam x a b) (rlam y a (sbn y x b))))
    (cbvrlams (x y a b)))
  (rlameq2d (G y a (sbn y x b) c)
    (syl (G (al x (im (eq x y) (eq b c))) (eq (sbn y x b) c))
      (sbnet (x y b c))
      (ialda (x G (eq x y) (eq b c))
        h)))))

(local theorem rlamss ((x nat) (a nat (x)) (b nat (x))) ()
  (subset (ns (rlam x a b)) (lam x b))
()
(mpbir ((subset (res (lam x b) (ns a)) (lam x b)) (subset (ns (rlam x a b)) (lam x b)))
  (ax_mp ((eqs (ns (rlam x a b)) (res (lam x b) (ns a))) (iff (subset (ns (rlam x a b)) (lam x b)) (subset (res (lam x b) (ns a)) (lam x b))))
    (sseq1 ((ns (rlam x a b)) (res (lam x b) (ns a)) (lam x b)))
    (rlameqs (x a b)))
  (resss ((lam x b) (ns a)))))

(local theorem rlamisf ((x nat) (a nat (x)) (b nat (x))) ()
  (isfun (ns (rlam x a b)))
()
(ax_mp ((isfun (lam x b)) (isfun (ns (rlam x a b))))
  (ax_mp ((subset (ns (rlam x a b)) (lam x b)) (im (isfun (lam x b)) (isfun (ns (rlam x a b)))))
    (isfss ((ns (rlam x a b)) (lam x b)))
    (rlamss (x a b)))
  (lamisf (x b))))

(local theorem dmrlam ((x nat) (a nat (x)) (b nat (x))) ()
  (eqs (Dom (ns (rlam x a b))) (ns a))
()
(ax_mp ((eqs (Dom (res (lam x b) (ns a))) (ns a)) (eqs (Dom (ns (rlam x a b))) (ns a)))
  (ax_mp ((eqs (Dom (ns (rlam x a b))) (Dom (res (lam x b) (ns a)))) (im (eqs (Dom (res (lam x b) (ns a))) (ns a)) (eqs (Dom (ns (rlam x a b))) (ns a))))
    (eqstr ((Dom (ns (rlam x a b))) (Dom (res (lam x b) (ns a))) (ns a)))
    (ax_mp ((eqs (ns (rlam x a b)) (res (lam x b) (ns a))) (eqs (Dom (ns (rlam x a b))) (Dom (res (lam x b) (ns a)))))
      (dmeq ((ns (rlam x a b)) (res (lam x b) (ns a))))
      (rlameqs (x a b))))
  (dmreslam (x (ns a) b))))

(local theorem rnrlam ((a nat ()) (x nat) (b nat (x))) ()
  (eqs (Ran (ns (rlam x a b))) (Im (lam x b) (ns a)))
()
(ax_mp ((eqs (Ran (res (lam x b) (ns a))) (Im (lam x b) (ns a))) (eqs (Ran (ns (rlam x a b))) (Im (lam x b) (ns a))))
  (ax_mp ((eqs (Ran (ns (rlam x a b))) (Ran (res (lam x b) (ns a)))) (im (eqs (Ran (res (lam x b) (ns a))) (Im (lam x b) (ns a))) (eqs (Ran (ns (rlam x a b))) (Im (lam x b) (ns a)))))
    (eqstr ((Ran (ns (rlam x a b))) (Ran (res (lam x b) (ns a))) (Im (lam x b) (ns a))))
    (ax_mp ((eqs (ns (rlam x a b)) (res (lam x b) (ns a))) (eqs (Ran (ns (rlam x a b))) (Ran (res (lam x b) (ns a)))))
      (rneq ((ns (rlam x a b)) (res (lam x b) (ns a))))
      (rlameqs (x a b))))
  (rnres ((ns a) (lam x b)))))

(local theorem rlamrnss ((B set ()) (a nat ()) (x nat) (b nat (x))) ()
  (iff (subset (Ran (ns (rlam x a b))) B) (al x (im (el x (ns a)) (el b B))))
((y nat))
(ax_mp ((iff (subset (Im (lam x b) (ns a)) B) (al x (im (el x (ns a)) (el b B)))) (iff (subset (Ran (ns (rlam x a b))) B) (al x (im (el x (ns a)) (el b B)))))
  (ax_mp ((iff (subset (Ran (ns (rlam x a b))) B) (subset (Im (lam x b) (ns a)) B)) (im (iff (subset (Im (lam x b) (ns a)) B) (al x (im (el x (ns a)) (el b B)))) (iff (subset (Ran (ns (rlam x a b))) B) (al x (im (el x (ns a)) (el b B))))))
    (bitr ((subset (Ran (ns (rlam x a b))) B) (subset (Im (lam x b) (ns a)) B) (al x (im (el x (ns a)) (el b B)))))
    (ax_mp ((eqs (Ran (ns (rlam x a b))) (Im (lam x b) (ns a))) (iff (subset (Ran (ns (rlam x a b))) B) (subset (Im (lam x b) (ns a)) B)))
      (sseq1 ((Ran (ns (rlam x a b))) (Im (lam x b) (ns a)) B))
      (rnrlam (a x b))))
  (ax_mp ((iff (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B)))) (iff (subset (Im (lam x b) (ns a)) B) (al x (im (el x (ns a)) (el b B)))))
    (ax_mp ((iff (subset (Im (lam x b) (ns a)) B) (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B))))) (im (iff (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B)))) (iff (subset (Im (lam x b) (ns a)) B) (al x (im (el x (ns a)) (el b B))))))
      (bitr ((subset (Im (lam x b) (ns a)) B) (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B)))))
      (:conv (iff (subset (Im (lam x b) (ns a)) B) (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))))
        (iff
          (:unfold subset ((Im (lam x b) (ns a)) B) (y)
            (al y (im (el y (Im (lam x b) (ns a))) (el y B))))
          (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))))
        (aleqi (y (im (el y (Im (lam x b) (ns a))) (el y B)) (al x (im (an (el x (ns a)) (eq y b)) (el y B))))
          (ax_mp ((iff (im (ex x (an (el x (ns a)) (eq y b))) (el y B)) (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (iff (im (el y (Im (lam x b) (ns a))) (el y B)) (al x (im (an (el x (ns a)) (eq y b)) (el y B)))))
            (ax_mp ((iff (im (el y (Im (lam x b) (ns a))) (el y B)) (im (ex x (an (el x (ns a)) (eq y b))) (el y B))) (im (iff (im (ex x (an (el x (ns a)) (eq y b))) (el y B)) (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (iff (im (el y (Im (lam x b) (ns a))) (el y B)) (al x (im (an (el x (ns a)) (eq y b)) (el y B))))))
              (bitr ((im (el y (Im (lam x b) (ns a))) (el y B)) (im (ex x (an (el x (ns a)) (eq y b))) (el y B)) (al x (im (an (el x (ns a)) (eq y b)) (el y B)))))
              (imeq1i ((el y (Im (lam x b) (ns a))) (ex x (an (el x (ns a)) (eq y b))) (el y B))
                (ellamima ((ns a) y x b))))
            (eexb (x (an (el x (ns a)) (eq y b)) (el y B)))))))
    (ax_mp ((iff (al x (al y (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B)))) (iff (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B)))))
      (ax_mp ((iff (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (al y (im (an (el x (ns a)) (eq y b)) (el y B))))) (im (iff (al x (al y (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B)))) (iff (al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B))))))
        (bitr ((al y (al x (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (al y (im (an (el x (ns a)) (eq y b)) (el y B)))) (al x (im (el x (ns a)) (el b B)))))
        (alcomb (y x (im (an (el x (ns a)) (eq y b)) (el y B)))))
      (aleqi (x (al y (im (an (el x (ns a)) (eq y b)) (el y B))) (im (el x (ns a)) (el b B)))
        (ax_mp ((iff (al y (im (eq y b) (im (el x (ns a)) (el y B)))) (im (el x (ns a)) (el b B))) (iff (al y (im (an (el x (ns a)) (eq y b)) (el y B))) (im (el x (ns a)) (el b B))))
          (ax_mp ((iff (al y (im (an (el x (ns a)) (eq y b)) (el y B))) (al y (im (eq y b) (im (el x (ns a)) (el y B))))) (im (iff (al y (im (eq y b) (im (el x (ns a)) (el y B)))) (im (el x (ns a)) (el b B))) (iff (al y (im (an (el x (ns a)) (eq y b)) (el y B))) (im (el x (ns a)) (el b B)))))
            (bitr ((al y (im (an (el x (ns a)) (eq y b)) (el y B))) (al y (im (eq y b) (im (el x (ns a)) (el y B)))) (im (el x (ns a)) (el b B))))
            (aleqi (y (im (an (el x (ns a)) (eq y b)) (el y B)) (im (eq y b) (im (el x (ns a)) (el y B))))
              (ax_mp ((iff (im (an (eq y b) (el x (ns a))) (el y B)) (im (eq y b) (im (el x (ns a)) (el y B)))) (iff (im (an (el x (ns a)) (eq y b)) (el y B)) (im (eq y b) (im (el x (ns a)) (el y B)))))
                (ax_mp ((iff (im (an (el x (ns a)) (eq y b)) (el y B)) (im (an (eq y b) (el x (ns a))) (el y B))) (im (iff (im (an (eq y b) (el x (ns a))) (el y B)) (im (eq y b) (im (el x (ns a)) (el y B)))) (iff (im (an (el x (ns a)) (eq y b)) (el y B)) (im (eq y b) (im (el x (ns a)) (el y B))))))
                  (bitr ((im (an (el x (ns a)) (eq y b)) (el y B)) (im (an (eq y b) (el x (ns a))) (el y B)) (im (eq y b) (im (el x (ns a)) (el y B)))))
                  (imeq1i ((an (el x (ns a)) (eq y b)) (an (eq y b) (el x (ns a))) (el y B))
                    (ancomb ((el x (ns a)) (eq y b)))))
                (impexp ((eq y b) (el x (ns a)) (el y B))))))
          (aleqe (y b (im (el x (ns a)) (el y B)) (im (el x (ns a)) (el b B)))
            (imeq2d ((eq y b) (el x (ns a)) (el y B) (el b B))
              (eleq1 (B y b))))))))))

(local theorem rlamfunc ((B set ()) (a nat ()) (x nat) (b nat (x))) ()
  (iff (func (ns (rlam x a b)) (ns a) B) (al x (im (el x (ns a)) (el b B))))
()
(ax_mp ((iff (subset (Ran (ns (rlam x a b))) B) (al x (im (el x (ns a)) (el b B)))) (iff (func (ns (rlam x a b)) (ns a) B) (al x (im (el x (ns a)) (el b B)))))
  (ax_mp ((iff (func (ns (rlam x a b)) (ns a) B) (subset (Ran (ns (rlam x a b))) B)) (im (iff (subset (Ran (ns (rlam x a b))) B) (al x (im (el x (ns a)) (el b B)))) (iff (func (ns (rlam x a b)) (ns a) B) (al x (im (el x (ns a)) (el b B))))))
    (bitr ((func (ns (rlam x a b)) (ns a) B) (subset (Ran (ns (rlam x a b))) B) (al x (im (el x (ns a)) (el b B)))))
    (ax_mp ((an (isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a))) (iff (func (ns (rlam x a b)) (ns a) B) (subset (Ran (ns (rlam x a b))) B)))
      (:conv (im (an (isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a))) (iff (func (ns (rlam x a b)) (ns a) B) (subset (Ran (ns (rlam x a b))) B)))
        (im
          (an (isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a)))
          (iff
            (:unfold func ((ns (rlam x a b)) (ns a) B) ()
              (an (an (isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a))) (subset (Ran (ns (rlam x a b))) B)))
            (subset (Ran (ns (rlam x a b))) B)))
        (bian1 ((an (isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a))) (subset (Ran (ns (rlam x a b))) B))))
      (ax_mp ((eqs (Dom (ns (rlam x a b))) (ns a)) (an (isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a))))
        (ax_mp ((isfun (ns (rlam x a b))) (im (eqs (Dom (ns (rlam x a b))) (ns a)) (an (isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a)))))
          (ian ((isfun (ns (rlam x a b))) (eqs (Dom (ns (rlam x a b))) (ns a))))
          (rlamisf (x a b)))
        (dmrlam (x a b)))))
  (rlamrnss (B a x b))))

(local theorem rlamfunc2 ((A set ()) (B set ()) (a nat ()) (x nat) (b nat (x))) ()
  (im (eqs A (ns a)) (iff (func (ns (rlam x a b)) A B) (al x (im (el x A) (el b B)))))
()
(:let H1 (id ((eqs A (ns a))))
(mpbiri ((eqs A (ns a)) (iff (func (ns (rlam x a b)) (ns a) B) (al x (im (el x (ns a)) (el b B)))) (iff (func (ns (rlam x a b)) A B) (al x (im (el x A) (el b B)))))
  (rlamfunc (B a x b))
  (bieqd ((eqs A (ns a)) (func (ns (rlam x a b)) A B) (func (ns (rlam x a b)) (ns a) B) (al x (im (el x A) (el b B))) (al x (im (el x (ns a)) (el b B))))
    (funceqd ((eqs A (ns a)) (ns (rlam x a b)) (ns (rlam x a b)) A (ns a) B B)
      (eqsidd ((eqs A (ns a)) (ns (rlam x a b))))
      H1
      (eqsidd ((eqs A (ns a)) B)))
    (aleqd ((eqs A (ns a)) x (im (el x A) (el b B)) (im (el x (ns a)) (el b B)))
      (imeqd ((eqs A (ns a)) (el x A) (el x (ns a)) (el b B) (el b B))
        (eleqd ((eqs A (ns a)) x x A (ns a))
          (eqidd ((eqs A (ns a)) x))
          H1)
        (biidd ((eqs A (ns a)) (el b B)))))))))

(local theorem rlamArrow ((B set ()) (a nat ()) (x nat) (b nat (x))) ()
  (iff (el (rlam x a b) (Arrow (ns a) B)) (al x (im (el x (ns a)) (el b B))))
()
(ax_mp ((iff (func (ns (rlam x a b)) (ns a) B) (al x (im (el x (ns a)) (el b B)))) (iff (el (rlam x a b) (Arrow (ns a) B)) (al x (im (el x (ns a)) (el b B)))))
  (ax_mp ((iff (el (rlam x a b) (Arrow (ns a) B)) (func (ns (rlam x a b)) (ns a) B)) (im (iff (func (ns (rlam x a b)) (ns a) B) (al x (im (el x (ns a)) (el b B)))) (iff (el (rlam x a b) (Arrow (ns a) B)) (al x (im (el x (ns a)) (el b B))))))
    (bitr ((el (rlam x a b) (Arrow (ns a) B)) (func (ns (rlam x a b)) (ns a) B) (al x (im (el x (ns a)) (el b B)))))
    (elArrow ((ns a) B (rlam x a b))))
  (rlamfunc (B a x b))))

(local theorem unrlam ((a nat ()) (b nat ()) (c nat ()) (x nat) (v nat (x))) ()
  (iff (eqs (Union (ns (rlam x a v)) (ns (rlam x b v))) (ns (rlam x c v))) (eqs (Union (ns a) (ns b)) (ns c)))
((x1 nat))
(ibii ((eqs (Union (ns (rlam x a v)) (ns (rlam x b v))) (ns (rlam x c v))) (eqs (Union (ns a) (ns b)) (ns c)))
  (eqstr3g ((Dom (Union (ns (rlam x a v)) (ns (rlam x b v)))) (Dom (ns (rlam x c v))) (Union (ns a) (ns b)) (ns c) (eqs (Union (ns (rlam x a v)) (ns (rlam x b v))) (ns (rlam x c v))))
    (ax_mp ((eqs (Union (Dom (ns (rlam x a v))) (Dom (ns (rlam x b v)))) (Union (ns a) (ns b))) (eqs (Dom (Union (ns (rlam x a v)) (ns (rlam x b v)))) (Union (ns a) (ns b))))
      (ax_mp ((eqs (Dom (Union (ns (rlam x a v)) (ns (rlam x b v)))) (Union (Dom (ns (rlam x a v))) (Dom (ns (rlam x b v))))) (im (eqs (Union (Dom (ns (rlam x a v))) (Dom (ns (rlam x b v)))) (Union (ns a) (ns b))) (eqs (Dom (Union (ns (rlam x a v)) (ns (rlam x b v)))) (Union (ns a) (ns b)))))
        (eqstr ((Dom (Union (ns (rlam x a v)) (ns (rlam x b v)))) (Union (Dom (ns (rlam x a v))) (Dom (ns (rlam x b v)))) (Union (ns a) (ns b))))
        (dmun ((ns (rlam x a v)) (ns (rlam x b v)))))
      (ax_mp ((eqs (Dom (ns (rlam x b v))) (ns b)) (eqs (Union (Dom (ns (rlam x a v))) (Dom (ns (rlam x b v)))) (Union (ns a) (ns b))))
        (ax_mp ((eqs (Dom (ns (rlam x a v))) (ns a)) (im (eqs (Dom (ns (rlam x b v))) (ns b)) (eqs (Union (Dom (ns (rlam x a v))) (Dom (ns (rlam x b v)))) (Union (ns a) (ns b)))))
          (uneq ((Dom (ns (rlam x a v))) (ns a) (Dom (ns (rlam x b v))) (ns b)))
          (dmrlam (x a v)))
        (dmrlam (x b v))))
    (dmrlam (x c v))
    (dmeq ((Union (ns (rlam x a v)) (ns (rlam x b v))) (ns (rlam x c v)))))
  (eqrd ((Union (ns (rlam x a v)) (ns (rlam x b v))) (ns (rlam x c v)) (eqs (Union (ns a) (ns b)) (ns c)) x1)
    (bitr4g ((eqs (Union (ns a) (ns b)) (ns c)) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v))))) (ex x (an (el x (ns c)) (eq x1 (pr x v)))) (el x1 (Union (ns (rlam x a v)) (ns (rlam x b v)))) (el x1 (ns (rlam x c v))))
      (ax_mp ((iff (or (el x1 (ns (rlam x a v))) (el x1 (ns (rlam x b v)))) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v)))))) (iff (el x1 (Union (ns (rlam x a v)) (ns (rlam x b v)))) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v)))))))
        (ax_mp ((iff (el x1 (Union (ns (rlam x a v)) (ns (rlam x b v)))) (or (el x1 (ns (rlam x a v))) (el x1 (ns (rlam x b v))))) (im (iff (or (el x1 (ns (rlam x a v))) (el x1 (ns (rlam x b v)))) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v)))))) (iff (el x1 (Union (ns (rlam x a v)) (ns (rlam x b v)))) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v))))))))
          (bitr ((el x1 (Union (ns (rlam x a v)) (ns (rlam x b v)))) (or (el x1 (ns (rlam x a v))) (el x1 (ns (rlam x b v)))) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v)))))))
          (elun ((ns (rlam x a v)) (ns (rlam x b v)) x1)))
        (ax_mp ((iff (el x1 (ns (rlam x b v))) (ex x (an (el x (ns b)) (eq x1 (pr x v))))) (iff (or (el x1 (ns (rlam x a v))) (el x1 (ns (rlam x b v)))) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v)))))))
          (ax_mp ((iff (el x1 (ns (rlam x a v))) (ex x (an (el x (ns a)) (eq x1 (pr x v))))) (im (iff (el x1 (ns (rlam x b v))) (ex x (an (el x (ns b)) (eq x1 (pr x v))))) (iff (or (el x1 (ns (rlam x a v))) (el x1 (ns (rlam x b v)))) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v))))))))
            (oreq ((el x1 (ns (rlam x a v))) (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (el x1 (ns (rlam x b v))) (ex x (an (el x (ns b)) (eq x1 (pr x v))))))
            (elrlam (x1 x a v)))
          (elrlam (x1 x b v))))
      (elrlam (x1 x c v))
      (syl5bbr ((eqs (Union (ns a) (ns b)) (ns c)) (or (ex x (an (el x (ns a)) (eq x1 (pr x v)))) (ex x (an (el x (ns b)) (eq x1 (pr x v))))) (ex x (or (an (el x (ns a)) (eq x1 (pr x v))) (an (el x (ns b)) (eq x1 (pr x v))))) (ex x (an (el x (ns c)) (eq x1 (pr x v)))))
        (exor (x (an (el x (ns a)) (eq x1 (pr x v))) (an (el x (ns b)) (eq x1 (pr x v)))))
        (exeqd ((eqs (Union (ns a) (ns b)) (ns c)) x (or (an (el x (ns a)) (eq x1 (pr x v))) (an (el x (ns b)) (eq x1 (pr x v)))) (an (el x (ns c)) (eq x1 (pr x v))))
          (syl5bbr ((eqs (Union (ns a) (ns b)) (ns c)) (or (an (el x (ns a)) (eq x1 (pr x v))) (an (el x (ns b)) (eq x1 (pr x v)))) (an (or (el x (ns a)) (el x (ns b))) (eq x1 (pr x v))) (an (el x (ns c)) (eq x1 (pr x v))))
            (andir ((el x (ns a)) (el x (ns b)) (eq x1 (pr x v))))
            (aneq1d ((eqs (Union (ns a) (ns b)) (ns c)) (or (el x (ns a)) (el x (ns b))) (el x (ns c)) (eq x1 (pr x v)))
              (syl5bbr ((eqs (Union (ns a) (ns b)) (ns c)) (or (el x (ns a)) (el x (ns b))) (el x (Union (ns a) (ns b))) (el x (ns c)))
                (elun ((ns a) (ns b) x))
                (eleq2 ((Union (ns a) (ns b)) (ns c) x)))))))))))

(local theorem apprlams ((a nat ()) (x nat) (b nat (x)) (c nat (x))) ()
  (im (el c (ns a)) (eq (app (ns (rlam x a b)) c) (sbn c x b)))
()
(syl5eq ((el c (ns a)) (app (ns (rlam x a b)) c) (app (res (lam x b) (ns a)) c) (sbn c x b))
  (ax_mp ((eqs (ns (rlam x a b)) (res (lam x b) (ns a))) (eq (app (ns (rlam x a b)) c) (app (res (lam x b) (ns a)) c)))
    (appeq1 ((ns (rlam x a b)) (res (lam x b) (ns a)) c))
    (rlameqs (x a b)))
  (syl6eq ((el c (ns a)) (app (res (lam x b) (ns a)) c) (app (lam x b) c) (sbn c x b))
    (applams (x b c))
    (resapp ((ns a) (lam x b) c)))))

(local theorem apprlam ((a nat ()) (x nat) (b nat (x))) ()
  (im (el x (ns a)) (eq (app (ns (rlam x a b)) x) b))
()
(syl6eq ((el x (ns a)) (app (ns (rlam x a b)) x) (sbn x x b) b)
  (sbnid (x b))
  (apprlams (a x b x))))

(local theorem apprlame ((a nat ()) (c nat ()) (d nat ()) (x nat) (b nat (x)))
  ((e (im (eq x c) (eq b d))))
  (im (el c (ns a)) (eq (app (ns (rlam x a b)) c) d))
()
(syl6eq ((el c (ns a)) (app (ns (rlam x a b)) c) (sbn c x b) d)
  (sbne (x c b d)
    e)
  (apprlams (a x b c))))

(local theorem apprlamed ((G wff ()) (a nat ()) (c nat ()) (d nat ()) (x nat) (b nat (x)))
  ((e (im (an G (eq x c)) (eq b d)))
   (h (im G (el c (ns a)))))
  (im G (eq (app (ns (rlam x a b)) c) d))
()
(eqtrd (G (app (ns (rlam x a b)) c) (sbn c x b) d)
  (syl (G (el c (ns a)) (eq (app (ns (rlam x a b)) c) (sbn c x b)))
    (apprlams (a x b c))
    h)
  (sbned (G x c b d)
    e)))

(local theorem apprlamed1 ((G wff ()) (P wff ()) (a nat ()) (c nat ()) (f nat ()) (x nat) (b nat (x)))
  ((h (im G (el c (ns a))))
   (e (im (an G (eq x c)) (im (eq (app (ns f) c) b) P))))
  (im G (im (eq f (rlam x a b)) P))
()
(:let H1 (anr (G (eq x c)))
(mpi (G (ex x (eq x c)) (im (eq f (rlam x a b)) P))
  (ax_6 (c x))
  (eexdh (x G (eq x c) (im (eq f (rlam x a b)) P))
    (nfv (G x))
    (nfim (x (eq f (rlam x a b)) P)
      (nfeq2 (f x (rlam x a b))
        (nfrlam1 (x a b)
          (nfnv (a x))))
      (nfv (P x)))
    (exp (G (eq x c) (im (eq f (rlam x a b)) P))
      (syld ((an G (eq x c)) (eq f (rlam x a b)) (eq (app (ns f) c) b) P)
        (syl5ibrcom ((an G (eq x c)) (eq (app (ns f) c) b) (eq f (rlam x a b)) (eq (app (ns (rlam x a b)) c) b))
          (eqeq1d ((eq f (rlam x a b)) (app (ns f) c) (app (ns (rlam x a b)) c) b)
            (appneq1 (f (rlam x a b) c)))
          (eqtr3d ((an G (eq x c)) (app (ns (rlam x a b)) c) (app (ns (rlam x a b)) x) b)
            (appeq2d ((an G (eq x c)) (ns (rlam x a b)) x c)
              H1)
            (syl ((an G (eq x c)) (el x (ns a)) (eq (app (ns (rlam x a b)) x) b))
              (apprlam (a x b))
              (mpbird ((an G (eq x c)) (el c (ns a)) (el x (ns a)))
                (eleq1d ((ns a) (an G (eq x c)) x c)
                  H1)
                (anwl (G (eq x c) (el c (ns a)))
                  h)))))
        e))))))

(local theorem apprlamed2 ((G wff ()) (a nat ()) (c nat ()) (d nat ()) (x nat) (f nat (x)) (b nat (x)))
  ((h (im G (el c (ns a))))
   (e (im (an G (eq x c)) (eq b d))))
  (im G (im (eq f (rlam x a b)) (eq (app (ns f) c) d)))
()
(syl5ibrcom (G (eq (app (ns f) c) d) (eq f (rlam x a b)) (eq (app (ns (rlam x a b)) c) d))
  (eqeq1d ((eq f (rlam x a b)) (app (ns f) c) (app (ns (rlam x a b)) c) d)
    (appneq1 (f (rlam x a b) c)))
  (apprlamed (G a c d x b)
    e
    h)))

(local theorem rlameq2b ((a nat ()) (x nat) (v nat (x)) (w nat (x))) ()
  (iff (eq (rlam x a v) (rlam x a w)) (al x (im (el x (ns a)) (eq v w))))
()
(:let H1 (nfnv (a x))
(ibii ((eq (rlam x a v) (rlam x a w)) (al x (im (el x (ns a)) (eq v w))))
  (ialdh (x (eq (rlam x a v) (rlam x a w)) (im (el x (ns a)) (eq v w)))
    (nf_eq (x (rlam x a v) (rlam x a w))
      (nfrlam1 (x a v)
        H1)
      (nfrlam1 (x a w)
        H1))
    (rsyl ((eq (rlam x a v) (rlam x a w)) (eq (app (ns (rlam x a v)) x) (app (ns (rlam x a w)) x)) (im (el x (ns a)) (eq v w)))
      (appneq1 ((rlam x a v) (rlam x a w) x))
      (com12 ((el x (ns a)) (eq (app (ns (rlam x a v)) x) (app (ns (rlam x a w)) x)) (eq v w))
        (bi1d ((el x (ns a)) (eq (app (ns (rlam x a v)) x) (app (ns (rlam x a w)) x)) (eq v w))
          (eqeqd ((el x (ns a)) (app (ns (rlam x a v)) x) v (app (ns (rlam x a w)) x) w)
            (apprlam (a x v))
            (apprlam (a x w)))))))
  (rlameq2a (a x v w)))))

(local theorem apprlam0 ((a nat ()) (x nat) (b nat (x)) (c nat (x))) ()
  (im (not (el c (ns a))) (eq (app (ns (rlam x a b)) c) (d0)))
()
(sylbir ((not (el c (ns a))) (not (el c (Dom (ns (rlam x a b))))) (eq (app (ns (rlam x a b)) c) (d0)))
  (ax_mp ((iff (el c (Dom (ns (rlam x a b)))) (el c (ns a))) (iff (not (el c (Dom (ns (rlam x a b))))) (not (el c (ns a)))))
    (noteq ((el c (Dom (ns (rlam x a b)))) (el c (ns a))))
    (ax_mp ((eqs (Dom (ns (rlam x a b))) (ns a)) (iff (el c (Dom (ns (rlam x a b)))) (el c (ns a))))
      (eleq2 ((Dom (ns (rlam x a b))) (ns a) c))
      (dmrlam (x a b))))
  (ndmapp ((ns (rlam x a b)) c))))

(local theorem rlamrcl ((a nat ()) (d nat ()) (x nat) (b nat (x)) (c nat (x))) ()
  (im (el d (ns (app (ns (rlam x a b)) c))) (el c (ns a)))
()
(ax_mp ((im (not (el c (ns a))) (not (el d (ns (app (ns (rlam x a b)) c))))) (im (el d (ns (app (ns (rlam x a b)) c))) (el c (ns a))))
  (ax_3 ((el c (ns a)) (el d (ns (app (ns (rlam x a b)) c)))))
  (mpbiri ((not (el c (ns a))) (not (el d (ns (d0)))) (not (el d (ns (app (ns (rlam x a b)) c)))))
    (nel0 (d))
    (noteqd ((not (el c (ns a))) (el d (ns (app (ns (rlam x a b)) c))) (el d (ns (d0))))
      (elneq2d ((not (el c (ns a))) d (app (ns (rlam x a b)) c) (d0))
        (apprlam0 (a x b c)))))))

(local theorem rlamapp ((F set ()) (a nat ()) (x nat) (b nat (x))) ()
  (iff (eqs (ns (rlam x a (app F x))) F) (an (isfun F) (eqs (Dom F) (ns a))))
()
(ax_mp ((iff (eqs (res (lam x (app F x)) (ns a)) F) (an (isfun F) (eqs (Dom F) (ns a)))) (iff (eqs (ns (rlam x a (app F x))) F) (an (isfun F) (eqs (Dom F) (ns a)))))
  (ax_mp ((iff (eqs (ns (rlam x a (app F x))) F) (eqs (res (lam x (app F x)) (ns a)) F)) (im (iff (eqs (res (lam x (app F x)) (ns a)) F) (an (isfun F) (eqs (Dom F) (ns a)))) (iff (eqs (ns (rlam x a (app F x))) F) (an (isfun F) (eqs (Dom F) (ns a))))))
    (bitr ((eqs (ns (rlam x a (app F x))) F) (eqs (res (lam x (app F x)) (ns a)) F) (an (isfun F) (eqs (Dom F) (ns a)))))
    (ax_mp ((eqs (ns (rlam x a (app F x))) (res (lam x (app F x)) (ns a))) (iff (eqs (ns (rlam x a (app F x))) F) (eqs (res (lam x (app F x)) (ns a)) F)))
      (eqseq1 ((ns (rlam x a (app F x))) (res (lam x (app F x)) (ns a)) F))
      (rlameqs (x a (app F x)))))
  (lamapp2 ((ns a) F x))))

(local theorem eqsrlam ((F set ()) (a nat ()) (x nat) (b nat (x))) ()
  (iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b)))))
((x1 nat))
(ax_mp ((iff (an (an (isfun F) (eqs (Dom F) (ns a))) (eqs F (ns (rlam x a b)))) (eqs F (ns (rlam x a b)))) (iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b))))))
  (ax_mp ((iff (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b)))) (an (an (isfun F) (eqs (Dom F) (ns a))) (eqs F (ns (rlam x a b))))) (im (iff (an (an (isfun F) (eqs (Dom F) (ns a))) (eqs F (ns (rlam x a b)))) (eqs F (ns (rlam x a b)))) (iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b)))))))
    (bitr2 ((an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b)))) (an (an (isfun F) (eqs (Dom F) (ns a))) (eqs F (ns (rlam x a b)))) (eqs F (ns (rlam x a b)))))
    (ax_mp ((im (an (isfun F) (eqs (Dom F) (ns a))) (iff (al x (im (el x (ns a)) (eq (app F x) b))) (eqs F (ns (rlam x a b))))) (iff (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b)))) (an (an (isfun F) (eqs (Dom F) (ns a))) (eqs F (ns (rlam x a b))))))
      (aneq2a ((an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b))) (eqs F (ns (rlam x a b)))))
      (sylbir ((an (isfun F) (eqs (Dom F) (ns a))) (eqs (ns (rlam x a (app F x))) F) (iff (al x (im (el x (ns a)) (eq (app F x) b))) (eqs F (ns (rlam x a b)))))
        (rlamapp (F a x x1))
        (syl5bbr ((eqs (ns (rlam x a (app F x))) F) (al x (im (el x (ns a)) (eq (app F x) b))) (eq (rlam x a (app F x)) (rlam x a b)) (eqs F (ns (rlam x a b))))
          (rlameq2b (a x (app F x) b))
          (syl5bbr ((eqs (ns (rlam x a (app F x))) F) (eq (rlam x a (app F x)) (rlam x a b)) (eqs (ns (rlam x a (app F x))) (ns (rlam x a b))) (eqs F (ns (rlam x a b))))
            (nsinj ((rlam x a (app F x)) (rlam x a b)))
            (eqseq1 ((ns (rlam x a (app F x))) F (ns (rlam x a b)))))))))
  (ax_mp ((im (eqs F (ns (rlam x a b))) (an (isfun F) (eqs (Dom F) (ns a)))) (iff (an (an (isfun F) (eqs (Dom F) (ns a))) (eqs F (ns (rlam x a b)))) (eqs F (ns (rlam x a b)))))
    (bian1a ((an (isfun F) (eqs (Dom F) (ns a))) (eqs F (ns (rlam x a b)))))
    (iand ((eqs F (ns (rlam x a b))) (isfun F) (eqs (Dom F) (ns a)))
      (mpbiri ((eqs F (ns (rlam x a b))) (isfun (ns (rlam x a b))) (isfun F))
        (rlamisf (x a b))
        (isfeq (F (ns (rlam x a b)))))
      (syl6eqs ((Dom F) (Dom (ns (rlam x a b))) (ns a) (eqs F (ns (rlam x a b))))
        (dmrlam (x a b))
        (dmeq (F (ns (rlam x a b)))))))))

(local theorem eqrlam ((a nat ()) (f nat ()) (x nat) (b nat (x))) ()
  (iff (eq f (rlam x a b)) (an (an (isfun (ns f)) (eqs (Dom (ns f)) (ns a))) (al x (im (el x (ns a)) (eq (app (ns f) x) b)))))
()
(ax_mp ((iff (eqs (ns f) (ns (rlam x a b))) (an (an (isfun (ns f)) (eqs (Dom (ns f)) (ns a))) (al x (im (el x (ns a)) (eq (app (ns f) x) b))))) (iff (eq f (rlam x a b)) (an (an (isfun (ns f)) (eqs (Dom (ns f)) (ns a))) (al x (im (el x (ns a)) (eq (app (ns f) x) b))))))
  (ax_mp ((iff (eqs (ns f) (ns (rlam x a b))) (eq f (rlam x a b))) (im (iff (eqs (ns f) (ns (rlam x a b))) (an (an (isfun (ns f)) (eqs (Dom (ns f)) (ns a))) (al x (im (el x (ns a)) (eq (app (ns f) x) b))))) (iff (eq f (rlam x a b)) (an (an (isfun (ns f)) (eqs (Dom (ns f)) (ns a))) (al x (im (el x (ns a)) (eq (app (ns f) x) b)))))))
    (bitr3 ((eq f (rlam x a b)) (eqs (ns f) (ns (rlam x a b))) (an (an (isfun (ns f)) (eqs (Dom (ns f)) (ns a))) (al x (im (el x (ns a)) (eq (app (ns f) x) b))))))
    (nsinj (f (rlam x a b))))
  (eqsrlam ((ns f) a x b))))

(local theorem funcsn2 ((F set ()) (a nat ()) (b nat ()) (x nat)) ()
  (iff (func F (ns a) (ns (sn b))) (eqs F (ns (rlam x a b))))
()
(ax_mp ((iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b))))))) (iff (func F (ns a) (ns (sn b))) (eqs F (ns (rlam x a b)))))
  (ax_mp ((iff (func F (ns a) (ns (sn b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b))))))) (im (iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b))))))) (iff (func F (ns a) (ns (sn b))) (eqs F (ns (rlam x a b))))))
    (bitr4 ((func F (ns a) (ns (sn b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b)))))) (eqs F (ns (rlam x a b)))))
    (funcal ((ns a) (ns (sn b)) F x)))
  (ax_mp ((iff (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b)))))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b))))) (iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b))))))))
    (ax_mp ((iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b))))) (im (iff (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b)))))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b))))) (iff (eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b)))))))))
      (bitr4 ((eqs F (ns (rlam x a b))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (eq (app F x) b)))) (an (an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b))))))))
      (eqsrlam (F a x b)))
    (aneq2i ((an (isfun F) (eqs (Dom F) (ns a))) (al x (im (el x (ns a)) (el (app F x) (ns (sn b))))) (al x (im (el x (ns a)) (eq (app F x) b))))
      (aleqi (x (im (el x (ns a)) (el (app F x) (ns (sn b)))) (im (el x (ns a)) (eq (app F x) b)))
        (imeq2i ((el x (ns a)) (el (app F x) (ns (sn b))) (eq (app F x) b))
          (elsn ((app F x) b))))))))

(local theorem Arrowsn2 ((a nat ()) (b nat ()) (x nat)) ()
  (eqs (Arrow (ns a) (ns (sn b))) (ns (sn (rlam x a b))))
((x1 nat))
(:conv (eqs (Arrow (ns a) (ns (sn b))) (ns (sn (rlam x a b))))
  (:unfold eqs ((Arrow (ns a) (ns (sn b))) (ns (sn (rlam x a b)))) (x1)
    (al x1 (iff (el x1 (Arrow (ns a) (ns (sn b)))) (el x1 (ns (sn (rlam x a b)))))))
  (ax_gen (x1 (iff (el x1 (Arrow (ns a) (ns (sn b)))) (el x1 (ns (sn (rlam x a b))))))
    (ax_mp ((iff (el x1 (ns (sn (rlam x a b)))) (func (ns x1) (ns a) (ns (sn b)))) (iff (el x1 (Arrow (ns a) (ns (sn b)))) (el x1 (ns (sn (rlam x a b))))))
      (ax_mp ((iff (el x1 (Arrow (ns a) (ns (sn b)))) (func (ns x1) (ns a) (ns (sn b)))) (im (iff (el x1 (ns (sn (rlam x a b)))) (func (ns x1) (ns a) (ns (sn b)))) (iff (el x1 (Arrow (ns a) (ns (sn b)))) (el x1 (ns (sn (rlam x a b)))))))
        (bitr4 ((el x1 (Arrow (ns a) (ns (sn b)))) (func (ns x1) (ns a) (ns (sn b))) (el x1 (ns (sn (rlam x a b))))))
        (elArrow ((ns a) (ns (sn b)) x1)))
      (ax_mp ((iff (func (ns x1) (ns a) (ns (sn b))) (eq x1 (rlam x a b))) (iff (el x1 (ns (sn (rlam x a b)))) (func (ns x1) (ns a) (ns (sn b)))))
        (ax_mp ((iff (el x1 (ns (sn (rlam x a b)))) (eq x1 (rlam x a b))) (im (iff (func (ns x1) (ns a) (ns (sn b))) (eq x1 (rlam x a b))) (iff (el x1 (ns (sn (rlam x a b)))) (func (ns x1) (ns a) (ns (sn b))))))
          (bitr4 ((el x1 (ns (sn (rlam x a b)))) (eq x1 (rlam x a b)) (func (ns x1) (ns a) (ns (sn b)))))
          (elsn (x1 (rlam x a b))))
        (ax_mp ((iff (eqs (ns x1) (ns (rlam x a b))) (eq x1 (rlam x a b))) (iff (func (ns x1) (ns a) (ns (sn b))) (eq x1 (rlam x a b))))
          (ax_mp ((iff (func (ns x1) (ns a) (ns (sn b))) (eqs (ns x1) (ns (rlam x a b)))) (im (iff (eqs (ns x1) (ns (rlam x a b))) (eq x1 (rlam x a b))) (iff (func (ns x1) (ns a) (ns (sn b))) (eq x1 (rlam x a b)))))
            (bitr ((func (ns x1) (ns a) (ns (sn b))) (eqs (ns x1) (ns (rlam x a b))) (eq x1 (rlam x a b))))
            (funcsn2 ((ns x1) a b x)))
          (nsinj (x1 (rlam x a b)))))))))

(def write ((F set ()) (a nat ()) (b nat ())) (set ())
((x nat) (y nat))
(sab x (ab y (ifp (eq x a) (eq y b) (el (pr x y) F)))))

(local theorem writeeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_ah (im _G (eq _a1 _a2)))
   (_bh (im _G (eq _b1 _b2))))
  (im _G (eqs (write _F1 _a1 _b1) (write _F2 _a2 _b2)))
((x nat) (y nat))
(:conv (im _G (eqs (write _F1 _a1 _b1) (write _F2 _a2 _b2)))
  (im
    _G
    (eqs
      (:unfold write (_F1 _a1 _b1) (x y)
        (sab x (ab y (ifp (eq x _a1) (eq y _b1) (el (pr x y) _F1)))))
      (:unfold write (_F2 _a2 _b2) (x y)
        (sab x (ab y (ifp (eq x _a2) (eq y _b2) (el (pr x y) _F2)))))))
  (sabeqd (_G x (ab y (ifp (eq x _a1) (eq y _b1) (el (pr x y) _F1))) (ab y (ifp (eq x _a2) (eq y _b2) (el (pr x y) _F2))))
    (abeqd (_G y (ifp (eq x _a1) (eq y _b1) (el (pr x y) _F1)) (ifp (eq x _a2) (eq y _b2) (el (pr x y) _F2)))
      (ifpeqd (_G (eq x _a1) (eq x _a2) (eq y _b1) (eq y _b2) (el (pr x y) _F1) (el (pr x y) _F2))
        (eqeqd (_G x x _a1 _a2)
          (eqidd (_G x))
          _ah)
        (eqeqd (_G y y _b1 _b2)
          (eqidd (_G y))
          _bh)
        (eleqd (_G (pr x y) (pr x y) _F1 _F2)
          (eqidd (_G (pr x y)))
          _Fh))))))

(local theorem writeeq ((_F1 set ()) (_F2 set ()) (_a1 nat ()) (_a2 nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eqs _F1 _F2) (im (eq _a1 _a2) (im (eq _b1 _b2) (eqs (write _F1 _a1 _b1) (write _F2 _a2 _b2)))))
()
(exp ((eqs _F1 _F2) (eq _a1 _a2) (im (eq _b1 _b2) (eqs (write _F1 _a1 _b1) (write _F2 _a2 _b2))))
  (exp ((an (eqs _F1 _F2) (eq _a1 _a2)) (eq _b1 _b2) (eqs (write _F1 _a1 _b1) (write _F2 _a2 _b2)))
    (writeeqd ((an (an (eqs _F1 _F2) (eq _a1 _a2)) (eq _b1 _b2)) _F1 _F2 _a1 _a2 _b1 _b2)
      (anwl ((an (eqs _F1 _F2) (eq _a1 _a2)) (eq _b1 _b2) (eqs _F1 _F2))
        (anl ((eqs _F1 _F2) (eq _a1 _a2))))
      (anwl ((an (eqs _F1 _F2) (eq _a1 _a2)) (eq _b1 _b2) (eq _a1 _a2))
        (anr ((eqs _F1 _F2) (eq _a1 _a2))))
      (anr ((an (eqs _F1 _F2) (eq _a1 _a2)) (eq _b1 _b2)))))))

(local theorem writeeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (a nat ()) (b nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eqs (write _F1 a b) (write _F2 a b)))
()
(writeeqd (_G _F1 _F2 a a b b)
  _h
  (eqidd (_G a))
  (eqidd (_G b))))

(local theorem writeeq1 ((_F1 set ()) (_F2 set ()) (a nat ()) (b nat ())) ()
  (im (eqs _F1 _F2) (eqs (write _F1 a b) (write _F2 a b)))
()
(writeeq1d ((eqs _F1 _F2) _F1 _F2 a b)
  (id ((eqs _F1 _F2)))))

(local theorem writeeq2d ((_G wff ()) (F set ()) (_a1 nat ()) (_a2 nat ()) (b nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eqs (write F _a1 b) (write F _a2 b)))
()
(writeeqd (_G F F _a1 _a2 b b)
  (eqsidd (_G F))
  _h
  (eqidd (_G b))))

(local theorem writeeq2 ((F set ()) (_a1 nat ()) (_a2 nat ()) (b nat ())) ()
  (im (eq _a1 _a2) (eqs (write F _a1 b) (write F _a2 b)))
()
(writeeq2d ((eq _a1 _a2) F _a1 _a2 b)
  (id ((eq _a1 _a2)))))

(local theorem writeeq3d ((_G wff ()) (F set ()) (a nat ()) (_b1 nat ()) (_b2 nat ()))
  ((_h (im _G (eq _b1 _b2))))
  (im _G (eqs (write F a _b1) (write F a _b2)))
()
(writeeqd (_G F F a a _b1 _b2)
  (eqsidd (_G F))
  (eqidd (_G a))
  _h))

(local theorem writeeq3 ((F set ()) (a nat ()) (_b1 nat ()) (_b2 nat ())) ()
  (im (eq _b1 _b2) (eqs (write F a _b1) (write F a _b2)))
()
(writeeq3d ((eq _b1 _b2) F a _b1 _b2)
  (id ((eq _b1 _b2)))))

(local theorem elwrite ((F set ()) (a nat ()) (b nat ()) (x nat ()) (y nat ())) ()
  (iff (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)))
((x1 nat) (x2 nat))
(:conv (iff (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)))
  (iff
    (el
      (pr x y)
      (:unfold write (F a b) (x1 x2)
        (sab x1 (ab x2 (ifp (eq x1 a) (eq x2 b) (el (pr x1 x2) F))))))
    (ifp (eq x a) (eq y b) (el (pr x y) F)))
  (elsabe (x y (ifp (eq x a) (eq y b) (el (pr x y) F)) x1 (ab x2 (ifp (eq x1 a) (eq x2 b) (el (pr x1 x2) F))))
    (elabed ((eq x1 x) x2 y (ifp (eq x1 a) (eq x2 b) (el (pr x1 x2) F)) (ifp (eq x a) (eq y b) (el (pr x y) F)))
      (ifpeqd ((an (eq x1 x) (eq x2 y)) (eq x1 a) (eq x a) (eq x2 b) (eq y b) (el (pr x1 x2) F) (el (pr x y) F))
        (eqeq1d ((an (eq x1 x) (eq x2 y)) x1 x a)
          (anl ((eq x1 x) (eq x2 y))))
        (eqeq1d ((an (eq x1 x) (eq x2 y)) x2 y b)
          (anr ((eq x1 x) (eq x2 y))))
        (eleq1d (F (an (eq x1 x) (eq x2 y)) (pr x1 x2) (pr x y))
          (imp ((eq x1 x) (eq x2 y) (eq (pr x1 x2) (pr x y)))
            (preq (x1 x x2 y)))))))))

(theorem writeEq ((F set ()) (a nat ()) (b nat ())) ()
  (eq (app (write F a b) a) b)
((y nat))
(trud ((eq (app (write F a b) a) b))
  (:conv (im (tru) (eq (app (write F a b) a) b))
    (im
      (tru)
      (eq
        (:unfold app ((write F a b) a) (y)
          (the (ab y (el (pr a y) (write F a b)))))
        b))
    (eqtheabd ((tru) b y (el (pr a y) (write F a b)))
      (a1i ((tru) (iff (el (pr a y) (write F a b)) (eq y b)))
        (ax_mp ((iff (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)) (iff (el (pr a y) (write F a b)) (eq y b)))
          (ax_mp ((iff (el (pr a y) (write F a b)) (ifp (eq a a) (eq y b) (el (pr a y) F))) (im (iff (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)) (iff (el (pr a y) (write F a b)) (eq y b))))
            (bitr ((el (pr a y) (write F a b)) (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)))
            (elwrite (F a b a y)))
          (ax_mp ((eq a a) (iff (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)))
            (ifppos ((eq a a) (eq y b) (el (pr a y) F)))
            (eqid (a)))))))))

(theorem writeNe ((F set ()) (a nat ()) (b nat ()) (x nat ())) ()
  (im (ne x a) (eq (app (write F a b) x) (app F x)))
((y nat))
(syl ((ne x a) (al y (iff (el (pr x y) (write F a b)) (el (pr x y) F))) (eq (app (write F a b) x) (app F x)))
  (eqapp ((write F a b) F x y))
  (iald (y (ne x a) (iff (el (pr x y) (write F a b)) (el (pr x y) F)))
    (syl5bb ((ne x a) (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F))
      (elwrite (F a b x y))
      (:conv (im (ne x a) (iff (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F)))
        (im
          (:unfold ne (x a) ()
            (not (eq x a)))
          (iff (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F)))
        (ifpneg ((eq x a) (eq y b) (el (pr x y) F))))))))

(local theorem writeisf ((F set ()) (a nat ()) (b nat ())) ()
  (im (isfun F) (isfun (write F a b)))
((x nat) (y nat) (z nat))
(:let H1 (elwrite (F a b x z))
(:conv (im (isfun F) (isfun (write F a b)))
  (im
    (isfun F)
    (:unfold isfun ((write F a b)) (x y z)
      (al x (al y (al z (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z))))))))
  (iald (x (isfun F) (al y (al z (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z))))))
    (iald (y (isfun F) (al z (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z)))))
      (iald (z (isfun F) (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z))))
        (syl5bi ((isfun F) (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (im (el (pr x z) (write F a b)) (eq y z)))
          (elwrite (F a b x y))
          (:conv (im (isfun F) (im (ifp (eq x a) (eq y b) (el (pr x y) F)) (im (el (pr x z) (write F a b)) (eq y z))))
            (im
              (isfun F)
              (im
                (:unfold ifp ((eq x a) (eq y b) (el (pr x y) F)) ()
                  (or (an (eq x a) (eq y b)) (an (not (eq x a)) (el (pr x y) F))))
                (im (el (pr x z) (write F a b)) (eq y z))))
            (eorda ((isfun F) (an (eq x a) (eq y b)) (an (not (eq x a)) (el (pr x y) F)) (im (el (pr x z) (write F a b)) (eq y z)))
              (syl5bi ((an (isfun F) (an (eq x a) (eq y b))) (el (pr x z) (write F a b)) (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z))
                H1
                (mpbird ((an (isfun F) (an (eq x a) (eq y b))) (im (eq z b) (eq y z)) (im (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z)))
                  (imeq1d ((an (isfun F) (an (eq x a) (eq y b))) (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq z b) (eq y z))
                    (syl ((an (isfun F) (an (eq x a) (eq y b))) (eq x a) (iff (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq z b)))
                      (ifppos ((eq x a) (eq z b) (el (pr x z) F)))
                      (anrl ((isfun F) (eq x a) (eq y b)))))
                  (syl ((an (isfun F) (an (eq x a) (eq y b))) (eq y b) (im (eq z b) (eq y z)))
                    (eqtr4 (y b z))
                    (anrr ((isfun F) (eq x a) (eq y b))))))
              (syl5bi ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) (write F a b)) (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z))
                H1
                (mpbird ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (im (el (pr x z) F) (eq y z)) (im (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z)))
                  (imeq1d ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (ifp (eq x a) (eq z b) (el (pr x z) F)) (el (pr x z) F) (eq y z))
                    (syl ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (not (eq x a)) (iff (ifp (eq x a) (eq z b) (el (pr x z) F)) (el (pr x z) F)))
                      (ifpneg ((eq x a) (eq z b) (el (pr x z) F)))
                      (anrl ((isfun F) (not (eq x a)) (el (pr x y) F)))))
                  (exp ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F) (eq y z))
                    (isfd (F (an (an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F)) x y z)
                      (anll ((isfun F) (an (not (eq x a)) (el (pr x y) F)) (el (pr x z) F)))
                      (anwl ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F) (el (pr x y) F))
                        (anrr ((isfun F) (not (eq x a)) (el (pr x y) F))))
                      (anr ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F))))))))))))))))

(local theorem writeres ((F set ()) (a nat ()) (b nat ()) (x nat)) ()
  (eqs (write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))
((p nat))
(:let H1 (fstsnd (p))
(eqri ((write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))) p)
  (ax_mp ((iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el p (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
    (ax_mp ((iff (el (pr (fst p) (snd p)) (write F a b)) (el p (write F a b))) (im (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el p (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
      (bitr3 ((el p (write F a b)) (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
      (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (write F a b))))
        (eleq1 ((write F a b) (pr (fst p) (snd p)) p))
        H1))
    (ax_mp ((iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
      (ax_mp ((iff (el (pr (fst p) (snd p)) (write F a b)) (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F))) (im (iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
        (bitr ((el (pr (fst p) (snd p)) (write F a b)) (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
        (elwrite (F a b (fst p) (snd p))))
      (ax_mp ((iff (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
        (ax_mp ((iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b)))) (im (iff (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
          (bitr ((ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
          (:conv (iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))))
            (iff
              (:unfold ifp ((eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) ()
                (or (an (eq (fst p) a) (eq (snd p) b)) (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F))))
              (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))))
            (orcomb ((an (eq (fst p) a) (eq (snd p) b)) (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F))))))
        (ax_mp ((iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
          (ax_mp ((iff (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (im (iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
            (bitr4 ((or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
            (ax_mp ((iff (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))) (iff (or (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
              (oreq1 ((an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))
              (ax_mp ((iff (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (not (eq (fst p) a)))) (iff (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))))
                (ax_mp ((iff (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (not (eq (fst p) a)))) (im (iff (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (not (eq (fst p) a)))) (iff (an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))))))
                  (bitr4 ((an (not (eq (fst p) a)) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (not (eq (fst p) a))) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))))
                  (ancomb ((not (eq (fst p) a)) (el (pr (fst p) (snd p)) F))))
                (aneq2i ((el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))) (not (eq (fst p) a)))
                  (elabe (x (fst p) (ne x a) (not (eq (fst p) a)))
                    (:conv (im (eq x (fst p)) (iff (ne x a) (not (eq (fst p) a))))
                      (im
                        (eq x (fst p))
                        (iff
                          (ne x a)
                          (:sym (:unfold ne ((fst p) a) ()
                            (not (eq (fst p) a))))))
                      (neeq1 (x (fst p) a))))))))
          (ax_mp ((iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
            (ax_mp ((iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (im (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))))
              (bitr3 ((el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
              (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
                (eleq1 ((Union (res F (ab x (ne x a))) (ns (sn (pr a b)))) (pr (fst p) (snd p)) p))
                H1))
            (ax_mp ((iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
              (ax_mp ((iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b)))))) (im (iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))))
                (bitr ((el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
                (elun ((res F (ab x (ne x a))) (ns (sn (pr a b))) (pr (fst p) (snd p)))))
              (ax_mp ((iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))) (iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
                (ax_mp ((iff (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))) (im (iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))) (iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))))
                  (oreq ((el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))))
                  (prelres (F (ab x (ne x a)) (fst p) (snd p))))
                (ax_mp ((iff (eq (pr (fst p) (snd p)) (pr a b)) (an (eq (fst p) a) (eq (snd p) b))) (iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))))
                  (ax_mp ((iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (eq (pr (fst p) (snd p)) (pr a b))) (im (iff (eq (pr (fst p) (snd p)) (pr a b)) (an (eq (fst p) a) (eq (snd p) b))) (iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b)))))
                    (bitr ((el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (eq (pr (fst p) (snd p)) (pr a b)) (an (eq (fst p) a) (eq (snd p) b))))
                    (elsn ((pr (fst p) (snd p)) (pr a b))))
                  (prth ((fst p) a (snd p) b)))))))))))))

(local theorem writefin ((F set ()) (a nat ()) (b nat ())) ()
  (im (finite F) (finite (write F a b)))
((x nat))
(sylibr ((finite F) (finite (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (finite (write F a b)))
  (ax_mp ((eqs (write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (iff (finite (write F a b)) (finite (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
    (fineq ((write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))
    (writeres (F a b x)))
  (sylc ((finite F) (finite (res F (ab x (ne x a)))) (finite (ns (sn (pr a b)))) (finite (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))
    (unfin ((res F (ab x (ne x a))) (ns (sn (pr a b)))))
    (resfin ((ab x (ne x a)) F))
    (a1i ((finite F) (finite (ns (sn (pr a b)))))
      (finns ((sn (pr a b))))))))

(local theorem dmwrite ((F set ()) (a nat ()) (b nat ())) ()
  (eqs (Dom (write F a b)) (Union (Dom F) (ns (sn a))))
((x nat) (y nat))
(:let H1 (elwrite (F a b x y))
(:let H2 (ifpneg ((eq x a) (eq y b) (el (pr x y) F)))
(eqri ((Dom (write F a b)) (Union (Dom F) (ns (sn a))) x)
  (ax_mp ((iff (el x (Union (Dom F) (ns (sn a)))) (or (eq x a) (el x (Dom F)))) (iff (el x (Dom (write F a b))) (el x (Union (Dom F) (ns (sn a))))))
    (ax_mp ((iff (el x (Dom (write F a b))) (or (eq x a) (el x (Dom F)))) (im (iff (el x (Union (Dom F) (ns (sn a)))) (or (eq x a) (el x (Dom F)))) (iff (el x (Dom (write F a b))) (el x (Union (Dom F) (ns (sn a)))))))
      (bitr4 ((el x (Dom (write F a b))) (or (eq x a) (el x (Dom F))) (el x (Union (Dom F) (ns (sn a))))))
      (ibii ((el x (Dom (write F a b))) (or (eq x a) (el x (Dom F))))
        (sylbi ((el x (Dom (write F a b))) (ex y (el (pr x y) (write F a b))) (or (eq x a) (el x (Dom F))))
          (eldm ((write F a b) x y))
          (eex (y (el (pr x y) (write F a b)) (or (eq x a) (el x (Dom F))))
            (sylbi ((el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (or (eq x a) (el x (Dom F))))
              H1
              (:conv (im (ifp (eq x a) (eq y b) (el (pr x y) F)) (or (eq x a) (el x (Dom F))))
                (im
                  (ifp (eq x a) (eq y b) (el (pr x y) F))
                  (:unfold or ((eq x a) (el x (Dom F))) ()
                    (im (not (eq x a)) (el x (Dom F)))))
                (com12 ((not (eq x a)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el x (Dom F)))
                  (syl6 ((not (eq x a)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F) (el x (Dom F)))
                    (preldm (F x y))
                    (bi1d ((not (eq x a)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F))
                      H2)))))))
        (casesd ((or (eq x a) (el x (Dom F))) (eq x a) (el x (Dom (write F a b))))
          (a1i ((or (eq x a) (el x (Dom F))) (im (eq x a) (el x (Dom (write F a b)))))
            (syl ((eq x a) (el (pr x b) (write F a b)) (el x (Dom (write F a b))))
              (preldm ((write F a b) x b))
              (sylibr ((eq x a) (ifp (eq x a) (eq b b) (el (pr x b) F)) (el (pr x b) (write F a b)))
                (elwrite (F a b x b))
                (mpbiri ((eq x a) (eq b b) (ifp (eq x a) (eq b b) (el (pr x b) F)))
                  (eqid (b))
                  (ifppos ((eq x a) (eq b b) (el (pr x b) F)))))))
          (:conv (im (or (eq x a) (el x (Dom F))) (im (not (eq x a)) (el x (Dom (write F a b)))))
            (im
              (:unfold or ((eq x a) (el x (Dom F))) ()
                (im (not (eq x a)) (el x (Dom F))))
              (im (not (eq x a)) (el x (Dom (write F a b)))))
            (a2i ((not (eq x a)) (el x (Dom F)) (el x (Dom (write F a b))))
              (syl5bi ((not (eq x a)) (el x (Dom F)) (ex y (el (pr x y) F)) (el x (Dom (write F a b))))
                (eldm (F x y))
                (eexd (y (not (eq x a)) (el (pr x y) F) (el x (Dom (write F a b))))
                  (mpbii ((not (eq x a)) (im (el (pr x y) (write F a b)) (el x (Dom (write F a b)))) (im (el (pr x y) F) (el x (Dom (write F a b)))))
                    (preldm ((write F a b) x y))
                    (imeq1d ((not (eq x a)) (el (pr x y) (write F a b)) (el (pr x y) F) (el x (Dom (write F a b))))
                      (syl5bb ((not (eq x a)) (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F))
                        H1
                        H2))))))))))
    (ax_mp ((iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))) (iff (el x (Union (Dom F) (ns (sn a)))) (or (eq x a) (el x (Dom F)))))
      (ax_mp ((iff (el x (Union (Dom F) (ns (sn a)))) (or (el x (Dom F)) (el x (ns (sn a))))) (im (iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))) (iff (el x (Union (Dom F) (ns (sn a)))) (or (eq x a) (el x (Dom F))))))
        (bitr ((el x (Union (Dom F) (ns (sn a)))) (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))))
        (elun ((Dom F) (ns (sn a)) x)))
      (ax_mp ((iff (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))) (iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))))
        (ax_mp ((iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (el x (ns (sn a))) (el x (Dom F)))) (im (iff (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))) (iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F))))))
          (bitr ((or (el x (Dom F)) (el x (ns (sn a)))) (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))))
          (orcomb ((el x (Dom F)) (el x (ns (sn a))))))
        (ax_mp ((iff (el x (ns (sn a))) (eq x a)) (iff (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))))
          (oreq1 ((el x (ns (sn a))) (eq x a) (el x (Dom F))))
          (elsn (x a))))))))))

(local theorem rnwrite ((F set ()) (a nat ()) (b nat ())) ()
  (subset (Ran (write F a b)) (Union (Ran F) (ns (sn b))))
((x nat) (y nat))
(:conv (subset (Ran (write F a b)) (Union (Ran F) (ns (sn b))))
  (:unfold subset ((Ran (write F a b)) (Union (Ran F) (ns (sn b)))) (x)
    (al x (im (el x (Ran (write F a b))) (el x (Union (Ran F) (ns (sn b)))))))
  (ax_gen (x (im (el x (Ran (write F a b))) (el x (Union (Ran F) (ns (sn b))))))
    (sylbi ((el x (Ran (write F a b))) (ex y (el (pr y x) (write F a b))) (el x (Union (Ran F) (ns (sn b)))))
      (elrn ((write F a b) x y))
      (eex (y (el (pr y x) (write F a b)) (el x (Union (Ran F) (ns (sn b)))))
        (sylbi ((el (pr y x) (write F a b)) (ifp (eq y a) (eq x b) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b)))))
          (elwrite (F a b y x))
          (ax_mp ((im (an (not (eq y a)) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b))))) (im (ifp (eq y a) (eq x b) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b))))))
            (ax_mp ((im (an (eq y a) (eq x b)) (el x (Union (Ran F) (ns (sn b))))) (im (im (an (not (eq y a)) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b))))) (im (ifp (eq y a) (eq x b) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b)))))))
              (:conv (im (im (an (eq y a) (eq x b)) (el x (Union (Ran F) (ns (sn b))))) (im (im (an (not (eq y a)) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b))))) (im (ifp (eq y a) (eq x b) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b)))))))
                (im
                  (im (an (eq y a) (eq x b)) (el x (Union (Ran F) (ns (sn b)))))
                  (im
                    (im (an (not (eq y a)) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b)))))
                    (im
                      (:unfold ifp ((eq y a) (eq x b) (el (pr y x) F)) ()
                        (or (an (eq y a) (eq x b)) (an (not (eq y a)) (el (pr y x) F))))
                      (el x (Union (Ran F) (ns (sn b)))))))
                (eor ((an (eq y a) (eq x b)) (an (not (eq y a)) (el (pr y x) F)) (el x (Union (Ran F) (ns (sn b)))))))
              (syl ((an (eq y a) (eq x b)) (el x (ns (sn b))) (el x (Union (Ran F) (ns (sn b)))))
                (elun2 ((Ran F) (ns (sn b)) x))
                (sylibr ((an (eq y a) (eq x b)) (eq x b) (el x (ns (sn b))))
                  (elsn (x b))
                  (anr ((eq y a) (eq x b))))))
            (syl ((an (not (eq y a)) (el (pr y x) F)) (el x (Ran F)) (el x (Union (Ran F) (ns (sn b)))))
              (elun1 ((Ran F) (ns (sn b)) x))
              (anwr ((not (eq y a)) (el (pr y x) F) (el x (Ran F)))
                (prelrn (F y x)))))))))))

(local theorem writeArrow ((A set ()) (B set ()) (G wff ()) (a nat ()) (b nat ()) (f nat ()) (g nat ()))
  ((hf (im G (el f (Arrow A B))))
   (ha (im G (el a A)))
   (hb (im G (el b B)))
   (h (im G (eqs (write (ns f) a b) (ns g)))))
  (im G (el g (Arrow A B)))
()
(sylibr (G (func (ns g) A B) (el g (Arrow A B)))
  (elArrow (A B g))
  (:conv (im G (func (ns g) A B))
    (im
      G
      (:unfold func ((ns g) A B) ()
        (an (an (isfun (ns g)) (eqs (Dom (ns g)) A)) (subset (Ran (ns g)) B))))
    (iand (G (an (isfun (ns g)) (eqs (Dom (ns g)) A)) (subset (Ran (ns g)) B))
      (iand (G (isfun (ns g)) (eqs (Dom (ns g)) A))
        (mpbid (G (isfun (write (ns f) a b)) (isfun (ns g)))
          (isfeqd (G (write (ns f) a b) (ns g))
            h)
          (syl (G (isfun (ns f)) (isfun (write (ns f) a b)))
            (writeisf ((ns f) a b))
            (syl (G (el f (Arrow A B)) (isfun (ns f)))
              (Arrowisf (A B f))
              hf)))
        (eqstr3d ((Dom (ns g)) (Dom (write (ns f) a b)) A G)
          (dmeqd (G (write (ns f) a b) (ns g))
            h)
          (syl5eqs ((Dom (write (ns f) a b)) (Union (Dom (ns f)) (ns (sn a))) A G)
            (dmwrite ((ns f) a b))
            (eqstrd ((Union (Dom (ns f)) (ns (sn a))) (Union A (ns (sn a))) A G)
              (uneq1d (G (Dom (ns f)) A (ns (sn a)))
                (syl (G (el f (Arrow A B)) (eqs (Dom (ns f)) A))
                  (Arrowdm (A B f))
                  hf))
              (sylib (G (subset (ns (sn a)) A) (eqs (Union A (ns (sn a))) A))
                (equn2 ((ns (sn a)) A))
                (sylibr (G (el a A) (subset (ns (sn a)) A))
                  (snss (A a))
                  ha))))))
      (mpbid (G (subset (Ran (write (ns f) a b)) B) (subset (Ran (ns g)) B))
        (sseq1d (G (Ran (write (ns f) a b)) (Ran (ns g)) B)
          (rneqd (G (write (ns f) a b) (ns g))
            h))
        (syl (G (subset (Union (Ran (ns f)) (ns (sn b))) B) (subset (Ran (write (ns f) a b)) B))
          (ax_mp ((subset (Ran (write (ns f) a b)) (Union (Ran (ns f)) (ns (sn b)))) (im (subset (Union (Ran (ns f)) (ns (sn b))) B) (subset (Ran (write (ns f) a b)) B)))
            (sstr ((Ran (write (ns f) a b)) (Union (Ran (ns f)) (ns (sn b))) B))
            (rnwrite ((ns f) a b)))
          (sylibr (G (an (subset (Ran (ns f)) B) (subset (ns (sn b)) B)) (subset (Union (Ran (ns f)) (ns (sn b))) B))
            (unss ((Ran (ns f)) (ns (sn b)) B))
            (iand (G (subset (Ran (ns f)) B) (subset (ns (sn b)) B))
              (syl (G (el f (Arrow A B)) (subset (Ran (ns f)) B))
                (Arrowrn (A B f))
                hf)
              (sylibr (G (el b B) (subset (ns (sn b)) B))
                (snss (B b))
                hb)))))))))

(local def srecaux ((S set ()) (n nat ())) (nat ())
((a nat) (b nat))
(recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))

(local theorem srecauxeqd ((_G wff ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_Sh (im _G (eqs _S1 _S2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (srecaux _S1 _n1) (srecaux _S2 _n2)))
((a nat) (b nat))
(:conv (im _G (eq (srecaux _S1 _n1) (srecaux _S2 _n2)))
  (im
    _G
    (eq
      (:unfold srecaux (_S1 _n1) (a b)
        (recn (d0) (slam a (lam b (lower (write (ns b) a (app _S1 b))))) _n1))
      (:unfold srecaux (_S2 _n2) (a b)
        (recn (d0) (slam a (lam b (lower (write (ns b) a (app _S2 b))))) _n2))))
  (recneqd (_G (d0) (d0) (slam a (lam b (lower (write (ns b) a (app _S1 b))))) (slam a (lam b (lower (write (ns b) a (app _S2 b))))) _n1 _n2)
    (eqidd (_G (d0)))
    (slameqd (_G a (lam b (lower (write (ns b) a (app _S1 b)))) (lam b (lower (write (ns b) a (app _S2 b)))))
      (lameqd (_G b (lower (write (ns b) a (app _S1 b))) (lower (write (ns b) a (app _S2 b))))
        (lowereqd (_G (write (ns b) a (app _S1 b)) (write (ns b) a (app _S2 b)))
          (writeeqd (_G (ns b) (ns b) a a (app _S1 b) (app _S2 b))
            (eqsidd (_G (ns b)))
            (eqidd (_G a))
            (appeqd (_G _S1 _S2 b b)
              _Sh
              (eqidd (_G b)))))))
    _nh)))

(local theorem srecauxeq ((_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _S1 _S2) (im (eq _n1 _n2) (eq (srecaux _S1 _n1) (srecaux _S2 _n2))))
()
(exp ((eqs _S1 _S2) (eq _n1 _n2) (eq (srecaux _S1 _n1) (srecaux _S2 _n2)))
  (srecauxeqd ((an (eqs _S1 _S2) (eq _n1 _n2)) _S1 _S2 _n1 _n2)
    (anl ((eqs _S1 _S2) (eq _n1 _n2)))
    (anr ((eqs _S1 _S2) (eq _n1 _n2))))))

(local theorem srecauxeq1d ((_G wff ()) (_S1 set ()) (_S2 set ()) (n nat ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eq (srecaux _S1 n) (srecaux _S2 n)))
()
(srecauxeqd (_G _S1 _S2 n n)
  _h
  (eqidd (_G n))))

(local theorem srecauxeq1 ((_S1 set ()) (_S2 set ()) (n nat ())) ()
  (im (eqs _S1 _S2) (eq (srecaux _S1 n) (srecaux _S2 n)))
()
(srecauxeq1d ((eqs _S1 _S2) _S1 _S2 n)
  (id ((eqs _S1 _S2)))))

(local theorem srecauxeq2d ((_G wff ()) (S set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (srecaux S _n1) (srecaux S _n2)))
()
(srecauxeqd (_G S S _n1 _n2)
  (eqsidd (_G S))
  _h))

(local theorem srecauxeq2 ((S set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (srecaux S _n1) (srecaux S _n2)))
()
(srecauxeq2d ((eq _n1 _n2) S _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem srecaux0 ((S set ())) ()
  (eq (srecaux S (d0)) (d0))
((x1 nat) (x2 nat))
(:conv (eq (srecaux S (d0)) (d0))
  (eq
    (:unfold srecaux (S (d0)) (x1 x2)
      (recn (d0) (slam x1 (lam x2 (lower (write (ns x2) x1 (app S x2))))) (d0)))
    (d0))
  (recn0 ((slam x1 (lam x2 (lower (write (ns x2) x1 (app S x2))))) (d0)))))

(local theorem srecauxS ((S set ()) (n nat ())) ()
  (eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n))))
((a nat) (b nat))
(:let H1 (anr ((eq a n) (eq b (srecaux S n))))
(mpbir ((eq (srecaux S (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))) (eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n)))))
  (ax_mp ((finite (write (ns (srecaux S n)) n (app S (srecaux S n)))) (iff (eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n)))) (eq (srecaux S (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))))
    (eqlower2 ((write (ns (srecaux S n)) n (app S (srecaux S n))) (srecaux S (suc n))))
    (ax_mp ((finite (ns (srecaux S n))) (finite (write (ns (srecaux S n)) n (app S (srecaux S n)))))
      (writefin ((ns (srecaux S n)) n (app S (srecaux S n))))
      (finns ((srecaux S n)))))
  (ax_mp ((eq (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))) (eq (srecaux S (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))))
    (ax_mp ((eq (srecaux S (suc n)) (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n)))) (im (eq (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))) (eq (srecaux S (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))))
      (eqtr ((srecaux S (suc n)) (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))))
      (:conv (eq (srecaux S (suc n)) (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))))
        (eq
          (:unfold srecaux (S (suc n)) (a b)
            (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) (suc n)))
          (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))))
        (recnS ((slam a (lam b (lower (write (ns b) a (app S b))))) n (d0)))))
    (:conv (eq (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))
      (eq
        (app
          (slam a (lam b (lower (write (ns b) a (app S b)))))
          (pr
            n
            (:sym (:unfold srecaux (S n) (a b)
              (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n)))))
        (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))
      (appslame (n (srecaux S n) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))) a (lam b (lower (write (ns b) a (app S b)))))
        (applamed ((eq a n) (srecaux S n) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))) b (lower (write (ns b) a (app S b))))
          (lowereqd ((an (eq a n) (eq b (srecaux S n))) (write (ns b) a (app S b)) (write (ns (srecaux S n)) n (app S (srecaux S n))))
            (writeeqd ((an (eq a n) (eq b (srecaux S n))) (ns b) (ns (srecaux S n)) a n (app S b) (app S (srecaux S n)))
              (nseqd ((an (eq a n) (eq b (srecaux S n))) b (srecaux S n))
                H1)
              (anl ((eq a n) (eq b (srecaux S n))))
              (appeq2d ((an (eq a n) (eq b (srecaux S n))) S b (srecaux S n))
                H1))))))))))

(local theorem dmsrecaux ((S set ()) (n nat ())) ()
  (eqs (Dom (ns (srecaux S n))) (ns (upto n)))
((x nat) (y nat) (z nat))
(:let H1 (id ((eq x n)))
(:let H2 (id ((eq x (d0))))
(:let H3 (id ((eq x y)))
(:let H4 (id ((eq x (suc y))))
(ind (x y n (eqs (Dom (ns (srecaux S x))) (ns (upto x))) (eqs (Dom (ns (srecaux S (d0)))) (ns (upto (d0)))) (eqs (Dom (ns (srecaux S n))) (ns (upto n))) (eqs (Dom (ns (srecaux S y))) (ns (upto y))) (eqs (Dom (ns (srecaux S (suc y)))) (ns (upto (suc y)))))
  (eqseqd ((eq x n) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S n))) (ns (upto x)) (ns (upto n)))
    (dmeqd ((eq x n) (ns (srecaux S x)) (ns (srecaux S n)))
      (nseqd ((eq x n) (srecaux S x) (srecaux S n))
        (srecauxeqd ((eq x n) S S x n)
          (eqsidd ((eq x n) S))
          H1)))
    (nseqd ((eq x n) (upto x) (upto n))
      (uptoeqd ((eq x n) x n)
        H1)))
  (eqseqd ((eq x (d0)) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S (d0)))) (ns (upto x)) (ns (upto (d0))))
    (dmeqd ((eq x (d0)) (ns (srecaux S x)) (ns (srecaux S (d0))))
      (nseqd ((eq x (d0)) (srecaux S x) (srecaux S (d0)))
        (srecauxeqd ((eq x (d0)) S S x (d0))
          (eqsidd ((eq x (d0)) S))
          H2)))
    (nseqd ((eq x (d0)) (upto x) (upto (d0)))
      (uptoeqd ((eq x (d0)) x (d0))
        H2)))
  (eqseqd ((eq x y) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S y))) (ns (upto x)) (ns (upto y)))
    (dmeqd ((eq x y) (ns (srecaux S x)) (ns (srecaux S y)))
      (nseqd ((eq x y) (srecaux S x) (srecaux S y))
        (srecauxeqd ((eq x y) S S x y)
          (eqsidd ((eq x y) S))
          H3)))
    (nseqd ((eq x y) (upto x) (upto y))
      (uptoeqd ((eq x y) x y)
        H3)))
  (eqseqd ((eq x (suc y)) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S (suc y)))) (ns (upto x)) (ns (upto (suc y))))
    (dmeqd ((eq x (suc y)) (ns (srecaux S x)) (ns (srecaux S (suc y))))
      (nseqd ((eq x (suc y)) (srecaux S x) (srecaux S (suc y)))
        (srecauxeqd ((eq x (suc y)) S S x (suc y))
          (eqsidd ((eq x (suc y)) S))
          H4)))
    (nseqd ((eq x (suc y)) (upto x) (upto (suc y)))
      (uptoeqd ((eq x (suc y)) x (suc y))
        H4)))
  (ax_mp ((eqs (Dom (ns (d0))) (ns (upto (d0)))) (eqs (Dom (ns (srecaux S (d0)))) (ns (upto (d0)))))
    (ax_mp ((eqs (Dom (ns (srecaux S (d0)))) (Dom (ns (d0)))) (im (eqs (Dom (ns (d0))) (ns (upto (d0)))) (eqs (Dom (ns (srecaux S (d0)))) (ns (upto (d0))))))
      (eqstr ((Dom (ns (srecaux S (d0)))) (Dom (ns (d0))) (ns (upto (d0)))))
      (ax_mp ((eqs (ns (srecaux S (d0))) (ns (d0))) (eqs (Dom (ns (srecaux S (d0)))) (Dom (ns (d0)))))
        (dmeq ((ns (srecaux S (d0))) (ns (d0))))
        (ax_mp ((eq (srecaux S (d0)) (d0)) (eqs (ns (srecaux S (d0))) (ns (d0))))
          (nseq ((srecaux S (d0)) (d0)))
          (srecaux0 (S)))))
    (ax_mp ((eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (d0)))))
      (ax_mp ((eqs (Dom (ns (d0))) (ns (d0))) (im (eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (d0))))))
        (eqstr4 ((Dom (ns (d0))) (ns (d0)) (ns (upto (d0)))))
        (dm0 ()))
      (ax_mp ((eq (upto (d0)) (d0)) (eqs (ns (upto (d0))) (ns (d0))))
        (nseq ((upto (d0)) (d0)))
        (upto0 ()))))
  (eqstr4g ((Union (Dom (ns (srecaux S y))) (ns (sn y))) (Union (ns (upto y)) (ns (sn y))) (Dom (ns (srecaux S (suc y)))) (ns (upto (suc y))) (eqs (Dom (ns (srecaux S y))) (ns (upto y))))
    (ax_mp ((eqs (Dom (write (ns (srecaux S y)) y (app S (srecaux S y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))) (eqs (Dom (ns (srecaux S (suc y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))))
      (ax_mp ((eqs (Dom (ns (srecaux S (suc y)))) (Dom (write (ns (srecaux S y)) y (app S (srecaux S y))))) (im (eqs (Dom (write (ns (srecaux S y)) y (app S (srecaux S y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))) (eqs (Dom (ns (srecaux S (suc y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y))))))
        (eqstr ((Dom (ns (srecaux S (suc y)))) (Dom (write (ns (srecaux S y)) y (app S (srecaux S y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))))
        (ax_mp ((eqs (ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))) (eqs (Dom (ns (srecaux S (suc y)))) (Dom (write (ns (srecaux S y)) y (app S (srecaux S y))))))
          (dmeq ((ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))))
          (srecauxS (S y))))
      (dmwrite ((ns (srecaux S y)) y (app S (srecaux S y)))))
    (eqri ((ns (upto (suc y))) (Union (ns (upto y)) (ns (sn y))) z)
      (ax_mp ((iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (el z (ns (upto (suc y)))) (el z (Union (ns (upto y)) (ns (sn y))))))
        (ax_mp ((iff (el z (ns (upto (suc y)))) (lt z (suc y))) (im (iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (el z (ns (upto (suc y)))) (el z (Union (ns (upto y)) (ns (sn y)))))))
          (bitr ((el z (ns (upto (suc y)))) (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))))
          (elupto (z (suc y))))
        (ax_mp ((iff (le z y) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))))
          (ax_mp ((iff (le z y) (lt z (suc y))) (im (iff (le z y) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y)))))))
            (bitr3 ((lt z (suc y)) (le z y) (el z (Union (ns (upto y)) (ns (sn y))))))
            (leltsuc (z y)))
          (ax_mp ((iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y))) (iff (le z y) (el z (Union (ns (upto y)) (ns (sn y))))))
            (ax_mp ((iff (le z y) (or (lt z y) (eq z y))) (im (iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y))) (iff (le z y) (el z (Union (ns (upto y)) (ns (sn y)))))))
              (bitr4 ((le z y) (or (lt z y) (eq z y)) (el z (Union (ns (upto y)) (ns (sn y))))))
              (leloe (z y)))
            (ax_mp ((iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))) (iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y))))
              (ax_mp ((iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (el z (ns (upto y))) (el z (ns (sn y))))) (im (iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))) (iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y)))))
                (bitr ((el z (Union (ns (upto y)) (ns (sn y)))) (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))))
                (elun ((ns (upto y)) (ns (sn y)) z)))
              (ax_mp ((iff (el z (ns (sn y))) (eq z y)) (iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))))
                (ax_mp ((iff (el z (ns (upto y))) (lt z y)) (im (iff (el z (ns (sn y))) (eq z y)) (iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y)))))
                  (oreq ((el z (ns (upto y))) (lt z y) (el z (ns (sn y))) (eq z y)))
                  (elupto (z y)))
                (elsn (z y))))))))
    (uneq1 ((Dom (ns (srecaux S y))) (ns (upto y)) (ns (sn y)))))))))))

(local theorem srecauxisf ((S set ()) (n nat ())) ()
  (isfun (ns (srecaux S n)))
((x nat) (y nat))
(ind (x y n (isfun (ns (srecaux S x))) (isfun (ns (srecaux S (d0)))) (isfun (ns (srecaux S n))) (isfun (ns (srecaux S y))) (isfun (ns (srecaux S (suc y)))))
  (isfeqd ((eq x n) (ns (srecaux S x)) (ns (srecaux S n)))
    (nseqd ((eq x n) (srecaux S x) (srecaux S n))
      (srecauxeqd ((eq x n) S S x n)
        (eqsidd ((eq x n) S))
        (id ((eq x n))))))
  (isfeqd ((eq x (d0)) (ns (srecaux S x)) (ns (srecaux S (d0))))
    (nseqd ((eq x (d0)) (srecaux S x) (srecaux S (d0)))
      (srecauxeqd ((eq x (d0)) S S x (d0))
        (eqsidd ((eq x (d0)) S))
        (id ((eq x (d0)))))))
  (isfeqd ((eq x y) (ns (srecaux S x)) (ns (srecaux S y)))
    (nseqd ((eq x y) (srecaux S x) (srecaux S y))
      (srecauxeqd ((eq x y) S S x y)
        (eqsidd ((eq x y) S))
        (id ((eq x y))))))
  (isfeqd ((eq x (suc y)) (ns (srecaux S x)) (ns (srecaux S (suc y))))
    (nseqd ((eq x (suc y)) (srecaux S x) (srecaux S (suc y)))
      (srecauxeqd ((eq x (suc y)) S S x (suc y))
        (eqsidd ((eq x (suc y)) S))
        (id ((eq x (suc y)))))))
  (mpbir ((isfun (ns (d0))) (isfun (ns (srecaux S (d0)))))
    (ax_mp ((eqs (ns (srecaux S (d0))) (ns (d0))) (iff (isfun (ns (srecaux S (d0)))) (isfun (ns (d0)))))
      (isfeq ((ns (srecaux S (d0))) (ns (d0))))
      (ax_mp ((eq (srecaux S (d0)) (d0)) (eqs (ns (srecaux S (d0))) (ns (d0))))
        (nseq ((srecaux S (d0)) (d0)))
        (srecaux0 (S))))
    (isf0 ()))
  (sylibr ((isfun (ns (srecaux S y))) (isfun (write (ns (srecaux S y)) y (app S (srecaux S y)))) (isfun (ns (srecaux S (suc y)))))
    (ax_mp ((eqs (ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))) (iff (isfun (ns (srecaux S (suc y)))) (isfun (write (ns (srecaux S y)) y (app S (srecaux S y))))))
      (isfeq ((ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))))
      (srecauxS (S y)))
    (writeisf ((ns (srecaux S y)) y (app S (srecaux S y)))))))

(def srec ((S set ()) (n nat ())) (nat ())
()
(app (ns (srecaux S (suc n))) n))

(local theorem sreceqd ((_G wff ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_Sh (im _G (eqs _S1 _S2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (srec _S1 _n1) (srec _S2 _n2)))
()
(:conv (im _G (eq (srec _S1 _n1) (srec _S2 _n2)))
  (im
    _G
    (eq
      (:unfold srec (_S1 _n1) ()
        (app (ns (srecaux _S1 (suc _n1))) _n1))
      (:unfold srec (_S2 _n2) ()
        (app (ns (srecaux _S2 (suc _n2))) _n2))))
  (appeqd (_G (ns (srecaux _S1 (suc _n1))) (ns (srecaux _S2 (suc _n2))) _n1 _n2)
    (nseqd (_G (srecaux _S1 (suc _n1)) (srecaux _S2 (suc _n2)))
      (srecauxeqd (_G _S1 _S2 (suc _n1) (suc _n2))
        _Sh
        (suceqd (_G _n1 _n2)
          _nh)))
    _nh)))

(local theorem sreceq ((_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _S1 _S2) (im (eq _n1 _n2) (eq (srec _S1 _n1) (srec _S2 _n2))))
()
(exp ((eqs _S1 _S2) (eq _n1 _n2) (eq (srec _S1 _n1) (srec _S2 _n2)))
  (sreceqd ((an (eqs _S1 _S2) (eq _n1 _n2)) _S1 _S2 _n1 _n2)
    (anl ((eqs _S1 _S2) (eq _n1 _n2)))
    (anr ((eqs _S1 _S2) (eq _n1 _n2))))))

(local theorem sreceq1d ((_G wff ()) (_S1 set ()) (_S2 set ()) (n nat ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eq (srec _S1 n) (srec _S2 n)))
()
(sreceqd (_G _S1 _S2 n n)
  _h
  (eqidd (_G n))))

(local theorem sreceq1 ((_S1 set ()) (_S2 set ()) (n nat ())) ()
  (im (eqs _S1 _S2) (eq (srec _S1 n) (srec _S2 n)))
()
(sreceq1d ((eqs _S1 _S2) _S1 _S2 n)
  (id ((eqs _S1 _S2)))))

(local theorem sreceq2d ((_G wff ()) (S set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (srec S _n1) (srec S _n2)))
()
(sreceqd (_G S S _n1 _n2)
  (eqsidd (_G S))
  _h))

(local theorem sreceq2 ((S set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (srec S _n1) (srec S _n2)))
()
(sreceq2d ((eq _n1 _n2) S _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem srecauxapp ((S set ()) (a nat ()) (n nat ())) ()
  (im (lt a n) (eq (app (ns (srecaux S n)) a) (srec S a)))
((x nat) (y nat))
(:let H1 (eqidd ((eq x n) a))
(:let H2 (id ((eq x n)))
(:let H3 (eqidd ((eq x (d0)) a))
(:let H4 (id ((eq x (d0))))
(:let H5 (eqidd ((eq x y) a))
(:let H6 (id ((eq x y)))
(:let H7 (eqidd ((eq x (suc y)) a))
(:let H8 (id ((eq x (suc y))))
(ind (x y n (im (lt a x) (eq (app (ns (srecaux S x)) a) (srec S a))) (im (lt a (d0)) (eq (app (ns (srecaux S (d0))) a) (srec S a))) (im (lt a n) (eq (app (ns (srecaux S n)) a) (srec S a))) (im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (im (lt a (suc y)) (eq (app (ns (srecaux S (suc y))) a) (srec S a))))
  (imeqd ((eq x n) (lt a x) (lt a n) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S n)) a) (srec S a)))
    (lteqd ((eq x n) a a x n)
      H1
      H2)
    (eqeqd ((eq x n) (app (ns (srecaux S x)) a) (app (ns (srecaux S n)) a) (srec S a) (srec S a))
      (appeqd ((eq x n) (ns (srecaux S x)) (ns (srecaux S n)) a a)
        (nseqd ((eq x n) (srecaux S x) (srecaux S n))
          (srecauxeqd ((eq x n) S S x n)
            (eqsidd ((eq x n) S))
            H2))
        H1)
      (eqidd ((eq x n) (srec S a)))))
  (imeqd ((eq x (d0)) (lt a x) (lt a (d0)) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S (d0))) a) (srec S a)))
    (lteqd ((eq x (d0)) a a x (d0))
      H3
      H4)
    (eqeqd ((eq x (d0)) (app (ns (srecaux S x)) a) (app (ns (srecaux S (d0))) a) (srec S a) (srec S a))
      (appeqd ((eq x (d0)) (ns (srecaux S x)) (ns (srecaux S (d0))) a a)
        (nseqd ((eq x (d0)) (srecaux S x) (srecaux S (d0)))
          (srecauxeqd ((eq x (d0)) S S x (d0))
            (eqsidd ((eq x (d0)) S))
            H4))
        H3)
      (eqidd ((eq x (d0)) (srec S a)))))
  (imeqd ((eq x y) (lt a x) (lt a y) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S y)) a) (srec S a)))
    (lteqd ((eq x y) a a x y)
      H5
      H6)
    (eqeqd ((eq x y) (app (ns (srecaux S x)) a) (app (ns (srecaux S y)) a) (srec S a) (srec S a))
      (appeqd ((eq x y) (ns (srecaux S x)) (ns (srecaux S y)) a a)
        (nseqd ((eq x y) (srecaux S x) (srecaux S y))
          (srecauxeqd ((eq x y) S S x y)
            (eqsidd ((eq x y) S))
            H6))
        H5)
      (eqidd ((eq x y) (srec S a)))))
  (imeqd ((eq x (suc y)) (lt a x) (lt a (suc y)) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
    (lteqd ((eq x (suc y)) a a x (suc y))
      H7
      H8)
    (eqeqd ((eq x (suc y)) (app (ns (srecaux S x)) a) (app (ns (srecaux S (suc y))) a) (srec S a) (srec S a))
      (appeqd ((eq x (suc y)) (ns (srecaux S x)) (ns (srecaux S (suc y))) a a)
        (nseqd ((eq x (suc y)) (srecaux S x) (srecaux S (suc y)))
          (srecauxeqd ((eq x (suc y)) S S x (suc y))
            (eqsidd ((eq x (suc y)) S))
            H8))
        H7)
      (eqidd ((eq x (suc y)) (srec S a)))))
  (ax_mp ((not (lt a (d0))) (im (lt a (d0)) (eq (app (ns (srecaux S (d0))) a) (srec S a))))
    (absurd ((lt a (d0)) (eq (app (ns (srecaux S (d0))) a) (srec S a))))
    (lt02 (a)))
  (syl5bir ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (lt a (suc y)) (le a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
    (leltsuc (a y))
    (syl5bi ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (le a y) (or (lt a y) (eq a y)) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
      (leloe (a y))
      (eord ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (lt a y) (eq a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
        (a2i ((lt a y) (eq (app (ns (srecaux S y)) a) (srec S a)) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
          (bi2d ((lt a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)) (eq (app (ns (srecaux S y)) a) (srec S a)))
            (eqeq1d ((lt a y) (app (ns (srecaux S (suc y))) a) (app (ns (srecaux S y)) a) (srec S a))
              (syl5eq ((lt a y) (app (ns (srecaux S (suc y))) a) (app (write (ns (srecaux S y)) y (app S (srecaux S y))) a) (app (ns (srecaux S y)) a))
                (ax_mp ((eqs (ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))) (eq (app (ns (srecaux S (suc y))) a) (app (write (ns (srecaux S y)) y (app S (srecaux S y))) a)))
                  (appeq1 ((ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y))) a))
                  (srecauxS (S y)))
                (syl ((lt a y) (ne a y) (eq (app (write (ns (srecaux S y)) y (app S (srecaux S y))) a) (app (ns (srecaux S y)) a)))
                  (writeNe ((ns (srecaux S y)) y (app S (srecaux S y)) a))
                  (ltne (a y)))))))
        (a1i ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (im (eq a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a))))
          (:conv (im (eq a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
            (im
              (eq a y)
              (eq
                (app (ns (srecaux S (suc y))) a)
                (:unfold srec (S a) ()
                  (app (ns (srecaux S (suc a))) a))))
            (appneq1d ((eq a y) (srecaux S (suc y)) (srecaux S (suc a)) a)
              (srecauxeq2d ((eq a y) S (suc y) (suc a))
                (suceqd ((eq a y) y a)
                  (eqcom (a y))))))))))))))))))))

(local theorem srecval2 ((S set ()) (n nat ())) ()
  (eq (srec S n) (app S (srecaux S n)))
()
(ax_mp ((eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))) (eq (srec S n) (app S (srecaux S n))))
  (ax_mp ((eq (app (ns (srecaux S (suc n))) n) (srec S n)) (im (eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))) (eq (srec S n) (app S (srecaux S n)))))
    (eqtr3 ((srec S n) (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))))
    (ax_mp ((lt n (suc n)) (eq (app (ns (srecaux S (suc n))) n) (srec S n)))
      (srecauxapp (S n (suc n)))
      (ltsucid (n))))
  (ax_mp ((eq (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n) (app S (srecaux S n))) (eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))))
    (ax_mp ((eq (app (ns (srecaux S (suc n))) n) (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n)) (im (eq (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n) (app S (srecaux S n))) (eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n)))))
      (eqtr ((app (ns (srecaux S (suc n))) n) (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n) (app S (srecaux S n))))
      (ax_mp ((eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n)))) (eq (app (ns (srecaux S (suc n))) n) (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n)))
        (appeq1 ((ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n))) n))
        (srecauxS (S n))))
    (writeEq ((ns (srecaux S n)) n (app S (srecaux S n)))))))

(local theorem srecres ((S set ()) (i nat) (n nat ())) ()
  (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n)))
()
(ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))) (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))))
  (ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (res (lam i (srec S i)) (ns (upto n)))) (im (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))) (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n)))))
    (eqstr3 ((res (lam i (srec S i)) (ns (upto n))) (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))))
    (ax_mp ((al i (im (el i (ns (upto n))) (eq (app (ns (srecaux S n)) i) (srec S i)))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (res (lam i (srec S i)) (ns (upto n)))))
      (reslameq ((ns (upto n)) i (app (ns (srecaux S n)) i) (srec S i)))
      (ax_gen (i (im (el i (ns (upto n))) (eq (app (ns (srecaux S n)) i) (srec S i))))
        (sylbi ((el i (ns (upto n))) (lt i n) (eq (app (ns (srecaux S n)) i) (srec S i)))
          (elupto (i n))
          (srecauxapp (S i n))))))
  (ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))))
    (ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n)))) (im (eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n)))))
      (eqstr3 ((res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))))
      (ax_mp ((eqs (Dom (ns (srecaux S n))) (ns (upto n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n)))))
        (reseq2 ((lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n))) (ns (upto n))))
        (dmsrecaux (S n))))
    (mpbir ((isfun (ns (srecaux S n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))))
      (lamapp ((ns (srecaux S n)) i))
      (srecauxisf (S n))))))

(local theorem srecrlam ((S set ()) (i nat) (n nat ())) ()
  (eq (rlam i (upto n) (srec S i)) (srecaux S n))
()
(ax_mp ((eqs (ns (rlam i (upto n) (srec S i))) (ns (srecaux S n))) (eq (rlam i (upto n) (srec S i)) (srecaux S n)))
  (axext ((rlam i (upto n) (srec S i)) (srecaux S n)))
  (ax_mp ((eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))) (eqs (ns (rlam i (upto n) (srec S i))) (ns (srecaux S n))))
    (ax_mp ((eqs (ns (rlam i (upto n) (srec S i))) (res (lam i (srec S i)) (ns (upto n)))) (im (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))) (eqs (ns (rlam i (upto n) (srec S i))) (ns (srecaux S n)))))
      (eqstr ((ns (rlam i (upto n) (srec S i))) (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))))
      (rlameqs (i (upto n) (srec S i))))
    (srecres (S i n)))))

(local theorem sreclem ((f nat ()) (n nat ()) (x nat) (a nat (x))) ()
  (im (eq f (rlam x (upto n) a)) (eq (size (Dom (ns f))) n))
()
(syl6eq ((eq f (rlam x (upto n) a)) (size (Dom (ns f))) (size (ns (upto n))) n)
  (sizeupto (n))
  (sizeeqd ((eq f (rlam x (upto n) a)) (Dom (ns f)) (ns (upto n)))
    (syl6eqs ((Dom (ns f)) (Dom (ns (rlam x (upto n) a))) (ns (upto n)) (eq f (rlam x (upto n) a)))
      (dmrlam (x (upto n) a))
      (dmeqd ((eq f (rlam x (upto n) a)) (ns f) (ns (rlam x (upto n) a)))
        (nseq (f (rlam x (upto n) a))))))))

(local theorem sreclem2 ((f nat ()) (n nat ()) (x nat) (a nat (x)) (b nat (x))) ()
  (im (eq f (rlam x (upto n) a)) (im (lt b n) (eq (app (ns f) b) (sbn b x a))))
()
(exp ((eq f (rlam x (upto n) a)) (lt b n) (eq (app (ns f) b) (sbn b x a)))
  (syl6eq ((an (eq f (rlam x (upto n) a)) (lt b n)) (app (ns f) b) (app (lam x a) b) (sbn b x a))
    (applams (x a b))
    (eqtrd ((an (eq f (rlam x (upto n) a)) (lt b n)) (app (ns f) b) (app (res (lam x a) (ns (upto n))) b) (app (lam x a) b))
      (appeq1d ((an (eq f (rlam x (upto n) a)) (lt b n)) (ns f) (res (lam x a) (ns (upto n))) b)
        (sylibr ((an (eq f (rlam x (upto n) a)) (lt b n)) (eq f (lower (res (lam x a) (ns (upto n))))) (eqs (ns f) (res (lam x a) (ns (upto n)))))
          (ax_mp ((finite (res (lam x a) (ns (upto n)))) (iff (eqs (ns f) (res (lam x a) (ns (upto n)))) (eq f (lower (res (lam x a) (ns (upto n)))))))
            (eqlower2 ((res (lam x a) (ns (upto n))) f))
            (ax_mp ((finite (ns (upto n))) (finite (res (lam x a) (ns (upto n)))))
              (finlam ((ns (upto n)) x a))
              (finns ((upto n)))))
          (:conv (im (an (eq f (rlam x (upto n) a)) (lt b n)) (eq f (lower (res (lam x a) (ns (upto n))))))
            (im
              (an (eq f (rlam x (upto n) a)) (lt b n))
              (eq
                f
                (:sym (:unfold rlam (x (upto n) a) ()
                  (lower (res (lam x a) (ns (upto n))))))))
            (anl ((eq f (rlam x (upto n) a)) (lt b n))))))
      (syl ((an (eq f (rlam x (upto n) a)) (lt b n)) (el b (ns (upto n))) (eq (app (res (lam x a) (ns (upto n))) b) (app (lam x a) b)))
        (resapp ((ns (upto n)) (lam x a) b))
        (sylibr ((an (eq f (rlam x (upto n) a)) (lt b n)) (lt b n) (el b (ns (upto n))))
          (elupto (b n))
          (anr ((eq f (rlam x (upto n) a)) (lt b n)))))))))

(theorem srecval ((i nat) (S set ()) (n nat ())) ()
  (eq (srec S n) (app S (rlam i (upto n) (srec S i))))
()
(ax_mp ((eq (app S (rlam i (upto n) (srec S i))) (app S (srecaux S n))) (eq (srec S n) (app S (rlam i (upto n) (srec S i)))))
  (ax_mp ((eq (srec S n) (app S (srecaux S n))) (im (eq (app S (rlam i (upto n) (srec S i))) (app S (srecaux S n))) (eq (srec S n) (app S (rlam i (upto n) (srec S i))))))
    (eqtr4 ((srec S n) (app S (srecaux S n)) (app S (rlam i (upto n) (srec S i)))))
    (srecval2 (S n)))
  (ax_mp ((eq (rlam i (upto n) (srec S i)) (srecaux S n)) (eq (app S (rlam i (upto n) (srec S i))) (app S (srecaux S n))))
    (appeq2 (S (rlam i (upto n) (srec S i)) (srecaux S n)))
    (ax_mp ((eq (lower (ns (srecaux S n))) (srecaux S n)) (eq (rlam i (upto n) (srec S i)) (srecaux S n)))
      (ax_mp ((eq (rlam i (upto n) (srec S i)) (lower (ns (srecaux S n)))) (im (eq (lower (ns (srecaux S n))) (srecaux S n)) (eq (rlam i (upto n) (srec S i)) (srecaux S n))))
        (eqtr ((rlam i (upto n) (srec S i)) (lower (ns (srecaux S n))) (srecaux S n)))
        (ax_mp ((eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))) (eq (rlam i (upto n) (srec S i)) (lower (ns (srecaux S n)))))
          (:conv (im (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))) (eq (rlam i (upto n) (srec S i)) (lower (ns (srecaux S n)))))
            (im
              (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n)))
              (eq
                (:unfold rlam (i (upto n) (srec S i)) ()
                  (lower (res (lam i (srec S i)) (ns (upto n)))))
                (lower (ns (srecaux S n)))))
            (lowereq ((res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n)))))
          (srecres (S i n))))
      (lowerns ((srecaux S n)))))))

(local def srecpaux ((A set ()) (n nat ())) (nat ())
((f nat) (x nat))
(srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n))

(local theorem srecpauxeqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (srecpaux _A1 _n1) (srecpaux _A2 _n2)))
((f nat) (x nat))
(:conv (im _G (eq (srecpaux _A1 _n1) (srecpaux _A2 _n2)))
  (im
    _G
    (eq
      (:unfold srecpaux (_A1 _n1) (f x)
        (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A1))) _n1))
      (:unfold srecpaux (_A2 _n2) (f x)
        (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A2))) _n2))))
  (sreceqd (_G (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A1))) (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A2))) _n1 _n2)
    (lameqd (_G f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A1)) (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A2)))
      (nateqd (_G (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A1) (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A2))
        (eleqd (_G (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) _A1 _A2)
          (eqidd (_G (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x)))))))
          _Ah)))
    _nh)))

(local theorem srecpauxeq ((_A1 set ()) (_A2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _A1 _A2) (im (eq _n1 _n2) (eq (srecpaux _A1 _n1) (srecpaux _A2 _n2))))
()
(exp ((eqs _A1 _A2) (eq _n1 _n2) (eq (srecpaux _A1 _n1) (srecpaux _A2 _n2)))
  (srecpauxeqd ((an (eqs _A1 _A2) (eq _n1 _n2)) _A1 _A2 _n1 _n2)
    (anl ((eqs _A1 _A2) (eq _n1 _n2)))
    (anr ((eqs _A1 _A2) (eq _n1 _n2))))))

(local theorem srecpauxeq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (n nat ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eq (srecpaux _A1 n) (srecpaux _A2 n)))
()
(srecpauxeqd (_G _A1 _A2 n n)
  _h
  (eqidd (_G n))))

(local theorem srecpauxeq1 ((_A1 set ()) (_A2 set ()) (n nat ())) ()
  (im (eqs _A1 _A2) (eq (srecpaux _A1 n) (srecpaux _A2 n)))
()
(srecpauxeq1d ((eqs _A1 _A2) _A1 _A2 n)
  (id ((eqs _A1 _A2)))))

(local theorem srecpauxeq2d ((_G wff ()) (A set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (srecpaux A _n1) (srecpaux A _n2)))
()
(srecpauxeqd (_G A A _n1 _n2)
  (eqsidd (_G A))
  _h))

(local theorem srecpauxeq2 ((A set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (srecpaux A _n1) (srecpaux A _n2)))
()
(srecpauxeq2d ((eq _n1 _n2) A _n1 _n2)
  (id ((eq _n1 _n2)))))

(def srecp ((A set ()) (n nat ())) (wff ())
()
(true (srecpaux A n)))

(local theorem srecpeqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (iff (srecp _A1 _n1) (srecp _A2 _n2)))
()
(:conv (im _G (iff (srecp _A1 _n1) (srecp _A2 _n2)))
  (im
    _G
    (iff
      (:unfold srecp (_A1 _n1) ()
        (true (srecpaux _A1 _n1)))
      (:unfold srecp (_A2 _n2) ()
        (true (srecpaux _A2 _n2)))))
  (trueeqd (_G (srecpaux _A1 _n1) (srecpaux _A2 _n2))
    (srecpauxeqd (_G _A1 _A2 _n1 _n2)
      _Ah
      _nh))))

(local theorem srecpeq ((_A1 set ()) (_A2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _A1 _A2) (im (eq _n1 _n2) (iff (srecp _A1 _n1) (srecp _A2 _n2))))
()
(exp ((eqs _A1 _A2) (eq _n1 _n2) (iff (srecp _A1 _n1) (srecp _A2 _n2)))
  (srecpeqd ((an (eqs _A1 _A2) (eq _n1 _n2)) _A1 _A2 _n1 _n2)
    (anl ((eqs _A1 _A2) (eq _n1 _n2)))
    (anr ((eqs _A1 _A2) (eq _n1 _n2))))))

(local theorem srecpeq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (n nat ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (iff (srecp _A1 n) (srecp _A2 n)))
()
(srecpeqd (_G _A1 _A2 n n)
  _h
  (eqidd (_G n))))

(local theorem srecpeq1 ((_A1 set ()) (_A2 set ()) (n nat ())) ()
  (im (eqs _A1 _A2) (iff (srecp _A1 n) (srecp _A2 n)))
()
(srecpeq1d ((eqs _A1 _A2) _A1 _A2 n)
  (id ((eqs _A1 _A2)))))

(local theorem srecpeq2d ((_G wff ()) (A set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (iff (srecp A _n1) (srecp A _n2)))
()
(srecpeqd (_G A A _n1 _n2)
  (eqsidd (_G A))
  _h))

(local theorem srecpeq2 ((A set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (iff (srecp A _n1) (srecp A _n2)))
()
(srecpeq2d ((eq _n1 _n2) A _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem srecpauxval ((A set ()) (i nat) (n nat ())) ()
  (eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
((f nat) (x nat))
(ax_mp ((eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
  (ax_mp ((eq (srecpaux A n) (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n)))))) (im (eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
    (eqtr ((srecpaux A n) (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
    (:conv (eq (srecpaux A n) (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))))
      (eq
        (:unfold srecpaux (A n) (f x)
          (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n))
        (app
          (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A)))
          (:sym (:unfold rlam (i (upto n) (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) i)) ()
            (lower
              (res
                (lam
                  i
                  (:sym (:unfold srecpaux (A i) (f x)
                    (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) i))))
                (ns (upto n))))))))
      (srecval (i (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n))))
  (ax_mp ((eq (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (nat (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A))) (eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
    (ax_mp ((eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (nat (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A))) (im (eq (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (nat (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A))) (eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
      (eqtr4 ((app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (nat (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A)) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
      (applame ((lower (res (lam i (srecpaux A i)) (ns (upto n)))) (nat (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A)) f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A)))
        (nateqd ((eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A) (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A))
          (eleq1d (A (eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))))
            (preqd ((eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (size (Dom (ns f))) n (lower (ab x (true (app (ns f) x)))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))))
              (:conv (im (eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (eq (size (Dom (ns f))) n))
                (im
                  (eq
                    f
                    (:sym (:unfold rlam (i (upto n) (srecpaux A i)) ()
                      (lower (res (lam i (srecpaux A i)) (ns (upto n)))))))
                  (eq (size (Dom (ns f))) n))
                (sreclem (f n i (srecpaux A i))))
              (lowereqd ((eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (ab x (true (app (ns f) x))) (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))
                (abeqd ((eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) x (true (app (ns f) x)) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))
                  (trueeqd ((eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (app (ns f) x) (app (res (lam i (srecpaux A i)) (ns (upto n))) x))
                    (appeq1d ((eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (ns f) (res (lam i (srecpaux A i)) (ns (upto n))) x)
                      (ax_mp ((iff (eqs (ns f) (res (lam i (srecpaux A i)) (ns (upto n)))) (eq f (lower (res (lam i (srecpaux A i)) (ns (upto n)))))) (im (eq f (lower (res (lam i (srecpaux A i)) (ns (upto n))))) (eqs (ns f) (res (lam i (srecpaux A i)) (ns (upto n))))))
                        (bi2 ((eqs (ns f) (res (lam i (srecpaux A i)) (ns (upto n)))) (eq f (lower (res (lam i (srecpaux A i)) (ns (upto n)))))))
                        (ax_mp ((finite (res (lam i (srecpaux A i)) (ns (upto n)))) (iff (eqs (ns f) (res (lam i (srecpaux A i)) (ns (upto n)))) (eq f (lower (res (lam i (srecpaux A i)) (ns (upto n)))))))
                          (eqlower2 ((res (lam i (srecpaux A i)) (ns (upto n))) f))
                          (ax_mp ((finite (ns (upto n))) (finite (res (lam i (srecpaux A i)) (ns (upto n)))))
                            (finlam ((ns (upto n)) i (srecpaux A i)))
                            (finns ((upto n)))))))))))))))
    (ax_mp ((iff (el (pr n (sep (upto n) (ab i (srecp A i)))) A) (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A)) (eq (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (nat (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A))))
      (nateq ((el (pr n (sep (upto n) (ab i (srecp A i)))) A) (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A)))
      (ax_mp ((eq (pr n (sep (upto n) (ab i (srecp A i)))) (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))))) (iff (el (pr n (sep (upto n) (ab i (srecp A i)))) A) (el (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) A)))
        (eleq1 (A (pr n (sep (upto n) (ab i (srecp A i)))) (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))))))
        (ax_mp ((eq (sep (upto n) (ab i (srecp A i))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) (eq (pr n (sep (upto n) (ab i (srecp A i)))) (pr n (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))))))
          (preq2 (n (sep (upto n) (ab i (srecp A i))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))))
          (ax_mp ((eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) (eq (sep (upto n) (ab i (srecp A i))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))))
            (ax_mp ((eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (sep (upto n) (ab i (srecp A i)))) (im (eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))) (eq (sep (upto n) (ab i (srecp A i))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))))))
              (eqtr3 ((sep (upto n) (ab i (srecp A i))) (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))))
              (lowerns ((sep (upto n) (ab i (srecp A i))))))
            (ax_mp ((eqs (ns (sep (upto n) (ab i (srecp A i)))) (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))) (eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))))
              (lowereq ((ns (sep (upto n) (ab i (srecp A i)))) (ab x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))))
              (eqab2i ((ns (sep (upto n) (ab i (srecp A i)))) x (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))
                (ax_mp ((iff (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))) (iff (el x (ns (sep (upto n) (ab i (srecp A i))))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))
                  (ax_mp ((iff (el x (ns (sep (upto n) (ab i (srecp A i))))) (an (el x (ns (upto n))) (el x (ab i (srecp A i))))) (im (iff (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))) (iff (el x (ns (sep (upto n) (ab i (srecp A i))))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))))
                    (bitr ((el x (ns (sep (upto n) (ab i (srecp A i))))) (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))))
                    (elsep ((upto n) (ab i (srecp A i)) x)))
                  (rbid ((el x (ns (upto n))) (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))
                    (anl ((el x (ns (upto n))) (el x (ab i (srecp A i)))))
                    (sylib ((true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)) (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n))))) (el x (ns (upto n))))
                      (ax_mp ((eqs (Dom (res (lam i (srecpaux A i)) (ns (upto n)))) (ns (upto n))) (iff (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n))))) (el x (ns (upto n)))))
                        (eleq2 ((Dom (res (lam i (srecpaux A i)) (ns (upto n)))) (ns (upto n)) x))
                        (dmreslam (i (ns (upto n)) (srecpaux A i))))
                      (ax_mp ((im (not (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n)))))) (eq (app (res (lam i (srecpaux A i)) (ns (upto n))) x) (d0))) (im (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)) (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n)))))))
                        (:conv (im (im (not (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n)))))) (eq (app (res (lam i (srecpaux A i)) (ns (upto n))) x) (d0))) (im (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)) (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n)))))))
                          (im
                            (im (not (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n)))))) (eq (app (res (lam i (srecpaux A i)) (ns (upto n))) x) (d0)))
                            (im
                              (:unfold true ((app (res (lam i (srecpaux A i)) (ns (upto n))) x)) ()
                                (:unfold ne ((app (res (lam i (srecpaux A i)) (ns (upto n))) x) (d0)) ()
                                  (not (eq (app (res (lam i (srecpaux A i)) (ns (upto n))) x) (d0)))))
                              (el x (Dom (res (lam i (srecpaux A i)) (ns (upto n)))))))
                          (con1 ((el x (Dom (res (lam i (srecpaux A i)) (ns (upto n))))) (eq (app (res (lam i (srecpaux A i)) (ns (upto n))) x) (d0)))))
                        (ndmapp ((res (lam i (srecpaux A i)) (ns (upto n))) x))))
                    (bitr4d ((el x (ns (upto n))) (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (el x (ab i (srecp A i))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)))
                      (bian1 ((el x (ns (upto n))) (el x (ab i (srecp A i)))))
                      (syl6bbr ((el x (ns (upto n))) (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)) (srecp A x) (el x (ab i (srecp A i))))
                        (elabe (i x (srecp A i) (srecp A x))
                          (srecpeq2 (A i x)))
                        (:conv (im (el x (ns (upto n))) (iff (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x)) (srecp A x)))
                          (im
                            (el x (ns (upto n)))
                            (iff
                              (true (app (res (lam i (srecpaux A i)) (ns (upto n))) x))
                              (:unfold srecp (A x) ()
                                (true (srecpaux A x)))))
                          (trueeqd ((el x (ns (upto n))) (app (res (lam i (srecpaux A i)) (ns (upto n))) x) (srecpaux A x))
                            (syl6eq ((el x (ns (upto n))) (app (res (lam i (srecpaux A i)) (ns (upto n))) x) (app (lam i (srecpaux A i)) x) (srecpaux A x))
                              (applame (x (srecpaux A x) i (srecpaux A i))
                                (srecpauxeq2 (A i x)))
                              (resapp ((ns (upto n)) (lam i (srecpaux A i)) x))))))))))))))))))

(theorem srecpval ((i nat) (A set ()) (n nat ())) ()
  (iff (srecp A n) (el (pr n (sep (upto n) (ab i (srecp A i)))) A))
()
(ax_mp ((iff (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (iff (srecp A n) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
  (ax_mp ((iff (srecp A n) (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))) (im (iff (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (iff (srecp A n) (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
    (bitr ((srecp A n) (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
    (ax_mp ((eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (iff (srecp A n) (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
      (:conv (im (eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (iff (srecp A n) (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
        (im
          (eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
          (iff
            (:unfold srecp (A n) ()
              (true (srecpaux A n)))
            (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
        (trueeq ((srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
      (srecpauxval (A i n))))
  (truenat ((el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))

(def card ((s nat ())) (nat ())
((f nat))
(srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) s))

(local theorem cardeqd ((_G wff ()) (_s1 nat ()) (_s2 nat ()))
  ((_sh (im _G (eq _s1 _s2))))
  (im _G (eq (card _s1) (card _s2)))
((f nat))
(:conv (im _G (eq (card _s1) (card _s2)))
  (im
    _G
    (eq
      (:unfold card (_s1) (f)
        (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) _s1))
      (:unfold card (_s2) (f)
        (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) _s2))))
  (sreceqd (_G (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) _s1 _s2)
    (eqsidd (_G (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2))))))
    _sh)))

(local theorem cardeq ((_s1 nat ()) (_s2 nat ())) ()
  (im (eq _s1 _s2) (eq (card _s1) (card _s2)))
()
(cardeqd ((eq _s1 _s2) _s1 _s2)
  (id ((eq _s1 _s2)))))

(local theorem cardvallem ((i nat) (n nat ())) ()
  (eq (card n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
((f nat))
(:let H1 (sreclem (f n i (card i)))
(ax_mp ((eq (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (rlam i (upto n) (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))) (eq (card n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))))
  (ax_mp ((eq (card n) (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (rlam i (upto n) (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i)))) (im (eq (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (rlam i (upto n) (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))) (eq (card n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))))
    (eqtr ((card n) (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (rlam i (upto n) (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))))
    (:conv (eq (card n) (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (rlam i (upto n) (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i))))
      (eq
        (:unfold card (n) (f)
          (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n))
        (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (rlam i (upto n) (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i))))
      (srecval (i (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n))))
  (:conv (eq (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (rlam i (upto n) (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
    (eq
      (app
        (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2))))
        (rlam
          i
          (upto n)
          (:sym (:unfold card (i) (f)
            (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i)))))
      (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
    (applame ((rlam i (upto n) (card i)) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))) f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2))))
      (addeqd ((eq f (rlam i (upto n) (card i))) (app (ns f) (div (size (Dom (ns f))) (d2))) (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod (size (Dom (ns f))) (d2)) (mod n (d2)))
        (appeqd ((eq f (rlam i (upto n) (card i))) (ns f) (res (lam i (card i)) (ns (upto n))) (div (size (Dom (ns f))) (d2)) (div n (d2)))
          (ax_mp ((iff (eqs (ns f) (res (lam i (card i)) (ns (upto n)))) (eq f (rlam i (upto n) (card i)))) (im (eq f (rlam i (upto n) (card i))) (eqs (ns f) (res (lam i (card i)) (ns (upto n))))))
            (bi2 ((eqs (ns f) (res (lam i (card i)) (ns (upto n)))) (eq f (rlam i (upto n) (card i)))))
            (ax_mp ((finite (res (lam i (card i)) (ns (upto n)))) (iff (eqs (ns f) (res (lam i (card i)) (ns (upto n)))) (eq f (rlam i (upto n) (card i)))))
              (:conv (im (finite (res (lam i (card i)) (ns (upto n)))) (iff (eqs (ns f) (res (lam i (card i)) (ns (upto n)))) (eq f (rlam i (upto n) (card i)))))
                (im
                  (finite (res (lam i (card i)) (ns (upto n))))
                  (iff
                    (eqs (ns f) (res (lam i (card i)) (ns (upto n))))
                    (eq
                      f
                      (:unfold rlam (i (upto n) (card i)) ()
                        (lower (res (lam i (card i)) (ns (upto n))))))))
                (eqlower2 ((res (lam i (card i)) (ns (upto n))) f)))
              (ax_mp ((finite (ns (upto n))) (finite (res (lam i (card i)) (ns (upto n)))))
                (finlam ((ns (upto n)) i (card i)))
                (finns ((upto n))))))
          (diveq1d ((eq f (rlam i (upto n) (card i))) (size (Dom (ns f))) n (d2))
            H1))
        (modeq1d ((eq f (rlam i (upto n) (card i))) (size (Dom (ns f))) n (d2))
          H1)))))))

(theorem card0 () ()
  (eq (card (d0)) (d0))
((i nat))
(ax_mp ((eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)) (eq (card (d0)) (d0)))
  (ax_mp ((eq (card (d0)) (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2)))) (im (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)) (eq (card (d0)) (d0))))
    (eqtr ((card (d0)) (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)))
    (cardvallem (i (d0))))
  (ax_mp ((eq (add (d0) (d0)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)))
    (ax_mp ((eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0))) (im (eq (add (d0) (d0)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0))))
      (eqtr ((add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0)) (d0)))
      (ax_mp ((eq (mod (d0) (d2)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0))))
        (ax_mp ((eq (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (d0)) (im (eq (mod (d0) (d2)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0)))))
          (addeq ((app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (d0) (mod (d0) (d2)) (d0)))
          (ax_mp ((not (el (div (d0) (d2)) (Dom (res (lam i (card i)) (ns (upto (d0))))))) (eq (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (d0)))
            (ndmapp ((res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))))
            (mtbir ((el (div (d0) (d2)) (ns (d0))) (el (div (d0) (d2)) (Dom (res (lam i (card i)) (ns (upto (d0)))))))
              (ax_mp ((eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0))) (iff (el (div (d0) (d2)) (Dom (res (lam i (card i)) (ns (upto (d0)))))) (el (div (d0) (d2)) (ns (d0)))))
                (eleq2 ((Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0)) (div (d0) (d2))))
                (ax_mp ((eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0))))
                  (ax_mp ((eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (upto (d0)))) (im (eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0)))))
                    (eqstr ((Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (upto (d0))) (ns (d0))))
                    (dmreslam (i (ns (upto (d0))) (card i))))
                  (ax_mp ((eq (upto (d0)) (d0)) (eqs (ns (upto (d0))) (ns (d0))))
                    (nseq ((upto (d0)) (d0)))
                    (upto0 ()))))
              (el02 ((div (d0) (d2)))))))
        (mod01 ((d2)))))
    (add0 ((d0))))))

(local theorem cardval ((n nat ())) ()
  (im (ne n (d0)) (eq (card n) (add (card (div n (d2))) (mod n (d2)))))
((i nat))
(syl5eq ((ne n (d0)) (card n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))) (add (card (div n (d2))) (mod n (d2))))
  (cardvallem (i n))
  (addeq1d ((ne n (d0)) (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (card (div n (d2))) (mod n (d2)))
    (syl6eq ((ne n (d0)) (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (app (lam i (card i)) (div n (d2))) (card (div n (d2))))
      (applame ((div n (d2)) (card (div n (d2))) i (card i))
        (cardeq (i (div n (d2)))))
      (syl ((ne n (d0)) (el (div n (d2)) (ns (upto n))) (eq (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (app (lam i (card i)) (div n (d2)))))
        (resapp ((ns (upto n)) (lam i (card i)) (div n (d2))))
        (sylibr ((ne n (d0)) (lt (div n (d2)) n) (el (div n (d2)) (ns (upto n))))
          (elupto ((div n (d2)) n))
          (sylbir ((ne n (d0)) (lt (d0) n) (lt (div n (d2)) n))
            (lt01 (n))
            (div2lt (n)))))))))

(local theorem cardb0 ((n nat ())) ()
  (eq (card (b0 n)) (card n))
()
(cases ((eq n (d0)) (eq (card (b0 n)) (card n)))
  (cardeqd ((eq n (d0)) (b0 n) n)
    (mpbiri ((eq n (d0)) (eq (b0 (d0)) (d0)) (eq (b0 n) n))
      (b00 ())
      (eqeqd ((eq n (d0)) (b0 n) (b0 (d0)) n (d0))
        (b0eq (n (d0)))
        (id ((eq n (d0)))))))
  (syl6eq ((not (eq n (d0))) (card (b0 n)) (add (card n) (d0)) (card n))
    (add0 ((card n)))
    (syl6eq ((not (eq n (d0))) (card (b0 n)) (add (card (div (b0 n) (d2))) (mod (b0 n) (d2))) (add (card n) (d0)))
      (ax_mp ((eq (mod (b0 n) (d2)) (d0)) (eq (add (card (div (b0 n) (d2))) (mod (b0 n) (d2))) (add (card n) (d0))))
        (ax_mp ((eq (card (div (b0 n) (d2))) (card n)) (im (eq (mod (b0 n) (d2)) (d0)) (eq (add (card (div (b0 n) (d2))) (mod (b0 n) (d2))) (add (card n) (d0)))))
          (addeq ((card (div (b0 n) (d2))) (card n) (mod (b0 n) (d2)) (d0)))
          (ax_mp ((eq (div (b0 n) (d2)) n) (eq (card (div (b0 n) (d2))) (card n)))
            (cardeq ((div (b0 n) (d2)) n))
            (b0div2 (n))))
        (b0mod2 (n)))
      (sylbir ((not (eq n (d0))) (ne (b0 n) (d0)) (eq (card (b0 n)) (add (card (div (b0 n) (d2))) (mod (b0 n) (d2)))))
        (:conv (iff (ne (b0 n) (d0)) (not (eq n (d0))))
          (iff
            (ne (b0 n) (d0))
            (:sym (:unfold ne (n (d0)) ()
              (not (eq n (d0))))))
          (b0ne0 (n)))
        (cardval ((b0 n))))))))

(local theorem cardb1 ((n nat ())) ()
  (eq (card (b1 n)) (suc (card n)))
()
(ax_mp ((eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))) (eq (card (b1 n)) (suc (card n))))
  (ax_mp ((eq (card (b1 n)) (add (card (div (b1 n) (d2))) (mod (b1 n) (d2)))) (im (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))) (eq (card (b1 n)) (suc (card n)))))
    (eqtr ((card (b1 n)) (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))))
    (ax_mp ((ne (b1 n) (d0)) (eq (card (b1 n)) (add (card (div (b1 n) (d2))) (mod (b1 n) (d2)))))
      (cardval ((b1 n)))
      (b1ne0 (n))))
  (ax_mp ((eq (add (card n) (d1)) (suc (card n))) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))))
    (ax_mp ((eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1))) (im (eq (add (card n) (d1)) (suc (card n))) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n)))))
      (eqtr ((add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1)) (suc (card n))))
      (ax_mp ((eq (mod (b1 n) (d2)) (d1)) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1))))
        (ax_mp ((eq (card (div (b1 n) (d2))) (card n)) (im (eq (mod (b1 n) (d2)) (d1)) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1)))))
          (addeq ((card (div (b1 n) (d2))) (card n) (mod (b1 n) (d2)) (d1)))
          (ax_mp ((eq (div (b1 n) (d2)) n) (eq (card (div (b1 n) (d2))) (card n)))
            (cardeq ((div (b1 n) (d2)) n))
            (b1div2 (n))))
        (b1mod2 (n))))
    (add12 ((card n))))))

(theorem cardS ((a nat ()) (s nat ())) ()
  (im (not (el a (ns s))) (eq (card (ins a s)) (suc (card s))))
((w nat) (x nat) (y nat) (z nat))
(:let H1 (el01 (w))
(:let H2 (eqb0 (w))
(:let H3 (cardb1 ((div w (d2))))
(:let H4 (cardb0 ((div w (d2))))
(:let H5 (sub1can (y))
(:let H6 (:conv (im (not (eq y (d0))) (eq (suc (sub y (d1))) y))
  (im
    (:sym (:unfold ne (y (d0)) ()
      (not (eq y (d0)))))
    (eq (suc (sub y (d1))) y))
  H5)
(:let H7 (el01 ((ins y w)))
(:let H8 (elins ((d0) y w))
(:let H9 (anr ((not (eq y (d0))) (odd w)))
(ax_mp ((al z (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z))))) (im (not (el a (ns s))) (eq (card (ins a s)) (suc (card s)))))
  (eale (z s (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z)))) (im (not (el a (ns s))) (eq (card (ins a s)) (suc (card s)))))
    (imeqd ((eq z s) (not (el a (ns z))) (not (el a (ns s))) (eq (card (ins a z)) (suc (card z))) (eq (card (ins a s)) (suc (card s))))
      (noteqd ((eq z s) (el a (ns z)) (el a (ns s)))
        (elneq2 (a z s)))
      (eqeqd ((eq z s) (card (ins a z)) (card (ins a s)) (suc (card z)) (suc (card s)))
        (cardeqd ((eq z s) (ins a z) (ins a s))
          (inseq2 (a z s)))
        (suceqd ((eq z s) (card z) (card s))
          (cardeq (z s))))))
  (trud ((al z (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z))))))
    (indstr ((tru) x y a (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))) (al z (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z))))) (al z (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z))))))
      (aleqd ((eq x a) z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))) (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z)))))
        (imeqd ((eq x a) (not (el x (ns z))) (not (el a (ns z))) (eq (card (ins x z)) (suc (card z))) (eq (card (ins a z)) (suc (card z))))
          (noteqd ((eq x a) (el x (ns z)) (el a (ns z)))
            (eleq1 ((ns z) x a)))
          (eqeq1d ((eq x a) (card (ins x z)) (card (ins a z)) (suc (card z)))
            (cardeqd ((eq x a) (ins x z) (ins a z))
              (inseq1 (x a z))))))
      (aleqd ((eq x y) z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))) (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z)))))
        (imeqd ((eq x y) (not (el x (ns z))) (not (el y (ns z))) (eq (card (ins x z)) (suc (card z))) (eq (card (ins y z)) (suc (card z))))
          (noteqd ((eq x y) (el x (ns z)) (el y (ns z)))
            (eleq1 ((ns z) x y)))
          (eqeq1d ((eq x y) (card (ins x z)) (card (ins y z)) (suc (card z)))
            (cardeqd ((eq x y) (ins x z) (ins y z))
              (inseq1 (x y z))))))
      (anwr ((tru) (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (al z (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z))))))
        (sylibr ((al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (al w (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))) (al z (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z))))))
          (cbval (z w (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z)))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
            (imeqd ((eq z w) (not (el y (ns z))) (not (el y (ns w))) (eq (card (ins y z)) (suc (card z))) (eq (card (ins y w)) (suc (card w))))
              (noteqd ((eq z w) (el y (ns z)) (el y (ns w)))
                (elneq2 (y z w)))
              (eqeqd ((eq z w) (card (ins y z)) (card (ins y w)) (suc (card z)) (suc (card w)))
                (cardeqd ((eq z w) (ins y z) (ins y w))
                  (inseq2 (y z w)))
                (suceqd ((eq z w) (card z) (card w))
                  (cardeq (z w))))))
          (iald (w (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
            (cases ((eq y (d0)) (im (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))))
              (a1d ((eq y (d0)) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))) (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))))
                (mpbiri ((eq y (d0)) (im (not (el (d0) (ns w))) (eq (card (ins (d0) w)) (suc (card w)))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
                  (sylbi ((not (el (d0) (ns w))) (not (odd w)) (eq (card (ins (d0) w)) (suc (card w))))
                    (ax_mp ((iff (el (d0) (ns w)) (odd w)) (iff (not (el (d0) (ns w))) (not (odd w))))
                      (noteq ((el (d0) (ns w)) (odd w)))
                      H1)
                    (sylbi ((not (odd w)) (eq w (b0 (div w (d2)))) (eq (card (ins (d0) w)) (suc (card w))))
                      H2
                      (eqtr4d ((eq w (b0 (div w (d2)))) (card (ins (d0) w)) (card (b1 (div w (d2)))) (suc (card w)))
                        (cardeqd ((eq w (b0 (div w (d2)))) (ins (d0) w) (b1 (div w (d2))))
                          (syl6eqr ((eq w (b0 (div w (d2)))) (ins (d0) w) (ins (d0) (b0 (div w (d2)))) (b1 (div w (d2))))
                            (b1ins ((div w (d2))))
                            (inseq2 ((d0) w (b0 (div w (d2)))))))
                        (syl6eqr ((eq w (b0 (div w (d2)))) (suc (card w)) (suc (card (div w (d2)))) (card (b1 (div w (d2)))))
                          H3
                          (suceqd ((eq w (b0 (div w (d2)))) (card w) (card (div w (d2))))
                            (syl6eq ((eq w (b0 (div w (d2)))) (card w) (card (b0 (div w (d2)))) (card (div w (d2))))
                              H4
                              (cardeq (w (b0 (div w (d2)))))))))))
                  (imeqd ((eq y (d0)) (not (el y (ns w))) (not (el (d0) (ns w))) (eq (card (ins y w)) (suc (card w))) (eq (card (ins (d0) w)) (suc (card w))))
                    (noteqd ((eq y (d0)) (el y (ns w)) (el (d0) (ns w)))
                      (eleq1 ((ns w) y (d0))))
                    (eqeq1d ((eq y (d0)) (card (ins y w)) (card (ins (d0) w)) (suc (card w)))
                      (cardeqd ((eq y (d0)) (ins y w) (ins (d0) w))
                        (inseq1 (y (d0) w)))))))
              (ealde ((im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))) x (not (eq y (d0))) (sub y (d1)) (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))))
                (mpbird ((an (not (eq y (d0))) (eq x (sub y (d1)))) (im (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))) (im (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))))
                  (imeq1d ((an (not (eq y (d0))) (eq x (sub y (d1)))) (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
                    (syl ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt x y) (iff (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))))
                      (biim1 ((lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))))
                      (mpbird ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt (sub y (d1)) y) (lt x y))
                        (lteq1d ((an (not (eq y (d0))) (eq x (sub y (d1)))) x (sub y (d1)) y)
                          (anr ((not (eq y (d0))) (eq x (sub y (d1))))))
                        (sylan ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt (d0) y) (lt (d0) (d1)) (lt (sub y (d1)) y))
                          (subltid (y (d1)))
                          (sylibr ((an (not (eq y (d0))) (eq x (sub y (d1)))) (ne y (d0)) (lt (d0) y))
                            (lt01 (y))
                            (:conv (im (an (not (eq y (d0))) (eq x (sub y (d1)))) (ne y (d0)))
                              (im
                                (an (not (eq y (d0))) (eq x (sub y (d1))))
                                (:unfold ne (y (d0)) ()
                                  (not (eq y (d0)))))
                              (anl ((not (eq y (d0))) (eq x (sub y (d1)))))))
                          (a1i ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt (d0) (d1)))
                            (d0lt1 ()))))))
                  (ealde ((im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))) z (an (not (eq y (d0))) (eq x (sub y (d1)))) (div w (d2)) (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))
                    (imimd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (not (el y (ns w))) (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w))))
                      (bi2d ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (not (el x (ns z))) (not (el y (ns w))))
                        (noteqd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (el x (ns z)) (el y (ns w)))
                          (bitrd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (el x (ns z)) (el (sub y (d1)) (ns (div w (d2)))) (el y (ns w)))
                            (elneqd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) x (sub y (d1)) z (div w (d2)))
                              (anlr ((not (eq y (d0))) (eq x (sub y (d1))) (eq z (div w (d2)))))
                              (anr ((an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2))))))
                            (syl5bb ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (el (sub y (d1)) (ns (div w (d2)))) (el (suc (sub y (d1))) (ns w)) (el y (ns w)))
                              (eldiv2 ((sub y (d1)) w))
                              (eleq1d ((ns w) (an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (suc (sub y (d1))) y)
                                (syl ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (ne y (d0)) (eq (suc (sub y (d1))) y))
                                  H5
                                  (:conv (im (an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (ne y (d0)))
                                    (im
                                      (an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2))))
                                      (:unfold ne (y (d0)) ()
                                        (not (eq y (d0)))))
                                    (anll ((not (eq y (d0))) (eq x (sub y (d1))) (eq z (div w (d2))))))))))))
                      (sylbi ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (an (not (eq y (d0))) (an (eq x (sub y (d1))) (eq z (div w (d2))))) (im (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w)))))
                        (anass ((not (eq y (d0))) (eq x (sub y (d1))) (eq z (div w (d2)))))
                        (imp ((not (eq y (d0))) (an (eq x (sub y (d1))) (eq z (div w (d2)))) (im (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w)))))
                          (syl5ibrcom ((not (eq y (d0))) (im (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w)))) (an (eq x (sub y (d1))) (eq z (div w (d2)))) (im (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w)))))
                            (imeq1d ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (eq (card (ins x z)) (suc (card z))) (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w))))
                              (eqeqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (card (ins x z)) (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card z)) (suc (card (div w (d2)))))
                                (cardeqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (ins x z) (div (ins (suc (sub y (d1))) w) (d2)))
                                  (syl6eqr ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (ins x z) (ins (sub y (d1)) (div w (d2))) (div (ins (suc (sub y (d1))) w) (d2)))
                                    (insdiv2 ((sub y (d1)) w))
                                    (imp ((eq x (sub y (d1))) (eq z (div w (d2))) (eq (ins x z) (ins (sub y (d1)) (div w (d2)))))
                                      (inseq (x (sub y (d1)) z (div w (d2)))))))
                                (suceqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (card z) (card (div w (d2))))
                                  (cardeqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) z (div w (d2)))
                                    (anr ((eq x (sub y (d1))) (eq z (div w (d2)))))))))
                            (bi1d ((not (eq y (d0))) (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w))))
                              (casesda ((not (eq y (d0))) (odd w) (iff (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w)))))
                                (syl5bbr ((an (not (eq y (d0))) (odd w)) (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (suc (card (div (ins (suc (sub y (d1))) w) (d2)))) (suc (suc (card (div w (d2)))))) (eq (card (ins y w)) (suc (card w))))
                                  (peano2 ((card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))))
                                  (eqeqd ((an (not (eq y (d0))) (odd w)) (suc (card (div (ins (suc (sub y (d1))) w) (d2)))) (card (ins y w)) (suc (suc (card (div w (d2))))) (suc (card w)))
                                    (syl5eqr ((an (not (eq y (d0))) (odd w)) (suc (card (div (ins (suc (sub y (d1))) w) (d2)))) (card (b1 (div (ins (suc (sub y (d1))) w) (d2)))) (card (ins y w)))
                                      (cardb1 ((div (ins (suc (sub y (d1))) w) (d2))))
                                      (cardeqd ((an (not (eq y (d0))) (odd w)) (b1 (div (ins (suc (sub y (d1))) w) (d2))) (ins y w))
                                        (eqtr4d ((an (not (eq y (d0))) (odd w)) (b1 (div (ins (suc (sub y (d1))) w) (d2))) (b1 (div (ins y w) (d2))) (ins y w))
                                          (b1eqd ((an (not (eq y (d0))) (odd w)) (div (ins (suc (sub y (d1))) w) (d2)) (div (ins y w) (d2)))
                                            (diveq1d ((an (not (eq y (d0))) (odd w)) (ins (suc (sub y (d1))) w) (ins y w) (d2))
                                              (inseq1d ((an (not (eq y (d0))) (odd w)) (suc (sub y (d1))) y w)
                                                (anwl ((not (eq y (d0))) (odd w) (eq (suc (sub y (d1))) y))
                                                  H6))))
                                          (sylib ((an (not (eq y (d0))) (odd w)) (odd (ins y w)) (eq (ins y w) (b1 (div (ins y w) (d2)))))
                                            (eqb1 ((ins y w)))
                                            (sylib ((an (not (eq y (d0))) (odd w)) (el (d0) (ns (ins y w))) (odd (ins y w)))
                                              H7
                                              (sylibr ((an (not (eq y (d0))) (odd w)) (or (eq (d0) y) (el (d0) (ns w))) (el (d0) (ns (ins y w))))
                                                H8
                                                (orrd ((an (not (eq y (d0))) (odd w)) (eq (d0) y) (el (d0) (ns w)))
                                                  (sylibr ((an (not (eq y (d0))) (odd w)) (odd w) (el (d0) (ns w)))
                                                    H1
                                                    H9))))))))
                                    (suceqd ((an (not (eq y (d0))) (odd w)) (suc (card (div w (d2)))) (card w))
                                      (syl5eqr ((an (not (eq y (d0))) (odd w)) (suc (card (div w (d2)))) (card (b1 (div w (d2)))) (card w))
                                        H3
                                        (cardeqd ((an (not (eq y (d0))) (odd w)) (b1 (div w (d2))) w)
                                          (eqcomd ((an (not (eq y (d0))) (odd w)) w (b1 (div w (d2))))
                                            (sylib ((an (not (eq y (d0))) (odd w)) (odd w) (eq w (b1 (div w (d2)))))
                                              (eqb1 (w))
                                              H9)))))))
                                (eqeqd ((an (not (eq y (d0))) (not (odd w))) (card (div (ins (suc (sub y (d1))) w) (d2))) (card (ins y w)) (suc (card (div w (d2)))) (suc (card w)))
                                  (syl5eqr ((an (not (eq y (d0))) (not (odd w))) (card (div (ins (suc (sub y (d1))) w) (d2))) (card (b0 (div (ins (suc (sub y (d1))) w) (d2)))) (card (ins y w)))
                                    (cardb0 ((div (ins (suc (sub y (d1))) w) (d2))))
                                    (cardeqd ((an (not (eq y (d0))) (not (odd w))) (b0 (div (ins (suc (sub y (d1))) w) (d2))) (ins y w))
                                      (eqtr4d ((an (not (eq y (d0))) (not (odd w))) (b0 (div (ins (suc (sub y (d1))) w) (d2))) (b0 (div (ins y w) (d2))) (ins y w))
                                        (b0eqd ((an (not (eq y (d0))) (not (odd w))) (div (ins (suc (sub y (d1))) w) (d2)) (div (ins y w) (d2)))
                                          (diveq1d ((an (not (eq y (d0))) (not (odd w))) (ins (suc (sub y (d1))) w) (ins y w) (d2))
                                            (inseq1d ((an (not (eq y (d0))) (not (odd w))) (suc (sub y (d1))) y w)
                                              (anwl ((not (eq y (d0))) (not (odd w)) (eq (suc (sub y (d1))) y))
                                                H6))))
                                        (sylib ((an (not (eq y (d0))) (not (odd w))) (not (odd (ins y w))) (eq (ins y w) (b0 (div (ins y w) (d2)))))
                                          (eqb0 ((ins y w)))
                                          (sylbir ((an (not (eq y (d0))) (not (odd w))) (not (or (eq y (d0)) (odd w))) (not (odd (ins y w))))
                                            (notor ((eq y (d0)) (odd w)))
                                            (ax_mp ((im (odd (ins y w)) (or (eq y (d0)) (odd w))) (im (not (or (eq y (d0)) (odd w))) (not (odd (ins y w)))))
                                              (con3 ((odd (ins y w)) (or (eq y (d0)) (odd w))))
                                              (sylbir ((odd (ins y w)) (el (d0) (ns (ins y w))) (or (eq y (d0)) (odd w)))
                                                H7
                                                (sylbi ((el (d0) (ns (ins y w))) (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w)))
                                                  H8
                                                  (ax_mp ((iff (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))) (im (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))))
                                                    (bi1 ((or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))))
                                                    (ax_mp ((iff (el (d0) (ns w)) (odd w)) (iff (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))))
                                                      (ax_mp ((iff (eq (d0) y) (eq y (d0))) (im (iff (el (d0) (ns w)) (odd w)) (iff (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w)))))
                                                        (oreq ((eq (d0) y) (eq y (d0)) (el (d0) (ns w)) (odd w)))
                                                        (eqcomb ((d0) y)))
                                                      H1))))))))))
                                  (suceqd ((an (not (eq y (d0))) (not (odd w))) (card (div w (d2))) (card w))
                                    (syl5eqr ((an (not (eq y (d0))) (not (odd w))) (card (div w (d2))) (card (b0 (div w (d2)))) (card w))
                                      H4
                                      (cardeqd ((an (not (eq y (d0))) (not (odd w))) (b0 (div w (d2))) w)
                                        (eqcomd ((an (not (eq y (d0))) (not (odd w))) w (b0 (div w (d2))))
                                          (sylib ((an (not (eq y (d0))) (not (odd w))) (not (odd w)) (eq w (b0 (div w (d2)))))
                                            H2
                                            (anr ((not (eq y (d0))) (not (odd w))))))))))))))))))))))))))))))))))))

(def lrec ((z nat ()) (S set ()) (n nat ())) (nat ())
((f nat) (i nat))
(srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n))

(local theorem lreceqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Sh (im _G (eqs _S1 _S2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (lrec _z1 _S1 _n1) (lrec _z2 _S2 _n2)))
((f nat) (i nat))
(:conv (im _G (eq (lrec _z1 _S1 _n1) (lrec _z2 _S2 _n2)))
  (im
    _G
    (eq
      (:unfold lrec (_z1 _S1 _n1) (f i)
        (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) _z1 (app _S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) _n1))
      (:unfold lrec (_z2 _S2 _n2) (f i)
        (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) _z2 (app _S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) _n2))))
  (sreceqd (_G (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) _z1 (app _S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) _z2 (app _S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) _n1 _n2)
    (lameqd (_G f (sbn (size (Dom (ns f))) i (if (eq i (d0)) _z1 (app _S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))) (sbn (size (Dom (ns f))) i (if (eq i (d0)) _z2 (app _S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))
      (sbneqd (_G i (size (Dom (ns f))) (size (Dom (ns f))) (if (eq i (d0)) _z1 (app _S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq i (d0)) _z2 (app _S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))
        (eqidd (_G (size (Dom (ns f)))))
        (ifeqd (_G (eq i (d0)) (eq i (d0)) _z1 _z2 (app _S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))) (app _S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))
          (biidd (_G (eq i (d0))))
          _zh
          (appeqd (_G _S1 _S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))) (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))
            _Sh
            (eqidd (_G (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))))
    _nh)))

(local theorem lreceq ((_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _z1 _z2) (im (eqs _S1 _S2) (im (eq _n1 _n2) (eq (lrec _z1 _S1 _n1) (lrec _z2 _S2 _n2)))))
()
(exp ((eq _z1 _z2) (eqs _S1 _S2) (im (eq _n1 _n2) (eq (lrec _z1 _S1 _n1) (lrec _z2 _S2 _n2))))
  (exp ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq (lrec _z1 _S1 _n1) (lrec _z2 _S2 _n2)))
    (lreceqd ((an (an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)) _z1 _z2 _S1 _S2 _n1 _n2)
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq _z1 _z2))
        (anl ((eq _z1 _z2) (eqs _S1 _S2))))
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eqs _S1 _S2))
        (anr ((eq _z1 _z2) (eqs _S1 _S2))))
      (anr ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)))))))

(local theorem lreceq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (lrec _z1 S n) (lrec _z2 S n)))
()
(lreceqd (_G _z1 _z2 S S n n)
  _h
  (eqsidd (_G S))
  (eqidd (_G n))))

(local theorem lreceq1 ((_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq _z1 _z2) (eq (lrec _z1 S n) (lrec _z2 S n)))
()
(lreceq1d ((eq _z1 _z2) _z1 _z2 S n)
  (id ((eq _z1 _z2)))))

(local theorem lreceq2d ((_G wff ()) (z nat ()) (_S1 set ()) (_S2 set ()) (n nat ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eq (lrec z _S1 n) (lrec z _S2 n)))
()
(lreceqd (_G z z _S1 _S2 n n)
  (eqidd (_G z))
  _h
  (eqidd (_G n))))

(local theorem lreceq2 ((z nat ()) (_S1 set ()) (_S2 set ()) (n nat ())) ()
  (im (eqs _S1 _S2) (eq (lrec z _S1 n) (lrec z _S2 n)))
()
(lreceq2d ((eqs _S1 _S2) z _S1 _S2 n)
  (id ((eqs _S1 _S2)))))

(local theorem lreceq3d ((_G wff ()) (z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (lrec z S _n1) (lrec z S _n2)))
()
(lreceqd (_G z z S S _n1 _n2)
  (eqidd (_G z))
  (eqsidd (_G S))
  _h))

(local theorem lreceq3 ((z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (lrec z S _n1) (lrec z S _n2)))
()
(lreceq3d ((eq _n1 _n2) z S _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem lrecval ((S set ()) (n nat ()) (z nat ())) ()
  (eq (lrec z S n) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
((f nat) (i nat) (x nat))
(:let H1 (eqtrd ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) i (size (Dom (ns f))) n)
  (anr ((eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))))
  (anwl ((eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f)))) (eq (size (Dom (ns f))) n))
    (sreclem (f n x (lrec z S x)))))
(:let H2 (subeq1d ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) i n (d1))
  H1)
(:let H3 (sndeqd ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (sub i (d1)) (sub n (d1)))
  H2)
(:let H4 (anwl ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (snd (sub i (d1))) (snd (sub n (d1)))))
  H3)
(ax_mp ((eq (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (rlam x (upto n) (lrec z S x))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))) (eq (lrec z S n) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))))
  (ax_mp ((eq (lrec z S n) (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (rlam x (upto n) (lrec z S x)))) (im (eq (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (rlam x (upto n) (lrec z S x))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))) (eq (lrec z S n) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))))
    (eqtr ((lrec z S n) (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (rlam x (upto n) (lrec z S x))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))))
    (:conv (eq (lrec z S n) (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (rlam x (upto n) (lrec z S x))))
      (eq
        (:unfold lrec (z S n) (f i)
          (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n))
        (app
          (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))
          (rlam
            x
            (upto n)
            (:unfold lrec (z S x) (f i)
              (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) x)))))
      (srecval (x (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n))))
  (applame ((rlam x (upto n) (lrec z S x)) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))) f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))
    (sbned ((eq f (rlam x (upto n) (lrec z S x))) i (size (Dom (ns f))) (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
      (eqtrd ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
        (ifeq1d ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (eq i (d0)) (eq n (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))
          (eqeq1d ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) i n (d0))
            H1))
        (syla ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))) (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))) (eq (if (eq n (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))))
          (ifeq3a (z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))) (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))) (eq n (d0))))
          (appeq2d ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))) (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))
            (preqd ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (fst (sub i (d1))) (fst (sub n (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))
              (anwl ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (fst (sub i (d1))) (fst (sub n (d1)))))
                (fsteqd ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (sub i (d1)) (sub n (d1)))
                  H2))
              (preqd ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (snd (sub i (d1))) (snd (sub n (d1))) (app (ns f) (snd (sub i (d1)))) (lrec z S (snd (sub n (d1)))))
                H4
                (eqtrd ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (app (ns f) (snd (sub i (d1)))) (app (ns f) (snd (sub n (d1)))) (lrec z S (snd (sub n (d1)))))
                  (appeq2d ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (ns f) (snd (sub i (d1))) (snd (sub n (d1))))
                    H4)
                  (syl6eq ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (app (ns f) (snd (sub n (d1)))) (sbn (snd (sub n (d1))) x (lrec z S x)) (lrec z S (snd (sub n (d1)))))
                    (sbne (x (snd (sub n (d1))) (lrec z S x) (lrec z S (snd (sub n (d1)))))
                      (lreceq3 (z S x (snd (sub n (d1))))))
                    (sylc ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (eq f (rlam x (upto n) (lrec z S x))) (lt (snd (sub n (d1))) n) (eq (app (ns f) (snd (sub n (d1)))) (sbn (snd (sub n (d1))) x (lrec z S x))))
                      (sreclem2 (f n x (lrec z S x) (snd (sub n (d1)))))
                      (anll ((eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f)))) (not (eq n (d0)))))
                      (mpbii ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (lt (snd (sub n (d1))) (cons (fst (sub n (d1))) (snd (sub n (d1))))) (lt (snd (sub n (d1))) n))
                        (ltconsid2 ((fst (sub n (d1))) (snd (sub n (d1)))))
                        (lteq2d ((an (an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (snd (sub n (d1))) (cons (fst (sub n (d1))) (snd (sub n (d1)))) n)
                          (anwr ((an (eq f (rlam x (upto n) (lrec z S x))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
                            (:conv (im (not (eq n (d0))) (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
                              (im
                                (:sym (:unfold ne (n (d0)) ()
                                  (not (eq n (d0)))))
                                (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
                              (consfstsnd (n))))))))))))))))))))))

(theorem lrec0 ((z nat ()) (S set ())) ()
  (eq (lrec z S (d0)) z)
()
(ax_mp ((eq (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z) (eq (lrec z S (d0)) z))
  (ax_mp ((eq (lrec z S (d0)) (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1))))))))) (im (eq (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z) (eq (lrec z S (d0)) z)))
    (eqtr ((lrec z S (d0)) (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z))
    (lrecval (S (d0) z)))
  (ax_mp ((eq (d0) (d0)) (eq (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z))
    (ifpos ((eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))))
    (eqid ((d0))))))

(theorem lrecS ((z nat ()) (S set ()) (a nat ()) (b nat ())) ()
  (eq (lrec z S (cons a b)) (app S (pr a (pr b (lrec z S b)))))
()
(:let H1 (conssnd (a b))
(ax_mp ((eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))) (eq (lrec z S (cons a b)) (app S (pr a (pr b (lrec z S b))))))
  (ax_mp ((eq (lrec z S (cons a b)) (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))))) (im (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))) (eq (lrec z S (cons a b)) (app S (pr a (pr b (lrec z S b)))))))
    (eqtr ((lrec z S (cons a b)) (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))))
    (lrecval (S (cons a b) z)))
  (ax_mp ((eq (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))) (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))))
    (ax_mp ((eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (im (eq (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))) (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b)))))))
      (eqtr ((if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))))
      (ax_mp ((not (eq (cons a b) (d0))) (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))))
        (ifneg ((eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))))
        (:conv (not (eq (cons a b) (d0)))
          (:sym (:unfold ne ((cons a b) (d0)) ()
            (not (eq (cons a b) (d0)))))
          (consne0 (a b)))))
    (ax_mp ((eq (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b)))) (eq (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))))
      (appeq2 (S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b)))))
      (ax_mp ((eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))) (eq (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b)))))
        (ax_mp ((eq (fst (sub (cons a b) (d1))) a) (im (eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))) (eq (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b))))))
          (preq ((fst (sub (cons a b) (d1))) a (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))))
          (consfst (a b)))
        (ax_mp ((eq (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)) (eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))))
          (ax_mp ((eq (snd (sub (cons a b) (d1))) b) (im (eq (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)) (eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b)))))
            (preq ((snd (sub (cons a b) (d1))) b (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)))
            H1)
          (ax_mp ((eq (snd (sub (cons a b) (d1))) b) (eq (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)))
            (lreceq3 (z S (snd (sub (cons a b) (d1))) b))
            H1))))))))

(local theorem listindd ((G wff ()) (x nat) (a nat) (l nat) (n nat ()) (px wff (x)) (p0 wff ()) (pn wff ()) (pl wff (l)) (ps wff (a l)))
  ((hn (im (eq x n) (iff px pn)))
   (h0 (im (eq x (d0)) (iff px p0)))
   (hl (im (eq x l) (iff px pl)))
   (hs (im (eq x (cons a l)) (iff px ps)))
   (h1 (im G p0))
   (h2 (im (an G pl) ps)))
  (im G pn)
((w nat) (z nat))
(:let H1 (anr ((an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))))
(indstr (G z w n (sb z x px) pn (sb w x px))
  (syl6bb ((eq z n) (sb z x px) (sb n x px) pn)
    (sbe (x n px pn)
      hn)
    (sbeq1 (x z n px)))
  (sbeq1 (x z w px))
  (casesda ((an G (al z (im (lt z w) (sb z x px)))) (eq w (d0)) (sb w x px))
    (mpbird ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (d0))) (sb (d0) x px) (sb w x px))
      (sbeq1d (x (an (an G (al z (im (lt z w) (sb z x px)))) (eq w (d0))) w (d0) px)
        (anr ((an G (al z (im (lt z w) (sb z x px)))) (eq w (d0)))))
      (anwll (G (al z (im (lt z w) (sb z x px))) (eq w (d0)) (sb (d0) x px))
        (sylibr (G p0 (sb (d0) x px))
          (sbe (x (d0) px p0)
            h0)
          h1)))
    (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ex a (ex l (eq w (cons a l)))) (sb w x px))
      (sylib ((an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ne w (d0)) (ex a (ex l (eq w (cons a l)))))
        (excons (w a l))
        (:conv (im (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ne w (d0)))
          (im
            (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0))))
            (:unfold ne (w (d0)) ()
              (not (eq w (d0)))))
          (anr ((an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))))))
      (eexd (a (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ex l (eq w (cons a l))) (sb w x px))
        (eexd (l (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (eq w (cons a l)) (sb w x px))
          (anwl ((an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0))) (im (eq w (cons a l)) (sb w x px)))
            (exp ((an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l)) (sb w x px))
              (mpbird ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) ps (sb w x px))
                (syl6bb ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (sb w x px) (sb (cons a l) x px) ps)
                  (sbe (x (cons a l) px ps)
                    hs)
                  (sbeq1d (x (an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) w (cons a l) px)
                    H1))
                (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) pl ps)
                  (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (lt l w) pl)
                    (mpbiri ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (lt l (cons a l)) (lt l w))
                      (ltconsid2 (a l))
                      (lteq2d ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) l w (cons a l))
                        H1))
                    (rsyl ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (al z (im (lt z w) (sb z x px))) (im (lt l w) pl))
                      (anlr (G (al z (im (lt z w) (sb z x px))) (eq w (cons a l))))
                      (eale (z l (im (lt z w) (sb z x px)) (im (lt l w) pl))
                        (imeqd ((eq z l) (lt z w) (lt l w) (sb z x px) pl)
                          (lteq1 (z l w))
                          (syl6bb ((eq z l) (sb z x px) (sb l x px) pl)
                            (sbe (x l px pl)
                              hl)
                            (sbeq1 (x z l px)))))))
                  (anwll (G (al z (im (lt z w) (sb z x px))) (eq w (cons a l)) (im pl ps))
                    (exp (G pl ps)
                      h2)))))))))))))

(local theorem listind ((x nat) (a nat) (l nat) (n nat ()) (px wff (x)) (p0 wff ()) (pn wff ()) (pl wff (l)) (ps wff (a l)))
  ((hn (im (eq x n) (iff px pn)))
   (h0 (im (eq x (d0)) (iff px p0)))
   (hl (im (eq x l) (iff px pl)))
   (hs (im (eq x (cons a l)) (iff px ps)))
   (h1 p0)
   (h2 (im pl ps)))
  pn
()
(trud (pn)
  (listindd ((tru) x a l n px p0 pn pl ps)
    hn
    h0
    hl
    hs
    (a1i ((tru) p0)
      h1)
    (anwr ((tru) pl ps)
      h2))))

(def lmems ((l nat ())) (nat ())
((x nat) (y nat) (z nat))
(lrec (d0) (slam x (slam z (lam y (ins x y)))) l))

(local theorem lmemseqd ((_G wff ()) (_l1 nat ()) (_l2 nat ()))
  ((_lh (im _G (eq _l1 _l2))))
  (im _G (eq (lmems _l1) (lmems _l2)))
((x nat) (y nat) (z nat))
(:conv (im _G (eq (lmems _l1) (lmems _l2)))
  (im
    _G
    (eq
      (:unfold lmems (_l1) (x y z)
        (lrec (d0) (slam x (slam z (lam y (ins x y)))) _l1))
      (:unfold lmems (_l2) (x y z)
        (lrec (d0) (slam x (slam z (lam y (ins x y)))) _l2))))
  (lreceqd (_G (d0) (d0) (slam x (slam z (lam y (ins x y)))) (slam x (slam z (lam y (ins x y)))) _l1 _l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam x (slam z (lam y (ins x y))))))
    _lh)))

(local theorem lmemseq ((_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (eq (lmems _l1) (lmems _l2)))
()
(lmemseqd ((eq _l1 _l2) _l1 _l2)
  (id ((eq _l1 _l2)))))

(theorem lmems0 () ()
  (eq (lmems (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (lmems (d0)) (d0))
  (eq
    (:unfold lmems ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (ins x1 x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (ins x1 x3))))))))

(theorem lmemsS ((a nat ()) (l nat ())) ()
  (eq (lmems (cons a l)) (ins a (lmems l)))
((x nat) (y nat) (z nat))
(ax_mp ((eq (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l))) (eq (lmems (cons a l)) (ins a (lmems l))))
  (ax_mp ((eq (lmems (cons a l)) (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l))))) (im (eq (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l))) (eq (lmems (cons a l)) (ins a (lmems l)))))
    (eqtr ((lmems (cons a l)) (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l))))
    (:conv (eq (lmems (cons a l)) (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))))
      (eq
        (:unfold lmems ((cons a l)) (x y z)
          (lrec (d0) (slam x (slam z (lam y (ins x y)))) (cons a l)))
        (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))))
      (lrecS ((d0) (slam x (slam z (lam y (ins x y)))) a l))))
  (:conv (eq (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l)))
    (eq
      (app
        (slam x (slam z (lam y (ins x y))))
        (pr
          a
          (pr
            l
            (:sym (:unfold lmems (l) (x y z)
              (lrec (d0) (slam x (slam z (lam y (ins x y)))) l))))))
      (ins a (lmems l)))
    (appslame (a (pr l (lmems l)) (ins a (lmems l)) x (slam z (lam y (ins x y))))
      (appslamed ((eq x a) l (lmems l) (ins a (lmems l)) z (lam y (ins x y)))
        (applamed ((an (eq x a) (eq z l)) (lmems l) (ins a (lmems l)) y (ins x y))
          (inseqd ((an (an (eq x a) (eq z l)) (eq y (lmems l))) x a y (lmems l))
            (anll ((eq x a) (eq z l) (eq y (lmems l))))
            (anr ((an (eq x a) (eq z l)) (eq y (lmems l)))))))))))

(def lmem ((a nat ()) (l nat ())) (wff ())
()
(el a (ns (lmems l))))

(local theorem lmemeqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_l1 nat ()) (_l2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_lh (im _G (eq _l1 _l2))))
  (im _G (iff (lmem _a1 _l1) (lmem _a2 _l2)))
()
(:conv (im _G (iff (lmem _a1 _l1) (lmem _a2 _l2)))
  (im
    _G
    (iff
      (:unfold lmem (_a1 _l1) ()
        (el _a1 (ns (lmems _l1))))
      (:unfold lmem (_a2 _l2) ()
        (el _a2 (ns (lmems _l2))))))
  (eleqd (_G _a1 _a2 (ns (lmems _l1)) (ns (lmems _l2)))
    _ah
    (nseqd (_G (lmems _l1) (lmems _l2))
      (lmemseqd (_G _l1 _l2)
        _lh)))))

(local theorem lmemeq ((_a1 nat ()) (_a2 nat ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _l1 _l2) (iff (lmem _a1 _l1) (lmem _a2 _l2))))
()
(exp ((eq _a1 _a2) (eq _l1 _l2) (iff (lmem _a1 _l1) (lmem _a2 _l2)))
  (lmemeqd ((an (eq _a1 _a2) (eq _l1 _l2)) _a1 _a2 _l1 _l2)
    (anl ((eq _a1 _a2) (eq _l1 _l2)))
    (anr ((eq _a1 _a2) (eq _l1 _l2))))))

(local theorem lmemeq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (l nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (iff (lmem _a1 l) (lmem _a2 l)))
()
(lmemeqd (_G _a1 _a2 l l)
  _h
  (eqidd (_G l))))

(local theorem lmemeq1 ((_a1 nat ()) (_a2 nat ()) (l nat ())) ()
  (im (eq _a1 _a2) (iff (lmem _a1 l) (lmem _a2 l)))
()
(lmemeq1d ((eq _a1 _a2) _a1 _a2 l)
  (id ((eq _a1 _a2)))))

(local theorem lmemeq2d ((_G wff ()) (a nat ()) (_l1 nat ()) (_l2 nat ()))
  ((_h (im _G (eq _l1 _l2))))
  (im _G (iff (lmem a _l1) (lmem a _l2)))
()
(lmemeqd (_G a a _l1 _l2)
  (eqidd (_G a))
  _h))

(local theorem lmemeq2 ((a nat ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (iff (lmem a _l1) (lmem a _l2)))
()
(lmemeq2d ((eq _l1 _l2) a _l1 _l2)
  (id ((eq _l1 _l2)))))

(local theorem lmem0 ((a nat ())) ()
  (not (lmem a (d0)))
()
(mtbir ((el a (ns (d0))) (lmem a (d0)))
  (ax_mp ((eq (lmems (d0)) (d0)) (iff (lmem a (d0)) (el a (ns (d0)))))
    (:conv (im (eq (lmems (d0)) (d0)) (iff (lmem a (d0)) (el a (ns (d0)))))
      (im
        (eq (lmems (d0)) (d0))
        (iff
          (:unfold lmem (a (d0)) ()
            (el a (ns (lmems (d0)))))
          (el a (ns (d0)))))
      (elneq2 (a (lmems (d0)) (d0))))
    (lmems0 ()))
  (el02 (a))))

(local theorem lmemS ((a nat ()) (b nat ()) (l nat ())) ()
  (iff (lmem a (cons b l)) (or (eq a b) (lmem a l)))
()
(ax_mp ((iff (el a (ns (ins b (lmems l)))) (or (eq a b) (lmem a l))) (iff (lmem a (cons b l)) (or (eq a b) (lmem a l))))
  (ax_mp ((iff (lmem a (cons b l)) (el a (ns (ins b (lmems l))))) (im (iff (el a (ns (ins b (lmems l)))) (or (eq a b) (lmem a l))) (iff (lmem a (cons b l)) (or (eq a b) (lmem a l)))))
    (bitr ((lmem a (cons b l)) (el a (ns (ins b (lmems l)))) (or (eq a b) (lmem a l))))
    (ax_mp ((eq (lmems (cons b l)) (ins b (lmems l))) (iff (lmem a (cons b l)) (el a (ns (ins b (lmems l))))))
      (:conv (im (eq (lmems (cons b l)) (ins b (lmems l))) (iff (lmem a (cons b l)) (el a (ns (ins b (lmems l))))))
        (im
          (eq (lmems (cons b l)) (ins b (lmems l)))
          (iff
            (:unfold lmem (a (cons b l)) ()
              (el a (ns (lmems (cons b l)))))
            (el a (ns (ins b (lmems l))))))
        (elneq2 (a (lmems (cons b l)) (ins b (lmems l)))))
      (lmemsS (b l))))
  (:conv (iff (el a (ns (ins b (lmems l)))) (or (eq a b) (lmem a l)))
    (iff
      (el a (ns (ins b (lmems l))))
      (or
        (eq a b)
        (:unfold lmem (a l) ()
          (el a (ns (lmems l))))))
    (elins (a b (lmems l))))))

(local theorem lmem1 ((a nat ()) (b nat ())) ()
  (iff (lmem a (cons b (d0))) (eq a b))
()
(ax_mp ((iff (or (eq a b) (lmem a (d0))) (eq a b)) (iff (lmem a (cons b (d0))) (eq a b)))
  (ax_mp ((iff (lmem a (cons b (d0))) (or (eq a b) (lmem a (d0)))) (im (iff (or (eq a b) (lmem a (d0))) (eq a b)) (iff (lmem a (cons b (d0))) (eq a b))))
    (bitr ((lmem a (cons b (d0))) (or (eq a b) (lmem a (d0))) (eq a b)))
    (lmemS (a b (d0))))
  (ax_mp ((not (lmem a (d0))) (iff (or (eq a b) (lmem a (d0))) (eq a b)))
    (bior2 ((eq a b) (lmem a (d0))))
    (lmem0 (a)))))

(local theorem lmemconsid ((a nat ()) (l nat ())) ()
  (lmem a (cons a l))
()
(mpbir ((or (eq a a) (lmem a l)) (lmem a (cons a l)))
  (lmemS (a a l))
  (ax_mp ((eq a a) (or (eq a a) (lmem a l)))
    (orl ((eq a a) (lmem a l)))
    (eqid (a)))))

(local theorem lmemlt ((a nat ()) (l nat ())) ()
  (im (lmem a l) (lt a l))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (eqidd ((eq _1 l) a))
(:let H2 (id ((eq _1 l)))
(:let H3 (eqidd ((eq _1 (d0)) a))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 x2) a))
(:let H6 (id ((eq _1 x2)))
(:let H7 (eqidd ((eq _1 (cons x1 x2)) a))
(:let H8 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l (im (lmem a _1) (lt a _1)) (im (lmem a (d0)) (lt a (d0))) (im (lmem a l) (lt a l)) (im (lmem a x2) (lt a x2)) (im (lmem a (cons x1 x2)) (lt a (cons x1 x2))))
  (imeqd ((eq _1 l) (lmem a _1) (lmem a l) (lt a _1) (lt a l))
    (lmemeqd ((eq _1 l) a a _1 l)
      H1
      H2)
    (lteqd ((eq _1 l) a a _1 l)
      H1
      H2))
  (imeqd ((eq _1 (d0)) (lmem a _1) (lmem a (d0)) (lt a _1) (lt a (d0)))
    (lmemeqd ((eq _1 (d0)) a a _1 (d0))
      H3
      H4)
    (lteqd ((eq _1 (d0)) a a _1 (d0))
      H3
      H4))
  (imeqd ((eq _1 x2) (lmem a _1) (lmem a x2) (lt a _1) (lt a x2))
    (lmemeqd ((eq _1 x2) a a _1 x2)
      H5
      H6)
    (lteqd ((eq _1 x2) a a _1 x2)
      H5
      H6))
  (imeqd ((eq _1 (cons x1 x2)) (lmem a _1) (lmem a (cons x1 x2)) (lt a _1) (lt a (cons x1 x2)))
    (lmemeqd ((eq _1 (cons x1 x2)) a a _1 (cons x1 x2))
      H7
      H8)
    (lteqd ((eq _1 (cons x1 x2)) a a _1 (cons x1 x2))
      H7
      H8))
  (ax_mp ((not (lmem a (d0))) (im (lmem a (d0)) (lt a (d0))))
    (absurd ((lmem a (d0)) (lt a (d0))))
    (lmem0 (a)))
  (syl5bi ((im (lmem a x2) (lt a x2)) (lmem a (cons x1 x2)) (or (eq a x1) (lmem a x2)) (lt a (cons x1 x2)))
    (lmemS (a x1 x2))
    (eord ((im (lmem a x2) (lt a x2)) (eq a x1) (lmem a x2) (lt a (cons x1 x2)))
      (a1i ((im (lmem a x2) (lt a x2)) (im (eq a x1) (lt a (cons x1 x2))))
        (mpbiri ((eq a x1) (lt x1 (cons x1 x2)) (lt a (cons x1 x2)))
          (ltconsid1 (x1 x2))
          (lteq1 (a x1 (cons x1 x2)))))
      (imim2i ((lmem a x2) (lt a x2) (lt a (cons x1 x2)))
        (mpi ((lt a x2) (lt x2 (cons x1 x2)) (lt a (cons x1 x2)))
          (ltconsid2 (x1 x2))
          (lttr (a x2 (cons x1 x2)))))))))))))))))

(def all ((A set ()) (l nat ())) (wff ())
()
(subset (ns (lmems l)) A))

(local theorem alleqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_l1 nat ()) (_l2 nat ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_lh (im _G (eq _l1 _l2))))
  (im _G (iff (all _A1 _l1) (all _A2 _l2)))
()
(:conv (im _G (iff (all _A1 _l1) (all _A2 _l2)))
  (im
    _G
    (iff
      (:unfold all (_A1 _l1) ()
        (subset (ns (lmems _l1)) _A1))
      (:unfold all (_A2 _l2) ()
        (subset (ns (lmems _l2)) _A2))))
  (sseqd (_G (ns (lmems _l1)) (ns (lmems _l2)) _A1 _A2)
    (nseqd (_G (lmems _l1) (lmems _l2))
      (lmemseqd (_G _l1 _l2)
        _lh))
    _Ah)))

(local theorem alleq ((_A1 set ()) (_A2 set ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eqs _A1 _A2) (im (eq _l1 _l2) (iff (all _A1 _l1) (all _A2 _l2))))
()
(exp ((eqs _A1 _A2) (eq _l1 _l2) (iff (all _A1 _l1) (all _A2 _l2)))
  (alleqd ((an (eqs _A1 _A2) (eq _l1 _l2)) _A1 _A2 _l1 _l2)
    (anl ((eqs _A1 _A2) (eq _l1 _l2)))
    (anr ((eqs _A1 _A2) (eq _l1 _l2))))))

(local theorem alleq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (l nat ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (iff (all _A1 l) (all _A2 l)))
()
(alleqd (_G _A1 _A2 l l)
  _h
  (eqidd (_G l))))

(local theorem alleq1 ((_A1 set ()) (_A2 set ()) (l nat ())) ()
  (im (eqs _A1 _A2) (iff (all _A1 l) (all _A2 l)))
()
(alleq1d ((eqs _A1 _A2) _A1 _A2 l)
  (id ((eqs _A1 _A2)))))

(local theorem alleq2d ((_G wff ()) (A set ()) (_l1 nat ()) (_l2 nat ()))
  ((_h (im _G (eq _l1 _l2))))
  (im _G (iff (all A _l1) (all A _l2)))
()
(alleqd (_G A A _l1 _l2)
  (eqsidd (_G A))
  _h))

(local theorem alleq2 ((A set ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (iff (all A _l1) (all A _l2)))
()
(alleq2d ((eq _l1 _l2) A _l1 _l2)
  (id ((eq _l1 _l2)))))

(local theorem all0 ((A set ())) ()
  (all A (d0))
((x nat))
(:conv (all A (d0))
  (:unfold all (A (d0)) ()
    (:unfold subset ((ns (lmems (d0))) A) (x)
      (al x (im (el x (ns (lmems (d0)))) (el x A)))))
  (ax_gen (x (im (el x (ns (lmems (d0)))) (el x A)))
    (ax_mp ((not (el x (ns (lmems (d0))))) (im (el x (ns (lmems (d0)))) (el x A)))
      (absurd ((el x (ns (lmems (d0)))) (el x A)))
      (:conv (not (el x (ns (lmems (d0)))))
        (not
          (:sym (:unfold lmem (x (d0)) ()
            (el x (ns (lmems (d0)))))))
        (lmem0 (x)))))))

(local theorem allS ((A set ()) (a nat ()) (b nat ())) ()
  (iff (all A (cons a b)) (an (el a A) (all A b)))
()
(ax_mp ((iff (subset (ns (ins a (lmems b))) A) (an (el a A) (all A b))) (iff (all A (cons a b)) (an (el a A) (all A b))))
  (ax_mp ((iff (all A (cons a b)) (subset (ns (ins a (lmems b))) A)) (im (iff (subset (ns (ins a (lmems b))) A) (an (el a A) (all A b))) (iff (all A (cons a b)) (an (el a A) (all A b)))))
    (bitr ((all A (cons a b)) (subset (ns (ins a (lmems b))) A) (an (el a A) (all A b))))
    (ax_mp ((eqs (ns (lmems (cons a b))) (ns (ins a (lmems b)))) (iff (all A (cons a b)) (subset (ns (ins a (lmems b))) A)))
      (:conv (im (eqs (ns (lmems (cons a b))) (ns (ins a (lmems b)))) (iff (all A (cons a b)) (subset (ns (ins a (lmems b))) A)))
        (im
          (eqs (ns (lmems (cons a b))) (ns (ins a (lmems b))))
          (iff
            (:unfold all (A (cons a b)) ()
              (subset (ns (lmems (cons a b))) A))
            (subset (ns (ins a (lmems b))) A)))
        (sseq1 ((ns (lmems (cons a b))) (ns (ins a (lmems b))) A)))
      (ax_mp ((eq (lmems (cons a b)) (ins a (lmems b))) (eqs (ns (lmems (cons a b))) (ns (ins a (lmems b)))))
        (nseq ((lmems (cons a b)) (ins a (lmems b))))
        (lmemsS (a b)))))
  (:conv (iff (subset (ns (ins a (lmems b))) A) (an (el a A) (all A b)))
    (iff
      (subset (ns (ins a (lmems b))) A)
      (an
        (el a A)
        (:unfold all (A b) ()
          (subset (ns (lmems b)) A))))
    (insss (A a (lmems b))))))

(local theorem all1 ((A set ()) (a nat ())) ()
  (iff (all A (cons a (d0))) (el a A))
()
(ax_mp ((iff (an (el a A) (all A (d0))) (el a A)) (iff (all A (cons a (d0))) (el a A)))
  (ax_mp ((iff (all A (cons a (d0))) (an (el a A) (all A (d0)))) (im (iff (an (el a A) (all A (d0))) (el a A)) (iff (all A (cons a (d0))) (el a A))))
    (bitr ((all A (cons a (d0))) (an (el a A) (all A (d0))) (el a A)))
    (allS (A a (d0))))
  (ax_mp ((all A (d0)) (iff (an (el a A) (all A (d0))) (el a A)))
    (bian2 ((el a A) (all A (d0))))
    (all0 (A)))))

(local theorem allal2 ((A set ()) (l nat ()) (x nat)) ()
  (iff (all A l) (al x (im (lmem x l) (el x A))))
()
(:conv (iff (all A l) (al x (im (lmem x l) (el x A))))
  (iff
    (all A l)
    (:sym (:unfold all (A l) ()
      (:unfold subset ((ns (lmems l)) A) (x)
        (al
          x
          (im
            (:sym (:unfold lmem (x l) ()
              (el x (ns (lmems l)))))
            (el x A)))))))
  (biid ((all A l)))))

(local theorem allal ((l nat ()) (x nat) (p wff (x))) ()
  (iff (all (ab x p) l) (al x (im (lmem x l) p)))
()
(ax_mp ((iff (al x (im (lmem x l) p)) (all (ab x p) l)) (iff (all (ab x p) l) (al x (im (lmem x l) p))))
  (bicom ((al x (im (lmem x l) p)) (all (ab x p) l)))
  (:conv (iff (al x (im (lmem x l) p)) (all (ab x p) l))
    (iff
      (al
        x
        (im
          (:unfold lmem (x l) ()
            (el x (ns (lmems l))))
          p))
      (:unfold all ((ab x p) l) ()
        (subset (ns (lmems l)) (ab x p))))
    (ssab2 ((ns (lmems l)) x p)))))

(local theorem elall ((A set ()) (l nat ()) (x nat ())) ()
  (im (all A l) (im (lmem x l) (el x A)))
((x1 nat))
(:conv (im (all A l) (im (lmem x l) (el x A)))
  (im
    (:unfold all (A l) ()
      (:unfold subset ((ns (lmems l)) A) (x1)
        (al x1 (im (el x1 (ns (lmems l))) (el x1 A)))))
    (im (lmem x l) (el x A)))
  (eale (x1 x (im (el x1 (ns (lmems l))) (el x1 A)) (im (lmem x l) (el x A)))
    (imeqd ((eq x1 x) (el x1 (ns (lmems l))) (lmem x l) (el x1 A) (el x A))
      (:conv (im (eq x1 x) (iff (el x1 (ns (lmems l))) (lmem x l)))
        (im
          (eq x1 x)
          (iff
            (el x1 (ns (lmems l)))
            (:unfold lmem (x l) ()
              (el x (ns (lmems l))))))
        (eleq1 ((ns (lmems l)) x1 x)))
      (eleq1 (A x1 x))))))

(local theorem ssall ((A set ()) (B set ()) (l nat ())) ()
  (im (subset A B) (im (all A l) (all B l)))
((x1 nat))
(:conv (im (subset A B) (im (all A l) (all B l)))
  (im
    (subset A B)
    (im
      (:unfold all (A l) ()
        (:unfold subset ((ns (lmems l)) A) (x1)
          (al x1 (im (el x1 (ns (lmems l))) (el x1 A)))))
      (:unfold all (B l) ()
        (:unfold subset ((ns (lmems l)) B) (x1)
          (al x1 (im (el x1 (ns (lmems l))) (el x1 B)))))))
  (alimd (x1 (subset A B) (im (el x1 (ns (lmems l))) (el x1 A)) (im (el x1 (ns (lmems l))) (el x1 B)))
    (imim2d ((subset A B) (el x1 (ns (lmems l))) (el x1 A) (el x1 B))
      (ssel (A B x1))))))

(def List ((A set ())) (set ())
((n nat))
(ab n (all A n)))

(local theorem Listeqd ((_G wff ()) (_A1 set ()) (_A2 set ()))
  ((_Ah (im _G (eqs _A1 _A2))))
  (im _G (eqs (List _A1) (List _A2)))
((n nat))
(:conv (im _G (eqs (List _A1) (List _A2)))
  (im
    _G
    (eqs
      (:unfold List (_A1) (n)
        (ab n (all _A1 n)))
      (:unfold List (_A2) (n)
        (ab n (all _A2 n)))))
  (abeqd (_G n (all _A1 n) (all _A2 n))
    (alleqd (_G _A1 _A2 n n)
      _Ah
      (eqidd (_G n))))))

(local theorem Listeq ((_A1 set ()) (_A2 set ())) ()
  (im (eqs _A1 _A2) (eqs (List _A1) (List _A2)))
()
(Listeqd ((eqs _A1 _A2) _A1 _A2)
  (id ((eqs _A1 _A2)))))

(local theorem elList ((A set ()) (l nat ())) ()
  (iff (el l (List A)) (all A l))
((n nat))
(:conv (iff (el l (List A)) (all A l))
  (iff
    (el
      l
      (:unfold List (A) (n)
        (ab n (all A n))))
    (all A l))
  (elabe (n l (all A n) (all A l))
    (alleq2 (A n l)))))

(local theorem elList0 ((A set ())) ()
  (el (d0) (List A))
()
(mpbir ((all A (d0)) (el (d0) (List A)))
  (elList (A (d0)))
  (all0 (A))))

(local theorem elListS ((A set ()) (a nat ()) (b nat ())) ()
  (iff (el (cons a b) (List A)) (an (el a A) (el b (List A))))
()
(ax_mp ((iff (all A (cons a b)) (an (el a A) (el b (List A)))) (iff (el (cons a b) (List A)) (an (el a A) (el b (List A)))))
  (ax_mp ((iff (el (cons a b) (List A)) (all A (cons a b))) (im (iff (all A (cons a b)) (an (el a A) (el b (List A)))) (iff (el (cons a b) (List A)) (an (el a A) (el b (List A))))))
    (bitr ((el (cons a b) (List A)) (all A (cons a b)) (an (el a A) (el b (List A)))))
    (elList (A (cons a b))))
  (ax_mp ((iff (an (el a A) (el b (List A))) (an (el a A) (all A b))) (iff (all A (cons a b)) (an (el a A) (el b (List A)))))
    (ax_mp ((iff (all A (cons a b)) (an (el a A) (all A b))) (im (iff (an (el a A) (el b (List A))) (an (el a A) (all A b))) (iff (all A (cons a b)) (an (el a A) (el b (List A))))))
      (bitr4 ((all A (cons a b)) (an (el a A) (all A b)) (an (el a A) (el b (List A)))))
      (allS (A a b)))
    (aneq2i ((el a A) (el b (List A)) (all A b))
      (elList (A b))))))

(local theorem elListHd ((A set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h (im G (el (cons a b) (List A)))))
  (im G (el a A))
()
(anld (G (el a A) (el b (List A)))
  (sylib (G (el (cons a b) (List A)) (an (el a A) (el b (List A))))
    (elListS (A a b))
    h)))

(local theorem elListTl ((A set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h (im G (el (cons a b) (List A)))))
  (im G (el b (List A)))
()
(anrd (G (el a A) (el b (List A)))
  (sylib (G (el (cons a b) (List A)) (an (el a A) (el b (List A))))
    (elListS (A a b))
    h)))

(local theorem elList1 ((A set ()) (a nat ())) ()
  (iff (el (cons a (d0)) (List A)) (el a A))
()
(ax_mp ((iff (an (el a A) (el (d0) (List A))) (el a A)) (iff (el (cons a (d0)) (List A)) (el a A)))
  (ax_mp ((iff (el (cons a (d0)) (List A)) (an (el a A) (el (d0) (List A)))) (im (iff (an (el a A) (el (d0) (List A))) (el a A)) (iff (el (cons a (d0)) (List A)) (el a A))))
    (bitr ((el (cons a (d0)) (List A)) (an (el a A) (el (d0) (List A))) (el a A)))
    (elListS (A a (d0))))
  (ax_mp ((el (d0) (List A)) (iff (an (el a A) (el (d0) (List A))) (el a A)))
    (bian2 ((el a A) (el (d0) (List A))))
    (elList0 (A)))))

(def len ((l nat ())) (nat ())
((x nat) (y nat) (z nat))
(lrec (d0) (slam x (slam z (lam y (suc y)))) l))

(local theorem leneqd ((_G wff ()) (_l1 nat ()) (_l2 nat ()))
  ((_lh (im _G (eq _l1 _l2))))
  (im _G (eq (len _l1) (len _l2)))
((x nat) (y nat) (z nat))
(:conv (im _G (eq (len _l1) (len _l2)))
  (im
    _G
    (eq
      (:unfold len (_l1) (x y z)
        (lrec (d0) (slam x (slam z (lam y (suc y)))) _l1))
      (:unfold len (_l2) (x y z)
        (lrec (d0) (slam x (slam z (lam y (suc y)))) _l2))))
  (lreceqd (_G (d0) (d0) (slam x (slam z (lam y (suc y)))) (slam x (slam z (lam y (suc y)))) _l1 _l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam x (slam z (lam y (suc y))))))
    _lh)))

(local theorem leneq ((_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (eq (len _l1) (len _l2)))
()
(leneqd ((eq _l1 _l2) _l1 _l2)
  (id ((eq _l1 _l2)))))

(theorem len0 () ()
  (eq (len (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (len (d0)) (d0))
  (eq
    (:unfold len ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (suc x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (suc x3))))))))

(theorem lenS ((a nat ()) (b nat ())) ()
  (eq (len (cons a b)) (suc (len b)))
((x nat) (y nat) (z nat))
(ax_mp ((eq (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b))) (eq (len (cons a b)) (suc (len b))))
  (ax_mp ((eq (len (cons a b)) (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b))))) (im (eq (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b))) (eq (len (cons a b)) (suc (len b)))))
    (eqtr ((len (cons a b)) (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b))))
    (:conv (eq (len (cons a b)) (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))))
      (eq
        (:unfold len ((cons a b)) (x y z)
          (lrec (d0) (slam x (slam z (lam y (suc y)))) (cons a b)))
        (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))))
      (lrecS ((d0) (slam x (slam z (lam y (suc y)))) a b))))
  (:conv (eq (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b)))
    (eq
      (app
        (slam x (slam z (lam y (suc y))))
        (pr
          a
          (pr
            b
            (:sym (:unfold len (b) (x y z)
              (lrec (d0) (slam x (slam z (lam y (suc y)))) b))))))
      (suc (len b)))
    (appslame (a (pr b (len b)) (suc (len b)) x (slam z (lam y (suc y))))
      (appslamed ((eq x a) b (len b) (suc (len b)) z (lam y (suc y)))
        (applamed ((an (eq x a) (eq z b)) (len b) (suc (len b)) y (suc y))
          (suceqd ((an (an (eq x a) (eq z b)) (eq y (len b))) y (len b))
            (anr ((an (eq x a) (eq z b)) (eq y (len b)))))))))))

(local theorem len1 ((a nat ())) ()
  (eq (len (cons a (d0))) (d1))
()
(ax_mp ((eq (suc (len (d0))) (d1)) (eq (len (cons a (d0))) (d1)))
  (ax_mp ((eq (len (cons a (d0))) (suc (len (d0)))) (im (eq (suc (len (d0))) (d1)) (eq (len (cons a (d0))) (d1))))
    (eqtr ((len (cons a (d0))) (suc (len (d0))) (d1)))
    (lenS (a (d0))))
  (ax_mp ((eq (len (d0)) (d0)) (eq (suc (len (d0))) (d1)))
    (:conv (im (eq (len (d0)) (d0)) (eq (suc (len (d0))) (d1)))
      (im
        (eq (len (d0)) (d0))
        (eq
          (suc (len (d0)))
          (:unfold d1 () ()
            (suc (d0)))))
      (suceq ((len (d0)) (d0))))
    (len0 ()))))

(local theorem leneq0 ((n nat ())) ()
  (iff (eq (len n) (d0)) (eq n (d0)))
()
(ibii ((eq (len n) (d0)) (eq n (d0)))
  (ax_mp ((im (not (eq n (d0))) (not (eq (len n) (d0)))) (im (eq (len n) (d0)) (eq n (d0))))
    (ax_3 ((eq n (d0)) (eq (len n) (d0))))
    (syl ((not (eq n (d0))) (eq (len n) (suc (len (snd (sub n (d1)))))) (not (eq (len n) (d0))))
      (:conv (im (eq (len n) (suc (len (snd (sub n (d1)))))) (not (eq (len n) (d0))))
        (im
          (eq (len n) (suc (len (snd (sub n (d1))))))
          (:sym (:unfold ne ((len n) (d0)) ()
            (not (eq (len n) (d0))))))
        (sucne0 ((len n) (len (snd (sub n (d1)))))))
      (syl6eq ((not (eq n (d0))) (len n) (len (cons (fst (sub n (d1))) (snd (sub n (d1))))) (suc (len (snd (sub n (d1))))))
        (lenS ((fst (sub n (d1))) (snd (sub n (d1)))))
        (leneqd ((not (eq n (d0))) n (cons (fst (sub n (d1))) (snd (sub n (d1)))))
          (eqcomd ((not (eq n (d0))) (cons (fst (sub n (d1))) (snd (sub n (d1)))) n)
            (:conv (im (not (eq n (d0))) (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
              (im
                (:sym (:unfold ne (n (d0)) ()
                  (not (eq n (d0)))))
                (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
              (consfstsnd (n))))))))
  (syl6eq ((eq n (d0)) (len n) (len (d0)) (d0))
    (len0 ())
    (leneq (n (d0))))))

(local theorem lenleid ((l nat ())) ()
  (le (len l) l)
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l (le (len _1) _1) (le (len (d0)) (d0)) (le (len l) l) (le (len x2) x2) (le (len (cons x1 x2)) (cons x1 x2)))
  (leeqd ((eq _1 l) (len _1) (len l) _1 l)
    (leneqd ((eq _1 l) _1 l)
      H1)
    H1)
  (leeqd ((eq _1 (d0)) (len _1) (len (d0)) _1 (d0))
    (leneqd ((eq _1 (d0)) _1 (d0))
      H2)
    H2)
  (leeqd ((eq _1 x2) (len _1) (len x2) _1 x2)
    (leneqd ((eq _1 x2) _1 x2)
      H3)
    H3)
  (leeqd ((eq _1 (cons x1 x2)) (len _1) (len (cons x1 x2)) _1 (cons x1 x2))
    (leneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
      H4)
    H4)
  (ax_mp ((eq (len (d0)) (d0)) (le (len (d0)) (d0)))
    (eqle ((len (d0)) (d0)))
    (len0 ()))
  (sylibr ((le (len x2) x2) (le (suc (len x2)) (cons x1 x2)) (le (len (cons x1 x2)) (cons x1 x2)))
    (ax_mp ((eq (len (cons x1 x2)) (suc (len x2))) (iff (le (len (cons x1 x2)) (cons x1 x2)) (le (suc (len x2)) (cons x1 x2))))
      (leeq1 ((len (cons x1 x2)) (suc (len x2)) (cons x1 x2)))
      (lenS (x1 x2)))
    (sylib ((le (len x2) x2) (le (len x2) (pr x1 x2)) (le (suc (len x2)) (cons x1 x2)))
      (:conv (iff (le (len x2) (pr x1 x2)) (le (suc (len x2)) (cons x1 x2)))
        (iff
          (le (len x2) (pr x1 x2))
          (le
            (suc (len x2))
            (:unfold cons (x1 x2) ()
              (suc (pr x1 x2)))))
        (lesuc ((len x2) (pr x1 x2))))
      (mpi ((le (len x2) x2) (le x2 (pr x1 x2)) (le (len x2) (pr x1 x2)))
        (leprid2 (x1 x2))
        (letr ((len x2) x2 (pr x1 x2))))))))))))

(def Array ((A set ()) (n nat ())) (set ())
((l nat))
(ab l (an (el l (List A)) (eq (len l) n))))

(local theorem Arrayeqd ((_G wff ()) (_A1 set ()) (_A2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_Ah (im _G (eqs _A1 _A2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eqs (Array _A1 _n1) (Array _A2 _n2)))
((l nat))
(:conv (im _G (eqs (Array _A1 _n1) (Array _A2 _n2)))
  (im
    _G
    (eqs
      (:unfold Array (_A1 _n1) (l)
        (ab l (an (el l (List _A1)) (eq (len l) _n1))))
      (:unfold Array (_A2 _n2) (l)
        (ab l (an (el l (List _A2)) (eq (len l) _n2))))))
  (abeqd (_G l (an (el l (List _A1)) (eq (len l) _n1)) (an (el l (List _A2)) (eq (len l) _n2)))
    (aneqd (_G (el l (List _A1)) (el l (List _A2)) (eq (len l) _n1) (eq (len l) _n2))
      (eleqd (_G l l (List _A1) (List _A2))
        (eqidd (_G l))
        (Listeqd (_G _A1 _A2)
          _Ah))
      (eqeqd (_G (len l) (len l) _n1 _n2)
        (eqidd (_G (len l)))
        _nh)))))

(local theorem Arrayeq ((_A1 set ()) (_A2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _A1 _A2) (im (eq _n1 _n2) (eqs (Array _A1 _n1) (Array _A2 _n2))))
()
(exp ((eqs _A1 _A2) (eq _n1 _n2) (eqs (Array _A1 _n1) (Array _A2 _n2)))
  (Arrayeqd ((an (eqs _A1 _A2) (eq _n1 _n2)) _A1 _A2 _n1 _n2)
    (anl ((eqs _A1 _A2) (eq _n1 _n2)))
    (anr ((eqs _A1 _A2) (eq _n1 _n2))))))

(local theorem Arrayeq1d ((_G wff ()) (_A1 set ()) (_A2 set ()) (n nat ()))
  ((_h (im _G (eqs _A1 _A2))))
  (im _G (eqs (Array _A1 n) (Array _A2 n)))
()
(Arrayeqd (_G _A1 _A2 n n)
  _h
  (eqidd (_G n))))

(local theorem Arrayeq1 ((_A1 set ()) (_A2 set ()) (n nat ())) ()
  (im (eqs _A1 _A2) (eqs (Array _A1 n) (Array _A2 n)))
()
(Arrayeq1d ((eqs _A1 _A2) _A1 _A2 n)
  (id ((eqs _A1 _A2)))))

(local theorem Arrayeq2d ((_G wff ()) (A set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eqs (Array A _n1) (Array A _n2)))
()
(Arrayeqd (_G A A _n1 _n2)
  (eqsidd (_G A))
  _h))

(local theorem Arrayeq2 ((A set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eqs (Array A _n1) (Array A _n2)))
()
(Arrayeq2d ((eq _n1 _n2) A _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem elArray ((A set ()) (l nat ()) (n nat ())) ()
  (iff (el l (Array A n)) (an (el l (List A)) (eq (len l) n)))
((x nat))
(:conv (iff (el l (Array A n)) (an (el l (List A)) (eq (len l) n)))
  (iff
    (el
      l
      (:unfold Array (A n) (x)
        (ab x (an (el x (List A)) (eq (len x) n)))))
    (an (el l (List A)) (eq (len l) n)))
  (elabe (x l (an (el x (List A)) (eq (len x) n)) (an (el l (List A)) (eq (len l) n)))
    (aneqd ((eq x l) (el x (List A)) (el l (List A)) (eq (len x) n) (eq (len l) n))
      (eleq1 ((List A) x l))
      (eqeq1d ((eq x l) (len x) (len l) n)
        (leneq (x l)))))))

(local theorem elArrayList ((A set ()) (l nat ()) (n nat ())) ()
  (im (el l (Array A n)) (el l (List A)))
()
(sylbi ((el l (Array A n)) (an (el l (List A)) (eq (len l) n)) (el l (List A)))
  (elArray (A l n))
  (anl ((el l (List A)) (eq (len l) n)))))

(local theorem elArraylen ((A set ()) (l nat ()) (n nat ())) ()
  (im (el l (Array A n)) (eq (len l) n))
()
(sylbi ((el l (Array A n)) (an (el l (List A)) (eq (len l) n)) (eq (len l) n))
  (elArray (A l n))
  (anr ((el l (List A)) (eq (len l) n)))))

(local theorem elArray02 ((A set ()) (l nat ())) ()
  (iff (el l (Array A (d0))) (eq l (d0)))
()
(ax_mp ((iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))) (iff (el l (Array A (d0))) (eq l (d0))))
  (ax_mp ((iff (el l (Array A (d0))) (an (el l (List A)) (eq (len l) (d0)))) (im (iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))) (iff (el l (Array A (d0))) (eq l (d0)))))
    (bitr ((el l (Array A (d0))) (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))))
    (elArray (A l (d0))))
  (ax_mp ((iff (an (el l (List A)) (eq l (d0))) (eq l (d0))) (iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))))
    (ax_mp ((iff (an (el l (List A)) (eq (len l) (d0))) (an (el l (List A)) (eq l (d0)))) (im (iff (an (el l (List A)) (eq l (d0))) (eq l (d0))) (iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0)))))
      (bitr ((an (el l (List A)) (eq (len l) (d0))) (an (el l (List A)) (eq l (d0))) (eq l (d0))))
      (aneq2i ((el l (List A)) (eq (len l) (d0)) (eq l (d0)))
        (leneq0 (l))))
    (ax_mp ((im (eq l (d0)) (el l (List A))) (iff (an (el l (List A)) (eq l (d0))) (eq l (d0))))
      (bian1a ((el l (List A)) (eq l (d0))))
      (mpbiri ((eq l (d0)) (el (d0) (List A)) (el l (List A)))
        (elList0 (A))
        (eleq1 ((List A) l (d0))))))))

(local theorem elArray0 ((A set ())) ()
  (el (d0) (Array A (d0)))
()
(mpbir ((eq (d0) (d0)) (el (d0) (Array A (d0))))
  (elArray02 (A (d0)))
  (eqid ((d0)))))

(local theorem elArrayS ((A set ()) (a nat ()) (b nat ()) (n nat ())) ()
  (iff (el (cons a b) (Array A (suc n))) (an (el a A) (el b (Array A n))))
()
(ax_mp ((iff (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (el a A) (el b (Array A n)))) (iff (el (cons a b) (Array A (suc n))) (an (el a A) (el b (Array A n)))))
  (ax_mp ((iff (el (cons a b) (Array A (suc n))) (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n)))) (im (iff (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (el a A) (el b (Array A n)))) (iff (el (cons a b) (Array A (suc n))) (an (el a A) (el b (Array A n))))))
    (bitr ((el (cons a b) (Array A (suc n))) (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (el a A) (el b (Array A n)))))
    (elArray (A (cons a b) (suc n))))
  (ax_mp ((iff (an (an (el a A) (el b (List A))) (eq (len b) n)) (an (el a A) (el b (Array A n)))) (iff (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (el a A) (el b (Array A n)))))
    (ax_mp ((iff (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (an (el a A) (el b (List A))) (eq (len b) n))) (im (iff (an (an (el a A) (el b (List A))) (eq (len b) n)) (an (el a A) (el b (Array A n)))) (iff (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (el a A) (el b (Array A n))))))
      (bitr ((an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (an (el a A) (el b (List A))) (eq (len b) n)) (an (el a A) (el b (Array A n)))))
      (ax_mp ((iff (eq (len (cons a b)) (suc n)) (eq (len b) n)) (iff (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (an (el a A) (el b (List A))) (eq (len b) n))))
        (ax_mp ((iff (el (cons a b) (List A)) (an (el a A) (el b (List A)))) (im (iff (eq (len (cons a b)) (suc n)) (eq (len b) n)) (iff (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (an (an (el a A) (el b (List A))) (eq (len b) n)))))
          (aneq ((el (cons a b) (List A)) (an (el a A) (el b (List A))) (eq (len (cons a b)) (suc n)) (eq (len b) n)))
          (elListS (A a b)))
        (ax_mp ((iff (eq (suc (len b)) (suc n)) (eq (len b) n)) (iff (eq (len (cons a b)) (suc n)) (eq (len b) n)))
          (ax_mp ((iff (eq (len (cons a b)) (suc n)) (eq (suc (len b)) (suc n))) (im (iff (eq (suc (len b)) (suc n)) (eq (len b) n)) (iff (eq (len (cons a b)) (suc n)) (eq (len b) n))))
            (bitr ((eq (len (cons a b)) (suc n)) (eq (suc (len b)) (suc n)) (eq (len b) n)))
            (ax_mp ((eq (len (cons a b)) (suc (len b))) (iff (eq (len (cons a b)) (suc n)) (eq (suc (len b)) (suc n))))
              (eqeq1 ((len (cons a b)) (suc (len b)) (suc n)))
              (lenS (a b))))
          (peano2 ((len b) n)))))
    (ax_mp ((iff (an (el a A) (el b (Array A n))) (an (el a A) (an (el b (List A)) (eq (len b) n)))) (iff (an (an (el a A) (el b (List A))) (eq (len b) n)) (an (el a A) (el b (Array A n)))))
      (ax_mp ((iff (an (an (el a A) (el b (List A))) (eq (len b) n)) (an (el a A) (an (el b (List A)) (eq (len b) n)))) (im (iff (an (el a A) (el b (Array A n))) (an (el a A) (an (el b (List A)) (eq (len b) n)))) (iff (an (an (el a A) (el b (List A))) (eq (len b) n)) (an (el a A) (el b (Array A n))))))
        (bitr4 ((an (an (el a A) (el b (List A))) (eq (len b) n)) (an (el a A) (an (el b (List A)) (eq (len b) n))) (an (el a A) (el b (Array A n)))))
        (anass ((el a A) (el b (List A)) (eq (len b) n))))
      (aneq2i ((el a A) (el b (Array A n)) (an (el b (List A)) (eq (len b) n)))
        (elArray (A b n)))))))

(local theorem elArray1 ((A set ()) (a nat ())) ()
  (iff (el (cons a (d0)) (Array A (d1))) (el a A))
()
(ax_mp ((iff (an (el a A) (el (d0) (Array A (d0)))) (el a A)) (iff (el (cons a (d0)) (Array A (d1))) (el a A)))
  (ax_mp ((iff (el (cons a (d0)) (Array A (d1))) (an (el a A) (el (d0) (Array A (d0))))) (im (iff (an (el a A) (el (d0) (Array A (d0)))) (el a A)) (iff (el (cons a (d0)) (Array A (d1))) (el a A))))
    (bitr ((el (cons a (d0)) (Array A (d1))) (an (el a A) (el (d0) (Array A (d0)))) (el a A)))
    (:conv (iff (el (cons a (d0)) (Array A (d1))) (an (el a A) (el (d0) (Array A (d0)))))
      (iff
        (el
          (cons a (d0))
          (Array
            A
            (:unfold d1 () ()
              (suc (d0)))))
        (an (el a A) (el (d0) (Array A (d0)))))
      (elArrayS (A a (d0) (d0)))))
  (ax_mp ((el (d0) (Array A (d0))) (iff (an (el a A) (el (d0) (Array A (d0)))) (el a A)))
    (bian2 ((el a A) (el (d0) (Array A (d0)))))
    (elArray0 (A)))))

(local theorem elArraySne0 ((A set ()) (l nat ()) (n nat ())) ()
  (im (el l (Array A (suc n))) (ne l (d0)))
()
(sylbi ((el l (Array A (suc n))) (an (el l (List A)) (eq (len l) (suc n))) (ne l (d0)))
  (elArray (A l (suc n)))
  (anwr ((el l (List A)) (eq (len l) (suc n)) (ne l (d0)))
    (sylib ((eq (len l) (suc n)) (not (eq (len l) (d0))) (ne l (d0)))
      (ax_mp ((iff (eq (len l) (d0)) (eq l (d0))) (iff (not (eq (len l) (d0))) (ne l (d0))))
        (:conv (im (iff (eq (len l) (d0)) (eq l (d0))) (iff (not (eq (len l) (d0))) (ne l (d0))))
          (im
            (iff (eq (len l) (d0)) (eq l (d0)))
            (iff
              (not (eq (len l) (d0)))
              (:unfold ne (l (d0)) ()
                (not (eq l (d0))))))
          (noteq ((eq (len l) (d0)) (eq l (d0)))))
        (leneq0 (l)))
      (:conv (im (eq (len l) (suc n)) (not (eq (len l) (d0))))
        (im
          (eq (len l) (suc n))
          (:sym (:unfold ne ((len l) (d0)) ()
            (not (eq (len l) (d0))))))
        (sucne0 ((len l) n)))))))

(local theorem elArrayS2 ((A set ()) (a nat) (b nat) (l nat ()) (n nat ())) ()
  (iff (el l (Array A (suc n))) (ex a (ex b (an (an (el a A) (el b (Array A n))) (eq l (cons a b))))))
()
(ax_mp ((iff (an (el l (Array A (suc n))) (ex a (ex b (eq l (cons a b))))) (el l (Array A (suc n)))) (iff (el l (Array A (suc n))) (ex a (ex b (an (an (el a A) (el b (Array A n))) (eq l (cons a b)))))))
  (ax_mp ((iff (ex a (ex b (an (an (el a A) (el b (Array A n))) (eq l (cons a b))))) (an (el l (Array A (suc n))) (ex a (ex b (eq l (cons a b)))))) (im (iff (an (el l (Array A (suc n))) (ex a (ex b (eq l (cons a b))))) (el l (Array A (suc n)))) (iff (el l (Array A (suc n))) (ex a (ex b (an (an (el a A) (el b (Array A n))) (eq l (cons a b))))))))
    (bitr2 ((ex a (ex b (an (an (el a A) (el b (Array A n))) (eq l (cons a b))))) (an (el l (Array A (suc n))) (ex a (ex b (eq l (cons a b))))) (el l (Array A (suc n)))))
    (bian1exi ((el l (Array A (suc n))) a (ex b (an (an (el a A) (el b (Array A n))) (eq l (cons a b)))) (ex b (eq l (cons a b))))
      (bian1exi ((el l (Array A (suc n))) b (an (an (el a A) (el b (Array A n))) (eq l (cons a b))) (eq l (cons a b)))
        (ax_mp ((im (eq l (cons a b)) (iff (an (el a A) (el b (Array A n))) (el l (Array A (suc n))))) (iff (an (an (el a A) (el b (Array A n))) (eq l (cons a b))) (an (el l (Array A (suc n))) (eq l (cons a b)))))
          (aneq1a ((an (el a A) (el b (Array A n))) (el l (Array A (suc n))) (eq l (cons a b))))
          (bicomd ((eq l (cons a b)) (el l (Array A (suc n))) (an (el a A) (el b (Array A n))))
            (syl6bb ((eq l (cons a b)) (el l (Array A (suc n))) (el (cons a b) (Array A (suc n))) (an (el a A) (el b (Array A n))))
              (elArrayS (A a b n))
              (eleq1 ((Array A (suc n)) l (cons a b)))))))))
  (ax_mp ((im (el l (Array A (suc n))) (ex a (ex b (eq l (cons a b))))) (iff (an (el l (Array A (suc n))) (ex a (ex b (eq l (cons a b))))) (el l (Array A (suc n)))))
    (bian2a ((el l (Array A (suc n))) (ex a (ex b (eq l (cons a b))))))
    (sylib ((el l (Array A (suc n))) (ne l (d0)) (ex a (ex b (eq l (cons a b)))))
      (excons (l a b))
      (elArraySne0 (A l n))))))

(local theorem Arrayfin ((A set ()) (n nat ())) ()
  (im (finite A) (finite (Array A n)))
((_1 nat) (x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat))
(indd ((finite A) _1 x1 n (finite (Array A _1)) (finite (Array A (d0))) (finite (Array A n)) (finite (Array A x1)) (finite (Array A (suc x1))))
  (fineqd ((eq _1 n) (Array A _1) (Array A n))
    (Arrayeqd ((eq _1 n) A A _1 n)
      (eqsidd ((eq _1 n) A))
      (id ((eq _1 n)))))
  (fineqd ((eq _1 (d0)) (Array A _1) (Array A (d0)))
    (Arrayeqd ((eq _1 (d0)) A A _1 (d0))
      (eqsidd ((eq _1 (d0)) A))
      (id ((eq _1 (d0))))))
  (fineqd ((eq _1 x1) (Array A _1) (Array A x1))
    (Arrayeqd ((eq _1 x1) A A _1 x1)
      (eqsidd ((eq _1 x1) A))
      (id ((eq _1 x1)))))
  (fineqd ((eq _1 (suc x1)) (Array A _1) (Array A (suc x1)))
    (Arrayeqd ((eq _1 (suc x1)) A A _1 (suc x1))
      (eqsidd ((eq _1 (suc x1)) A))
      (id ((eq _1 (suc x1))))))
  (a1i ((finite A) (finite (Array A (d0))))
    (mpbir ((finite (ns (sn (d0)))) (finite (Array A (d0))))
      (ax_mp ((eqs (Array A (d0)) (ns (sn (d0)))) (iff (finite (Array A (d0))) (finite (ns (sn (d0))))))
        (fineq ((Array A (d0)) (ns (sn (d0)))))
        (eqri ((Array A (d0)) (ns (sn (d0))) x2)
          (ax_mp ((iff (el x2 (ns (sn (d0)))) (eq x2 (d0))) (iff (el x2 (Array A (d0))) (el x2 (ns (sn (d0))))))
            (ax_mp ((iff (el x2 (Array A (d0))) (eq x2 (d0))) (im (iff (el x2 (ns (sn (d0)))) (eq x2 (d0))) (iff (el x2 (Array A (d0))) (el x2 (ns (sn (d0)))))))
              (bitr4 ((el x2 (Array A (d0))) (eq x2 (d0)) (el x2 (ns (sn (d0))))))
              (elArray02 (A x2)))
            (elsn (x2 (d0))))))
      (finns ((sn (d0))))))
  (rsyl ((an (finite A) (finite (Array A x1))) (finite (Xp A (Array A x1))) (finite (Array A (suc x1))))
    (imp ((finite A) (finite (Array A x1)) (finite (Xp A (Array A x1))))
      (xpfin (A (Array A x1))))
    (syl ((finite (Xp A (Array A x1))) (subset (Array A (suc x1)) (ab x3 (le x3 (lower (Xp A (Array A x1)))))) (finite (Array A (suc x1))))
      (mpi ((subset (Array A (suc x1)) (ab x3 (le x3 (lower (Xp A (Array A x1)))))) (finite (ab x3 (le x3 (lower (Xp A (Array A x1)))))) (finite (Array A (suc x1))))
        (lefin ((lower (Xp A (Array A x1))) x3))
        (finss ((Array A (suc x1)) (ab x3 (le x3 (lower (Xp A (Array A x1))))))))
      (sylib ((finite (Xp A (Array A x1))) (al x3 (im (el x3 (Array A (suc x1))) (le x3 (lower (Xp A (Array A x1)))))) (subset (Array A (suc x1)) (ab x3 (le x3 (lower (Xp A (Array A x1)))))))
        (ssab2 ((Array A (suc x1)) x3 (le x3 (lower (Xp A (Array A x1))))))
        (iald (x3 (finite (Xp A (Array A x1))) (im (el x3 (Array A (suc x1))) (le x3 (lower (Xp A (Array A x1))))))
          (syl5bi ((finite (Xp A (Array A x1))) (el x3 (Array A (suc x1))) (ex x4 (ex x5 (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5))))) (le x3 (lower (Xp A (Array A x1)))))
            (elArrayS2 (A x4 x5 x3 x1))
            (eexd (x4 (finite (Xp A (Array A x1))) (ex x5 (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))) (le x3 (lower (Xp A (Array A x1)))))
              (eexda (x5 (finite (Xp A (Array A x1))) (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5))) (le x3 (lower (Xp A (Array A x1)))))
                (mpbird ((an (finite (Xp A (Array A x1))) (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))) (le (cons x4 x5) (lower (Xp A (Array A x1)))) (le x3 (lower (Xp A (Array A x1)))))
                  (leeq1d ((an (finite (Xp A (Array A x1))) (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))) x3 (cons x4 x5) (lower (Xp A (Array A x1))))
                    (anrr ((finite (Xp A (Array A x1))) (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))))
                  (syl ((an (finite (Xp A (Array A x1))) (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))) (el (pr x4 x5) (ns (lower (Xp A (Array A x1))))) (le (cons x4 x5) (lower (Xp A (Array A x1)))))
                    (:conv (im (el (pr x4 x5) (ns (lower (Xp A (Array A x1))))) (le (cons x4 x5) (lower (Xp A (Array A x1)))))
                      (im
                        (el (pr x4 x5) (ns (lower (Xp A (Array A x1)))))
                        (:sym (:unfold lt ((pr x4 x5) (lower (Xp A (Array A x1)))) ()
                          (le
                            (:sym (:unfold cons (x4 x5) ()
                              (suc (pr x4 x5))))
                            (lower (Xp A (Array A x1)))))))
                      (ellt ((pr x4 x5) (lower (Xp A (Array A x1))))))
                    (mpbird ((an (finite (Xp A (Array A x1))) (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))) (el (pr x4 x5) (Xp A (Array A x1))) (el (pr x4 x5) (ns (lower (Xp A (Array A x1))))))
                      (anwl ((finite (Xp A (Array A x1))) (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5))) (iff (el (pr x4 x5) (ns (lower (Xp A (Array A x1))))) (el (pr x4 x5) (Xp A (Array A x1)))))
                        (ellower ((Xp A (Array A x1)) (pr x4 x5))))
                      (sylibr ((an (finite (Xp A (Array A x1))) (an (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))) (an (el x4 A) (el x5 (Array A x1))) (el (pr x4 x5) (Xp A (Array A x1))))
                        (prelxp (A (Array A x1) x4 x5))
                        (anrl ((finite (Xp A (Array A x1))) (an (el x4 A) (el x5 (Array A x1))) (eq x3 (cons x4 x5)))))))))))))))))

(def append ((l1 nat ()) (l2 nat ())) (nat ())
((x nat) (y nat) (z nat))
(lrec l2 (slam x (slam z (lam y (cons x y)))) l1))

(local theorem appendeqd ((_G wff ()) (_l11 nat ()) (_l12 nat ()) (_l21 nat ()) (_l22 nat ()))
  ((_l1h (im _G (eq _l11 _l12)))
   (_l2h (im _G (eq _l21 _l22))))
  (im _G (eq (append _l11 _l21) (append _l12 _l22)))
((x nat) (y nat) (z nat))
(:conv (im _G (eq (append _l11 _l21) (append _l12 _l22)))
  (im
    _G
    (eq
      (:unfold append (_l11 _l21) (x y z)
        (lrec _l21 (slam x (slam z (lam y (cons x y)))) _l11))
      (:unfold append (_l12 _l22) (x y z)
        (lrec _l22 (slam x (slam z (lam y (cons x y)))) _l12))))
  (lreceqd (_G _l21 _l22 (slam x (slam z (lam y (cons x y)))) (slam x (slam z (lam y (cons x y)))) _l11 _l12)
    _l2h
    (eqsidd (_G (slam x (slam z (lam y (cons x y))))))
    _l1h)))

(local theorem appendeq ((_l11 nat ()) (_l12 nat ()) (_l21 nat ()) (_l22 nat ())) ()
  (im (eq _l11 _l12) (im (eq _l21 _l22) (eq (append _l11 _l21) (append _l12 _l22))))
()
(exp ((eq _l11 _l12) (eq _l21 _l22) (eq (append _l11 _l21) (append _l12 _l22)))
  (appendeqd ((an (eq _l11 _l12) (eq _l21 _l22)) _l11 _l12 _l21 _l22)
    (anl ((eq _l11 _l12) (eq _l21 _l22)))
    (anr ((eq _l11 _l12) (eq _l21 _l22))))))

(local theorem appendeq1d ((_G wff ()) (_l11 nat ()) (_l12 nat ()) (l2 nat ()))
  ((_h (im _G (eq _l11 _l12))))
  (im _G (eq (append _l11 l2) (append _l12 l2)))
()
(appendeqd (_G _l11 _l12 l2 l2)
  _h
  (eqidd (_G l2))))

(local theorem appendeq1 ((_l11 nat ()) (_l12 nat ()) (l2 nat ())) ()
  (im (eq _l11 _l12) (eq (append _l11 l2) (append _l12 l2)))
()
(appendeq1d ((eq _l11 _l12) _l11 _l12 l2)
  (id ((eq _l11 _l12)))))

(local theorem appendeq2d ((_G wff ()) (l1 nat ()) (_l21 nat ()) (_l22 nat ()))
  ((_h (im _G (eq _l21 _l22))))
  (im _G (eq (append l1 _l21) (append l1 _l22)))
()
(appendeqd (_G l1 l1 _l21 _l22)
  (eqidd (_G l1))
  _h))

(local theorem appendeq2 ((l1 nat ()) (_l21 nat ()) (_l22 nat ())) ()
  (im (eq _l21 _l22) (eq (append l1 _l21) (append l1 _l22)))
()
(appendeq2d ((eq _l21 _l22) l1 _l21 _l22)
  (id ((eq _l21 _l22)))))

(theorem append0 ((l nat ())) ()
  (eq (append (d0) l) l)
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (append (d0) l) l)
  (eq
    (:unfold append ((d0) l) (x1 x3 x2)
      (lrec l (slam x1 (slam x2 (lam x3 (cons x1 x3)))) (d0)))
    l)
  (lrec0 (l (slam x1 (slam x2 (lam x3 (cons x1 x3))))))))

(theorem appendS ((a nat ()) (l nat ()) (r nat ())) ()
  (eq (append (cons a l) r) (cons a (append l r)))
((x nat) (y nat) (z nat))
(ax_mp ((eq (app (slam x (slam z (lam y (cons x y)))) (pr a (pr l (lrec r (slam x (slam z (lam y (cons x y)))) l)))) (cons a (append l r))) (eq (append (cons a l) r) (cons a (append l r))))
  (ax_mp ((eq (append (cons a l) r) (app (slam x (slam z (lam y (cons x y)))) (pr a (pr l (lrec r (slam x (slam z (lam y (cons x y)))) l))))) (im (eq (app (slam x (slam z (lam y (cons x y)))) (pr a (pr l (lrec r (slam x (slam z (lam y (cons x y)))) l)))) (cons a (append l r))) (eq (append (cons a l) r) (cons a (append l r)))))
    (eqtr ((append (cons a l) r) (app (slam x (slam z (lam y (cons x y)))) (pr a (pr l (lrec r (slam x (slam z (lam y (cons x y)))) l)))) (cons a (append l r))))
    (:conv (eq (append (cons a l) r) (app (slam x (slam z (lam y (cons x y)))) (pr a (pr l (lrec r (slam x (slam z (lam y (cons x y)))) l)))))
      (eq
        (:unfold append ((cons a l) r) (x y z)
          (lrec r (slam x (slam z (lam y (cons x y)))) (cons a l)))
        (app (slam x (slam z (lam y (cons x y)))) (pr a (pr l (lrec r (slam x (slam z (lam y (cons x y)))) l)))))
      (lrecS (r (slam x (slam z (lam y (cons x y)))) a l))))
  (:conv (eq (app (slam x (slam z (lam y (cons x y)))) (pr a (pr l (lrec r (slam x (slam z (lam y (cons x y)))) l)))) (cons a (append l r)))
    (eq
      (app
        (slam x (slam z (lam y (cons x y))))
        (pr
          a
          (pr
            l
            (:sym (:unfold append (l r) (x y z)
              (lrec r (slam x (slam z (lam y (cons x y)))) l))))))
      (cons a (append l r)))
    (appslame (a (pr l (append l r)) (cons a (append l r)) x (slam z (lam y (cons x y))))
      (appslamed ((eq x a) l (append l r) (cons a (append l r)) z (lam y (cons x y)))
        (applamed ((an (eq x a) (eq z l)) (append l r) (cons a (append l r)) y (cons x y))
          (conseqd ((an (an (eq x a) (eq z l)) (eq y (append l r))) x a y (append l r))
            (anll ((eq x a) (eq z l) (eq y (append l r))))
            (anr ((an (eq x a) (eq z l)) (eq y (append l r)))))))))))

(local theorem appendSi ((a nat ()) (b nat ()) (c nat ()) (x nat ()))
  ((h (eq (append a b) c)))
  (eq (append (cons x a) b) (cons x c))
()
(ax_mp ((eq (cons x (append a b)) (cons x c)) (eq (append (cons x a) b) (cons x c)))
  (ax_mp ((eq (append (cons x a) b) (cons x (append a b))) (im (eq (cons x (append a b)) (cons x c)) (eq (append (cons x a) b) (cons x c))))
    (eqtr ((append (cons x a) b) (cons x (append a b)) (cons x c)))
    (appendS (x a b)))
  (ax_mp ((eq (append a b) c) (eq (cons x (append a b)) (cons x c)))
    (conseq2 (x (append a b) c))
    h)))

(local theorem append1 ((a nat ()) (l nat ())) ()
  (eq (append (cons a (d0)) l) (cons a l))
()
(appendSi ((d0) l l a)
  (append0 (l))))

(local theorem append02 ((a nat ())) ()
  (eq (append a (d0)) a)
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 a)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 a (eq (append _1 (d0)) _1) (eq (append (d0) (d0)) (d0)) (eq (append a (d0)) a) (eq (append x2 (d0)) x2) (eq (append (cons x1 x2) (d0)) (cons x1 x2)))
  (eqeqd ((eq _1 a) (append _1 (d0)) (append a (d0)) _1 a)
    (appendeqd ((eq _1 a) _1 a (d0) (d0))
      H1
      (eqidd ((eq _1 a) (d0))))
    H1)
  (eqeqd ((eq _1 (d0)) (append _1 (d0)) (append (d0) (d0)) _1 (d0))
    (appendeqd ((eq _1 (d0)) _1 (d0) (d0) (d0))
      H2
      (eqidd ((eq _1 (d0)) (d0))))
    H2)
  (eqeqd ((eq _1 x2) (append _1 (d0)) (append x2 (d0)) _1 x2)
    (appendeqd ((eq _1 x2) _1 x2 (d0) (d0))
      H3
      (eqidd ((eq _1 x2) (d0))))
    H3)
  (eqeqd ((eq _1 (cons x1 x2)) (append _1 (d0)) (append (cons x1 x2) (d0)) _1 (cons x1 x2))
    (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) (d0) (d0))
      H4
      (eqidd ((eq _1 (cons x1 x2)) (d0))))
    H4)
  (append0 ((d0)))
  (syl5eq ((eq (append x2 (d0)) x2) (append (cons x1 x2) (d0)) (cons x1 (append x2 (d0))) (cons x1 x2))
    (appendS (x1 x2 (d0)))
    (conseq2 (x1 (append x2 (d0)) x2)))))))))

(local theorem appendass ((l1 nat ()) (l2 nat ()) (l3 nat ())) ()
  (eq (append (append l1 l2) l3) (append l1 (append l2 l3)))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l1)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l1 (eq (append (append _1 l2) l3) (append _1 (append l2 l3))) (eq (append (append (d0) l2) l3) (append (d0) (append l2 l3))) (eq (append (append l1 l2) l3) (append l1 (append l2 l3))) (eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (eq (append (append (cons x1 x2) l2) l3) (append (cons x1 x2) (append l2 l3))))
  (eqeqd ((eq _1 l1) (append (append _1 l2) l3) (append (append l1 l2) l3) (append _1 (append l2 l3)) (append l1 (append l2 l3)))
    (appendeqd ((eq _1 l1) (append _1 l2) (append l1 l2) l3 l3)
      (appendeqd ((eq _1 l1) _1 l1 l2 l2)
        H1
        (eqidd ((eq _1 l1) l2)))
      (eqidd ((eq _1 l1) l3)))
    (appendeqd ((eq _1 l1) _1 l1 (append l2 l3) (append l2 l3))
      H1
      (eqidd ((eq _1 l1) (append l2 l3)))))
  (eqeqd ((eq _1 (d0)) (append (append _1 l2) l3) (append (append (d0) l2) l3) (append _1 (append l2 l3)) (append (d0) (append l2 l3)))
    (appendeqd ((eq _1 (d0)) (append _1 l2) (append (d0) l2) l3 l3)
      (appendeqd ((eq _1 (d0)) _1 (d0) l2 l2)
        H2
        (eqidd ((eq _1 (d0)) l2)))
      (eqidd ((eq _1 (d0)) l3)))
    (appendeqd ((eq _1 (d0)) _1 (d0) (append l2 l3) (append l2 l3))
      H2
      (eqidd ((eq _1 (d0)) (append l2 l3)))))
  (eqeqd ((eq _1 x2) (append (append _1 l2) l3) (append (append x2 l2) l3) (append _1 (append l2 l3)) (append x2 (append l2 l3)))
    (appendeqd ((eq _1 x2) (append _1 l2) (append x2 l2) l3 l3)
      (appendeqd ((eq _1 x2) _1 x2 l2 l2)
        H3
        (eqidd ((eq _1 x2) l2)))
      (eqidd ((eq _1 x2) l3)))
    (appendeqd ((eq _1 x2) _1 x2 (append l2 l3) (append l2 l3))
      H3
      (eqidd ((eq _1 x2) (append l2 l3)))))
  (eqeqd ((eq _1 (cons x1 x2)) (append (append _1 l2) l3) (append (append (cons x1 x2) l2) l3) (append _1 (append l2 l3)) (append (cons x1 x2) (append l2 l3)))
    (appendeqd ((eq _1 (cons x1 x2)) (append _1 l2) (append (cons x1 x2) l2) l3 l3)
      (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) l2 l2)
        H4
        (eqidd ((eq _1 (cons x1 x2)) l2)))
      (eqidd ((eq _1 (cons x1 x2)) l3)))
    (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) (append l2 l3) (append l2 l3))
      H4
      (eqidd ((eq _1 (cons x1 x2)) (append l2 l3)))))
  (ax_mp ((eq (append (d0) (append l2 l3)) (append l2 l3)) (eq (append (append (d0) l2) l3) (append (d0) (append l2 l3))))
    (ax_mp ((eq (append (append (d0) l2) l3) (append l2 l3)) (im (eq (append (d0) (append l2 l3)) (append l2 l3)) (eq (append (append (d0) l2) l3) (append (d0) (append l2 l3)))))
      (eqtr4 ((append (append (d0) l2) l3) (append l2 l3) (append (d0) (append l2 l3))))
      (ax_mp ((eq (append (d0) l2) l2) (eq (append (append (d0) l2) l3) (append l2 l3)))
        (appendeq1 ((append (d0) l2) l2 l3))
        (append0 (l2))))
    (append0 ((append l2 l3))))
  (syl5eq ((eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (append (append (cons x1 x2) l2) l3) (append (cons x1 (append x2 l2)) l3) (append (cons x1 x2) (append l2 l3)))
    (ax_mp ((eq (append (cons x1 x2) l2) (cons x1 (append x2 l2))) (eq (append (append (cons x1 x2) l2) l3) (append (cons x1 (append x2 l2)) l3)))
      (appendeq1 ((append (cons x1 x2) l2) (cons x1 (append x2 l2)) l3))
      (appendS (x1 x2 l2)))
    (syl5eq ((eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (append (cons x1 (append x2 l2)) l3) (cons x1 (append (append x2 l2) l3)) (append (cons x1 x2) (append l2 l3)))
      (appendS (x1 (append x2 l2) l3))
      (syl6eqr ((eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (cons x1 (append (append x2 l2) l3)) (cons x1 (append x2 (append l2 l3))) (append (cons x1 x2) (append l2 l3)))
        (appendS (x1 x2 (append l2 l3)))
        (conseq2 (x1 (append (append x2 l2) l3) (append x2 (append l2 l3)))))))))))))

(local theorem appendlen ((l1 nat ()) (l2 nat ())) ()
  (eq (len (append l1 l2)) (add (len l1) (len l2)))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l1)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l1 (eq (len (append _1 l2)) (add (len _1) (len l2))) (eq (len (append (d0) l2)) (add (len (d0)) (len l2))) (eq (len (append l1 l2)) (add (len l1) (len l2))) (eq (len (append x2 l2)) (add (len x2) (len l2))) (eq (len (append (cons x1 x2) l2)) (add (len (cons x1 x2)) (len l2))))
  (eqeqd ((eq _1 l1) (len (append _1 l2)) (len (append l1 l2)) (add (len _1) (len l2)) (add (len l1) (len l2)))
    (leneqd ((eq _1 l1) (append _1 l2) (append l1 l2))
      (appendeqd ((eq _1 l1) _1 l1 l2 l2)
        H1
        (eqidd ((eq _1 l1) l2))))
    (addeqd ((eq _1 l1) (len _1) (len l1) (len l2) (len l2))
      (leneqd ((eq _1 l1) _1 l1)
        H1)
      (eqidd ((eq _1 l1) (len l2)))))
  (eqeqd ((eq _1 (d0)) (len (append _1 l2)) (len (append (d0) l2)) (add (len _1) (len l2)) (add (len (d0)) (len l2)))
    (leneqd ((eq _1 (d0)) (append _1 l2) (append (d0) l2))
      (appendeqd ((eq _1 (d0)) _1 (d0) l2 l2)
        H2
        (eqidd ((eq _1 (d0)) l2))))
    (addeqd ((eq _1 (d0)) (len _1) (len (d0)) (len l2) (len l2))
      (leneqd ((eq _1 (d0)) _1 (d0))
        H2)
      (eqidd ((eq _1 (d0)) (len l2)))))
  (eqeqd ((eq _1 x2) (len (append _1 l2)) (len (append x2 l2)) (add (len _1) (len l2)) (add (len x2) (len l2)))
    (leneqd ((eq _1 x2) (append _1 l2) (append x2 l2))
      (appendeqd ((eq _1 x2) _1 x2 l2 l2)
        H3
        (eqidd ((eq _1 x2) l2))))
    (addeqd ((eq _1 x2) (len _1) (len x2) (len l2) (len l2))
      (leneqd ((eq _1 x2) _1 x2)
        H3)
      (eqidd ((eq _1 x2) (len l2)))))
  (eqeqd ((eq _1 (cons x1 x2)) (len (append _1 l2)) (len (append (cons x1 x2) l2)) (add (len _1) (len l2)) (add (len (cons x1 x2)) (len l2)))
    (leneqd ((eq _1 (cons x1 x2)) (append _1 l2) (append (cons x1 x2) l2))
      (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) l2 l2)
        H4
        (eqidd ((eq _1 (cons x1 x2)) l2))))
    (addeqd ((eq _1 (cons x1 x2)) (len _1) (len (cons x1 x2)) (len l2) (len l2))
      (leneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
        H4)
      (eqidd ((eq _1 (cons x1 x2)) (len l2)))))
  (ax_mp ((eq (add (len (d0)) (len l2)) (len l2)) (eq (len (append (d0) l2)) (add (len (d0)) (len l2))))
    (ax_mp ((eq (len (append (d0) l2)) (len l2)) (im (eq (add (len (d0)) (len l2)) (len l2)) (eq (len (append (d0) l2)) (add (len (d0)) (len l2)))))
      (eqtr4 ((len (append (d0) l2)) (len l2) (add (len (d0)) (len l2))))
      (ax_mp ((eq (append (d0) l2) l2) (eq (len (append (d0) l2)) (len l2)))
        (leneq ((append (d0) l2) l2))
        (append0 (l2))))
    (ax_mp ((eq (add (d0) (len l2)) (len l2)) (eq (add (len (d0)) (len l2)) (len l2)))
      (ax_mp ((eq (add (len (d0)) (len l2)) (add (d0) (len l2))) (im (eq (add (d0) (len l2)) (len l2)) (eq (add (len (d0)) (len l2)) (len l2))))
        (eqtr ((add (len (d0)) (len l2)) (add (d0) (len l2)) (len l2)))
        (ax_mp ((eq (len (d0)) (d0)) (eq (add (len (d0)) (len l2)) (add (d0) (len l2))))
          (addeq1 ((len (d0)) (d0) (len l2)))
          (len0 ())))
      (add01 ((len l2)))))
  (syl5eq ((eq (len (append x2 l2)) (add (len x2) (len l2))) (len (append (cons x1 x2) l2)) (suc (len (append x2 l2))) (add (len (cons x1 x2)) (len l2)))
    (ax_mp ((eq (len (cons x1 (append x2 l2))) (suc (len (append x2 l2)))) (eq (len (append (cons x1 x2) l2)) (suc (len (append x2 l2)))))
      (ax_mp ((eq (len (append (cons x1 x2) l2)) (len (cons x1 (append x2 l2)))) (im (eq (len (cons x1 (append x2 l2))) (suc (len (append x2 l2)))) (eq (len (append (cons x1 x2) l2)) (suc (len (append x2 l2))))))
        (eqtr ((len (append (cons x1 x2) l2)) (len (cons x1 (append x2 l2))) (suc (len (append x2 l2)))))
        (ax_mp ((eq (append (cons x1 x2) l2) (cons x1 (append x2 l2))) (eq (len (append (cons x1 x2) l2)) (len (cons x1 (append x2 l2)))))
          (leneq ((append (cons x1 x2) l2) (cons x1 (append x2 l2))))
          (appendS (x1 x2 l2))))
      (lenS (x1 (append x2 l2))))
    (syl6eqr ((eq (len (append x2 l2)) (add (len x2) (len l2))) (suc (len (append x2 l2))) (suc (add (len x2) (len l2))) (add (len (cons x1 x2)) (len l2)))
      (ax_mp ((eq (add (suc (len x2)) (len l2)) (suc (add (len x2) (len l2)))) (eq (add (len (cons x1 x2)) (len l2)) (suc (add (len x2) (len l2)))))
        (ax_mp ((eq (add (len (cons x1 x2)) (len l2)) (add (suc (len x2)) (len l2))) (im (eq (add (suc (len x2)) (len l2)) (suc (add (len x2) (len l2)))) (eq (add (len (cons x1 x2)) (len l2)) (suc (add (len x2) (len l2))))))
          (eqtr ((add (len (cons x1 x2)) (len l2)) (add (suc (len x2)) (len l2)) (suc (add (len x2) (len l2)))))
          (ax_mp ((eq (len (cons x1 x2)) (suc (len x2))) (eq (add (len (cons x1 x2)) (len l2)) (add (suc (len x2)) (len l2))))
            (addeq1 ((len (cons x1 x2)) (suc (len x2)) (len l2)))
            (lenS (x1 x2))))
        (addS1 ((len x2) (len l2))))
      (suceq ((len (append x2 l2)) (add (len x2) (len l2))))))))))))

(local theorem leappend2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (append a b) (append a c)))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 a)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 a (iff (le b c) (le (append _1 b) (append _1 c))) (iff (le b c) (le (append (d0) b) (append (d0) c))) (iff (le b c) (le (append a b) (append a c))) (iff (le b c) (le (append x2 b) (append x2 c))) (iff (le b c) (le (append (cons x1 x2) b) (append (cons x1 x2) c))))
  (bieqd ((eq _1 a) (le b c) (le b c) (le (append _1 b) (append _1 c)) (le (append a b) (append a c)))
    (biidd ((eq _1 a) (le b c)))
    (leeqd ((eq _1 a) (append _1 b) (append a b) (append _1 c) (append a c))
      (appendeqd ((eq _1 a) _1 a b b)
        H1
        (eqidd ((eq _1 a) b)))
      (appendeqd ((eq _1 a) _1 a c c)
        H1
        (eqidd ((eq _1 a) c)))))
  (bieqd ((eq _1 (d0)) (le b c) (le b c) (le (append _1 b) (append _1 c)) (le (append (d0) b) (append (d0) c)))
    (biidd ((eq _1 (d0)) (le b c)))
    (leeqd ((eq _1 (d0)) (append _1 b) (append (d0) b) (append _1 c) (append (d0) c))
      (appendeqd ((eq _1 (d0)) _1 (d0) b b)
        H2
        (eqidd ((eq _1 (d0)) b)))
      (appendeqd ((eq _1 (d0)) _1 (d0) c c)
        H2
        (eqidd ((eq _1 (d0)) c)))))
  (bieqd ((eq _1 x2) (le b c) (le b c) (le (append _1 b) (append _1 c)) (le (append x2 b) (append x2 c)))
    (biidd ((eq _1 x2) (le b c)))
    (leeqd ((eq _1 x2) (append _1 b) (append x2 b) (append _1 c) (append x2 c))
      (appendeqd ((eq _1 x2) _1 x2 b b)
        H3
        (eqidd ((eq _1 x2) b)))
      (appendeqd ((eq _1 x2) _1 x2 c c)
        H3
        (eqidd ((eq _1 x2) c)))))
  (bieqd ((eq _1 (cons x1 x2)) (le b c) (le b c) (le (append _1 b) (append _1 c)) (le (append (cons x1 x2) b) (append (cons x1 x2) c)))
    (biidd ((eq _1 (cons x1 x2)) (le b c)))
    (leeqd ((eq _1 (cons x1 x2)) (append _1 b) (append (cons x1 x2) b) (append _1 c) (append (cons x1 x2) c))
      (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) b b)
        H4
        (eqidd ((eq _1 (cons x1 x2)) b)))
      (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) c c)
        H4
        (eqidd ((eq _1 (cons x1 x2)) c)))))
  (ax_mp ((iff (le (append (d0) b) (append (d0) c)) (le b c)) (iff (le b c) (le (append (d0) b) (append (d0) c))))
    (bicom ((le (append (d0) b) (append (d0) c)) (le b c)))
    (ax_mp ((eq (append (d0) c) c) (iff (le (append (d0) b) (append (d0) c)) (le b c)))
      (ax_mp ((eq (append (d0) b) b) (im (eq (append (d0) c) c) (iff (le (append (d0) b) (append (d0) c)) (le b c))))
        (leeq ((append (d0) b) b (append (d0) c) c))
        (append0 (b)))
      (append0 (c))))
  (syl6bb ((iff (le b c) (le (append x2 b) (append x2 c))) (le b c) (le (append x2 b) (append x2 c)) (le (append (cons x1 x2) b) (append (cons x1 x2) c)))
    (ax_mp ((iff (le (append (cons x1 x2) b) (append (cons x1 x2) c)) (le (cons x1 (append x2 b)) (cons x1 (append x2 c)))) (iff (le (append x2 b) (append x2 c)) (le (append (cons x1 x2) b) (append (cons x1 x2) c))))
      (ax_mp ((iff (le (append x2 b) (append x2 c)) (le (cons x1 (append x2 b)) (cons x1 (append x2 c)))) (im (iff (le (append (cons x1 x2) b) (append (cons x1 x2) c)) (le (cons x1 (append x2 b)) (cons x1 (append x2 c)))) (iff (le (append x2 b) (append x2 c)) (le (append (cons x1 x2) b) (append (cons x1 x2) c)))))
        (bitr4 ((le (append x2 b) (append x2 c)) (le (cons x1 (append x2 b)) (cons x1 (append x2 c))) (le (append (cons x1 x2) b) (append (cons x1 x2) c))))
        (lecons2 (x1 (append x2 b) (append x2 c))))
      (ax_mp ((eq (append (cons x1 x2) c) (cons x1 (append x2 c))) (iff (le (append (cons x1 x2) b) (append (cons x1 x2) c)) (le (cons x1 (append x2 b)) (cons x1 (append x2 c)))))
        (ax_mp ((eq (append (cons x1 x2) b) (cons x1 (append x2 b))) (im (eq (append (cons x1 x2) c) (cons x1 (append x2 c))) (iff (le (append (cons x1 x2) b) (append (cons x1 x2) c)) (le (cons x1 (append x2 b)) (cons x1 (append x2 c))))))
          (leeq ((append (cons x1 x2) b) (cons x1 (append x2 b)) (append (cons x1 x2) c) (cons x1 (append x2 c))))
          (appendS (x1 x2 b)))
        (appendS (x1 x2 c))))
    (id ((iff (le b c) (le (append x2 b) (append x2 c))))))))))))

(local theorem ltappend2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt b c) (lt (append a b) (append a c)))
()
(ax_mp ((iff (lt (append a b) (append a c)) (not (le c b))) (iff (lt b c) (lt (append a b) (append a c))))
  (ax_mp ((iff (lt b c) (not (le c b))) (im (iff (lt (append a b) (append a c)) (not (le c b))) (iff (lt b c) (lt (append a b) (append a c)))))
    (bitr4 ((lt b c) (not (le c b)) (lt (append a b) (append a c))))
    (ltnle (b c)))
  (ax_mp ((iff (not (le c b)) (not (le (append a c) (append a b)))) (iff (lt (append a b) (append a c)) (not (le c b))))
    (ax_mp ((iff (lt (append a b) (append a c)) (not (le (append a c) (append a b)))) (im (iff (not (le c b)) (not (le (append a c) (append a b)))) (iff (lt (append a b) (append a c)) (not (le c b)))))
      (bitr4 ((lt (append a b) (append a c)) (not (le (append a c) (append a b))) (not (le c b))))
      (ltnle ((append a b) (append a c))))
    (ax_mp ((iff (le c b) (le (append a c) (append a b))) (iff (not (le c b)) (not (le (append a c) (append a b)))))
      (noteq ((le c b) (le (append a c) (append a b))))
      (leappend2 (a c b))))))

(local theorem appendcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (append a b) (append a c)) (eq b c))
()
(ax_mp ((iff (eq b c) (an (le (append a b) (append a c)) (le (append a c) (append a b)))) (iff (eq (append a b) (append a c)) (eq b c)))
  (ax_mp ((iff (eq (append a b) (append a c)) (an (le (append a b) (append a c)) (le (append a c) (append a b)))) (im (iff (eq b c) (an (le (append a b) (append a c)) (le (append a c) (append a b)))) (iff (eq (append a b) (append a c)) (eq b c))))
    (bitr4 ((eq (append a b) (append a c)) (an (le (append a b) (append a c)) (le (append a c) (append a b))) (eq b c)))
    (eqlele ((append a b) (append a c))))
  (ax_mp ((iff (an (le b c) (le c b)) (an (le (append a b) (append a c)) (le (append a c) (append a b)))) (iff (eq b c) (an (le (append a b) (append a c)) (le (append a c) (append a b)))))
    (ax_mp ((iff (eq b c) (an (le b c) (le c b))) (im (iff (an (le b c) (le c b)) (an (le (append a b) (append a c)) (le (append a c) (append a b)))) (iff (eq b c) (an (le (append a b) (append a c)) (le (append a c) (append a b))))))
      (bitr ((eq b c) (an (le b c) (le c b)) (an (le (append a b) (append a c)) (le (append a c) (append a b)))))
      (eqlele (b c)))
    (ax_mp ((iff (le c b) (le (append a c) (append a b))) (iff (an (le b c) (le c b)) (an (le (append a b) (append a c)) (le (append a c) (append a b)))))
      (ax_mp ((iff (le b c) (le (append a b) (append a c))) (im (iff (le c b) (le (append a c) (append a b))) (iff (an (le b c) (le c b)) (an (le (append a b) (append a c)) (le (append a c) (append a b))))))
        (aneq ((le b c) (le (append a b) (append a c)) (le c b) (le (append a c) (append a b))))
        (leappend2 (a b c)))
      (leappend2 (a c b))))))

(local theorem leappendid1 ((a nat ()) (b nat ())) ()
  (le a (append a b))
()
(mpbi ((le (append a (d0)) (append a b)) (le a (append a b)))
  (ax_mp ((eq (append a (d0)) a) (iff (le (append a (d0)) (append a b)) (le a (append a b))))
    (leeq1 ((append a (d0)) a (append a b)))
    (append02 (a)))
  (mpbi ((le (d0) b) (le (append a (d0)) (append a b)))
    (leappend2 (a (d0) b))
    (le01 (b)))))

(local theorem leappendid2 ((a nat ()) (b nat ())) ()
  (le a (append b a))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (eqidd ((eq _1 b) a))
(:let H2 (eqidd ((eq _1 (d0)) a))
(:let H3 (eqidd ((eq _1 x2) a))
(:let H4 (eqidd ((eq _1 (cons x1 x2)) a))
(listind (_1 x1 x2 b (le a (append _1 a)) (le a (append (d0) a)) (le a (append b a)) (le a (append x2 a)) (le a (append (cons x1 x2) a)))
  (leeqd ((eq _1 b) a a (append _1 a) (append b a))
    H1
    (appendeqd ((eq _1 b) _1 b a a)
      (id ((eq _1 b)))
      H1))
  (leeqd ((eq _1 (d0)) a a (append _1 a) (append (d0) a))
    H2
    (appendeqd ((eq _1 (d0)) _1 (d0) a a)
      (id ((eq _1 (d0))))
      H2))
  (leeqd ((eq _1 x2) a a (append _1 a) (append x2 a))
    H3
    (appendeqd ((eq _1 x2) _1 x2 a a)
      (id ((eq _1 x2)))
      H3))
  (leeqd ((eq _1 (cons x1 x2)) a a (append _1 a) (append (cons x1 x2) a))
    H4
    (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) a a)
      (id ((eq _1 (cons x1 x2))))
      H4))
  (ax_mp ((eq (append (d0) a) a) (le a (append (d0) a)))
    (eqler ((append (d0) a) a))
    (append0 (a)))
  (mpi ((le a (append x2 a)) (le (append x2 a) (append (cons x1 x2) a)) (le a (append (cons x1 x2) a)))
    (mpbir ((le (append x2 a) (cons x1 (append x2 a))) (le (append x2 a) (append (cons x1 x2) a)))
      (ax_mp ((eq (append (cons x1 x2) a) (cons x1 (append x2 a))) (iff (le (append x2 a) (append (cons x1 x2) a)) (le (append x2 a) (cons x1 (append x2 a)))))
        (leeq2 ((append x2 a) (append (cons x1 x2) a) (cons x1 (append x2 a))))
        (appendS (x1 x2 a)))
      (ax_mp ((lt (append x2 a) (cons x1 (append x2 a))) (le (append x2 a) (cons x1 (append x2 a))))
        (ltle ((append x2 a) (cons x1 (append x2 a))))
        (ltconsid2 (x1 (append x2 a)))))
    (letr (a (append x2 a) (append (cons x1 x2) a))))))))))

(local theorem ltappendid1 ((a nat ()) (b nat ())) ()
  (iff (ne b (d0)) (lt a (append a b)))
()
(ax_mp ((iff (lt (d0) b) (lt a (append a b))) (iff (ne b (d0)) (lt a (append a b))))
  (ax_mp ((iff (lt (d0) b) (ne b (d0))) (im (iff (lt (d0) b) (lt a (append a b))) (iff (ne b (d0)) (lt a (append a b)))))
    (bitr3 ((ne b (d0)) (lt (d0) b) (lt a (append a b))))
    (lt01 (b)))
  (ax_mp ((iff (lt (append a (d0)) (append a b)) (lt a (append a b))) (iff (lt (d0) b) (lt a (append a b))))
    (ax_mp ((iff (lt (d0) b) (lt (append a (d0)) (append a b))) (im (iff (lt (append a (d0)) (append a b)) (lt a (append a b))) (iff (lt (d0) b) (lt a (append a b)))))
      (bitr ((lt (d0) b) (lt (append a (d0)) (append a b)) (lt a (append a b))))
      (ltappend2 (a (d0) b)))
    (ax_mp ((eq (append a (d0)) a) (iff (lt (append a (d0)) (append a b)) (lt a (append a b))))
      (lteq1 ((append a (d0)) a (append a b)))
      (append02 (a))))))

(local theorem ltappendid2 ((a nat ()) (b nat ())) ()
  (iff (ne b (d0)) (lt a (append b a)))
((x1 nat) (x2 nat))
(ibii ((ne b (d0)) (lt a (append b a)))
  (sylbi ((ne b (d0)) (ex x1 (ex x2 (eq b (cons x1 x2)))) (lt a (append b a)))
    (excons (b x1 x2))
    (eex (x1 (ex x2 (eq b (cons x1 x2))) (lt a (append b a)))
      (eex (x2 (eq b (cons x1 x2)) (lt a (append b a)))
        (mpbiri ((eq b (cons x1 x2)) (lt a (cons x1 (append x2 a))) (lt a (append b a)))
          (ax_mp ((lt (append x2 a) (cons x1 (append x2 a))) (lt a (cons x1 (append x2 a))))
            (ax_mp ((le a (append x2 a)) (im (lt (append x2 a) (cons x1 (append x2 a))) (lt a (cons x1 (append x2 a)))))
              (lelttr (a (append x2 a) (cons x1 (append x2 a))))
              (leappendid2 (a x2)))
            (ltconsid2 (x1 (append x2 a))))
          (lteq2d ((eq b (cons x1 x2)) a (append b a) (cons x1 (append x2 a)))
            (syl6eq ((eq b (cons x1 x2)) (append b a) (append (cons x1 x2) a) (cons x1 (append x2 a)))
              (appendS (x1 x2 a))
              (appendeq1 (b (cons x1 x2) a))))))))
  (rsyl ((lt a (append b a)) (ne a (append b a)) (ne b (d0)))
    (ltne (a (append b a)))
    (ax_mp ((im (eq b (d0)) (eq a (append b a))) (im (ne a (append b a)) (ne b (d0))))
      (:conv (im (im (eq b (d0)) (eq a (append b a))) (im (ne a (append b a)) (ne b (d0))))
        (im
          (im (eq b (d0)) (eq a (append b a)))
          (im
            (:unfold ne (a (append b a)) ()
              (not (eq a (append b a))))
            (:unfold ne (b (d0)) ()
              (not (eq b (d0))))))
        (con3 ((eq b (d0)) (eq a (append b a)))))
      (eqcomd ((eq b (d0)) (append b a) a)
        (syl6eq ((eq b (d0)) (append b a) (append (d0) a) a)
          (append0 (a))
          (appendeq1 (b (d0) a))))))))

(local theorem appendeq0 ((a nat ()) (b nat ())) ()
  (iff (eq (append a b) (d0)) (an (eq a (d0)) (eq b (d0))))
()
(ax_mp ((iff (eq (len (append a b)) (d0)) (an (eq a (d0)) (eq b (d0)))) (iff (eq (append a b) (d0)) (an (eq a (d0)) (eq b (d0)))))
  (ax_mp ((iff (eq (len (append a b)) (d0)) (eq (append a b) (d0))) (im (iff (eq (len (append a b)) (d0)) (an (eq a (d0)) (eq b (d0)))) (iff (eq (append a b) (d0)) (an (eq a (d0)) (eq b (d0))))))
    (bitr3 ((eq (append a b) (d0)) (eq (len (append a b)) (d0)) (an (eq a (d0)) (eq b (d0)))))
    (leneq0 ((append a b))))
  (ax_mp ((iff (eq (add (len a) (len b)) (d0)) (an (eq a (d0)) (eq b (d0)))) (iff (eq (len (append a b)) (d0)) (an (eq a (d0)) (eq b (d0)))))
    (ax_mp ((iff (eq (len (append a b)) (d0)) (eq (add (len a) (len b)) (d0))) (im (iff (eq (add (len a) (len b)) (d0)) (an (eq a (d0)) (eq b (d0)))) (iff (eq (len (append a b)) (d0)) (an (eq a (d0)) (eq b (d0))))))
      (bitr ((eq (len (append a b)) (d0)) (eq (add (len a) (len b)) (d0)) (an (eq a (d0)) (eq b (d0)))))
      (ax_mp ((eq (len (append a b)) (add (len a) (len b))) (iff (eq (len (append a b)) (d0)) (eq (add (len a) (len b)) (d0))))
        (eqeq1 ((len (append a b)) (add (len a) (len b)) (d0)))
        (appendlen (a b))))
    (ax_mp ((iff (an (eq (len a) (d0)) (eq (len b) (d0))) (an (eq a (d0)) (eq b (d0)))) (iff (eq (add (len a) (len b)) (d0)) (an (eq a (d0)) (eq b (d0)))))
      (ax_mp ((iff (eq (add (len a) (len b)) (d0)) (an (eq (len a) (d0)) (eq (len b) (d0)))) (im (iff (an (eq (len a) (d0)) (eq (len b) (d0))) (an (eq a (d0)) (eq b (d0)))) (iff (eq (add (len a) (len b)) (d0)) (an (eq a (d0)) (eq b (d0))))))
        (bitr ((eq (add (len a) (len b)) (d0)) (an (eq (len a) (d0)) (eq (len b) (d0))) (an (eq a (d0)) (eq b (d0)))))
        (addeq0 ((len a) (len b))))
      (ax_mp ((iff (eq (len b) (d0)) (eq b (d0))) (iff (an (eq (len a) (d0)) (eq (len b) (d0))) (an (eq a (d0)) (eq b (d0)))))
        (ax_mp ((iff (eq (len a) (d0)) (eq a (d0))) (im (iff (eq (len b) (d0)) (eq b (d0))) (iff (an (eq (len a) (d0)) (eq (len b) (d0))) (an (eq a (d0)) (eq b (d0))))))
          (aneq ((eq (len a) (d0)) (eq a (d0)) (eq (len b) (d0)) (eq b (d0))))
          (leneq0 (a)))
        (leneq0 (b)))))))

(local theorem lmemappend ((a nat ()) (b nat ()) (x nat ())) ()
  (iff (lmem x (append a b)) (or (lmem x a) (lmem x b)))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (eqidd ((eq _1 a) x))
(:let H2 (id ((eq _1 a)))
(:let H3 (eqidd ((eq _1 (d0)) x))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 x2) x))
(:let H6 (id ((eq _1 x2)))
(:let H7 (eqidd ((eq _1 (cons x1 x2)) x))
(:let H8 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 a (iff (lmem x (append _1 b)) (or (lmem x _1) (lmem x b))) (iff (lmem x (append (d0) b)) (or (lmem x (d0)) (lmem x b))) (iff (lmem x (append a b)) (or (lmem x a) (lmem x b))) (iff (lmem x (append x2 b)) (or (lmem x x2) (lmem x b))) (iff (lmem x (append (cons x1 x2) b)) (or (lmem x (cons x1 x2)) (lmem x b))))
  (bieqd ((eq _1 a) (lmem x (append _1 b)) (lmem x (append a b)) (or (lmem x _1) (lmem x b)) (or (lmem x a) (lmem x b)))
    (lmemeqd ((eq _1 a) x x (append _1 b) (append a b))
      H1
      (appendeqd ((eq _1 a) _1 a b b)
        H2
        (eqidd ((eq _1 a) b))))
    (oreqd ((eq _1 a) (lmem x _1) (lmem x a) (lmem x b) (lmem x b))
      (lmemeqd ((eq _1 a) x x _1 a)
        H1
        H2)
      (biidd ((eq _1 a) (lmem x b)))))
  (bieqd ((eq _1 (d0)) (lmem x (append _1 b)) (lmem x (append (d0) b)) (or (lmem x _1) (lmem x b)) (or (lmem x (d0)) (lmem x b)))
    (lmemeqd ((eq _1 (d0)) x x (append _1 b) (append (d0) b))
      H3
      (appendeqd ((eq _1 (d0)) _1 (d0) b b)
        H4
        (eqidd ((eq _1 (d0)) b))))
    (oreqd ((eq _1 (d0)) (lmem x _1) (lmem x (d0)) (lmem x b) (lmem x b))
      (lmemeqd ((eq _1 (d0)) x x _1 (d0))
        H3
        H4)
      (biidd ((eq _1 (d0)) (lmem x b)))))
  (bieqd ((eq _1 x2) (lmem x (append _1 b)) (lmem x (append x2 b)) (or (lmem x _1) (lmem x b)) (or (lmem x x2) (lmem x b)))
    (lmemeqd ((eq _1 x2) x x (append _1 b) (append x2 b))
      H5
      (appendeqd ((eq _1 x2) _1 x2 b b)
        H6
        (eqidd ((eq _1 x2) b))))
    (oreqd ((eq _1 x2) (lmem x _1) (lmem x x2) (lmem x b) (lmem x b))
      (lmemeqd ((eq _1 x2) x x _1 x2)
        H5
        H6)
      (biidd ((eq _1 x2) (lmem x b)))))
  (bieqd ((eq _1 (cons x1 x2)) (lmem x (append _1 b)) (lmem x (append (cons x1 x2) b)) (or (lmem x _1) (lmem x b)) (or (lmem x (cons x1 x2)) (lmem x b)))
    (lmemeqd ((eq _1 (cons x1 x2)) x x (append _1 b) (append (cons x1 x2) b))
      H7
      (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) b b)
        H8
        (eqidd ((eq _1 (cons x1 x2)) b))))
    (oreqd ((eq _1 (cons x1 x2)) (lmem x _1) (lmem x (cons x1 x2)) (lmem x b) (lmem x b))
      (lmemeqd ((eq _1 (cons x1 x2)) x x _1 (cons x1 x2))
        H7
        H8)
      (biidd ((eq _1 (cons x1 x2)) (lmem x b)))))
  (ax_mp ((iff (or (lmem x (d0)) (lmem x b)) (lmem x b)) (iff (lmem x (append (d0) b)) (or (lmem x (d0)) (lmem x b))))
    (ax_mp ((iff (lmem x (append (d0) b)) (lmem x b)) (im (iff (or (lmem x (d0)) (lmem x b)) (lmem x b)) (iff (lmem x (append (d0) b)) (or (lmem x (d0)) (lmem x b)))))
      (bitr4 ((lmem x (append (d0) b)) (lmem x b) (or (lmem x (d0)) (lmem x b))))
      (ax_mp ((eq (append (d0) b) b) (iff (lmem x (append (d0) b)) (lmem x b)))
        (lmemeq2 (x (append (d0) b) b))
        (append0 (b))))
    (ax_mp ((not (lmem x (d0))) (iff (or (lmem x (d0)) (lmem x b)) (lmem x b)))
      (bior1 ((lmem x (d0)) (lmem x b)))
      (lmem0 (x))))
  (bitr4g ((iff (lmem x (append x2 b)) (or (lmem x x2) (lmem x b))) (lmem x (cons x1 (append x2 b))) (or (or (eq x x1) (lmem x x2)) (lmem x b)) (lmem x (append (cons x1 x2) b)) (or (lmem x (cons x1 x2)) (lmem x b)))
    (ax_mp ((eq (append (cons x1 x2) b) (cons x1 (append x2 b))) (iff (lmem x (append (cons x1 x2) b)) (lmem x (cons x1 (append x2 b)))))
      (lmemeq2 (x (append (cons x1 x2) b) (cons x1 (append x2 b))))
      (appendS (x1 x2 b)))
    (oreq1i ((lmem x (cons x1 x2)) (or (eq x x1) (lmem x x2)) (lmem x b))
      (lmemS (x x1 x2)))
    (bitr4g ((iff (lmem x (append x2 b)) (or (lmem x x2) (lmem x b))) (or (eq x x1) (lmem x (append x2 b))) (or (eq x x1) (or (lmem x x2) (lmem x b))) (lmem x (cons x1 (append x2 b))) (or (or (eq x x1) (lmem x x2)) (lmem x b)))
      (lmemS (x x1 (append x2 b)))
      (orass ((eq x x1) (lmem x x2) (lmem x b)))
      (oreq2d ((iff (lmem x (append x2 b)) (or (lmem x x2) (lmem x b))) (eq x x1) (lmem x (append x2 b)) (or (lmem x x2) (lmem x b)))
        (id ((iff (lmem x (append x2 b)) (or (lmem x x2) (lmem x b))))))))))))))))))

(local theorem allappend ((A set ()) (a nat ()) (b nat ())) ()
  (iff (all A (append a b)) (an (all A a) (all A b)))
((x nat))
(ax_mp ((iff (an (all A a) (all A b)) (al x (im (lmem x (append a b)) (el x A)))) (iff (all A (append a b)) (an (all A a) (all A b))))
  (ax_mp ((iff (all A (append a b)) (al x (im (lmem x (append a b)) (el x A)))) (im (iff (an (all A a) (all A b)) (al x (im (lmem x (append a b)) (el x A)))) (iff (all A (append a b)) (an (all A a) (all A b)))))
    (bitr4 ((all A (append a b)) (al x (im (lmem x (append a b)) (el x A))) (an (all A a) (all A b))))
    (allal2 (A (append a b) x)))
  (ax_mp ((iff (al x (im (lmem x (append a b)) (el x A))) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))) (iff (an (all A a) (all A b)) (al x (im (lmem x (append a b)) (el x A)))))
    (ax_mp ((iff (an (all A a) (all A b)) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))) (im (iff (al x (im (lmem x (append a b)) (el x A))) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))) (iff (an (all A a) (all A b)) (al x (im (lmem x (append a b)) (el x A))))))
      (bitr4 ((an (all A a) (all A b)) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A)))) (al x (im (lmem x (append a b)) (el x A)))))
      (ax_mp ((iff (all A b) (al x (im (lmem x b) (el x A)))) (iff (an (all A a) (all A b)) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))))
        (ax_mp ((iff (all A a) (al x (im (lmem x a) (el x A)))) (im (iff (all A b) (al x (im (lmem x b) (el x A)))) (iff (an (all A a) (all A b)) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A)))))))
          (aneq ((all A a) (al x (im (lmem x a) (el x A))) (all A b) (al x (im (lmem x b) (el x A)))))
          (allal2 (A a x)))
        (allal2 (A b x))))
    (ax_mp ((iff (al x (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A)))) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))) (iff (al x (im (lmem x (append a b)) (el x A))) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))))
      (ax_mp ((iff (al x (im (lmem x (append a b)) (el x A))) (al x (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A))))) (im (iff (al x (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A)))) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))) (iff (al x (im (lmem x (append a b)) (el x A))) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A)))))))
        (bitr ((al x (im (lmem x (append a b)) (el x A))) (al x (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A)))) (an (al x (im (lmem x a) (el x A))) (al x (im (lmem x b) (el x A))))))
        (aleqi (x (im (lmem x (append a b)) (el x A)) (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A))))
          (ax_mp ((iff (im (or (lmem x a) (lmem x b)) (el x A)) (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A)))) (iff (im (lmem x (append a b)) (el x A)) (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A)))))
            (ax_mp ((iff (im (lmem x (append a b)) (el x A)) (im (or (lmem x a) (lmem x b)) (el x A))) (im (iff (im (or (lmem x a) (lmem x b)) (el x A)) (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A)))) (iff (im (lmem x (append a b)) (el x A)) (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A))))))
              (bitr ((im (lmem x (append a b)) (el x A)) (im (or (lmem x a) (lmem x b)) (el x A)) (an (im (lmem x a) (el x A)) (im (lmem x b) (el x A)))))
              (imeq1i ((lmem x (append a b)) (or (lmem x a) (lmem x b)) (el x A))
                (lmemappend (a b x))))
            (imor ((lmem x a) (lmem x b) (el x A))))))
      (alan (x (im (lmem x a) (el x A)) (im (lmem x b) (el x A))))))))

(local theorem appendT ((A set ()) (a nat ()) (b nat ())) ()
  (iff (el (append a b) (List A)) (an (el a (List A)) (el b (List A))))
()
(ax_mp ((iff (an (el a (List A)) (el b (List A))) (all A (append a b))) (iff (el (append a b) (List A)) (an (el a (List A)) (el b (List A)))))
  (ax_mp ((iff (el (append a b) (List A)) (all A (append a b))) (im (iff (an (el a (List A)) (el b (List A))) (all A (append a b))) (iff (el (append a b) (List A)) (an (el a (List A)) (el b (List A))))))
    (bitr4 ((el (append a b) (List A)) (all A (append a b)) (an (el a (List A)) (el b (List A)))))
    (elList (A (append a b))))
  (ax_mp ((iff (all A (append a b)) (an (all A a) (all A b))) (iff (an (el a (List A)) (el b (List A))) (all A (append a b))))
    (ax_mp ((iff (an (el a (List A)) (el b (List A))) (an (all A a) (all A b))) (im (iff (all A (append a b)) (an (all A a) (all A b))) (iff (an (el a (List A)) (el b (List A))) (all A (append a b)))))
      (bitr4 ((an (el a (List A)) (el b (List A))) (an (all A a) (all A b)) (all A (append a b))))
      (ax_mp ((iff (el b (List A)) (all A b)) (iff (an (el a (List A)) (el b (List A))) (an (all A a) (all A b))))
        (ax_mp ((iff (el a (List A)) (all A a)) (im (iff (el b (List A)) (all A b)) (iff (an (el a (List A)) (el b (List A))) (an (all A a) (all A b)))))
          (aneq ((el a (List A)) (all A a) (el b (List A)) (all A b)))
          (elList (A a)))
        (elList (A b))))
    (allappend (A a b)))))

(local theorem appendArray ((A set ()) (a nat ()) (b nat ()) (m nat ()) (n nat ())) ()
  (im (el a (Array A m)) (im (el b (Array A n)) (el (append a b) (Array A (add m n)))))
()
(exp ((el a (Array A m)) (el b (Array A n)) (el (append a b) (Array A (add m n))))
  (sylbi ((an (el a (Array A m)) (el b (Array A n))) (an (an (el a (List A)) (eq (len a) m)) (an (el b (List A)) (eq (len b) n))) (el (append a b) (Array A (add m n))))
    (ax_mp ((iff (el b (Array A n)) (an (el b (List A)) (eq (len b) n))) (iff (an (el a (Array A m)) (el b (Array A n))) (an (an (el a (List A)) (eq (len a) m)) (an (el b (List A)) (eq (len b) n)))))
      (ax_mp ((iff (el a (Array A m)) (an (el a (List A)) (eq (len a) m))) (im (iff (el b (Array A n)) (an (el b (List A)) (eq (len b) n))) (iff (an (el a (Array A m)) (el b (Array A n))) (an (an (el a (List A)) (eq (len a) m)) (an (el b (List A)) (eq (len b) n))))))
        (aneq ((el a (Array A m)) (an (el a (List A)) (eq (len a) m)) (el b (Array A n)) (an (el b (List A)) (eq (len b) n))))
        (elArray (A a m)))
      (elArray (A b n)))
    (sylbi ((an (an (el a (List A)) (eq (len a) m)) (an (el b (List A)) (eq (len b) n))) (an (an (el a (List A)) (el b (List A))) (an (eq (len a) m) (eq (len b) n))) (el (append a b) (Array A (add m n))))
      (an4 ((el a (List A)) (eq (len a) m) (el b (List A)) (eq (len b) n)))
      (sylibr ((an (an (el a (List A)) (el b (List A))) (an (eq (len a) m) (eq (len b) n))) (an (el (append a b) (List A)) (eq (len (append a b)) (add m n))) (el (append a b) (Array A (add m n))))
        (elArray (A (append a b) (add m n)))
        (ax_mp ((im (an (eq (len a) m) (eq (len b) n)) (eq (len (append a b)) (add m n))) (im (an (an (el a (List A)) (el b (List A))) (an (eq (len a) m) (eq (len b) n))) (an (el (append a b) (List A)) (eq (len (append a b)) (add m n)))))
          (ax_mp ((im (an (el a (List A)) (el b (List A))) (el (append a b) (List A))) (im (im (an (eq (len a) m) (eq (len b) n)) (eq (len (append a b)) (add m n))) (im (an (an (el a (List A)) (el b (List A))) (an (eq (len a) m) (eq (len b) n))) (an (el (append a b) (List A)) (eq (len (append a b)) (add m n))))))
            (anim ((an (el a (List A)) (el b (List A))) (el (append a b) (List A)) (an (eq (len a) m) (eq (len b) n)) (eq (len (append a b)) (add m n))))
            (ax_mp ((iff (el (append a b) (List A)) (an (el a (List A)) (el b (List A)))) (im (an (el a (List A)) (el b (List A))) (el (append a b) (List A))))
              (bi2 ((el (append a b) (List A)) (an (el a (List A)) (el b (List A)))))
              (appendT (A a b))))
          (syl5eq ((an (eq (len a) m) (eq (len b) n)) (len (append a b)) (add (len a) (len b)) (add m n))
            (appendlen (a b))
            (imp ((eq (len a) m) (eq (len b) n) (eq (add (len a) (len b)) (add m n)))
              (addeq ((len a) m (len b) n))))))))))

(def snoc ((l nat ()) (a nat ())) (nat ())
()
(append l (cons a (d0))))

(local theorem snoceqd ((_G wff ()) (_l1 nat ()) (_l2 nat ()) (_a1 nat ()) (_a2 nat ()))
  ((_lh (im _G (eq _l1 _l2)))
   (_ah (im _G (eq _a1 _a2))))
  (im _G (eq (snoc _l1 _a1) (snoc _l2 _a2)))
()
(:conv (im _G (eq (snoc _l1 _a1) (snoc _l2 _a2)))
  (im
    _G
    (eq
      (:unfold snoc (_l1 _a1) ()
        (append _l1 (cons _a1 (d0))))
      (:unfold snoc (_l2 _a2) ()
        (append _l2 (cons _a2 (d0))))))
  (appendeqd (_G _l1 _l2 (cons _a1 (d0)) (cons _a2 (d0)))
    _lh
    (conseqd (_G _a1 _a2 (d0) (d0))
      _ah
      (eqidd (_G (d0)))))))

(local theorem snoceq ((_l1 nat ()) (_l2 nat ()) (_a1 nat ()) (_a2 nat ())) ()
  (im (eq _l1 _l2) (im (eq _a1 _a2) (eq (snoc _l1 _a1) (snoc _l2 _a2))))
()
(exp ((eq _l1 _l2) (eq _a1 _a2) (eq (snoc _l1 _a1) (snoc _l2 _a2)))
  (snoceqd ((an (eq _l1 _l2) (eq _a1 _a2)) _l1 _l2 _a1 _a2)
    (anl ((eq _l1 _l2) (eq _a1 _a2)))
    (anr ((eq _l1 _l2) (eq _a1 _a2))))))

(local theorem snoceq1d ((_G wff ()) (_l1 nat ()) (_l2 nat ()) (a nat ()))
  ((_h (im _G (eq _l1 _l2))))
  (im _G (eq (snoc _l1 a) (snoc _l2 a)))
()
(snoceqd (_G _l1 _l2 a a)
  _h
  (eqidd (_G a))))

(local theorem snoceq1 ((_l1 nat ()) (_l2 nat ()) (a nat ())) ()
  (im (eq _l1 _l2) (eq (snoc _l1 a) (snoc _l2 a)))
()
(snoceq1d ((eq _l1 _l2) _l1 _l2 a)
  (id ((eq _l1 _l2)))))

(local theorem snoceq2d ((_G wff ()) (l nat ()) (_a1 nat ()) (_a2 nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (snoc l _a1) (snoc l _a2)))
()
(snoceqd (_G l l _a1 _a2)
  (eqidd (_G l))
  _h))

(local theorem snoceq2 ((l nat ()) (_a1 nat ()) (_a2 nat ())) ()
  (im (eq _a1 _a2) (eq (snoc l _a1) (snoc l _a2)))
()
(snoceq2d ((eq _a1 _a2) l _a1 _a2)
  (id ((eq _a1 _a2)))))

(theorem snoc0 ((a nat ())) ()
  (eq (snoc (d0) a) (cons a (d0)))
()
(:conv (eq (snoc (d0) a) (cons a (d0)))
  (eq
    (:unfold snoc ((d0) a) ()
      (append (d0) (cons a (d0))))
    (cons a (d0)))
  (append0 ((cons a (d0))))))

(theorem snocS ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (snoc (cons a b) c) (cons a (snoc b c)))
()
(:conv (eq (snoc (cons a b) c) (cons a (snoc b c)))
  (eq
    (:unfold snoc ((cons a b) c) ()
      (append (cons a b) (cons c (d0))))
    (cons
      a
      (:unfold snoc (b c) ()
        (append b (cons c (d0))))))
  (appendS (a b (cons c (d0))))))

(theorem snoclt ((a nat ()) (b nat ())) ()
  (lt a (snoc a b))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 a)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 a (lt _1 (snoc _1 b)) (lt (d0) (snoc (d0) b)) (lt a (snoc a b)) (lt x2 (snoc x2 b)) (lt (cons x1 x2) (snoc (cons x1 x2) b)))
  (lteqd ((eq _1 a) _1 a (snoc _1 b) (snoc a b))
    H1
    (snoceqd ((eq _1 a) _1 a b b)
      H1
      (eqidd ((eq _1 a) b))))
  (lteqd ((eq _1 (d0)) _1 (d0) (snoc _1 b) (snoc (d0) b))
    H2
    (snoceqd ((eq _1 (d0)) _1 (d0) b b)
      H2
      (eqidd ((eq _1 (d0)) b))))
  (lteqd ((eq _1 x2) _1 x2 (snoc _1 b) (snoc x2 b))
    H3
    (snoceqd ((eq _1 x2) _1 x2 b b)
      H3
      (eqidd ((eq _1 x2) b))))
  (lteqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) (snoc _1 b) (snoc (cons x1 x2) b))
    H4
    (snoceqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) b b)
      H4
      (eqidd ((eq _1 (cons x1 x2)) b))))
  (mpbir ((lt (d0) (cons b (d0))) (lt (d0) (snoc (d0) b)))
    (ax_mp ((eq (snoc (d0) b) (cons b (d0))) (iff (lt (d0) (snoc (d0) b)) (lt (d0) (cons b (d0)))))
      (lteq2 ((d0) (snoc (d0) b) (cons b (d0))))
      (snoc0 (b)))
    (mpbir ((ne (cons b (d0)) (d0)) (lt (d0) (cons b (d0))))
      (lt01 ((cons b (d0))))
      (consne0 (b (d0)))))
  (bi1i ((lt x2 (snoc x2 b)) (lt (cons x1 x2) (snoc (cons x1 x2) b)))
    (ax_mp ((iff (lt (cons x1 x2) (snoc (cons x1 x2) b)) (lt (cons x1 x2) (cons x1 (snoc x2 b)))) (iff (lt x2 (snoc x2 b)) (lt (cons x1 x2) (snoc (cons x1 x2) b))))
      (ax_mp ((iff (lt x2 (snoc x2 b)) (lt (cons x1 x2) (cons x1 (snoc x2 b)))) (im (iff (lt (cons x1 x2) (snoc (cons x1 x2) b)) (lt (cons x1 x2) (cons x1 (snoc x2 b)))) (iff (lt x2 (snoc x2 b)) (lt (cons x1 x2) (snoc (cons x1 x2) b)))))
        (bitr4 ((lt x2 (snoc x2 b)) (lt (cons x1 x2) (cons x1 (snoc x2 b))) (lt (cons x1 x2) (snoc (cons x1 x2) b))))
        (ltcons2 (x1 x2 (snoc x2 b))))
      (ax_mp ((eq (snoc (cons x1 x2) b) (cons x1 (snoc x2 b))) (iff (lt (cons x1 x2) (snoc (cons x1 x2) b)) (lt (cons x1 x2) (cons x1 (snoc x2 b)))))
        (lteq2 ((cons x1 x2) (snoc (cons x1 x2) b) (cons x1 (snoc x2 b))))
        (snocS (x1 x2 b)))))))))))

(local theorem lesnoc2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (snoc a b) (snoc a c)))
()
(ax_mp ((iff (le (cons b (d0)) (cons c (d0))) (le (snoc a b) (snoc a c))) (iff (le b c) (le (snoc a b) (snoc a c))))
  (ax_mp ((iff (le b c) (le (cons b (d0)) (cons c (d0)))) (im (iff (le (cons b (d0)) (cons c (d0))) (le (snoc a b) (snoc a c))) (iff (le b c) (le (snoc a b) (snoc a c)))))
    (bitr ((le b c) (le (cons b (d0)) (cons c (d0))) (le (snoc a b) (snoc a c))))
    (lecons1 (b c (d0))))
  (:conv (iff (le (cons b (d0)) (cons c (d0))) (le (snoc a b) (snoc a c)))
    (iff
      (le (cons b (d0)) (cons c (d0)))
      (le
        (:unfold snoc (a b) ()
          (append a (cons b (d0))))
        (:unfold snoc (a c) ()
          (append a (cons c (d0))))))
    (leappend2 (a (cons b (d0)) (cons c (d0)))))))

(local theorem appendsnoc ((b nat ()) (l1 nat ()) (l2 nat ())) ()
  (eq (append l1 (snoc l2 b)) (snoc (append l1 l2) b))
()
(ax_mp ((eq (snoc (append l1 l2) b) (append l1 (snoc l2 b))) (eq (append l1 (snoc l2 b)) (snoc (append l1 l2) b)))
  (eqcom ((snoc (append l1 l2) b) (append l1 (snoc l2 b))))
  (:conv (eq (snoc (append l1 l2) b) (append l1 (snoc l2 b)))
    (eq
      (:unfold snoc ((append l1 l2) b) ()
        (append (append l1 l2) (cons b (d0))))
      (append
        l1
        (:unfold snoc (l2 b) ()
          (append l2 (cons b (d0))))))
    (appendass (l1 l2 (cons b (d0)))))))

(local theorem conssnoc ((a nat ()) (b nat ()) (l nat ())) ()
  (eq (cons a (snoc l b)) (snoc (cons a l) b))
()
(ax_mp ((eq (snoc (cons a l) b) (cons a (snoc l b))) (eq (cons a (snoc l b)) (snoc (cons a l) b)))
  (eqcom ((snoc (cons a l) b) (cons a (snoc l b))))
  (:conv (eq (snoc (cons a l) b) (cons a (snoc l b)))
    (eq
      (:unfold snoc ((cons a l) b) ()
        (append (cons a l) (cons b (d0))))
      (cons
        a
        (:unfold snoc (l b) ()
          (append l (cons b (d0))))))
    (appendS (a l (cons b (d0)))))))

(local theorem snoclen ((a nat ()) (b nat ())) ()
  (eq (len (snoc a b)) (suc (len a)))
()
(ax_mp ((eq (add (len a) (len (cons b (d0)))) (suc (len a))) (eq (len (snoc a b)) (suc (len a))))
  (ax_mp ((eq (len (snoc a b)) (add (len a) (len (cons b (d0))))) (im (eq (add (len a) (len (cons b (d0)))) (suc (len a))) (eq (len (snoc a b)) (suc (len a)))))
    (eqtr ((len (snoc a b)) (add (len a) (len (cons b (d0)))) (suc (len a))))
    (:conv (eq (len (snoc a b)) (add (len a) (len (cons b (d0)))))
      (eq
        (len
          (:unfold snoc (a b) ()
            (append a (cons b (d0)))))
        (add (len a) (len (cons b (d0)))))
      (appendlen (a (cons b (d0))))))
  (ax_mp ((eq (add (len a) (d1)) (suc (len a))) (eq (add (len a) (len (cons b (d0)))) (suc (len a))))
    (ax_mp ((eq (add (len a) (len (cons b (d0)))) (add (len a) (d1))) (im (eq (add (len a) (d1)) (suc (len a))) (eq (add (len a) (len (cons b (d0)))) (suc (len a)))))
      (eqtr ((add (len a) (len (cons b (d0)))) (add (len a) (d1)) (suc (len a))))
      (ax_mp ((eq (len (cons b (d0))) (d1)) (eq (add (len a) (len (cons b (d0)))) (add (len a) (d1))))
        (addeq2 ((len a) (len (cons b (d0))) (d1)))
        (len1 (b))))
    (add12 ((len a))))))

(local theorem lmemsnoc ((a nat ()) (b nat ()) (x nat ())) ()
  (iff (lmem x (snoc a b)) (or (lmem x a) (eq x b)))
()
(ax_mp ((iff (or (lmem x a) (lmem x (cons b (d0)))) (or (lmem x a) (eq x b))) (iff (lmem x (snoc a b)) (or (lmem x a) (eq x b))))
  (ax_mp ((iff (lmem x (snoc a b)) (or (lmem x a) (lmem x (cons b (d0))))) (im (iff (or (lmem x a) (lmem x (cons b (d0)))) (or (lmem x a) (eq x b))) (iff (lmem x (snoc a b)) (or (lmem x a) (eq x b)))))
    (bitr ((lmem x (snoc a b)) (or (lmem x a) (lmem x (cons b (d0)))) (or (lmem x a) (eq x b))))
    (:conv (iff (lmem x (snoc a b)) (or (lmem x a) (lmem x (cons b (d0)))))
      (iff
        (lmem
          x
          (:unfold snoc (a b) ()
            (append a (cons b (d0)))))
        (or (lmem x a) (lmem x (cons b (d0)))))
      (lmemappend (a (cons b (d0)) x))))
  (oreq2i ((lmem x a) (lmem x (cons b (d0))) (eq x b))
    (lmem1 (x b)))))

(local theorem lmemsnocid ((a nat ()) (l nat ())) ()
  (lmem a (snoc l a))
()
(mpbir ((or (lmem a l) (eq a a)) (lmem a (snoc l a)))
  (lmemsnoc (l a a))
  (ax_mp ((eq a a) (or (lmem a l) (eq a a)))
    (orr ((lmem a l) (eq a a)))
    (eqid (a)))))

(local theorem allsnoc ((A set ()) (a nat ()) (b nat ())) ()
  (iff (all A (snoc a b)) (an (all A a) (el b A)))
()
(ax_mp ((iff (an (all A a) (all A (cons b (d0)))) (an (all A a) (el b A))) (iff (all A (snoc a b)) (an (all A a) (el b A))))
  (ax_mp ((iff (all A (snoc a b)) (an (all A a) (all A (cons b (d0))))) (im (iff (an (all A a) (all A (cons b (d0)))) (an (all A a) (el b A))) (iff (all A (snoc a b)) (an (all A a) (el b A)))))
    (bitr ((all A (snoc a b)) (an (all A a) (all A (cons b (d0)))) (an (all A a) (el b A))))
    (:conv (iff (all A (snoc a b)) (an (all A a) (all A (cons b (d0)))))
      (iff
        (all
          A
          (:unfold snoc (a b) ()
            (append a (cons b (d0)))))
        (an (all A a) (all A (cons b (d0)))))
      (allappend (A a (cons b (d0))))))
  (aneq2i ((all A a) (all A (cons b (d0))) (el b A))
    (all1 (A b)))))

(local theorem snocne0 ((a nat ()) (b nat ())) ()
  (ne (snoc a b) (d0))
()
(:conv (ne (snoc a b) (d0))
  (:unfold ne ((snoc a b) (d0)) ()
    (not (eq (snoc a b) (d0))))
  (mt ((eq (len (snoc a b)) (d0)) (eq (snoc a b) (d0)))
    (syl6eq ((eq (snoc a b) (d0)) (len (snoc a b)) (len (d0)) (d0))
      (len0 ())
      (leneq ((snoc a b) (d0))))
    (ax_mp ((eq (len (snoc a b)) (suc (len a))) (not (eq (len (snoc a b)) (d0))))
      (:conv (im (eq (len (snoc a b)) (suc (len a))) (not (eq (len (snoc a b)) (d0))))
        (im
          (eq (len (snoc a b)) (suc (len a)))
          (:sym (:unfold ne ((len (snoc a b)) (d0)) ()
            (not (eq (len (snoc a b)) (d0))))))
        (sucne0 ((len (snoc a b)) (len a))))
      (snoclen (a b))))))

(local theorem snocT ((A set ()) (a nat ()) (b nat ())) ()
  (iff (el (snoc a b) (List A)) (an (el a (List A)) (el b A)))
()
(ax_mp ((iff (an (el a (List A)) (el (cons b (d0)) (List A))) (an (el a (List A)) (el b A))) (iff (el (snoc a b) (List A)) (an (el a (List A)) (el b A))))
  (ax_mp ((iff (el (snoc a b) (List A)) (an (el a (List A)) (el (cons b (d0)) (List A)))) (im (iff (an (el a (List A)) (el (cons b (d0)) (List A))) (an (el a (List A)) (el b A))) (iff (el (snoc a b) (List A)) (an (el a (List A)) (el b A)))))
    (bitr ((el (snoc a b) (List A)) (an (el a (List A)) (el (cons b (d0)) (List A))) (an (el a (List A)) (el b A))))
    (:conv (iff (el (snoc a b) (List A)) (an (el a (List A)) (el (cons b (d0)) (List A))))
      (iff
        (el
          (:unfold snoc (a b) ()
            (append a (cons b (d0))))
          (List A))
        (an (el a (List A)) (el (cons b (d0)) (List A))))
      (appendT (A a (cons b (d0))))))
  (aneq2i ((el a (List A)) (el (cons b (d0)) (List A)) (el b A))
    (elList1 (A b)))))

(local def listfn ((l nat ())) (nat ())
((a nat) (f nat) (i nat) (z nat))
(lrec (d0) (slam a (slam z (lam f (rlam i (upto (suc (size (Dom (ns f))))) (if (eq i (d0)) a (app (ns f) (sub i (d1)))))))) l))

(local theorem listfneqd ((_G wff ()) (_l1 nat ()) (_l2 nat ()))
  ((_lh (im _G (eq _l1 _l2))))
  (im _G (eq (listfn _l1) (listfn _l2)))
((a nat) (f nat) (i nat) (z nat))
(:conv (im _G (eq (listfn _l1) (listfn _l2)))
  (im
    _G
    (eq
      (:unfold listfn (_l1) (a f i z)
        (lrec (d0) (slam a (slam z (lam f (rlam i (upto (suc (size (Dom (ns f))))) (if (eq i (d0)) a (app (ns f) (sub i (d1)))))))) _l1))
      (:unfold listfn (_l2) (a f i z)
        (lrec (d0) (slam a (slam z (lam f (rlam i (upto (suc (size (Dom (ns f))))) (if (eq i (d0)) a (app (ns f) (sub i (d1)))))))) _l2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam f (rlam i (upto (suc (size (Dom (ns f))))) (if (eq i (d0)) a (app (ns f) (sub i (d1)))))))) (slam a (slam z (lam f (rlam i (upto (suc (size (Dom (ns f))))) (if (eq i (d0)) a (app (ns f) (sub i (d1)))))))) _l1 _l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam a (slam z (lam f (rlam i (upto (suc (size (Dom (ns f))))) (if (eq i (d0)) a (app (ns f) (sub i (d1))))))))))
    _lh)))

(local theorem listfneq ((_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (eq (listfn _l1) (listfn _l2)))
()
(listfneqd ((eq _l1 _l2) _l1 _l2)
  (id ((eq _l1 _l2)))))

(local theorem listfn0 () ()
  (eq (listfn (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(:conv (eq (listfn (d0)) (d0))
  (eq
    (:unfold listfn ((d0)) (x1 x3 x4 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (rlam x4 (upto (suc (size (Dom (ns x3))))) (if (eq x4 (d0)) x1 (app (ns x3) (sub x4 (d1)))))))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (rlam x4 (upto (suc (size (Dom (ns x3))))) (if (eq x4 (d0)) x1 (app (ns x3) (sub x4 (d1))))))))))))

(local theorem listfnS2 ((a nat ()) (i nat) (l nat ())) ()
  (eq (listfn (cons a l)) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))
((x nat) (y nat) (z nat))
(:let H1 (anr ((an (eq x a) (eq z l)) (eq y (listfn l))))
(ax_mp ((eq (app (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l)))) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) (eq (listfn (cons a l)) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))))
  (ax_mp ((eq (listfn (cons a l)) (app (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l))))) (im (eq (app (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l)))) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) (eq (listfn (cons a l)) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))))
    (eqtr ((listfn (cons a l)) (app (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l)))) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))))
    (:conv (eq (listfn (cons a l)) (app (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l)))))
      (eq
        (:unfold listfn ((cons a l)) (x y i z)
          (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (cons a l)))
        (app (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l)))))
      (lrecS ((d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) a l))))
  (:conv (eq (app (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l)))) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))
    (eq
      (app
        (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1))))))))
        (pr
          a
          (pr
            l
            (:sym (:unfold listfn (l) (x y i z)
              (lrec (d0) (slam x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))) l))))))
      (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))
    (appslame (a (pr l (listfn l)) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) x (slam z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1))))))))
      (appslamed ((eq x a) l (listfn l) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) z (lam y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1)))))))
        (applamed ((an (eq x a) (eq z l)) (listfn l) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) y (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1))))))
          (:conv (im (an (an (eq x a) (eq z l)) (eq y (listfn l))) (eq (rlam i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))))
            (im
              (an (an (eq x a) (eq z l)) (eq y (listfn l)))
              (eq
                (:unfold rlam (i (upto (suc (size (Dom (ns y))))) (if (eq i (d0)) x (app (ns y) (sub i (d1))))) ()
                  (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y)))))))))
                (:unfold rlam (i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) ()
                  (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))))
            (lowereqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))
              (reseqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y)))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))
                (lameqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) i (if (eq i (d0)) x (app (ns y) (sub i (d1)))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))
                  (ifeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (eq i (d0)) (eq i (d0)) x a (app (ns y) (sub i (d1))) (app (ns (listfn l)) (sub i (d1))))
                    (biidd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (eq i (d0))))
                    (anll ((eq x a) (eq z l) (eq y (listfn l))))
                    (appneq1d ((an (an (eq x a) (eq z l)) (eq y (listfn l))) y (listfn l) (sub i (d1)))
                      H1)))
                (nseqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (upto (suc (size (Dom (ns y))))) (upto (suc (size (Dom (ns (listfn l)))))))
                  (uptoeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (suc (size (Dom (ns y)))) (suc (size (Dom (ns (listfn l))))))
                    (suceqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (size (Dom (ns y))) (size (Dom (ns (listfn l)))))
                      (sizeeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (Dom (ns y)) (Dom (ns (listfn l))))
                        (dmeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (ns y) (ns (listfn l)))
                          (nseqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) y (listfn l))
                            H1))))))))))))))))

(local theorem dmlistfn ((l nat ())) ()
  (eqs (Dom (ns (listfn l))) (ns (upto (len l))))
((_1 nat) (i nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l (eqs (Dom (ns (listfn _1))) (ns (upto (len _1)))) (eqs (Dom (ns (listfn (d0)))) (ns (upto (len (d0))))) (eqs (Dom (ns (listfn l))) (ns (upto (len l)))) (eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))) (eqs (Dom (ns (listfn (cons x1 x2)))) (ns (upto (len (cons x1 x2))))))
  (eqseqd ((eq _1 l) (Dom (ns (listfn _1))) (Dom (ns (listfn l))) (ns (upto (len _1))) (ns (upto (len l))))
    (dmeqd ((eq _1 l) (ns (listfn _1)) (ns (listfn l)))
      (nseqd ((eq _1 l) (listfn _1) (listfn l))
        (listfneqd ((eq _1 l) _1 l)
          H1)))
    (nseqd ((eq _1 l) (upto (len _1)) (upto (len l)))
      (uptoeqd ((eq _1 l) (len _1) (len l))
        (leneqd ((eq _1 l) _1 l)
          H1))))
  (eqseqd ((eq _1 (d0)) (Dom (ns (listfn _1))) (Dom (ns (listfn (d0)))) (ns (upto (len _1))) (ns (upto (len (d0)))))
    (dmeqd ((eq _1 (d0)) (ns (listfn _1)) (ns (listfn (d0))))
      (nseqd ((eq _1 (d0)) (listfn _1) (listfn (d0)))
        (listfneqd ((eq _1 (d0)) _1 (d0))
          H2)))
    (nseqd ((eq _1 (d0)) (upto (len _1)) (upto (len (d0))))
      (uptoeqd ((eq _1 (d0)) (len _1) (len (d0)))
        (leneqd ((eq _1 (d0)) _1 (d0))
          H2))))
  (eqseqd ((eq _1 x2) (Dom (ns (listfn _1))) (Dom (ns (listfn x2))) (ns (upto (len _1))) (ns (upto (len x2))))
    (dmeqd ((eq _1 x2) (ns (listfn _1)) (ns (listfn x2)))
      (nseqd ((eq _1 x2) (listfn _1) (listfn x2))
        (listfneqd ((eq _1 x2) _1 x2)
          H3)))
    (nseqd ((eq _1 x2) (upto (len _1)) (upto (len x2)))
      (uptoeqd ((eq _1 x2) (len _1) (len x2))
        (leneqd ((eq _1 x2) _1 x2)
          H3))))
  (eqseqd ((eq _1 (cons x1 x2)) (Dom (ns (listfn _1))) (Dom (ns (listfn (cons x1 x2)))) (ns (upto (len _1))) (ns (upto (len (cons x1 x2)))))
    (dmeqd ((eq _1 (cons x1 x2)) (ns (listfn _1)) (ns (listfn (cons x1 x2))))
      (nseqd ((eq _1 (cons x1 x2)) (listfn _1) (listfn (cons x1 x2)))
        (listfneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
          H4)))
    (nseqd ((eq _1 (cons x1 x2)) (upto (len _1)) (upto (len (cons x1 x2))))
      (uptoeqd ((eq _1 (cons x1 x2)) (len _1) (len (cons x1 x2)))
        (leneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
          H4))))
  (ax_mp ((eqs (Dom (ns (d0))) (ns (upto (len (d0))))) (eqs (Dom (ns (listfn (d0)))) (ns (upto (len (d0))))))
    (ax_mp ((eqs (Dom (ns (listfn (d0)))) (Dom (ns (d0)))) (im (eqs (Dom (ns (d0))) (ns (upto (len (d0))))) (eqs (Dom (ns (listfn (d0)))) (ns (upto (len (d0)))))))
      (eqstr ((Dom (ns (listfn (d0)))) (Dom (ns (d0))) (ns (upto (len (d0))))))
      (ax_mp ((eqs (ns (listfn (d0))) (ns (d0))) (eqs (Dom (ns (listfn (d0)))) (Dom (ns (d0)))))
        (dmeq ((ns (listfn (d0))) (ns (d0))))
        (ax_mp ((eq (listfn (d0)) (d0)) (eqs (ns (listfn (d0))) (ns (d0))))
          (nseq ((listfn (d0)) (d0)))
          (listfn0 ()))))
    (ax_mp ((eqs (ns (upto (len (d0)))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (len (d0))))))
      (ax_mp ((eqs (Dom (ns (d0))) (ns (d0))) (im (eqs (ns (upto (len (d0)))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (len (d0)))))))
        (eqstr4 ((Dom (ns (d0))) (ns (d0)) (ns (upto (len (d0))))))
        (dm0 ()))
      (ax_mp ((eq (upto (len (d0))) (d0)) (eqs (ns (upto (len (d0)))) (ns (d0))))
        (nseq ((upto (len (d0))) (d0)))
        (ax_mp ((eq (upto (d0)) (d0)) (eq (upto (len (d0))) (d0)))
          (ax_mp ((eq (upto (len (d0))) (upto (d0))) (im (eq (upto (d0)) (d0)) (eq (upto (len (d0))) (d0))))
            (eqtr ((upto (len (d0))) (upto (d0)) (d0)))
            (ax_mp ((eq (len (d0)) (d0)) (eq (upto (len (d0))) (upto (d0))))
              (uptoeq ((len (d0)) (d0)))
              (len0 ())))
          (upto0 ())))))
  (syl5eqs ((Dom (ns (listfn (cons x1 x2)))) (Dom (ns (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1))))))) (ns (upto (len (cons x1 x2)))) (eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))))
    (ax_mp ((eqs (ns (listfn (cons x1 x2))) (ns (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1))))))) (eqs (Dom (ns (listfn (cons x1 x2)))) (Dom (ns (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1)))))))))
      (dmeq ((ns (listfn (cons x1 x2))) (ns (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1))))))))
      (ax_mp ((eq (listfn (cons x1 x2)) (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1)))))) (eqs (ns (listfn (cons x1 x2))) (ns (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1))))))))
        (nseq ((listfn (cons x1 x2)) (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1)))))))
        (listfnS2 (x1 i x2))))
    (syl5eqs ((Dom (ns (rlam i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1))))))) (ns (upto (suc (size (Dom (ns (listfn x2))))))) (ns (upto (len (cons x1 x2)))) (eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))))
      (dmrlam (i (upto (suc (size (Dom (ns (listfn x2)))))) (if (eq i (d0)) x1 (app (ns (listfn x2)) (sub i (d1))))))
      (nseqd ((eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))) (upto (suc (size (Dom (ns (listfn x2)))))) (upto (len (cons x1 x2))))
        (syl6eqr ((eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))) (upto (suc (size (Dom (ns (listfn x2)))))) (upto (suc (len x2))) (upto (len (cons x1 x2))))
          (ax_mp ((eq (len (cons x1 x2)) (suc (len x2))) (eq (upto (len (cons x1 x2))) (upto (suc (len x2)))))
            (uptoeq ((len (cons x1 x2)) (suc (len x2))))
            (lenS (x1 x2)))
          (uptoeqd ((eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))) (suc (size (Dom (ns (listfn x2))))) (suc (len x2)))
            (suceqd ((eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))) (size (Dom (ns (listfn x2)))) (len x2))
              (syl6eq ((eqs (Dom (ns (listfn x2))) (ns (upto (len x2)))) (size (Dom (ns (listfn x2)))) (size (ns (upto (len x2)))) (len x2))
                (sizeupto ((len x2)))
                (sizeeq ((Dom (ns (listfn x2))) (ns (upto (len x2))))))))))))))))))

(local theorem listfnisf ((l nat ())) ()
  (isfun (ns (listfn l)))
((i nat))
(cases ((eq l (d0)) (isfun (ns (listfn l))))
  (mpbiri ((eq l (d0)) (isfun (ns (d0))) (isfun (ns (listfn l))))
    (isf0 ())
    (isfeqd ((eq l (d0)) (ns (listfn l)) (ns (d0)))
      (nseqd ((eq l (d0)) (listfn l) (d0))
        (syl6eq ((eq l (d0)) (listfn l) (listfn (d0)) (d0))
          (listfn0 ())
          (listfneq (l (d0)))))))
  (mpbii ((not (eq l (d0))) (isfun (ns (rlam i (upto (suc (size (Dom (ns (listfn (snd (sub l (d1))))))))) (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))))) (isfun (ns (listfn l))))
    (rlamisf (i (upto (suc (size (Dom (ns (listfn (snd (sub l (d1))))))))) (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))))
    (isfeqd ((not (eq l (d0))) (ns (rlam i (upto (suc (size (Dom (ns (listfn (snd (sub l (d1))))))))) (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1)))))) (ns (listfn l)))
      (nseqd ((not (eq l (d0))) (rlam i (upto (suc (size (Dom (ns (listfn (snd (sub l (d1))))))))) (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))) (listfn l))
        (syl5eqr ((not (eq l (d0))) (rlam i (upto (suc (size (Dom (ns (listfn (snd (sub l (d1))))))))) (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))) (listfn (cons (fst (sub l (d1))) (snd (sub l (d1))))) (listfn l))
          (listfnS2 ((fst (sub l (d1))) i (snd (sub l (d1)))))
          (listfneqd ((not (eq l (d0))) (cons (fst (sub l (d1))) (snd (sub l (d1)))) l)
            (:conv (im (not (eq l (d0))) (eq (cons (fst (sub l (d1))) (snd (sub l (d1)))) l))
              (im
                (:sym (:unfold ne (l (d0)) ()
                  (not (eq l (d0)))))
                (eq (cons (fst (sub l (d1))) (snd (sub l (d1)))) l))
              (consfstsnd (l))))))))))

(local theorem listfnS ((a nat ()) (i nat) (l nat ())) ()
  (eq (listfn (cons a l)) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))
()
(ax_mp ((eq (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) (eq (listfn (cons a l)) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))))
  (ax_mp ((eq (listfn (cons a l)) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) (im (eq (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) (eq (listfn (cons a l)) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))))
    (eqtr ((listfn (cons a l)) (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))))
    (listfnS2 (a i l)))
  (ax_mp ((eq (upto (suc (size (Dom (ns (listfn l)))))) (upto (suc (len l)))) (eq (rlam i (upto (suc (size (Dom (ns (listfn l)))))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))))
    (rlameq1 (i (upto (suc (size (Dom (ns (listfn l)))))) (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))
    (ax_mp ((eq (suc (size (Dom (ns (listfn l))))) (suc (len l))) (eq (upto (suc (size (Dom (ns (listfn l)))))) (upto (suc (len l)))))
      (uptoeq ((suc (size (Dom (ns (listfn l))))) (suc (len l))))
      (ax_mp ((eq (size (Dom (ns (listfn l)))) (len l)) (eq (suc (size (Dom (ns (listfn l))))) (suc (len l))))
        (suceq ((size (Dom (ns (listfn l)))) (len l)))
        (ax_mp ((eq (size (ns (upto (len l)))) (len l)) (eq (size (Dom (ns (listfn l)))) (len l)))
          (ax_mp ((eq (size (Dom (ns (listfn l)))) (size (ns (upto (len l))))) (im (eq (size (ns (upto (len l)))) (len l)) (eq (size (Dom (ns (listfn l)))) (len l))))
            (eqtr ((size (Dom (ns (listfn l)))) (size (ns (upto (len l)))) (len l)))
            (ax_mp ((eqs (Dom (ns (listfn l))) (ns (upto (len l)))) (eq (size (Dom (ns (listfn l)))) (size (ns (upto (len l))))))
              (sizeeq ((Dom (ns (listfn l))) (ns (upto (len l)))))
              (dmlistfn (l))))
          (sizeupto ((len l)))))))))

(local theorem listfnSval ((a nat ()) (l nat ()) (n nat ())) ()
  (im (lt n (suc (len l))) (eq (app (ns (listfn (cons a l))) n) (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1))))))
((i nat))
(syl5eq ((lt n (suc (len l))) (app (ns (listfn (cons a l))) n) (app (ns (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) n) (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1)))))
  (ax_mp ((eq (listfn (cons a l)) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) (eq (app (ns (listfn (cons a l))) n) (app (ns (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) n)))
    (appneq1 ((listfn (cons a l)) (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) n))
    (listfnS (a i l)))
  (sylbir ((lt n (suc (len l))) (el n (ns (upto (suc (len l))))) (eq (app (ns (rlam i (upto (suc (len l))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))) n) (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1))))))
    (elupto (n (suc (len l))))
    (apprlame ((upto (suc (len l))) n (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1)))) i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))
      (ifeqd ((eq i n) (eq i (d0)) (eq n (d0)) a a (app (ns (listfn l)) (sub i (d1))) (app (ns (listfn l)) (sub n (d1))))
        (eqeq1 (i n (d0)))
        (eqidd ((eq i n) a))
        (appeq2d ((eq i n) (ns (listfn l)) (sub i (d1)) (sub n (d1)))
          (subeq1 (i n (d1)))))))))

(local theorem listfnS0 ((a nat ()) (l nat ())) ()
  (eq (app (ns (listfn (cons a l))) (d0)) a)
()
(ax_mp ((eq (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a) (eq (app (ns (listfn (cons a l))) (d0)) a))
  (ax_mp ((eq (app (ns (listfn (cons a l))) (d0)) (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1))))) (im (eq (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a) (eq (app (ns (listfn (cons a l))) (d0)) a)))
    (eqtr ((app (ns (listfn (cons a l))) (d0)) (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a))
    (ax_mp ((lt (d0) (suc (len l))) (eq (app (ns (listfn (cons a l))) (d0)) (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1))))))
      (listfnSval (a l (d0)))
      (lt01S ((len l)))))
  (ax_mp ((eq (d0) (d0)) (eq (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a))
    (ifpos ((eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))))
    (eqid ((d0))))))

(local theorem listfnSS ((a nat ()) (l nat ()) (n nat ())) ()
  (eq (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n))
()
(:let H1 (ltsuc (n (len l)))
(cases ((lt n (len l)) (eq (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n)))
  (syl6eq ((lt n (len l)) (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) (sub (suc n) (d1))) (app (ns (listfn l)) n))
    (ax_mp ((eq (sub (suc n) (d1)) n) (eq (app (ns (listfn l)) (sub (suc n) (d1))) (app (ns (listfn l)) n)))
      (appeq2 ((ns (listfn l)) (sub (suc n) (d1)) n))
      (sucsub1 (n)))
    (syl6eq ((lt n (len l)) (app (ns (listfn (cons a l))) (suc n)) (if (eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1)))) (app (ns (listfn l)) (sub (suc n) (d1))))
      (ax_mp ((not (eq (suc n) (d0))) (eq (if (eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1)))) (app (ns (listfn l)) (sub (suc n) (d1)))))
        (ifneg ((eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1)))))
        (:conv (not (eq (suc n) (d0)))
          (:sym (:unfold ne ((suc n) (d0)) ()
            (not (eq (suc n) (d0)))))
          (peano1 (n))))
      (sylbi ((lt n (len l)) (lt (suc n) (suc (len l))) (eq (app (ns (listfn (cons a l))) (suc n)) (if (eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1))))))
        H1
        (listfnSval (a l (suc n))))))
  (eqtr4d ((not (lt n (len l))) (app (ns (listfn (cons a l))) (suc n)) (d0) (app (ns (listfn l)) n))
    (sylbir ((not (lt n (len l))) (not (el (suc n) (Dom (ns (listfn (cons a l)))))) (eq (app (ns (listfn (cons a l))) (suc n)) (d0)))
      (ax_mp ((iff (el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l))) (iff (not (el (suc n) (Dom (ns (listfn (cons a l)))))) (not (lt n (len l)))))
        (noteq ((el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l))))
        (ax_mp ((iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))) (iff (el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l))))
          (ax_mp ((iff (el (suc n) (Dom (ns (listfn (cons a l))))) (el (suc n) (ns (upto (len (cons a l)))))) (im (iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))) (iff (el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l)))))
            (bitr ((el (suc n) (Dom (ns (listfn (cons a l))))) (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))))
            (ax_mp ((eqs (Dom (ns (listfn (cons a l)))) (ns (upto (len (cons a l))))) (iff (el (suc n) (Dom (ns (listfn (cons a l))))) (el (suc n) (ns (upto (len (cons a l)))))))
              (eleq2 ((Dom (ns (listfn (cons a l)))) (ns (upto (len (cons a l)))) (suc n)))
              (dmlistfn ((cons a l)))))
          (ax_mp ((iff (lt (suc n) (len (cons a l))) (lt n (len l))) (iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))))
            (ax_mp ((iff (el (suc n) (ns (upto (len (cons a l))))) (lt (suc n) (len (cons a l)))) (im (iff (lt (suc n) (len (cons a l))) (lt n (len l))) (iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l)))))
              (bitr ((el (suc n) (ns (upto (len (cons a l))))) (lt (suc n) (len (cons a l))) (lt n (len l))))
              (elupto ((suc n) (len (cons a l)))))
            (ax_mp ((iff (lt n (len l)) (lt (suc n) (suc (len l)))) (iff (lt (suc n) (len (cons a l))) (lt n (len l))))
              (ax_mp ((iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))) (im (iff (lt n (len l)) (lt (suc n) (suc (len l)))) (iff (lt (suc n) (len (cons a l))) (lt n (len l)))))
                (bitr4 ((lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l))) (lt n (len l))))
                (ax_mp ((eq (len (cons a l)) (suc (len l))) (iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))))
                  (lteq2 ((suc n) (len (cons a l)) (suc (len l))))
                  (lenS (a l))))
              H1))))
      (ndmapp ((ns (listfn (cons a l))) (suc n))))
    (sylbir ((not (lt n (len l))) (not (el n (Dom (ns (listfn l))))) (eq (app (ns (listfn l)) n) (d0)))
      (ax_mp ((iff (el n (Dom (ns (listfn l)))) (lt n (len l))) (iff (not (el n (Dom (ns (listfn l))))) (not (lt n (len l)))))
        (noteq ((el n (Dom (ns (listfn l)))) (lt n (len l))))
        (ax_mp ((iff (el n (ns (upto (len l)))) (lt n (len l))) (iff (el n (Dom (ns (listfn l)))) (lt n (len l))))
          (ax_mp ((iff (el n (Dom (ns (listfn l)))) (el n (ns (upto (len l))))) (im (iff (el n (ns (upto (len l)))) (lt n (len l))) (iff (el n (Dom (ns (listfn l)))) (lt n (len l)))))
            (bitr ((el n (Dom (ns (listfn l)))) (el n (ns (upto (len l)))) (lt n (len l))))
            (ax_mp ((eqs (Dom (ns (listfn l))) (ns (upto (len l)))) (iff (el n (Dom (ns (listfn l)))) (el n (ns (upto (len l))))))
              (eleq2 ((Dom (ns (listfn l))) (ns (upto (len l))) n))
              (dmlistfn (l))))
          (elupto (n (len l)))))
      (ndmapp ((ns (listfn l)) n)))))))

(def nth ((n nat ()) (l nat ())) (nat ())
()
(if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))

(local theorem ntheqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (_l1 nat ()) (_l2 nat ()))
  ((_nh (im _G (eq _n1 _n2)))
   (_lh (im _G (eq _l1 _l2))))
  (im _G (eq (nth _n1 _l1) (nth _n2 _l2)))
()
(:conv (im _G (eq (nth _n1 _l1) (nth _n2 _l2)))
  (im
    _G
    (eq
      (:unfold nth (_n1 _l1) ()
        (if (lt _n1 (len _l1)) (suc (app (ns (listfn _l1)) _n1)) (d0)))
      (:unfold nth (_n2 _l2) ()
        (if (lt _n2 (len _l2)) (suc (app (ns (listfn _l2)) _n2)) (d0)))))
  (ifeqd (_G (lt _n1 (len _l1)) (lt _n2 (len _l2)) (suc (app (ns (listfn _l1)) _n1)) (suc (app (ns (listfn _l2)) _n2)) (d0) (d0))
    (lteqd (_G _n1 _n2 (len _l1) (len _l2))
      _nh
      (leneqd (_G _l1 _l2)
        _lh))
    (suceqd (_G (app (ns (listfn _l1)) _n1) (app (ns (listfn _l2)) _n2))
      (appeqd (_G (ns (listfn _l1)) (ns (listfn _l2)) _n1 _n2)
        (nseqd (_G (listfn _l1) (listfn _l2))
          (listfneqd (_G _l1 _l2)
            _lh))
        _nh))
    (eqidd (_G (d0))))))

(local theorem ntheq ((_n1 nat ()) (_n2 nat ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eq _n1 _n2) (im (eq _l1 _l2) (eq (nth _n1 _l1) (nth _n2 _l2))))
()
(exp ((eq _n1 _n2) (eq _l1 _l2) (eq (nth _n1 _l1) (nth _n2 _l2)))
  (ntheqd ((an (eq _n1 _n2) (eq _l1 _l2)) _n1 _n2 _l1 _l2)
    (anl ((eq _n1 _n2) (eq _l1 _l2)))
    (anr ((eq _n1 _n2) (eq _l1 _l2))))))

(local theorem ntheq1d ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (l nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (nth _n1 l) (nth _n2 l)))
()
(ntheqd (_G _n1 _n2 l l)
  _h
  (eqidd (_G l))))

(local theorem ntheq1 ((_n1 nat ()) (_n2 nat ()) (l nat ())) ()
  (im (eq _n1 _n2) (eq (nth _n1 l) (nth _n2 l)))
()
(ntheq1d ((eq _n1 _n2) _n1 _n2 l)
  (id ((eq _n1 _n2)))))

(local theorem ntheq2d ((_G wff ()) (n nat ()) (_l1 nat ()) (_l2 nat ()))
  ((_h (im _G (eq _l1 _l2))))
  (im _G (eq (nth n _l1) (nth n _l2)))
()
(ntheqd (_G n n _l1 _l2)
  (eqidd (_G n))
  _h))

(local theorem ntheq2 ((n nat ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (eq (nth n _l1) (nth n _l2)))
()
(ntheq2d ((eq _l1 _l2) n _l1 _l2)
  (id ((eq _l1 _l2)))))

(theorem nth0 ((n nat ())) ()
  (eq (nth n (d0)) (d0))
()
(ax_mp ((not (lt n (len (d0)))) (eq (nth n (d0)) (d0)))
  (:conv (im (not (lt n (len (d0)))) (eq (nth n (d0)) (d0)))
    (im
      (not (lt n (len (d0))))
      (eq
        (:unfold nth (n (d0)) ()
          (if (lt n (len (d0))) (suc (app (ns (listfn (d0))) n)) (d0)))
        (d0)))
    (ifneg ((lt n (len (d0))) (suc (app (ns (listfn (d0))) n)) (d0))))
  (mtbir ((lt n (d0)) (lt n (len (d0))))
    (ax_mp ((eq (len (d0)) (d0)) (iff (lt n (len (d0))) (lt n (d0))))
      (lteq2 (n (len (d0)) (d0)))
      (len0 ()))
    (lt02 (n)))))

(theorem nthZ ((a nat ()) (l nat ())) ()
  (eq (nth (d0) (cons a l)) (suc a))
()
(ax_mp ((eq (suc (app (ns (listfn (cons a l))) (d0))) (suc a)) (eq (nth (d0) (cons a l)) (suc a)))
  (ax_mp ((eq (nth (d0) (cons a l)) (suc (app (ns (listfn (cons a l))) (d0)))) (im (eq (suc (app (ns (listfn (cons a l))) (d0))) (suc a)) (eq (nth (d0) (cons a l)) (suc a))))
    (eqtr ((nth (d0) (cons a l)) (suc (app (ns (listfn (cons a l))) (d0))) (suc a)))
    (ax_mp ((lt (d0) (len (cons a l))) (eq (nth (d0) (cons a l)) (suc (app (ns (listfn (cons a l))) (d0)))))
      (:conv (im (lt (d0) (len (cons a l))) (eq (nth (d0) (cons a l)) (suc (app (ns (listfn (cons a l))) (d0)))))
        (im
          (lt (d0) (len (cons a l)))
          (eq
            (:unfold nth ((d0) (cons a l)) ()
              (if (lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)))
            (suc (app (ns (listfn (cons a l))) (d0)))))
        (ifpos ((lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0))))
      (mpbir ((lt (d0) (suc (len l))) (lt (d0) (len (cons a l))))
        (ax_mp ((eq (len (cons a l)) (suc (len l))) (iff (lt (d0) (len (cons a l))) (lt (d0) (suc (len l)))))
          (lteq2 ((d0) (len (cons a l)) (suc (len l))))
          (lenS (a l)))
        (lt01S ((len l))))))
  (ax_mp ((eq (app (ns (listfn (cons a l))) (d0)) a) (eq (suc (app (ns (listfn (cons a l))) (d0))) (suc a)))
    (suceq ((app (ns (listfn (cons a l))) (d0)) a))
    (listfnS0 (a l)))))

(theorem nthS ((n nat ()) (a nat ()) (l nat ())) ()
  (eq (nth (suc n) (cons a l)) (nth n l))
()
(:let H1 (bitr4 ((lt n (len l)) (lt (suc n) (suc (len l))) (lt (suc n) (len (cons a l)))))
(:let H2 (ltsuc (n (len l)))
(:let H3 (ax_mp ((iff (lt n (len l)) (lt (suc n) (suc (len l)))) (im (iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))) (iff (lt n (len l)) (lt (suc n) (len (cons a l))))))
  H1
  H2)
(:let H4 (lteq2 ((suc n) (len (cons a l)) (suc (len l))))
(:let H5 (lenS (a l))
(:let H6 (ax_mp ((eq (len (cons a l)) (suc (len l))) (iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))))
  H4
  H5)
(:let H7 (ax_mp ((iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))) (iff (lt n (len l)) (lt (suc n) (len (cons a l)))))
  H3
  H6)
(cases ((lt n (len l)) (eq (nth (suc n) (cons a l)) (nth n l)))
  (eqtr4d ((lt n (len l)) (nth (suc n) (cons a l)) (suc (app (ns (listfn (cons a l))) (suc n))) (nth n l))
    (sylbi ((lt n (len l)) (lt (suc n) (len (cons a l))) (eq (nth (suc n) (cons a l)) (suc (app (ns (listfn (cons a l))) (suc n)))))
      H7
      (:conv (im (lt (suc n) (len (cons a l))) (eq (nth (suc n) (cons a l)) (suc (app (ns (listfn (cons a l))) (suc n)))))
        (im
          (lt (suc n) (len (cons a l)))
          (eq
            (:unfold nth ((suc n) (cons a l)) ()
              (if (lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))
            (suc (app (ns (listfn (cons a l))) (suc n)))))
        (ifpos ((lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))))
    (syl6eqr ((lt n (len l)) (nth n l) (suc (app (ns (listfn l)) n)) (suc (app (ns (listfn (cons a l))) (suc n))))
      (ax_mp ((eq (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n)) (eq (suc (app (ns (listfn (cons a l))) (suc n))) (suc (app (ns (listfn l)) n))))
        (suceq ((app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n)))
        (listfnSS (a l n)))
      (:conv (im (lt n (len l)) (eq (nth n l) (suc (app (ns (listfn l)) n))))
        (im
          (lt n (len l))
          (eq
            (:unfold nth (n l) ()
              (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
            (suc (app (ns (listfn l)) n))))
        (ifpos ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0))))))
  (eqtr4d ((not (lt n (len l))) (nth (suc n) (cons a l)) (d0) (nth n l))
    (sylbi ((not (lt n (len l))) (not (lt (suc n) (len (cons a l)))) (eq (nth (suc n) (cons a l)) (d0)))
      (ax_mp ((iff (lt n (len l)) (lt (suc n) (len (cons a l)))) (iff (not (lt n (len l))) (not (lt (suc n) (len (cons a l))))))
        (noteq ((lt n (len l)) (lt (suc n) (len (cons a l)))))
        H7)
      (:conv (im (not (lt (suc n) (len (cons a l)))) (eq (nth (suc n) (cons a l)) (d0)))
        (im
          (not (lt (suc n) (len (cons a l))))
          (eq
            (:unfold nth ((suc n) (cons a l)) ()
              (if (lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))
            (d0)))
        (ifneg ((lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))))
    (:conv (im (not (lt n (len l))) (eq (nth n l) (d0)))
      (im
        (not (lt n (len l)))
        (eq
          (:unfold nth (n l) ()
            (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
          (d0)))
      (ifneg ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0))))))))))))))

(local theorem nthne0 ((l nat ()) (n nat ())) ()
  (iff (ne (nth n l) (d0)) (lt n (len l)))
()
(ibii ((ne (nth n l) (d0)) (lt n (len l)))
  (ax_mp ((im (not (lt n (len l))) (eq (nth n l) (d0))) (im (ne (nth n l) (d0)) (lt n (len l))))
    (:conv (im (im (not (lt n (len l))) (eq (nth n l) (d0))) (im (ne (nth n l) (d0)) (lt n (len l))))
      (im
        (im (not (lt n (len l))) (eq (nth n l) (d0)))
        (im
          (:unfold ne ((nth n l) (d0)) ()
            (not (eq (nth n l) (d0))))
          (lt n (len l))))
      (con1 ((lt n (len l)) (eq (nth n l) (d0)))))
    (:conv (im (not (lt n (len l))) (eq (nth n l) (d0)))
      (im
        (not (lt n (len l)))
        (eq
          (:unfold nth (n l) ()
            (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
          (d0)))
      (ifneg ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))))
  (syl ((lt n (len l)) (eq (nth n l) (suc (app (ns (listfn l)) n))) (ne (nth n l) (d0)))
    (sucne0 ((nth n l) (app (ns (listfn l)) n)))
    (:conv (im (lt n (len l)) (eq (nth n l) (suc (app (ns (listfn l)) n))))
      (im
        (lt n (len l))
        (eq
          (:unfold nth (n l) ()
            (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
          (suc (app (ns (listfn l)) n))))
      (ifpos ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))))))

(local theorem ntheq0 ((l nat ()) (n nat ())) ()
  (iff (eq (nth n l) (d0)) (le (len l) n))
()
(ax_mp ((iff (le (len l) n) (eq (nth n l) (d0))) (iff (eq (nth n l) (d0)) (le (len l) n)))
  (bicom ((le (len l) n) (eq (nth n l) (d0))))
  (ax_mp ((iff (not (lt n (len l))) (eq (nth n l) (d0))) (iff (le (len l) n) (eq (nth n l) (d0))))
    (ax_mp ((iff (le (len l) n) (not (lt n (len l)))) (im (iff (not (lt n (len l))) (eq (nth n l) (d0))) (iff (le (len l) n) (eq (nth n l) (d0)))))
      (bitr ((le (len l) n) (not (lt n (len l))) (eq (nth n l) (d0))))
      (lenlt ((len l) n)))
    (ax_mp ((iff (not (eq (nth n l) (d0))) (lt n (len l))) (iff (not (lt n (len l))) (eq (nth n l) (d0))))
      (con1b ((eq (nth n l) (d0)) (lt n (len l))))
      (:conv (iff (not (eq (nth n l) (d0))) (lt n (len l)))
        (iff
          (:sym (:unfold ne ((nth n l) (d0)) ()
            (not (eq (nth n l) (d0)))))
          (lt n (len l)))
        (nthne0 (l n)))))))

(local theorem lmemnth ((a nat ()) (l nat ()) (n nat)) ()
  (iff (lmem a l) (ex n (eq (nth n l) (suc a))))
((_1 nat) (x1 nat) (x2 nat) (x3 nat))
(:let H1 (id ((eq _1 l)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l (iff (lmem a _1) (ex n (eq (nth n _1) (suc a)))) (iff (lmem a (d0)) (ex n (eq (nth n (d0)) (suc a)))) (iff (lmem a l) (ex n (eq (nth n l) (suc a)))) (iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (iff (lmem a (cons x1 x2)) (ex n (eq (nth n (cons x1 x2)) (suc a)))))
  (bieqd ((eq _1 l) (lmem a _1) (lmem a l) (ex n (eq (nth n _1) (suc a))) (ex n (eq (nth n l) (suc a))))
    (lmemeqd ((eq _1 l) a a _1 l)
      (eqidd ((eq _1 l) a))
      H1)
    (exeqd ((eq _1 l) n (eq (nth n _1) (suc a)) (eq (nth n l) (suc a)))
      (eqeqd ((eq _1 l) (nth n _1) (nth n l) (suc a) (suc a))
        (ntheqd ((eq _1 l) n n _1 l)
          (eqidd ((eq _1 l) n))
          H1)
        (eqidd ((eq _1 l) (suc a))))))
  (bieqd ((eq _1 (d0)) (lmem a _1) (lmem a (d0)) (ex n (eq (nth n _1) (suc a))) (ex n (eq (nth n (d0)) (suc a))))
    (lmemeqd ((eq _1 (d0)) a a _1 (d0))
      (eqidd ((eq _1 (d0)) a))
      H2)
    (exeqd ((eq _1 (d0)) n (eq (nth n _1) (suc a)) (eq (nth n (d0)) (suc a)))
      (eqeqd ((eq _1 (d0)) (nth n _1) (nth n (d0)) (suc a) (suc a))
        (ntheqd ((eq _1 (d0)) n n _1 (d0))
          (eqidd ((eq _1 (d0)) n))
          H2)
        (eqidd ((eq _1 (d0)) (suc a))))))
  (bieqd ((eq _1 x2) (lmem a _1) (lmem a x2) (ex n (eq (nth n _1) (suc a))) (ex n (eq (nth n x2) (suc a))))
    (lmemeqd ((eq _1 x2) a a _1 x2)
      (eqidd ((eq _1 x2) a))
      H3)
    (exeqd ((eq _1 x2) n (eq (nth n _1) (suc a)) (eq (nth n x2) (suc a)))
      (eqeqd ((eq _1 x2) (nth n _1) (nth n x2) (suc a) (suc a))
        (ntheqd ((eq _1 x2) n n _1 x2)
          (eqidd ((eq _1 x2) n))
          H3)
        (eqidd ((eq _1 x2) (suc a))))))
  (bieqd ((eq _1 (cons x1 x2)) (lmem a _1) (lmem a (cons x1 x2)) (ex n (eq (nth n _1) (suc a))) (ex n (eq (nth n (cons x1 x2)) (suc a))))
    (lmemeqd ((eq _1 (cons x1 x2)) a a _1 (cons x1 x2))
      (eqidd ((eq _1 (cons x1 x2)) a))
      H4)
    (exeqd ((eq _1 (cons x1 x2)) n (eq (nth n _1) (suc a)) (eq (nth n (cons x1 x2)) (suc a)))
      (eqeqd ((eq _1 (cons x1 x2)) (nth n _1) (nth n (cons x1 x2)) (suc a) (suc a))
        (ntheqd ((eq _1 (cons x1 x2)) n n _1 (cons x1 x2))
          (eqidd ((eq _1 (cons x1 x2)) n))
          H4)
        (eqidd ((eq _1 (cons x1 x2)) (suc a))))))
  (ax_mp ((not (ex n (eq (nth n (d0)) (suc a)))) (iff (lmem a (d0)) (ex n (eq (nth n (d0)) (suc a)))))
    (ax_mp ((not (lmem a (d0))) (im (not (ex n (eq (nth n (d0)) (suc a)))) (iff (lmem a (d0)) (ex n (eq (nth n (d0)) (suc a))))))
      (binth ((lmem a (d0)) (ex n (eq (nth n (d0)) (suc a)))))
      (lmem0 (a)))
    (nexi (n (eq (nth n (d0)) (suc a)))
      (ax_mp ((ne (suc a) (nth n (d0))) (not (eq (nth n (d0)) (suc a))))
        (:conv (im (ne (suc a) (nth n (d0))) (not (eq (nth n (d0)) (suc a))))
          (im
            (ne (suc a) (nth n (d0)))
            (:sym (:unfold ne ((nth n (d0)) (suc a)) ()
              (not (eq (nth n (d0)) (suc a))))))
          (necom ((suc a) (nth n (d0)))))
        (mpbir ((ne (suc a) (d0)) (ne (suc a) (nth n (d0))))
          (ax_mp ((eq (nth n (d0)) (d0)) (iff (ne (suc a) (nth n (d0))) (ne (suc a) (d0))))
            (neeq2 ((suc a) (nth n (d0)) (d0)))
            (nth0 (n)))
          (peano1 (a))))))
  (syl5bb ((iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (lmem a (cons x1 x2)) (or (eq a x1) (lmem a x2)) (ex n (eq (nth n (cons x1 x2)) (suc a))))
    (lmemS (a x1 x2))
    (syl6bb ((iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (or (eq a x1) (lmem a x2)) (or (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (ex n (eq (nth n (cons x1 x2)) (suc a))))
      (ax_mp ((iff (ex n (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (ex n (eq (nth n (cons x1 x2)) (suc a)))) (iff (or (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (ex n (eq (nth n (cons x1 x2)) (suc a)))))
        (ax_mp ((iff (ex n (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (or (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))) (im (iff (ex n (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (ex n (eq (nth n (cons x1 x2)) (suc a)))) (iff (or (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (ex n (eq (nth n (cons x1 x2)) (suc a))))))
          (bitr3 ((or (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (ex n (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (ex n (eq (nth n (cons x1 x2)) (suc a)))))
          (exor (n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))))
        (exeqi (n (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (eq (nth n (cons x1 x2)) (suc a)))
          (ax_mp ((iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x1 x2)) (suc a))) (eq (nth n (cons x1 x2)) (suc a))) (iff (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (eq (nth n (cons x1 x2)) (suc a))))
            (ax_mp ((iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x1 x2)) (suc a))) (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (im (iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x1 x2)) (suc a))) (eq (nth n (cons x1 x2)) (suc a))) (iff (or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (eq (nth n (cons x1 x2)) (suc a)))))
              (bitr3 ((or (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x1 x2)) (suc a))) (eq (nth n (cons x1 x2)) (suc a))))
              (andir ((eq n (d0)) (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))
            (ax_mp ((or (eq n (d0)) (not (eq n (d0)))) (iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x1 x2)) (suc a))) (eq (nth n (cons x1 x2)) (suc a))))
              (bian1 ((or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x1 x2)) (suc a))))
              (em ((eq n (d0))))))))
      (oreqd ((iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (eq a x1) (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (lmem a x2) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))
        (a1i ((iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (iff (eq a x1) (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))))))
          (ax_mp ((iff (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (eq a x1)) (iff (eq a x1) (ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a))))))
            (bicom ((ex n (an (eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)))) (eq a x1)))
            (exeqe (n (d0) (eq (nth n (cons x1 x2)) (suc a)) (eq a x1))
              (syl6bb ((eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)) (eq x1 a) (eq a x1))
                (eqcomb (x1 a))
                (syl6bb ((eq n (d0)) (eq (nth n (cons x1 x2)) (suc a)) (eq (suc x1) (suc a)) (eq x1 a))
                  (peano2 (x1 a))
                  (eqeq1d ((eq n (d0)) (nth n (cons x1 x2)) (suc x1) (suc a))
                    (syl6eq ((eq n (d0)) (nth n (cons x1 x2)) (nth (d0) (cons x1 x2)) (suc x1))
                      (nthZ (x1 x2))
                      (ntheq1 (n (d0) (cons x1 x2))))))))))
        (ax_mp ((iff (iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (iff (lmem a x2) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))) (im (iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (iff (lmem a x2) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))))
          (bi1 ((iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (iff (lmem a x2) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))))
          (ax_mp ((iff (ex n (eq (nth n x2) (suc a))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))) (iff (iff (lmem a x2) (ex n (eq (nth n x2) (suc a)))) (iff (lmem a x2) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))))
            (bieq2 ((lmem a x2) (ex n (eq (nth n x2) (suc a))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))))
            (ax_mp ((iff (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (ex x3 (eq (nth x3 x2) (suc a)))) (iff (ex n (eq (nth n x2) (suc a))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))))
              (ax_mp ((iff (ex n (eq (nth n x2) (suc a))) (ex x3 (eq (nth x3 x2) (suc a)))) (im (iff (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (ex x3 (eq (nth x3 x2) (suc a)))) (iff (ex n (eq (nth n x2) (suc a))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))))))
                (bitr4 ((ex n (eq (nth n x2) (suc a))) (ex x3 (eq (nth x3 x2) (suc a))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))))))
                (cbvex (n x3 (eq (nth n x2) (suc a)) (eq (nth x3 x2) (suc a)))
                  (eqeq1d ((eq n x3) (nth n x2) (nth x3 x2) (suc a))
                    (ntheq1 (n x3 x2)))))
              (ax_mp ((iff (ex x3 (ex n (an (eq n (suc x3)) (eq (nth n (cons x1 x2)) (suc a))))) (ex x3 (eq (nth x3 x2) (suc a)))) (iff (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (ex x3 (eq (nth x3 x2) (suc a)))))
                (ax_mp ((iff (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (ex x3 (ex n (an (eq n (suc x3)) (eq (nth n (cons x1 x2)) (suc a)))))) (im (iff (ex x3 (ex n (an (eq n (suc x3)) (eq (nth n (cons x1 x2)) (suc a))))) (ex x3 (eq (nth x3 x2) (suc a)))) (iff (ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (ex x3 (eq (nth x3 x2) (suc a))))))
                  (bitr ((ex n (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a)))) (ex x3 (ex n (an (eq n (suc x3)) (eq (nth n (cons x1 x2)) (suc a))))) (ex x3 (eq (nth x3 x2) (suc a)))))
                  (biexexi (n x3 (an (not (eq n (d0))) (eq (nth n (cons x1 x2)) (suc a))) (an (eq n (suc x3)) (eq (nth n (cons x1 x2)) (suc a))))
                    (biexan1a ((eq (nth n (cons x1 x2)) (suc a)) x3 (not (eq n (d0))) (eq n (suc x3)))
                      (a1i ((eq (nth n (cons x1 x2)) (suc a)) (iff (not (eq n (d0))) (ex x3 (eq n (suc x3)))))
                        (:conv (iff (not (eq n (d0))) (ex x3 (eq n (suc x3))))
                          (iff
                            (:sym (:unfold ne (n (d0)) ()
                              (not (eq n (d0)))))
                            (ex x3 (eq n (suc x3))))
                          (exsuc (x3 n)))))))
                (exeqi (x3 (ex n (an (eq n (suc x3)) (eq (nth n (cons x1 x2)) (suc a)))) (eq (nth x3 x2) (suc a)))
                  (exeqe (n (suc x3) (eq (nth n (cons x1 x2)) (suc a)) (eq (nth x3 x2) (suc a)))
                    (eqeq1d ((eq n (suc x3)) (nth n (cons x1 x2)) (nth x3 x2) (suc a))
                      (syl6eq ((eq n (suc x3)) (nth n (cons x1 x2)) (nth (suc x3) (cons x1 x2)) (nth x3 x2))
                        (nthS (x3 x1 x2))
                        (ntheq1 (n (suc x3) (cons x1 x2))))))))))))))))))))

(local theorem allnth ((A set ()) (l nat ()) (n nat) (x nat)) ()
  (iff (all A l) (al n (al x (im (eq (nth n l) (suc x)) (el x A)))))
()
(ax_mp ((iff (al n (al x (im (eq (nth n l) (suc x)) (el x A)))) (al x (im (ex n (eq (nth n l) (suc x))) (el x A)))) (iff (all A l) (al n (al x (im (eq (nth n l) (suc x)) (el x A))))))
  (ax_mp ((iff (all A l) (al x (im (ex n (eq (nth n l) (suc x))) (el x A)))) (im (iff (al n (al x (im (eq (nth n l) (suc x)) (el x A)))) (al x (im (ex n (eq (nth n l) (suc x))) (el x A)))) (iff (all A l) (al n (al x (im (eq (nth n l) (suc x)) (el x A)))))))
    (bitr4 ((all A l) (al x (im (ex n (eq (nth n l) (suc x))) (el x A))) (al n (al x (im (eq (nth n l) (suc x)) (el x A))))))
    (:conv (iff (all A l) (al x (im (ex n (eq (nth n l) (suc x))) (el x A))))
      (iff
        (:unfold all (A l) ()
          (:unfold subset ((ns (lmems l)) A) (x)
            (al x (im (el x (ns (lmems l))) (el x A)))))
        (al x (im (ex n (eq (nth n l) (suc x))) (el x A))))
      (aleqi (x (im (el x (ns (lmems l))) (el x A)) (im (ex n (eq (nth n l) (suc x))) (el x A)))
        (imeq1i ((el x (ns (lmems l))) (ex n (eq (nth n l) (suc x))) (el x A))
          (:conv (iff (el x (ns (lmems l))) (ex n (eq (nth n l) (suc x))))
            (iff
              (:sym (:unfold lmem (x l) ()
                (el x (ns (lmems l)))))
              (ex n (eq (nth n l) (suc x))))
            (lmemnth (x l n)))))))
  (ax_mp ((iff (al x (im (ex n (eq (nth n l) (suc x))) (el x A))) (al x (al n (im (eq (nth n l) (suc x)) (el x A))))) (iff (al n (al x (im (eq (nth n l) (suc x)) (el x A)))) (al x (im (ex n (eq (nth n l) (suc x))) (el x A)))))
    (ax_mp ((iff (al n (al x (im (eq (nth n l) (suc x)) (el x A)))) (al x (al n (im (eq (nth n l) (suc x)) (el x A))))) (im (iff (al x (im (ex n (eq (nth n l) (suc x))) (el x A))) (al x (al n (im (eq (nth n l) (suc x)) (el x A))))) (iff (al n (al x (im (eq (nth n l) (suc x)) (el x A)))) (al x (im (ex n (eq (nth n l) (suc x))) (el x A))))))
      (bitr4 ((al n (al x (im (eq (nth n l) (suc x)) (el x A)))) (al x (al n (im (eq (nth n l) (suc x)) (el x A)))) (al x (im (ex n (eq (nth n l) (suc x))) (el x A)))))
      (alcomb (n x (im (eq (nth n l) (suc x)) (el x A)))))
    (aleqi (x (im (ex n (eq (nth n l) (suc x))) (el x A)) (al n (im (eq (nth n l) (suc x)) (el x A))))
      (eexb (n (eq (nth n l) (suc x)) (el x A)))))))

(local theorem nthlmem ((a nat ()) (l nat ()) (n nat ())) ()
  (im (eq (nth n l) (suc a)) (lmem a l))
((x1 nat))
(sylibr ((eq (nth n l) (suc a)) (ex x1 (eq (nth x1 l) (suc a))) (lmem a l))
  (lmemnth (a l x1))
  (iexe (x1 n (eq (nth x1 l) (suc a)) (eq (nth n l) (suc a)))
    (eqeq1d ((eq x1 n) (nth x1 l) (nth n l) (suc a))
      (ntheq1 (x1 n l))))))

(local theorem appendnth1 ((i nat ()) (l1 nat ()) (l2 nat ())) ()
  (im (lt i (len l1)) (eq (nth i (append l1 l2)) (nth i l1)))
((_1 nat) (x1 nat) (x2 nat) (x3 nat) (x4 nat))
(:let H1 (eqidd ((eq _1 l1) x3))
(:let H2 (id ((eq _1 l1)))
(:let H3 (eqidd ((eq _1 (d0)) x3))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 x2) x3))
(:let H6 (id ((eq _1 x2)))
(:let H7 (eqidd ((eq _1 (cons x1 x2)) x3))
(:let H8 (id ((eq _1 (cons x1 x2))))
(:let H9 (ntheq2 (x3 (append (cons x1 x2) l2) (cons x1 (append x2 l2))))
(:let H10 (appendS (x1 x2 l2))
(:let H11 (ax_mp ((eq (append (cons x1 x2) l2) (cons x1 (append x2 l2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 (append x2 l2)))))
  H9
  H10)
(ax_mp ((al x3 (im (lt x3 (len l1)) (eq (nth x3 (append l1 l2)) (nth x3 l1)))) (im (lt i (len l1)) (eq (nth i (append l1 l2)) (nth i l1))))
  (eale (x3 i (im (lt x3 (len l1)) (eq (nth x3 (append l1 l2)) (nth x3 l1))) (im (lt i (len l1)) (eq (nth i (append l1 l2)) (nth i l1))))
    (imeqd ((eq x3 i) (lt x3 (len l1)) (lt i (len l1)) (eq (nth x3 (append l1 l2)) (nth x3 l1)) (eq (nth i (append l1 l2)) (nth i l1)))
      (lteq1 (x3 i (len l1)))
      (eqeqd ((eq x3 i) (nth x3 (append l1 l2)) (nth i (append l1 l2)) (nth x3 l1) (nth i l1))
        (ntheq1 (x3 i (append l1 l2)))
        (ntheq1 (x3 i l1)))))
  (listind (_1 x1 x2 l1 (al x3 (im (lt x3 (len _1)) (eq (nth x3 (append _1 l2)) (nth x3 _1)))) (al x3 (im (lt x3 (len (d0))) (eq (nth x3 (append (d0) l2)) (nth x3 (d0))))) (al x3 (im (lt x3 (len l1)) (eq (nth x3 (append l1 l2)) (nth x3 l1)))) (al x3 (im (lt x3 (len x2)) (eq (nth x3 (append x2 l2)) (nth x3 x2)))) (al x3 (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))))))
    (aleqd ((eq _1 l1) x3 (im (lt x3 (len _1)) (eq (nth x3 (append _1 l2)) (nth x3 _1))) (im (lt x3 (len l1)) (eq (nth x3 (append l1 l2)) (nth x3 l1))))
      (imeqd ((eq _1 l1) (lt x3 (len _1)) (lt x3 (len l1)) (eq (nth x3 (append _1 l2)) (nth x3 _1)) (eq (nth x3 (append l1 l2)) (nth x3 l1)))
        (lteqd ((eq _1 l1) x3 x3 (len _1) (len l1))
          H1
          (leneqd ((eq _1 l1) _1 l1)
            H2))
        (eqeqd ((eq _1 l1) (nth x3 (append _1 l2)) (nth x3 (append l1 l2)) (nth x3 _1) (nth x3 l1))
          (ntheqd ((eq _1 l1) x3 x3 (append _1 l2) (append l1 l2))
            H1
            (appendeqd ((eq _1 l1) _1 l1 l2 l2)
              H2
              (eqidd ((eq _1 l1) l2))))
          (ntheqd ((eq _1 l1) x3 x3 _1 l1)
            H1
            H2))))
    (aleqd ((eq _1 (d0)) x3 (im (lt x3 (len _1)) (eq (nth x3 (append _1 l2)) (nth x3 _1))) (im (lt x3 (len (d0))) (eq (nth x3 (append (d0) l2)) (nth x3 (d0)))))
      (imeqd ((eq _1 (d0)) (lt x3 (len _1)) (lt x3 (len (d0))) (eq (nth x3 (append _1 l2)) (nth x3 _1)) (eq (nth x3 (append (d0) l2)) (nth x3 (d0))))
        (lteqd ((eq _1 (d0)) x3 x3 (len _1) (len (d0)))
          H3
          (leneqd ((eq _1 (d0)) _1 (d0))
            H4))
        (eqeqd ((eq _1 (d0)) (nth x3 (append _1 l2)) (nth x3 (append (d0) l2)) (nth x3 _1) (nth x3 (d0)))
          (ntheqd ((eq _1 (d0)) x3 x3 (append _1 l2) (append (d0) l2))
            H3
            (appendeqd ((eq _1 (d0)) _1 (d0) l2 l2)
              H4
              (eqidd ((eq _1 (d0)) l2))))
          (ntheqd ((eq _1 (d0)) x3 x3 _1 (d0))
            H3
            H4))))
    (aleqd ((eq _1 x2) x3 (im (lt x3 (len _1)) (eq (nth x3 (append _1 l2)) (nth x3 _1))) (im (lt x3 (len x2)) (eq (nth x3 (append x2 l2)) (nth x3 x2))))
      (imeqd ((eq _1 x2) (lt x3 (len _1)) (lt x3 (len x2)) (eq (nth x3 (append _1 l2)) (nth x3 _1)) (eq (nth x3 (append x2 l2)) (nth x3 x2)))
        (lteqd ((eq _1 x2) x3 x3 (len _1) (len x2))
          H5
          (leneqd ((eq _1 x2) _1 x2)
            H6))
        (eqeqd ((eq _1 x2) (nth x3 (append _1 l2)) (nth x3 (append x2 l2)) (nth x3 _1) (nth x3 x2))
          (ntheqd ((eq _1 x2) x3 x3 (append _1 l2) (append x2 l2))
            H5
            (appendeqd ((eq _1 x2) _1 x2 l2 l2)
              H6
              (eqidd ((eq _1 x2) l2))))
          (ntheqd ((eq _1 x2) x3 x3 _1 x2)
            H5
            H6))))
    (aleqd ((eq _1 (cons x1 x2)) x3 (im (lt x3 (len _1)) (eq (nth x3 (append _1 l2)) (nth x3 _1))) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2)))))
      (imeqd ((eq _1 (cons x1 x2)) (lt x3 (len _1)) (lt x3 (len (cons x1 x2))) (eq (nth x3 (append _1 l2)) (nth x3 _1)) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))))
        (lteqd ((eq _1 (cons x1 x2)) x3 x3 (len _1) (len (cons x1 x2)))
          H7
          (leneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
            H8))
        (eqeqd ((eq _1 (cons x1 x2)) (nth x3 (append _1 l2)) (nth x3 (append (cons x1 x2) l2)) (nth x3 _1) (nth x3 (cons x1 x2)))
          (ntheqd ((eq _1 (cons x1 x2)) x3 x3 (append _1 l2) (append (cons x1 x2) l2))
            H7
            (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) l2 l2)
              H8
              (eqidd ((eq _1 (cons x1 x2)) l2))))
          (ntheqd ((eq _1 (cons x1 x2)) x3 x3 _1 (cons x1 x2))
            H7
            H8))))
    (ax_gen (x3 (im (lt x3 (len (d0))) (eq (nth x3 (append (d0) l2)) (nth x3 (d0)))))
      (sylbi ((lt x3 (len (d0))) (lt x3 (d0)) (eq (nth x3 (append (d0) l2)) (nth x3 (d0))))
        (ax_mp ((eq (len (d0)) (d0)) (iff (lt x3 (len (d0))) (lt x3 (d0))))
          (lteq2 (x3 (len (d0)) (d0)))
          (len0 ()))
        (ax_mp ((not (lt x3 (d0))) (im (lt x3 (d0)) (eq (nth x3 (append (d0) l2)) (nth x3 (d0)))))
          (absurd ((lt x3 (d0)) (eq (nth x3 (append (d0) l2)) (nth x3 (d0)))))
          (lt02 (x3)))))
    (sylbi ((al x3 (im (lt x3 (len x2)) (eq (nth x3 (append x2 l2)) (nth x3 x2)))) (al x4 (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2)))) (al x3 (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))))))
      (cbval (x3 x4 (im (lt x3 (len x2)) (eq (nth x3 (append x2 l2)) (nth x3 x2))) (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2))))
        (imeqd ((eq x3 x4) (lt x3 (len x2)) (lt x4 (len x2)) (eq (nth x3 (append x2 l2)) (nth x3 x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2)))
          (lteq1 (x3 x4 (len x2)))
          (eqeqd ((eq x3 x4) (nth x3 (append x2 l2)) (nth x4 (append x2 l2)) (nth x3 x2) (nth x4 x2))
            (ntheq1 (x3 x4 (append x2 l2)))
            (ntheq1 (x3 x4 x2)))))
      (iald (x3 (al x4 (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2)))) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2)))))
        (casesd ((al x4 (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2)))) (eq x3 (d0)) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2)))))
          (a1i ((al x4 (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2)))) (im (eq x3 (d0)) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))))))
            (a1d ((eq x3 (d0)) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))) (lt x3 (len (cons x1 x2))))
              (syl5eq ((eq x3 (d0)) (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 (append x2 l2))) (nth x3 (cons x1 x2)))
                H11
                (eqtr4d ((eq x3 (d0)) (nth x3 (cons x1 (append x2 l2))) (nth (d0) (cons x1 (append x2 l2))) (nth x3 (cons x1 x2)))
                  (ntheq1 (x3 (d0) (cons x1 (append x2 l2))))
                  (syl6eq ((eq x3 (d0)) (nth x3 (cons x1 x2)) (nth (d0) (cons x1 x2)) (nth (d0) (cons x1 (append x2 l2))))
                    (ax_mp ((eq (nth (d0) (cons x1 (append x2 l2))) (suc x1)) (eq (nth (d0) (cons x1 x2)) (nth (d0) (cons x1 (append x2 l2)))))
                      (ax_mp ((eq (nth (d0) (cons x1 x2)) (suc x1)) (im (eq (nth (d0) (cons x1 (append x2 l2))) (suc x1)) (eq (nth (d0) (cons x1 x2)) (nth (d0) (cons x1 (append x2 l2))))))
                        (eqtr4 ((nth (d0) (cons x1 x2)) (suc x1) (nth (d0) (cons x1 (append x2 l2)))))
                        (nthZ (x1 x2)))
                      (nthZ (x1 (append x2 l2))))
                    (ntheq1 (x3 (d0) (cons x1 x2))))))))
          (syl5bi ((al x4 (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2)))) (not (eq x3 (d0))) (ex x4 (eq x3 (suc x4))) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2)))))
            (:conv (iff (not (eq x3 (d0))) (ex x4 (eq x3 (suc x4))))
              (iff
                (:sym (:unfold ne (x3 (d0)) ()
                  (not (eq x3 (d0)))))
                (ex x4 (eq x3 (suc x4))))
              (exsuc (x4 x3)))
            (sylibr ((al x4 (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2)))) (al x4 (im (eq x3 (suc x4)) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2)))))) (im (ex x4 (eq x3 (suc x4))) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))))))
              (eexb (x4 (eq x3 (suc x4)) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))))))
              (alimi (x4 (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2))) (im (eq x3 (suc x4)) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))))))
                (com12 ((eq x3 (suc x4)) (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2))) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2)))))
                  (bi2d ((eq x3 (suc x4)) (im (lt x3 (len (cons x1 x2))) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2)))) (im (lt x4 (len x2)) (eq (nth x4 (append x2 l2)) (nth x4 x2))))
                    (imeqd ((eq x3 (suc x4)) (lt x3 (len (cons x1 x2))) (lt x4 (len x2)) (eq (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 x2))) (eq (nth x4 (append x2 l2)) (nth x4 x2)))
                      (syl5bb ((eq x3 (suc x4)) (lt x3 (len (cons x1 x2))) (lt x3 (suc (len x2))) (lt x4 (len x2)))
                        (ax_mp ((eq (len (cons x1 x2)) (suc (len x2))) (iff (lt x3 (len (cons x1 x2))) (lt x3 (suc (len x2)))))
                          (lteq2 (x3 (len (cons x1 x2)) (suc (len x2))))
                          (lenS (x1 x2)))
                        (syl6bbr ((eq x3 (suc x4)) (lt x3 (suc (len x2))) (lt (suc x4) (suc (len x2))) (lt x4 (len x2)))
                          (ltsuc (x4 (len x2)))
                          (lteq1 (x3 (suc x4) (suc (len x2))))))
                      (eqeqd ((eq x3 (suc x4)) (nth x3 (append (cons x1 x2) l2)) (nth x4 (append x2 l2)) (nth x3 (cons x1 x2)) (nth x4 x2))
                        (syl5eq ((eq x3 (suc x4)) (nth x3 (append (cons x1 x2) l2)) (nth x3 (cons x1 (append x2 l2))) (nth x4 (append x2 l2)))
                          H11
                          (syl6eq ((eq x3 (suc x4)) (nth x3 (cons x1 (append x2 l2))) (nth (suc x4) (cons x1 (append x2 l2))) (nth x4 (append x2 l2)))
                            (nthS (x4 x1 (append x2 l2)))
                            (ntheq1 (x3 (suc x4) (cons x1 (append x2 l2))))))
                        (syl6eq ((eq x3 (suc x4)) (nth x3 (cons x1 x2)) (nth (suc x4) (cons x1 x2)) (nth x4 x2))
                          (nthS (x4 x1 x2))
                          (ntheq1 (x3 (suc x4) (cons x1 x2))))))))))))))))))))))))))))

(local theorem appendnth2_ ((i nat ()) (l1 nat ()) (l2 nat ())) ()
  (eq (nth (add (len l1) i) (append l1 l2)) (nth i l2))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l1)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l1 (eq (nth (add (len _1) i) (append _1 l2)) (nth i l2)) (eq (nth (add (len (d0)) i) (append (d0) l2)) (nth i l2)) (eq (nth (add (len l1) i) (append l1 l2)) (nth i l2)) (eq (nth (add (len x2) i) (append x2 l2)) (nth i l2)) (eq (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth i l2)))
  (eqeqd ((eq _1 l1) (nth (add (len _1) i) (append _1 l2)) (nth (add (len l1) i) (append l1 l2)) (nth i l2) (nth i l2))
    (ntheqd ((eq _1 l1) (add (len _1) i) (add (len l1) i) (append _1 l2) (append l1 l2))
      (addeqd ((eq _1 l1) (len _1) (len l1) i i)
        (leneqd ((eq _1 l1) _1 l1)
          H1)
        (eqidd ((eq _1 l1) i)))
      (appendeqd ((eq _1 l1) _1 l1 l2 l2)
        H1
        (eqidd ((eq _1 l1) l2))))
    (eqidd ((eq _1 l1) (nth i l2))))
  (eqeqd ((eq _1 (d0)) (nth (add (len _1) i) (append _1 l2)) (nth (add (len (d0)) i) (append (d0) l2)) (nth i l2) (nth i l2))
    (ntheqd ((eq _1 (d0)) (add (len _1) i) (add (len (d0)) i) (append _1 l2) (append (d0) l2))
      (addeqd ((eq _1 (d0)) (len _1) (len (d0)) i i)
        (leneqd ((eq _1 (d0)) _1 (d0))
          H2)
        (eqidd ((eq _1 (d0)) i)))
      (appendeqd ((eq _1 (d0)) _1 (d0) l2 l2)
        H2
        (eqidd ((eq _1 (d0)) l2))))
    (eqidd ((eq _1 (d0)) (nth i l2))))
  (eqeqd ((eq _1 x2) (nth (add (len _1) i) (append _1 l2)) (nth (add (len x2) i) (append x2 l2)) (nth i l2) (nth i l2))
    (ntheqd ((eq _1 x2) (add (len _1) i) (add (len x2) i) (append _1 l2) (append x2 l2))
      (addeqd ((eq _1 x2) (len _1) (len x2) i i)
        (leneqd ((eq _1 x2) _1 x2)
          H3)
        (eqidd ((eq _1 x2) i)))
      (appendeqd ((eq _1 x2) _1 x2 l2 l2)
        H3
        (eqidd ((eq _1 x2) l2))))
    (eqidd ((eq _1 x2) (nth i l2))))
  (eqeqd ((eq _1 (cons x1 x2)) (nth (add (len _1) i) (append _1 l2)) (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth i l2) (nth i l2))
    (ntheqd ((eq _1 (cons x1 x2)) (add (len _1) i) (add (len (cons x1 x2)) i) (append _1 l2) (append (cons x1 x2) l2))
      (addeqd ((eq _1 (cons x1 x2)) (len _1) (len (cons x1 x2)) i i)
        (leneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
          H4)
        (eqidd ((eq _1 (cons x1 x2)) i)))
      (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) l2 l2)
        H4
        (eqidd ((eq _1 (cons x1 x2)) l2))))
    (eqidd ((eq _1 (cons x1 x2)) (nth i l2))))
  (ax_mp ((eq (append (d0) l2) l2) (eq (nth (add (len (d0)) i) (append (d0) l2)) (nth i l2)))
    (ax_mp ((eq (add (len (d0)) i) i) (im (eq (append (d0) l2) l2) (eq (nth (add (len (d0)) i) (append (d0) l2)) (nth i l2))))
      (ntheq ((add (len (d0)) i) i (append (d0) l2) l2))
      (ax_mp ((eq (add (d0) i) i) (eq (add (len (d0)) i) i))
        (ax_mp ((eq (add (len (d0)) i) (add (d0) i)) (im (eq (add (d0) i) i) (eq (add (len (d0)) i) i)))
          (eqtr ((add (len (d0)) i) (add (d0) i) i))
          (ax_mp ((eq (len (d0)) (d0)) (eq (add (len (d0)) i) (add (d0) i)))
            (addeq1 ((len (d0)) (d0) i))
            (len0 ())))
        (add01 (i))))
    (append0 (l2)))
  (syl5eq ((eq (nth (add (len x2) i) (append x2 l2)) (nth i l2)) (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth (add (len x2) i) (append x2 l2)) (nth i l2))
    (ax_mp ((eq (nth (suc (add (len x2) i)) (cons x1 (append x2 l2))) (nth (add (len x2) i) (append x2 l2))) (eq (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth (add (len x2) i) (append x2 l2))))
      (ax_mp ((eq (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth (suc (add (len x2) i)) (cons x1 (append x2 l2)))) (im (eq (nth (suc (add (len x2) i)) (cons x1 (append x2 l2))) (nth (add (len x2) i) (append x2 l2))) (eq (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth (add (len x2) i) (append x2 l2)))))
        (eqtr ((nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth (suc (add (len x2) i)) (cons x1 (append x2 l2))) (nth (add (len x2) i) (append x2 l2))))
        (ax_mp ((eq (append (cons x1 x2) l2) (cons x1 (append x2 l2))) (eq (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth (suc (add (len x2) i)) (cons x1 (append x2 l2)))))
          (ax_mp ((eq (add (len (cons x1 x2)) i) (suc (add (len x2) i))) (im (eq (append (cons x1 x2) l2) (cons x1 (append x2 l2))) (eq (nth (add (len (cons x1 x2)) i) (append (cons x1 x2) l2)) (nth (suc (add (len x2) i)) (cons x1 (append x2 l2))))))
            (ntheq ((add (len (cons x1 x2)) i) (suc (add (len x2) i)) (append (cons x1 x2) l2) (cons x1 (append x2 l2))))
            (ax_mp ((eq (add (suc (len x2)) i) (suc (add (len x2) i))) (eq (add (len (cons x1 x2)) i) (suc (add (len x2) i))))
              (ax_mp ((eq (add (len (cons x1 x2)) i) (add (suc (len x2)) i)) (im (eq (add (suc (len x2)) i) (suc (add (len x2) i))) (eq (add (len (cons x1 x2)) i) (suc (add (len x2) i)))))
                (eqtr ((add (len (cons x1 x2)) i) (add (suc (len x2)) i) (suc (add (len x2) i))))
                (ax_mp ((eq (len (cons x1 x2)) (suc (len x2))) (eq (add (len (cons x1 x2)) i) (add (suc (len x2)) i)))
                  (addeq1 ((len (cons x1 x2)) (suc (len x2)) i))
                  (lenS (x1 x2))))
              (addS1 ((len x2) i))))
          (appendS (x1 x2 l2))))
      (nthS ((add (len x2) i) x1 (append x2 l2))))
    (id ((eq (nth (add (len x2) i) (append x2 l2)) (nth i l2)))))))))))

(local theorem appendnth2 ((i nat ()) (l1 nat ()) (l2 nat ())) ()
  (im (le (len l1) i) (eq (nth i (append l1 l2)) (nth (sub i (len l1)) l2)))
()
(syl6eq ((le (len l1) i) (nth i (append l1 l2)) (nth (add (len l1) (sub i (len l1))) (append l1 l2)) (nth (sub i (len l1)) l2))
  (appendnth2_ ((sub i (len l1)) l1 l2))
  (ntheq1d ((le (len l1) i) i (add (len l1) (sub i (len l1))) (append l1 l2))
    (eqcomd ((le (len l1) i) (add (len l1) (sub i (len l1))) i)
      (pncan3 ((len l1) i))))))

(def repeat ((a nat ()) (n nat ())) (nat ())
((x nat))
(rec (d0) (lam x (cons a x)) n))

(local theorem repeateqd ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_ah (im _G (eq _a1 _a2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (repeat _a1 _n1) (repeat _a2 _n2)))
((x nat))
(:conv (im _G (eq (repeat _a1 _n1) (repeat _a2 _n2)))
  (im
    _G
    (eq
      (:unfold repeat (_a1 _n1) (x)
        (rec (d0) (lam x (cons _a1 x)) _n1))
      (:unfold repeat (_a2 _n2) (x)
        (rec (d0) (lam x (cons _a2 x)) _n2))))
  (receqd (_G (d0) (d0) (lam x (cons _a1 x)) (lam x (cons _a2 x)) _n1 _n2)
    (eqidd (_G (d0)))
    (lameqd (_G x (cons _a1 x) (cons _a2 x))
      (conseqd (_G _a1 _a2 x x)
        _ah
        (eqidd (_G x))))
    _nh)))

(local theorem repeateq ((_a1 nat ()) (_a2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _a1 _a2) (im (eq _n1 _n2) (eq (repeat _a1 _n1) (repeat _a2 _n2))))
()
(exp ((eq _a1 _a2) (eq _n1 _n2) (eq (repeat _a1 _n1) (repeat _a2 _n2)))
  (repeateqd ((an (eq _a1 _a2) (eq _n1 _n2)) _a1 _a2 _n1 _n2)
    (anl ((eq _a1 _a2) (eq _n1 _n2)))
    (anr ((eq _a1 _a2) (eq _n1 _n2))))))

(local theorem repeateq1d ((_G wff ()) (_a1 nat ()) (_a2 nat ()) (n nat ()))
  ((_h (im _G (eq _a1 _a2))))
  (im _G (eq (repeat _a1 n) (repeat _a2 n)))
()
(repeateqd (_G _a1 _a2 n n)
  _h
  (eqidd (_G n))))

(local theorem repeateq1 ((_a1 nat ()) (_a2 nat ()) (n nat ())) ()
  (im (eq _a1 _a2) (eq (repeat _a1 n) (repeat _a2 n)))
()
(repeateq1d ((eq _a1 _a2) _a1 _a2 n)
  (id ((eq _a1 _a2)))))

(local theorem repeateq2d ((_G wff ()) (a nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (repeat a _n1) (repeat a _n2)))
()
(repeateqd (_G a a _n1 _n2)
  (eqidd (_G a))
  _h))

(local theorem repeateq2 ((a nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (repeat a _n1) (repeat a _n2)))
()
(repeateq2d ((eq _n1 _n2) a _n1 _n2)
  (id ((eq _n1 _n2)))))

(theorem repeat0 ((a nat ())) ()
  (eq (repeat a (d0)) (d0))
((x1 nat))
(:conv (eq (repeat a (d0)) (d0))
  (eq
    (:unfold repeat (a (d0)) (x1)
      (rec (d0) (lam x1 (cons a x1)) (d0)))
    (d0))
  (rec0 ((d0) (lam x1 (cons a x1))))))

(theorem repeatS ((a nat ()) (n nat ())) ()
  (eq (repeat a (suc n)) (cons a (repeat a n)))
((x nat))
(ax_mp ((eq (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n))) (eq (repeat a (suc n)) (cons a (repeat a n))))
  (ax_mp ((eq (repeat a (suc n)) (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n))) (im (eq (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n))) (eq (repeat a (suc n)) (cons a (repeat a n)))))
    (eqtr ((repeat a (suc n)) (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n))))
    (:conv (eq (repeat a (suc n)) (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)))
      (eq
        (:unfold repeat (a (suc n)) (x)
          (rec (d0) (lam x (cons a x)) (suc n)))
        (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)))
      (recS ((d0) (lam x (cons a x)) n))))
  (:conv (eq (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n)))
    (eq
      (app
        (lam x (cons a x))
        (:sym (:unfold repeat (a n) (x)
          (rec (d0) (lam x (cons a x)) n))))
      (cons a (repeat a n)))
    (applame ((repeat a n) (cons a (repeat a n)) x (cons a x))
      (conseq2 (a x (repeat a n)))))))

(local theorem repeat1 ((a nat ())) ()
  (eq (repeat a (d1)) (cons a (d0)))
()
(ax_mp ((eq (cons a (repeat a (d0))) (cons a (d0))) (eq (repeat a (d1)) (cons a (d0))))
  (ax_mp ((eq (repeat a (d1)) (cons a (repeat a (d0)))) (im (eq (cons a (repeat a (d0))) (cons a (d0))) (eq (repeat a (d1)) (cons a (d0)))))
    (eqtr ((repeat a (d1)) (cons a (repeat a (d0))) (cons a (d0))))
    (:conv (eq (repeat a (d1)) (cons a (repeat a (d0))))
      (eq
        (repeat
          a
          (:unfold d1 () ()
            (suc (d0))))
        (cons a (repeat a (d0))))
      (repeatS (a (d0)))))
  (ax_mp ((eq (repeat a (d0)) (d0)) (eq (cons a (repeat a (d0))) (cons a (d0))))
    (conseq2 (a (repeat a (d0)) (d0)))
    (repeat0 (a)))))

(local theorem repeatlen ((a nat ()) (n nat ())) ()
  (eq (len (repeat a n)) n)
((_1 nat) (x1 nat))
(:let H1 (id ((eq _1 n)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x1)))
(:let H4 (id ((eq _1 (suc x1))))
(ind (_1 x1 n (eq (len (repeat a _1)) _1) (eq (len (repeat a (d0))) (d0)) (eq (len (repeat a n)) n) (eq (len (repeat a x1)) x1) (eq (len (repeat a (suc x1))) (suc x1)))
  (eqeqd ((eq _1 n) (len (repeat a _1)) (len (repeat a n)) _1 n)
    (leneqd ((eq _1 n) (repeat a _1) (repeat a n))
      (repeateqd ((eq _1 n) a a _1 n)
        (eqidd ((eq _1 n) a))
        H1))
    H1)
  (eqeqd ((eq _1 (d0)) (len (repeat a _1)) (len (repeat a (d0))) _1 (d0))
    (leneqd ((eq _1 (d0)) (repeat a _1) (repeat a (d0)))
      (repeateqd ((eq _1 (d0)) a a _1 (d0))
        (eqidd ((eq _1 (d0)) a))
        H2))
    H2)
  (eqeqd ((eq _1 x1) (len (repeat a _1)) (len (repeat a x1)) _1 x1)
    (leneqd ((eq _1 x1) (repeat a _1) (repeat a x1))
      (repeateqd ((eq _1 x1) a a _1 x1)
        (eqidd ((eq _1 x1) a))
        H3))
    H3)
  (eqeqd ((eq _1 (suc x1)) (len (repeat a _1)) (len (repeat a (suc x1))) _1 (suc x1))
    (leneqd ((eq _1 (suc x1)) (repeat a _1) (repeat a (suc x1)))
      (repeateqd ((eq _1 (suc x1)) a a _1 (suc x1))
        (eqidd ((eq _1 (suc x1)) a))
        H4))
    H4)
  (ax_mp ((eq (len (d0)) (d0)) (eq (len (repeat a (d0))) (d0)))
    (ax_mp ((eq (len (repeat a (d0))) (len (d0))) (im (eq (len (d0)) (d0)) (eq (len (repeat a (d0))) (d0))))
      (eqtr ((len (repeat a (d0))) (len (d0)) (d0)))
      (ax_mp ((eq (repeat a (d0)) (d0)) (eq (len (repeat a (d0))) (len (d0))))
        (leneq ((repeat a (d0)) (d0)))
        (repeat0 (a))))
    (len0 ()))
  (syl5eq ((eq (len (repeat a x1)) x1) (len (repeat a (suc x1))) (len (cons a (repeat a x1))) (suc x1))
    (ax_mp ((eq (repeat a (suc x1)) (cons a (repeat a x1))) (eq (len (repeat a (suc x1))) (len (cons a (repeat a x1)))))
      (leneq ((repeat a (suc x1)) (cons a (repeat a x1))))
      (repeatS (a x1)))
    (syl5eq ((eq (len (repeat a x1)) x1) (len (cons a (repeat a x1))) (suc (len (repeat a x1))) (suc x1))
      (lenS (a (repeat a x1)))
      (suceq ((len (repeat a x1)) x1))))))))))

(local theorem repeatadd ((a nat ()) (m nat ()) (n nat ())) ()
  (eq (repeat a (add m n)) (append (repeat a m) (repeat a n)))
((_1 nat) (x1 nat))
(:let H1 (eqidd ((eq _1 m) a))
(:let H2 (id ((eq _1 m)))
(:let H3 (eqidd ((eq _1 (d0)) a))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 x1) a))
(:let H6 (id ((eq _1 x1)))
(:let H7 (eqidd ((eq _1 (suc x1)) a))
(:let H8 (id ((eq _1 (suc x1))))
(ind (_1 x1 m (eq (repeat a (add _1 n)) (append (repeat a _1) (repeat a n))) (eq (repeat a (add (d0) n)) (append (repeat a (d0)) (repeat a n))) (eq (repeat a (add m n)) (append (repeat a m) (repeat a n))) (eq (repeat a (add x1 n)) (append (repeat a x1) (repeat a n))) (eq (repeat a (add (suc x1) n)) (append (repeat a (suc x1)) (repeat a n))))
  (eqeqd ((eq _1 m) (repeat a (add _1 n)) (repeat a (add m n)) (append (repeat a _1) (repeat a n)) (append (repeat a m) (repeat a n)))
    (repeateqd ((eq _1 m) a a (add _1 n) (add m n))
      H1
      (addeqd ((eq _1 m) _1 m n n)
        H2
        (eqidd ((eq _1 m) n))))
    (appendeqd ((eq _1 m) (repeat a _1) (repeat a m) (repeat a n) (repeat a n))
      (repeateqd ((eq _1 m) a a _1 m)
        H1
        H2)
      (eqidd ((eq _1 m) (repeat a n)))))
  (eqeqd ((eq _1 (d0)) (repeat a (add _1 n)) (repeat a (add (d0) n)) (append (repeat a _1) (repeat a n)) (append (repeat a (d0)) (repeat a n)))
    (repeateqd ((eq _1 (d0)) a a (add _1 n) (add (d0) n))
      H3
      (addeqd ((eq _1 (d0)) _1 (d0) n n)
        H4
        (eqidd ((eq _1 (d0)) n))))
    (appendeqd ((eq _1 (d0)) (repeat a _1) (repeat a (d0)) (repeat a n) (repeat a n))
      (repeateqd ((eq _1 (d0)) a a _1 (d0))
        H3
        H4)
      (eqidd ((eq _1 (d0)) (repeat a n)))))
  (eqeqd ((eq _1 x1) (repeat a (add _1 n)) (repeat a (add x1 n)) (append (repeat a _1) (repeat a n)) (append (repeat a x1) (repeat a n)))
    (repeateqd ((eq _1 x1) a a (add _1 n) (add x1 n))
      H5
      (addeqd ((eq _1 x1) _1 x1 n n)
        H6
        (eqidd ((eq _1 x1) n))))
    (appendeqd ((eq _1 x1) (repeat a _1) (repeat a x1) (repeat a n) (repeat a n))
      (repeateqd ((eq _1 x1) a a _1 x1)
        H5
        H6)
      (eqidd ((eq _1 x1) (repeat a n)))))
  (eqeqd ((eq _1 (suc x1)) (repeat a (add _1 n)) (repeat a (add (suc x1) n)) (append (repeat a _1) (repeat a n)) (append (repeat a (suc x1)) (repeat a n)))
    (repeateqd ((eq _1 (suc x1)) a a (add _1 n) (add (suc x1) n))
      H7
      (addeqd ((eq _1 (suc x1)) _1 (suc x1) n n)
        H8
        (eqidd ((eq _1 (suc x1)) n))))
    (appendeqd ((eq _1 (suc x1)) (repeat a _1) (repeat a (suc x1)) (repeat a n) (repeat a n))
      (repeateqd ((eq _1 (suc x1)) a a _1 (suc x1))
        H7
        H8)
      (eqidd ((eq _1 (suc x1)) (repeat a n)))))
  (ax_mp ((eq (append (repeat a (d0)) (repeat a n)) (repeat a n)) (eq (repeat a (add (d0) n)) (append (repeat a (d0)) (repeat a n))))
    (ax_mp ((eq (repeat a (add (d0) n)) (repeat a n)) (im (eq (append (repeat a (d0)) (repeat a n)) (repeat a n)) (eq (repeat a (add (d0) n)) (append (repeat a (d0)) (repeat a n)))))
      (eqtr4 ((repeat a (add (d0) n)) (repeat a n) (append (repeat a (d0)) (repeat a n))))
      (ax_mp ((eq (add (d0) n) n) (eq (repeat a (add (d0) n)) (repeat a n)))
        (repeateq2 (a (add (d0) n) n))
        (add01 (n))))
    (ax_mp ((eq (append (d0) (repeat a n)) (repeat a n)) (eq (append (repeat a (d0)) (repeat a n)) (repeat a n)))
      (ax_mp ((eq (append (repeat a (d0)) (repeat a n)) (append (d0) (repeat a n))) (im (eq (append (d0) (repeat a n)) (repeat a n)) (eq (append (repeat a (d0)) (repeat a n)) (repeat a n))))
        (eqtr ((append (repeat a (d0)) (repeat a n)) (append (d0) (repeat a n)) (repeat a n)))
        (ax_mp ((eq (repeat a (d0)) (d0)) (eq (append (repeat a (d0)) (repeat a n)) (append (d0) (repeat a n))))
          (appendeq1 ((repeat a (d0)) (d0) (repeat a n)))
          (repeat0 (a))))
      (append0 ((repeat a n)))))
  (eqtr4g ((eq (repeat a (add x1 n)) (append (repeat a x1) (repeat a n))) (repeat a (suc (add x1 n))) (append (cons a (repeat a x1)) (repeat a n)) (repeat a (add (suc x1) n)) (append (repeat a (suc x1)) (repeat a n)))
    (ax_mp ((eq (add (suc x1) n) (suc (add x1 n))) (eq (repeat a (add (suc x1) n)) (repeat a (suc (add x1 n)))))
      (repeateq2 (a (add (suc x1) n) (suc (add x1 n))))
      (addS1 (x1 n)))
    (ax_mp ((eq (repeat a (suc x1)) (cons a (repeat a x1))) (eq (append (repeat a (suc x1)) (repeat a n)) (append (cons a (repeat a x1)) (repeat a n))))
      (appendeq1 ((repeat a (suc x1)) (cons a (repeat a x1)) (repeat a n)))
      (repeatS (a x1)))
    (eqtr4g ((eq (repeat a (add x1 n)) (append (repeat a x1) (repeat a n))) (cons a (repeat a (add x1 n))) (cons a (append (repeat a x1) (repeat a n))) (repeat a (suc (add x1 n))) (append (cons a (repeat a x1)) (repeat a n)))
      (repeatS (a (add x1 n)))
      (appendS (a (repeat a x1) (repeat a n)))
      (conseq2 (a (repeat a (add x1 n)) (append (repeat a x1) (repeat a n))))))))))))))))

(local theorem repeatT ((A set ()) (a nat ()) (n nat ())) ()
  (im (el a A) (el (repeat a n) (List A)))
((_1 nat) (x1 nat))
(indd ((el a A) _1 x1 n (el (repeat a _1) (List A)) (el (repeat a (d0)) (List A)) (el (repeat a n) (List A)) (el (repeat a x1) (List A)) (el (repeat a (suc x1)) (List A)))
  (eleqd ((eq _1 n) (repeat a _1) (repeat a n) (List A) (List A))
    (repeateqd ((eq _1 n) a a _1 n)
      (eqidd ((eq _1 n) a))
      (id ((eq _1 n))))
    (eqsidd ((eq _1 n) (List A))))
  (eleqd ((eq _1 (d0)) (repeat a _1) (repeat a (d0)) (List A) (List A))
    (repeateqd ((eq _1 (d0)) a a _1 (d0))
      (eqidd ((eq _1 (d0)) a))
      (id ((eq _1 (d0)))))
    (eqsidd ((eq _1 (d0)) (List A))))
  (eleqd ((eq _1 x1) (repeat a _1) (repeat a x1) (List A) (List A))
    (repeateqd ((eq _1 x1) a a _1 x1)
      (eqidd ((eq _1 x1) a))
      (id ((eq _1 x1))))
    (eqsidd ((eq _1 x1) (List A))))
  (eleqd ((eq _1 (suc x1)) (repeat a _1) (repeat a (suc x1)) (List A) (List A))
    (repeateqd ((eq _1 (suc x1)) a a _1 (suc x1))
      (eqidd ((eq _1 (suc x1)) a))
      (id ((eq _1 (suc x1)))))
    (eqsidd ((eq _1 (suc x1)) (List A))))
  (a1i ((el a A) (el (repeat a (d0)) (List A)))
    (mpbir ((el (d0) (List A)) (el (repeat a (d0)) (List A)))
      (ax_mp ((eq (repeat a (d0)) (d0)) (iff (el (repeat a (d0)) (List A)) (el (d0) (List A))))
        (eleq1 ((List A) (repeat a (d0)) (d0)))
        (repeat0 (a)))
      (elList0 (A))))
  (ax_mp ((iff (el (repeat a (suc x1)) (List A)) (an (el a A) (el (repeat a x1) (List A)))) (im (an (el a A) (el (repeat a x1) (List A))) (el (repeat a (suc x1)) (List A))))
    (bi2 ((el (repeat a (suc x1)) (List A)) (an (el a A) (el (repeat a x1) (List A)))))
    (ax_mp ((iff (el (cons a (repeat a x1)) (List A)) (an (el a A) (el (repeat a x1) (List A)))) (iff (el (repeat a (suc x1)) (List A)) (an (el a A) (el (repeat a x1) (List A)))))
      (ax_mp ((iff (el (repeat a (suc x1)) (List A)) (el (cons a (repeat a x1)) (List A))) (im (iff (el (cons a (repeat a x1)) (List A)) (an (el a A) (el (repeat a x1) (List A)))) (iff (el (repeat a (suc x1)) (List A)) (an (el a A) (el (repeat a x1) (List A))))))
        (bitr ((el (repeat a (suc x1)) (List A)) (el (cons a (repeat a x1)) (List A)) (an (el a A) (el (repeat a x1) (List A)))))
        (ax_mp ((eq (repeat a (suc x1)) (cons a (repeat a x1))) (iff (el (repeat a (suc x1)) (List A)) (el (cons a (repeat a x1)) (List A))))
          (eleq1 ((List A) (repeat a (suc x1)) (cons a (repeat a x1))))
          (repeatS (a x1))))
      (elListS (A a (repeat a x1)))))))

(local theorem repeatArray ((A set ()) (a nat ()) (n nat ())) ()
  (im (el a A) (el (repeat a n) (Array A n)))
()
(sylibr ((el a A) (an (el (repeat a n) (List A)) (eq (len (repeat a n)) n)) (el (repeat a n) (Array A n)))
  (elArray (A (repeat a n) n))
  (iand ((el a A) (el (repeat a n) (List A)) (eq (len (repeat a n)) n))
    (repeatT (A a n))
    (a1i ((el a A) (eq (len (repeat a n)) n))
      (repeatlen (a n))))))

(local def grecaux1 ((K set ()) (x nat ()) (z nat ()) (n nat ())) (nat ())
((i nat) (u nat))
(recn z (slam u (lam i (app K (pr (sub x (suc u)) i)))) n))

(local theorem grecaux1eqd ((_G wff ()) (_K1 set ()) (_K2 set ()) (_x1 nat ()) (_x2 nat ()) (_z1 nat ()) (_z2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_Kh (im _G (eqs _K1 _K2)))
   (_xh (im _G (eq _x1 _x2)))
   (_zh (im _G (eq _z1 _z2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (grecaux1 _K1 _x1 _z1 _n1) (grecaux1 _K2 _x2 _z2 _n2)))
((i nat) (u nat))
(:conv (im _G (eq (grecaux1 _K1 _x1 _z1 _n1) (grecaux1 _K2 _x2 _z2 _n2)))
  (im
    _G
    (eq
      (:unfold grecaux1 (_K1 _x1 _z1 _n1) (i u)
        (recn _z1 (slam u (lam i (app _K1 (pr (sub _x1 (suc u)) i)))) _n1))
      (:unfold grecaux1 (_K2 _x2 _z2 _n2) (i u)
        (recn _z2 (slam u (lam i (app _K2 (pr (sub _x2 (suc u)) i)))) _n2))))
  (recneqd (_G _z1 _z2 (slam u (lam i (app _K1 (pr (sub _x1 (suc u)) i)))) (slam u (lam i (app _K2 (pr (sub _x2 (suc u)) i)))) _n1 _n2)
    _zh
    (slameqd (_G u (lam i (app _K1 (pr (sub _x1 (suc u)) i))) (lam i (app _K2 (pr (sub _x2 (suc u)) i))))
      (lameqd (_G i (app _K1 (pr (sub _x1 (suc u)) i)) (app _K2 (pr (sub _x2 (suc u)) i)))
        (appeqd (_G _K1 _K2 (pr (sub _x1 (suc u)) i) (pr (sub _x2 (suc u)) i))
          _Kh
          (preqd (_G (sub _x1 (suc u)) (sub _x2 (suc u)) i i)
            (subeqd (_G _x1 _x2 (suc u) (suc u))
              _xh
              (eqidd (_G (suc u))))
            (eqidd (_G i))))))
    _nh)))

(local theorem grecaux1eq ((_K1 set ()) (_K2 set ()) (_x1 nat ()) (_x2 nat ()) (_z1 nat ()) (_z2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _K1 _K2) (im (eq _x1 _x2) (im (eq _z1 _z2) (im (eq _n1 _n2) (eq (grecaux1 _K1 _x1 _z1 _n1) (grecaux1 _K2 _x2 _z2 _n2))))))
()
(exp ((eqs _K1 _K2) (eq _x1 _x2) (im (eq _z1 _z2) (im (eq _n1 _n2) (eq (grecaux1 _K1 _x1 _z1 _n1) (grecaux1 _K2 _x2 _z2 _n2)))))
  (exp ((an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2) (im (eq _n1 _n2) (eq (grecaux1 _K1 _x1 _z1 _n1) (grecaux1 _K2 _x2 _z2 _n2))))
    (exp ((an (an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2)) (eq _n1 _n2) (eq (grecaux1 _K1 _x1 _z1 _n1) (grecaux1 _K2 _x2 _z2 _n2)))
      (grecaux1eqd ((an (an (an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2)) (eq _n1 _n2)) _K1 _K2 _x1 _x2 _z1 _z2 _n1 _n2)
        (anwl ((an (an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2)) (eq _n1 _n2) (eqs _K1 _K2))
          (anwl ((an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2) (eqs _K1 _K2))
            (anl ((eqs _K1 _K2) (eq _x1 _x2)))))
        (anwl ((an (an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2)) (eq _n1 _n2) (eq _x1 _x2))
          (anwl ((an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2) (eq _x1 _x2))
            (anr ((eqs _K1 _K2) (eq _x1 _x2)))))
        (anwl ((an (an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2)) (eq _n1 _n2) (eq _z1 _z2))
          (anr ((an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2))))
        (anr ((an (an (eqs _K1 _K2) (eq _x1 _x2)) (eq _z1 _z2)) (eq _n1 _n2))))))))

(local theorem grecaux1eq1d ((_G wff ()) (_K1 set ()) (_K2 set ()) (x nat ()) (z nat ()) (n nat ()))
  ((_h (im _G (eqs _K1 _K2))))
  (im _G (eq (grecaux1 _K1 x z n) (grecaux1 _K2 x z n)))
()
(grecaux1eqd (_G _K1 _K2 x x z z n n)
  _h
  (eqidd (_G x))
  (eqidd (_G z))
  (eqidd (_G n))))

(local theorem grecaux1eq1 ((_K1 set ()) (_K2 set ()) (x nat ()) (z nat ()) (n nat ())) ()
  (im (eqs _K1 _K2) (eq (grecaux1 _K1 x z n) (grecaux1 _K2 x z n)))
()
(grecaux1eq1d ((eqs _K1 _K2) _K1 _K2 x z n)
  (id ((eqs _K1 _K2)))))

(local theorem grecaux1eq2d ((_G wff ()) (K set ()) (_x1 nat ()) (_x2 nat ()) (z nat ()) (n nat ()))
  ((_h (im _G (eq _x1 _x2))))
  (im _G (eq (grecaux1 K _x1 z n) (grecaux1 K _x2 z n)))
()
(grecaux1eqd (_G K K _x1 _x2 z z n n)
  (eqsidd (_G K))
  _h
  (eqidd (_G z))
  (eqidd (_G n))))

(local theorem grecaux1eq2 ((K set ()) (_x1 nat ()) (_x2 nat ()) (z nat ()) (n nat ())) ()
  (im (eq _x1 _x2) (eq (grecaux1 K _x1 z n) (grecaux1 K _x2 z n)))
()
(grecaux1eq2d ((eq _x1 _x2) K _x1 _x2 z n)
  (id ((eq _x1 _x2)))))

(local theorem grecaux1eq3d ((_G wff ()) (K set ()) (x nat ()) (_z1 nat ()) (_z2 nat ()) (n nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (grecaux1 K x _z1 n) (grecaux1 K x _z2 n)))
()
(grecaux1eqd (_G K K x x _z1 _z2 n n)
  (eqsidd (_G K))
  (eqidd (_G x))
  _h
  (eqidd (_G n))))

(local theorem grecaux1eq3 ((K set ()) (x nat ()) (_z1 nat ()) (_z2 nat ()) (n nat ())) ()
  (im (eq _z1 _z2) (eq (grecaux1 K x _z1 n) (grecaux1 K x _z2 n)))
()
(grecaux1eq3d ((eq _z1 _z2) K x _z1 _z2 n)
  (id ((eq _z1 _z2)))))

(local theorem grecaux1eq4d ((_G wff ()) (K set ()) (x nat ()) (z nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (grecaux1 K x z _n1) (grecaux1 K x z _n2)))
()
(grecaux1eqd (_G K K x x z z _n1 _n2)
  (eqsidd (_G K))
  (eqidd (_G x))
  (eqidd (_G z))
  _h))

(local theorem grecaux1eq4 ((K set ()) (x nat ()) (z nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (grecaux1 K x z _n1) (grecaux1 K x z _n2)))
()
(grecaux1eq4d ((eq _n1 _n2) K x z _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem grecaux10 ((K set ()) (k nat ()) (x nat ())) ()
  (eq (grecaux1 K x k (d0)) k)
((x1 nat) (x2 nat))
(:conv (eq (grecaux1 K x k (d0)) k)
  (eq
    (:unfold grecaux1 (K x k (d0)) (x2 x1)
      (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (d0)))
    k)
  (recn0 ((slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) k))))

(local theorem grecaux1S ((K set ()) (k nat ()) (n nat ()) (x nat ())) ()
  (eq (grecaux1 K x k (suc n)) (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
((x1 nat) (x2 nat))
(ax_mp ((eq (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))) (eq (grecaux1 K x k (suc n)) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))))
  (ax_mp ((eq (grecaux1 K x k (suc n)) (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n)))) (im (eq (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))) (eq (grecaux1 K x k (suc n)) (app K (pr (sub x (suc n)) (grecaux1 K x k n))))))
    (eqtr ((grecaux1 K x k (suc n)) (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))))
    (:conv (eq (grecaux1 K x k (suc n)) (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))))
      (eq
        (:unfold grecaux1 (K x k (suc n)) (x2 x1)
          (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (suc n)))
        (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))))
      (recnS ((slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n k))))
  (:conv (eq (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
    (eq
      (app
        (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2))))
        (pr
          n
          (:sym (:unfold grecaux1 (K x k n) (x2 x1)
            (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n)))))
      (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
    (appslame (n (grecaux1 K x k n) (app K (pr (sub x (suc n)) (grecaux1 K x k n))) x1 (lam x2 (app K (pr (sub x (suc x1)) x2))))
      (applamed ((eq x1 n) (grecaux1 K x k n) (app K (pr (sub x (suc n)) (grecaux1 K x k n))) x2 (app K (pr (sub x (suc x1)) x2)))
        (appeq2d ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) K (pr (sub x (suc x1)) x2) (pr (sub x (suc n)) (grecaux1 K x k n)))
          (preqd ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) (sub x (suc x1)) (sub x (suc n)) x2 (grecaux1 K x k n))
            (subeq2d ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) x (suc x1) (suc n))
              (suceqd ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) x1 n)
                (anl ((eq x1 n) (eq x2 (grecaux1 K x k n))))))
            (anr ((eq x1 n) (eq x2 (grecaux1 K x k n)))))))))))

(local theorem grecaux1Sx ((K set ()) (k nat ()) (n nat ()) (x nat ())) ()
  (eq (grecaux1 K (suc x) k (suc n)) (grecaux1 K x (app K (pr x k)) n))
((a nat) (b nat))
(:let H1 (eqsidd ((eq a n) K))
(:let H2 (id ((eq a n)))
(:let H3 (eqsidd ((eq a (d0)) K))
(:let H4 (id ((eq a (d0))))
(:let H5 (eqsidd ((eq a b) K))
(:let H6 (id ((eq a b)))
(:let H7 (eqsidd ((eq a (suc b)) K))
(:let H8 (id ((eq a (suc b))))
(ind (a b n (eq (grecaux1 K (suc x) k (suc a)) (grecaux1 K x (app K (pr x k)) a)) (eq (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) (d0))) (eq (grecaux1 K (suc x) k (suc n)) (grecaux1 K x (app K (pr x k)) n)) (eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (eq (grecaux1 K (suc x) k (suc (suc b))) (grecaux1 K x (app K (pr x k)) (suc b))))
  (eqeqd ((eq a n) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc n)) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) n))
    (grecaux1eqd ((eq a n) K K (suc x) (suc x) k k (suc a) (suc n))
      H1
      (eqidd ((eq a n) (suc x)))
      (eqidd ((eq a n) k))
      (suceqd ((eq a n) a n)
        H2))
    (grecaux1eqd ((eq a n) K K x x (app K (pr x k)) (app K (pr x k)) a n)
      H1
      (eqidd ((eq a n) x))
      (eqidd ((eq a n) (app K (pr x k))))
      H2))
  (eqeqd ((eq a (d0)) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) (d0)))
    (grecaux1eqd ((eq a (d0)) K K (suc x) (suc x) k k (suc a) (suc (d0)))
      H3
      (eqidd ((eq a (d0)) (suc x)))
      (eqidd ((eq a (d0)) k))
      (suceqd ((eq a (d0)) a (d0))
        H4))
    (grecaux1eqd ((eq a (d0)) K K x x (app K (pr x k)) (app K (pr x k)) a (d0))
      H3
      (eqidd ((eq a (d0)) x))
      (eqidd ((eq a (d0)) (app K (pr x k))))
      H4))
  (eqeqd ((eq a b) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) b))
    (grecaux1eqd ((eq a b) K K (suc x) (suc x) k k (suc a) (suc b))
      H5
      (eqidd ((eq a b) (suc x)))
      (eqidd ((eq a b) k))
      (suceqd ((eq a b) a b)
        H6))
    (grecaux1eqd ((eq a b) K K x x (app K (pr x k)) (app K (pr x k)) a b)
      H5
      (eqidd ((eq a b) x))
      (eqidd ((eq a b) (app K (pr x k))))
      H6))
  (eqeqd ((eq a (suc b)) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc (suc b))) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) (suc b)))
    (grecaux1eqd ((eq a (suc b)) K K (suc x) (suc x) k k (suc a) (suc (suc b)))
      H7
      (eqidd ((eq a (suc b)) (suc x)))
      (eqidd ((eq a (suc b)) k))
      (suceqd ((eq a (suc b)) a (suc b))
        H8))
    (grecaux1eqd ((eq a (suc b)) K K x x (app K (pr x k)) (app K (pr x k)) a (suc b))
      H7
      (eqidd ((eq a (suc b)) x))
      (eqidd ((eq a (suc b)) (app K (pr x k))))
      H8))
  (ax_mp ((eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))) (eq (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) (d0))))
    (ax_mp ((eq (grecaux1 K (suc x) k (suc (d0))) (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))))) (im (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))) (eq (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) (d0)))))
      (eqtr ((grecaux1 K (suc x) k (suc (d0))) (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))))
      (grecaux1S (K k (d0) (suc x))))
    (ax_mp ((eq (grecaux1 K x (app K (pr x k)) (d0)) (app K (pr x k))) (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))))
      (ax_mp ((eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (app K (pr x k))) (im (eq (grecaux1 K x (app K (pr x k)) (d0)) (app K (pr x k))) (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0)))))
        (eqtr4 ((app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (app K (pr x k)) (grecaux1 K x (app K (pr x k)) (d0))))
        (ax_mp ((eq (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k)) (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (app K (pr x k))))
          (appeq2 (K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k)))
          (ax_mp ((eq (grecaux1 K (suc x) k (d0)) k) (eq (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k)))
            (ax_mp ((eq (sub (suc x) (suc (d0))) x) (im (eq (grecaux1 K (suc x) k (d0)) k) (eq (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k))))
              (preq ((sub (suc x) (suc (d0))) x (grecaux1 K (suc x) k (d0)) k))
              (ax_mp ((eq (sub x (d0)) x) (eq (sub (suc x) (suc (d0))) x))
                (ax_mp ((eq (sub (suc x) (suc (d0))) (sub x (d0))) (im (eq (sub x (d0)) x) (eq (sub (suc x) (suc (d0))) x)))
                  (eqtr ((sub (suc x) (suc (d0))) (sub x (d0)) x))
                  (subSS (x (d0))))
                (sub02 (x))))
            (grecaux10 (K k (suc x))))))
      (grecaux10 (K (app K (pr x k)) x))))
  (eqtr4g ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (app K (pr (sub (suc x) (suc (suc b))) (grecaux1 K (suc x) k (suc b)))) (app K (pr (sub x (suc b)) (grecaux1 K x (app K (pr x k)) b))) (grecaux1 K (suc x) k (suc (suc b))) (grecaux1 K x (app K (pr x k)) (suc b)))
    (grecaux1S (K k (suc b) (suc x)))
    (grecaux1S (K (app K (pr x k)) b x))
    (appeq2d ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) K (pr (sub (suc x) (suc (suc b))) (grecaux1 K (suc x) k (suc b))) (pr (sub x (suc b)) (grecaux1 K x (app K (pr x k)) b)))
      (preqd ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (sub (suc x) (suc (suc b))) (sub x (suc b)) (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b))
        (a1i ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (eq (sub (suc x) (suc (suc b))) (sub x (suc b))))
          (subSS (x (suc b))))
        (id ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)))))))))))))))))

(local def grecaux2 ((z nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k nat ())) (nat ())
((i nat) (u nat))
(recn z (slam u (lam i (app F (pr u (pr (grecaux1 K x k (sub x (suc u))) i))))) n))

(local theorem grecaux2eqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_K1 set ()) (_K2 set ()) (_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ()) (_n1 nat ()) (_n2 nat ()) (_k1 nat ()) (_k2 nat ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Kh (im _G (eqs _K1 _K2)))
   (_Fh (im _G (eqs _F1 _F2)))
   (_xh (im _G (eq _x1 _x2)))
   (_nh (im _G (eq _n1 _n2)))
   (_kh (im _G (eq _k1 _k2))))
  (im _G (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2)))
((i nat) (u nat))
(:conv (im _G (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2)))
  (im
    _G
    (eq
      (:unfold grecaux2 (_z1 _K1 _F1 _x1 _n1 _k1) (i u)
        (recn _z1 (slam u (lam i (app _F1 (pr u (pr (grecaux1 _K1 _x1 _k1 (sub _x1 (suc u))) i))))) _n1))
      (:unfold grecaux2 (_z2 _K2 _F2 _x2 _n2 _k2) (i u)
        (recn _z2 (slam u (lam i (app _F2 (pr u (pr (grecaux1 _K2 _x2 _k2 (sub _x2 (suc u))) i))))) _n2))))
  (recneqd (_G _z1 _z2 (slam u (lam i (app _F1 (pr u (pr (grecaux1 _K1 _x1 _k1 (sub _x1 (suc u))) i))))) (slam u (lam i (app _F2 (pr u (pr (grecaux1 _K2 _x2 _k2 (sub _x2 (suc u))) i))))) _n1 _n2)
    _zh
    (slameqd (_G u (lam i (app _F1 (pr u (pr (grecaux1 _K1 _x1 _k1 (sub _x1 (suc u))) i)))) (lam i (app _F2 (pr u (pr (grecaux1 _K2 _x2 _k2 (sub _x2 (suc u))) i)))))
      (lameqd (_G i (app _F1 (pr u (pr (grecaux1 _K1 _x1 _k1 (sub _x1 (suc u))) i))) (app _F2 (pr u (pr (grecaux1 _K2 _x2 _k2 (sub _x2 (suc u))) i))))
        (appeqd (_G _F1 _F2 (pr u (pr (grecaux1 _K1 _x1 _k1 (sub _x1 (suc u))) i)) (pr u (pr (grecaux1 _K2 _x2 _k2 (sub _x2 (suc u))) i)))
          _Fh
          (preqd (_G u u (pr (grecaux1 _K1 _x1 _k1 (sub _x1 (suc u))) i) (pr (grecaux1 _K2 _x2 _k2 (sub _x2 (suc u))) i))
            (eqidd (_G u))
            (preqd (_G (grecaux1 _K1 _x1 _k1 (sub _x1 (suc u))) (grecaux1 _K2 _x2 _k2 (sub _x2 (suc u))) i i)
              (grecaux1eqd (_G _K1 _K2 _x1 _x2 _k1 _k2 (sub _x1 (suc u)) (sub _x2 (suc u)))
                _Kh
                _xh
                _kh
                (subeqd (_G _x1 _x2 (suc u) (suc u))
                  _xh
                  (eqidd (_G (suc u)))))
              (eqidd (_G i)))))))
    _nh)))

(local theorem grecaux2eq ((_z1 nat ()) (_z2 nat ()) (_K1 set ()) (_K2 set ()) (_F1 set ()) (_F2 set ()) (_x1 nat ()) (_x2 nat ()) (_n1 nat ()) (_n2 nat ()) (_k1 nat ()) (_k2 nat ())) ()
  (im (eq _z1 _z2) (im (eqs _K1 _K2) (im (eqs _F1 _F2) (im (eq _x1 _x2) (im (eq _n1 _n2) (im (eq _k1 _k2) (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2))))))))
()
(exp ((eq _z1 _z2) (eqs _K1 _K2) (im (eqs _F1 _F2) (im (eq _x1 _x2) (im (eq _n1 _n2) (im (eq _k1 _k2) (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2)))))))
  (exp ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2) (im (eq _x1 _x2) (im (eq _n1 _n2) (im (eq _k1 _k2) (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2))))))
    (exp ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2) (im (eq _n1 _n2) (im (eq _k1 _k2) (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2)))))
      (exp ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2) (im (eq _k1 _k2) (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2))))
        (exp ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2) (eq (grecaux2 _z1 _K1 _F1 _x1 _n1 _k1) (grecaux2 _z2 _K2 _F2 _x2 _n2 _k2)))
          (grecaux2eqd ((an (an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2)) _z1 _z2 _K1 _K2 _F1 _F2 _x1 _x2 _n1 _n2 _k1 _k2)
            (anwl ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2) (eq _z1 _z2))
              (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2) (eq _z1 _z2))
                (anwl ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2) (eq _z1 _z2))
                  (anwl ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2) (eq _z1 _z2))
                    (anl ((eq _z1 _z2) (eqs _K1 _K2)))))))
            (anwl ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2) (eqs _K1 _K2))
              (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2) (eqs _K1 _K2))
                (anwl ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2) (eqs _K1 _K2))
                  (anwl ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2) (eqs _K1 _K2))
                    (anr ((eq _z1 _z2) (eqs _K1 _K2)))))))
            (anwl ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2) (eqs _F1 _F2))
              (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2) (eqs _F1 _F2))
                (anwl ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2) (eqs _F1 _F2))
                  (anr ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2))))))
            (anwl ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2) (eq _x1 _x2))
              (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2) (eq _x1 _x2))
                (anr ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)))))
            (anwl ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2) (eq _n1 _n2))
              (anr ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2))))
            (anr ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _x1 _x2)) (eq _n1 _n2)) (eq _k1 _k2))))))))))

(local theorem grecaux2eq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (grecaux2 _z1 K F x n k) (grecaux2 _z2 K F x n k)))
()
(grecaux2eqd (_G _z1 _z2 K K F F x x n n k k)
  _h
  (eqsidd (_G K))
  (eqsidd (_G F))
  (eqidd (_G x))
  (eqidd (_G n))
  (eqidd (_G k))))

(local theorem grecaux2eq1 ((_z1 nat ()) (_z2 nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k nat ())) ()
  (im (eq _z1 _z2) (eq (grecaux2 _z1 K F x n k) (grecaux2 _z2 K F x n k)))
()
(grecaux2eq1d ((eq _z1 _z2) _z1 _z2 K F x n k)
  (id ((eq _z1 _z2)))))

(local theorem grecaux2eq2d ((_G wff ()) (z nat ()) (_K1 set ()) (_K2 set ()) (F set ()) (x nat ()) (n nat ()) (k nat ()))
  ((_h (im _G (eqs _K1 _K2))))
  (im _G (eq (grecaux2 z _K1 F x n k) (grecaux2 z _K2 F x n k)))
()
(grecaux2eqd (_G z z _K1 _K2 F F x x n n k k)
  (eqidd (_G z))
  _h
  (eqsidd (_G F))
  (eqidd (_G x))
  (eqidd (_G n))
  (eqidd (_G k))))

(local theorem grecaux2eq2 ((z nat ()) (_K1 set ()) (_K2 set ()) (F set ()) (x nat ()) (n nat ()) (k nat ())) ()
  (im (eqs _K1 _K2) (eq (grecaux2 z _K1 F x n k) (grecaux2 z _K2 F x n k)))
()
(grecaux2eq2d ((eqs _K1 _K2) z _K1 _K2 F x n k)
  (id ((eqs _K1 _K2)))))

(local theorem grecaux2eq3d ((_G wff ()) (z nat ()) (K set ()) (_F1 set ()) (_F2 set ()) (x nat ()) (n nat ()) (k nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eq (grecaux2 z K _F1 x n k) (grecaux2 z K _F2 x n k)))
()
(grecaux2eqd (_G z z K K _F1 _F2 x x n n k k)
  (eqidd (_G z))
  (eqsidd (_G K))
  _h
  (eqidd (_G x))
  (eqidd (_G n))
  (eqidd (_G k))))

(local theorem grecaux2eq3 ((z nat ()) (K set ()) (_F1 set ()) (_F2 set ()) (x nat ()) (n nat ()) (k nat ())) ()
  (im (eqs _F1 _F2) (eq (grecaux2 z K _F1 x n k) (grecaux2 z K _F2 x n k)))
()
(grecaux2eq3d ((eqs _F1 _F2) z K _F1 _F2 x n k)
  (id ((eqs _F1 _F2)))))

(local theorem grecaux2eq4d ((_G wff ()) (z nat ()) (K set ()) (F set ()) (_x1 nat ()) (_x2 nat ()) (n nat ()) (k nat ()))
  ((_h (im _G (eq _x1 _x2))))
  (im _G (eq (grecaux2 z K F _x1 n k) (grecaux2 z K F _x2 n k)))
()
(grecaux2eqd (_G z z K K F F _x1 _x2 n n k k)
  (eqidd (_G z))
  (eqsidd (_G K))
  (eqsidd (_G F))
  _h
  (eqidd (_G n))
  (eqidd (_G k))))

(local theorem grecaux2eq4 ((z nat ()) (K set ()) (F set ()) (_x1 nat ()) (_x2 nat ()) (n nat ()) (k nat ())) ()
  (im (eq _x1 _x2) (eq (grecaux2 z K F _x1 n k) (grecaux2 z K F _x2 n k)))
()
(grecaux2eq4d ((eq _x1 _x2) z K F _x1 _x2 n k)
  (id ((eq _x1 _x2)))))

(local theorem grecaux2eq5d ((_G wff ()) (z nat ()) (K set ()) (F set ()) (x nat ()) (_n1 nat ()) (_n2 nat ()) (k nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (grecaux2 z K F x _n1 k) (grecaux2 z K F x _n2 k)))
()
(grecaux2eqd (_G z z K K F F x x _n1 _n2 k k)
  (eqidd (_G z))
  (eqsidd (_G K))
  (eqsidd (_G F))
  (eqidd (_G x))
  _h
  (eqidd (_G k))))

(local theorem grecaux2eq5 ((z nat ()) (K set ()) (F set ()) (x nat ()) (_n1 nat ()) (_n2 nat ()) (k nat ())) ()
  (im (eq _n1 _n2) (eq (grecaux2 z K F x _n1 k) (grecaux2 z K F x _n2 k)))
()
(grecaux2eq5d ((eq _n1 _n2) z K F x _n1 _n2 k)
  (id ((eq _n1 _n2)))))

(local theorem grecaux2eq6d ((_G wff ()) (z nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (_k1 nat ()) (_k2 nat ()))
  ((_h (im _G (eq _k1 _k2))))
  (im _G (eq (grecaux2 z K F x n _k1) (grecaux2 z K F x n _k2)))
()
(grecaux2eqd (_G z z K K F F x x n n _k1 _k2)
  (eqidd (_G z))
  (eqsidd (_G K))
  (eqsidd (_G F))
  (eqidd (_G x))
  (eqidd (_G n))
  _h))

(local theorem grecaux2eq6 ((z nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (_k1 nat ()) (_k2 nat ())) ()
  (im (eq _k1 _k2) (eq (grecaux2 z K F x n _k1) (grecaux2 z K F x n _k2)))
()
(grecaux2eq6d ((eq _k1 _k2) z K F x n _k1 _k2)
  (id ((eq _k1 _k2)))))

(local theorem grecaux20 ((F set ()) (K set ()) (k nat ()) (x nat ()) (z nat ())) ()
  (eq (grecaux2 z K F x (d0) k) z)
((x1 nat) (x2 nat))
(:conv (eq (grecaux2 z K F x (d0) k) z)
  (eq
    (:unfold grecaux2 (z K F x (d0) k) (x2 x1)
      (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (d0)))
    z)
  (recn0 ((slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) z))))

(local theorem grecaux2S ((F set ()) (K set ()) (k nat ()) (n nat ()) (x nat ()) (z nat ())) ()
  (eq (grecaux2 z K F x (suc n) k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
((x1 nat) (x2 nat))
(:let H1 (anl ((eq x1 n) (eq x2 (grecaux2 z K F x n k))))
(ax_mp ((eq (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))) (eq (grecaux2 z K F x (suc n) k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))))
  (ax_mp ((eq (grecaux2 z K F x (suc n) k) (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n)))) (im (eq (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))) (eq (grecaux2 z K F x (suc n) k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))))
    (eqtr ((grecaux2 z K F x (suc n) k) (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))))
    (:conv (eq (grecaux2 z K F x (suc n) k) (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))))
      (eq
        (:unfold grecaux2 (z K F x (suc n) k) (x2 x1)
          (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (suc n)))
        (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))))
      (recnS ((slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n z))))
  (:conv (eq (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
    (eq
      (app
        (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2)))))
        (pr
          n
          (:sym (:unfold grecaux2 (z K F x n k) (x2 x1)
            (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n)))))
      (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
    (appslame (n (grecaux2 z K F x n k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))) x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2)))))
      (applamed ((eq x1 n) (grecaux2 z K F x n k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))) x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))
        (appeq2d ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2)) (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))
          (preqd ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) x1 n (pr (grecaux1 K x k (sub x (suc x1))) x2) (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))
            H1
            (preqd ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) (grecaux1 K x k (sub x (suc x1))) (grecaux1 K x k (sub x (suc n))) x2 (grecaux2 z K F x n k))
              (grecaux1eq4d ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) K x k (sub x (suc x1)) (sub x (suc n)))
                (subeq2d ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) x (suc x1) (suc n))
                  (suceqd ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) x1 n)
                    H1)))
              (anr ((eq x1 n) (eq x2 (grecaux2 z K F x n k)))))))))))))

(local theorem grecaux2Sx ((F set ()) (K set ()) (k nat ()) (n nat ()) (x nat ()) (z nat ())) ()
  (im (le n x) (eq (grecaux2 z K F (suc x) n k) (grecaux2 z K F x n (app K (pr x k)))))
((a nat) (b nat))
(:let H1 (eqidd ((eq a n) z))
(:let H2 (eqsidd ((eq a n) K))
(:let H3 (eqsidd ((eq a n) F))
(:let H4 (id ((eq a n)))
(:let H5 (eqidd ((eq a (d0)) z))
(:let H6 (eqsidd ((eq a (d0)) K))
(:let H7 (eqsidd ((eq a (d0)) F))
(:let H8 (id ((eq a (d0))))
(:let H9 (eqidd ((eq a b) z))
(:let H10 (eqsidd ((eq a b) K))
(:let H11 (eqsidd ((eq a b) F))
(:let H12 (id ((eq a b)))
(:let H13 (eqidd ((eq a (suc b)) z))
(:let H14 (eqsidd ((eq a (suc b)) K))
(:let H15 (eqsidd ((eq a (suc b)) F))
(:let H16 (id ((eq a (suc b))))
(indlt ((le n x) a b n (eq (grecaux2 z K F (suc x) a k) (grecaux2 z K F x a (app K (pr x k)))) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k)))) (eq (grecaux2 z K F (suc x) n k) (grecaux2 z K F x n (app K (pr x k)))) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k)))) (eq (grecaux2 z K F (suc x) (suc b) k) (grecaux2 z K F x (suc b) (app K (pr x k)))))
  (eqeqd ((eq a n) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) n k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x n (app K (pr x k))))
    (grecaux2eqd ((eq a n) z z K K F F (suc x) (suc x) a n k k)
      H1
      H2
      H3
      (eqidd ((eq a n) (suc x)))
      H4
      (eqidd ((eq a n) k)))
    (grecaux2eqd ((eq a n) z z K K F F x x a n (app K (pr x k)) (app K (pr x k)))
      H1
      H2
      H3
      (eqidd ((eq a n) x))
      H4
      (eqidd ((eq a n) (app K (pr x k))))))
  (eqeqd ((eq a (d0)) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x (d0) (app K (pr x k))))
    (grecaux2eqd ((eq a (d0)) z z K K F F (suc x) (suc x) a (d0) k k)
      H5
      H6
      H7
      (eqidd ((eq a (d0)) (suc x)))
      H8
      (eqidd ((eq a (d0)) k)))
    (grecaux2eqd ((eq a (d0)) z z K K F F x x a (d0) (app K (pr x k)) (app K (pr x k)))
      H5
      H6
      H7
      (eqidd ((eq a (d0)) x))
      H8
      (eqidd ((eq a (d0)) (app K (pr x k))))))
  (eqeqd ((eq a b) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) b k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x b (app K (pr x k))))
    (grecaux2eqd ((eq a b) z z K K F F (suc x) (suc x) a b k k)
      H9
      H10
      H11
      (eqidd ((eq a b) (suc x)))
      H12
      (eqidd ((eq a b) k)))
    (grecaux2eqd ((eq a b) z z K K F F x x a b (app K (pr x k)) (app K (pr x k)))
      H9
      H10
      H11
      (eqidd ((eq a b) x))
      H12
      (eqidd ((eq a b) (app K (pr x k))))))
  (eqeqd ((eq a (suc b)) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) (suc b) k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x (suc b) (app K (pr x k))))
    (grecaux2eqd ((eq a (suc b)) z z K K F F (suc x) (suc x) a (suc b) k k)
      H13
      H14
      H15
      (eqidd ((eq a (suc b)) (suc x)))
      H16
      (eqidd ((eq a (suc b)) k)))
    (grecaux2eqd ((eq a (suc b)) z z K K F F x x a (suc b) (app K (pr x k)) (app K (pr x k)))
      H13
      H14
      H15
      (eqidd ((eq a (suc b)) x))
      H16
      (eqidd ((eq a (suc b)) (app K (pr x k))))))
  (a1i ((le n x) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k)))))
    (ax_mp ((eq (grecaux2 z K F x (d0) (app K (pr x k))) z) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k)))))
      (ax_mp ((eq (grecaux2 z K F (suc x) (d0) k) z) (im (eq (grecaux2 z K F x (d0) (app K (pr x k))) z) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k))))))
        (eqtr4 ((grecaux2 z K F (suc x) (d0) k) z (grecaux2 z K F x (d0) (app K (pr x k)))))
        (grecaux20 (F K k (suc x) z)))
      (grecaux20 (F K (app K (pr x k)) x z))))
  (eqtr4g ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) (app F (pr b (pr (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux2 z K F (suc x) b k)))) (app F (pr b (pr (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F x b (app K (pr x k)))))) (grecaux2 z K F (suc x) (suc b) k) (grecaux2 z K F x (suc b) (app K (pr x k))))
    (grecaux2S (F K k b (suc x) z))
    (grecaux2S (F K (app K (pr x k)) b x z))
    (appeq2d ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) F (pr b (pr (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux2 z K F (suc x) b k))) (pr b (pr (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F x b (app K (pr x k))))))
      (preq2d ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) b (pr (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux2 z K F (suc x) b k)) (pr (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F x b (app K (pr x k)))))
        (preqd ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))
          (anwl ((an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k)))) (eq (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux1 K x (app K (pr x k)) (sub x (suc b)))))
            (syl6eq ((an (le n x) (lt b n)) (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux1 K (suc x) k (suc (sub x (suc b)))) (grecaux1 K x (app K (pr x k)) (sub x (suc b))))
              (grecaux1Sx (K k (sub x (suc b)) x))
              (grecaux1eq4d ((an (le n x) (lt b n)) K (suc x) k (sub (suc x) (suc b)) (suc (sub x (suc b))))
                (syl5eq ((an (le n x) (lt b n)) (sub (suc x) (suc b)) (sub x b) (suc (sub x (suc b))))
                  (subSS (x b))
                  (syl ((an (le n x) (lt b n)) (eq (add (suc (sub x (suc b))) b) x) (eq (sub x b) (suc (sub x (suc b)))))
                    (eqsub1 ((suc (sub x (suc b))) b x))
                    (syl5eq ((an (le n x) (lt b n)) (add (suc (sub x (suc b))) b) (add (sub x (suc b)) (suc b)) x)
                      (addSass ((sub x (suc b)) b))
                      (syl ((an (le n x) (lt b n)) (le (suc b) x) (eq (add (sub x (suc b)) (suc b)) x))
                        (npcan (x (suc b)))
                        (impcom ((lt b n) (le n x) (le (suc b) x))
                          (:conv (im (lt b n) (im (le n x) (le (suc b) x)))
                            (im
                              (:unfold lt (b n) ()
                                (le (suc b) n))
                              (im (le n x) (le (suc b) x)))
                            (letr ((suc b) n x)))))))))))
          (anr ((an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))))))))))))))))))))))))))

(local def grec ((z nat ()) (K set ()) (F set ()) (n nat ()) (k nat ())) (nat ())
()
(grecaux2 z K F n n k))

(local theorem greceqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_K1 set ()) (_K2 set ()) (_F1 set ()) (_F2 set ()) (_n1 nat ()) (_n2 nat ()) (_k1 nat ()) (_k2 nat ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Kh (im _G (eqs _K1 _K2)))
   (_Fh (im _G (eqs _F1 _F2)))
   (_nh (im _G (eq _n1 _n2)))
   (_kh (im _G (eq _k1 _k2))))
  (im _G (eq (grec _z1 _K1 _F1 _n1 _k1) (grec _z2 _K2 _F2 _n2 _k2)))
()
(:conv (im _G (eq (grec _z1 _K1 _F1 _n1 _k1) (grec _z2 _K2 _F2 _n2 _k2)))
  (im
    _G
    (eq
      (:unfold grec (_z1 _K1 _F1 _n1 _k1) ()
        (grecaux2 _z1 _K1 _F1 _n1 _n1 _k1))
      (:unfold grec (_z2 _K2 _F2 _n2 _k2) ()
        (grecaux2 _z2 _K2 _F2 _n2 _n2 _k2))))
  (grecaux2eqd (_G _z1 _z2 _K1 _K2 _F1 _F2 _n1 _n2 _n1 _n2 _k1 _k2)
    _zh
    _Kh
    _Fh
    _nh
    _nh
    _kh)))

(local theorem greceq ((_z1 nat ()) (_z2 nat ()) (_K1 set ()) (_K2 set ()) (_F1 set ()) (_F2 set ()) (_n1 nat ()) (_n2 nat ()) (_k1 nat ()) (_k2 nat ())) ()
  (im (eq _z1 _z2) (im (eqs _K1 _K2) (im (eqs _F1 _F2) (im (eq _n1 _n2) (im (eq _k1 _k2) (eq (grec _z1 _K1 _F1 _n1 _k1) (grec _z2 _K2 _F2 _n2 _k2)))))))
()
(exp ((eq _z1 _z2) (eqs _K1 _K2) (im (eqs _F1 _F2) (im (eq _n1 _n2) (im (eq _k1 _k2) (eq (grec _z1 _K1 _F1 _n1 _k1) (grec _z2 _K2 _F2 _n2 _k2))))))
  (exp ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2) (im (eq _n1 _n2) (im (eq _k1 _k2) (eq (grec _z1 _K1 _F1 _n1 _k1) (grec _z2 _K2 _F2 _n2 _k2)))))
    (exp ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2) (im (eq _k1 _k2) (eq (grec _z1 _K1 _F1 _n1 _k1) (grec _z2 _K2 _F2 _n2 _k2))))
      (exp ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2)) (eq _k1 _k2) (eq (grec _z1 _K1 _F1 _n1 _k1) (grec _z2 _K2 _F2 _n2 _k2)))
        (greceqd ((an (an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2)) (eq _k1 _k2)) _z1 _z2 _K1 _K2 _F1 _F2 _n1 _n2 _k1 _k2)
          (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2)) (eq _k1 _k2) (eq _z1 _z2))
            (anwl ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2) (eq _z1 _z2))
              (anwl ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2) (eq _z1 _z2))
                (anl ((eq _z1 _z2) (eqs _K1 _K2))))))
          (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2)) (eq _k1 _k2) (eqs _K1 _K2))
            (anwl ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2) (eqs _K1 _K2))
              (anwl ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2) (eqs _K1 _K2))
                (anr ((eq _z1 _z2) (eqs _K1 _K2))))))
          (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2)) (eq _k1 _k2) (eqs _F1 _F2))
            (anwl ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2) (eqs _F1 _F2))
              (anr ((an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)))))
          (anwl ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2)) (eq _k1 _k2) (eq _n1 _n2))
            (anr ((an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2))))
          (anr ((an (an (an (eq _z1 _z2) (eqs _K1 _K2)) (eqs _F1 _F2)) (eq _n1 _n2)) (eq _k1 _k2)))))))))

(local theorem greceq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (K set ()) (F set ()) (n nat ()) (k nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (grec _z1 K F n k) (grec _z2 K F n k)))
()
(greceqd (_G _z1 _z2 K K F F n n k k)
  _h
  (eqsidd (_G K))
  (eqsidd (_G F))
  (eqidd (_G n))
  (eqidd (_G k))))

(local theorem greceq1 ((_z1 nat ()) (_z2 nat ()) (K set ()) (F set ()) (n nat ()) (k nat ())) ()
  (im (eq _z1 _z2) (eq (grec _z1 K F n k) (grec _z2 K F n k)))
()
(greceq1d ((eq _z1 _z2) _z1 _z2 K F n k)
  (id ((eq _z1 _z2)))))

(local theorem greceq2d ((_G wff ()) (z nat ()) (_K1 set ()) (_K2 set ()) (F set ()) (n nat ()) (k nat ()))
  ((_h (im _G (eqs _K1 _K2))))
  (im _G (eq (grec z _K1 F n k) (grec z _K2 F n k)))
()
(greceqd (_G z z _K1 _K2 F F n n k k)
  (eqidd (_G z))
  _h
  (eqsidd (_G F))
  (eqidd (_G n))
  (eqidd (_G k))))

(local theorem greceq2 ((z nat ()) (_K1 set ()) (_K2 set ()) (F set ()) (n nat ()) (k nat ())) ()
  (im (eqs _K1 _K2) (eq (grec z _K1 F n k) (grec z _K2 F n k)))
()
(greceq2d ((eqs _K1 _K2) z _K1 _K2 F n k)
  (id ((eqs _K1 _K2)))))

(local theorem greceq3d ((_G wff ()) (z nat ()) (K set ()) (_F1 set ()) (_F2 set ()) (n nat ()) (k nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eq (grec z K _F1 n k) (grec z K _F2 n k)))
()
(greceqd (_G z z K K _F1 _F2 n n k k)
  (eqidd (_G z))
  (eqsidd (_G K))
  _h
  (eqidd (_G n))
  (eqidd (_G k))))

(local theorem greceq3 ((z nat ()) (K set ()) (_F1 set ()) (_F2 set ()) (n nat ()) (k nat ())) ()
  (im (eqs _F1 _F2) (eq (grec z K _F1 n k) (grec z K _F2 n k)))
()
(greceq3d ((eqs _F1 _F2) z K _F1 _F2 n k)
  (id ((eqs _F1 _F2)))))

(local theorem greceq4d ((_G wff ()) (z nat ()) (K set ()) (F set ()) (_n1 nat ()) (_n2 nat ()) (k nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (grec z K F _n1 k) (grec z K F _n2 k)))
()
(greceqd (_G z z K K F F _n1 _n2 k k)
  (eqidd (_G z))
  (eqsidd (_G K))
  (eqsidd (_G F))
  _h
  (eqidd (_G k))))

(local theorem greceq4 ((z nat ()) (K set ()) (F set ()) (_n1 nat ()) (_n2 nat ()) (k nat ())) ()
  (im (eq _n1 _n2) (eq (grec z K F _n1 k) (grec z K F _n2 k)))
()
(greceq4d ((eq _n1 _n2) z K F _n1 _n2 k)
  (id ((eq _n1 _n2)))))

(local theorem greceq5d ((_G wff ()) (z nat ()) (K set ()) (F set ()) (n nat ()) (_k1 nat ()) (_k2 nat ()))
  ((_h (im _G (eq _k1 _k2))))
  (im _G (eq (grec z K F n _k1) (grec z K F n _k2)))
()
(greceqd (_G z z K K F F n n _k1 _k2)
  (eqidd (_G z))
  (eqsidd (_G K))
  (eqsidd (_G F))
  (eqidd (_G n))
  _h))

(local theorem greceq5 ((z nat ()) (K set ()) (F set ()) (n nat ()) (_k1 nat ()) (_k2 nat ())) ()
  (im (eq _k1 _k2) (eq (grec z K F n _k1) (grec z K F n _k2)))
()
(greceq5d ((eq _k1 _k2) z K F n _k1 _k2)
  (id ((eq _k1 _k2)))))

(local theorem grec0 ((F set ()) (K set ()) (k nat ()) (z nat ())) ()
  (eq (grec z K F (d0) k) z)
()
(:conv (eq (grec z K F (d0) k) z)
  (eq
    (:unfold grec (z K F (d0) k) ()
      (grecaux2 z K F (d0) (d0) k))
    z)
  (grecaux20 (F K k (d0) z))))

(local theorem grecS ((F set ()) (K set ()) (k nat ()) (n nat ()) (z nat ())) ()
  (eq (grec z K F (suc n) k) (app F (pr n (pr k (grec z K F n (app K (pr n k)))))))
()
(ax_mp ((eq (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grec z K F n (app K (pr n k))))))) (eq (grec z K F (suc n) k) (app F (pr n (pr k (grec z K F n (app K (pr n k))))))))
  (ax_mp ((eq (grec z K F (suc n) k) (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))))) (im (eq (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grec z K F n (app K (pr n k))))))) (eq (grec z K F (suc n) k) (app F (pr n (pr k (grec z K F n (app K (pr n k)))))))))
    (eqtr ((grec z K F (suc n) k) (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grec z K F n (app K (pr n k))))))))
    (:conv (eq (grec z K F (suc n) k) (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))))
      (eq
        (:unfold grec (z K F (suc n) k) ()
          (grecaux2 z K F (suc n) (suc n) k))
        (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))))
      (grecaux2S (F K k n (suc n) z))))
  (ax_mp ((eq (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))) (pr n (pr k (grec z K F n (app K (pr n k)))))) (eq (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grec z K F n (app K (pr n k))))))))
    (appeq2 (F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))) (pr n (pr k (grec z K F n (app K (pr n k)))))))
    (ax_mp ((eq (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grec z K F n (app K (pr n k))))) (eq (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))) (pr n (pr k (grec z K F n (app K (pr n k)))))))
      (preq2 (n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grec z K F n (app K (pr n k))))))
      (ax_mp ((eq (grecaux2 z K F (suc n) n k) (grec z K F n (app K (pr n k)))) (eq (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grec z K F n (app K (pr n k))))))
        (ax_mp ((eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) k) (im (eq (grecaux2 z K F (suc n) n k) (grec z K F n (app K (pr n k)))) (eq (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grec z K F n (app K (pr n k)))))))
          (preq ((grecaux1 K (suc n) k (sub (suc n) (suc n))) k (grecaux2 z K F (suc n) n k) (grec z K F n (app K (pr n k)))))
          (ax_mp ((eq (grecaux1 K (suc n) k (d0)) k) (eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) k))
            (ax_mp ((eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux1 K (suc n) k (d0))) (im (eq (grecaux1 K (suc n) k (d0)) k) (eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) k)))
              (eqtr ((grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux1 K (suc n) k (d0)) k))
              (ax_mp ((eq (sub (suc n) (suc n)) (d0)) (eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux1 K (suc n) k (d0))))
                (grecaux1eq4 (K (suc n) k (sub (suc n) (suc n)) (d0)))
                (subid ((suc n)))))
            (grecaux10 (K k (suc n)))))
        (ax_mp ((le n n) (eq (grecaux2 z K F (suc n) n k) (grec z K F n (app K (pr n k)))))
          (:conv (im (le n n) (eq (grecaux2 z K F (suc n) n k) (grec z K F n (app K (pr n k)))))
            (im
              (le n n)
              (eq
                (grecaux2 z K F (suc n) n k)
                (:unfold grec (z K F n (app K (pr n k))) ()
                  (grecaux2 z K F n n (app K (pr n k))))))
            (grecaux2Sx (F K k n n z)))
          (leid (n))))))))

(local def rev ((l nat ())) (nat ())
((a nat) (ih nat) (z nat))
(lrec (d0) (slam a (slam z (lam ih (snoc ih a)))) l))

(local theorem reveqd ((_G wff ()) (_l1 nat ()) (_l2 nat ()))
  ((_lh (im _G (eq _l1 _l2))))
  (im _G (eq (rev _l1) (rev _l2)))
((a nat) (ih nat) (z nat))
(:conv (im _G (eq (rev _l1) (rev _l2)))
  (im
    _G
    (eq
      (:unfold rev (_l1) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (snoc ih a)))) _l1))
      (:unfold rev (_l2) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (snoc ih a)))) _l2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam ih (snoc ih a)))) (slam a (slam z (lam ih (snoc ih a)))) _l1 _l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam a (slam z (lam ih (snoc ih a))))))
    _lh)))

(local theorem reveq ((_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (eq (rev _l1) (rev _l2)))
()
(reveqd ((eq _l1 _l2) _l1 _l2)
  (id ((eq _l1 _l2)))))

(local theorem rev0 () ()
  (eq (rev (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (rev (d0)) (d0))
  (eq
    (:unfold rev ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1))))))))

(local theorem revS ((a nat ()) (l nat ())) ()
  (eq (rev (cons a l)) (snoc (rev l) a))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))) (snoc (rev l) a)) (eq (rev (cons a l)) (snoc (rev l) a)))
  (ax_mp ((eq (rev (cons a l)) (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l))))) (im (eq (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))) (snoc (rev l) a)) (eq (rev (cons a l)) (snoc (rev l) a))))
    (eqtr ((rev (cons a l)) (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))) (snoc (rev l) a)))
    (:conv (eq (rev (cons a l)) (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))))
      (eq
        (:unfold rev ((cons a l)) (x1 x3 x2)
          (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l)))
        (app
          (slam x1 (slam x2 (lam x3 (snoc x3 x1))))
          (pr
            a
            (pr
              l
              (:unfold rev (l) (x1 x3 x2)
                (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) l))))))
      (lrecS ((d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) a l))))
  (appslame (a (pr l (rev l)) (snoc (rev l) a) x1 (slam x2 (lam x3 (snoc x3 x1))))
    (appslamed ((eq x1 a) l (rev l) (snoc (rev l) a) x2 (lam x3 (snoc x3 x1)))
      (applamed ((an (eq x1 a) (eq x2 l)) (rev l) (snoc (rev l) a) x3 (snoc x3 x1))
        (snoceqd ((an (an (eq x1 a) (eq x2 l)) (eq x3 (rev l))) x3 (rev l) x1 a)
          (anr ((an (eq x1 a) (eq x2 l)) (eq x3 (rev l))))
          (anll ((eq x1 a) (eq x2 l) (eq x3 (rev l))))))))))

(local theorem revsn ((a nat ())) ()
  (eq (rev (cons a (d0))) (cons a (d0)))
()
(ax_mp ((eq (snoc (rev (d0)) a) (cons a (d0))) (eq (rev (cons a (d0))) (cons a (d0))))
  (ax_mp ((eq (rev (cons a (d0))) (snoc (rev (d0)) a)) (im (eq (snoc (rev (d0)) a) (cons a (d0))) (eq (rev (cons a (d0))) (cons a (d0)))))
    (eqtr ((rev (cons a (d0))) (snoc (rev (d0)) a) (cons a (d0))))
    (revS (a (d0))))
  (ax_mp ((eq (snoc (d0) a) (cons a (d0))) (eq (snoc (rev (d0)) a) (cons a (d0))))
    (ax_mp ((eq (snoc (rev (d0)) a) (snoc (d0) a)) (im (eq (snoc (d0) a) (cons a (d0))) (eq (snoc (rev (d0)) a) (cons a (d0)))))
      (eqtr ((snoc (rev (d0)) a) (snoc (d0) a) (cons a (d0))))
      (ax_mp ((eq (rev (d0)) (d0)) (eq (snoc (rev (d0)) a) (snoc (d0) a)))
        (snoceq1 ((rev (d0)) (d0) a))
        (rev0 ())))
    (snoc0 (a)))))

(local theorem revappend ((l1 nat ()) (l2 nat ())) ()
  (eq (rev (append l1 l2)) (append (rev l2) (rev l1)))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l1)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l1 (eq (rev (append _1 l2)) (append (rev l2) (rev _1))) (eq (rev (append (d0) l2)) (append (rev l2) (rev (d0)))) (eq (rev (append l1 l2)) (append (rev l2) (rev l1))) (eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (eq (rev (append (cons x1 x2) l2)) (append (rev l2) (rev (cons x1 x2)))))
  (eqeqd ((eq _1 l1) (rev (append _1 l2)) (rev (append l1 l2)) (append (rev l2) (rev _1)) (append (rev l2) (rev l1)))
    (reveqd ((eq _1 l1) (append _1 l2) (append l1 l2))
      (appendeqd ((eq _1 l1) _1 l1 l2 l2)
        H1
        (eqidd ((eq _1 l1) l2))))
    (appendeqd ((eq _1 l1) (rev l2) (rev l2) (rev _1) (rev l1))
      (eqidd ((eq _1 l1) (rev l2)))
      (reveqd ((eq _1 l1) _1 l1)
        H1)))
  (eqeqd ((eq _1 (d0)) (rev (append _1 l2)) (rev (append (d0) l2)) (append (rev l2) (rev _1)) (append (rev l2) (rev (d0))))
    (reveqd ((eq _1 (d0)) (append _1 l2) (append (d0) l2))
      (appendeqd ((eq _1 (d0)) _1 (d0) l2 l2)
        H2
        (eqidd ((eq _1 (d0)) l2))))
    (appendeqd ((eq _1 (d0)) (rev l2) (rev l2) (rev _1) (rev (d0)))
      (eqidd ((eq _1 (d0)) (rev l2)))
      (reveqd ((eq _1 (d0)) _1 (d0))
        H2)))
  (eqeqd ((eq _1 x2) (rev (append _1 l2)) (rev (append x2 l2)) (append (rev l2) (rev _1)) (append (rev l2) (rev x2)))
    (reveqd ((eq _1 x2) (append _1 l2) (append x2 l2))
      (appendeqd ((eq _1 x2) _1 x2 l2 l2)
        H3
        (eqidd ((eq _1 x2) l2))))
    (appendeqd ((eq _1 x2) (rev l2) (rev l2) (rev _1) (rev x2))
      (eqidd ((eq _1 x2) (rev l2)))
      (reveqd ((eq _1 x2) _1 x2)
        H3)))
  (eqeqd ((eq _1 (cons x1 x2)) (rev (append _1 l2)) (rev (append (cons x1 x2) l2)) (append (rev l2) (rev _1)) (append (rev l2) (rev (cons x1 x2))))
    (reveqd ((eq _1 (cons x1 x2)) (append _1 l2) (append (cons x1 x2) l2))
      (appendeqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2) l2 l2)
        H4
        (eqidd ((eq _1 (cons x1 x2)) l2))))
    (appendeqd ((eq _1 (cons x1 x2)) (rev l2) (rev l2) (rev _1) (rev (cons x1 x2)))
      (eqidd ((eq _1 (cons x1 x2)) (rev l2)))
      (reveqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
        H4)))
  (ax_mp ((eq (append (rev l2) (rev (d0))) (rev l2)) (eq (rev (append (d0) l2)) (append (rev l2) (rev (d0)))))
    (ax_mp ((eq (rev (append (d0) l2)) (rev l2)) (im (eq (append (rev l2) (rev (d0))) (rev l2)) (eq (rev (append (d0) l2)) (append (rev l2) (rev (d0))))))
      (eqtr4 ((rev (append (d0) l2)) (rev l2) (append (rev l2) (rev (d0)))))
      (ax_mp ((eq (append (d0) l2) l2) (eq (rev (append (d0) l2)) (rev l2)))
        (reveq ((append (d0) l2) l2))
        (append0 (l2))))
    (ax_mp ((eq (append (rev l2) (d0)) (rev l2)) (eq (append (rev l2) (rev (d0))) (rev l2)))
      (ax_mp ((eq (append (rev l2) (rev (d0))) (append (rev l2) (d0))) (im (eq (append (rev l2) (d0)) (rev l2)) (eq (append (rev l2) (rev (d0))) (rev l2))))
        (eqtr ((append (rev l2) (rev (d0))) (append (rev l2) (d0)) (rev l2)))
        (ax_mp ((eq (rev (d0)) (d0)) (eq (append (rev l2) (rev (d0))) (append (rev l2) (d0))))
          (appendeq2 ((rev l2) (rev (d0)) (d0)))
          (rev0 ())))
      (append02 ((rev l2)))))
  (syl5eq ((eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (rev (append (cons x1 x2) l2)) (snoc (rev (append x2 l2)) x1) (append (rev l2) (rev (cons x1 x2))))
    (ax_mp ((eq (rev (cons x1 (append x2 l2))) (snoc (rev (append x2 l2)) x1)) (eq (rev (append (cons x1 x2) l2)) (snoc (rev (append x2 l2)) x1)))
      (ax_mp ((eq (rev (append (cons x1 x2) l2)) (rev (cons x1 (append x2 l2)))) (im (eq (rev (cons x1 (append x2 l2))) (snoc (rev (append x2 l2)) x1)) (eq (rev (append (cons x1 x2) l2)) (snoc (rev (append x2 l2)) x1))))
        (eqtr ((rev (append (cons x1 x2) l2)) (rev (cons x1 (append x2 l2))) (snoc (rev (append x2 l2)) x1)))
        (ax_mp ((eq (append (cons x1 x2) l2) (cons x1 (append x2 l2))) (eq (rev (append (cons x1 x2) l2)) (rev (cons x1 (append x2 l2)))))
          (reveq ((append (cons x1 x2) l2) (cons x1 (append x2 l2))))
          (appendS (x1 x2 l2))))
      (revS (x1 (append x2 l2))))
    (syl6eqr ((eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (snoc (rev (append x2 l2)) x1) (append (rev l2) (snoc (rev x2) x1)) (append (rev l2) (rev (cons x1 x2))))
      (ax_mp ((eq (rev (cons x1 x2)) (snoc (rev x2) x1)) (eq (append (rev l2) (rev (cons x1 x2))) (append (rev l2) (snoc (rev x2) x1))))
        (appendeq2 ((rev l2) (rev (cons x1 x2)) (snoc (rev x2) x1)))
        (revS (x1 x2)))
      (syl6eqr ((eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (snoc (rev (append x2 l2)) x1) (snoc (append (rev l2) (rev x2)) x1) (append (rev l2) (snoc (rev x2) x1)))
        (appendsnoc (x1 (rev l2) (rev x2)))
        (snoceq1 ((rev (append x2 l2)) (append (rev l2) (rev x2)) x1)))))))))))

(local theorem revsnoc ((a nat ()) (l nat ())) ()
  (eq (rev (snoc l a)) (cons a (rev l)))
()
(ax_mp ((eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l))) (eq (rev (snoc l a)) (cons a (rev l))))
  (ax_mp ((eq (rev (snoc l a)) (append (rev (cons a (d0))) (rev l))) (im (eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l))) (eq (rev (snoc l a)) (cons a (rev l)))))
    (eqtr ((rev (snoc l a)) (append (rev (cons a (d0))) (rev l)) (cons a (rev l))))
    (:conv (eq (rev (snoc l a)) (append (rev (cons a (d0))) (rev l)))
      (eq
        (rev
          (:unfold snoc (l a) ()
            (append l (cons a (d0)))))
        (append (rev (cons a (d0))) (rev l)))
      (revappend (l (cons a (d0))))))
  (ax_mp ((eq (append (cons a (d0)) (rev l)) (cons a (rev l))) (eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l))))
    (ax_mp ((eq (append (rev (cons a (d0))) (rev l)) (append (cons a (d0)) (rev l))) (im (eq (append (cons a (d0)) (rev l)) (cons a (rev l))) (eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l)))))
      (eqtr ((append (rev (cons a (d0))) (rev l)) (append (cons a (d0)) (rev l)) (cons a (rev l))))
      (ax_mp ((eq (rev (cons a (d0))) (cons a (d0))) (eq (append (rev (cons a (d0))) (rev l)) (append (cons a (d0)) (rev l))))
        (appendeq1 ((rev (cons a (d0))) (cons a (d0)) (rev l)))
        (revsn (a))))
    (ax_mp ((eq (cons a (append (d0) (rev l))) (cons a (rev l))) (eq (append (cons a (d0)) (rev l)) (cons a (rev l))))
      (ax_mp ((eq (append (cons a (d0)) (rev l)) (cons a (append (d0) (rev l)))) (im (eq (cons a (append (d0) (rev l))) (cons a (rev l))) (eq (append (cons a (d0)) (rev l)) (cons a (rev l)))))
        (eqtr ((append (cons a (d0)) (rev l)) (cons a (append (d0) (rev l))) (cons a (rev l))))
        (appendS (a (d0) (rev l))))
      (ax_mp ((eq (append (d0) (rev l)) (rev l)) (eq (cons a (append (d0) (rev l))) (cons a (rev l))))
        (conseq2 (a (append (d0) (rev l)) (rev l)))
        (append0 ((rev l))))))))

(local theorem revrev ((l nat ())) ()
  (eq (rev (rev l)) l)
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(:let H5 (rev0 ())
(listind (_1 x1 x2 l (eq (rev (rev _1)) _1) (eq (rev (rev (d0))) (d0)) (eq (rev (rev l)) l) (eq (rev (rev x2)) x2) (eq (rev (rev (cons x1 x2))) (cons x1 x2)))
  (eqeqd ((eq _1 l) (rev (rev _1)) (rev (rev l)) _1 l)
    (reveqd ((eq _1 l) (rev _1) (rev l))
      (reveqd ((eq _1 l) _1 l)
        H1))
    H1)
  (eqeqd ((eq _1 (d0)) (rev (rev _1)) (rev (rev (d0))) _1 (d0))
    (reveqd ((eq _1 (d0)) (rev _1) (rev (d0)))
      (reveqd ((eq _1 (d0)) _1 (d0))
        H2))
    H2)
  (eqeqd ((eq _1 x2) (rev (rev _1)) (rev (rev x2)) _1 x2)
    (reveqd ((eq _1 x2) (rev _1) (rev x2))
      (reveqd ((eq _1 x2) _1 x2)
        H3))
    H3)
  (eqeqd ((eq _1 (cons x1 x2)) (rev (rev _1)) (rev (rev (cons x1 x2))) _1 (cons x1 x2))
    (reveqd ((eq _1 (cons x1 x2)) (rev _1) (rev (cons x1 x2)))
      (reveqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
        H4))
    H4)
  (ax_mp ((eq (rev (d0)) (d0)) (eq (rev (rev (d0))) (d0)))
    (ax_mp ((eq (rev (rev (d0))) (rev (d0))) (im (eq (rev (d0)) (d0)) (eq (rev (rev (d0))) (d0))))
      (eqtr ((rev (rev (d0))) (rev (d0)) (d0)))
      (ax_mp ((eq (rev (d0)) (d0)) (eq (rev (rev (d0))) (rev (d0))))
        (reveq ((rev (d0)) (d0)))
        H5))
    H5)
  (syl5eq ((eq (rev (rev x2)) x2) (rev (rev (cons x1 x2))) (rev (snoc (rev x2) x1)) (cons x1 x2))
    (ax_mp ((eq (rev (cons x1 x2)) (snoc (rev x2) x1)) (eq (rev (rev (cons x1 x2))) (rev (snoc (rev x2) x1))))
      (reveq ((rev (cons x1 x2)) (snoc (rev x2) x1)))
      (revS (x1 x2)))
    (syl5eq ((eq (rev (rev x2)) x2) (rev (snoc (rev x2) x1)) (cons x1 (rev (rev x2))) (cons x1 x2))
      (revsnoc (x1 (rev x2)))
      (conseq2 (x1 (rev (rev x2)) x2)))))))))))

(local theorem revinj ((l nat ()) (l2 nat ())) ()
  (iff (eq (rev l) (rev l2)) (eq l l2))
()
(ibii ((eq (rev l) (rev l2)) (eq l l2))
  (sylib ((eq (rev l) (rev l2)) (eq (rev (rev l)) (rev (rev l2))) (eq l l2))
    (ax_mp ((eq (rev (rev l2)) l2) (iff (eq (rev (rev l)) (rev (rev l2))) (eq l l2)))
      (ax_mp ((eq (rev (rev l)) l) (im (eq (rev (rev l2)) l2) (iff (eq (rev (rev l)) (rev (rev l2))) (eq l l2))))
        (eqeq ((rev (rev l)) l (rev (rev l2)) l2))
        (revrev (l)))
      (revrev (l2)))
    (reveq ((rev l) (rev l2))))
  (reveq (l l2))))

(local theorem reveq0 ((l nat ())) ()
  (iff (eq (rev l) (d0)) (eq l (d0)))
()
(ax_mp ((iff (eq (rev l) (rev (d0))) (eq l (d0))) (iff (eq (rev l) (d0)) (eq l (d0))))
  (ax_mp ((iff (eq (rev l) (rev (d0))) (eq (rev l) (d0))) (im (iff (eq (rev l) (rev (d0))) (eq l (d0))) (iff (eq (rev l) (d0)) (eq l (d0)))))
    (bitr3 ((eq (rev l) (d0)) (eq (rev l) (rev (d0))) (eq l (d0))))
    (ax_mp ((eq (rev (d0)) (d0)) (iff (eq (rev l) (rev (d0))) (eq (rev l) (d0))))
      (eqeq2 ((rev l) (rev (d0)) (d0)))
      (rev0 ())))
  (revinj (l (d0)))))

(local theorem exsnoc ((a nat) (l nat ()) (l2 nat)) ()
  (iff (ne l (d0)) (ex l2 (ex a (eq l (snoc l2 a)))))
((x1 nat))
(ax_mp ((iff (not (eq (rev l) (d0))) (ex l2 (ex a (eq l (snoc l2 a))))) (iff (ne l (d0)) (ex l2 (ex a (eq l (snoc l2 a))))))
  (ax_mp ((iff (not (eq (rev l) (d0))) (ne l (d0))) (im (iff (not (eq (rev l) (d0))) (ex l2 (ex a (eq l (snoc l2 a))))) (iff (ne l (d0)) (ex l2 (ex a (eq l (snoc l2 a)))))))
    (bitr3 ((ne l (d0)) (not (eq (rev l) (d0))) (ex l2 (ex a (eq l (snoc l2 a))))))
    (ax_mp ((iff (eq (rev l) (d0)) (eq l (d0))) (iff (not (eq (rev l) (d0))) (ne l (d0))))
      (:conv (im (iff (eq (rev l) (d0)) (eq l (d0))) (iff (not (eq (rev l) (d0))) (ne l (d0))))
        (im
          (iff (eq (rev l) (d0)) (eq l (d0)))
          (iff
            (not (eq (rev l) (d0)))
            (:unfold ne (l (d0)) ()
              (not (eq l (d0))))))
        (noteq ((eq (rev l) (d0)) (eq l (d0)))))
      (reveq0 (l))))
  (ax_mp ((iff (ex a (ex x1 (eq (rev l) (cons a x1)))) (ex l2 (ex a (eq l (snoc l2 a))))) (iff (not (eq (rev l) (d0))) (ex l2 (ex a (eq l (snoc l2 a))))))
    (ax_mp ((iff (not (eq (rev l) (d0))) (ex a (ex x1 (eq (rev l) (cons a x1))))) (im (iff (ex a (ex x1 (eq (rev l) (cons a x1)))) (ex l2 (ex a (eq l (snoc l2 a))))) (iff (not (eq (rev l) (d0))) (ex l2 (ex a (eq l (snoc l2 a)))))))
      (bitr ((not (eq (rev l) (d0))) (ex a (ex x1 (eq (rev l) (cons a x1)))) (ex l2 (ex a (eq l (snoc l2 a))))))
      (:conv (iff (not (eq (rev l) (d0))) (ex a (ex x1 (eq (rev l) (cons a x1)))))
        (iff
          (:sym (:unfold ne ((rev l) (d0)) ()
            (not (eq (rev l) (d0)))))
          (ex a (ex x1 (eq (rev l) (cons a x1)))))
        (excons ((rev l) a x1))))
    (biexexi (a l2 (ex x1 (eq (rev l) (cons a x1))) (eq l (snoc l2 a)))
      (ax_mp ((iff (ex x1 (eq l (snoc (rev x1) a))) (ex l2 (eq l (snoc l2 a)))) (iff (ex x1 (eq (rev l) (cons a x1))) (ex l2 (eq l (snoc l2 a)))))
        (ax_mp ((iff (ex x1 (eq (rev l) (cons a x1))) (ex x1 (eq l (snoc (rev x1) a)))) (im (iff (ex x1 (eq l (snoc (rev x1) a))) (ex l2 (eq l (snoc l2 a)))) (iff (ex x1 (eq (rev l) (cons a x1))) (ex l2 (eq l (snoc l2 a))))))
          (bitr ((ex x1 (eq (rev l) (cons a x1))) (ex x1 (eq l (snoc (rev x1) a))) (ex l2 (eq l (snoc l2 a)))))
          (exeqi (x1 (eq (rev l) (cons a x1)) (eq l (snoc (rev x1) a)))
            (ax_mp ((iff (eq (rev l) (rev (snoc (rev x1) a))) (eq l (snoc (rev x1) a))) (iff (eq (rev l) (cons a x1)) (eq l (snoc (rev x1) a))))
              (ax_mp ((iff (eq (rev l) (cons a x1)) (eq (rev l) (rev (snoc (rev x1) a)))) (im (iff (eq (rev l) (rev (snoc (rev x1) a))) (eq l (snoc (rev x1) a))) (iff (eq (rev l) (cons a x1)) (eq l (snoc (rev x1) a)))))
                (bitr ((eq (rev l) (cons a x1)) (eq (rev l) (rev (snoc (rev x1) a))) (eq l (snoc (rev x1) a))))
                (ax_mp ((eq (cons a x1) (rev (snoc (rev x1) a))) (iff (eq (rev l) (cons a x1)) (eq (rev l) (rev (snoc (rev x1) a)))))
                  (eqeq2 ((rev l) (cons a x1) (rev (snoc (rev x1) a))))
                  (ax_mp ((eq (rev (rev (cons a x1))) (rev (snoc (rev x1) a))) (eq (cons a x1) (rev (snoc (rev x1) a))))
                    (ax_mp ((eq (rev (rev (cons a x1))) (cons a x1)) (im (eq (rev (rev (cons a x1))) (rev (snoc (rev x1) a))) (eq (cons a x1) (rev (snoc (rev x1) a)))))
                      (eqtr3 ((cons a x1) (rev (rev (cons a x1))) (rev (snoc (rev x1) a))))
                      (revrev ((cons a x1))))
                    (ax_mp ((eq (rev (cons a x1)) (snoc (rev x1) a)) (eq (rev (rev (cons a x1))) (rev (snoc (rev x1) a))))
                      (reveq ((rev (cons a x1)) (snoc (rev x1) a)))
                      (revS (a x1))))))
              (revinj (l (snoc (rev x1) a))))))
        (ibii ((ex x1 (eq l (snoc (rev x1) a))) (ex l2 (eq l (snoc l2 a))))
          (eex (x1 (eq l (snoc (rev x1) a)) (ex l2 (eq l (snoc l2 a))))
            (iexe (l2 (rev x1) (eq l (snoc l2 a)) (eq l (snoc (rev x1) a)))
              (eqeq2d ((eq l2 (rev x1)) l (snoc l2 a) (snoc (rev x1) a))
                (snoceq1 (l2 (rev x1) a)))))
          (eex (l2 (eq l (snoc l2 a)) (ex x1 (eq l (snoc (rev x1) a))))
            (iexe (x1 (rev l2) (eq l (snoc (rev x1) a)) (eq l (snoc l2 a)))
              (eqeq2d ((eq x1 (rev l2)) l (snoc (rev x1) a) (snoc l2 a))
                (snoceq1d ((eq x1 (rev l2)) (rev x1) l2 a)
                  (syl6eq ((eq x1 (rev l2)) (rev x1) (rev (rev l2)) l2)
                    (revrev (l2))
                    (reveq (x1 (rev l2))))))))))))))

(local theorem snocinj ((a nat ()) (b nat ()) (l1 nat ()) (l2 nat ())) ()
  (iff (eq (snoc l1 a) (snoc l2 b)) (an (eq l1 l2) (eq a b)))
()
(ax_mp ((iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (an (eq l1 l2) (eq a b))) (iff (eq (snoc l1 a) (snoc l2 b)) (an (eq l1 l2) (eq a b))))
  (ax_mp ((iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (eq (snoc l1 a) (snoc l2 b))) (im (iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (an (eq l1 l2) (eq a b))) (iff (eq (snoc l1 a) (snoc l2 b)) (an (eq l1 l2) (eq a b)))))
    (bitr3 ((eq (snoc l1 a) (snoc l2 b)) (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (an (eq l1 l2) (eq a b))))
    (ax_mp ((eq (rev (cons b (rev l2))) (snoc l2 b)) (iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (eq (snoc l1 a) (snoc l2 b))))
      (ax_mp ((eq (rev (cons a (rev l1))) (snoc l1 a)) (im (eq (rev (cons b (rev l2))) (snoc l2 b)) (iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (eq (snoc l1 a) (snoc l2 b)))))
        (eqeq ((rev (cons a (rev l1))) (snoc l1 a) (rev (cons b (rev l2))) (snoc l2 b)))
        (ax_mp ((eq (snoc (rev (rev l1)) a) (snoc l1 a)) (eq (rev (cons a (rev l1))) (snoc l1 a)))
          (ax_mp ((eq (rev (cons a (rev l1))) (snoc (rev (rev l1)) a)) (im (eq (snoc (rev (rev l1)) a) (snoc l1 a)) (eq (rev (cons a (rev l1))) (snoc l1 a))))
            (eqtr ((rev (cons a (rev l1))) (snoc (rev (rev l1)) a) (snoc l1 a)))
            (revS (a (rev l1))))
          (ax_mp ((eq (rev (rev l1)) l1) (eq (snoc (rev (rev l1)) a) (snoc l1 a)))
            (snoceq1 ((rev (rev l1)) l1 a))
            (revrev (l1)))))
      (ax_mp ((eq (snoc (rev (rev l2)) b) (snoc l2 b)) (eq (rev (cons b (rev l2))) (snoc l2 b)))
        (ax_mp ((eq (rev (cons b (rev l2))) (snoc (rev (rev l2)) b)) (im (eq (snoc (rev (rev l2)) b) (snoc l2 b)) (eq (rev (cons b (rev l2))) (snoc l2 b))))
          (eqtr ((rev (cons b (rev l2))) (snoc (rev (rev l2)) b) (snoc l2 b)))
          (revS (b (rev l2))))
        (ax_mp ((eq (rev (rev l2)) l2) (eq (snoc (rev (rev l2)) b) (snoc l2 b)))
          (snoceq1 ((rev (rev l2)) l2 b))
          (revrev (l2))))))
  (ax_mp ((iff (eq (cons a (rev l1)) (cons b (rev l2))) (an (eq l1 l2) (eq a b))) (iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (an (eq l1 l2) (eq a b))))
    (ax_mp ((iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (eq (cons a (rev l1)) (cons b (rev l2)))) (im (iff (eq (cons a (rev l1)) (cons b (rev l2))) (an (eq l1 l2) (eq a b))) (iff (eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (an (eq l1 l2) (eq a b)))))
      (bitr ((eq (rev (cons a (rev l1))) (rev (cons b (rev l2)))) (eq (cons a (rev l1)) (cons b (rev l2))) (an (eq l1 l2) (eq a b))))
      (revinj ((cons a (rev l1)) (cons b (rev l2)))))
    (ax_mp ((iff (an (eq a b) (eq (rev l1) (rev l2))) (an (eq l1 l2) (eq a b))) (iff (eq (cons a (rev l1)) (cons b (rev l2))) (an (eq l1 l2) (eq a b))))
      (ax_mp ((iff (eq (cons a (rev l1)) (cons b (rev l2))) (an (eq a b) (eq (rev l1) (rev l2)))) (im (iff (an (eq a b) (eq (rev l1) (rev l2))) (an (eq l1 l2) (eq a b))) (iff (eq (cons a (rev l1)) (cons b (rev l2))) (an (eq l1 l2) (eq a b)))))
        (bitr ((eq (cons a (rev l1)) (cons b (rev l2))) (an (eq a b) (eq (rev l1) (rev l2))) (an (eq l1 l2) (eq a b))))
        (consinj (a b (rev l1) (rev l2))))
      (ax_mp ((iff (an (eq (rev l1) (rev l2)) (eq a b)) (an (eq l1 l2) (eq a b))) (iff (an (eq a b) (eq (rev l1) (rev l2))) (an (eq l1 l2) (eq a b))))
        (ax_mp ((iff (an (eq a b) (eq (rev l1) (rev l2))) (an (eq (rev l1) (rev l2)) (eq a b))) (im (iff (an (eq (rev l1) (rev l2)) (eq a b)) (an (eq l1 l2) (eq a b))) (iff (an (eq a b) (eq (rev l1) (rev l2))) (an (eq l1 l2) (eq a b)))))
          (bitr ((an (eq a b) (eq (rev l1) (rev l2))) (an (eq (rev l1) (rev l2)) (eq a b)) (an (eq l1 l2) (eq a b))))
          (ancomb ((eq a b) (eq (rev l1) (rev l2)))))
        (aneq1i ((eq (rev l1) (rev l2)) (eq l1 l2) (eq a b))
          (revinj (l1 l2))))))))

(local theorem appendcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (append a c) (append b c)) (eq a b))
()
(ax_mp ((iff (eq (rev (append a c)) (rev (append b c))) (eq a b)) (iff (eq (append a c) (append b c)) (eq a b)))
  (ax_mp ((iff (eq (rev (append a c)) (rev (append b c))) (eq (append a c) (append b c))) (im (iff (eq (rev (append a c)) (rev (append b c))) (eq a b)) (iff (eq (append a c) (append b c)) (eq a b))))
    (bitr3 ((eq (append a c) (append b c)) (eq (rev (append a c)) (rev (append b c))) (eq a b)))
    (revinj ((append a c) (append b c))))
  (ax_mp ((iff (eq (append (rev c) (rev a)) (append (rev c) (rev b))) (eq a b)) (iff (eq (rev (append a c)) (rev (append b c))) (eq a b)))
    (ax_mp ((iff (eq (rev (append a c)) (rev (append b c))) (eq (append (rev c) (rev a)) (append (rev c) (rev b)))) (im (iff (eq (append (rev c) (rev a)) (append (rev c) (rev b))) (eq a b)) (iff (eq (rev (append a c)) (rev (append b c))) (eq a b))))
      (bitr ((eq (rev (append a c)) (rev (append b c))) (eq (append (rev c) (rev a)) (append (rev c) (rev b))) (eq a b)))
      (ax_mp ((eq (rev (append b c)) (append (rev c) (rev b))) (iff (eq (rev (append a c)) (rev (append b c))) (eq (append (rev c) (rev a)) (append (rev c) (rev b)))))
        (ax_mp ((eq (rev (append a c)) (append (rev c) (rev a))) (im (eq (rev (append b c)) (append (rev c) (rev b))) (iff (eq (rev (append a c)) (rev (append b c))) (eq (append (rev c) (rev a)) (append (rev c) (rev b))))))
          (eqeq ((rev (append a c)) (append (rev c) (rev a)) (rev (append b c)) (append (rev c) (rev b))))
          (revappend (a c)))
        (revappend (b c))))
    (ax_mp ((iff (eq (rev a) (rev b)) (eq a b)) (iff (eq (append (rev c) (rev a)) (append (rev c) (rev b))) (eq a b)))
      (ax_mp ((iff (eq (append (rev c) (rev a)) (append (rev c) (rev b))) (eq (rev a) (rev b))) (im (iff (eq (rev a) (rev b)) (eq a b)) (iff (eq (append (rev c) (rev a)) (append (rev c) (rev b))) (eq a b))))
        (bitr ((eq (append (rev c) (rev a)) (append (rev c) (rev b))) (eq (rev a) (rev b)) (eq a b)))
        (appendcan1 ((rev c) (rev a) (rev b))))
      (revinj (a b))))))

(def map ((F set ()) (l nat ())) (nat ())
((a nat) (ih nat) (z nat))
(lrec (d0) (slam a (slam z (lam ih (cons (app F a) ih)))) l))

(local theorem mapeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_l1 nat ()) (_l2 nat ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_lh (im _G (eq _l1 _l2))))
  (im _G (eq (map _F1 _l1) (map _F2 _l2)))
((a nat) (ih nat) (z nat))
(:conv (im _G (eq (map _F1 _l1) (map _F2 _l2)))
  (im
    _G
    (eq
      (:unfold map (_F1 _l1) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (cons (app _F1 a) ih)))) _l1))
      (:unfold map (_F2 _l2) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (cons (app _F2 a) ih)))) _l2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam ih (cons (app _F1 a) ih)))) (slam a (slam z (lam ih (cons (app _F2 a) ih)))) _l1 _l2)
    (eqidd (_G (d0)))
    (slameqd (_G a (slam z (lam ih (cons (app _F1 a) ih))) (slam z (lam ih (cons (app _F2 a) ih))))
      (slameqd (_G z (lam ih (cons (app _F1 a) ih)) (lam ih (cons (app _F2 a) ih)))
        (lameqd (_G ih (cons (app _F1 a) ih) (cons (app _F2 a) ih))
          (conseqd (_G (app _F1 a) (app _F2 a) ih ih)
            (appeqd (_G _F1 _F2 a a)
              _Fh
              (eqidd (_G a)))
            (eqidd (_G ih))))))
    _lh)))

(local theorem mapeq ((_F1 set ()) (_F2 set ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eqs _F1 _F2) (im (eq _l1 _l2) (eq (map _F1 _l1) (map _F2 _l2))))
()
(exp ((eqs _F1 _F2) (eq _l1 _l2) (eq (map _F1 _l1) (map _F2 _l2)))
  (mapeqd ((an (eqs _F1 _F2) (eq _l1 _l2)) _F1 _F2 _l1 _l2)
    (anl ((eqs _F1 _F2) (eq _l1 _l2)))
    (anr ((eqs _F1 _F2) (eq _l1 _l2))))))

(local theorem mapeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (l nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eq (map _F1 l) (map _F2 l)))
()
(mapeqd (_G _F1 _F2 l l)
  _h
  (eqidd (_G l))))

(local theorem mapeq1 ((_F1 set ()) (_F2 set ()) (l nat ())) ()
  (im (eqs _F1 _F2) (eq (map _F1 l) (map _F2 l)))
()
(mapeq1d ((eqs _F1 _F2) _F1 _F2 l)
  (id ((eqs _F1 _F2)))))

(local theorem mapeq2d ((_G wff ()) (F set ()) (_l1 nat ()) (_l2 nat ()))
  ((_h (im _G (eq _l1 _l2))))
  (im _G (eq (map F _l1) (map F _l2)))
()
(mapeqd (_G F F _l1 _l2)
  (eqsidd (_G F))
  _h))

(local theorem mapeq2 ((F set ()) (_l1 nat ()) (_l2 nat ())) ()
  (im (eq _l1 _l2) (eq (map F _l1) (map F _l2)))
()
(mapeq2d ((eq _l1 _l2) F _l1 _l2)
  (id ((eq _l1 _l2)))))

(theorem map0 ((F set ())) ()
  (eq (map F (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (map F (d0)) (d0))
  (eq
    (:unfold map (F (d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3))))))))

(theorem mapS ((F set ()) (a nat ()) (l nat ())) ()
  (eq (map F (cons a l)) (cons (app F a) (map F l)))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))) (cons (app F a) (map F l))) (eq (map F (cons a l)) (cons (app F a) (map F l))))
  (ax_mp ((eq (map F (cons a l)) (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l))))) (im (eq (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))) (cons (app F a) (map F l))) (eq (map F (cons a l)) (cons (app F a) (map F l)))))
    (eqtr ((map F (cons a l)) (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))) (cons (app F a) (map F l))))
    (:conv (eq (map F (cons a l)) (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))))
      (eq
        (:unfold map (F (cons a l)) (x1 x3 x2)
          (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l)))
        (app
          (slam x1 (slam x2 (lam x3 (cons (app F x1) x3))))
          (pr
            a
            (pr
              l
              (:unfold map (F l) (x1 x3 x2)
                (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) l))))))
      (lrecS ((d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) a l))))
  (appslame (a (pr l (map F l)) (cons (app F a) (map F l)) x1 (slam x2 (lam x3 (cons (app F x1) x3))))
    (appslamed ((eq x1 a) l (map F l) (cons (app F a) (map F l)) x2 (lam x3 (cons (app F x1) x3)))
      (applamed ((an (eq x1 a) (eq x2 l)) (map F l) (cons (app F a) (map F l)) x3 (cons (app F x1) x3))
        (conseqd ((an (an (eq x1 a) (eq x2 l)) (eq x3 (map F l))) (app F x1) (app F a) x3 (map F l))
          (appeq2d ((an (an (eq x1 a) (eq x2 l)) (eq x3 (map F l))) F x1 a)
            (anll ((eq x1 a) (eq x2 l) (eq x3 (map F l)))))
          (anr ((an (eq x1 a) (eq x2 l)) (eq x3 (map F l))))))))))

(local theorem maplen ((F set ()) (l nat ())) ()
  (eq (len (map F l)) (len l))
((_1 nat) (x1 nat) (x2 nat))
(:let H1 (id ((eq _1 l)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l (eq (len (map F _1)) (len _1)) (eq (len (map F (d0))) (len (d0))) (eq (len (map F l)) (len l)) (eq (len (map F x2)) (len x2)) (eq (len (map F (cons x1 x2))) (len (cons x1 x2))))
  (eqeqd ((eq _1 l) (len (map F _1)) (len (map F l)) (len _1) (len l))
    (leneqd ((eq _1 l) (map F _1) (map F l))
      (mapeqd ((eq _1 l) F F _1 l)
        (eqsidd ((eq _1 l) F))
        H1))
    (leneqd ((eq _1 l) _1 l)
      H1))
  (eqeqd ((eq _1 (d0)) (len (map F _1)) (len (map F (d0))) (len _1) (len (d0)))
    (leneqd ((eq _1 (d0)) (map F _1) (map F (d0)))
      (mapeqd ((eq _1 (d0)) F F _1 (d0))
        (eqsidd ((eq _1 (d0)) F))
        H2))
    (leneqd ((eq _1 (d0)) _1 (d0))
      H2))
  (eqeqd ((eq _1 x2) (len (map F _1)) (len (map F x2)) (len _1) (len x2))
    (leneqd ((eq _1 x2) (map F _1) (map F x2))
      (mapeqd ((eq _1 x2) F F _1 x2)
        (eqsidd ((eq _1 x2) F))
        H3))
    (leneqd ((eq _1 x2) _1 x2)
      H3))
  (eqeqd ((eq _1 (cons x1 x2)) (len (map F _1)) (len (map F (cons x1 x2))) (len _1) (len (cons x1 x2)))
    (leneqd ((eq _1 (cons x1 x2)) (map F _1) (map F (cons x1 x2)))
      (mapeqd ((eq _1 (cons x1 x2)) F F _1 (cons x1 x2))
        (eqsidd ((eq _1 (cons x1 x2)) F))
        H4))
    (leneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
      H4))
  (ax_mp ((eq (map F (d0)) (d0)) (eq (len (map F (d0))) (len (d0))))
    (leneq ((map F (d0)) (d0)))
    (map0 (F)))
  (eqtr4g ((eq (len (map F x2)) (len x2)) (suc (len (map F x2))) (suc (len x2)) (len (map F (cons x1 x2))) (len (cons x1 x2)))
    (ax_mp ((eq (len (cons (app F x1) (map F x2))) (suc (len (map F x2)))) (eq (len (map F (cons x1 x2))) (suc (len (map F x2)))))
      (ax_mp ((eq (len (map F (cons x1 x2))) (len (cons (app F x1) (map F x2)))) (im (eq (len (cons (app F x1) (map F x2))) (suc (len (map F x2)))) (eq (len (map F (cons x1 x2))) (suc (len (map F x2))))))
        (eqtr ((len (map F (cons x1 x2))) (len (cons (app F x1) (map F x2))) (suc (len (map F x2)))))
        (ax_mp ((eq (map F (cons x1 x2)) (cons (app F x1) (map F x2))) (eq (len (map F (cons x1 x2))) (len (cons (app F x1) (map F x2)))))
          (leneq ((map F (cons x1 x2)) (cons (app F x1) (map F x2))))
          (mapS (F x1 x2))))
      (lenS ((app F x1) (map F x2))))
    (lenS (x1 x2))
    (suceq ((len (map F x2)) (len x2))))))))))

(local theorem mapnth ((F set ()) (a nat ()) (l nat ()) (n nat ())) ()
  (im (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a))))
((_1 nat) (x1 nat) (x2 nat) (x3 nat) (x4 nat))
(:let H1 (eqidd ((eq _1 l) x3))
(:let H2 (id ((eq _1 l)))
(:let H3 (eqidd ((eq _1 (d0)) x3))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (eqidd ((eq _1 x2) x3))
(:let H6 (id ((eq _1 x2)))
(:let H7 (eqidd ((eq _1 (cons x1 x2)) x3))
(:let H8 (id ((eq _1 (cons x1 x2))))
(:let H9 (mapS (F x1 x2))
(ax_mp ((al x3 (im (eq (nth x3 l) (suc a)) (eq (nth x3 (map F l)) (suc (app F a))))) (im (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a)))))
  (eale (x3 n (im (eq (nth x3 l) (suc a)) (eq (nth x3 (map F l)) (suc (app F a)))) (im (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a)))))
    (imeqd ((eq x3 n) (eq (nth x3 l) (suc a)) (eq (nth n l) (suc a)) (eq (nth x3 (map F l)) (suc (app F a))) (eq (nth n (map F l)) (suc (app F a))))
      (eqeq1d ((eq x3 n) (nth x3 l) (nth n l) (suc a))
        (ntheq1 (x3 n l)))
      (eqeq1d ((eq x3 n) (nth x3 (map F l)) (nth n (map F l)) (suc (app F a)))
        (ntheq1 (x3 n (map F l))))))
  (listind (_1 x1 x2 l (al x3 (im (eq (nth x3 _1) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a))))) (al x3 (im (eq (nth x3 (d0)) (suc a)) (eq (nth x3 (map F (d0))) (suc (app F a))))) (al x3 (im (eq (nth x3 l) (suc a)) (eq (nth x3 (map F l)) (suc (app F a))))) (al x3 (im (eq (nth x3 x2) (suc a)) (eq (nth x3 (map F x2)) (suc (app F a))))) (al x3 (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a))))))
    (aleqd ((eq _1 l) x3 (im (eq (nth x3 _1) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a)))) (im (eq (nth x3 l) (suc a)) (eq (nth x3 (map F l)) (suc (app F a)))))
      (imeqd ((eq _1 l) (eq (nth x3 _1) (suc a)) (eq (nth x3 l) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a))) (eq (nth x3 (map F l)) (suc (app F a))))
        (eqeqd ((eq _1 l) (nth x3 _1) (nth x3 l) (suc a) (suc a))
          (ntheqd ((eq _1 l) x3 x3 _1 l)
            H1
            H2)
          (eqidd ((eq _1 l) (suc a))))
        (eqeqd ((eq _1 l) (nth x3 (map F _1)) (nth x3 (map F l)) (suc (app F a)) (suc (app F a)))
          (ntheqd ((eq _1 l) x3 x3 (map F _1) (map F l))
            H1
            (mapeqd ((eq _1 l) F F _1 l)
              (eqsidd ((eq _1 l) F))
              H2))
          (eqidd ((eq _1 l) (suc (app F a)))))))
    (aleqd ((eq _1 (d0)) x3 (im (eq (nth x3 _1) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a)))) (im (eq (nth x3 (d0)) (suc a)) (eq (nth x3 (map F (d0))) (suc (app F a)))))
      (imeqd ((eq _1 (d0)) (eq (nth x3 _1) (suc a)) (eq (nth x3 (d0)) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a))) (eq (nth x3 (map F (d0))) (suc (app F a))))
        (eqeqd ((eq _1 (d0)) (nth x3 _1) (nth x3 (d0)) (suc a) (suc a))
          (ntheqd ((eq _1 (d0)) x3 x3 _1 (d0))
            H3
            H4)
          (eqidd ((eq _1 (d0)) (suc a))))
        (eqeqd ((eq _1 (d0)) (nth x3 (map F _1)) (nth x3 (map F (d0))) (suc (app F a)) (suc (app F a)))
          (ntheqd ((eq _1 (d0)) x3 x3 (map F _1) (map F (d0)))
            H3
            (mapeqd ((eq _1 (d0)) F F _1 (d0))
              (eqsidd ((eq _1 (d0)) F))
              H4))
          (eqidd ((eq _1 (d0)) (suc (app F a)))))))
    (aleqd ((eq _1 x2) x3 (im (eq (nth x3 _1) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a)))) (im (eq (nth x3 x2) (suc a)) (eq (nth x3 (map F x2)) (suc (app F a)))))
      (imeqd ((eq _1 x2) (eq (nth x3 _1) (suc a)) (eq (nth x3 x2) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a))) (eq (nth x3 (map F x2)) (suc (app F a))))
        (eqeqd ((eq _1 x2) (nth x3 _1) (nth x3 x2) (suc a) (suc a))
          (ntheqd ((eq _1 x2) x3 x3 _1 x2)
            H5
            H6)
          (eqidd ((eq _1 x2) (suc a))))
        (eqeqd ((eq _1 x2) (nth x3 (map F _1)) (nth x3 (map F x2)) (suc (app F a)) (suc (app F a)))
          (ntheqd ((eq _1 x2) x3 x3 (map F _1) (map F x2))
            H5
            (mapeqd ((eq _1 x2) F F _1 x2)
              (eqsidd ((eq _1 x2) F))
              H6))
          (eqidd ((eq _1 x2) (suc (app F a)))))))
    (aleqd ((eq _1 (cons x1 x2)) x3 (im (eq (nth x3 _1) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a)))) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
      (imeqd ((eq _1 (cons x1 x2)) (eq (nth x3 _1) (suc a)) (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F _1)) (suc (app F a))) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a))))
        (eqeqd ((eq _1 (cons x1 x2)) (nth x3 _1) (nth x3 (cons x1 x2)) (suc a) (suc a))
          (ntheqd ((eq _1 (cons x1 x2)) x3 x3 _1 (cons x1 x2))
            H7
            H8)
          (eqidd ((eq _1 (cons x1 x2)) (suc a))))
        (eqeqd ((eq _1 (cons x1 x2)) (nth x3 (map F _1)) (nth x3 (map F (cons x1 x2))) (suc (app F a)) (suc (app F a)))
          (ntheqd ((eq _1 (cons x1 x2)) x3 x3 (map F _1) (map F (cons x1 x2)))
            H7
            (mapeqd ((eq _1 (cons x1 x2)) F F _1 (cons x1 x2))
              (eqsidd ((eq _1 (cons x1 x2)) F))
              H8))
          (eqidd ((eq _1 (cons x1 x2)) (suc (app F a)))))))
    (ax_gen (x3 (im (eq (nth x3 (d0)) (suc a)) (eq (nth x3 (map F (d0))) (suc (app F a)))))
      (ax_mp ((not (eq (nth x3 (d0)) (suc a))) (im (eq (nth x3 (d0)) (suc a)) (eq (nth x3 (map F (d0))) (suc (app F a)))))
        (absurd ((eq (nth x3 (d0)) (suc a)) (eq (nth x3 (map F (d0))) (suc (app F a)))))
        (mt2 ((eq (nth x3 (d0)) (d0)) (eq (nth x3 (d0)) (suc a)))
          (:conv (im (eq (nth x3 (d0)) (suc a)) (not (eq (nth x3 (d0)) (d0))))
            (im
              (eq (nth x3 (d0)) (suc a))
              (:sym (:unfold ne ((nth x3 (d0)) (d0)) ()
                (not (eq (nth x3 (d0)) (d0))))))
            (sucne0 ((nth x3 (d0)) a)))
          (nth0 (x3)))))
    (sylbi ((al x3 (im (eq (nth x3 x2) (suc a)) (eq (nth x3 (map F x2)) (suc (app F a))))) (al x4 (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a))))) (al x3 (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a))))))
      (cbval (x3 x4 (im (eq (nth x3 x2) (suc a)) (eq (nth x3 (map F x2)) (suc (app F a)))) (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a)))))
        (imeqd ((eq x3 x4) (eq (nth x3 x2) (suc a)) (eq (nth x4 x2) (suc a)) (eq (nth x3 (map F x2)) (suc (app F a))) (eq (nth x4 (map F x2)) (suc (app F a))))
          (eqeq1d ((eq x3 x4) (nth x3 x2) (nth x4 x2) (suc a))
            (ntheq1 (x3 x4 x2)))
          (eqeq1d ((eq x3 x4) (nth x3 (map F x2)) (nth x4 (map F x2)) (suc (app F a)))
            (ntheq1 (x3 x4 (map F x2))))))
      (iald (x3 (al x4 (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a))))) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
        (casesd ((al x4 (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a))))) (eq x3 (d0)) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
          (a1i ((al x4 (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a))))) (im (eq x3 (d0)) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a))))))
            (mpbiri ((eq x3 (d0)) (im (eq (suc x1) (suc a)) (eq (nth (d0) (cons (app F x1) (map F x2))) (suc (app F a)))) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
              (syl5eq ((eq (suc x1) (suc a)) (nth (d0) (cons (app F x1) (map F x2))) (suc (app F x1)) (suc (app F a)))
                (nthZ ((app F x1) (map F x2)))
                (sylbi ((eq (suc x1) (suc a)) (eq x1 a) (eq (suc (app F x1)) (suc (app F a))))
                  (peano2 (x1 a))
                  (suceqd ((eq x1 a) (app F x1) (app F a))
                    (appeq2 (F x1 a)))))
              (imeqd ((eq x3 (d0)) (eq (nth x3 (cons x1 x2)) (suc a)) (eq (suc x1) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a))) (eq (nth (d0) (cons (app F x1) (map F x2))) (suc (app F a))))
                (eqeq1d ((eq x3 (d0)) (nth x3 (cons x1 x2)) (suc x1) (suc a))
                  (syl6eq ((eq x3 (d0)) (nth x3 (cons x1 x2)) (nth (d0) (cons x1 x2)) (suc x1))
                    (nthZ (x1 x2))
                    (ntheq1 (x3 (d0) (cons x1 x2)))))
                (eqeq1d ((eq x3 (d0)) (nth x3 (map F (cons x1 x2))) (nth (d0) (cons (app F x1) (map F x2))) (suc (app F a)))
                  (syl6eq ((eq x3 (d0)) (nth x3 (map F (cons x1 x2))) (nth (d0) (map F (cons x1 x2))) (nth (d0) (cons (app F x1) (map F x2))))
                    (ax_mp ((eq (map F (cons x1 x2)) (cons (app F x1) (map F x2))) (eq (nth (d0) (map F (cons x1 x2))) (nth (d0) (cons (app F x1) (map F x2)))))
                      (ntheq2 ((d0) (map F (cons x1 x2)) (cons (app F x1) (map F x2))))
                      H9)
                    (ntheq1 (x3 (d0) (map F (cons x1 x2)))))))))
          (syl5bi ((al x4 (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a))))) (not (eq x3 (d0))) (ex x4 (eq x3 (suc x4))) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
            (:conv (iff (not (eq x3 (d0))) (ex x4 (eq x3 (suc x4))))
              (iff
                (:sym (:unfold ne (x3 (d0)) ()
                  (not (eq x3 (d0)))))
                (ex x4 (eq x3 (suc x4))))
              (exsuc (x4 x3)))
            (syl6 ((al x4 (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a))))) (ex x4 (eq x3 (suc x4))) (ex x4 (an (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a)))) (eq x3 (suc x4)))) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
              (eex (x4 (an (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a)))) (eq x3 (suc x4))) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
                (rsyl ((an (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a)))) (eq x3 (suc x4))) (an (eq x3 (suc x4)) (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a))))) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))))
                  (ancom ((im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a)))) (eq x3 (suc x4))))
                  (bi2a ((eq x3 (suc x4)) (im (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a)))) (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a)))))
                    (imeqd ((eq x3 (suc x4)) (eq (nth x3 (cons x1 x2)) (suc a)) (eq (nth x4 x2) (suc a)) (eq (nth x3 (map F (cons x1 x2))) (suc (app F a))) (eq (nth x4 (map F x2)) (suc (app F a))))
                      (eqeq1d ((eq x3 (suc x4)) (nth x3 (cons x1 x2)) (nth x4 x2) (suc a))
                        (syl6eq ((eq x3 (suc x4)) (nth x3 (cons x1 x2)) (nth (suc x4) (cons x1 x2)) (nth x4 x2))
                          (nthS (x4 x1 x2))
                          (ntheq1 (x3 (suc x4) (cons x1 x2)))))
                      (eqeq1d ((eq x3 (suc x4)) (nth x3 (map F (cons x1 x2))) (nth x4 (map F x2)) (suc (app F a)))
                        (syl5eq ((eq x3 (suc x4)) (nth x3 (map F (cons x1 x2))) (nth x3 (cons (app F x1) (map F x2))) (nth x4 (map F x2)))
                          (ax_mp ((eq (map F (cons x1 x2)) (cons (app F x1) (map F x2))) (eq (nth x3 (map F (cons x1 x2))) (nth x3 (cons (app F x1) (map F x2)))))
                            (ntheq2 (x3 (map F (cons x1 x2)) (cons (app F x1) (map F x2))))
                            H9)
                          (syl6eq ((eq x3 (suc x4)) (nth x3 (cons (app F x1) (map F x2))) (nth (suc x4) (cons (app F x1) (map F x2))) (nth x4 (map F x2)))
                            (nthS (x4 (app F x1) (map F x2)))
                            (ntheq1 (x3 (suc x4) (cons (app F x1) (map F x2)))))))))))
              (alexan (x4 (im (eq (nth x4 x2) (suc a)) (eq (nth x4 (map F x2)) (suc (app F a)))) (eq x3 (suc x4)))))))))))))))))))))

(local theorem mapnthb ((F set ()) (a nat) (b nat ()) (l nat ()) (n nat ())) ()
  (iff (eq (nth n (map F l)) (suc b)) (ex a (an (eq (nth n l) (suc a)) (eq b (app F a)))))
()
(:let H1 (mapnth (F a l n))
(ibii ((eq (nth n (map F l)) (suc b)) (ex a (an (eq (nth n l) (suc a)) (eq b (app F a)))))
  (mpd ((eq (nth n (map F l)) (suc b)) (ex a (eq (nth n l) (suc a))) (ex a (an (eq (nth n l) (suc a)) (eq b (app F a)))))
    (sylib ((eq (nth n (map F l)) (suc b)) (ne (nth n l) (d0)) (ex a (eq (nth n l) (suc a))))
      (exsuc (a (nth n l)))
      (sylibr ((eq (nth n (map F l)) (suc b)) (lt n (len l)) (ne (nth n l) (d0)))
        (nthne0 (l n))
        (sylib ((eq (nth n (map F l)) (suc b)) (lt n (len (map F l))) (lt n (len l)))
          (ax_mp ((eq (len (map F l)) (len l)) (iff (lt n (len (map F l))) (lt n (len l))))
            (lteq2 (n (len (map F l)) (len l)))
            (maplen (F l)))
          (sylib ((eq (nth n (map F l)) (suc b)) (ne (nth n (map F l)) (d0)) (lt n (len (map F l))))
            (nthne0 ((map F l) n))
            (sucne0 ((nth n (map F l)) b))))))
    (eximd (a (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a)) (an (eq (nth n l) (suc a)) (eq b (app F a))))
      (exp ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a)) (an (eq (nth n l) (suc a)) (eq b (app F a))))
        (iand ((an (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))) (eq (nth n l) (suc a)) (eq b (app F a)))
          (anr ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))))
          (sylib ((an (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))) (eq (suc b) (suc (app F a))) (eq b (app F a)))
            (peano2 (b (app F a)))
            (eqtr3d ((an (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))) (suc b) (nth n (map F l)) (suc (app F a)))
              (anl ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))))
              (anwr ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a))))
                H1)))))))
  (eex (a (an (eq (nth n l) (suc a)) (eq b (app F a))) (eq (nth n (map F l)) (suc b)))
    (eqtr4d ((an (eq (nth n l) (suc a)) (eq b (app F a))) (nth n (map F l)) (suc (app F a)) (suc b))
      (anwl ((eq (nth n l) (suc a)) (eq b (app F a)) (eq (nth n (map F l)) (suc (app F a))))
        H1)
      (suceqd ((an (eq (nth n l) (suc a)) (eq b (app F a))) b (app F a))
        (anr ((eq (nth n l) (suc a)) (eq b (app F a))))))))))

(local theorem lmemmapi ((F set ()) (a nat ()) (l nat ())) ()
  (im (lmem a l) (lmem (app F a) (map F l)))
((x1 nat))
(sylbi ((lmem a l) (ex x1 (eq (nth x1 l) (suc a))) (lmem (app F a) (map F l)))
  (lmemnth (a l x1))
  (eex (x1 (eq (nth x1 l) (suc a)) (lmem (app F a) (map F l)))
    (syl ((eq (nth x1 l) (suc a)) (eq (nth x1 (map F l)) (suc (app F a))) (lmem (app F a) (map F l)))
      (nthlmem ((app F a) (map F l) x1))
      (mapnth (F a l x1))))))

(local theorem lmemmap ((F set ()) (a nat) (b nat ()) (l nat ())) ()
  (iff (lmem b (map F l)) (ex a (an (lmem a l) (eq b (app F a)))))
((x1 nat))
(ax_mp ((iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (lmem b (map F l)) (ex a (an (lmem a l) (eq b (app F a))))))
  (ax_mp ((iff (lmem b (map F l)) (ex x1 (eq (nth x1 (map F l)) (suc b)))) (im (iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (lmem b (map F l)) (ex a (an (lmem a l) (eq b (app F a)))))))
    (bitr ((lmem b (map F l)) (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))))
    (lmemnth (b (map F l) x1)))
  (ax_mp ((iff (ex a (an (lmem a l) (eq b (app F a)))) (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a)))))) (iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))))
    (ax_mp ((iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a)))))) (im (iff (ex a (an (lmem a l) (eq b (app F a)))) (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a)))))) (iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a)))))))
      (bitr4 ((ex x1 (eq (nth x1 (map F l)) (suc b))) (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))))
      (exeqi (x1 (eq (nth x1 (map F l)) (suc b)) (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a)))))
        (mapnthb (F a b l x1))))
    (biexexi (a x1 (an (lmem a l) (eq b (app F a))) (an (eq (nth x1 l) (suc a)) (eq b (app F a))))
      (biexan1i ((eq b (app F a)) x1 (lmem a l) (eq (nth x1 l) (suc a)))
        (lmemnth (a l x1)))))))

(def ljoin ((L nat ())) (nat ())
((a nat) (ih nat) (z nat))
(lrec (d0) (slam a (slam z (lam ih (append a ih)))) L))

(local theorem ljoineqd ((_G wff ()) (_L1 nat ()) (_L2 nat ()))
  ((_Lh (im _G (eq _L1 _L2))))
  (im _G (eq (ljoin _L1) (ljoin _L2)))
((a nat) (ih nat) (z nat))
(:conv (im _G (eq (ljoin _L1) (ljoin _L2)))
  (im
    _G
    (eq
      (:unfold ljoin (_L1) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (append a ih)))) _L1))
      (:unfold ljoin (_L2) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (append a ih)))) _L2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam ih (append a ih)))) (slam a (slam z (lam ih (append a ih)))) _L1 _L2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam a (slam z (lam ih (append a ih))))))
    _Lh)))

(local theorem ljoineq ((_L1 nat ()) (_L2 nat ())) ()
  (im (eq _L1 _L2) (eq (ljoin _L1) (ljoin _L2)))
()
(ljoineqd ((eq _L1 _L2) _L1 _L2)
  (id ((eq _L1 _L2)))))

(theorem ljoin0 () ()
  (eq (ljoin (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (ljoin (d0)) (d0))
  (eq
    (:unfold ljoin ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (append x1 x3))))))))

(theorem ljoinS ((l nat ()) (L nat ())) ()
  (eq (ljoin (cons l L)) (append l (ljoin L)))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))) (append l (ljoin L))) (eq (ljoin (cons l L)) (append l (ljoin L))))
  (ax_mp ((eq (ljoin (cons l L)) (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L))))) (im (eq (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))) (append l (ljoin L))) (eq (ljoin (cons l L)) (append l (ljoin L)))))
    (eqtr ((ljoin (cons l L)) (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))) (append l (ljoin L))))
    (:conv (eq (ljoin (cons l L)) (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))))
      (eq
        (:unfold ljoin ((cons l L)) (x1 x3 x2)
          (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L)))
        (app
          (slam x1 (slam x2 (lam x3 (append x1 x3))))
          (pr
            l
            (pr
              L
              (:unfold ljoin (L) (x1 x3 x2)
                (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) L))))))
      (lrecS ((d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) l L))))
  (appslame (l (pr L (ljoin L)) (append l (ljoin L)) x1 (slam x2 (lam x3 (append x1 x3))))
    (appslamed ((eq x1 l) L (ljoin L) (append l (ljoin L)) x2 (lam x3 (append x1 x3)))
      (applamed ((an (eq x1 l) (eq x2 L)) (ljoin L) (append l (ljoin L)) x3 (append x1 x3))
        (appendeqd ((an (an (eq x1 l) (eq x2 L)) (eq x3 (ljoin L))) x1 l x3 (ljoin L))
          (anll ((eq x1 l) (eq x2 L) (eq x3 (ljoin L))))
          (anr ((an (eq x1 l) (eq x2 L)) (eq x3 (ljoin L))))))))))

(local def nztails ((L nat ())) (nat ())
((a nat) (ih nat) (z nat))
(lrec (d0) (slam a (slam z (lam ih (cons (pr a z) ih)))) L))

(local theorem nztailseqd ((_G wff ()) (_L1 nat ()) (_L2 nat ()))
  ((_Lh (im _G (eq _L1 _L2))))
  (im _G (eq (nztails _L1) (nztails _L2)))
((a nat) (ih nat) (z nat))
(:conv (im _G (eq (nztails _L1) (nztails _L2)))
  (im
    _G
    (eq
      (:unfold nztails (_L1) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (cons (pr a z) ih)))) _L1))
      (:unfold nztails (_L2) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (cons (pr a z) ih)))) _L2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam ih (cons (pr a z) ih)))) (slam a (slam z (lam ih (cons (pr a z) ih)))) _L1 _L2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam a (slam z (lam ih (cons (pr a z) ih))))))
    _Lh)))

(local theorem nztailseq ((_L1 nat ()) (_L2 nat ())) ()
  (im (eq _L1 _L2) (eq (nztails _L1) (nztails _L2)))
()
(nztailseqd ((eq _L1 _L2) _L1 _L2)
  (id ((eq _L1 _L2)))))

(local theorem nztails0 () ()
  (eq (nztails (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (nztails (d0)) (d0))
  (eq
    (:unfold nztails ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3))))))))

(local theorem nztailsS ((l nat ()) (L nat ())) ()
  (eq (nztails (cons l L)) (cons (pr l L) (nztails L)))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) (pr l (pr L (nztails L)))) (cons (pr l L) (nztails L))) (eq (nztails (cons l L)) (cons (pr l L) (nztails L))))
  (ax_mp ((eq (nztails (cons l L)) (app (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) (pr l (pr L (nztails L))))) (im (eq (app (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) (pr l (pr L (nztails L)))) (cons (pr l L) (nztails L))) (eq (nztails (cons l L)) (cons (pr l L) (nztails L)))))
    (eqtr ((nztails (cons l L)) (app (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) (pr l (pr L (nztails L)))) (cons (pr l L) (nztails L))))
    (:conv (eq (nztails (cons l L)) (app (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) (pr l (pr L (nztails L)))))
      (eq
        (:unfold nztails ((cons l L)) (x1 x3 x2)
          (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) (cons l L)))
        (app
          (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3))))
          (pr
            l
            (pr
              L
              (:unfold nztails (L) (x1 x3 x2)
                (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) L))))))
      (lrecS ((d0) (slam x1 (slam x2 (lam x3 (cons (pr x1 x2) x3)))) l L))))
  (appslame (l (pr L (nztails L)) (cons (pr l L) (nztails L)) x1 (slam x2 (lam x3 (cons (pr x1 x2) x3))))
    (appslamed ((eq x1 l) L (nztails L) (cons (pr l L) (nztails L)) x2 (lam x3 (cons (pr x1 x2) x3)))
      (applamed ((an (eq x1 l) (eq x2 L)) (nztails L) (cons (pr l L) (nztails L)) x3 (cons (pr x1 x2) x3))
        (conseqd ((an (an (eq x1 l) (eq x2 L)) (eq x3 (nztails L))) (pr x1 x2) (pr l L) x3 (nztails L))
          (preqd ((an (an (eq x1 l) (eq x2 L)) (eq x3 (nztails L))) x1 l x2 L)
            (anll ((eq x1 l) (eq x2 L) (eq x3 (nztails L))))
            (anlr ((eq x1 l) (eq x2 L) (eq x3 (nztails L)))))
          (anr ((an (eq x1 l) (eq x2 L)) (eq x3 (nztails L))))))))))

(local def lfnaux ((F set ()) (k nat ()) (n nat ())) (nat ())
((_1 nat) (_2 nat) (i nat) (ih nat) (x nat))
(grec (d0) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app F i) ih)))) n k))

(local theorem lfnauxeqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_k1 nat ()) (_k2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_kh (im _G (eq _k1 _k2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (lfnaux _F1 _k1 _n1) (lfnaux _F2 _k2 _n2)))
((_1 nat) (_2 nat) (i nat) (ih nat) (x nat))
(:conv (im _G (eq (lfnaux _F1 _k1 _n1) (lfnaux _F2 _k2 _n2)))
  (im
    _G
    (eq
      (:unfold lfnaux (_F1 _k1 _n1) (_1 _2 i ih x)
        (grec (d0) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app _F1 i) ih)))) _n1 _k1))
      (:unfold lfnaux (_F2 _k2 _n2) (_1 _2 i ih x)
        (grec (d0) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app _F2 i) ih)))) _n2 _k2))))
  (greceqd (_G (d0) (d0) (slam _1 (lam x (suc x))) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app _F1 i) ih)))) (slam _2 (slam i (lam ih (cons (app _F2 i) ih)))) _n1 _n2 _k1 _k2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam _1 (lam x (suc x)))))
    (slameqd (_G _2 (slam i (lam ih (cons (app _F1 i) ih))) (slam i (lam ih (cons (app _F2 i) ih))))
      (slameqd (_G i (lam ih (cons (app _F1 i) ih)) (lam ih (cons (app _F2 i) ih)))
        (lameqd (_G ih (cons (app _F1 i) ih) (cons (app _F2 i) ih))
          (conseqd (_G (app _F1 i) (app _F2 i) ih ih)
            (appeqd (_G _F1 _F2 i i)
              _Fh
              (eqidd (_G i)))
            (eqidd (_G ih))))))
    _nh
    _kh)))

(local theorem lfnauxeq ((_F1 set ()) (_F2 set ()) (_k1 nat ()) (_k2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _F1 _F2) (im (eq _k1 _k2) (im (eq _n1 _n2) (eq (lfnaux _F1 _k1 _n1) (lfnaux _F2 _k2 _n2)))))
()
(exp ((eqs _F1 _F2) (eq _k1 _k2) (im (eq _n1 _n2) (eq (lfnaux _F1 _k1 _n1) (lfnaux _F2 _k2 _n2))))
  (exp ((an (eqs _F1 _F2) (eq _k1 _k2)) (eq _n1 _n2) (eq (lfnaux _F1 _k1 _n1) (lfnaux _F2 _k2 _n2)))
    (lfnauxeqd ((an (an (eqs _F1 _F2) (eq _k1 _k2)) (eq _n1 _n2)) _F1 _F2 _k1 _k2 _n1 _n2)
      (anwl ((an (eqs _F1 _F2) (eq _k1 _k2)) (eq _n1 _n2) (eqs _F1 _F2))
        (anl ((eqs _F1 _F2) (eq _k1 _k2))))
      (anwl ((an (eqs _F1 _F2) (eq _k1 _k2)) (eq _n1 _n2) (eq _k1 _k2))
        (anr ((eqs _F1 _F2) (eq _k1 _k2))))
      (anr ((an (eqs _F1 _F2) (eq _k1 _k2)) (eq _n1 _n2)))))))

(local theorem lfnauxeq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (k nat ()) (n nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eq (lfnaux _F1 k n) (lfnaux _F2 k n)))
()
(lfnauxeqd (_G _F1 _F2 k k n n)
  _h
  (eqidd (_G k))
  (eqidd (_G n))))

(local theorem lfnauxeq1 ((_F1 set ()) (_F2 set ()) (k nat ()) (n nat ())) ()
  (im (eqs _F1 _F2) (eq (lfnaux _F1 k n) (lfnaux _F2 k n)))
()
(lfnauxeq1d ((eqs _F1 _F2) _F1 _F2 k n)
  (id ((eqs _F1 _F2)))))

(local theorem lfnauxeq2d ((_G wff ()) (F set ()) (_k1 nat ()) (_k2 nat ()) (n nat ()))
  ((_h (im _G (eq _k1 _k2))))
  (im _G (eq (lfnaux F _k1 n) (lfnaux F _k2 n)))
()
(lfnauxeqd (_G F F _k1 _k2 n n)
  (eqsidd (_G F))
  _h
  (eqidd (_G n))))

(local theorem lfnauxeq2 ((F set ()) (_k1 nat ()) (_k2 nat ()) (n nat ())) ()
  (im (eq _k1 _k2) (eq (lfnaux F _k1 n) (lfnaux F _k2 n)))
()
(lfnauxeq2d ((eq _k1 _k2) F _k1 _k2 n)
  (id ((eq _k1 _k2)))))

(local theorem lfnauxeq3d ((_G wff ()) (F set ()) (k nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (lfnaux F k _n1) (lfnaux F k _n2)))
()
(lfnauxeqd (_G F F k k _n1 _n2)
  (eqsidd (_G F))
  (eqidd (_G k))
  _h))

(local theorem lfnauxeq3 ((F set ()) (k nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (lfnaux F k _n1) (lfnaux F k _n2)))
()
(lfnauxeq3d ((eq _n1 _n2) F k _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem lfnaux0 ((F set ()) (k nat ())) ()
  (eq (lfnaux F k (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat))
(:conv (eq (lfnaux F k (d0)) (d0))
  (eq
    (:unfold lfnaux (F k (d0)) (x1 x3 x4 x5 x2)
      (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (d0) k))
    (d0))
  (grec0 ((slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (slam x1 (lam x2 (suc x2))) k (d0)))))

(local theorem lfnauxS ((F set ()) (k nat ()) (n nat ())) ()
  (eq (lfnaux F k (suc n)) (cons (app F k) (lfnaux F (suc k) n)))
((x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat))
(ax_mp ((eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))) (eq (lfnaux F k (suc n)) (cons (app F k) (lfnaux F (suc k) n))))
  (ax_mp ((eq (lfnaux F k (suc n)) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))))) (im (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))) (eq (lfnaux F k (suc n)) (cons (app F k) (lfnaux F (suc k) n)))))
    (eqtr ((lfnaux F k (suc n)) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))))
    (:conv (eq (lfnaux F k (suc n)) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))))
      (eq
        (:unfold lfnaux (F k (suc n)) (x1 x3 x4 x5 x2)
          (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (suc n) k))
        (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))))
      (grecS ((slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (slam x1 (lam x2 (suc x2))) k n (d0)))))
  (ax_mp ((eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n)))) (cons (app F k) (lfnaux F (suc k) n))) (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))))
    (ax_mp ((eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n))))) (im (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n)))) (cons (app F k) (lfnaux F (suc k) n))) (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n)))))
      (eqtr ((app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n)))) (cons (app F k) (lfnaux F (suc k) n))))
      (ax_mp ((eq (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))) (pr n (pr k (lfnaux F (suc k) n)))) (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n))))))
        (appeq2 ((slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))) (pr n (pr k (lfnaux F (suc k) n)))))
        (ax_mp ((eq (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))) (pr k (lfnaux F (suc k) n))) (eq (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))) (pr n (pr k (lfnaux F (suc k) n)))))
          (preq2 (n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))) (pr k (lfnaux F (suc k) n))))
          (ax_mp ((eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (lfnaux F (suc k) n)) (eq (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))) (pr k (lfnaux F (suc k) n))))
            (preq2 (k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (lfnaux F (suc k) n)))
            (ax_mp ((eq (app (slam x1 (lam x2 (suc x2))) (pr n k)) (suc k)) (eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (lfnaux F (suc k) n)))
              (:conv (im (eq (app (slam x1 (lam x2 (suc x2))) (pr n k)) (suc k)) (eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (lfnaux F (suc k) n)))
                (im
                  (eq (app (slam x1 (lam x2 (suc x2))) (pr n k)) (suc k))
                  (eq
                    (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))
                    (:unfold lfnaux (F (suc k) n) (x1 x3 x4 x5 x2)
                      (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (suc k)))))
                (greceq5 ((d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)) (suc k))))
              (appslame (n k (suc k) x1 (lam x2 (suc x2)))
                (applamed ((eq x1 n) k (suc k) x2 (suc x2))
                  (suceqd ((an (eq x1 n) (eq x2 k)) x2 k)
                    (anr ((eq x1 n) (eq x2 k)))))))))))
    (appslame (n (pr k (lfnaux F (suc k) n)) (cons (app F k) (lfnaux F (suc k) n)) x3 (slam x4 (lam x5 (cons (app F x4) x5))))
      (appslamed ((eq x3 n) k (lfnaux F (suc k) n) (cons (app F k) (lfnaux F (suc k) n)) x4 (lam x5 (cons (app F x4) x5)))
        (applamed ((an (eq x3 n) (eq x4 k)) (lfnaux F (suc k) n) (cons (app F k) (lfnaux F (suc k) n)) x5 (cons (app F x4) x5))
          (conseqd ((an (an (eq x3 n) (eq x4 k)) (eq x5 (lfnaux F (suc k) n))) (app F x4) (app F k) x5 (lfnaux F (suc k) n))
            (appeq2d ((an (an (eq x3 n) (eq x4 k)) (eq x5 (lfnaux F (suc k) n))) F x4 k)
              (anlr ((eq x3 n) (eq x4 k) (eq x5 (lfnaux F (suc k) n)))))
            (anr ((an (eq x3 n) (eq x4 k)) (eq x5 (lfnaux F (suc k) n)))))))))))

(local theorem lfnauxshift ((F1 set ()) (F2 set ()) (i nat) (k1 nat ()) (k2 nat ()) (n nat ())) ()
  (im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n)))
((_1 nat) (x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat) (x6 nat))
(:let H1 (anl ((eq x2 k1) (eq x3 k2)))
(:let H2 (anr ((eq x2 k1) (eq x3 k2)))
(:let H3 (id ((eq _1 n)))
(:let H4 (id ((eq _1 (d0))))
(:let H5 (id ((eq _1 x1)))
(:let H6 (id ((eq _1 (suc x1))))
(:let H7 (anl ((eq x2 x4) (eq x3 x5)))
(:let H8 (anr ((eq x2 x4) (eq x3 x5)))
(:let H9 (anl ((eq x4 (suc x2)) (eq x5 (suc x3))))
(:let H10 (anr ((eq x4 (suc x2)) (eq x5 (suc x3))))
(ax_mp ((al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n))))) (im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))))
  (ealie ((im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))) x2 k1 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n)))))
    (ealde ((im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))) x3 (eq x2 k1) k2 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n))))
      (bi1d ((an (eq x2 k1) (eq x3 k2)) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n))) (im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))))
        (imeqd ((an (eq x2 k1) (eq x3 k2)) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n)) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n)))
          (aleqd ((an (eq x2 k1) (eq x3 k2)) i (eq (app F1 (add x2 i)) (app F2 (add x3 i))) (eq (app F1 (add k1 i)) (app F2 (add k2 i))))
            (eqeqd ((an (eq x2 k1) (eq x3 k2)) (app F1 (add x2 i)) (app F1 (add k1 i)) (app F2 (add x3 i)) (app F2 (add k2 i)))
              (appeq2d ((an (eq x2 k1) (eq x3 k2)) F1 (add x2 i) (add k1 i))
                (addeq1d ((an (eq x2 k1) (eq x3 k2)) x2 k1 i)
                  H1))
              (appeq2d ((an (eq x2 k1) (eq x3 k2)) F2 (add x3 i) (add k2 i))
                (addeq1d ((an (eq x2 k1) (eq x3 k2)) x3 k2 i)
                  H2))))
          (eqeqd ((an (eq x2 k1) (eq x3 k2)) (lfnaux F1 x2 n) (lfnaux F1 k1 n) (lfnaux F2 x3 n) (lfnaux F2 k2 n))
            (lfnauxeq2d ((an (eq x2 k1) (eq x3 k2)) F1 x2 k1 n)
              H1)
            (lfnauxeq2d ((an (eq x2 k1) (eq x3 k2)) F2 x3 k2 n)
              H2))))))
  (ind (_1 x1 n (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1))))) (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0)))))) (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n))))) (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1))))) (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1)))))))
    (aleqd ((eq _1 n) x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)))) (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n)))))
      (aleqd ((eq _1 n) x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n))))
        (imeqd ((eq _1 n) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)) (eq (lfnaux F1 x2 n) (lfnaux F2 x3 n)))
          (biidd ((eq _1 n) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i))))))
          (eqeqd ((eq _1 n) (lfnaux F1 x2 _1) (lfnaux F1 x2 n) (lfnaux F2 x3 _1) (lfnaux F2 x3 n))
            (lfnauxeqd ((eq _1 n) F1 F1 x2 x2 _1 n)
              (eqsidd ((eq _1 n) F1))
              (eqidd ((eq _1 n) x2))
              H3)
            (lfnauxeqd ((eq _1 n) F2 F2 x3 x3 _1 n)
              (eqsidd ((eq _1 n) F2))
              (eqidd ((eq _1 n) x3))
              H3)))))
    (aleqd ((eq _1 (d0)) x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)))) (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0))))))
      (aleqd ((eq _1 (d0)) x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0)))))
        (imeqd ((eq _1 (d0)) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0))))
          (biidd ((eq _1 (d0)) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i))))))
          (eqeqd ((eq _1 (d0)) (lfnaux F1 x2 _1) (lfnaux F1 x2 (d0)) (lfnaux F2 x3 _1) (lfnaux F2 x3 (d0)))
            (lfnauxeqd ((eq _1 (d0)) F1 F1 x2 x2 _1 (d0))
              (eqsidd ((eq _1 (d0)) F1))
              (eqidd ((eq _1 (d0)) x2))
              H4)
            (lfnauxeqd ((eq _1 (d0)) F2 F2 x3 x3 _1 (d0))
              (eqsidd ((eq _1 (d0)) F2))
              (eqidd ((eq _1 (d0)) x3))
              H4)))))
    (aleqd ((eq _1 x1) x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)))) (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1)))))
      (aleqd ((eq _1 x1) x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1))))
        (imeqd ((eq _1 x1) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1)))
          (biidd ((eq _1 x1) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i))))))
          (eqeqd ((eq _1 x1) (lfnaux F1 x2 _1) (lfnaux F1 x2 x1) (lfnaux F2 x3 _1) (lfnaux F2 x3 x1))
            (lfnauxeqd ((eq _1 x1) F1 F1 x2 x2 _1 x1)
              (eqsidd ((eq _1 x1) F1))
              (eqidd ((eq _1 x1) x2))
              H5)
            (lfnauxeqd ((eq _1 x1) F2 F2 x3 x3 _1 x1)
              (eqsidd ((eq _1 x1) F2))
              (eqidd ((eq _1 x1) x3))
              H5)))))
    (aleqd ((eq _1 (suc x1)) x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)))) (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1))))))
      (aleqd ((eq _1 (suc x1)) x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1)))))
        (imeqd ((eq _1 (suc x1)) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 _1) (lfnaux F2 x3 _1)) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1))))
          (biidd ((eq _1 (suc x1)) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i))))))
          (eqeqd ((eq _1 (suc x1)) (lfnaux F1 x2 _1) (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 _1) (lfnaux F2 x3 (suc x1)))
            (lfnauxeqd ((eq _1 (suc x1)) F1 F1 x2 x2 _1 (suc x1))
              (eqsidd ((eq _1 (suc x1)) F1))
              (eqidd ((eq _1 (suc x1)) x2))
              H6)
            (lfnauxeqd ((eq _1 (suc x1)) F2 F2 x3 x3 _1 (suc x1))
              (eqsidd ((eq _1 (suc x1)) F2))
              (eqidd ((eq _1 (suc x1)) x3))
              H6)))))
    (ax_gen (x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0))))))
      (ax_gen (x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0)))))
        (a1i ((al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0))))
          (ax_mp ((eq (lfnaux F2 x3 (d0)) (d0)) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0))))
            (ax_mp ((eq (lfnaux F1 x2 (d0)) (d0)) (im (eq (lfnaux F2 x3 (d0)) (d0)) (eq (lfnaux F1 x2 (d0)) (lfnaux F2 x3 (d0)))))
              (eqtr4 ((lfnaux F1 x2 (d0)) (d0) (lfnaux F2 x3 (d0))))
              (lfnaux0 (F1 x2)))
            (lfnaux0 (F2 x3))))))
    (sylbi ((al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1))))) (al x4 (al x5 (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1))))) (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1)))))))
      (cbval (x2 x4 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1)))) (al x5 (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1)))))
        (cbvald (x3 x5 (eq x2 x4) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1))) (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1))))
          (imeqd ((an (eq x2 x4) (eq x3 x5)) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x2 x1) (lfnaux F2 x3 x1)) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1)))
            (aleqd ((an (eq x2 x4) (eq x3 x5)) i (eq (app F1 (add x2 i)) (app F2 (add x3 i))) (eq (app F1 (add x4 i)) (app F2 (add x5 i))))
              (eqeqd ((an (eq x2 x4) (eq x3 x5)) (app F1 (add x2 i)) (app F1 (add x4 i)) (app F2 (add x3 i)) (app F2 (add x5 i)))
                (appeq2d ((an (eq x2 x4) (eq x3 x5)) F1 (add x2 i) (add x4 i))
                  (addeq1d ((an (eq x2 x4) (eq x3 x5)) x2 x4 i)
                    H7))
                (appeq2d ((an (eq x2 x4) (eq x3 x5)) F2 (add x3 i) (add x5 i))
                  (addeq1d ((an (eq x2 x4) (eq x3 x5)) x3 x5 i)
                    H8))))
            (eqeqd ((an (eq x2 x4) (eq x3 x5)) (lfnaux F1 x2 x1) (lfnaux F1 x4 x1) (lfnaux F2 x3 x1) (lfnaux F2 x5 x1))
              (lfnauxeq2d ((an (eq x2 x4) (eq x3 x5)) F1 x2 x4 x1)
                H7)
              (lfnauxeq2d ((an (eq x2 x4) (eq x3 x5)) F2 x3 x5 x1)
                H8)))))
      (iald (x2 (al x4 (al x5 (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1))))) (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1))))))
        (iald (x3 (al x4 (al x5 (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1))))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1)))))
          (rsyl ((al x4 (al x5 (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1))))) (im (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1)))))
            (ealie ((im (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))) x4 (suc x2) (al x5 (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1)))))
              (ealde ((im (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))) x5 (eq x4 (suc x2)) (suc x3) (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1))))
                (bi1d ((an (eq x4 (suc x2)) (eq x5 (suc x3))) (im (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1))) (im (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))))
                  (imeqd ((an (eq x4 (suc x2)) (eq x5 (suc x3))) (al i (eq (app F1 (add x4 i)) (app F2 (add x5 i)))) (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))) (eq (lfnaux F1 x4 x1) (lfnaux F2 x5 x1)) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1)))
                    (aleqd ((an (eq x4 (suc x2)) (eq x5 (suc x3))) i (eq (app F1 (add x4 i)) (app F2 (add x5 i))) (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i))))
                      (eqeqd ((an (eq x4 (suc x2)) (eq x5 (suc x3))) (app F1 (add x4 i)) (app F1 (add (suc x2) i)) (app F2 (add x5 i)) (app F2 (add (suc x3) i)))
                        (appeq2d ((an (eq x4 (suc x2)) (eq x5 (suc x3))) F1 (add x4 i) (add (suc x2) i))
                          (addeq1d ((an (eq x4 (suc x2)) (eq x5 (suc x3))) x4 (suc x2) i)
                            H9))
                        (appeq2d ((an (eq x4 (suc x2)) (eq x5 (suc x3))) F2 (add x5 i) (add (suc x3) i))
                          (addeq1d ((an (eq x4 (suc x2)) (eq x5 (suc x3))) x5 (suc x3) i)
                            H10))))
                    (eqeqd ((an (eq x4 (suc x2)) (eq x5 (suc x3))) (lfnaux F1 x4 x1) (lfnaux F1 (suc x2) x1) (lfnaux F2 x5 x1) (lfnaux F2 (suc x3) x1))
                      (lfnauxeq2d ((an (eq x4 (suc x2)) (eq x5 (suc x3))) F1 x4 (suc x2) x1)
                        H9)
                      (lfnauxeq2d ((an (eq x4 (suc x2)) (eq x5 (suc x3))) F2 x5 (suc x3) x1)
                        H10))))))
            (rsyl ((im (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1)))))
              (imim1i ((al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1)))
                (sylbi ((al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al x6 (eq (app F1 (add x2 x6)) (app F2 (add x3 x6)))) (al i (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i)))))
                  (cbval (i x6 (eq (app F1 (add x2 i)) (app F2 (add x3 i))) (eq (app F1 (add x2 x6)) (app F2 (add x3 x6))))
                    (eqeqd ((eq i x6) (app F1 (add x2 i)) (app F1 (add x2 x6)) (app F2 (add x3 i)) (app F2 (add x3 x6)))
                      (appeq2d ((eq i x6) F1 (add x2 i) (add x2 x6))
                        (addeq2 (x2 i x6)))
                      (appeq2d ((eq i x6) F2 (add x3 i) (add x3 x6))
                        (addeq2 (x3 i x6)))))
                  (iald (i (al x6 (eq (app F1 (add x2 x6)) (app F2 (add x3 x6)))) (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i))))
                    (sylibr ((al x6 (eq (app F1 (add x2 x6)) (app F2 (add x3 x6)))) (eq (app F1 (add x2 (suc i))) (app F2 (add x3 (suc i)))) (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i))))
                      (ax_mp ((eq (app F2 (add (suc x3) i)) (app F2 (add x3 (suc i)))) (iff (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i))) (eq (app F1 (add x2 (suc i))) (app F2 (add x3 (suc i))))))
                        (ax_mp ((eq (app F1 (add (suc x2) i)) (app F1 (add x2 (suc i)))) (im (eq (app F2 (add (suc x3) i)) (app F2 (add x3 (suc i)))) (iff (eq (app F1 (add (suc x2) i)) (app F2 (add (suc x3) i))) (eq (app F1 (add x2 (suc i))) (app F2 (add x3 (suc i)))))))
                          (eqeq ((app F1 (add (suc x2) i)) (app F1 (add x2 (suc i))) (app F2 (add (suc x3) i)) (app F2 (add x3 (suc i)))))
                          (ax_mp ((eq (add (suc x2) i) (add x2 (suc i))) (eq (app F1 (add (suc x2) i)) (app F1 (add x2 (suc i)))))
                            (appeq2 (F1 (add (suc x2) i) (add x2 (suc i))))
                            (addSass (x2 i))))
                        (ax_mp ((eq (add (suc x3) i) (add x3 (suc i))) (eq (app F2 (add (suc x3) i)) (app F2 (add x3 (suc i)))))
                          (appeq2 (F2 (add (suc x3) i) (add x3 (suc i))))
                          (addSass (x3 i))))
                      (eale (x6 (suc i) (eq (app F1 (add x2 x6)) (app F2 (add x3 x6))) (eq (app F1 (add x2 (suc i))) (app F2 (add x3 (suc i)))))
                        (eqeqd ((eq x6 (suc i)) (app F1 (add x2 x6)) (app F1 (add x2 (suc i))) (app F2 (add x3 x6)) (app F2 (add x3 (suc i))))
                          (appeq2d ((eq x6 (suc i)) F1 (add x2 x6) (add x2 (suc i)))
                            (addeq2 (x2 x6 (suc i))))
                          (appeq2d ((eq x6 (suc i)) F2 (add x3 x6) (add x3 (suc i)))
                            (addeq2 (x3 x6 (suc i))))))))))
              (a2i ((al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1)) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1))))
                (exp ((al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1)) (eq (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1))))
                  (eqtr4g ((an (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))) (cons (app F1 x2) (lfnaux F1 (suc x2) x1)) (cons (app F2 x3) (lfnaux F2 (suc x3) x1)) (lfnaux F1 x2 (suc x1)) (lfnaux F2 x3 (suc x1)))
                    (lfnauxS (F1 x2 x1))
                    (lfnauxS (F2 x3 x1))
                    (conseqd ((an (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))) (app F1 x2) (app F2 x3) (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))
                      (anwl ((al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1)) (eq (app F1 x2) (app F2 x3)))
                        (eale (i (d0) (eq (app F1 (add x2 i)) (app F2 (add x3 i))) (eq (app F1 x2) (app F2 x3)))
                          (eqeqd ((eq i (d0)) (app F1 (add x2 i)) (app F1 x2) (app F2 (add x3 i)) (app F2 x3))
                            (appeq2d ((eq i (d0)) F1 (add x2 i) x2)
                              (syl6eq ((eq i (d0)) (add x2 i) (add x2 (d0)) x2)
                                (add0 (x2))
                                (addeq2 (x2 i (d0)))))
                            (appeq2d ((eq i (d0)) F2 (add x3 i) x3)
                              (syl6eq ((eq i (d0)) (add x3 i) (add x3 (d0)) x3)
                                (add0 (x3))
                                (addeq2 (x3 i (d0))))))))
                      (anr ((al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 (suc x2) x1) (lfnaux F2 (suc x3) x1))))))))))))))))))))))))))

(local theorem lfnauxlen ((F set ()) (k nat ()) (n nat ())) ()
  (eq (len (lfnaux F k n)) n)
((_1 nat) (x1 nat) (x2 nat) (x3 nat))
(:let H1 (id ((eq _1 n)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x1)))
(:let H4 (id ((eq _1 (suc x1))))
(ax_mp ((al x2 (eq (len (lfnaux F x2 n)) n)) (eq (len (lfnaux F k n)) n))
  (eale (x2 k (eq (len (lfnaux F x2 n)) n) (eq (len (lfnaux F k n)) n))
    (eqeq1d ((eq x2 k) (len (lfnaux F x2 n)) (len (lfnaux F k n)) n)
      (leneqd ((eq x2 k) (lfnaux F x2 n) (lfnaux F k n))
        (lfnauxeq2 (F x2 k n)))))
  (ind (_1 x1 n (al x2 (eq (len (lfnaux F x2 _1)) _1)) (al x2 (eq (len (lfnaux F x2 (d0))) (d0))) (al x2 (eq (len (lfnaux F x2 n)) n)) (al x2 (eq (len (lfnaux F x2 x1)) x1)) (al x2 (eq (len (lfnaux F x2 (suc x1))) (suc x1))))
    (aleqd ((eq _1 n) x2 (eq (len (lfnaux F x2 _1)) _1) (eq (len (lfnaux F x2 n)) n))
      (eqeqd ((eq _1 n) (len (lfnaux F x2 _1)) (len (lfnaux F x2 n)) _1 n)
        (leneqd ((eq _1 n) (lfnaux F x2 _1) (lfnaux F x2 n))
          (lfnauxeqd ((eq _1 n) F F x2 x2 _1 n)
            (eqsidd ((eq _1 n) F))
            (eqidd ((eq _1 n) x2))
            H1))
        H1))
    (aleqd ((eq _1 (d0)) x2 (eq (len (lfnaux F x2 _1)) _1) (eq (len (lfnaux F x2 (d0))) (d0)))
      (eqeqd ((eq _1 (d0)) (len (lfnaux F x2 _1)) (len (lfnaux F x2 (d0))) _1 (d0))
        (leneqd ((eq _1 (d0)) (lfnaux F x2 _1) (lfnaux F x2 (d0)))
          (lfnauxeqd ((eq _1 (d0)) F F x2 x2 _1 (d0))
            (eqsidd ((eq _1 (d0)) F))
            (eqidd ((eq _1 (d0)) x2))
            H2))
        H2))
    (aleqd ((eq _1 x1) x2 (eq (len (lfnaux F x2 _1)) _1) (eq (len (lfnaux F x2 x1)) x1))
      (eqeqd ((eq _1 x1) (len (lfnaux F x2 _1)) (len (lfnaux F x2 x1)) _1 x1)
        (leneqd ((eq _1 x1) (lfnaux F x2 _1) (lfnaux F x2 x1))
          (lfnauxeqd ((eq _1 x1) F F x2 x2 _1 x1)
            (eqsidd ((eq _1 x1) F))
            (eqidd ((eq _1 x1) x2))
            H3))
        H3))
    (aleqd ((eq _1 (suc x1)) x2 (eq (len (lfnaux F x2 _1)) _1) (eq (len (lfnaux F x2 (suc x1))) (suc x1)))
      (eqeqd ((eq _1 (suc x1)) (len (lfnaux F x2 _1)) (len (lfnaux F x2 (suc x1))) _1 (suc x1))
        (leneqd ((eq _1 (suc x1)) (lfnaux F x2 _1) (lfnaux F x2 (suc x1)))
          (lfnauxeqd ((eq _1 (suc x1)) F F x2 x2 _1 (suc x1))
            (eqsidd ((eq _1 (suc x1)) F))
            (eqidd ((eq _1 (suc x1)) x2))
            H4))
        H4))
    (ax_gen (x2 (eq (len (lfnaux F x2 (d0))) (d0)))
      (ax_mp ((eq (len (d0)) (d0)) (eq (len (lfnaux F x2 (d0))) (d0)))
        (ax_mp ((eq (len (lfnaux F x2 (d0))) (len (d0))) (im (eq (len (d0)) (d0)) (eq (len (lfnaux F x2 (d0))) (d0))))
          (eqtr ((len (lfnaux F x2 (d0))) (len (d0)) (d0)))
          (ax_mp ((eq (lfnaux F x2 (d0)) (d0)) (eq (len (lfnaux F x2 (d0))) (len (d0))))
            (leneq ((lfnaux F x2 (d0)) (d0)))
            (lfnaux0 (F x2))))
        (len0 ())))
    (sylbi ((al x2 (eq (len (lfnaux F x2 x1)) x1)) (al x3 (eq (len (lfnaux F x3 x1)) x1)) (al x2 (eq (len (lfnaux F x2 (suc x1))) (suc x1))))
      (cbval (x2 x3 (eq (len (lfnaux F x2 x1)) x1) (eq (len (lfnaux F x3 x1)) x1))
        (eqeq1d ((eq x2 x3) (len (lfnaux F x2 x1)) (len (lfnaux F x3 x1)) x1)
          (leneqd ((eq x2 x3) (lfnaux F x2 x1) (lfnaux F x3 x1))
            (lfnauxeq2 (F x2 x3 x1)))))
      (iald (x2 (al x3 (eq (len (lfnaux F x3 x1)) x1)) (eq (len (lfnaux F x2 (suc x1))) (suc x1)))
        (syl5eq ((al x3 (eq (len (lfnaux F x3 x1)) x1)) (len (lfnaux F x2 (suc x1))) (len (cons (app F x2) (lfnaux F (suc x2) x1))) (suc x1))
          (ax_mp ((eq (lfnaux F x2 (suc x1)) (cons (app F x2) (lfnaux F (suc x2) x1))) (eq (len (lfnaux F x2 (suc x1))) (len (cons (app F x2) (lfnaux F (suc x2) x1)))))
            (leneq ((lfnaux F x2 (suc x1)) (cons (app F x2) (lfnaux F (suc x2) x1))))
            (lfnauxS (F x2 x1)))
          (syl5eq ((al x3 (eq (len (lfnaux F x3 x1)) x1)) (len (cons (app F x2) (lfnaux F (suc x2) x1))) (suc (len (lfnaux F (suc x2) x1))) (suc x1))
            (lenS ((app F x2) (lfnaux F (suc x2) x1)))
            (suceqd ((al x3 (eq (len (lfnaux F x3 x1)) x1)) (len (lfnaux F (suc x2) x1)) x1)
              (eale (x3 (suc x2) (eq (len (lfnaux F x3 x1)) x1) (eq (len (lfnaux F (suc x2) x1)) x1))
                (eqeq1d ((eq x3 (suc x2)) (len (lfnaux F x3 x1)) (len (lfnaux F (suc x2) x1)) x1)
                  (leneqd ((eq x3 (suc x2)) (lfnaux F x3 x1) (lfnaux F (suc x2) x1))
                    (lfnauxeq2 (F x3 (suc x2) x1)))))))))))))))))

(local theorem lfnauxnth ((F set ()) (i nat ()) (k nat ()) (n nat ())) ()
  (im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i)))))
((_1 nat) (x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat))
(:let H1 (anl ((eq x2 i) (eq x3 k)))
(:let H2 (anr ((eq x2 i) (eq x3 k)))
(:let H3 (eqidd ((eq _1 n) x2))
(:let H4 (id ((eq _1 n)))
(:let H5 (eqidd ((eq _1 (d0)) x2))
(:let H6 (id ((eq _1 (d0))))
(:let H7 (eqidd ((eq _1 x1) x2))
(:let H8 (id ((eq _1 x1)))
(:let H9 (eqidd ((eq _1 (suc x1)) x2))
(:let H10 (id ((eq _1 (suc x1))))
(:let H11 (anl ((eq x2 x4) (eq x3 x5)))
(:let H12 (anr ((eq x2 x4) (eq x3 x5)))
(:let H13 (anr ((an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))))
(:let H14 (anr ((an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))))
(ax_mp ((al x2 (al x3 (im (lt x2 n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2))))))) (im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))))
  (ealie ((im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))) x2 i (al x3 (im (lt x2 n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2)))))))
    (ealde ((im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))) x3 (eq x2 i) k (im (lt x2 n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2))))))
      (bi1d ((an (eq x2 i) (eq x3 k)) (im (lt x2 n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2))))) (im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))))
        (imeqd ((an (eq x2 i) (eq x3 k)) (lt x2 n) (lt i n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2)))) (eq (nth i (lfnaux F k n)) (suc (app F (add k i)))))
          (lteq1d ((an (eq x2 i) (eq x3 k)) x2 i n)
            H1)
          (eqeqd ((an (eq x2 i) (eq x3 k)) (nth x2 (lfnaux F x3 n)) (nth i (lfnaux F k n)) (suc (app F (add x3 x2))) (suc (app F (add k i))))
            (ntheqd ((an (eq x2 i) (eq x3 k)) x2 i (lfnaux F x3 n) (lfnaux F k n))
              H1
              (lfnauxeq2d ((an (eq x2 i) (eq x3 k)) F x3 k n)
                H2))
            (suceqd ((an (eq x2 i) (eq x3 k)) (app F (add x3 x2)) (app F (add k i)))
              (appeq2d ((an (eq x2 i) (eq x3 k)) F (add x3 x2) (add k i))
                (addeqd ((an (eq x2 i) (eq x3 k)) x3 k x2 i)
                  H2
                  H1))))))))
  (ind (_1 x1 n (al x2 (al x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2))))))) (al x2 (al x3 (im (lt x2 (d0)) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2))))))) (al x2 (al x3 (im (lt x2 n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2))))))) (al x2 (al x3 (im (lt x2 x1) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2))))))) (al x2 (al x3 (im (lt x2 (suc x1)) (eq (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2))))))))
    (aleqd ((eq _1 n) x2 (al x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))))) (al x3 (im (lt x2 n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2)))))))
      (aleqd ((eq _1 n) x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2))))) (im (lt x2 n) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2))))))
        (imeqd ((eq _1 n) (lt x2 _1) (lt x2 n) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))) (eq (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2)))))
          (lteqd ((eq _1 n) x2 x2 _1 n)
            H3
            H4)
          (eqeqd ((eq _1 n) (nth x2 (lfnaux F x3 _1)) (nth x2 (lfnaux F x3 n)) (suc (app F (add x3 x2))) (suc (app F (add x3 x2))))
            (ntheqd ((eq _1 n) x2 x2 (lfnaux F x3 _1) (lfnaux F x3 n))
              H3
              (lfnauxeqd ((eq _1 n) F F x3 x3 _1 n)
                (eqsidd ((eq _1 n) F))
                (eqidd ((eq _1 n) x3))
                H4))
            (eqidd ((eq _1 n) (suc (app F (add x3 x2)))))))))
    (aleqd ((eq _1 (d0)) x2 (al x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))))) (al x3 (im (lt x2 (d0)) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2)))))))
      (aleqd ((eq _1 (d0)) x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2))))) (im (lt x2 (d0)) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2))))))
        (imeqd ((eq _1 (d0)) (lt x2 _1) (lt x2 (d0)) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2)))))
          (lteqd ((eq _1 (d0)) x2 x2 _1 (d0))
            H5
            H6)
          (eqeqd ((eq _1 (d0)) (nth x2 (lfnaux F x3 _1)) (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2))) (suc (app F (add x3 x2))))
            (ntheqd ((eq _1 (d0)) x2 x2 (lfnaux F x3 _1) (lfnaux F x3 (d0)))
              H5
              (lfnauxeqd ((eq _1 (d0)) F F x3 x3 _1 (d0))
                (eqsidd ((eq _1 (d0)) F))
                (eqidd ((eq _1 (d0)) x3))
                H6))
            (eqidd ((eq _1 (d0)) (suc (app F (add x3 x2)))))))))
    (aleqd ((eq _1 x1) x2 (al x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))))) (al x3 (im (lt x2 x1) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2)))))))
      (aleqd ((eq _1 x1) x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2))))) (im (lt x2 x1) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2))))))
        (imeqd ((eq _1 x1) (lt x2 _1) (lt x2 x1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2)))))
          (lteqd ((eq _1 x1) x2 x2 _1 x1)
            H7
            H8)
          (eqeqd ((eq _1 x1) (nth x2 (lfnaux F x3 _1)) (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2))) (suc (app F (add x3 x2))))
            (ntheqd ((eq _1 x1) x2 x2 (lfnaux F x3 _1) (lfnaux F x3 x1))
              H7
              (lfnauxeqd ((eq _1 x1) F F x3 x3 _1 x1)
                (eqsidd ((eq _1 x1) F))
                (eqidd ((eq _1 x1) x3))
                H8))
            (eqidd ((eq _1 x1) (suc (app F (add x3 x2)))))))))
    (aleqd ((eq _1 (suc x1)) x2 (al x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))))) (al x3 (im (lt x2 (suc x1)) (eq (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2)))))))
      (aleqd ((eq _1 (suc x1)) x3 (im (lt x2 _1) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2))))) (im (lt x2 (suc x1)) (eq (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2))))))
        (imeqd ((eq _1 (suc x1)) (lt x2 _1) (lt x2 (suc x1)) (eq (nth x2 (lfnaux F x3 _1)) (suc (app F (add x3 x2)))) (eq (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2)))))
          (lteqd ((eq _1 (suc x1)) x2 x2 _1 (suc x1))
            H9
            H10)
          (eqeqd ((eq _1 (suc x1)) (nth x2 (lfnaux F x3 _1)) (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2))) (suc (app F (add x3 x2))))
            (ntheqd ((eq _1 (suc x1)) x2 x2 (lfnaux F x3 _1) (lfnaux F x3 (suc x1)))
              H9
              (lfnauxeqd ((eq _1 (suc x1)) F F x3 x3 _1 (suc x1))
                (eqsidd ((eq _1 (suc x1)) F))
                (eqidd ((eq _1 (suc x1)) x3))
                H10))
            (eqidd ((eq _1 (suc x1)) (suc (app F (add x3 x2)))))))))
    (ax_gen (x2 (al x3 (im (lt x2 (d0)) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2)))))))
      (ax_gen (x3 (im (lt x2 (d0)) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2))))))
        (ax_mp ((not (lt x2 (d0))) (im (lt x2 (d0)) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2))))))
          (absurd ((lt x2 (d0)) (eq (nth x2 (lfnaux F x3 (d0))) (suc (app F (add x3 x2))))))
          (lt02 (x2)))))
    (sylbi ((al x2 (al x3 (im (lt x2 x1) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2))))))) (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (al x2 (al x3 (im (lt x2 (suc x1)) (eq (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2))))))))
      (cbval (x2 x4 (al x3 (im (lt x2 x1) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2)))))) (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4)))))))
        (cbvald (x3 x5 (eq x2 x4) (im (lt x2 x1) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2))))) (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))
          (imeqd ((an (eq x2 x4) (eq x3 x5)) (lt x2 x1) (lt x4 x1) (eq (nth x2 (lfnaux F x3 x1)) (suc (app F (add x3 x2)))) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4)))))
            (lteq1d ((an (eq x2 x4) (eq x3 x5)) x2 x4 x1)
              H11)
            (eqeqd ((an (eq x2 x4) (eq x3 x5)) (nth x2 (lfnaux F x3 x1)) (nth x4 (lfnaux F x5 x1)) (suc (app F (add x3 x2))) (suc (app F (add x5 x4))))
              (ntheqd ((an (eq x2 x4) (eq x3 x5)) x2 x4 (lfnaux F x3 x1) (lfnaux F x5 x1))
                H11
                (lfnauxeq2d ((an (eq x2 x4) (eq x3 x5)) F x3 x5 x1)
                  H12))
              (suceqd ((an (eq x2 x4) (eq x3 x5)) (app F (add x3 x2)) (app F (add x5 x4)))
                (appeq2d ((an (eq x2 x4) (eq x3 x5)) F (add x3 x2) (add x5 x4))
                  (addeqd ((an (eq x2 x4) (eq x3 x5)) x3 x5 x2 x4)
                    H12
                    H11)))))))
      (iald (x2 (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (al x3 (im (lt x2 (suc x1)) (eq (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2)))))))
        (ialda (x3 (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1)) (eq (nth x2 (lfnaux F x3 (suc x1))) (suc (app F (add x3 x2)))))
          (syl5eq ((an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (nth x2 (lfnaux F x3 (suc x1))) (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2))))
            (ax_mp ((eq (lfnaux F x3 (suc x1)) (cons (app F x3) (lfnaux F (suc x3) x1))) (eq (nth x2 (lfnaux F x3 (suc x1))) (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1)))))
              (ntheq2 (x2 (lfnaux F x3 (suc x1)) (cons (app F x3) (lfnaux F (suc x3) x1))))
              (lfnauxS (F x3 x1)))
            (casesd ((an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0)) (eq (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2)))))
              (exp ((an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0)) (eq (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2)))))
                (eqtr4d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))) (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F x3)) (suc (app F (add x3 x2))))
                  (syl6eq ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))) (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (nth (d0) (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F x3)))
                    (nthZ ((app F x3) (lfnaux F (suc x3) x1)))
                    (ntheq1d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))) x2 (d0) (cons (app F x3) (lfnaux F (suc x3) x1)))
                      H13))
                  (suceqd ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))) (app F (add x3 x2)) (app F x3))
                    (appeq2d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))) F (add x3 x2) x3)
                      (syl6eq ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))) (add x3 x2) (add x3 (d0)) x3)
                        (add02 (x3))
                        (addeq2d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (d0))) x3 x2 (d0))
                          H13))))))
              (syl5bi ((an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (not (eq x2 (d0))) (ex x4 (eq x2 (suc x4))) (eq (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2)))))
                (:conv (iff (not (eq x2 (d0))) (ex x4 (eq x2 (suc x4))))
                  (iff
                    (:sym (:unfold ne (x2 (d0)) ()
                      (not (eq x2 (d0)))))
                    (ex x4 (eq x2 (suc x4))))
                  (exsuc (x4 x2)))
                (eexdh (x4 (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4)) (eq (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2)))))
                  (nfan (x4 (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1)))
                    (nfal1 (x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))))
                    (nfv ((lt x2 (suc x1)) x4)))
                  (nfv ((eq (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2)))) x4))
                  (exp ((an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4)) (eq (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2)))))
                    (eqtrd ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (nth x2 (cons (app F x3) (lfnaux F (suc x3) x1))) (nth (suc x4) (cons (app F x3) (lfnaux F (suc x3) x1))) (suc (app F (add x3 x2))))
                      (ntheq1d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) x2 (suc x4) (cons (app F x3) (lfnaux F (suc x3) x1)))
                        H14)
                      (syl5eq ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (nth (suc x4) (cons (app F x3) (lfnaux F (suc x3) x1))) (nth x4 (lfnaux F (suc x3) x1)) (suc (app F (add x3 x2))))
                        (nthS (x4 (app F x3) (lfnaux F (suc x3) x1)))
                        (eqtr4d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (nth x4 (lfnaux F (suc x3) x1)) (suc (app F (add (suc x3) x4))) (suc (app F (add x3 x2))))
                          (mpd ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (lt x4 x1) (eq (nth x4 (lfnaux F (suc x3) x1)) (suc (app F (add (suc x3) x4)))))
                            (sylibr ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (lt (suc x4) (suc x1)) (lt x4 x1))
                              (ltsuc (x4 x1))
                              (mpbid ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (lt x2 (suc x1)) (lt (suc x4) (suc x1)))
                                (lteq1d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) x2 (suc x4) (suc x1))
                                  H14)
                                (anlr ((al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1)) (eq x2 (suc x4))))))
                            (rsyl ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4)))))) (im (lt x4 x1) (eq (nth x4 (lfnaux F (suc x3) x1)) (suc (app F (add (suc x3) x4))))))
                              (anwll ((al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1)) (eq x2 (suc x4)) (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4)))))))
                                (eal (x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4)))))))))
                              (eale (x5 (suc x3) (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))) (im (lt x4 x1) (eq (nth x4 (lfnaux F (suc x3) x1)) (suc (app F (add (suc x3) x4))))))
                                (imeq2d ((eq x5 (suc x3)) (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4)))) (eq (nth x4 (lfnaux F (suc x3) x1)) (suc (app F (add (suc x3) x4)))))
                                  (eqeqd ((eq x5 (suc x3)) (nth x4 (lfnaux F x5 x1)) (nth x4 (lfnaux F (suc x3) x1)) (suc (app F (add x5 x4))) (suc (app F (add (suc x3) x4))))
                                    (ntheq2d ((eq x5 (suc x3)) x4 (lfnaux F x5 x1) (lfnaux F (suc x3) x1))
                                      (lfnauxeq2 (F x5 (suc x3) x1)))
                                    (suceqd ((eq x5 (suc x3)) (app F (add x5 x4)) (app F (add (suc x3) x4)))
                                      (appeq2d ((eq x5 (suc x3)) F (add x5 x4) (add (suc x3) x4))
                                        (addeq1 (x5 (suc x3) x4)))))))))
                          (suceqd ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (app F (add x3 x2)) (app F (add (suc x3) x4)))
                            (appeq2d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) F (add x3 x2) (add (suc x3) x4))
                              (syl6eqr ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) (add x3 x2) (add x3 (suc x4)) (add (suc x3) x4))
                                (addSass (x3 x4))
                                (addeq2d ((an (an (al x4 (al x5 (im (lt x4 x1) (eq (nth x4 (lfnaux F x5 x1)) (suc (app F (add x5 x4))))))) (lt x2 (suc x1))) (eq x2 (suc x4))) x3 x2 (suc x4))
                                  H14))))))))))))))))))))))))))))))))

(local def lfn ((F set ()) (n nat ())) (nat ())
()
(lfnaux F (d0) n))

(local theorem lfneqd ((_G wff ()) (_F1 set ()) (_F2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_Fh (im _G (eqs _F1 _F2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (lfn _F1 _n1) (lfn _F2 _n2)))
()
(:conv (im _G (eq (lfn _F1 _n1) (lfn _F2 _n2)))
  (im
    _G
    (eq
      (:unfold lfn (_F1 _n1) ()
        (lfnaux _F1 (d0) _n1))
      (:unfold lfn (_F2 _n2) ()
        (lfnaux _F2 (d0) _n2))))
  (lfnauxeqd (_G _F1 _F2 (d0) (d0) _n1 _n2)
    _Fh
    (eqidd (_G (d0)))
    _nh)))

(local theorem lfneq ((_F1 set ()) (_F2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eqs _F1 _F2) (im (eq _n1 _n2) (eq (lfn _F1 _n1) (lfn _F2 _n2))))
()
(exp ((eqs _F1 _F2) (eq _n1 _n2) (eq (lfn _F1 _n1) (lfn _F2 _n2)))
  (lfneqd ((an (eqs _F1 _F2) (eq _n1 _n2)) _F1 _F2 _n1 _n2)
    (anl ((eqs _F1 _F2) (eq _n1 _n2)))
    (anr ((eqs _F1 _F2) (eq _n1 _n2))))))

(local theorem lfneq1d ((_G wff ()) (_F1 set ()) (_F2 set ()) (n nat ()))
  ((_h (im _G (eqs _F1 _F2))))
  (im _G (eq (lfn _F1 n) (lfn _F2 n)))
()
(lfneqd (_G _F1 _F2 n n)
  _h
  (eqidd (_G n))))

(local theorem lfneq1 ((_F1 set ()) (_F2 set ()) (n nat ())) ()
  (im (eqs _F1 _F2) (eq (lfn _F1 n) (lfn _F2 n)))
()
(lfneq1d ((eqs _F1 _F2) _F1 _F2 n)
  (id ((eqs _F1 _F2)))))

(local theorem lfneq2d ((_G wff ()) (F set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (lfn F _n1) (lfn F _n2)))
()
(lfneqd (_G F F _n1 _n2)
  (eqsidd (_G F))
  _h))

(local theorem lfneq2 ((F set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (lfn F _n1) (lfn F _n2)))
()
(lfneq2d ((eq _n1 _n2) F _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem lfn0 ((F set ())) ()
  (eq (lfn F (d0)) (d0))
()
(:conv (eq (lfn F (d0)) (d0))
  (eq
    (:unfold lfn (F (d0)) ()
      (lfnaux F (d0) (d0)))
    (d0))
  (lfnaux0 (F (d0)))))

(local theorem lfnS ((F set ()) (i nat) (n nat ())) ()
  (eq (lfn F (suc n)) (cons (app F (d0)) (lfn (lam i (app F (suc i))) n)))
((x1 nat))
(ax_mp ((eq (cons (app F (d0)) (lfn (lam i (app F (suc i))) n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))) (eq (lfn F (suc n)) (cons (app F (d0)) (lfn (lam i (app F (suc i))) n))))
  (ax_mp ((eq (lfn F (suc n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))) (im (eq (cons (app F (d0)) (lfn (lam i (app F (suc i))) n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))) (eq (lfn F (suc n)) (cons (app F (d0)) (lfn (lam i (app F (suc i))) n)))))
    (eqtr4 ((lfn F (suc n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n)) (cons (app F (d0)) (lfn (lam i (app F (suc i))) n))))
    (:conv (eq (lfn F (suc n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n)))
      (eq
        (:unfold lfn (F (suc n)) ()
          (lfnaux F (d0) (suc n)))
        (cons (app F (d0)) (lfnaux F (suc (d0)) n)))
      (lfnauxS (F (d0) n))))
  (ax_mp ((eq (lfn (lam i (app F (suc i))) n) (lfnaux F (suc (d0)) n)) (eq (cons (app F (d0)) (lfn (lam i (app F (suc i))) n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))))
    (conseq2 ((app F (d0)) (lfn (lam i (app F (suc i))) n) (lfnaux F (suc (d0)) n)))
    (ax_mp ((al x1 (eq (app (lam i (app F (suc i))) (add (d0) x1)) (app F (add (suc (d0)) x1)))) (eq (lfn (lam i (app F (suc i))) n) (lfnaux F (suc (d0)) n)))
      (:conv (im (al x1 (eq (app (lam i (app F (suc i))) (add (d0) x1)) (app F (add (suc (d0)) x1)))) (eq (lfn (lam i (app F (suc i))) n) (lfnaux F (suc (d0)) n)))
        (im
          (al x1 (eq (app (lam i (app F (suc i))) (add (d0) x1)) (app F (add (suc (d0)) x1))))
          (eq
            (:unfold lfn ((lam i (app F (suc i))) n) ()
              (lfnaux (lam i (app F (suc i))) (d0) n))
            (lfnaux F (suc (d0)) n)))
        (lfnauxshift ((lam i (app F (suc i))) F x1 (d0) (suc (d0)) n)))
      (ax_gen (x1 (eq (app (lam i (app F (suc i))) (add (d0) x1)) (app F (add (suc (d0)) x1))))
        (applame ((add (d0) x1) (app F (add (suc (d0)) x1)) i (app F (suc i)))
          (appeq2d ((eq i (add (d0) x1)) F (suc i) (add (suc (d0)) x1))
            (syl6eqr ((eq i (add (d0) x1)) (suc i) (suc (add (d0) x1)) (add (suc (d0)) x1))
              (addS1 ((d0) x1))
              (suceq (i (add (d0) x1)))))))))))

(local theorem lenlfn ((F set ()) (n nat ())) ()
  (eq (len (lfn F n)) n)
()
(:conv (eq (len (lfn F n)) n)
  (eq
    (len
      (:unfold lfn (F n) ()
        (lfnaux F (d0) n)))
    n)
  (lfnauxlen (F (d0) n))))

(local theorem nthlfn ((F set ()) (i nat ()) (n nat ())) ()
  (im (lt i n) (eq (nth i (lfn F n)) (suc (app F i))))
()
(syl6eq ((lt i n) (nth i (lfn F n)) (suc (app F (add (d0) i))) (suc (app F i)))
  (ax_mp ((eq (app F (add (d0) i)) (app F i)) (eq (suc (app F (add (d0) i))) (suc (app F i))))
    (suceq ((app F (add (d0) i)) (app F i)))
    (ax_mp ((eq (add (d0) i) i) (eq (app F (add (d0) i)) (app F i)))
      (appeq2 (F (add (d0) i) i))
      (add01 (i))))
  (:conv (im (lt i n) (eq (nth i (lfn F n)) (suc (app F (add (d0) i)))))
    (im
      (lt i n)
      (eq
        (nth
          i
          (:unfold lfn (F n) ()
            (lfnaux F (d0) n)))
        (suc (app F (add (d0) i)))))
    (lfnauxnth (F i (d0) n)))))

(local theorem lfnnth ((i nat) (l nat ())) ()
  (eq (lfn (lam i (sub (nth i l) (d1))) (len l)) l)
((_1 nat) (x1 nat) (x2 nat) (x3 nat))
(:let H1 (id ((eq _1 l)))
(:let H2 (id ((eq _1 (d0))))
(:let H3 (id ((eq _1 x2)))
(:let H4 (id ((eq _1 (cons x1 x2))))
(listind (_1 x1 x2 l (eq (lfn (lam i (sub (nth i _1) (d1))) (len _1)) _1) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (d0)) (eq (lfn (lam i (sub (nth i l) (d1))) (len l)) l) (eq (lfn (lam i (sub (nth i x2) (d1))) (len x2)) x2) (eq (lfn (lam i (sub (nth i (cons x1 x2)) (d1))) (len (cons x1 x2))) (cons x1 x2)))
  (eqeqd ((eq _1 l) (lfn (lam i (sub (nth i _1) (d1))) (len _1)) (lfn (lam i (sub (nth i l) (d1))) (len l)) _1 l)
    (lfneqd ((eq _1 l) (lam i (sub (nth i _1) (d1))) (lam i (sub (nth i l) (d1))) (len _1) (len l))
      (lameqd ((eq _1 l) i (sub (nth i _1) (d1)) (sub (nth i l) (d1)))
        (subeqd ((eq _1 l) (nth i _1) (nth i l) (d1) (d1))
          (ntheqd ((eq _1 l) i i _1 l)
            (eqidd ((eq _1 l) i))
            H1)
          (eqidd ((eq _1 l) (d1)))))
      (leneqd ((eq _1 l) _1 l)
        H1))
    H1)
  (eqeqd ((eq _1 (d0)) (lfn (lam i (sub (nth i _1) (d1))) (len _1)) (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) _1 (d0))
    (lfneqd ((eq _1 (d0)) (lam i (sub (nth i _1) (d1))) (lam i (sub (nth i (d0)) (d1))) (len _1) (len (d0)))
      (lameqd ((eq _1 (d0)) i (sub (nth i _1) (d1)) (sub (nth i (d0)) (d1)))
        (subeqd ((eq _1 (d0)) (nth i _1) (nth i (d0)) (d1) (d1))
          (ntheqd ((eq _1 (d0)) i i _1 (d0))
            (eqidd ((eq _1 (d0)) i))
            H2)
          (eqidd ((eq _1 (d0)) (d1)))))
      (leneqd ((eq _1 (d0)) _1 (d0))
        H2))
    H2)
  (eqeqd ((eq _1 x2) (lfn (lam i (sub (nth i _1) (d1))) (len _1)) (lfn (lam i (sub (nth i x2) (d1))) (len x2)) _1 x2)
    (lfneqd ((eq _1 x2) (lam i (sub (nth i _1) (d1))) (lam i (sub (nth i x2) (d1))) (len _1) (len x2))
      (lameqd ((eq _1 x2) i (sub (nth i _1) (d1)) (sub (nth i x2) (d1)))
        (subeqd ((eq _1 x2) (nth i _1) (nth i x2) (d1) (d1))
          (ntheqd ((eq _1 x2) i i _1 x2)
            (eqidd ((eq _1 x2) i))
            H3)
          (eqidd ((eq _1 x2) (d1)))))
      (leneqd ((eq _1 x2) _1 x2)
        H3))
    H3)
  (eqeqd ((eq _1 (cons x1 x2)) (lfn (lam i (sub (nth i _1) (d1))) (len _1)) (lfn (lam i (sub (nth i (cons x1 x2)) (d1))) (len (cons x1 x2))) _1 (cons x1 x2))
    (lfneqd ((eq _1 (cons x1 x2)) (lam i (sub (nth i _1) (d1))) (lam i (sub (nth i (cons x1 x2)) (d1))) (len _1) (len (cons x1 x2)))
      (lameqd ((eq _1 (cons x1 x2)) i (sub (nth i _1) (d1)) (sub (nth i (cons x1 x2)) (d1)))
        (subeqd ((eq _1 (cons x1 x2)) (nth i _1) (nth i (cons x1 x2)) (d1) (d1))
          (ntheqd ((eq _1 (cons x1 x2)) i i _1 (cons x1 x2))
            (eqidd ((eq _1 (cons x1 x2)) i))
            H4)
          (eqidd ((eq _1 (cons x1 x2)) (d1)))))
      (leneqd ((eq _1 (cons x1 x2)) _1 (cons x1 x2))
        H4))
    H4)
  (ax_mp ((eq (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0)) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (d0)))
    (ax_mp ((eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (lfn (lam i (sub (nth i (d0)) (d1))) (d0))) (im (eq (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0)) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (d0))))
      (eqtr ((lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0)))
      (ax_mp ((eq (len (d0)) (d0)) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (lfn (lam i (sub (nth i (d0)) (d1))) (d0))))
        (lfneq2 ((lam i (sub (nth i (d0)) (d1))) (len (d0)) (d0)))
        (len0 ())))
    (:conv (eq (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0))
      (eq
        (:unfold lfn ((lam i (sub (nth i (d0)) (d1))) (d0)) ()
          (lfnaux (lam i (sub (nth i (d0)) (d1))) (d0) (d0)))
        (d0))
      (lfnaux0 ((lam i (sub (nth i (d0)) (d1))) (d0)))))
  (syl5eq ((eq (lfn (lam i (sub (nth i x2) (d1))) (len x2)) x2) (lfn (lam i (sub (nth i (cons x1 x2)) (d1))) (len (cons x1 x2))) (lfn (lam i (sub (nth i (cons x1 x2)) (d1))) (suc (len x2))) (cons x1 x2))
    (ax_mp ((eq (len (cons x1 x2)) (suc (len x2))) (eq (lfn (lam i (sub (nth i (cons x1 x2)) (d1))) (len (cons x1 x2))) (lfn (lam i (sub (nth i (cons x1 x2)) (d1))) (suc (len x2)))))
      (lfneq2 ((lam i (sub (nth i (cons x1 x2)) (d1))) (len (cons x1 x2)) (suc (len x2))))
      (lenS (x1 x2)))
    (syl5eq ((eq (lfn (lam i (sub (nth i x2) (d1))) (len x2)) x2) (lfn (lam i (sub (nth i (cons x1 x2)) (d1))) (suc (len x2))) (cons (app (lam i (sub (nth i (cons x1 x2)) (d1))) (d0)) (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2))) (cons x1 x2))
      (lfnS ((lam i (sub (nth i (cons x1 x2)) (d1))) x3 (len x2)))
      (syl5eq ((eq (lfn (lam i (sub (nth i x2) (d1))) (len x2)) x2) (cons (app (lam i (sub (nth i (cons x1 x2)) (d1))) (d0)) (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2))) (cons x1 (lfn (lam i (sub (nth i x2) (d1))) (len x2))) (cons x1 x2))
        (ax_mp ((eq (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2)) (lfn (lam i (sub (nth i x2) (d1))) (len x2))) (eq (cons (app (lam i (sub (nth i (cons x1 x2)) (d1))) (d0)) (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2))) (cons x1 (lfn (lam i (sub (nth i x2) (d1))) (len x2)))))
          (ax_mp ((eq (app (lam i (sub (nth i (cons x1 x2)) (d1))) (d0)) x1) (im (eq (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2)) (lfn (lam i (sub (nth i x2) (d1))) (len x2))) (eq (cons (app (lam i (sub (nth i (cons x1 x2)) (d1))) (d0)) (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2))) (cons x1 (lfn (lam i (sub (nth i x2) (d1))) (len x2))))))
            (conseq ((app (lam i (sub (nth i (cons x1 x2)) (d1))) (d0)) x1 (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2)) (lfn (lam i (sub (nth i x2) (d1))) (len x2))))
            (applame ((d0) x1 i (sub (nth i (cons x1 x2)) (d1)))
              (syl6eq ((eq i (d0)) (sub (nth i (cons x1 x2)) (d1)) (sub (suc x1) (d1)) x1)
                (sucsub1 (x1))
                (subeq1d ((eq i (d0)) (nth i (cons x1 x2)) (suc x1) (d1))
                  (syl6eq ((eq i (d0)) (nth i (cons x1 x2)) (nth (d0) (cons x1 x2)) (suc x1))
                    (nthZ (x1 x2))
                    (ntheq1 (i (d0) (cons x1 x2))))))))
          (ax_mp ((eqs (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (lam i (sub (nth i x2) (d1)))) (eq (lfn (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (len x2)) (lfn (lam i (sub (nth i x2) (d1))) (len x2))))
            (lfneq1 ((lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (lam i (sub (nth i x2) (d1))) (len x2)))
            (ax_mp ((eqs (lam x3 (sub (nth x3 x2) (d1))) (lam i (sub (nth i x2) (d1)))) (eqs (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (lam i (sub (nth i x2) (d1)))))
              (ax_mp ((eqs (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (lam x3 (sub (nth x3 x2) (d1)))) (im (eqs (lam x3 (sub (nth x3 x2) (d1))) (lam i (sub (nth i x2) (d1)))) (eqs (lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (lam i (sub (nth i x2) (d1))))))
                (eqstr ((lam x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3))) (lam x3 (sub (nth x3 x2) (d1))) (lam i (sub (nth i x2) (d1)))))
                (lameqi (x3 (app (lam i (sub (nth i (cons x1 x2)) (d1))) (suc x3)) (sub (nth x3 x2) (d1)))
                  (applame ((suc x3) (sub (nth x3 x2) (d1)) i (sub (nth i (cons x1 x2)) (d1)))
                    (subeq1d ((eq i (suc x3)) (nth i (cons x1 x2)) (nth x3 x2) (d1))
                      (syl6eq ((eq i (suc x3)) (nth i (cons x1 x2)) (nth (suc x3) (cons x1 x2)) (nth x3 x2))
                        (nthS (x3 x1 x2))
                        (ntheq1 (i (suc x3) (cons x1 x2))))))))
              (cbvlam (x3 i (sub (nth x3 x2) (d1)) (sub (nth i x2) (d1)))
                (subeq1d ((eq x3 i) (nth x3 x2) (nth i x2) (d1))
                  (ntheq1 (x3 i x2)))))))
        (conseq2 (x1 (lfn (lam i (sub (nth i x2) (d1))) (len x2)) x2)))))))))))

(local theorem nthext2d ((G wff ()) (l1 nat ()) (l2 nat ()) (n nat ()) (i nat))
  ((h1 (im G (eq (len l1) n)))
   (h2 (im G (eq (len l2) n)))
   (h3 (im (an G (lt i n)) (eq (nth i l1) (nth i l2)))))
  (im G (eq l1 l2))
()
(eqtr3g (G (lfn (lam i (sub (nth i l1) (d1))) (len l1)) (lfn (lam i (sub (nth i l2) (d1))) (len l2)) l1 l2)
  (lfnnth (i l1))
  (lfnnth (i l2))
  (lfneqd (G (lam i (sub (nth i l1) (d1))) (lam i (sub (nth i l2) (d1))) (len l1) (len l2))
    (lameqd (G i (sub (nth i l1) (d1)) (sub (nth i l2) (d1)))
      (subeq1d (G (nth i l1) (nth i l2) (d1))
        (casesda (G (lt i n) (eq (nth i l1) (nth i l2)))
          h3
          (eqtr4d ((an G (not (lt i n))) (nth i l1) (d0) (nth i l2))
            (imp (G (not (lt i n)) (eq (nth i l1) (d0)))
              (con1d (G (eq (nth i l1) (d0)) (lt i n))
                (syl5bi (G (not (eq (nth i l1) (d0))) (lt i (len l1)) (lt i n))
                  (:conv (iff (not (eq (nth i l1) (d0))) (lt i (len l1)))
                    (iff
                      (:sym (:unfold ne ((nth i l1) (d0)) ()
                        (not (eq (nth i l1) (d0)))))
                      (lt i (len l1)))
                    (nthne0 (l1 i)))
                  (bi1d (G (lt i (len l1)) (lt i n))
                    (lteq2d (G i (len l1) n)
                      h1)))))
            (imp (G (not (lt i n)) (eq (nth i l2) (d0)))
              (con1d (G (eq (nth i l2) (d0)) (lt i n))
                (syl5bi (G (not (eq (nth i l2) (d0))) (lt i (len l2)) (lt i n))
                  (:conv (iff (not (eq (nth i l2) (d0))) (lt i (len l2)))
                    (iff
                      (:sym (:unfold ne ((nth i l2) (d0)) ()
                        (not (eq (nth i l2) (d0)))))
                      (lt i (len l2)))
                    (nthne0 (l2 i)))
                  (bi1d (G (lt i (len l2)) (lt i n))
                    (lteq2d (G i (len l2) n)
                      h2)))))))))
    (eqtr4d (G (len l1) n (len l2))
      h1
      h2))))

(local theorem nthext2 ((l1 nat ()) (l2 nat ()) (n nat ()) (i nat))
  ((h1 (eq (len l1) n))
   (h2 (eq (len l2) n))
   (h3 (im (lt i n) (eq (nth i l1) (nth i l2)))))
  (eq l1 l2)
()
(trud ((eq l1 l2))
  (nthext2d ((tru) l1 l2 n i)
    (a1i ((tru) (eq (len l1) n))
      h1)
    (a1i ((tru) (eq (len l2) n))
      h2)
    (anwr ((tru) (lt i n) (eq (nth i l1) (nth i l2)))
      h3))))

(local theorem nthext ((l1 nat ()) (l2 nat ()) (n nat)) ()
  (iff (eq l1 l2) (al n (eq (nth n l1) (nth n l2))))
((x1 nat))
(ibii ((eq l1 l2) (al n (eq (nth n l1) (nth n l2))))
  (iald (n (eq l1 l2) (eq (nth n l1) (nth n l2)))
    (ntheq2 (n l1 l2)))
  (nthext2d ((al n (eq (nth n l1) (nth n l2))) l1 l2 (len l2) x1)
    (sylibr ((al n (eq (nth n l1) (nth n l2))) (al n (iff (lt n (len l1)) (lt n (len l2)))) (eq (len l1) (len l2)))
      (eqallt1 ((len l1) (len l2) n))
      (alimi (n (eq (nth n l1) (nth n l2)) (iff (lt n (len l1)) (lt n (len l2))))
        (bitr3g ((eq (nth n l1) (nth n l2)) (ne (nth n l1) (d0)) (ne (nth n l2) (d0)) (lt n (len l1)) (lt n (len l2)))
          (nthne0 (l1 n))
          (nthne0 (l2 n))
          (neeq1 ((nth n l1) (nth n l2) (d0))))))
    (eqidd ((al n (eq (nth n l1) (nth n l2))) (len l2)))
    (anwl ((al n (eq (nth n l1) (nth n l2))) (lt x1 (len l2)) (eq (nth x1 l1) (nth x1 l2)))
      (eale (n x1 (eq (nth n l1) (nth n l2)) (eq (nth x1 l1) (nth x1 l2)))
        (eqeqd ((eq n x1) (nth n l1) (nth x1 l1) (nth n l2) (nth x1 l2))
          (ntheq1 (n x1 l1))
          (ntheq1 (n x1 l2))))))))

(local def zip ((l1 nat ()) (l2 nat ())) (nat ())
((i nat))
(lfn (lam i (pr (sub (nth i l1) (d1)) (sub (nth i l2) (d1)))) (min (len l1) (len l2))))

(local theorem zipeqd ((_G wff ()) (_l11 nat ()) (_l12 nat ()) (_l21 nat ()) (_l22 nat ()))
  ((_l1h (im _G (eq _l11 _l12)))
   (_l2h (im _G (eq _l21 _l22))))
  (im _G (eq (zip _l11 _l21) (zip _l12 _l22)))
((i nat))
(:let H1 (eqidd (_G i))
(:let H2 (eqidd (_G (d1)))
(:conv (im _G (eq (zip _l11 _l21) (zip _l12 _l22)))
  (im
    _G
    (eq
      (:unfold zip (_l11 _l21) (i)
        (lfn (lam i (pr (sub (nth i _l11) (d1)) (sub (nth i _l21) (d1)))) (min (len _l11) (len _l21))))
      (:unfold zip (_l12 _l22) (i)
        (lfn (lam i (pr (sub (nth i _l12) (d1)) (sub (nth i _l22) (d1)))) (min (len _l12) (len _l22))))))
  (lfneqd (_G (lam i (pr (sub (nth i _l11) (d1)) (sub (nth i _l21) (d1)))) (lam i (pr (sub (nth i _l12) (d1)) (sub (nth i _l22) (d1)))) (min (len _l11) (len _l21)) (min (len _l12) (len _l22)))
    (lameqd (_G i (pr (sub (nth i _l11) (d1)) (sub (nth i _l21) (d1))) (pr (sub (nth i _l12) (d1)) (sub (nth i _l22) (d1))))
      (preqd (_G (sub (nth i _l11) (d1)) (sub (nth i _l12) (d1)) (sub (nth i _l21) (d1)) (sub (nth i _l22) (d1)))
        (subeqd (_G (nth i _l11) (nth i _l12) (d1) (d1))
          (ntheqd (_G i i _l11 _l12)
            H1
            _l1h)
          H2)
        (subeqd (_G (nth i _l21) (nth i _l22) (d1) (d1))
          (ntheqd (_G i i _l21 _l22)
            H1
            _l2h)
          H2)))
    (mineqd (_G (len _l11) (len _l12) (len _l21) (len _l22))
      (leneqd (_G _l11 _l12)
        _l1h)
      (leneqd (_G _l21 _l22)
        _l2h)))))))

(local theorem zipeq ((_l11 nat ()) (_l12 nat ()) (_l21 nat ()) (_l22 nat ())) ()
  (im (eq _l11 _l12) (im (eq _l21 _l22) (eq (zip _l11 _l21) (zip _l12 _l22))))
()
(exp ((eq _l11 _l12) (eq _l21 _l22) (eq (zip _l11 _l21) (zip _l12 _l22)))
  (zipeqd ((an (eq _l11 _l12) (eq _l21 _l22)) _l11 _l12 _l21 _l22)
    (anl ((eq _l11 _l12) (eq _l21 _l22)))
    (anr ((eq _l11 _l12) (eq _l21 _l22))))))

(local theorem zipeq1d ((_G wff ()) (_l11 nat ()) (_l12 nat ()) (l2 nat ()))
  ((_h (im _G (eq _l11 _l12))))
  (im _G (eq (zip _l11 l2) (zip _l12 l2)))
()
(zipeqd (_G _l11 _l12 l2 l2)
  _h
  (eqidd (_G l2))))

(local theorem zipeq1 ((_l11 nat ()) (_l12 nat ()) (l2 nat ())) ()
  (im (eq _l11 _l12) (eq (zip _l11 l2) (zip _l12 l2)))
()
(zipeq1d ((eq _l11 _l12) _l11 _l12 l2)
  (id ((eq _l11 _l12)))))

(local theorem zipeq2d ((_G wff ()) (l1 nat ()) (_l21 nat ()) (_l22 nat ()))
  ((_h (im _G (eq _l21 _l22))))
  (im _G (eq (zip l1 _l21) (zip l1 _l22)))
()
(zipeqd (_G l1 l1 _l21 _l22)
  (eqidd (_G l1))
  _h))

(local theorem zipeq2 ((l1 nat ()) (_l21 nat ()) (_l22 nat ())) ()
  (im (eq _l21 _l22) (eq (zip l1 _l21) (zip l1 _l22)))
()
(zipeq2d ((eq _l21 _l22) l1 _l21 _l22)
  (id ((eq _l21 _l22)))))

(local theorem ziplen ((l1 nat ()) (l2 nat ())) ()
  (eq (len (zip l1 l2)) (min (len l1) (len l2)))
((x1 nat))
(:conv (eq (len (zip l1 l2)) (min (len l1) (len l2)))
  (eq
    (len
      (:unfold zip (l1 l2) (x1)
        (lfn (lam x1 (pr (sub (nth x1 l1) (d1)) (sub (nth x1 l2) (d1)))) (min (len l1) (len l2)))))
    (min (len l1) (len l2)))
  (lenlfn ((lam x1 (pr (sub (nth x1 l1) (d1)) (sub (nth x1 l2) (d1)))) (min (len l1) (len l2))))))

(local theorem zipnth ((G wff ()) (a nat ()) (b nat ()) (i nat ()) (l1 nat ()) (l2 nat ()))
  ((h1 (im G (eq (nth i l1) (suc a))))
   (h2 (im G (eq (nth i l2) (suc b)))))
  (im G (eq (nth i (zip l1 l2)) (suc (pr a b))))
((x nat))
(:let H1 (anr (G (eq x i)))
(eqtrd (G (nth i (zip l1 l2)) (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i)) (suc (pr a b)))
  (syl (G (lt i (min (len l1) (len l2))) (eq (nth i (zip l1 l2)) (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i))))
    (:conv (im (lt i (min (len l1) (len l2))) (eq (nth i (zip l1 l2)) (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i))))
      (im
        (lt i (min (len l1) (len l2)))
        (eq
          (nth
            i
            (:unfold zip (l1 l2) (x)
              (lfn (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) (min (len l1) (len l2)))))
          (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i))))
      (nthlfn ((lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i (min (len l1) (len l2)))))
    (sylibr (G (an (lt i (len l1)) (lt i (len l2))) (lt i (min (len l1) (len l2))))
      (ltmin (i (len l1) (len l2)))
      (iand (G (lt i (len l1)) (lt i (len l2)))
        (sylib (G (ne (nth i l1) (d0)) (lt i (len l1)))
          (nthne0 (l1 i))
          (syl (G (eq (nth i l1) (suc a)) (ne (nth i l1) (d0)))
            (sucne0 ((nth i l1) a))
            h1))
        (sylib (G (ne (nth i l2) (d0)) (lt i (len l2)))
          (nthne0 (l2 i))
          (syl (G (eq (nth i l2) (suc b)) (ne (nth i l2) (d0)))
            (sucne0 ((nth i l2) b))
            h2)))))
  (suceqd (G (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i) (pr a b))
    (applamed (G i (pr a b) x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1))))
      (preqd ((an G (eq x i)) (sub (nth x l1) (d1)) a (sub (nth x l2) (d1)) b)
        (syl6eq ((an G (eq x i)) (sub (nth x l1) (d1)) (sub (suc a) (d1)) a)
          (sucsub1 (a))
          (subeq1d ((an G (eq x i)) (nth x l1) (suc a) (d1))
            (eqtrd ((an G (eq x i)) (nth x l1) (nth i l1) (suc a))
              (ntheq1d ((an G (eq x i)) x i l1)
                H1)
              (anwl (G (eq x i) (eq (nth i l1) (suc a)))
                h1))))
        (syl6eq ((an G (eq x i)) (sub (nth x l2) (d1)) (sub (suc b) (d1)) b)
          (sucsub1 (b))
          (subeq1d ((an G (eq x i)) (nth x l2) (suc b) (d1))
            (eqtrd ((an G (eq x i)) (nth x l2) (nth i l2) (suc b))
              (ntheq1d ((an G (eq x i)) x i l2)
                H1)
              (anwl (G (eq x i) (eq (nth i l2) (suc b)))
                h2))))))))))

(local theorem zip01 ((l nat ())) ()
  (eq (zip (d0) l) (d0))
()
(mpbi ((eq (len (zip (d0) l)) (d0)) (eq (zip (d0) l) (d0)))
  (leneq0 ((zip (d0) l)))
  (ax_mp ((eq (min (len (d0)) (len l)) (d0)) (eq (len (zip (d0) l)) (d0)))
    (ax_mp ((eq (len (zip (d0) l)) (min (len (d0)) (len l))) (im (eq (min (len (d0)) (len l)) (d0)) (eq (len (zip (d0) l)) (d0))))
      (eqtr ((len (zip (d0) l)) (min (len (d0)) (len l)) (d0)))
      (ziplen ((d0) l)))
    (ax_mp ((eq (min (d0) (len l)) (d0)) (eq (min (len (d0)) (len l)) (d0)))
      (ax_mp ((eq (min (len (d0)) (len l)) (min (d0) (len l))) (im (eq (min (d0) (len l)) (d0)) (eq (min (len (d0)) (len l)) (d0))))
        (eqtr ((min (len (d0)) (len l)) (min (d0) (len l)) (d0)))
        (ax_mp ((eq (len (d0)) (d0)) (eq (min (len (d0)) (len l)) (min (d0) (len l))))
          (mineq1 ((len (d0)) (d0) (len l)))
          (len0 ())))
      (ax_mp ((le (d0) (len l)) (eq (min (d0) (len l)) (d0)))
        (eqmin1 ((d0) (len l)))
        (le01 ((len l))))))))

(local theorem zip02 ((l nat ())) ()
  (eq (zip l (d0)) (d0))
()
(mpbi ((eq (len (zip l (d0))) (d0)) (eq (zip l (d0)) (d0)))
  (leneq0 ((zip l (d0))))
  (ax_mp ((eq (min (len l) (len (d0))) (d0)) (eq (len (zip l (d0))) (d0)))
    (ax_mp ((eq (len (zip l (d0))) (min (len l) (len (d0)))) (im (eq (min (len l) (len (d0))) (d0)) (eq (len (zip l (d0))) (d0))))
      (eqtr ((len (zip l (d0))) (min (len l) (len (d0))) (d0)))
      (ziplen (l (d0))))
    (ax_mp ((eq (min (len l) (d0)) (d0)) (eq (min (len l) (len (d0))) (d0)))
      (ax_mp ((eq (min (len l) (len (d0))) (min (len l) (d0))) (im (eq (min (len l) (d0)) (d0)) (eq (min (len l) (len (d0))) (d0))))
        (eqtr ((min (len l) (len (d0))) (min (len l) (d0)) (d0)))
        (ax_mp ((eq (len (d0)) (d0)) (eq (min (len l) (len (d0))) (min (len l) (d0))))
          (mineq2 ((len l) (len (d0)) (d0)))
          (len0 ())))
      (ax_mp ((le (d0) (len l)) (eq (min (len l) (d0)) (d0)))
        (eqmin2 ((len l) (d0)))
        (le01 ((len l))))))))

(local theorem zipS ((a nat ()) (b nat ()) (l1 nat ()) (l2 nat ())) ()
  (eq (zip (cons a l1) (cons b l2)) (cons (pr a b) (zip l1 l2)))
((m nat) (n nat))
(:let H1 (id ((eq m n)))
(:let H2 (eqidd ((eq m n) (suc (min (len l1) (len l2)))))
(:let H3 (lteqd ((eq m n) m n (suc (min (len l1) (len l2))) (suc (min (len l1) (len l2))))
  H1
  H2)
(:let H4 (eqidd ((eq m n) (zip (cons a l1) (cons b l2))))
(:let H5 (ntheqd ((eq m n) m n (zip (cons a l1) (cons b l2)) (zip (cons a l1) (cons b l2)))
  H1
  H4)
(:let H6 (eqidd ((eq m n) (cons (pr a b) (zip l1 l2))))
(:let H7 (ntheqd ((eq m n) m n (cons (pr a b) (zip l1 l2)) (cons (pr a b) (zip l1 l2)))
  H1
  H6)
(:let H8 (eqeqd ((eq m n) (nth m (zip (cons a l1) (cons b l2))) (nth n (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))) (nth n (cons (pr a b) (zip l1 l2))))
  H5
  H7)
(:let H9 (imeqd ((eq m n) (lt m (suc (min (len l1) (len l2)))) (lt n (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2)))))
  H3
  H8)
(:let H10 (id ((eq m (d0))))
(:let H11 (id ((eq m (suc n))))
(:let H12 (eqcomd ((an (lt n (len l1)) (lt n (len l2))) (suc (sub (nth n l1) (d1))) (nth n l1))
  (syl ((an (lt n (len l1)) (lt n (len l2))) (ne (nth n l1) (d0)) (eq (suc (sub (nth n l1) (d1))) (nth n l1)))
    (sub1can ((nth n l1)))
    (sylibr ((an (lt n (len l1)) (lt n (len l2))) (lt n (len l1)) (ne (nth n l1) (d0)))
      (nthne0 (l1 n))
      (anl ((lt n (len l1)) (lt n (len l2)))))))
(:let H13 (eqcomd ((an (lt n (len l1)) (lt n (len l2))) (suc (sub (nth n l2) (d1))) (nth n l2))
  (syl ((an (lt n (len l1)) (lt n (len l2))) (ne (nth n l2) (d0)) (eq (suc (sub (nth n l2) (d1))) (nth n l2)))
    (sub1can ((nth n l2)))
    (sylibr ((an (lt n (len l1)) (lt n (len l2))) (lt n (len l2)) (ne (nth n l2) (d0)))
      (nthne0 (l2 n))
      (anr ((lt n (len l1)) (lt n (len l2)))))))
(nthext2 ((zip (cons a l1) (cons b l2)) (cons (pr a b) (zip l1 l2)) (suc (min (len l1) (len l2))) n)
  (ax_mp ((eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))) (eq (len (zip (cons a l1) (cons b l2))) (suc (min (len l1) (len l2)))))
    (ax_mp ((eq (len (zip (cons a l1) (cons b l2))) (min (len (cons a l1)) (len (cons b l2)))) (im (eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))) (eq (len (zip (cons a l1) (cons b l2))) (suc (min (len l1) (len l2))))))
      (eqtr ((len (zip (cons a l1) (cons b l2))) (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))))
      (ziplen ((cons a l1) (cons b l2))))
    (ax_mp ((eq (suc (min (len l1) (len l2))) (min (suc (len l1)) (suc (len l2)))) (eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))))
      (ax_mp ((eq (min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2)))) (im (eq (suc (min (len l1) (len l2))) (min (suc (len l1)) (suc (len l2)))) (eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2))))))
        (eqtr4 ((min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2))) (suc (min (len l1) (len l2)))))
        (ax_mp ((eq (len (cons b l2)) (suc (len l2))) (eq (min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2)))))
          (ax_mp ((eq (len (cons a l1)) (suc (len l1))) (im (eq (len (cons b l2)) (suc (len l2))) (eq (min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2))))))
            (mineq ((len (cons a l1)) (suc (len l1)) (len (cons b l2)) (suc (len l2))))
            (lenS (a l1)))
          (lenS (b l2))))
      (minS ((len l1) (len l2)))))
  (ax_mp ((eq (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))) (eq (len (cons (pr a b) (zip l1 l2))) (suc (min (len l1) (len l2)))))
    (ax_mp ((eq (len (cons (pr a b) (zip l1 l2))) (suc (len (zip l1 l2)))) (im (eq (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))) (eq (len (cons (pr a b) (zip l1 l2))) (suc (min (len l1) (len l2))))))
      (eqtr ((len (cons (pr a b) (zip l1 l2))) (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))))
      (lenS ((pr a b) (zip l1 l2))))
    (ax_mp ((eq (len (zip l1 l2)) (min (len l1) (len l2))) (eq (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))))
      (suceq ((len (zip l1 l2)) (min (len l1) (len l2))))
      (ziplen (l1 l2))))
  (ind (m n n (im (lt m (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))))) (im (lt (d0) (suc (min (len l1) (len l2)))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2))))) (im (lt n (suc (min (len l1) (len l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2))))) (im (lt n (suc (min (len l1) (len l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2))))) (im (lt (suc n) (suc (min (len l1) (len l2)))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2))))))
    H9
    (imeqd ((eq m (d0)) (lt m (suc (min (len l1) (len l2)))) (lt (d0) (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2)))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2)))))
      (lteqd ((eq m (d0)) m (d0) (suc (min (len l1) (len l2))) (suc (min (len l1) (len l2))))
        H10
        (eqidd ((eq m (d0)) (suc (min (len l1) (len l2))))))
      (eqeqd ((eq m (d0)) (nth m (zip (cons a l1) (cons b l2))) (nth (d0) (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))) (nth (d0) (cons (pr a b) (zip l1 l2))))
        (ntheqd ((eq m (d0)) m (d0) (zip (cons a l1) (cons b l2)) (zip (cons a l1) (cons b l2)))
          H10
          (eqidd ((eq m (d0)) (zip (cons a l1) (cons b l2)))))
        (ntheqd ((eq m (d0)) m (d0) (cons (pr a b) (zip l1 l2)) (cons (pr a b) (zip l1 l2)))
          H10
          (eqidd ((eq m (d0)) (cons (pr a b) (zip l1 l2)))))))
    H9
    (imeqd ((eq m (suc n)) (lt m (suc (min (len l1) (len l2)))) (lt (suc n) (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2)))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2)))))
      (lteqd ((eq m (suc n)) m (suc n) (suc (min (len l1) (len l2))) (suc (min (len l1) (len l2))))
        H11
        (eqidd ((eq m (suc n)) (suc (min (len l1) (len l2))))))
      (eqeqd ((eq m (suc n)) (nth m (zip (cons a l1) (cons b l2))) (nth (suc n) (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))) (nth (suc n) (cons (pr a b) (zip l1 l2))))
        (ntheqd ((eq m (suc n)) m (suc n) (zip (cons a l1) (cons b l2)) (zip (cons a l1) (cons b l2)))
          H11
          (eqidd ((eq m (suc n)) (zip (cons a l1) (cons b l2)))))
        (ntheqd ((eq m (suc n)) m (suc n) (cons (pr a b) (zip l1 l2)) (cons (pr a b) (zip l1 l2)))
          H11
          (eqidd ((eq m (suc n)) (cons (pr a b) (zip l1 l2)))))))
    (a1i ((lt (d0) (suc (min (len l1) (len l2)))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2)))))
      (ax_mp ((eq (nth (d0) (cons (pr a b) (zip l1 l2))) (suc (pr a b))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2)))))
        (ax_mp ((eq (nth (d0) (zip (cons a l1) (cons b l2))) (suc (pr a b))) (im (eq (nth (d0) (cons (pr a b) (zip l1 l2))) (suc (pr a b))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2))))))
          (eqtr4 ((nth (d0) (zip (cons a l1) (cons b l2))) (suc (pr a b)) (nth (d0) (cons (pr a b) (zip l1 l2)))))
          (trud ((eq (nth (d0) (zip (cons a l1) (cons b l2))) (suc (pr a b))))
            (zipnth ((tru) a b (d0) (cons a l1) (cons b l2))
              (a1i ((tru) (eq (nth (d0) (cons a l1)) (suc a)))
                (nthZ (a l1)))
              (a1i ((tru) (eq (nth (d0) (cons b l2)) (suc b)))
                (nthZ (b l2))))))
        (nthZ ((pr a b) (zip l1 l2)))))
    (a1i ((im (lt n (suc (min (len l1) (len l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2))))) (im (lt (suc n) (suc (min (len l1) (len l2)))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2))))))
      (sylbir ((lt (suc n) (suc (min (len l1) (len l2)))) (lt n (min (len l1) (len l2))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2)))))
        (ltsuc (n (min (len l1) (len l2))))
        (syl6eqr ((lt n (min (len l1) (len l2))) (nth (suc n) (zip (cons a l1) (cons b l2))) (nth n (zip l1 l2)) (nth (suc n) (cons (pr a b) (zip l1 l2))))
          (nthS (n (pr a b) (zip l1 l2)))
          (sylbi ((lt n (min (len l1) (len l2))) (an (lt n (len l1)) (lt n (len l2))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth n (zip l1 l2))))
            (ltmin (n (len l1) (len l2)))
            (eqtr4d ((an (lt n (len l1)) (lt n (len l2))) (nth (suc n) (zip (cons a l1) (cons b l2))) (suc (pr (sub (nth n l1) (d1)) (sub (nth n l2) (d1)))) (nth n (zip l1 l2)))
              (zipnth ((an (lt n (len l1)) (lt n (len l2))) (sub (nth n l1) (d1)) (sub (nth n l2) (d1)) (suc n) (cons a l1) (cons b l2))
                (syl5eq ((an (lt n (len l1)) (lt n (len l2))) (nth (suc n) (cons a l1)) (nth n l1) (suc (sub (nth n l1) (d1))))
                  (nthS (n a l1))
                  H12)
                (syl5eq ((an (lt n (len l1)) (lt n (len l2))) (nth (suc n) (cons b l2)) (nth n l2) (suc (sub (nth n l2) (d1))))
                  (nthS (n b l2))
                  H13))
              (zipnth ((an (lt n (len l1)) (lt n (len l2))) (sub (nth n l1) (d1)) (sub (nth n l2) (d1)) n l1 l2)
                H12
                H13))))))))))))))))))))))

(local def take ((l nat ()) (n nat ())) (nat ())
((i nat))
(lfn (lam i (sub (nth i l) (d1))) (min (len l) n)))

(local theorem takeeqd ((_G wff ()) (_l1 nat ()) (_l2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_lh (im _G (eq _l1 _l2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (take _l1 _n1) (take _l2 _n2)))
((i nat))
(:conv (im _G (eq (take _l1 _n1) (take _l2 _n2)))
  (im
    _G
    (eq
      (:unfold take (_l1 _n1) (i)
        (lfn (lam i (sub (nth i _l1) (d1))) (min (len _l1) _n1)))
      (:unfold take (_l2 _n2) (i)
        (lfn (lam i (sub (nth i _l2) (d1))) (min (len _l2) _n2)))))
  (lfneqd (_G (lam i (sub (nth i _l1) (d1))) (lam i (sub (nth i _l2) (d1))) (min (len _l1) _n1) (min (len _l2) _n2))
    (lameqd (_G i (sub (nth i _l1) (d1)) (sub (nth i _l2) (d1)))
      (subeqd (_G (nth i _l1) (nth i _l2) (d1) (d1))
        (ntheqd (_G i i _l1 _l2)
          (eqidd (_G i))
          _lh)
        (eqidd (_G (d1)))))
    (mineqd (_G (len _l1) (len _l2) _n1 _n2)
      (leneqd (_G _l1 _l2)
        _lh)
      _nh))))

(local theorem takeeq ((_l1 nat ()) (_l2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _l1 _l2) (im (eq _n1 _n2) (eq (take _l1 _n1) (take _l2 _n2))))
()
(exp ((eq _l1 _l2) (eq _n1 _n2) (eq (take _l1 _n1) (take _l2 _n2)))
  (takeeqd ((an (eq _l1 _l2) (eq _n1 _n2)) _l1 _l2 _n1 _n2)
    (anl ((eq _l1 _l2) (eq _n1 _n2)))
    (anr ((eq _l1 _l2) (eq _n1 _n2))))))

(local theorem takeeq1d ((_G wff ()) (_l1 nat ()) (_l2 nat ()) (n nat ()))
  ((_h (im _G (eq _l1 _l2))))
  (im _G (eq (take _l1 n) (take _l2 n)))
()
(takeeqd (_G _l1 _l2 n n)
  _h
  (eqidd (_G n))))

(local theorem takeeq1 ((_l1 nat ()) (_l2 nat ()) (n nat ())) ()
  (im (eq _l1 _l2) (eq (take _l1 n) (take _l2 n)))
()
(takeeq1d ((eq _l1 _l2) _l1 _l2 n)
  (id ((eq _l1 _l2)))))

(local theorem takeeq2d ((_G wff ()) (l nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (take l _n1) (take l _n2)))
()
(takeeqd (_G l l _n1 _n2)
  (eqidd (_G l))
  _h))

(local theorem takeeq2 ((l nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (take l _n1) (take l _n2)))
()
(takeeq2d ((eq _n1 _n2) l _n1 _n2)
  (id ((eq _n1 _n2)))))

(local def drop ((l nat ()) (n nat ())) (nat ())
((i nat))
(lfn (lam i (sub (nth (add i n) l) (d1))) (sub (len l) n)))

(local theorem dropeqd ((_G wff ()) (_l1 nat ()) (_l2 nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_lh (im _G (eq _l1 _l2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (drop _l1 _n1) (drop _l2 _n2)))
((i nat))
(:conv (im _G (eq (drop _l1 _n1) (drop _l2 _n2)))
  (im
    _G
    (eq
      (:unfold drop (_l1 _n1) (i)
        (lfn (lam i (sub (nth (add i _n1) _l1) (d1))) (sub (len _l1) _n1)))
      (:unfold drop (_l2 _n2) (i)
        (lfn (lam i (sub (nth (add i _n2) _l2) (d1))) (sub (len _l2) _n2)))))
  (lfneqd (_G (lam i (sub (nth (add i _n1) _l1) (d1))) (lam i (sub (nth (add i _n2) _l2) (d1))) (sub (len _l1) _n1) (sub (len _l2) _n2))
    (lameqd (_G i (sub (nth (add i _n1) _l1) (d1)) (sub (nth (add i _n2) _l2) (d1)))
      (subeqd (_G (nth (add i _n1) _l1) (nth (add i _n2) _l2) (d1) (d1))
        (ntheqd (_G (add i _n1) (add i _n2) _l1 _l2)
          (addeqd (_G i i _n1 _n2)
            (eqidd (_G i))
            _nh)
          _lh)
        (eqidd (_G (d1)))))
    (subeqd (_G (len _l1) (len _l2) _n1 _n2)
      (leneqd (_G _l1 _l2)
        _lh)
      _nh))))

(local theorem dropeq ((_l1 nat ()) (_l2 nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _l1 _l2) (im (eq _n1 _n2) (eq (drop _l1 _n1) (drop _l2 _n2))))
()
(exp ((eq _l1 _l2) (eq _n1 _n2) (eq (drop _l1 _n1) (drop _l2 _n2)))
  (dropeqd ((an (eq _l1 _l2) (eq _n1 _n2)) _l1 _l2 _n1 _n2)
    (anl ((eq _l1 _l2) (eq _n1 _n2)))
    (anr ((eq _l1 _l2) (eq _n1 _n2))))))

(local theorem dropeq1d ((_G wff ()) (_l1 nat ()) (_l2 nat ()) (n nat ()))
  ((_h (im _G (eq _l1 _l2))))
  (im _G (eq (drop _l1 n) (drop _l2 n)))
()
(dropeqd (_G _l1 _l2 n n)
  _h
  (eqidd (_G n))))

(local theorem dropeq1 ((_l1 nat ()) (_l2 nat ()) (n nat ())) ()
  (im (eq _l1 _l2) (eq (drop _l1 n) (drop _l2 n)))
()
(dropeq1d ((eq _l1 _l2) _l1 _l2 n)
  (id ((eq _l1 _l2)))))

(local theorem dropeq2d ((_G wff ()) (l nat ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (drop l _n1) (drop l _n2)))
()
(dropeqd (_G l l _n1 _n2)
  (eqidd (_G l))
  _h))

(local theorem dropeq2 ((l nat ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (drop l _n1) (drop l _n2)))
()
(dropeq2d ((eq _n1 _n2) l _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem takelen ((l nat ()) (n nat ())) ()
  (eq (len (take l n)) (min (len l) n))
((x1 nat))
(:conv (eq (len (take l n)) (min (len l) n))
  (eq
    (len
      (:unfold take (l n) (x1)
        (lfn (lam x1 (sub (nth x1 l) (d1))) (min (len l) n))))
    (min (len l) n))
  (lenlfn ((lam x1 (sub (nth x1 l) (d1))) (min (len l) n)))))

(local theorem droplen ((l nat ()) (n nat ())) ()
  (eq (len (drop l n)) (sub (len l) n))
((x1 nat))
(:conv (eq (len (drop l n)) (sub (len l) n))
  (eq
    (len
      (:unfold drop (l n) (x1)
        (lfn (lam x1 (sub (nth (add x1 n) l) (d1))) (sub (len l) n))))
    (sub (len l) n))
  (lenlfn ((lam x1 (sub (nth (add x1 n) l) (d1))) (sub (len l) n)))))

(local theorem takenth ((i nat ()) (l nat ()) (n nat ())) ()
  (im (lt i n) (eq (nth i (take l n)) (nth i l)))
((x nat))
(mpi ((lt i n) (or (le (len l) i) (lt i (len l))) (eq (nth i (take l n)) (nth i l)))
  (leorlt ((len l) i))
  (eorda ((lt i n) (le (len l) i) (lt i (len l)) (eq (nth i (take l n)) (nth i l)))
    (eqtr4d ((an (lt i n) (le (len l) i)) (nth i (take l n)) (d0) (nth i l))
      (sylibr ((an (lt i n) (le (len l) i)) (le (len (take l n)) i) (eq (nth i (take l n)) (d0)))
        (ntheq0 ((take l n) i))
        (anwr ((lt i n) (le (len l) i) (le (len (take l n)) i))
          (ax_mp ((le (len (take l n)) (len l)) (im (le (len l) i) (le (len (take l n)) i)))
            (letr ((len (take l n)) (len l) i))
            (mpbir ((le (min (len l) n) (len l)) (le (len (take l n)) (len l)))
              (ax_mp ((eq (len (take l n)) (min (len l) n)) (iff (le (len (take l n)) (len l)) (le (min (len l) n) (len l))))
                (leeq1 ((len (take l n)) (min (len l) n) (len l)))
                (takelen (l n)))
              (minle1 ((len l) n))))))
      (sylibr ((an (lt i n) (le (len l) i)) (le (len l) i) (eq (nth i l) (d0)))
        (ntheq0 (l i))
        (anr ((lt i n) (le (len l) i)))))
    (eqtrd ((an (lt i n) (lt i (len l))) (nth i (take l n)) (suc (app (lam x (sub (nth x l) (d1))) i)) (nth i l))
      (rsyl ((an (lt i n) (lt i (len l))) (an (lt i (len l)) (lt i n)) (eq (nth i (take l n)) (suc (app (lam x (sub (nth x l) (d1))) i))))
        (ancom ((lt i n) (lt i (len l))))
        (sylbir ((an (lt i (len l)) (lt i n)) (lt i (min (len l) n)) (eq (nth i (take l n)) (suc (app (lam x (sub (nth x l) (d1))) i))))
          (ltmin (i (len l) n))
          (:conv (im (lt i (min (len l) n)) (eq (nth i (take l n)) (suc (app (lam x (sub (nth x l) (d1))) i))))
            (im
              (lt i (min (len l) n))
              (eq
                (nth
                  i
                  (:unfold take (l n) (x)
                    (lfn (lam x (sub (nth x l) (d1))) (min (len l) n))))
                (suc (app (lam x (sub (nth x l) (d1))) i))))
            (nthlfn ((lam x (sub (nth x l) (d1))) i (min (len l) n))))))
      (eqtrd ((an (lt i n) (lt i (len l))) (suc (app (lam x (sub (nth x l) (d1))) i)) (suc (sub (nth i l) (d1))) (nth i l))
        (suceqd ((an (lt i n) (lt i (len l))) (app (lam x (sub (nth x l) (d1))) i) (sub (nth i l) (d1)))
          (applamed ((an (lt i n) (lt i (len l))) i (sub (nth i l) (d1)) x (sub (nth x l) (d1)))
            (subeq1d ((an (an (lt i n) (lt i (len l))) (eq x i)) (nth x l) (nth i l) (d1))
              (ntheq1d ((an (an (lt i n) (lt i (len l))) (eq x i)) x i l)
                (anr ((an (lt i n) (lt i (len l))) (eq x i)))))))
        (syl ((an (lt i n) (lt i (len l))) (ne (nth i l) (d0)) (eq (suc (sub (nth i l) (d1))) (nth i l)))
          (sub1can ((nth i l)))
          (sylibr ((an (lt i n) (lt i (len l))) (lt i (len l)) (ne (nth i l) (d0)))
            (nthne0 (l i))
            (anr ((lt i n) (lt i (len l)))))))))))

(local theorem takenth0 ((i nat ()) (l nat ()) (n nat ())) ()
  (im (le n i) (eq (nth i (take l n)) (d0)))
()
(sylibr ((le n i) (le (len (take l n)) i) (eq (nth i (take l n)) (d0)))
  (ntheq0 ((take l n) i))
  (ax_mp ((le (len (take l n)) n) (im (le n i) (le (len (take l n)) i)))
    (letr ((len (take l n)) n i))
    (mpbir ((le (min (len l) n) n) (le (len (take l n)) n))
      (ax_mp ((eq (len (take l n)) (min (len l) n)) (iff (le (len (take l n)) n) (le (min (len l) n) n)))
        (leeq1 ((len (take l n)) (min (len l) n) n))
        (takelen (l n)))
      (minle2 ((len l) n))))))

(local theorem dropnth ((i nat ()) (l nat ()) (n nat ())) ()
  (eq (nth i (drop l n)) (nth (add i n) l))
((x nat))
(ax_mp ((or (le (len l) (add i n)) (lt (add i n) (len l))) (eq (nth i (drop l n)) (nth (add i n) l)))
  (ax_mp ((im (lt (add i n) (len l)) (eq (nth i (drop l n)) (nth (add i n) l))) (im (or (le (len l) (add i n)) (lt (add i n) (len l))) (eq (nth i (drop l n)) (nth (add i n) l))))
    (ax_mp ((im (le (len l) (add i n)) (eq (nth i (drop l n)) (nth (add i n) l))) (im (im (lt (add i n) (len l)) (eq (nth i (drop l n)) (nth (add i n) l))) (im (or (le (len l) (add i n)) (lt (add i n) (len l))) (eq (nth i (drop l n)) (nth (add i n) l)))))
      (eor ((le (len l) (add i n)) (lt (add i n) (len l)) (eq (nth i (drop l n)) (nth (add i n) l))))
      (eqtr4d ((le (len l) (add i n)) (nth i (drop l n)) (d0) (nth (add i n) l))
        (sylibr ((le (len l) (add i n)) (le (len (drop l n)) i) (eq (nth i (drop l n)) (d0)))
          (ntheq0 ((drop l n) i))
          (sylibr ((le (len l) (add i n)) (le (sub (len l) n) i) (le (len (drop l n)) i))
            (ax_mp ((eq (len (drop l n)) (sub (len l) n)) (iff (le (len (drop l n)) i) (le (sub (len l) n) i)))
              (leeq1 ((len (drop l n)) (sub (len l) n) i))
              (droplen (l n)))
            (bi2i ((le (sub (len l) n) i) (le (len l) (add i n)))
              (lesubadd ((len l) n i)))))
        (bi2i ((eq (nth (add i n) l) (d0)) (le (len l) (add i n)))
          (ntheq0 (l (add i n))))))
    (eqtrd ((lt (add i n) (len l)) (nth i (drop l n)) (suc (app (lam x (sub (nth (add x n) l) (d1))) i)) (nth (add i n) l))
      (sylbi ((lt (add i n) (len l)) (lt i (sub (len l) n)) (eq (nth i (drop l n)) (suc (app (lam x (sub (nth (add x n) l) (d1))) i))))
        (ltaddsub (i n (len l)))
        (:conv (im (lt i (sub (len l) n)) (eq (nth i (drop l n)) (suc (app (lam x (sub (nth (add x n) l) (d1))) i))))
          (im
            (lt i (sub (len l) n))
            (eq
              (nth
                i
                (:unfold drop (l n) (x)
                  (lfn (lam x (sub (nth (add x n) l) (d1))) (sub (len l) n))))
              (suc (app (lam x (sub (nth (add x n) l) (d1))) i))))
          (nthlfn ((lam x (sub (nth (add x n) l) (d1))) i (sub (len l) n)))))
      (eqtrd ((lt (add i n) (len l)) (suc (app (lam x (sub (nth (add x n) l) (d1))) i)) (suc (sub (nth (add i n) l) (d1))) (nth (add i n) l))
        (suceqd ((lt (add i n) (len l)) (app (lam x (sub (nth (add x n) l) (d1))) i) (sub (nth (add i n) l) (d1)))
          (applamed ((lt (add i n) (len l)) i (sub (nth (add i n) l) (d1)) x (sub (nth (add x n) l) (d1)))
            (subeq1d ((an (lt (add i n) (len l)) (eq x i)) (nth (add x n) l) (nth (add i n) l) (d1))
              (ntheq1d ((an (lt (add i n) (len l)) (eq x i)) (add x n) (add i n) l)
                (addeq1d ((an (lt (add i n) (len l)) (eq x i)) x i n)
                  (anr ((lt (add i n) (len l)) (eq x i))))))))
        (sylbir ((lt (add i n) (len l)) (ne (nth (add i n) l) (d0)) (eq (suc (sub (nth (add i n) l) (d1))) (nth (add i n) l)))
          (nthne0 (l (add i n)))
          (sub1can ((nth (add i n) l)))))))
  (leorlt ((len l) (add i n)))))

(local theorem takedrop ((l nat ()) (n nat ())) ()
  (eq (append (take l n) (drop l n)) l)
((i nat))
(:let H1 (takelen (l n))
(nthext2 ((append (take l n) (drop l n)) l (len l) i)
  (ax_mp ((eq (add (len (take l n)) (len (drop l n))) (len l)) (eq (len (append (take l n) (drop l n))) (len l)))
    (ax_mp ((eq (len (append (take l n) (drop l n))) (add (len (take l n)) (len (drop l n)))) (im (eq (add (len (take l n)) (len (drop l n))) (len l)) (eq (len (append (take l n) (drop l n))) (len l))))
      (eqtr ((len (append (take l n) (drop l n))) (add (len (take l n)) (len (drop l n))) (len l)))
      (appendlen ((take l n) (drop l n))))
    (ax_mp ((eq (add (min (len l) n) (sub (len l) n)) (len l)) (eq (add (len (take l n)) (len (drop l n))) (len l)))
      (ax_mp ((eq (add (len (take l n)) (len (drop l n))) (add (min (len l) n) (sub (len l) n))) (im (eq (add (min (len l) n) (sub (len l) n)) (len l)) (eq (add (len (take l n)) (len (drop l n))) (len l))))
        (eqtr ((add (len (take l n)) (len (drop l n))) (add (min (len l) n) (sub (len l) n)) (len l)))
        (ax_mp ((eq (len (drop l n)) (sub (len l) n)) (eq (add (len (take l n)) (len (drop l n))) (add (min (len l) n) (sub (len l) n))))
          (ax_mp ((eq (len (take l n)) (min (len l) n)) (im (eq (len (drop l n)) (sub (len l) n)) (eq (add (len (take l n)) (len (drop l n))) (add (min (len l) n) (sub (len l) n)))))
            (addeq ((len (take l n)) (min (len l) n) (len (drop l n)) (sub (len l) n)))
            H1)
          (droplen (l n))))
      (minaddsub ((len l) n))))
  (eqid ((len l)))
  (mpi ((lt i (len l)) (or (lt i n) (le n i)) (eq (nth i (append (take l n) (drop l n))) (nth i l)))
    (ltorle (i n))
    (eorda ((lt i (len l)) (lt i n) (le n i) (eq (nth i (append (take l n) (drop l n))) (nth i l)))
      (eqtrd ((an (lt i (len l)) (lt i n)) (nth i (append (take l n) (drop l n))) (nth i (take l n)) (nth i l))
        (sylbir ((an (lt i (len l)) (lt i n)) (lt i (len (take l n))) (eq (nth i (append (take l n) (drop l n))) (nth i (take l n))))
          (ax_mp ((iff (lt i (min (len l) n)) (an (lt i (len l)) (lt i n))) (iff (lt i (len (take l n))) (an (lt i (len l)) (lt i n))))
            (ax_mp ((iff (lt i (len (take l n))) (lt i (min (len l) n))) (im (iff (lt i (min (len l) n)) (an (lt i (len l)) (lt i n))) (iff (lt i (len (take l n))) (an (lt i (len l)) (lt i n)))))
              (bitr ((lt i (len (take l n))) (lt i (min (len l) n)) (an (lt i (len l)) (lt i n))))
              (ax_mp ((eq (len (take l n)) (min (len l) n)) (iff (lt i (len (take l n))) (lt i (min (len l) n))))
                (lteq2 (i (len (take l n)) (min (len l) n)))
                H1))
            (ltmin (i (len l) n)))
          (appendnth1 (i (take l n) (drop l n))))
        (anwr ((lt i (len l)) (lt i n) (eq (nth i (take l n)) (nth i l)))
          (takenth (i l n))))
      (eqtrd ((an (lt i (len l)) (le n i)) (nth i (append (take l n) (drop l n))) (nth (sub i (len (take l n))) (drop l n)) (nth i l))
        (syl ((an (lt i (len l)) (le n i)) (le (len (take l n)) i) (eq (nth i (append (take l n) (drop l n))) (nth (sub i (len (take l n))) (drop l n))))
          (appendnth2 (i (take l n) (drop l n)))
          (anwr ((lt i (len l)) (le n i) (le (len (take l n)) i))
            (ax_mp ((le (len (take l n)) n) (im (le n i) (le (len (take l n)) i)))
              (letr ((len (take l n)) n i))
              (mpbir ((le (min (len l) n) n) (le (len (take l n)) n))
                (ax_mp ((eq (len (take l n)) (min (len l) n)) (iff (le (len (take l n)) n) (le (min (len l) n) n)))
                  (leeq1 ((len (take l n)) (min (len l) n) n))
                  H1)
                (minle2 ((len l) n))))))
        (syl5eq ((an (lt i (len l)) (le n i)) (nth (sub i (len (take l n))) (drop l n)) (nth (add (sub i (len (take l n))) n) l) (nth i l))
          (dropnth ((sub i (len (take l n))) l n))
          (ntheq1d ((an (lt i (len l)) (le n i)) (add (sub i (len (take l n))) n) i l)
            (eqtrd ((an (lt i (len l)) (le n i)) (add (sub i (len (take l n))) n) (add (sub i n) n) i)
              (addeq1d ((an (lt i (len l)) (le n i)) (sub i (len (take l n))) (sub i n) n)
                (subeq2d ((an (lt i (len l)) (le n i)) i (len (take l n)) n)
                  (syl5eq ((an (lt i (len l)) (le n i)) (len (take l n)) (min (len l) n) n)
                    H1
                    (syl ((an (lt i (len l)) (le n i)) (le n (len l)) (eq (min (len l) n) n))
                      (eqmin2 ((len l) n))
                      (letrd ((an (lt i (len l)) (le n i)) n i (len l))
                        (anr ((lt i (len l)) (le n i)))
                        (anwl ((lt i (len l)) (le n i) (le i (len l)))
                          (ltle (i (len l)))))))))
              (anwr ((lt i (len l)) (le n i) (eq (add (sub i n) n) i))
                (npcan (i n))))))))))))

(local theorem takeArray ((A set ()) (l nat ()) (m nat ()) (n nat ())) ()
  (im (an (le m n) (el l (Array A n))) (el (take l m) (Array A m)))
()
(sylibr ((an (le m n) (el l (Array A n))) (an (el (take l m) (List A)) (eq (len (take l m)) m)) (el (take l m) (Array A m)))
  (elArray (A (take l m) m))
  (iand ((an (le m n) (el l (Array A n))) (el (take l m) (List A)) (eq (len (take l m)) m))
    (anld ((an (le m n) (el l (Array A n))) (el (take l m) (List A)) (el (drop l m) (List A)))
      (sylib ((an (le m n) (el l (Array A n))) (el (append (take l m) (drop l m)) (List A)) (an (el (take l m) (List A)) (el (drop l m) (List A))))
        (appendT (A (take l m) (drop l m)))
        (sylibr ((an (le m n) (el l (Array A n))) (el l (List A)) (el (append (take l m) (drop l m)) (List A)))
          (ax_mp ((eq (append (take l m) (drop l m)) l) (iff (el (append (take l m) (drop l m)) (List A)) (el l (List A))))
            (eleq1 ((List A) (append (take l m) (drop l m)) l))
            (takedrop (l m)))
          (anwr ((le m n) (el l (Array A n)) (el l (List A)))
            (elArrayList (A l n))))))
    (syl5eq ((an (le m n) (el l (Array A n))) (len (take l m)) (min (len l) m) m)
      (takelen (l m))
      (syl ((an (le m n) (el l (Array A n))) (le m (len l)) (eq (min (len l) m) m))
        (eqmin2 ((len l) m))
        (mpbird ((an (le m n) (el l (Array A n))) (le m n) (le m (len l)))
          (leeq2d ((an (le m n) (el l (Array A n))) m (len l) n)
            (anwr ((le m n) (el l (Array A n)) (eq (len l) n))
              (elArraylen (A l n))))
          (anl ((le m n) (el l (Array A n))))))))))

(local theorem dropArray ((A set ()) (l nat ()) (m nat ()) (n nat ())) ()
  (im (el l (Array A (add m n))) (el (drop l m) (Array A n)))
()
(sylibr ((el l (Array A (add m n))) (an (el (drop l m) (List A)) (eq (len (drop l m)) n)) (el (drop l m) (Array A n)))
  (elArray (A (drop l m) n))
  (iand ((el l (Array A (add m n))) (el (drop l m) (List A)) (eq (len (drop l m)) n))
    (anrd ((el l (Array A (add m n))) (el (take l m) (List A)) (el (drop l m) (List A)))
      (sylib ((el l (Array A (add m n))) (el (append (take l m) (drop l m)) (List A)) (an (el (take l m) (List A)) (el (drop l m) (List A))))
        (appendT (A (take l m) (drop l m)))
        (sylibr ((el l (Array A (add m n))) (el l (List A)) (el (append (take l m) (drop l m)) (List A)))
          (ax_mp ((eq (append (take l m) (drop l m)) l) (iff (el (append (take l m) (drop l m)) (List A)) (el l (List A))))
            (eleq1 ((List A) (append (take l m) (drop l m)) l))
            (takedrop (l m)))
          (elArrayList (A l (add m n))))))
    (syl5eq ((el l (Array A (add m n))) (len (drop l m)) (sub (len l) m) n)
      (droplen (l m))
      (syl6eq ((el l (Array A (add m n))) (sub (len l) m) (sub (add m n) m) n)
        (pncan2 (m n))
        (subeq1d ((el l (Array A (add m n))) (len l) (add m n) m)
          (elArraylen (A l (add m n)))))))))

(local theorem take0 ((l nat ())) ()
  (eq (take l (d0)) (d0))
()
(mpbi ((eq (len (take l (d0))) (d0)) (eq (take l (d0)) (d0)))
  (leneq0 ((take l (d0))))
  (ax_mp ((eq (min (len l) (d0)) (d0)) (eq (len (take l (d0))) (d0)))
    (ax_mp ((eq (len (take l (d0))) (min (len l) (d0))) (im (eq (min (len l) (d0)) (d0)) (eq (len (take l (d0))) (d0))))
      (eqtr ((len (take l (d0))) (min (len l) (d0)) (d0)))
      (takelen (l (d0))))
    (mpbi ((le (min (len l) (d0)) (d0)) (eq (min (len l) (d0)) (d0)))
      (le02 ((min (len l) (d0))))
      (minle2 ((len l) (d0)))))))

(local theorem drop0 ((l nat ())) ()
  (eq (drop l (d0)) l)
()
(ax_mp ((eq (append (d0) (drop l (d0))) l) (eq (drop l (d0)) l))
  (ax_mp ((eq (append (d0) (drop l (d0))) (drop l (d0))) (im (eq (append (d0) (drop l (d0))) l) (eq (drop l (d0)) l)))
    (eqtr3 ((drop l (d0)) (append (d0) (drop l (d0))) l))
    (append0 ((drop l (d0)))))
  (ax_mp ((eq (append (take l (d0)) (drop l (d0))) l) (eq (append (d0) (drop l (d0))) l))
    (ax_mp ((eq (append (take l (d0)) (drop l (d0))) (append (d0) (drop l (d0)))) (im (eq (append (take l (d0)) (drop l (d0))) l) (eq (append (d0) (drop l (d0))) l)))
      (eqtr3 ((append (d0) (drop l (d0))) (append (take l (d0)) (drop l (d0))) l))
      (ax_mp ((eq (take l (d0)) (d0)) (eq (append (take l (d0)) (drop l (d0))) (append (d0) (drop l (d0)))))
        (appendeq1 ((take l (d0)) (d0) (drop l (d0))))
        (take0 (l))))
    (takedrop (l (d0))))))

(local theorem dropall ((l nat ()) (n nat ())) ()
  (im (le (len l) n) (eq (drop l n) (d0)))
()
(sylib ((le (len l) n) (eq (len (drop l n)) (d0)) (eq (drop l n) (d0)))
  (leneq0 ((drop l n)))
  (syl5eq ((le (len l) n) (len (drop l n)) (sub (len l) n) (d0))
    (droplen (l n))
    (bi1i ((le (len l) n) (eq (sub (len l) n) (d0)))
      (lesubeq0 ((len l) n))))))

(local theorem takeall ((l nat ()) (n nat ())) ()
  (im (le (len l) n) (eq (take l n) l))
()
(syl5eqr ((le (len l) n) (take l n) (append (take l n) (d0)) l)
  (append02 ((take l n)))
  (syl6eq ((le (len l) n) (append (take l n) (d0)) (append (take l n) (drop l n)) l)
    (takedrop (l n))
    (appendeq2d ((le (len l) n) (take l n) (d0) (drop l n))
      (eqcomd ((le (len l) n) (drop l n) (d0))
        (dropall (l n)))))))

(local theorem takemin ((l nat ()) (n nat ())) ()
  (eq (take l (min (len l) n)) (take l n))
()
(ax_mp ((or (le n (len l)) (le (len l) n)) (eq (take l (min (len l) n)) (take l n)))
  (ax_mp ((im (le (len l) n) (eq (take l (min (len l) n)) (take l n))) (im (or (le n (len l)) (le (len l) n)) (eq (take l (min (len l) n)) (take l n))))
    (ax_mp ((im (le n (len l)) (eq (take l (min (len l) n)) (take l n))) (im (im (le (len l) n) (eq (take l (min (len l) n)) (take l n))) (im (or (le n (len l)) (le (len l) n)) (eq (take l (min (len l) n)) (take l n)))))
      (eor ((le n (len l)) (le (len l) n) (eq (take l (min (len l) n)) (take l n))))
      (takeeq2d ((le n (len l)) l (min (len l) n) n)
        (eqmin2 ((len l) n))))
    (eqtr4d ((le (len l) n) (take l (min (len l) n)) (take l (len l)) (take l n))
      (takeeq2d ((le (len l) n) l (min (len l) n) (len l))
        (eqmin1 ((len l) n)))
      (syl6eqr ((le (len l) n) (take l n) l (take l (len l)))
        (ax_mp ((le (len l) (len l)) (eq (take l (len l)) l))
          (takeall (l (len l)))
          (leid ((len l))))
        (takeall (l n)))))
  (leorle (n (len l)))))

(local theorem takeappend1 ((l1 nat ()) (l2 nat ()) (n nat ())) ()
  (im (le n (len l1)) (eq (take (append l1 l2) n) (take l1 n)))
((x1 nat))
(nthext2d ((le n (len l1)) (take (append l1 l2) n) (take l1 n) n x1)
  (syl5eq ((le n (len l1)) (len (take (append l1 l2) n)) (min (len (append l1 l2)) n) n)
    (takelen ((append l1 l2) n))
    (syl ((le n (len l1)) (le n (len (append l1 l2))) (eq (min (len (append l1 l2)) n) n))
      (eqmin2 ((len (append l1 l2)) n))
      (mpi ((le n (len l1)) (le (len l1) (len (append l1 l2))) (le n (len (append l1 l2))))
        (mpbir ((le (len l1) (add (len l1) (len l2))) (le (len l1) (len (append l1 l2))))
          (ax_mp ((eq (len (append l1 l2)) (add (len l1) (len l2))) (iff (le (len l1) (len (append l1 l2))) (le (len l1) (add (len l1) (len l2)))))
            (leeq2 ((len l1) (len (append l1 l2)) (add (len l1) (len l2))))
            (appendlen (l1 l2)))
          (leaddid1 ((len l1) (len l2))))
        (letr (n (len l1) (len (append l1 l2)))))))
  (syl5eq ((le n (len l1)) (len (take l1 n)) (min (len l1) n) n)
    (takelen (l1 n))
    (eqmin2 ((len l1) n)))
  (eqtr4d ((an (le n (len l1)) (lt x1 n)) (nth x1 (take (append l1 l2) n)) (nth x1 (append l1 l2)) (nth x1 (take l1 n)))
    (anwr ((le n (len l1)) (lt x1 n) (eq (nth x1 (take (append l1 l2) n)) (nth x1 (append l1 l2))))
      (takenth (x1 (append l1 l2) n)))
    (eqtr4d ((an (le n (len l1)) (lt x1 n)) (nth x1 (take l1 n)) (nth x1 l1) (nth x1 (append l1 l2)))
      (anwr ((le n (len l1)) (lt x1 n) (eq (nth x1 (take l1 n)) (nth x1 l1)))
        (takenth (x1 l1 n)))
      (syl ((an (le n (len l1)) (lt x1 n)) (lt x1 (len l1)) (eq (nth x1 (append l1 l2)) (nth x1 l1)))
        (appendnth1 (x1 l1 l2))
        (impcom ((lt x1 n) (le n (len l1)) (lt x1 (len l1)))
          (ltletr (x1 n (len l1)))))))))

(local theorem appendinj1 ((l1 nat ()) (l2 nat ()) (r1 nat ()) (r2 nat ())) ()
  (im (eq (len l1) (len r1)) (iff (eq (append l1 l2) (append r1 r2)) (an (eq l1 r1) (eq l2 r2))))
()
(:let H1 (leid ((len l1)))
(:let H2 (leid ((len r1)))
(:let H3 (anr ((eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))))
(:let H4 (sylib ((an (eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))) (eq (take (append l1 l2) (len l1)) (take (append r1 r2) (len r1))) (eq l1 r1))
  (ax_mp ((eq (take (append r1 r2) (len r1)) r1) (iff (eq (take (append l1 l2) (len l1)) (take (append r1 r2) (len r1))) (eq l1 r1)))
    (ax_mp ((eq (take (append l1 l2) (len l1)) l1) (im (eq (take (append r1 r2) (len r1)) r1) (iff (eq (take (append l1 l2) (len l1)) (take (append r1 r2) (len r1))) (eq l1 r1))))
      (eqeq ((take (append l1 l2) (len l1)) l1 (take (append r1 r2) (len r1)) r1))
      (ax_mp ((eq (take l1 (len l1)) l1) (eq (take (append l1 l2) (len l1)) l1))
        (ax_mp ((eq (take (append l1 l2) (len l1)) (take l1 (len l1))) (im (eq (take l1 (len l1)) l1) (eq (take (append l1 l2) (len l1)) l1)))
          (eqtr ((take (append l1 l2) (len l1)) (take l1 (len l1)) l1))
          (ax_mp ((le (len l1) (len l1)) (eq (take (append l1 l2) (len l1)) (take l1 (len l1))))
            (takeappend1 (l1 l2 (len l1)))
            H1))
        (ax_mp ((le (len l1) (len l1)) (eq (take l1 (len l1)) l1))
          (takeall (l1 (len l1)))
          H1)))
    (ax_mp ((eq (take r1 (len r1)) r1) (eq (take (append r1 r2) (len r1)) r1))
      (ax_mp ((eq (take (append r1 r2) (len r1)) (take r1 (len r1))) (im (eq (take r1 (len r1)) r1) (eq (take (append r1 r2) (len r1)) r1)))
        (eqtr ((take (append r1 r2) (len r1)) (take r1 (len r1)) r1))
        (ax_mp ((le (len r1) (len r1)) (eq (take (append r1 r2) (len r1)) (take r1 (len r1))))
          (takeappend1 (r1 r2 (len r1)))
          H2))
      (ax_mp ((le (len r1) (len r1)) (eq (take r1 (len r1)) r1))
        (takeall (r1 (len r1)))
        H2)))
  (takeeqd ((an (eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))) (append l1 l2) (append r1 r2) (len l1) (len r1))
    H3
    (anl ((eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))))))
(ibida ((eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2)) (an (eq l1 r1) (eq l2 r2)))
  (iand ((an (eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))) (eq l1 r1) (eq l2 r2))
    H4
    (sylib ((an (eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))) (eq (append l1 l2) (append l1 r2)) (eq l2 r2))
      (appendcan1 (l1 l2 r2))
      (eqtr4d ((an (eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))) (append l1 l2) (append r1 r2) (append l1 r2))
        H3
        (appendeq1d ((an (eq (len l1) (len r1)) (eq (append l1 l2) (append r1 r2))) l1 r1 r2)
          H4))))
  (appendeqd ((an (eq (len l1) (len r1)) (an (eq l1 r1) (eq l2 r2))) l1 r1 l2 r2)
    (anrl ((eq (len l1) (len r1)) (eq l1 r1) (eq l2 r2)))
    (anrr ((eq (len l1) (len r1)) (eq l1 r1) (eq l2 r2))))))))))

(local theorem appendinj2 ((l1 nat ()) (l2 nat ()) (r1 nat ()) (r2 nat ())) ()
  (im (eq (len l2) (len r2)) (iff (eq (append l1 l2) (append r1 r2)) (an (eq l1 r1) (eq l2 r2))))
()
(:let H1 (anr ((eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))))
(ibida ((eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2)) (an (eq l1 r1) (eq l2 r2)))
  (mpbid ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (eq (append l1 l2) (append r1 r2)) (an (eq l1 r1) (eq l2 r2)))
    (syl ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (eq (len l1) (len r1)) (iff (eq (append l1 l2) (append r1 r2)) (an (eq l1 r1) (eq l2 r2))))
      (appendinj1 (l1 l2 r1 r2))
      (sylib ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (eq (add (len l1) (len l2)) (add (len r1) (len l2))) (eq (len l1) (len r1)))
        (addcan1 ((len l1) (len r1) (len l2)))
        (eqtrd ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (add (len l1) (len l2)) (add (len r1) (len r2)) (add (len r1) (len l2)))
          (eqtr3g ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (len (append l1 l2)) (len (append r1 r2)) (add (len l1) (len l2)) (add (len r1) (len r2)))
            (appendlen (l1 l2))
            (appendlen (r1 r2))
            (leneqd ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (append l1 l2) (append r1 r2))
              H1))
          (addeq2d ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (len r1) (len r2) (len l2))
            (eqcomd ((an (eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2))) (len l2) (len r2))
              (anl ((eq (len l2) (len r2)) (eq (append l1 l2) (append r1 r2)))))))))
    H1)
  (appendeqd ((an (eq (len l2) (len r2)) (an (eq l1 r1) (eq l2 r2))) l1 r1 l2 r2)
    (anrl ((eq (len l2) (len r2)) (eq l1 r1) (eq l2 r2)))
    (anrr ((eq (len l2) (len r2)) (eq l1 r1) (eq l2 r2)))))))

(local theorem eqappendlem ((a nat) (l1 nat ()) (l2 nat ()) (r1 nat ()) (r2 nat ())) ()
  (im (an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (ex a (an (eq l1 (append r1 a)) (eq r2 (append a l2)))))
()
(:let H1 (id ((eq a (take r2 (sub (len l1) (len r1))))))
(:let H2 (anr ((le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))))
(:let H3 (takedrop (r2 (sub (len l1) (len r1))))
(:let H4 (mpbid ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (eq (append l1 l2) (append (append r1 (take r2 (sub (len l1) (len r1)))) (drop r2 (sub (len l1) (len r1))))) (an (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq l2 (drop r2 (sub (len l1) (len r1))))))
  (syl ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (eq (len l1) (len (append r1 (take r2 (sub (len l1) (len r1)))))) (iff (eq (append l1 l2) (append (append r1 (take r2 (sub (len l1) (len r1)))) (drop r2 (sub (len l1) (len r1))))) (an (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq l2 (drop r2 (sub (len l1) (len r1)))))))
    (appendinj1 (l1 l2 (append r1 (take r2 (sub (len l1) (len r1)))) (drop r2 (sub (len l1) (len r1)))))
    (syl6eqr ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (len l1) (add (len r1) (len (take r2 (sub (len l1) (len r1))))) (len (append r1 (take r2 (sub (len l1) (len r1))))))
      (appendlen (r1 (take r2 (sub (len l1) (len r1)))))
      (eqcomd ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (add (len r1) (len (take r2 (sub (len l1) (len r1))))) (len l1))
        (eqtrd ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (add (len r1) (len (take r2 (sub (len l1) (len r1))))) (add (len r1) (sub (len l1) (len r1))) (len l1))
          (addeq2d ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (len r1) (len (take r2 (sub (len l1) (len r1)))) (sub (len l1) (len r1)))
            (syl5eq ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (len (take r2 (sub (len l1) (len r1)))) (min (len r2) (sub (len l1) (len r1))) (sub (len l1) (len r1)))
              (takelen (r2 (sub (len l1) (len r1))))
              (syl ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (le (sub (len l1) (len r1)) (len r2)) (eq (min (len r2) (sub (len l1) (len r1))) (sub (len l1) (len r1))))
                (eqmin2 ((len r2) (sub (len l1) (len r1))))
                (sylibr ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (le (len l1) (add (len r1) (len r2))) (le (sub (len l1) (len r1)) (len r2)))
                  (lesubadd2 ((len l1) (len r1) (len r2)))
                  (mpbii ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (le (len l1) (add (len l1) (len l2))) (le (len l1) (add (len r1) (len r2))))
                    (leaddid1 ((len l1) (len l2)))
                    (leeq2d ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (len l1) (add (len l1) (len l2)) (add (len r1) (len r2)))
                      (eqtr3g ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (len (append l1 l2)) (len (append r1 r2)) (add (len l1) (len l2)) (add (len r1) (len r2)))
                        (appendlen (l1 l2))
                        (appendlen (r1 r2))
                        (leneqd ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (append l1 l2) (append r1 r2))
                          H2))))))))
          (anwl ((le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2)) (eq (add (len r1) (sub (len l1) (len r1))) (len l1)))
            (pncan3 ((len r1) (len l1))))))))
  (syl6eqr ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (append l1 l2) (append r1 (append (take r2 (sub (len l1) (len r1))) (drop r2 (sub (len l1) (len r1))))) (append (append r1 (take r2 (sub (len l1) (len r1)))) (drop r2 (sub (len l1) (len r1)))))
    (appendass (r1 (take r2 (sub (len l1) (len r1))) (drop r2 (sub (len l1) (len r1)))))
    (syl6eqr ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (append l1 l2) (append r1 r2) (append r1 (append (take r2 (sub (len l1) (len r1))) (drop r2 (sub (len l1) (len r1))))))
      (ax_mp ((eq (append (take r2 (sub (len l1) (len r1))) (drop r2 (sub (len l1) (len r1)))) r2) (eq (append r1 (append (take r2 (sub (len l1) (len r1))) (drop r2 (sub (len l1) (len r1))))) (append r1 r2)))
        (appendeq2 (r1 (append (take r2 (sub (len l1) (len r1))) (drop r2 (sub (len l1) (len r1)))) r2))
        H3)
      H2)))
(syl ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (an (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq r2 (append (take r2 (sub (len l1) (len r1))) l2))) (ex a (an (eq l1 (append r1 a)) (eq r2 (append a l2)))))
  (iexe (a (take r2 (sub (len l1) (len r1))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))) (an (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq r2 (append (take r2 (sub (len l1) (len r1))) l2))))
    (aneqd ((eq a (take r2 (sub (len l1) (len r1)))) (eq l1 (append r1 a)) (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq r2 (append a l2)) (eq r2 (append (take r2 (sub (len l1) (len r1))) l2)))
      (eqeqd ((eq a (take r2 (sub (len l1) (len r1)))) l1 l1 (append r1 a) (append r1 (take r2 (sub (len l1) (len r1)))))
        (eqidd ((eq a (take r2 (sub (len l1) (len r1)))) l1))
        (appendeqd ((eq a (take r2 (sub (len l1) (len r1)))) r1 r1 a (take r2 (sub (len l1) (len r1))))
          (eqidd ((eq a (take r2 (sub (len l1) (len r1)))) r1))
          H1))
      (eqeqd ((eq a (take r2 (sub (len l1) (len r1)))) r2 r2 (append a l2) (append (take r2 (sub (len l1) (len r1))) l2))
        (eqidd ((eq a (take r2 (sub (len l1) (len r1)))) r2))
        (appendeqd ((eq a (take r2 (sub (len l1) (len r1)))) a (take r2 (sub (len l1) (len r1))) l2 l2)
          H1
          (eqidd ((eq a (take r2 (sub (len l1) (len r1)))) l2))))))
  (iand ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq r2 (append (take r2 (sub (len l1) (len r1))) l2)))
    (anld ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq l2 (drop r2 (sub (len l1) (len r1)))))
      H4)
    (eqcomd ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (append (take r2 (sub (len l1) (len r1))) l2) r2)
      (syl6eq ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (append (take r2 (sub (len l1) (len r1))) l2) (append (take r2 (sub (len l1) (len r1))) (drop r2 (sub (len l1) (len r1)))) r2)
        H3
        (appendeq2d ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (take r2 (sub (len l1) (len r1))) l2 (drop r2 (sub (len l1) (len r1))))
          (anrd ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (eq l1 (append r1 (take r2 (sub (len l1) (len r1))))) (eq l2 (drop r2 (sub (len l1) (len r1)))))
            H4)))))))))))

(local theorem eqappend ((a nat) (l1 nat ()) (l2 nat ()) (r1 nat ()) (r2 nat ())) ()
  (iff (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))
()
(ibii ((eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))
  (ax_mp ((or (le (len l1) (len r1)) (le (len r1) (len l1))) (im (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))))))
    (ax_mp ((im (le (len r1) (len l1)) (im (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))) (im (or (le (len l1) (len r1)) (le (len r1) (len l1))) (im (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))))
      (ax_mp ((im (le (len l1) (len r1)) (im (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))) (im (im (le (len r1) (len l1)) (im (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))) (im (or (le (len l1) (len r1)) (le (len r1) (len l1))) (im (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))))))))
        (eor ((le (len l1) (len r1)) (le (len r1) (len l1)) (im (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))))
        (syl5 ((le (len l1) (len r1)) (eq (append l1 l2) (append r1 r2)) (eq (append r1 r2) (append l1 l2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))
          (eqcom ((append l1 l2) (append r1 r2)))
          (exp ((le (len l1) (len r1)) (eq (append r1 r2) (append l1 l2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))
            (rsyl ((an (le (len l1) (len r1)) (eq (append r1 r2) (append l1 l2))) (ex a (an (eq r1 (append l1 a)) (eq l2 (append a r2)))) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))
              (eqappendlem (a r1 r2 l1 l2))
              (eximi (a (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))))
                (orl ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))))))
      (exp ((le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2)) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))
        (rsyl ((an (le (len r1) (len l1)) (eq (append l1 l2) (append r1 r2))) (ex a (an (eq l1 (append r1 a)) (eq r2 (append a l2)))) (ex a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))))))
          (eqappendlem (a l1 l2 r1 r2))
          (eximi (a (an (eq l1 (append r1 a)) (eq r2 (append a l2))) (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))))
            (orr ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))))))))
    (leorle ((len l1) (len r1))))
  (eex (a (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))) (eq (append l1 l2) (append r1 r2)))
    (ax_mp ((im (an (eq l1 (append r1 a)) (eq r2 (append a l2))) (eq (append l1 l2) (append r1 r2))) (im (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))) (eq (append l1 l2) (append r1 r2))))
      (ax_mp ((im (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (eq (append l1 l2) (append r1 r2))) (im (im (an (eq l1 (append r1 a)) (eq r2 (append a l2))) (eq (append l1 l2) (append r1 r2))) (im (or (an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2)))) (eq (append l1 l2) (append r1 r2)))))
        (eor ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) (an (eq l1 (append r1 a)) (eq r2 (append a l2))) (eq (append l1 l2) (append r1 r2))))
        (mpbiri ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) (eq (append l1 (append a r2)) (append (append l1 a) r2)) (eq (append l1 l2) (append r1 r2)))
          (ax_mp ((eq (append (append l1 a) r2) (append l1 (append a r2))) (eq (append l1 (append a r2)) (append (append l1 a) r2)))
            (eqcom ((append (append l1 a) r2) (append l1 (append a r2))))
            (appendass (l1 a r2)))
          (eqeqd ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) (append l1 l2) (append l1 (append a r2)) (append r1 r2) (append (append l1 a) r2))
            (appendeqd ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) l1 l1 l2 (append a r2))
              (eqidd ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) l1))
              (anwr ((eq r1 (append l1 a)) (eq l2 (append a r2)) (eq l2 (append a r2)))
                (id ((eq l2 (append a r2))))))
            (appendeqd ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) r1 (append l1 a) r2 r2)
              (anwl ((eq r1 (append l1 a)) (eq l2 (append a r2)) (eq r1 (append l1 a)))
                (id ((eq r1 (append l1 a)))))
              (eqidd ((an (eq r1 (append l1 a)) (eq l2 (append a r2))) r2))))))
      (mpbiri ((an (eq l1 (append r1 a)) (eq r2 (append a l2))) (eq (append (append r1 a) l2) (append r1 (append a l2))) (eq (append l1 l2) (append r1 r2)))
        (appendass (r1 a l2))
        (eqeqd ((an (eq l1 (append r1 a)) (eq r2 (append a l2))) (append l1 l2) (append (append r1 a) l2) (append r1 r2) (append r1 (append a l2)))
          (appendeqd ((an (eq l1 (append r1 a)) (eq r2 (append a l2))) l1 (append r1 a) l2 l2)
            (anwl ((eq l1 (append r1 a)) (eq r2 (append a l2)) (eq l1 (append r1 a)))
              (id ((eq l1 (append r1 a)))))
            (eqidd ((an (eq l1 (append r1 a)) (eq r2 (append a l2))) l2)))
          (appendeqd ((an (eq l1 (append r1 a)) (eq r2 (append a l2))) r1 r1 r2 (append a l2))
            (eqidd ((an (eq l1 (append r1 a)) (eq r2 (append a l2))) r1))
            (anwr ((eq l1 (append r1 a)) (eq r2 (append a l2)) (eq r2 (append a l2)))
              (id ((eq r2 (append a l2))))))))))))

(def sublistAt ((n nat ()) (L1 nat ()) (L2 nat ())) (wff ())
((l nat) (r nat))
(ex l (ex r (an (eq L1 (append l (append L2 r))) (eq (len l) n)))))

(local theorem sublistAteqd ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (_L11 nat ()) (_L12 nat ()) (_L21 nat ()) (_L22 nat ()))
  ((_nh (im _G (eq _n1 _n2)))
   (_L1h (im _G (eq _L11 _L12)))
   (_L2h (im _G (eq _L21 _L22))))
  (im _G (iff (sublistAt _n1 _L11 _L21) (sublistAt _n2 _L12 _L22)))
((l nat) (r nat))
(:conv (im _G (iff (sublistAt _n1 _L11 _L21) (sublistAt _n2 _L12 _L22)))
  (im
    _G
    (iff
      (:unfold sublistAt (_n1 _L11 _L21) (l r)
        (ex l (ex r (an (eq _L11 (append l (append _L21 r))) (eq (len l) _n1)))))
      (:unfold sublistAt (_n2 _L12 _L22) (l r)
        (ex l (ex r (an (eq _L12 (append l (append _L22 r))) (eq (len l) _n2)))))))
  (exeqd (_G l (ex r (an (eq _L11 (append l (append _L21 r))) (eq (len l) _n1))) (ex r (an (eq _L12 (append l (append _L22 r))) (eq (len l) _n2))))
    (exeqd (_G r (an (eq _L11 (append l (append _L21 r))) (eq (len l) _n1)) (an (eq _L12 (append l (append _L22 r))) (eq (len l) _n2)))
      (aneqd (_G (eq _L11 (append l (append _L21 r))) (eq _L12 (append l (append _L22 r))) (eq (len l) _n1) (eq (len l) _n2))
        (eqeqd (_G _L11 _L12 (append l (append _L21 r)) (append l (append _L22 r)))
          _L1h
          (appendeqd (_G l l (append _L21 r) (append _L22 r))
            (eqidd (_G l))
            (appendeqd (_G _L21 _L22 r r)
              _L2h
              (eqidd (_G r)))))
        (eqeqd (_G (len l) (len l) _n1 _n2)
          (eqidd (_G (len l)))
          _nh))))))

(local theorem sublistAteq ((_n1 nat ()) (_n2 nat ()) (_L11 nat ()) (_L12 nat ()) (_L21 nat ()) (_L22 nat ())) ()
  (im (eq _n1 _n2) (im (eq _L11 _L12) (im (eq _L21 _L22) (iff (sublistAt _n1 _L11 _L21) (sublistAt _n2 _L12 _L22)))))
()
(exp ((eq _n1 _n2) (eq _L11 _L12) (im (eq _L21 _L22) (iff (sublistAt _n1 _L11 _L21) (sublistAt _n2 _L12 _L22))))
  (exp ((an (eq _n1 _n2) (eq _L11 _L12)) (eq _L21 _L22) (iff (sublistAt _n1 _L11 _L21) (sublistAt _n2 _L12 _L22)))
    (sublistAteqd ((an (an (eq _n1 _n2) (eq _L11 _L12)) (eq _L21 _L22)) _n1 _n2 _L11 _L12 _L21 _L22)
      (anwl ((an (eq _n1 _n2) (eq _L11 _L12)) (eq _L21 _L22) (eq _n1 _n2))
        (anl ((eq _n1 _n2) (eq _L11 _L12))))
      (anwl ((an (eq _n1 _n2) (eq _L11 _L12)) (eq _L21 _L22) (eq _L11 _L12))
        (anr ((eq _n1 _n2) (eq _L11 _L12))))
      (anr ((an (eq _n1 _n2) (eq _L11 _L12)) (eq _L21 _L22)))))))

(local theorem sublistAteq1d ((_G wff ()) (_n1 nat ()) (_n2 nat ()) (L1 nat ()) (L2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (iff (sublistAt _n1 L1 L2) (sublistAt _n2 L1 L2)))
()
(sublistAteqd (_G _n1 _n2 L1 L1 L2 L2)
  _h
  (eqidd (_G L1))
  (eqidd (_G L2))))

(local theorem sublistAteq1 ((_n1 nat ()) (_n2 nat ()) (L1 nat ()) (L2 nat ())) ()
  (im (eq _n1 _n2) (iff (sublistAt _n1 L1 L2) (sublistAt _n2 L1 L2)))
()
(sublistAteq1d ((eq _n1 _n2) _n1 _n2 L1 L2)
  (id ((eq _n1 _n2)))))

(local theorem sublistAteq2d ((_G wff ()) (n nat ()) (_L11 nat ()) (_L12 nat ()) (L2 nat ()))
  ((_h (im _G (eq _L11 _L12))))
  (im _G (iff (sublistAt n _L11 L2) (sublistAt n _L12 L2)))
()
(sublistAteqd (_G n n _L11 _L12 L2 L2)
  (eqidd (_G n))
  _h
  (eqidd (_G L2))))

(local theorem sublistAteq2 ((n nat ()) (_L11 nat ()) (_L12 nat ()) (L2 nat ())) ()
  (im (eq _L11 _L12) (iff (sublistAt n _L11 L2) (sublistAt n _L12 L2)))
()
(sublistAteq2d ((eq _L11 _L12) n _L11 _L12 L2)
  (id ((eq _L11 _L12)))))

(local theorem sublistAteq3d ((_G wff ()) (n nat ()) (L1 nat ()) (_L21 nat ()) (_L22 nat ()))
  ((_h (im _G (eq _L21 _L22))))
  (im _G (iff (sublistAt n L1 _L21) (sublistAt n L1 _L22)))
()
(sublistAteqd (_G n n L1 L1 _L21 _L22)
  (eqidd (_G n))
  (eqidd (_G L1))
  _h))

(local theorem sublistAteq3 ((n nat ()) (L1 nat ()) (_L21 nat ()) (_L22 nat ())) ()
  (im (eq _L21 _L22) (iff (sublistAt n L1 _L21) (sublistAt n L1 _L22)))
()
(sublistAteq3d ((eq _L21 _L22) n L1 _L21 _L22)
  (id ((eq _L21 _L22)))))

(local theorem sublistAtT ((A set ()) (L1 nat ()) (L2 nat ()) (n nat ())) ()
  (im (sublistAt n L1 L2) (im (el L1 (List A)) (el L2 (List A))))
((x1 nat) (x2 nat))
(:conv (im (sublistAt n L1 L2) (im (el L1 (List A)) (el L2 (List A))))
  (im
    (:unfold sublistAt (n L1 L2) (x1 x2)
      (ex x1 (ex x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)))))
    (im (el L1 (List A)) (el L2 (List A))))
  (eex (x1 (ex x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n))) (im (el L1 (List A)) (el L2 (List A))))
    (eex (x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (im (el L1 (List A)) (el L2 (List A))))
      (exp ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A)) (el L2 (List A)))
        (anld ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A))) (el L2 (List A)) (el x2 (List A)))
          (sylib ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A))) (el (append L2 x2) (List A)) (an (el L2 (List A)) (el x2 (List A))))
            (appendT (A L2 x2))
            (anrd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A))) (el x1 (List A)) (el (append L2 x2) (List A)))
              (sylib ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A))) (el (append x1 (append L2 x2)) (List A)) (an (el x1 (List A)) (el (append L2 x2) (List A))))
                (appendT (A x1 (append L2 x2)))
                (mpbid ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A))) (el L1 (List A)) (el (append x1 (append L2 x2)) (List A)))
                  (eleq1d ((List A) (an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A))) L1 (append x1 (append L2 x2)))
                    (anll ((eq L1 (append x1 (append L2 x2))) (eq (len x1) n) (el L1 (List A)))))
                  (anr ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (el L1 (List A))))))))))))))

(local theorem sublistAt_append ((l nat ()) (l1 nat ()) (l2 nat ()) (n nat ())) ()
  (iff (sublistAt n l (append l1 l2)) (an (sublistAt n l l1) (sublistAt (add n (len l1)) l l2)))
((a nat) (a1 nat) (b nat) (b2 nat))
(:let H1 (appendlen (a l1))
(:conv (iff (sublistAt n l (append l1 l2)) (an (sublistAt n l l1) (sublistAt (add n (len l1)) l l2)))
  (iff
    (:unfold sublistAt (n l (append l1 l2)) (a b)
      (ex a (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n)))))
    (an
      (:unfold sublistAt (n l l1) (a b2)
        (ex a (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n)))))
      (sublistAt (add n (len l1)) l l2)))
  (bian2exi ((sublistAt (add n (len l1)) l l2) a (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n))) (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))))
    (ax_mp ((iff (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (sublistAt (add n (len l1)) l l2)) (ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))) (iff (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n))) (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (sublistAt (add n (len l1)) l l2))))
      (ax_mp ((iff (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n))) (ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))) (im (iff (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (sublistAt (add n (len l1)) l l2)) (ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))) (iff (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n))) (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (sublistAt (add n (len l1)) l l2)))))
        (bitr4 ((ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n))) (ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (sublistAt (add n (len l1)) l l2))))
        (ax_mp ((iff (an (ex b (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (eq (len a) n)) (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n)))) (iff (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n))) (ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))))
          (ax_mp ((iff (ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (an (ex b (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (eq (len a) n))) (im (iff (an (ex b (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (eq (len a) n)) (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n)))) (iff (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n))) (ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))))))
            (bitr2 ((ex b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (an (ex b (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (eq (len a) n)) (ex b (an (eq l (append a (append (append l1 l2) b))) (eq (len a) n)))))
            (bian2exi ((eq (len a) n) b (an (ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))) (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))
              (bian21i ((ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) (ex b2 (eq l (append a (append l1 b2)))) (eq (len a) n) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))
                (exan2 (b2 (eq l (append a (append l1 b2))) (eq (len a) n))))))
          (biexan1a ((eq (len a) n) b (ex b (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (eq l (append a (append (append l1 l2) b))))
            (exeqd ((eq (len a) n) b (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))) (eq l (append a (append (append l1 l2) b))))
              (syl6bb ((eq (len a) n) (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))) (ex b2 (an (eq b2 (append l2 b)) (eq l (append a (append l1 b2))))) (eq l (append a (append (append l1 l2) b))))
                (exeqe (b2 (append l2 b) (eq l (append a (append l1 b2))) (eq l (append a (append (append l1 l2) b))))
                  (eqeq2d ((eq b2 (append l2 b)) l (append a (append l1 b2)) (append a (append (append l1 l2) b)))
                    (appendeq2d ((eq b2 (append l2 b)) a (append l1 b2) (append (append l1 l2) b))
                      (syl6eqr ((eq b2 (append l2 b)) (append l1 b2) (append l1 (append l2 b)) (append (append l1 l2) b))
                        (appendass (l1 l2 b))
                        (appendeq2 (l1 b2 (append l2 b)))))))
                (syl5bbr ((eq (len a) n) (an (ex b2 (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))) (ex b2 (an (eq l (append a (append l1 b2))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))) (ex b2 (an (eq b2 (append l2 b)) (eq l (append a (append l1 b2))))))
                  (exan2 (b2 (eq l (append a (append l1 b2))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))
                  (exeqd ((eq (len a) n) b2 (an (eq l (append a (append l1 b2))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))) (an (eq b2 (append l2 b)) (eq l (append a (append l1 b2)))))
                    (syl6bb ((eq (len a) n) (an (eq l (append a (append l1 b2))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))) (an (eq l (append a (append l1 b2))) (eq b2 (append l2 b))) (an (eq b2 (append l2 b)) (eq l (append a (append l1 b2)))))
                      (ancomb ((eq l (append a (append l1 b2))) (eq b2 (append l2 b))))
                      (aneq2da ((eq (len a) n) (eq l (append a (append l1 b2))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))) (eq b2 (append l2 b)))
                        (bitrd ((an (eq (len a) n) (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))) (an (eq b2 (append l2 b)) (eq (len a) n)) (eq b2 (append l2 b)))
                          (syl6bb ((an (eq (len a) n) (eq l (append a (append l1 b2)))) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))) (ex a1 (an (eq a1 (append a l1)) (an (eq b2 (append l2 b)) (eq (len a1) (add n (len l1)))))) (an (eq b2 (append l2 b)) (eq (len a) n)))
                            (exeqe (a1 (append a l1) (an (eq b2 (append l2 b)) (eq (len a1) (add n (len l1)))) (an (eq b2 (append l2 b)) (eq (len a) n)))
                              (aneq2d ((eq a1 (append a l1)) (eq b2 (append l2 b)) (eq (len a1) (add n (len l1))) (eq (len a) n))
                                (syl6bb ((eq a1 (append a l1)) (eq (len a1) (add n (len l1))) (eq (add (len a) (len l1)) (add n (len l1))) (eq (len a) n))
                                  (addcan1 ((len a) n (len l1)))
                                  (eqeq1d ((eq a1 (append a l1)) (len a1) (add (len a) (len l1)) (add n (len l1)))
                                    (syl6eq ((eq a1 (append a l1)) (len a1) (len (append a l1)) (add (len a) (len l1)))
                                      H1
                                      (leneq (a1 (append a l1))))))))
                            (exeqd ((an (eq (len a) n) (eq l (append a (append l1 b2)))) a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))) (an (eq a1 (append a l1)) (an (eq b2 (append l2 b)) (eq (len a1) (add n (len l1))))))
                              (syl6bb ((an (eq (len a) n) (eq l (append a (append l1 b2)))) (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))) (an (eq (append a l1) a1) (an (eq b2 (append l2 b)) (eq (len a1) (add n (len l1))))) (an (eq a1 (append a l1)) (an (eq b2 (append l2 b)) (eq (len a1) (add n (len l1))))))
                                (aneq1i ((eq (append a l1) a1) (eq a1 (append a l1)) (an (eq b2 (append l2 b)) (eq (len a1) (add n (len l1)))))
                                  (eqcomb ((append a l1) a1)))
                                (bian11da ((an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq l (append a1 (append l2 b))) (eq (append a l1) a1) (eq b2 (append l2 b)) (eq (len a1) (add n (len l1))))
                                  (bitrd ((an (an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))) (eq l (append a1 (append l2 b))) (eq (append (append a l1) b2) (append a1 (append l2 b))) (an (eq (append a l1) a1) (eq b2 (append l2 b))))
                                    (eqeq1d ((an (an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))) l (append (append a l1) b2) (append a1 (append l2 b)))
                                      (syl6eqr ((an (an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))) l (append a (append l1 b2)) (append (append a l1) b2))
                                        (appendass (a l1 b2))
                                        (anlr ((eq (len a) n) (eq l (append a (append l1 b2))) (eq (len a1) (add n (len l1)))))))
                                    (syl ((an (an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))) (eq (len (append a l1)) (len a1)) (iff (eq (append (append a l1) b2) (append a1 (append l2 b))) (an (eq (append a l1) a1) (eq b2 (append l2 b)))))
                                      (appendinj1 ((append a l1) b2 a1 (append l2 b)))
                                      (syl5eq ((an (an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))) (len (append a l1)) (add (len a) (len l1)) (len a1))
                                        H1
                                        (eqtr4d ((an (an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))) (add (len a) (len l1)) (add n (len l1)) (len a1))
                                          (addeq1d ((an (an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))) (len a) n (len l1))
                                            (anll ((eq (len a) n) (eq l (append a (append l1 b2))) (eq (len a1) (add n (len l1))))))
                                          (anr ((an (eq (len a) n) (eq l (append a (append l1 b2)))) (eq (len a1) (add n (len l1)))))))))))))
                          (anwl ((eq (len a) n) (eq l (append a (append l1 b2))) (iff (an (eq b2 (append l2 b)) (eq (len a) n)) (eq b2 (append l2 b))))
                            (bian2 ((eq b2 (append l2 b)) (eq (len a) n))))))))))))))
      (biexan2i ((ex b2 (an (eq l (append a (append l1 b2))) (eq (len a) n))) b (sublistAt (add n (len l1)) l l2) (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1))))))
        (:conv (iff (sublistAt (add n (len l1)) l l2) (ex b (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))
          (iff
            (:unfold sublistAt ((add n (len l1)) l l2) (a1 b)
              (ex a1 (ex b (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))
            (ex b (ex a1 (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))
          (excomb (a1 b (an (eq l (append a1 (append l2 b))) (eq (len a1) (add n (len l1)))))))))))))

(local theorem sublistAt_len_le ((L1 nat ()) (L2 nat ()) (n nat ())) ()
  (im (sublistAt n L1 L2) (le (add n (len L2)) (len L1)))
((x1 nat) (x2 nat))
(:conv (im (sublistAt n L1 L2) (le (add n (len L2)) (len L1)))
  (im
    (:unfold sublistAt (n L1 L2) (x1 x2)
      (ex x1 (ex x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)))))
    (le (add n (len L2)) (len L1)))
  (eex (x1 (ex x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n))) (le (add n (len L2)) (len L1)))
    (eex (x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (le (add n (len L2)) (len L1)))
      (mpbii ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (le (len L2) (len (append L2 x2))) (le (add n (len L2)) (len L1)))
        (mpbir ((le (len L2) (add (len L2) (len x2))) (le (len L2) (len (append L2 x2))))
          (ax_mp ((eq (len (append L2 x2)) (add (len L2) (len x2))) (iff (le (len L2) (len (append L2 x2))) (le (len L2) (add (len L2) (len x2)))))
            (leeq2 ((len L2) (len (append L2 x2)) (add (len L2) (len x2))))
            (appendlen (L2 x2)))
          (leaddid1 ((len L2) (len x2))))
        (syl5bb ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (le (len L2) (len (append L2 x2))) (le (add (len x1) (len L2)) (add (len x1) (len (append L2 x2)))) (le (add n (len L2)) (len L1)))
          (leadd2 ((len x1) (len L2) (len (append L2 x2))))
          (leeqd ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (add (len x1) (len L2)) (add n (len L2)) (add (len x1) (len (append L2 x2))) (len L1))
            (addeq1d ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (len x1) n (len L2))
              (anr ((eq L1 (append x1 (append L2 x2))) (eq (len x1) n))))
            (syl5eqr ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (add (len x1) (len (append L2 x2))) (len (append x1 (append L2 x2))) (len L1))
              (appendlen (x1 (append L2 x2)))
              (leneqd ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (append x1 (append L2 x2)) L1)
                (eqcomd ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) L1 (append x1 (append L2 x2)))
                  (anl ((eq L1 (append x1 (append L2 x2))) (eq (len x1) n)))))))))))))

(local theorem sublistAt_left ((L1 nat ()) (L2 nat ()) (l nat ()) (n nat ())) ()
  (im (sublistAt n L1 L2) (sublistAt n (append L1 l) L2))
((x nat) (x1 nat) (x2 nat))
(:conv (im (sublistAt n L1 L2) (sublistAt n (append L1 l) L2))
  (im
    (:unfold sublistAt (n L1 L2) (x1 x2)
      (ex x1 (ex x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)))))
    (:unfold sublistAt (n (append L1 l) L2) (x1 x)
      (ex x1 (ex x (an (eq (append L1 l) (append x1 (append L2 x))) (eq (len x1) n))))))
  (eximi (x1 (ex x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n))) (ex x (an (eq (append L1 l) (append x1 (append L2 x))) (eq (len x1) n))))
    (eex (x2 (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (ex x (an (eq (append L1 l) (append x1 (append L2 x))) (eq (len x1) n))))
      (iexde (x (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (append x2 l) (an (eq (append L1 l) (append x1 (append L2 x))) (eq (len x1) n)))
        (iand ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) (eq (append L1 l) (append x1 (append L2 x))) (eq (len x1) n))
          (mpbiri ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) (eq (append (append x1 (append L2 x2)) l) (append x1 (append L2 (append x2 l)))) (eq (append L1 l) (append x1 (append L2 x))))
            (ax_mp ((eq (append x1 (append (append L2 x2) l)) (append x1 (append L2 (append x2 l)))) (eq (append (append x1 (append L2 x2)) l) (append x1 (append L2 (append x2 l)))))
              (ax_mp ((eq (append (append x1 (append L2 x2)) l) (append x1 (append (append L2 x2) l))) (im (eq (append x1 (append (append L2 x2) l)) (append x1 (append L2 (append x2 l)))) (eq (append (append x1 (append L2 x2)) l) (append x1 (append L2 (append x2 l))))))
                (eqtr ((append (append x1 (append L2 x2)) l) (append x1 (append (append L2 x2) l)) (append x1 (append L2 (append x2 l)))))
                (appendass (x1 (append L2 x2) l)))
              (ax_mp ((eq (append (append L2 x2) l) (append L2 (append x2 l))) (eq (append x1 (append (append L2 x2) l)) (append x1 (append L2 (append x2 l)))))
                (appendeq2 (x1 (append (append L2 x2) l) (append L2 (append x2 l))))
                (appendass (L2 x2 l))))
            (eqeqd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) (append L1 l) (append (append x1 (append L2 x2)) l) (append x1 (append L2 x)) (append x1 (append L2 (append x2 l))))
              (appendeqd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) L1 (append x1 (append L2 x2)) l l)
                (anwl ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l)) (eq L1 (append x1 (append L2 x2))))
                  (anwl ((eq L1 (append x1 (append L2 x2))) (eq (len x1) n) (eq L1 (append x1 (append L2 x2))))
                    (id ((eq L1 (append x1 (append L2 x2)))))))
                (eqidd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) l)))
              (appendeqd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) x1 x1 (append L2 x) (append L2 (append x2 l)))
                (eqidd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) x1))
                (appendeqd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) L2 L2 x (append x2 l))
                  (eqidd ((an (an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l))) L2))
                  (anwr ((an (eq L1 (append x1 (append L2 x2))) (eq (len x1) n)) (eq x (append x2 l)) (eq x (append x2 l)))
                    (id ((eq x (append x2 l)))))))))
          (anlr ((eq L1 (append x1 (append L2 x2))) (eq (len x1) n) (eq x (append x2 l))))))))))

(local theorem sublistAt_right ((L1 nat ()) (L2 nat ()) (l nat ()) (n nat ())) ()
  (im (sublistAt n L1 L2) (sublistAt (add (len l) n) (append l L1) L2))
((r nat) (x nat) (y nat))
(:let H1 (id ((eq r (append l x))))
(:conv (im (sublistAt n L1 L2) (sublistAt (add (len l) n) (append l L1) L2))
  (im
    (:unfold sublistAt (n L1 L2) (x y)
      (ex x (ex y (an (eq L1 (append x (append L2 y))) (eq (len x) n)))))
    (sublistAt (add (len l) n) (append l L1) L2))
  (eex (x (ex y (an (eq L1 (append x (append L2 y))) (eq (len x) n))) (sublistAt (add (len l) n) (append l L1) L2))
    (:conv (im (ex y (an (eq L1 (append x (append L2 y))) (eq (len x) n))) (sublistAt (add (len l) n) (append l L1) L2))
      (im
        (ex y (an (eq L1 (append x (append L2 y))) (eq (len x) n)))
        (:unfold sublistAt ((add (len l) n) (append l L1) L2) (r y)
          (ex r (ex y (an (eq (append l L1) (append r (append L2 y))) (eq (len r) (add (len l) n)))))))
      (iexde (r (ex y (an (eq L1 (append x (append L2 y))) (eq (len x) n))) (append l x) (ex y (an (eq (append l L1) (append r (append L2 y))) (eq (len r) (add (len l) n)))))
        (impcom ((eq r (append l x)) (ex y (an (eq L1 (append x (append L2 y))) (eq (len x) n))) (ex y (an (eq (append l L1) (append r (append L2 y))) (eq (len r) (add (len l) n)))))
          (eximd (y (eq r (append l x)) (an (eq L1 (append x (append L2 y))) (eq (len x) n)) (an (eq (append l L1) (append r (append L2 y))) (eq (len r) (add (len l) n))))
            (mpbiri ((eq r (append l x)) (im (an (eq L1 (append x (append L2 y))) (eq (len x) n)) (an (eq (append l L1) (append (append l x) (append L2 y))) (eq (len (append l x)) (add (len l) n)))) (im (an (eq L1 (append x (append L2 y))) (eq (len x) n)) (an (eq (append l L1) (append r (append L2 y))) (eq (len r) (add (len l) n)))))
              (ax_mp ((im (eq (len x) n) (eq (len (append l x)) (add (len l) n))) (im (an (eq L1 (append x (append L2 y))) (eq (len x) n)) (an (eq (append l L1) (append (append l x) (append L2 y))) (eq (len (append l x)) (add (len l) n)))))
                (ax_mp ((im (eq L1 (append x (append L2 y))) (eq (append l L1) (append (append l x) (append L2 y)))) (im (im (eq (len x) n) (eq (len (append l x)) (add (len l) n))) (im (an (eq L1 (append x (append L2 y))) (eq (len x) n)) (an (eq (append l L1) (append (append l x) (append L2 y))) (eq (len (append l x)) (add (len l) n))))))
                  (anim ((eq L1 (append x (append L2 y))) (eq (append l L1) (append (append l x) (append L2 y))) (eq (len x) n) (eq (len (append l x)) (add (len l) n))))
                  (syl6eqr ((eq L1 (append x (append L2 y))) (append l L1) (append l (append x (append L2 y))) (append (append l x) (append L2 y)))
                    (appendass (l x (append L2 y)))
                    (appendeq2 (l L1 (append x (append L2 y))))))
                (syl5eq ((eq (len x) n) (len (append l x)) (add (len l) (len x)) (add (len l) n))
                  (appendlen (l x))
                  (addeq2 ((len l) (len x) n))))
              (imeqd ((eq r (append l x)) (an (eq L1 (append x (append L2 y))) (eq (len x) n)) (an (eq L1 (append x (append L2 y))) (eq (len x) n)) (an (eq (append l L1) (append r (append L2 y))) (eq (len r) (add (len l) n))) (an (eq (append l L1) (append (append l x) (append L2 y))) (eq (len (append l x)) (add (len l) n))))
                (biidd ((eq r (append l x)) (an (eq L1 (append x (append L2 y))) (eq (len x) n))))
                (aneqd ((eq r (append l x)) (eq (append l L1) (append r (append L2 y))) (eq (append l L1) (append (append l x) (append L2 y))) (eq (len r) (add (len l) n)) (eq (len (append l x)) (add (len l) n)))
                  (eqeqd ((eq r (append l x)) (append l L1) (append l L1) (append r (append L2 y)) (append (append l x) (append L2 y)))
                    (eqidd ((eq r (append l x)) (append l L1)))
                    (appendeqd ((eq r (append l x)) r (append l x) (append L2 y) (append L2 y))
                      H1
                      (eqidd ((eq r (append l x)) (append L2 y)))))
                  (eqeqd ((eq r (append l x)) (len r) (len (append l x)) (add (len l) n) (add (len l) n))
                    (leneqd ((eq r (append l x)) r (append l x))
                      H1)
                    (eqidd ((eq r (append l x)) (add (len l) n)))))))))))))))

(local theorem sublistAt_id ((L nat ())) ()
  (sublistAt (d0) L L)
((x nat) (y nat))
(:let H1 (eqidd ((an (eq x (d0)) (eq y (d0))) L))
(:let H2 (anwl ((eq x (d0)) (eq y (d0)) (eq x (d0)))
  (id ((eq x (d0)))))
(:conv (sublistAt (d0) L L)
  (:unfold sublistAt ((d0) L L) (x y)
    (ex x (ex y (an (eq L (append x (append L y))) (eq (len x) (d0))))))
  (iexie (x (d0) (ex y (an (eq L (append x (append L y))) (eq (len x) (d0)))))
    (iexde (y (eq x (d0)) (d0) (an (eq L (append x (append L y))) (eq (len x) (d0))))
      (mpbiri ((an (eq x (d0)) (eq y (d0))) (an (eq L (append (d0) (append L (d0)))) (eq (len (d0)) (d0))) (an (eq L (append x (append L y))) (eq (len x) (d0))))
        (ax_mp ((eq (len (d0)) (d0)) (an (eq L (append (d0) (append L (d0)))) (eq (len (d0)) (d0))))
          (ax_mp ((eq L (append (d0) (append L (d0)))) (im (eq (len (d0)) (d0)) (an (eq L (append (d0) (append L (d0)))) (eq (len (d0)) (d0)))))
            (ian ((eq L (append (d0) (append L (d0)))) (eq (len (d0)) (d0))))
            (ax_mp ((eq (append L (d0)) L) (eq L (append (d0) (append L (d0)))))
              (ax_mp ((eq (append (d0) (append L (d0))) (append L (d0))) (im (eq (append L (d0)) L) (eq L (append (d0) (append L (d0))))))
                (eqtr2 ((append (d0) (append L (d0))) (append L (d0)) L))
                (append0 ((append L (d0)))))
              (append02 (L))))
          (len0 ()))
        (aneqd ((an (eq x (d0)) (eq y (d0))) (eq L (append x (append L y))) (eq L (append (d0) (append L (d0)))) (eq (len x) (d0)) (eq (len (d0)) (d0)))
          (eqeqd ((an (eq x (d0)) (eq y (d0))) L L (append x (append L y)) (append (d0) (append L (d0))))
            H1
            (appendeqd ((an (eq x (d0)) (eq y (d0))) x (d0) (append L y) (append L (d0)))
              H2
              (appendeqd ((an (eq x (d0)) (eq y (d0))) L L y (d0))
                H1
                (anwr ((eq x (d0)) (eq y (d0)) (eq y (d0)))
                  (id ((eq y (d0))))))))
          (eqeqd ((an (eq x (d0)) (eq y (d0))) (len x) (len (d0)) (d0) (d0))
            (leneqd ((an (eq x (d0)) (eq y (d0))) x (d0))
              H2)
            (eqidd ((an (eq x (d0)) (eq y (d0))) (d0))))))))))))

(def all2 ((R set ())) (set ())
((l1 nat) (l2 nat) (n nat) (x nat) (y nat))
(sab l1 (ab l2 (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))))))

(local theorem all2eqd ((_G wff ()) (_R1 set ()) (_R2 set ()))
  ((_Rh (im _G (eqs _R1 _R2))))
  (im _G (eqs (all2 _R1) (all2 _R2)))
((l1 nat) (l2 nat) (n nat) (x nat) (y nat))
(:conv (im _G (eqs (all2 _R1) (all2 _R2)))
  (im
    _G
    (eqs
      (:unfold all2 (_R1) (l1 l2 n x y)
        (sab l1 (ab l2 (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1))))))))))
      (:unfold all2 (_R2) (l1 l2 n x y)
        (sab l1 (ab l2 (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2))))))))))))
  (sabeqd (_G l1 (ab l2 (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1)))))))) (ab l2 (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2)))))))))
    (abeqd (_G l2 (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1))))))) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2))))))))
      (aneqd (_G (eq (len l1) (len l2)) (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1)))))) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2)))))))
        (biidd (_G (eq (len l1) (len l2))))
        (aleqd (_G n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1))))) (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2))))))
          (aleqd (_G x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1)))) (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2)))))
            (aleqd (_G y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1))) (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2))))
              (imeqd (_G (eq (nth n l1) (suc x)) (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R1)) (im (eq (nth n l2) (suc y)) (el (pr x y) _R2)))
                (biidd (_G (eq (nth n l1) (suc x))))
                (imeqd (_G (eq (nth n l2) (suc y)) (eq (nth n l2) (suc y)) (el (pr x y) _R1) (el (pr x y) _R2))
                  (biidd (_G (eq (nth n l2) (suc y))))
                  (eleqd (_G (pr x y) (pr x y) _R1 _R2)
                    (eqidd (_G (pr x y)))
                    _Rh)))))))))))

(local theorem all2eq ((_R1 set ()) (_R2 set ())) ()
  (im (eqs _R1 _R2) (eqs (all2 _R1) (all2 _R2)))
()
(all2eqd ((eqs _R1 _R2) _R1 _R2)
  (id ((eqs _R1 _R2)))))

(local theorem elall2 ((R set ()) (l1 nat ()) (l2 nat ()) (n nat) (x nat) (y nat)) ()
  (iff (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))))
((_1 nat) (_2 nat))
(:let H1 (anwl ((eq _1 l1) (eq _2 l2) (eq _1 l1))
  (id ((eq _1 l1))))
(:let H2 (anwr ((eq _1 l1) (eq _2 l2) (eq _2 l2))
  (id ((eq _2 l2))))
(:let H3 (eqidd ((an (eq _1 l1) (eq _2 l2)) n))
(:conv (iff (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))))
  (iff
    (el
      (pr l1 l2)
      (:unfold all2 (R) (_1 _2 n x y)
        (sab _1 (ab _2 (an (eq (len _1) (len _2)) (al n (al x (al y (im (eq (nth n _1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R)))))))))))
    (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))))
  (elsabe (l1 l2 (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))) _1 (ab _2 (an (eq (len _1) (len _2)) (al n (al x (al y (im (eq (nth n _1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R)))))))))
    (elabed ((eq _1 l1) _2 l2 (an (eq (len _1) (len _2)) (al n (al x (al y (im (eq (nth n _1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R))))))) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))))
      (aneqd ((an (eq _1 l1) (eq _2 l2)) (eq (len _1) (len _2)) (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n _1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R)))))) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))
        (eqeqd ((an (eq _1 l1) (eq _2 l2)) (len _1) (len l1) (len _2) (len l2))
          (leneqd ((an (eq _1 l1) (eq _2 l2)) _1 l1)
            H1)
          (leneqd ((an (eq _1 l1) (eq _2 l2)) _2 l2)
            H2))
        (aleqd ((an (eq _1 l1) (eq _2 l2)) n (al x (al y (im (eq (nth n _1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R))))) (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))
          (aleqd ((an (eq _1 l1) (eq _2 l2)) x (al y (im (eq (nth n _1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R)))) (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))
            (aleqd ((an (eq _1 l1) (eq _2 l2)) y (im (eq (nth n _1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R))) (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))
              (imeqd ((an (eq _1 l1) (eq _2 l2)) (eq (nth n _1) (suc x)) (eq (nth n l1) (suc x)) (im (eq (nth n _2) (suc y)) (el (pr x y) R)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))
                (eqeqd ((an (eq _1 l1) (eq _2 l2)) (nth n _1) (nth n l1) (suc x) (suc x))
                  (ntheqd ((an (eq _1 l1) (eq _2 l2)) n n _1 l1)
                    H3
                    H1)
                  (eqidd ((an (eq _1 l1) (eq _2 l2)) (suc x))))
                (imeqd ((an (eq _1 l1) (eq _2 l2)) (eq (nth n _2) (suc y)) (eq (nth n l2) (suc y)) (el (pr x y) R) (el (pr x y) R))
                  (eqeqd ((an (eq _1 l1) (eq _2 l2)) (nth n _2) (nth n l2) (suc y) (suc y))
                    (ntheqd ((an (eq _1 l1) (eq _2 l2)) n n _2 l2)
                      H3
                      H2)
                    (eqidd ((an (eq _1 l1) (eq _2 l2)) (suc y))))
                  (biidd ((an (eq _1 l1) (eq _2 l2)) (el (pr x y) R))))))))))))))))

(local theorem elall22 ((R set ()) (l1 nat ()) (l2 nat ()) (n nat) (x nat) (y nat)) ()
  (iff (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))))
()
(ax_mp ((iff (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))) (an (eq (len l1) (len l2)) (al n (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))) (iff (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))))
  (ax_mp ((iff (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))) (im (iff (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))) (an (eq (len l1) (len l2)) (al n (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))) (iff (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))))))
    (bitr ((el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))) (an (eq (len l1) (len l2)) (al n (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))))
    (elall2 (R l1 l2 n x y)))
  (aneq2i ((eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))) (al n (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))
    (aleqi (n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))) (al x (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))
      (aleqi (x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))) (im (eq (nth n l1) (suc x)) (al y (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))
        (alim1 (y (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))))))

(local theorem all2ssg ((R set ()) (S set ()) (l1 nat ()) (l2 nat ()) (x nat) (y nat)) ()
  (im (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (im (el (pr l1 l2) (all2 R)) (el (pr l1 l2) (all2 S))))
((n nat))
(sylibr ((al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (im (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))))))) (im (el (pr l1 l2) (all2 R)) (el (pr l1 l2) (all2 S))))
  (imeqi ((el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))))) (el (pr l1 l2) (all2 S)) (an (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) S))))))))
    (elall2 (R l1 l2 n x y))
    (elall2 (S l1 l2 n x y)))
  (anim2d ((al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (eq (len l1) (len l2)) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))))) (al n (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))))))
    (alimd (n (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))))) (al x (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) S))))))
      (al2imi (x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S)))) (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)))) (al y (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))))
        (al2imi (y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))) (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))) (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) S))))
          (sylbi ((im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))) (im (lmem x l1) (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S)))) (im (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R))) (im (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))))
            (impexp ((lmem x l1) (lmem y l2) (im (el (pr x y) R) (el (pr x y) S))))
            (a2d ((im (lmem x l1) (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S)))) (eq (nth n l1) (suc x)) (im (eq (nth n l2) (suc y)) (el (pr x y) R)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))
              (ax_mp ((im (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S))) (im (im (eq (nth n l2) (suc y)) (el (pr x y) R)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))) (im (im (lmem x l1) (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S)))) (im (eq (nth n l1) (suc x)) (im (im (eq (nth n l2) (suc y)) (el (pr x y) R)) (im (eq (nth n l2) (suc y)) (el (pr x y) S))))))
                (ax_mp ((im (eq (nth n l1) (suc x)) (lmem x l1)) (im (im (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S))) (im (im (eq (nth n l2) (suc y)) (el (pr x y) R)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))) (im (im (lmem x l1) (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S)))) (im (eq (nth n l1) (suc x)) (im (im (eq (nth n l2) (suc y)) (el (pr x y) R)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))))))
                  (imim ((eq (nth n l1) (suc x)) (lmem x l1) (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S))) (im (im (eq (nth n l2) (suc y)) (el (pr x y) R)) (im (eq (nth n l2) (suc y)) (el (pr x y) S)))))
                  (nthlmem (x l1 n)))
                (a2d ((im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S))) (eq (nth n l2) (suc y)) (el (pr x y) R) (el (pr x y) S))
                  (ax_mp ((im (eq (nth n l2) (suc y)) (lmem y l2)) (im (im (lmem y l2) (im (el (pr x y) R) (el (pr x y) S))) (im (eq (nth n l2) (suc y)) (im (el (pr x y) R) (el (pr x y) S)))))
                    (imim1 ((eq (nth n l2) (suc y)) (lmem y l2) (im (el (pr x y) R) (el (pr x y) S))))
                    (nthlmem (y l2 n)))))))))))))

(local theorem all2ss ((R set ()) (S set ())) ()
  (im (subset R S) (subset (all2 R) (all2 S)))
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(ssrd2 ((all2 R) (all2 S) (subset R S) x1 x2)
  (syl ((subset R S) (al x3 (al x4 (im (an (lmem x3 x1) (lmem x4 x2)) (im (el (pr x3 x4) R) (el (pr x3 x4) S))))) (im (el (pr x1 x2) (all2 R)) (el (pr x1 x2) (all2 S))))
    (all2ssg (R S x1 x2 x3 x4))
    (iald (x3 (subset R S) (al x4 (im (an (lmem x3 x1) (lmem x4 x2)) (im (el (pr x3 x4) R) (el (pr x3 x4) S)))))
      (iald (x4 (subset R S) (im (an (lmem x3 x1) (lmem x4 x2)) (im (el (pr x3 x4) R) (el (pr x3 x4) S))))
        (a1d ((subset R S) (im (el (pr x3 x4) R) (el (pr x3 x4) S)) (an (lmem x3 x1) (lmem x4 x2)))
          (ssel (R S (pr x3 x4)))))))))

(local theorem all2eqg ((R set ()) (S set ()) (l1 nat ()) (l2 nat ()) (x nat) (y nat)) ()
  (im (al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (iff (el (pr l1 l2) (all2 R)) (el (pr l1 l2) (all2 S))))
()
(ibid ((al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (el (pr l1 l2) (all2 R)) (el (pr l1 l2) (all2 S)))
  (syl ((al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (im (el (pr l1 l2) (all2 R)) (el (pr l1 l2) (all2 S))))
    (all2ssg (R S l1 l2 x y))
    (alimi (x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)))) (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S)))))
      (alimi (y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))) (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))
        (imim2i ((an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)) (im (el (pr x y) R) (el (pr x y) S)))
          (bi1 ((el (pr x y) R) (el (pr x y) S)))))))
  (syl ((al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) S) (el (pr x y) R))))) (im (el (pr l1 l2) (all2 S)) (el (pr l1 l2) (all2 R))))
    (all2ssg (S R l1 l2 x y))
    (alimi (x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)))) (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) S) (el (pr x y) R)))))
      (alimi (y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))) (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) S) (el (pr x y) R))))
        (imim2i ((an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)) (im (el (pr x y) S) (el (pr x y) R)))
          (bi2 ((el (pr x y) R) (el (pr x y) S)))))))))

(local theorem all2len ((R set ()) (l1 nat ()) (l2 nat ())) ()
  (im (el (pr l1 l2) (all2 R)) (eq (len l1) (len l2)))
((x1 nat) (x2 nat) (x3 nat))
(sylbi ((el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) R))))))) (eq (len l1) (len l2)))
  (elall2 (R l1 l2 x1 x2 x3))
  (anl ((eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) R))))))))))

(local theorem all2i ((G wff ()) (R set ()) (a nat ()) (b nat ()) (l1 nat ()) (l2 nat ()) (n nat ()))
  ((h1 (im G (eq (nth n l1) (suc a))))
   (h2 (im G (eq (nth n l2) (suc b))))
   (h (im G (el (pr l1 l2) (all2 R)))))
  (im G (el (pr a b) R))
((_1 nat) (_2 nat) (_3 nat))
(:let H1 (anwl ((an (an G (eq _1 n)) (eq _2 a)) (eq _3 b) (eq _1 n))
  (anwl ((an G (eq _1 n)) (eq _2 a) (eq _1 n))
    (anwr (G (eq _1 n) (eq _1 n))
      (id ((eq _1 n))))))
(:let H2 (anwl ((an (an G (eq _1 n)) (eq _2 a)) (eq _3 b) (eq _2 a))
  (anwr ((an G (eq _1 n)) (eq _2 a) (eq _2 a))
    (id ((eq _2 a)))))
(:let H3 (anwr ((an (an G (eq _1 n)) (eq _2 a)) (eq _3 b) (eq _3 b))
  (id ((eq _3 b))))
(mpd (G (eq (nth n l2) (suc b)) (el (pr a b) R))
  h2
  (mpd (G (eq (nth n l1) (suc a)) (im (eq (nth n l2) (suc b)) (el (pr a b) R)))
    h1
    (mpd (G (al _1 (al _2 (al _3 (im (eq (nth _1 l1) (suc _2)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R)))))) (im (eq (nth n l1) (suc a)) (im (eq (nth n l2) (suc b)) (el (pr a b) R))))
      (anrd (G (eq (len l1) (len l2)) (al _1 (al _2 (al _3 (im (eq (nth _1 l1) (suc _2)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R)))))))
        (sylib (G (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al _1 (al _2 (al _3 (im (eq (nth _1 l1) (suc _2)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R))))))))
          (elall2 (R l1 l2 _1 _2 _3))
          h))
      (ealde ((im (eq (nth n l1) (suc a)) (im (eq (nth n l2) (suc b)) (el (pr a b) R))) _1 G n (al _2 (al _3 (im (eq (nth _1 l1) (suc _2)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R))))))
        (ealde ((im (eq (nth n l1) (suc a)) (im (eq (nth n l2) (suc b)) (el (pr a b) R))) _2 (an G (eq _1 n)) a (al _3 (im (eq (nth _1 l1) (suc _2)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R)))))
          (ealde ((im (eq (nth n l1) (suc a)) (im (eq (nth n l2) (suc b)) (el (pr a b) R))) _3 (an (an G (eq _1 n)) (eq _2 a)) b (im (eq (nth _1 l1) (suc _2)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R))))
            (bi1d ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) (im (eq (nth _1 l1) (suc _2)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R))) (im (eq (nth n l1) (suc a)) (im (eq (nth n l2) (suc b)) (el (pr a b) R))))
              (imeqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) (eq (nth _1 l1) (suc _2)) (eq (nth n l1) (suc a)) (im (eq (nth _1 l2) (suc _3)) (el (pr _2 _3) R)) (im (eq (nth n l2) (suc b)) (el (pr a b) R)))
                (eqeqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) (nth _1 l1) (nth n l1) (suc _2) (suc a))
                  (ntheqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) _1 n l1 l1)
                    H1
                    (eqidd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) l1)))
                  (suceqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) _2 a)
                    H2))
                (imeqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) (eq (nth _1 l2) (suc _3)) (eq (nth n l2) (suc b)) (el (pr _2 _3) R) (el (pr a b) R))
                  (eqeqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) (nth _1 l2) (nth n l2) (suc _3) (suc b))
                    (ntheqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) _1 n l2 l2)
                      H1
                      (eqidd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) l2)))
                    (suceqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) _3 b)
                      H3))
                  (eleqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) (pr _2 _3) (pr a b) R R)
                    (preqd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) _2 a _3 b)
                      H2
                      H3)
                    (eqsidd ((an (an (an G (eq _1 n)) (eq _2 a)) (eq _3 b)) R))))))))))))))))

(local theorem all2com ((R set ()) (l1 nat ()) (l2 nat ())) ()
  (iff (el (pr l1 l2) (all2 (cnv R))) (el (pr l2 l1) (all2 R)))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((iff (el (pr l2 l1) (all2 R)) (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))) (iff (el (pr l1 l2) (all2 (cnv R))) (el (pr l2 l1) (all2 R))))
  (ax_mp ((iff (el (pr l1 l2) (all2 (cnv R))) (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))) (im (iff (el (pr l2 l1) (all2 R)) (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))) (iff (el (pr l1 l2) (all2 (cnv R))) (el (pr l2 l1) (all2 R)))))
    (bitr4 ((el (pr l1 l2) (all2 (cnv R))) (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (el (pr l2 l1) (all2 R))))
    (elall22 ((cnv R) l1 l2 x1 x3 x2)))
  (ax_mp ((iff (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))) (iff (el (pr l2 l1) (all2 R)) (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))))
    (ax_mp ((iff (el (pr l2 l1) (all2 R)) (an (eq (len l2) (len l1)) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))) (im (iff (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))) (iff (el (pr l2 l1) (all2 R)) (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))))))
      (bitr4 ((el (pr l2 l1) (all2 R)) (an (eq (len l2) (len l1)) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))) (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))))
      (elall22 (R l2 l1 x1 x2 x3)))
    (ax_mp ((iff (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))) (iff (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))))
      (ax_mp ((iff (eq (len l1) (len l2)) (eq (len l2) (len l1))) (im (iff (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))) (iff (an (eq (len l1) (len l2)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))))))
        (aneq ((eq (len l1) (len l2)) (eq (len l2) (len l1)) (al x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))) (al x1 (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))))
        (eqcomb ((len l1) (len l2))))
      (aleqi (x1 (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))
        (ax_mp ((iff (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))) (iff (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))
          (ax_mp ((iff (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R))))))) (im (iff (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))) (iff (al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))))
            (bitr ((al x3 (im (eq (nth x1 l1) (suc x3)) (al x2 (im (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))))) (al x2 (im (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))
            (ralcomb (x3 x2 (eq (nth x1 l1) (suc x3)) (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))
          (raleqi (x2 (eq (nth x1 l2) (suc x2)) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))) (al x3 (im (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))
            (raleqi (x3 (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)) (el (pr x2 x3) R))
              (prcnv (R x3 x2))))))))))

(local theorem all2cnv ((R set ())) ()
  (eqs (all2 (cnv R)) (cnv (all2 R)))
((x1 nat) (x2 nat))
(eqri2 ((all2 (cnv R)) (cnv (all2 R)) x1 x2)
  (ax_mp ((iff (el (pr x1 x2) (cnv (all2 R))) (el (pr x2 x1) (all2 R))) (iff (el (pr x1 x2) (all2 (cnv R))) (el (pr x1 x2) (cnv (all2 R)))))
    (ax_mp ((iff (el (pr x1 x2) (all2 (cnv R))) (el (pr x2 x1) (all2 R))) (im (iff (el (pr x1 x2) (cnv (all2 R))) (el (pr x2 x1) (all2 R))) (iff (el (pr x1 x2) (all2 (cnv R))) (el (pr x1 x2) (cnv (all2 R))))))
      (bitr4 ((el (pr x1 x2) (all2 (cnv R))) (el (pr x2 x1) (all2 R)) (el (pr x1 x2) (cnv (all2 R)))))
      (all2com (R x1 x2)))
    (prcnv ((all2 R) x1 x2)))))

(local theorem all20 ((R set ())) ()
  (el (pr (d0) (d0)) (all2 R))
((x1 nat) (x2 nat) (x3 nat))
(mpbir ((an (eq (len (d0)) (len (d0))) (al x1 (al x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R))))))) (el (pr (d0) (d0)) (all2 R)))
  (elall2 (R (d0) (d0) x1 x2 x3))
  (ax_mp ((al x1 (al x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R)))))) (an (eq (len (d0)) (len (d0))) (al x1 (al x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R))))))))
    (ax_mp ((eq (len (d0)) (len (d0))) (im (al x1 (al x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R)))))) (an (eq (len (d0)) (len (d0))) (al x1 (al x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R)))))))))
      (ian ((eq (len (d0)) (len (d0))) (al x1 (al x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R))))))))
      (eqid ((len (d0)))))
    (ax_gen (x1 (al x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R))))))
      (ax_gen (x2 (al x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R)))))
        (ax_gen (x3 (im (eq (nth x1 (d0)) (suc x2)) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R))))
          (rsyl ((eq (nth x1 (d0)) (suc x2)) (eq (suc x2) (nth x1 (d0))) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R)))
            (eqcom ((nth x1 (d0)) (suc x2)))
            (ax_mp ((not (eq (suc x2) (nth x1 (d0)))) (im (eq (suc x2) (nth x1 (d0))) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R))))
              (absurd ((eq (suc x2) (nth x1 (d0))) (im (eq (nth x1 (d0)) (suc x3)) (el (pr x2 x3) R))))
              (mpbir ((ne (suc x2) (d0)) (not (eq (suc x2) (nth x1 (d0)))))
                (ax_mp ((eq (nth x1 (d0)) (d0)) (iff (not (eq (suc x2) (nth x1 (d0)))) (ne (suc x2) (d0))))
                  (:conv (im (eq (nth x1 (d0)) (d0)) (iff (not (eq (suc x2) (nth x1 (d0)))) (ne (suc x2) (d0))))
                    (im
                      (eq (nth x1 (d0)) (d0))
                      (iff
                        (:sym (:unfold ne ((suc x2) (nth x1 (d0))) ()
                          (not (eq (suc x2) (nth x1 (d0))))))
                        (ne (suc x2) (d0))))
                    (neeq2 ((suc x2) (nth x1 (d0)) (d0))))
                  (nth0 (x1)))
                (peano1 (x2)))))))))))

(local theorem all201 ((R set ()) (l nat ())) ()
  (iff (el (pr (d0) l) (all2 R)) (eq l (d0)))
()
(ibii ((el (pr (d0) l) (all2 R)) (eq l (d0)))
  (sylib ((el (pr (d0) l) (all2 R)) (eq (len l) (d0)) (eq l (d0)))
    (leneq0 (l))
    (syl6eq ((el (pr (d0) l) (all2 R)) (len l) (len (d0)) (d0))
      (len0 ())
      (eqcomd ((el (pr (d0) l) (all2 R)) (len (d0)) (len l))
        (all2len (R (d0) l)))))
  (mpbiri ((eq l (d0)) (el (pr (d0) (d0)) (all2 R)) (el (pr (d0) l) (all2 R)))
    (all20 (R))
    (eleq1d ((all2 R) (eq l (d0)) (pr (d0) l) (pr (d0) (d0)))
      (preq2 ((d0) l (d0)))))))

(local theorem all202 ((R set ()) (l nat ())) ()
  (iff (el (pr l (d0)) (all2 R)) (eq l (d0)))
()
(ax_mp ((iff (el (pr (d0) l) (all2 (cnv R))) (eq l (d0))) (iff (el (pr l (d0)) (all2 R)) (eq l (d0))))
  (ax_mp ((iff (el (pr (d0) l) (all2 (cnv R))) (el (pr l (d0)) (all2 R))) (im (iff (el (pr (d0) l) (all2 (cnv R))) (eq l (d0))) (iff (el (pr l (d0)) (all2 R)) (eq l (d0)))))
    (bitr3 ((el (pr l (d0)) (all2 R)) (el (pr (d0) l) (all2 (cnv R))) (eq l (d0))))
    (all2com (R (d0) l)))
  (all201 ((cnv R) l))))

(local theorem all2S ((R set ()) (a nat ()) (b nat ()) (l1 nat ()) (l2 nat ())) ()
  (iff (el (pr (cons a l1) (cons b l2)) (all2 R)) (an (el (pr a b) R) (el (pr l1 l2) (all2 R))))
((_1 nat) (_2 nat) (x1 nat) (x2 nat))
(ax_mp ((iff (an (el (pr a b) R) (el (pr l1 l2) (all2 R))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (el (pr (cons a l1) (cons b l2)) (all2 R)) (an (el (pr a b) R) (el (pr l1 l2) (all2 R)))))
  (ax_mp ((iff (el (pr (cons a l1) (cons b l2)) (all2 R)) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (im (iff (an (el (pr a b) R) (el (pr l1 l2) (all2 R))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (el (pr (cons a l1) (cons b l2)) (all2 R)) (an (el (pr a b) R) (el (pr l1 l2) (all2 R))))))
    (bitr4 ((el (pr (cons a l1) (cons b l2)) (all2 R)) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (an (el (pr a b) R) (el (pr l1 l2) (all2 R)))))
    (elall22 (R (cons a l1) (cons b l2) x2 _2 _1)))
  (ax_mp ((iff (an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (an (el (pr a b) R) (el (pr l1 l2) (all2 R))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
    (ax_mp ((iff (an (el (pr a b) R) (el (pr l1 l2) (all2 R))) (an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))) (im (iff (an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (an (el (pr a b) R) (el (pr l1 l2) (all2 R))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))))
      (bitr ((an (el (pr a b) R) (el (pr l1 l2) (all2 R))) (an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
      (aneq2i ((el (pr a b) R) (el (pr l1 l2) (all2 R)) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))
        (elall22 (R l1 l2 x1 _2 _1))))
    (ax_mp ((iff (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (an (eq (len l1) (len l2)) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))) (iff (an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
      (ax_mp ((iff (an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len l1) (len l2)) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))) (im (iff (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (an (eq (len l1) (len l2)) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))) (iff (an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))))
        (bitr4 ((an (el (pr a b) R) (an (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len l1) (len l2)) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
        (anlass ((el (pr a b) R) (eq (len l1) (len l2)) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
      (ax_mp ((iff (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (iff (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (an (eq (len l1) (len l2)) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))))
        (ax_mp ((iff (eq (len (cons a l1)) (len (cons b l2))) (eq (len l1) (len l2))) (im (iff (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (iff (an (eq (len (cons a l1)) (len (cons b l2))) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (an (eq (len l1) (len l2)) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))))
          (aneq ((eq (len (cons a l1)) (len (cons b l2))) (eq (len l1) (len l2)) (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
          (ax_mp ((iff (eq (suc (len l1)) (suc (len l2))) (eq (len l1) (len l2))) (iff (eq (len (cons a l1)) (len (cons b l2))) (eq (len l1) (len l2))))
            (ax_mp ((iff (eq (len (cons a l1)) (len (cons b l2))) (eq (suc (len l1)) (suc (len l2)))) (im (iff (eq (suc (len l1)) (suc (len l2))) (eq (len l1) (len l2))) (iff (eq (len (cons a l1)) (len (cons b l2))) (eq (len l1) (len l2)))))
              (bitr ((eq (len (cons a l1)) (len (cons b l2))) (eq (suc (len l1)) (suc (len l2))) (eq (len l1) (len l2))))
              (ax_mp ((eq (len (cons b l2)) (suc (len l2))) (iff (eq (len (cons a l1)) (len (cons b l2))) (eq (suc (len l1)) (suc (len l2)))))
                (ax_mp ((eq (len (cons a l1)) (suc (len l1))) (im (eq (len (cons b l2)) (suc (len l2))) (iff (eq (len (cons a l1)) (len (cons b l2))) (eq (suc (len l1)) (suc (len l2))))))
                  (eqeq ((len (cons a l1)) (suc (len l1)) (len (cons b l2)) (suc (len l2))))
                  (lenS (a l1)))
                (lenS (b l2))))
            (peano2 ((len l1) (len l2)))))
        (ax_mp ((iff (al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (iff (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
          (ax_mp ((iff (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))) (im (iff (al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (iff (al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))))
            (bitr ((al x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
            (aleqi (x2 (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))) (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))
              (ax_mp ((iff (im (or (eq x2 (d0)) (not (eq x2 (d0)))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))) (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
                (ax_mp ((iff (im (or (eq x2 (d0)) (not (eq x2 (d0)))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (iff (im (or (eq x2 (d0)) (not (eq x2 (d0)))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))) (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))))
                  (bitr3 ((al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))) (im (or (eq x2 (d0)) (not (eq x2 (d0)))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
                  (ax_mp ((or (eq x2 (d0)) (not (eq x2 (d0)))) (iff (im (or (eq x2 (d0)) (not (eq x2 (d0)))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))
                    (biim1 ((or (eq x2 (d0)) (not (eq x2 (d0)))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))
                    (em ((eq x2 (d0))))))
                (imor ((eq x2 (d0)) (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))))
          (ax_mp ((iff (an (al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (iff (al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
            (ax_mp ((iff (al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))) (im (iff (an (al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))) (iff (al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))))
              (bitr ((al x2 (an (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
              (alan (x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
            (ax_mp ((iff (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))) (iff (an (al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
              (ax_mp ((iff (al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (el (pr a b) R)) (im (iff (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))) (iff (an (al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (an (el (pr a b) R) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))))
                (aneq ((al x2 (im (eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (el (pr a b) R) (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))
                (aleqe (x2 (d0) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))) (el (pr a b) R))
                  (syl6bb ((eq x2 (d0)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))) (al _2 (im (eq _2 a) (el (pr _2 b) R))) (el (pr a b) R))
                    (aleqe (_2 a (el (pr _2 b) R) (el (pr a b) R))
                      (eleqd ((eq _2 a) (pr _2 b) (pr a b) R R)
                        (preqd ((eq _2 a) _2 a b b)
                          (id ((eq _2 a)))
                          (eqidd ((eq _2 a) b)))
                        (eqsidd ((eq _2 a) R))))
                    (aleqd ((eq x2 (d0)) _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))) (im (eq _2 a) (el (pr _2 b) R)))
                      (imeqd ((eq x2 (d0)) (eq (nth x2 (cons a l1)) (suc _2)) (eq _2 a) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))) (el (pr _2 b) R))
                        (syl6bb ((eq x2 (d0)) (eq (nth x2 (cons a l1)) (suc _2)) (eq a _2) (eq _2 a))
                          (eqcomb (a _2))
                          (syl6bb ((eq x2 (d0)) (eq (nth x2 (cons a l1)) (suc _2)) (eq (suc a) (suc _2)) (eq a _2))
                            (peano2 (a _2))
                            (eqeq1d ((eq x2 (d0)) (nth x2 (cons a l1)) (suc a) (suc _2))
                              (syl6eq ((eq x2 (d0)) (nth x2 (cons a l1)) (nth (d0) (cons a l1)) (suc a))
                                (nthZ (a l1))
                                (ntheq1 (x2 (d0) (cons a l1)))))))
                        (syl6bb ((eq x2 (d0)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))) (al _1 (im (eq _1 b) (el (pr _2 _1) R))) (el (pr _2 b) R))
                          (aleqe (_1 b (el (pr _2 _1) R) (el (pr _2 b) R))
                            (eleqd ((eq _1 b) (pr _2 _1) (pr _2 b) R R)
                              (preqd ((eq _1 b) _2 _2 _1 b)
                                (eqidd ((eq _1 b) _2))
                                (id ((eq _1 b))))
                              (eqsidd ((eq _1 b) R))))
                          (aleqd ((eq x2 (d0)) _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)) (im (eq _1 b) (el (pr _2 _1) R)))
                            (imeq1d ((eq x2 (d0)) (eq (nth x2 (cons b l2)) (suc _1)) (eq _1 b) (el (pr _2 _1) R))
                              (syl6bb ((eq x2 (d0)) (eq (nth x2 (cons b l2)) (suc _1)) (eq b _1) (eq _1 b))
                                (eqcomb (b _1))
                                (syl6bb ((eq x2 (d0)) (eq (nth x2 (cons b l2)) (suc _1)) (eq (suc b) (suc _1)) (eq b _1))
                                  (peano2 (b _1))
                                  (eqeq1d ((eq x2 (d0)) (nth x2 (cons b l2)) (suc b) (suc _1))
                                    (syl6eq ((eq x2 (d0)) (nth x2 (cons b l2)) (nth (d0) (cons b l2)) (suc b))
                                      (nthZ (b l2))
                                      (ntheq1 (x2 (d0) (cons b l2)))))))))))))))
              (ax_mp ((iff (al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))) (iff (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))
                (ax_mp ((iff (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))) (im (iff (al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))) (iff (al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
                  (bitr ((al x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))
                  (aleqi (x2 (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))
                    (ax_mp ((iff (im (ex x1 (eq x2 (suc x1))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
                      (ax_mp ((iff (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (ex x1 (eq x2 (suc x1))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (im (iff (im (ex x1 (eq x2 (suc x1))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (iff (im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))))
                        (bitr ((im (not (eq x2 (d0))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (im (ex x1 (eq x2 (suc x1))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))) (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
                        (imeq1i ((not (eq x2 (d0))) (ex x1 (eq x2 (suc x1))) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))
                          (:conv (iff (not (eq x2 (d0))) (ex x1 (eq x2 (suc x1))))
                            (iff
                              (:sym (:unfold ne (x2 (d0)) ()
                                (not (eq x2 (d0)))))
                              (ex x1 (eq x2 (suc x1))))
                            (exsuc (x1 x2)))))
                      (eexb (x1 (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))))
                (ax_mp ((iff (al x1 (al x2 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))) (iff (al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))
                  (ax_mp ((iff (al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al x2 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))))) (im (iff (al x1 (al x2 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))) (iff (al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))))))
                    (bitr ((al x2 (al x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al x2 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))) (al x1 (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))))
                    (alcomb (x2 x1 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))))))))
                  (aleqi (x1 (al x2 (im (eq x2 (suc x1)) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))))) (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))
                    (aleqe (x2 (suc x1) (al _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))))) (al _2 (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))))
                      (aleqd ((eq x2 (suc x1)) _2 (im (eq (nth x2 (cons a l1)) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)))) (im (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))))
                        (imeqd ((eq x2 (suc x1)) (eq (nth x2 (cons a l1)) (suc _2)) (eq (nth x1 l1) (suc _2)) (al _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R))) (al _1 (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))))
                          (eqeq1d ((eq x2 (suc x1)) (nth x2 (cons a l1)) (nth x1 l1) (suc _2))
                            (syl6eq ((eq x2 (suc x1)) (nth x2 (cons a l1)) (nth (suc x1) (cons a l1)) (nth x1 l1))
                              (nthS (x1 a l1))
                              (ntheq1 (x2 (suc x1) (cons a l1)))))
                          (aleqd ((eq x2 (suc x1)) _1 (im (eq (nth x2 (cons b l2)) (suc _1)) (el (pr _2 _1) R)) (im (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R)))
                            (imeq1d ((eq x2 (suc x1)) (eq (nth x2 (cons b l2)) (suc _1)) (eq (nth x1 l2) (suc _1)) (el (pr _2 _1) R))
                              (eqeq1d ((eq x2 (suc x1)) (nth x2 (cons b l2)) (nth x1 l2) (suc _1))
                                (syl6eq ((eq x2 (suc x1)) (nth x2 (cons b l2)) (nth (suc x1) (cons b l2)) (nth x1 l2))
                                  (nthS (x1 b l2))
                                  (ntheq1 (x2 (suc x1) (cons b l2)))))))))))))))))))))

(local theorem all2S1 ((R set ()) (a nat ()) (b nat) (l1 nat ()) (l2 nat ()) (l2_ nat)) ()
  (iff (el (pr (cons a l1) l2) (all2 R)) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))))
()
(ax_mp ((iff (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))) (iff (el (pr (cons a l1) l2) (all2 R)) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))))
  (ax_mp ((iff (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (el (pr (cons a l1) l2) (all2 R))) (im (iff (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))) (iff (el (pr (cons a l1) l2) (all2 R)) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))))))
    (bitr3 ((el (pr (cons a l1) l2) (all2 R)) (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))))
    (ax_mp ((im (el (pr (cons a l1) l2) (all2 R)) (ex b (ex l2_ (eq l2 (cons b l2_))))) (iff (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (el (pr (cons a l1) l2) (all2 R))))
      (bian1a ((ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))))
      (sylib ((el (pr (cons a l1) l2) (all2 R)) (ne l2 (d0)) (ex b (ex l2_ (eq l2 (cons b l2_)))))
        (excons (l2 b l2_))
        (sylib ((el (pr (cons a l1) l2) (all2 R)) (not (eq (len l2) (d0))) (ne l2 (d0)))
          (ax_mp ((iff (eq (len l2) (d0)) (eq l2 (d0))) (iff (not (eq (len l2) (d0))) (ne l2 (d0))))
            (:conv (im (iff (eq (len l2) (d0)) (eq l2 (d0))) (iff (not (eq (len l2) (d0))) (ne l2 (d0))))
              (im
                (iff (eq (len l2) (d0)) (eq l2 (d0)))
                (iff
                  (not (eq (len l2) (d0)))
                  (:unfold ne (l2 (d0)) ()
                    (not (eq l2 (d0))))))
              (noteq ((eq (len l2) (d0)) (eq l2 (d0)))))
            (leneq0 (l2)))
          (mpbii ((el (pr (cons a l1) l2) (all2 R)) (ne (suc (len l1)) (d0)) (not (eq (len l2) (d0))))
            (peano1 ((len l1)))
            (:conv (im (el (pr (cons a l1) l2) (all2 R)) (iff (ne (suc (len l1)) (d0)) (not (eq (len l2) (d0)))))
              (im
                (el (pr (cons a l1) l2) (all2 R))
                (iff
                  (ne (suc (len l1)) (d0))
                  (:sym (:unfold ne ((len l2) (d0)) ()
                    (not (eq (len l2) (d0)))))))
              (neeq1d ((el (pr (cons a l1) l2) (all2 R)) (suc (len l1)) (len l2) (d0))
                (syl5eqr ((el (pr (cons a l1) l2) (all2 R)) (suc (len l1)) (len (cons a l1)) (len l2))
                  (lenS (a l1))
                  (all2len (R (cons a l1) l2))))))))))
  (ax_mp ((iff (ex b (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R)))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))) (iff (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))))
    (ax_mp ((iff (ex b (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R)))) (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R)))) (im (iff (ex b (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R)))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))) (iff (an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))))))
      (bitr3 ((an (ex b (ex l2_ (eq l2 (cons b l2_)))) (el (pr (cons a l1) l2) (all2 R))) (ex b (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R)))) (ex b (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))))
      (exan2 (b (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R)))))
    (exeqi (b (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R))) (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))
      (ax_mp ((iff (ex l2_ (an (eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R)))) (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))) (iff (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R))) (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))))
        (ax_mp ((iff (ex l2_ (an (eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R)))) (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R)))) (im (iff (ex l2_ (an (eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R)))) (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))) (iff (an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R))) (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))))
          (bitr3 ((an (ex l2_ (eq l2 (cons b l2_))) (el (pr (cons a l1) l2) (all2 R))) (ex l2_ (an (eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R)))) (ex l2_ (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))))
          (exan2 (l2_ (eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R)))))
        (exeqi (l2_ (an (eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R))) (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))
          (ax_mp ((im (eq l2 (cons b l2_)) (iff (el (pr (cons a l1) l2) (all2 R)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))) (iff (an (eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R))) (an (eq l2 (cons b l2_)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))))
            (aneq2a ((eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R)))))
            (syl6bb ((eq l2 (cons b l2_)) (el (pr (cons a l1) l2) (all2 R)) (el (pr (cons a l1) (cons b l2_)) (all2 R)) (an (el (pr a b) R) (el (pr l1 l2_) (all2 R))))
              (all2S (R a b l1 l2_))
              (eleq1d ((all2 R) (eq l2 (cons b l2_)) (pr (cons a l1) l2) (pr (cons a l1) (cons b l2_)))
                (preq2 ((cons a l1) l2 (cons b l2_))))))))))))

(local theorem all2all2 ((A set ()) (l1 nat ()) (l2 nat ()) (x nat)) ()
  (im (el (pr l1 l2) (all2 (sab x A))) (all A l2))
((n nat) (x1 nat) (x2 nat))
(sylibr ((el (pr l1 l2) (all2 (sab x A))) (al n (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A)))) (all A l2))
  (allnth (A l2 n x1))
  (sylbi ((el (pr l1 l2) (all2 (sab x A))) (an (eq (len l1) (len l2)) (al n (al x2 (im (eq (nth n l1) (suc x2)) (al x1 (im (eq (nth n l2) (suc x1)) (el (pr x2 x1) (sab x A)))))))) (al n (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A)))))
    (elall22 ((sab x A) l1 l2 n x2 x1))
    (imp ((eq (len l1) (len l2)) (al n (al x2 (im (eq (nth n l1) (suc x2)) (al x1 (im (eq (nth n l2) (suc x1)) (el (pr x2 x1) (sab x A))))))) (al n (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A)))))
      (alimd (n (eq (len l1) (len l2)) (al x2 (im (eq (nth n l1) (suc x2)) (al x1 (im (eq (nth n l2) (suc x1)) (el (pr x2 x1) (sab x A)))))) (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A))))
        (syl5bi ((eq (len l1) (len l2)) (al x2 (im (eq (nth n l1) (suc x2)) (al x1 (im (eq (nth n l2) (suc x1)) (el (pr x2 x1) (sab x A)))))) (al x2 (im (eq (nth n l1) (suc x2)) (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A))))) (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A))))
          (raleqi (x2 (eq (nth n l1) (suc x2)) (al x1 (im (eq (nth n l2) (suc x1)) (el (pr x2 x1) (sab x A)))) (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A))))
            (raleqi (x1 (eq (nth n l2) (suc x1)) (el (pr x2 x1) (sab x A)) (el x1 A))
              (elsabe (x2 x1 (el x1 A) x A)
                (biidd ((eq x x2) (el x1 A))))))
          (syl5bi ((eq (len l1) (len l2)) (al x2 (im (eq (nth n l1) (suc x2)) (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A))))) (al x1 (im (eq (nth n l2) (suc x1)) (al x2 (im (eq (nth n l1) (suc x2)) (el x1 A))))) (al x1 (im (eq (nth n l2) (suc x1)) (el x1 A))))
            (ralcomb (x2 x1 (eq (nth n l1) (suc x2)) (eq (nth n l2) (suc x1)) (el x1 A)))
            (alimd (x1 (eq (len l1) (len l2)) (im (eq (nth n l2) (suc x1)) (al x2 (im (eq (nth n l1) (suc x2)) (el x1 A)))) (im (eq (nth n l2) (suc x1)) (el x1 A)))
              (a2d ((eq (len l1) (len l2)) (eq (nth n l2) (suc x1)) (al x2 (im (eq (nth n l1) (suc x2)) (el x1 A))) (el x1 A))
                (exp ((eq (len l1) (len l2)) (eq (nth n l2) (suc x1)) (im (al x2 (im (eq (nth n l1) (suc x2)) (el x1 A))) (el x1 A)))
                  (syl5bir ((an (eq (len l1) (len l2)) (eq (nth n l2) (suc x1))) (al x2 (im (eq (nth n l1) (suc x2)) (el x1 A))) (im (ex x2 (eq (nth n l1) (suc x2))) (el x1 A)) (el x1 A))
                    (eexb (x2 (eq (nth n l1) (suc x2)) (el x1 A)))
                    (syl ((an (eq (len l1) (len l2)) (eq (nth n l2) (suc x1))) (ex x2 (eq (nth n l1) (suc x2))) (im (im (ex x2 (eq (nth n l1) (suc x2))) (el x1 A)) (el x1 A)))
                      (mpcom ((ex x2 (eq (nth n l1) (suc x2))) (el x1 A)))
                      (sylib ((an (eq (len l1) (len l2)) (eq (nth n l2) (suc x1))) (ne (nth n l1) (d0)) (ex x2 (eq (nth n l1) (suc x2))))
                        (exsuc (x2 (nth n l1)))
                        (sylibr ((an (eq (len l1) (len l2)) (eq (nth n l2) (suc x1))) (lt n (len l1)) (ne (nth n l1) (d0)))
                          (nthne0 (l1 n))
                          (mpbird ((an (eq (len l1) (len l2)) (eq (nth n l2) (suc x1))) (lt n (len l2)) (lt n (len l1)))
                            (lteq2d ((an (eq (len l1) (len l2)) (eq (nth n l2) (suc x1))) n (len l1) (len l2))
                              (anl ((eq (len l1) (len l2)) (eq (nth n l2) (suc x1)))))
                            (anwr ((eq (len l1) (len l2)) (eq (nth n l2) (suc x1)) (lt n (len l2)))
                              (sylib ((eq (nth n l2) (suc x1)) (ne (nth n l2) (d0)) (lt n (len l2)))
                                (nthne0 (l2 n))
                                (sucne0 ((nth n l2) x1)))))))))))))))))))

(local theorem all2all1 ((A set ()) (l1 nat ()) (l2 nat ()) (x nat) (y nat)) ()
  (im (el (pr l1 l2) (all2 (sab x (ab y (el x A))))) (all A l1))
()
(sylbir ((el (pr l1 l2) (all2 (sab x (ab y (el x A))))) (el (pr l2 l1) (all2 (cnv (sab x (ab y (el x A)))))) (all A l1))
  (all2com ((sab x (ab y (el x A))) l2 l1))
  (sylbi ((el (pr l2 l1) (all2 (cnv (sab x (ab y (el x A)))))) (el (pr l2 l1) (all2 (sab y A))) (all A l1))
    (ax_mp ((eqs (all2 (cnv (sab x (ab y (el x A))))) (all2 (sab y A))) (iff (el (pr l2 l1) (all2 (cnv (sab x (ab y (el x A)))))) (el (pr l2 l1) (all2 (sab y A)))))
      (eleq2 ((all2 (cnv (sab x (ab y (el x A))))) (all2 (sab y A)) (pr l2 l1)))
      (ax_mp ((eqs (cnv (sab x (ab y (el x A)))) (sab y A)) (eqs (all2 (cnv (sab x (ab y (el x A))))) (all2 (sab y A))))
        (all2eq ((cnv (sab x (ab y (el x A)))) (sab y A)))
        (ax_mp ((eqs (sab y (ab x (el x A))) (sab y A)) (eqs (cnv (sab x (ab y (el x A)))) (sab y A)))
          (ax_mp ((eqs (cnv (sab x (ab y (el x A)))) (sab y (ab x (el x A)))) (im (eqs (sab y (ab x (el x A))) (sab y A)) (eqs (cnv (sab x (ab y (el x A)))) (sab y A))))
            (eqstr ((cnv (sab x (ab y (el x A)))) (sab y (ab x (el x A))) (sab y A)))
            (cnvopab (x y (el x A))))
          (sabeqi (y (ab x (el x A)) A)
            (abid2 (A x))))))
    (all2all2 (A l2 l1 y)))))

(def ex2 ((R set ())) (set ())
((l1 nat) (l2 nat) (n nat) (x nat) (y nat))
(sab l1 (ab l2 (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))))))

(local theorem ex2eqd ((_G wff ()) (_R1 set ()) (_R2 set ()))
  ((_Rh (im _G (eqs _R1 _R2))))
  (im _G (eqs (ex2 _R1) (ex2 _R2)))
((l1 nat) (l2 nat) (n nat) (x nat) (y nat))
(:conv (im _G (eqs (ex2 _R1) (ex2 _R2)))
  (im
    _G
    (eqs
      (:unfold ex2 (_R1) (l1 l2 n x y)
        (sab l1 (ab l2 (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1)))))))))
      (:unfold ex2 (_R2) (l1 l2 n x y)
        (sab l1 (ab l2 (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R2)))))))))))
  (sabeqd (_G l1 (ab l2 (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1))))))) (ab l2 (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R2))))))))
    (abeqd (_G l2 (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1)))))) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R2)))))))
      (aneqd (_G (eq (len l1) (len l2)) (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1))))) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R2))))))
        (biidd (_G (eq (len l1) (len l2))))
        (exeqd (_G n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1)))) (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R2)))))
          (exeqd (_G x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1))) (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R2))))
            (exeqd (_G y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1)) (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R2)))
              (aneqd (_G (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) _R1) (el (pr x y) _R2))
                (biidd (_G (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y)))))
                (eleqd (_G (pr x y) (pr x y) _R1 _R2)
                  (eqidd (_G (pr x y)))
                  _Rh))))))))))

(local theorem ex2eq ((_R1 set ()) (_R2 set ())) ()
  (im (eqs _R1 _R2) (eqs (ex2 _R1) (ex2 _R2)))
()
(ex2eqd ((eqs _R1 _R2) _R1 _R2)
  (id ((eqs _R1 _R2)))))

(local theorem elex2 ((R set ()) (l1 nat ()) (l2 nat ()) (n nat) (x nat) (y nat)) ()
  (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))))
((_1 nat) (_2 nat))
(:let H1 (anwl ((eq _1 l1) (eq _2 l2) (eq _1 l1))
  (id ((eq _1 l1))))
(:let H2 (anwr ((eq _1 l1) (eq _2 l2) (eq _2 l2))
  (id ((eq _2 l2))))
(:let H3 (eqidd ((an (eq _1 l1) (eq _2 l2)) n))
(:conv (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))))
  (iff
    (el
      (pr l1 l2)
      (:unfold ex2 (R) (_1 _2 n x y)
        (sab _1 (ab _2 (an (eq (len _1) (len _2)) (ex n (ex x (ex y (an (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (el (pr x y) R))))))))))
    (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))))
  (elsabe (l1 l2 (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))) _1 (ab _2 (an (eq (len _1) (len _2)) (ex n (ex x (ex y (an (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (el (pr x y) R))))))))
    (elabed ((eq _1 l1) _2 l2 (an (eq (len _1) (len _2)) (ex n (ex x (ex y (an (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (el (pr x y) R)))))) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))))
      (aneqd ((an (eq _1 l1) (eq _2 l2)) (eq (len _1) (len _2)) (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (el (pr x y) R))))) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))))))
        (eqeqd ((an (eq _1 l1) (eq _2 l2)) (len _1) (len l1) (len _2) (len l2))
          (leneqd ((an (eq _1 l1) (eq _2 l2)) _1 l1)
            H1)
          (leneqd ((an (eq _1 l1) (eq _2 l2)) _2 l2)
            H2))
        (exeqd ((an (eq _1 l1) (eq _2 l2)) n (ex x (ex y (an (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (el (pr x y) R)))) (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))
          (exeqd ((an (eq _1 l1) (eq _2 l2)) x (ex y (an (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (el (pr x y) R))) (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))))
            (exeqd ((an (eq _1 l1) (eq _2 l2)) y (an (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (el (pr x y) R)) (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))
              (aneqd ((an (eq _1 l1) (eq _2 l2)) (an (eq (nth n _1) (suc x)) (eq (nth n _2) (suc y))) (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R) (el (pr x y) R))
                (aneqd ((an (eq _1 l1) (eq _2 l2)) (eq (nth n _1) (suc x)) (eq (nth n l1) (suc x)) (eq (nth n _2) (suc y)) (eq (nth n l2) (suc y)))
                  (eqeqd ((an (eq _1 l1) (eq _2 l2)) (nth n _1) (nth n l1) (suc x) (suc x))
                    (ntheqd ((an (eq _1 l1) (eq _2 l2)) n n _1 l1)
                      H3
                      H1)
                    (eqidd ((an (eq _1 l1) (eq _2 l2)) (suc x))))
                  (eqeqd ((an (eq _1 l1) (eq _2 l2)) (nth n _2) (nth n l2) (suc y) (suc y))
                    (ntheqd ((an (eq _1 l1) (eq _2 l2)) n n _2 l2)
                      H3
                      H2)
                    (eqidd ((an (eq _1 l1) (eq _2 l2)) (suc y)))))
                (biidd ((an (eq _1 l1) (eq _2 l2)) (el (pr x y) R)))))))))))))))

(local theorem elex22 ((R set ()) (l1 nat ()) (l2 nat ()) (n nat) (x nat) (y nat)) ()
  (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R))))))))
()
(ax_mp ((iff (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))) (an (eq (len l1) (len l2)) (ex n (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R)))))))) (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R)))))))))
  (ax_mp ((iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))))))) (im (iff (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))) (an (eq (len l1) (len l2)) (ex n (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R)))))))) (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R))))))))))
    (bitr ((el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))) (an (eq (len l1) (len l2)) (ex n (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R)))))))))
    (elex2 (R l1 l2 n x y)))
  (aneq2i ((eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))))) (ex n (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R)))))))
    (exeqi (n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))) (ex x (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R))))))
      (exeqi (x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R)))))
        (ax_mp ((iff (ex y (an (eq (nth n l1) (suc x)) (an (eq (nth n l2) (suc y)) (el (pr x y) R)))) (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R))))) (iff (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R))))))
          (ax_mp ((iff (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (ex y (an (eq (nth n l1) (suc x)) (an (eq (nth n l2) (suc y)) (el (pr x y) R))))) (im (iff (ex y (an (eq (nth n l1) (suc x)) (an (eq (nth n l2) (suc y)) (el (pr x y) R)))) (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R))))) (iff (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R)))))))
            (bitr ((ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (ex y (an (eq (nth n l1) (suc x)) (an (eq (nth n l2) (suc y)) (el (pr x y) R)))) (an (eq (nth n l1) (suc x)) (ex y (an (eq (nth n l2) (suc y)) (el (pr x y) R))))))
            (exeqi (y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)) (an (eq (nth n l1) (suc x)) (an (eq (nth n l2) (suc y)) (el (pr x y) R))))
              (anass ((eq (nth n l1) (suc x)) (eq (nth n l2) (suc y)) (el (pr x y) R)))))
          (exan1 (y (eq (nth n l1) (suc x)) (an (eq (nth n l2) (suc y)) (el (pr x y) R))))))))))

(local theorem ex2ssg ((R set ()) (S set ()) (l1 nat ()) (l2 nat ()) (x nat) (y nat)) ()
  (im (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (im (el (pr l1 l2) (ex2 R)) (el (pr l1 l2) (ex2 S))))
((n nat))
(sylibr ((al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (im (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S))))))) (im (el (pr l1 l2) (ex2 R)) (el (pr l1 l2) (ex2 S))))
  (imeqi ((el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))))) (el (pr l1 l2) (ex2 S)) (an (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S)))))))
    (elex2 (R l1 l2 n x y))
    (elex2 (S l1 l2 n x y)))
  (anim2d ((al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (eq (len l1) (len l2)) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))))) (ex n (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S))))))
    (eximd (n (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))) (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S)))))
      (syl ((al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (al x (im (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S))))) (im (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)))) (ex x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S))))))
        (exim (x (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S)))))
        (alimi (x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S)))) (im (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S)))))
          (syl ((al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S)))) (al y (im (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)) (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S)))) (im (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R))) (ex y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S)))))
            (exim (y (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)) (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S))))
            (alimi (y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))) (im (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)) (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S))))
              (syl ((im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))) (im (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (im (el (pr x y) R) (el (pr x y) S))) (im (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R)) (an (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) S))))
                (anim2a ((an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (el (pr x y) R) (el (pr x y) S)))
                (ax_mp ((im (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (an (lmem x l1) (lmem y l2))) (im (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))) (im (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (im (el (pr x y) R) (el (pr x y) S)))))
                  (imim1 ((an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))
                  (ax_mp ((im (eq (nth n l2) (suc y)) (lmem y l2)) (im (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (an (lmem x l1) (lmem y l2))))
                    (ax_mp ((im (eq (nth n l1) (suc x)) (lmem x l1)) (im (im (eq (nth n l2) (suc y)) (lmem y l2)) (im (an (eq (nth n l1) (suc x)) (eq (nth n l2) (suc y))) (an (lmem x l1) (lmem y l2)))))
                      (anim ((eq (nth n l1) (suc x)) (lmem x l1) (eq (nth n l2) (suc y)) (lmem y l2)))
                      (nthlmem (x l1 n)))
                    (nthlmem (y l2 n)))))))))))))

(local theorem ex2eqg ((R set ()) (S set ()) (l1 nat ()) (l2 nat ()) (x nat) (y nat)) ()
  (im (al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (iff (el (pr l1 l2) (ex2 R)) (el (pr l1 l2) (ex2 S))))
()
(ibid ((al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (el (pr l1 l2) (ex2 R)) (el (pr l1 l2) (ex2 S)))
  (syl ((al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))) (im (el (pr l1 l2) (ex2 R)) (el (pr l1 l2) (ex2 S))))
    (ex2ssg (R S l1 l2 x y))
    (alimi (x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)))) (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S)))))
      (alimi (y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))) (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) R) (el (pr x y) S))))
        (imim2i ((an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)) (im (el (pr x y) R) (el (pr x y) S)))
          (bi1 ((el (pr x y) R) (el (pr x y) S)))))))
  (syl ((al x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))))) (al x (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) S) (el (pr x y) R))))) (im (el (pr l1 l2) (ex2 S)) (el (pr l1 l2) (ex2 R))))
    (ex2ssg (S R l1 l2 x y))
    (alimi (x (al y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)))) (al y (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) S) (el (pr x y) R)))))
      (alimi (y (im (an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S))) (im (an (lmem x l1) (lmem y l2)) (im (el (pr x y) S) (el (pr x y) R))))
        (imim2i ((an (lmem x l1) (lmem y l2)) (iff (el (pr x y) R) (el (pr x y) S)) (im (el (pr x y) S) (el (pr x y) R)))
          (bi2 ((el (pr x y) R) (el (pr x y) S)))))))))

(local theorem ex2ss ((R set ()) (S set ())) ()
  (im (subset R S) (subset (ex2 R) (ex2 S)))
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(ssrd2 ((ex2 R) (ex2 S) (subset R S) x1 x2)
  (syl ((subset R S) (al x3 (al x4 (im (an (lmem x3 x1) (lmem x4 x2)) (im (el (pr x3 x4) R) (el (pr x3 x4) S))))) (im (el (pr x1 x2) (ex2 R)) (el (pr x1 x2) (ex2 S))))
    (ex2ssg (R S x1 x2 x3 x4))
    (iald (x3 (subset R S) (al x4 (im (an (lmem x3 x1) (lmem x4 x2)) (im (el (pr x3 x4) R) (el (pr x3 x4) S)))))
      (iald (x4 (subset R S) (im (an (lmem x3 x1) (lmem x4 x2)) (im (el (pr x3 x4) R) (el (pr x3 x4) S))))
        (a1d ((subset R S) (im (el (pr x3 x4) R) (el (pr x3 x4) S)) (an (lmem x3 x1) (lmem x4 x2)))
          (ssel (R S (pr x3 x4)))))))))

(local theorem ex2len ((R set ()) (l1 nat ()) (l2 nat ())) ()
  (im (el (pr l1 l2) (ex2 R)) (eq (len l1) (len l2)))
((x1 nat) (x2 nat) (x3 nat))
(sylbi ((el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (eq (len l1) (len l2)))
  (elex2 (R l1 l2 x1 x2 x3))
  (anl ((eq (len l1) (len l2)) (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))))))

(local theorem ex2com ((R set ()) (l1 nat ()) (l2 nat ())) ()
  (iff (el (pr l1 l2) (ex2 (cnv R))) (el (pr l2 l1) (ex2 R)))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((iff (el (pr l2 l1) (ex2 R)) (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))) (iff (el (pr l1 l2) (ex2 (cnv R))) (el (pr l2 l1) (ex2 R))))
  (ax_mp ((iff (el (pr l1 l2) (ex2 (cnv R))) (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))) (im (iff (el (pr l2 l1) (ex2 R)) (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))) (iff (el (pr l1 l2) (ex2 (cnv R))) (el (pr l2 l1) (ex2 R)))))
    (bitr4 ((el (pr l1 l2) (ex2 (cnv R))) (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (el (pr l2 l1) (ex2 R))))
    (elex22 ((cnv R) l1 l2 x1 x3 x2)))
  (ax_mp ((iff (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))) (iff (el (pr l2 l1) (ex2 R)) (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))))
    (ax_mp ((iff (el (pr l2 l1) (ex2 R)) (an (eq (len l2) (len l1)) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))) (im (iff (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))) (iff (el (pr l2 l1) (ex2 R)) (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))))))
      (bitr4 ((el (pr l2 l1) (ex2 R)) (an (eq (len l2) (len l1)) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))) (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))))))
      (elex22 (R l2 l1 x1 x2 x3)))
    (ax_mp ((iff (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))) (iff (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))))
      (ax_mp ((iff (eq (len l1) (len l2)) (eq (len l2) (len l1))) (im (iff (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))) (iff (an (eq (len l1) (len l2)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))))) (an (eq (len l2) (len l1)) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))))))
        (aneq ((eq (len l1) (len l2)) (eq (len l2) (len l1)) (ex x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R))))))) (ex x1 (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))))
        (eqcomb ((len l1) (len l2))))
      (exeqi (x1 (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))
        (ax_mp ((iff (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))) (iff (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))
          (ax_mp ((iff (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R))))))) (im (iff (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))) (iff (ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))))))
            (bitr ((ex x3 (an (eq (nth x1 l1) (suc x3)) (ex x2 (an (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))))) (ex x2 (an (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R)))))))
            (rexcomb (x3 x2 (eq (nth x1 l1) (suc x3)) (eq (nth x1 l2) (suc x2)) (el (pr x3 x2) (cnv R)))))
          (rexeqi (x2 (eq (nth x1 l2) (suc x2)) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)))) (ex x3 (an (eq (nth x1 l1) (suc x3)) (el (pr x2 x3) R))))
            (rexeqi (x3 (eq (nth x1 l1) (suc x3)) (el (pr x3 x2) (cnv R)) (el (pr x2 x3) R))
              (prcnv (R x3 x2))))))))))

(local theorem ex2cnv ((R set ())) ()
  (eqs (ex2 (cnv R)) (cnv (ex2 R)))
((x1 nat) (x2 nat))
(eqri2 ((ex2 (cnv R)) (cnv (ex2 R)) x1 x2)
  (ax_mp ((iff (el (pr x1 x2) (cnv (ex2 R))) (el (pr x2 x1) (ex2 R))) (iff (el (pr x1 x2) (ex2 (cnv R))) (el (pr x1 x2) (cnv (ex2 R)))))
    (ax_mp ((iff (el (pr x1 x2) (ex2 (cnv R))) (el (pr x2 x1) (ex2 R))) (im (iff (el (pr x1 x2) (cnv (ex2 R))) (el (pr x2 x1) (ex2 R))) (iff (el (pr x1 x2) (ex2 (cnv R))) (el (pr x1 x2) (cnv (ex2 R))))))
      (bitr4 ((el (pr x1 x2) (ex2 (cnv R))) (el (pr x2 x1) (ex2 R)) (el (pr x1 x2) (cnv (ex2 R)))))
      (ex2com (R x1 x2)))
    (prcnv ((ex2 R) x1 x2)))))

(local theorem ex201 ((R set ()) (l nat ())) ()
  (not (el (pr (d0) l) (ex2 R)))
((x1 nat) (x2 nat) (x3 nat))
(mt ((ex x2 (ex x3 (an (eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R)))))) (el (pr (d0) l) (ex2 R)))
  (sylbi ((el (pr (d0) l) (ex2 R)) (an (eq (len (d0)) (len l)) (ex x2 (ex x3 (an (eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R))))))) (ex x2 (ex x3 (an (eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R)))))))
    (elex22 (R (d0) l x2 x3 x1))
    (anr ((eq (len (d0)) (len l)) (ex x2 (ex x3 (an (eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R)))))))))
  (nexi (x2 (ex x3 (an (eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R))))))
    (nexi (x3 (an (eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R)))))
      (mt2 ((eq (nth x2 (d0)) (d0)) (an (eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R)))))
        (anwl ((eq (nth x2 (d0)) (suc x3)) (ex x1 (an (eq (nth x2 l) (suc x1)) (el (pr x3 x1) R))) (not (eq (nth x2 (d0)) (d0))))
          (:conv (im (eq (nth x2 (d0)) (suc x3)) (not (eq (nth x2 (d0)) (d0))))
            (im
              (eq (nth x2 (d0)) (suc x3))
              (:sym (:unfold ne ((nth x2 (d0)) (d0)) ()
                (not (eq (nth x2 (d0)) (d0))))))
            (sucne0 ((nth x2 (d0)) x3))))
        (nth0 (x2)))))))

(local theorem ex202 ((R set ()) (l nat ())) ()
  (not (el (pr l (d0)) (ex2 R)))
()
(mtbi ((el (pr (d0) l) (ex2 (cnv R))) (el (pr l (d0)) (ex2 R)))
  (ex2com (R (d0) l))
  (ex201 ((cnv R) l))))

(local theorem all2nex ((R set ()) (l1 nat ()) (l2 nat ())) ()
  (iff (el (pr l1 l2) (all2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R)))))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((iff (an (eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R))))) (iff (el (pr l1 l2) (all2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R))))))
  (ax_mp ((iff (el (pr l1 l2) (all2 (Compl R))) (an (eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))))) (im (iff (an (eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R))))) (iff (el (pr l1 l2) (all2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R)))))))
    (bitr ((el (pr l1 l2) (all2 (Compl R))) (an (eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R))))))
    (elall2 ((Compl R) l1 l2 x1 x2 x3)))
  (ax_mp ((im (eq (len l1) (len l2)) (iff (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))) (not (el (pr l1 l2) (ex2 R))))) (iff (an (eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R))))))
    (aneq2a ((eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))) (not (el (pr l1 l2) (ex2 R)))))
    (syl5bbr ((eq (len l1) (len l2)) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))) (not (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (not (el (pr l1 l2) (ex2 R))))
      (ax_mp ((iff (al x1 (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))) (iff (not (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))))
        (ax_mp ((iff (al x1 (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (not (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))))) (im (iff (al x1 (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))) (iff (not (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))))))
          (bitr3 ((not (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (al x1 (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (al x1 (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))))
          (alnex (x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))))
        (aleqi (x1 (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))
          (ax_mp ((iff (al x2 (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))) (iff (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))))
            (ax_mp ((iff (al x2 (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (im (iff (al x2 (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))) (iff (not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))))
              (bitr3 ((not (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (al x2 (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (al x2 (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))))
              (alnex (x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))))
            (aleqi (x2 (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))
              (ax_mp ((iff (al x3 (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))) (iff (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))
                (ax_mp ((iff (al x3 (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (im (iff (al x3 (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))) (iff (not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))))
                  (bitr3 ((not (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (al x3 (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))) (al x3 (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))
                  (alnex (x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))
                (aleqi (x3 (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))
                  (ax_mp ((iff (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))) (iff (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))
                    (ax_mp ((iff (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))) (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R)))) (im (iff (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))) (iff (not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))
                      (bitr ((not (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))) (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))
                      (notan2 ((an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))
                    (ax_mp ((iff (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) (Compl R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))) (iff (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))
                      (ax_mp ((iff (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) (Compl R))) (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R)))) (im (iff (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) (Compl R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))) (iff (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R)))))))
                        (bitr3 ((im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (not (el (pr x2 x3) R))) (im (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) (Compl R))) (im (eq (nth x1 l1) (suc x2)) (im (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))
                        (imeq2i ((an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) (Compl R)) (not (el (pr x2 x3) R)))
                          (elcpl (R (pr x2 x3)))))
                      (impexp ((eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3)) (el (pr x2 x3) (Compl R))))))))))))
      (noteqd ((eq (len l1) (len l2)) (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))) (el (pr l1 l2) (ex2 R)))
        (bicomd ((eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R)) (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))))
          (syl5bb ((eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R)))))) (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))))
            (elex2 (R l1 l2 x1 x2 x3))
            (bian1 ((eq (len l1) (len l2)) (ex x1 (ex x2 (ex x3 (an (an (eq (nth x1 l1) (suc x2)) (eq (nth x1 l2) (suc x3))) (el (pr x2 x3) R))))))))))))))

(local theorem dfex2_2 ((R set ()) (l1 nat ()) (l2 nat ())) ()
  (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl R))))))
()
(ax_mp ((iff (an (eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl R)))))) (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl R)))))))
  (ax_mp ((iff (an (eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R))) (el (pr l1 l2) (ex2 R))) (im (iff (an (eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl R)))))) (iff (el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl R))))))))
    (bitr3 ((el (pr l1 l2) (ex2 R)) (an (eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl R)))))))
    (ax_mp ((im (el (pr l1 l2) (ex2 R)) (eq (len l1) (len l2))) (iff (an (eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R))) (el (pr l1 l2) (ex2 R))))
      (bian1a ((eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R))))
      (ex2len (R l1 l2))))
  (ax_mp ((im (eq (len l1) (len l2)) (iff (el (pr l1 l2) (ex2 R)) (not (el (pr l1 l2) (all2 (Compl R)))))) (iff (an (eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl R)))))))
    (aneq2a ((eq (len l1) (len l2)) (el (pr l1 l2) (ex2 R)) (not (el (pr l1 l2) (all2 (Compl R))))))
    (syl ((eq (len l1) (len l2)) (iff (el (pr l1 l2) (all2 (Compl R))) (not (el (pr l1 l2) (ex2 R)))) (iff (el (pr l1 l2) (ex2 R)) (not (el (pr l1 l2) (all2 (Compl R))))))
      (con2b ((el (pr l1 l2) (all2 (Compl R))) (el (pr l1 l2) (ex2 R))))
      (syl5bb ((eq (len l1) (len l2)) (el (pr l1 l2) (all2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R)))) (not (el (pr l1 l2) (ex2 R))))
        (all2nex (R l1 l2))
        (bian1 ((eq (len l1) (len l2)) (not (el (pr l1 l2) (ex2 R))))))))))

(local theorem ex2nal ((R set ()) (l1 nat ()) (l2 nat ())) ()
  (iff (el (pr l1 l2) (ex2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 R)))))
()
(ax_mp ((iff (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl (Compl R)))))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 R))))) (iff (el (pr l1 l2) (ex2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 R))))))
  (ax_mp ((iff (el (pr l1 l2) (ex2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl (Compl R))))))) (im (iff (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl (Compl R)))))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 R))))) (iff (el (pr l1 l2) (ex2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 R)))))))
    (bitr ((el (pr l1 l2) (ex2 (Compl R))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl (Compl R)))))) (an (eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 R))))))
    (dfex2_2 ((Compl R) l1 l2)))
  (aneq2i ((eq (len l1) (len l2)) (not (el (pr l1 l2) (all2 (Compl (Compl R))))) (not (el (pr l1 l2) (all2 R))))
    (noteqi ((el (pr l1 l2) (all2 (Compl (Compl R)))) (el (pr l1 l2) (all2 R)))
      (ax_mp ((eqs (all2 (Compl (Compl R))) (all2 R)) (iff (el (pr l1 l2) (all2 (Compl (Compl R)))) (el (pr l1 l2) (all2 R))))
        (eleq2 ((all2 (Compl (Compl R))) (all2 R) (pr l1 l2)))
        (ax_mp ((eqs (Compl (Compl R)) R) (eqs (all2 (Compl (Compl R))) (all2 R)))
          (all2eq ((Compl (Compl R)) R))
          (cplcpl (R))))))))

(local theorem mapeqg ((G set ()) (x nat) (F set ()) (a nat ()) (l nat ())) ()
  (im (all (ab x (eq (app F x) (app G x))) l) (eq (map F l) (map G l)))
((x1 nat) (x2 nat) (x3 nat))
(:let H1 (allS ((ab x (eq (app F x) (app G x))) x2 x3))
(listind (x1 x2 x3 l (im (all (ab x (eq (app F x) (app G x))) x1) (eq (map F x1) (map G x1))) (im (all (ab x (eq (app F x) (app G x))) (d0)) (eq (map F (d0)) (map G (d0)))) (im (all (ab x (eq (app F x) (app G x))) l) (eq (map F l) (map G l))) (im (all (ab x (eq (app F x) (app G x))) x3) (eq (map F x3) (map G x3))) (im (all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (eq (map F (cons x2 x3)) (map G (cons x2 x3)))))
  (imeqd ((eq x1 l) (all (ab x (eq (app F x) (app G x))) x1) (all (ab x (eq (app F x) (app G x))) l) (eq (map F x1) (map G x1)) (eq (map F l) (map G l)))
    (alleq2 ((ab x (eq (app F x) (app G x))) x1 l))
    (eqeqd ((eq x1 l) (map F x1) (map F l) (map G x1) (map G l))
      (mapeq2 (F x1 l))
      (mapeq2 (G x1 l))))
  (imeqd ((eq x1 (d0)) (all (ab x (eq (app F x) (app G x))) x1) (all (ab x (eq (app F x) (app G x))) (d0)) (eq (map F x1) (map G x1)) (eq (map F (d0)) (map G (d0))))
    (alleq2 ((ab x (eq (app F x) (app G x))) x1 (d0)))
    (eqeqd ((eq x1 (d0)) (map F x1) (map F (d0)) (map G x1) (map G (d0)))
      (mapeq2 (F x1 (d0)))
      (mapeq2 (G x1 (d0)))))
  (imeqd ((eq x1 x3) (all (ab x (eq (app F x) (app G x))) x1) (all (ab x (eq (app F x) (app G x))) x3) (eq (map F x1) (map G x1)) (eq (map F x3) (map G x3)))
    (alleq2 ((ab x (eq (app F x) (app G x))) x1 x3))
    (eqeqd ((eq x1 x3) (map F x1) (map F x3) (map G x1) (map G x3))
      (mapeq2 (F x1 x3))
      (mapeq2 (G x1 x3))))
  (imeqd ((eq x1 (cons x2 x3)) (all (ab x (eq (app F x) (app G x))) x1) (all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (eq (map F x1) (map G x1)) (eq (map F (cons x2 x3)) (map G (cons x2 x3))))
    (alleq2 ((ab x (eq (app F x) (app G x))) x1 (cons x2 x3)))
    (eqeqd ((eq x1 (cons x2 x3)) (map F x1) (map F (cons x2 x3)) (map G x1) (map G (cons x2 x3)))
      (mapeq2 (F x1 (cons x2 x3)))
      (mapeq2 (G x1 (cons x2 x3)))))
  (a1i ((all (ab x (eq (app F x) (app G x))) (d0)) (eq (map F (d0)) (map G (d0))))
    (ax_mp ((eq (map G (d0)) (d0)) (eq (map F (d0)) (map G (d0))))
      (ax_mp ((eq (map F (d0)) (d0)) (im (eq (map G (d0)) (d0)) (eq (map F (d0)) (map G (d0)))))
        (eqtr4 ((map F (d0)) (d0) (map G (d0))))
        (map0 (F)))
      (map0 (G))))
  (rsyl ((im (all (ab x (eq (app F x) (app G x))) x3) (eq (map F x3) (map G x3))) (im (all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (eq (map F x3) (map G x3))) (im (all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (eq (map F (cons x2 x3)) (map G (cons x2 x3)))))
    (imim1i ((all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (all (ab x (eq (app F x) (app G x))) x3) (eq (map F x3) (map G x3)))
      (sylbi ((all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (an (el x2 (ab x (eq (app F x) (app G x)))) (all (ab x (eq (app F x) (app G x))) x3)) (all (ab x (eq (app F x) (app G x))) x3))
        H1
        (anr ((el x2 (ab x (eq (app F x) (app G x)))) (all (ab x (eq (app F x) (app G x))) x3)))))
    (a2i ((all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (eq (map F x3) (map G x3)) (eq (map F (cons x2 x3)) (map G (cons x2 x3))))
      (rsyl ((all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (el x2 (ab x (eq (app F x) (app G x)))) (im (eq (map F x3) (map G x3)) (eq (map F (cons x2 x3)) (map G (cons x2 x3)))))
        (sylbi ((all (ab x (eq (app F x) (app G x))) (cons x2 x3)) (an (el x2 (ab x (eq (app F x) (app G x)))) (all (ab x (eq (app F x) (app G x))) x3)) (el x2 (ab x (eq (app F x) (app G x)))))
          H1
          (anl ((el x2 (ab x (eq (app F x) (app G x)))) (all (ab x (eq (app F x) (app G x))) x3))))
        (exp ((el x2 (ab x (eq (app F x) (app G x)))) (eq (map F x3) (map G x3)) (eq (map F (cons x2 x3)) (map G (cons x2 x3))))
          (eqtr4g ((an (el x2 (ab x (eq (app F x) (app G x)))) (eq (map F x3) (map G x3))) (cons (app F x2) (map F x3)) (cons (app G x2) (map G x3)) (map F (cons x2 x3)) (map G (cons x2 x3)))
            (mapS (F x2 x3))
            (mapS (G x2 x3))
            (conseqd ((an (el x2 (ab x (eq (app F x) (app G x)))) (eq (map F x3) (map G x3))) (app F x2) (app G x2) (map F x3) (map G x3))
              (sylib ((an (el x2 (ab x (eq (app F x) (app G x)))) (eq (map F x3) (map G x3))) (el x2 (ab x (eq (app F x) (app G x)))) (eq (app F x2) (app G x2)))
                (elabe (x x2 (eq (app F x) (app G x)) (eq (app F x2) (app G x2)))
                  (eqeqd ((eq x x2) (app F x) (app F x2) (app G x) (app G x2))
                    (appeq2 (F x x2))
                    (appeq2 (G x x2))))
                (anl ((el x2 (ab x (eq (app F x) (app G x)))) (eq (map F x3) (map G x3)))))
              (anr ((el x2 (ab x (eq (app F x) (app G x)))) (eq (map F x3) (map G x3)))))))))))))

(local def rlrec ((z nat ()) (S set ()) (n nat ())) (nat ())
((a nat) (ih nat) (l nat))
(lrec z (slam a (slam l (lam ih (app S (pr (rev l) (pr a ih)))))) (rev n)))

(local theorem rlreceqd ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ()))
  ((_zh (im _G (eq _z1 _z2)))
   (_Sh (im _G (eqs _S1 _S2)))
   (_nh (im _G (eq _n1 _n2))))
  (im _G (eq (rlrec _z1 _S1 _n1) (rlrec _z2 _S2 _n2)))
((a nat) (ih nat) (l nat))
(:conv (im _G (eq (rlrec _z1 _S1 _n1) (rlrec _z2 _S2 _n2)))
  (im
    _G
    (eq
      (:unfold rlrec (_z1 _S1 _n1) (a ih l)
        (lrec _z1 (slam a (slam l (lam ih (app _S1 (pr (rev l) (pr a ih)))))) (rev _n1)))
      (:unfold rlrec (_z2 _S2 _n2) (a ih l)
        (lrec _z2 (slam a (slam l (lam ih (app _S2 (pr (rev l) (pr a ih)))))) (rev _n2)))))
  (lreceqd (_G _z1 _z2 (slam a (slam l (lam ih (app _S1 (pr (rev l) (pr a ih)))))) (slam a (slam l (lam ih (app _S2 (pr (rev l) (pr a ih)))))) (rev _n1) (rev _n2))
    _zh
    (slameqd (_G a (slam l (lam ih (app _S1 (pr (rev l) (pr a ih))))) (slam l (lam ih (app _S2 (pr (rev l) (pr a ih))))))
      (slameqd (_G l (lam ih (app _S1 (pr (rev l) (pr a ih)))) (lam ih (app _S2 (pr (rev l) (pr a ih)))))
        (lameqd (_G ih (app _S1 (pr (rev l) (pr a ih))) (app _S2 (pr (rev l) (pr a ih))))
          (appeqd (_G _S1 _S2 (pr (rev l) (pr a ih)) (pr (rev l) (pr a ih)))
            _Sh
            (eqidd (_G (pr (rev l) (pr a ih))))))))
    (reveqd (_G _n1 _n2)
      _nh))))

(local theorem rlreceq ((_z1 nat ()) (_z2 nat ()) (_S1 set ()) (_S2 set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _z1 _z2) (im (eqs _S1 _S2) (im (eq _n1 _n2) (eq (rlrec _z1 _S1 _n1) (rlrec _z2 _S2 _n2)))))
()
(exp ((eq _z1 _z2) (eqs _S1 _S2) (im (eq _n1 _n2) (eq (rlrec _z1 _S1 _n1) (rlrec _z2 _S2 _n2))))
  (exp ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq (rlrec _z1 _S1 _n1) (rlrec _z2 _S2 _n2)))
    (rlreceqd ((an (an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)) _z1 _z2 _S1 _S2 _n1 _n2)
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eq _z1 _z2))
        (anl ((eq _z1 _z2) (eqs _S1 _S2))))
      (anwl ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2) (eqs _S1 _S2))
        (anr ((eq _z1 _z2) (eqs _S1 _S2))))
      (anr ((an (eq _z1 _z2) (eqs _S1 _S2)) (eq _n1 _n2)))))))

(local theorem rlreceq1d ((_G wff ()) (_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ()))
  ((_h (im _G (eq _z1 _z2))))
  (im _G (eq (rlrec _z1 S n) (rlrec _z2 S n)))
()
(rlreceqd (_G _z1 _z2 S S n n)
  _h
  (eqsidd (_G S))
  (eqidd (_G n))))

(local theorem rlreceq1 ((_z1 nat ()) (_z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq _z1 _z2) (eq (rlrec _z1 S n) (rlrec _z2 S n)))
()
(rlreceq1d ((eq _z1 _z2) _z1 _z2 S n)
  (id ((eq _z1 _z2)))))

(local theorem rlreceq2d ((_G wff ()) (z nat ()) (_S1 set ()) (_S2 set ()) (n nat ()))
  ((_h (im _G (eqs _S1 _S2))))
  (im _G (eq (rlrec z _S1 n) (rlrec z _S2 n)))
()
(rlreceqd (_G z z _S1 _S2 n n)
  (eqidd (_G z))
  _h
  (eqidd (_G n))))

(local theorem rlreceq2 ((z nat ()) (_S1 set ()) (_S2 set ()) (n nat ())) ()
  (im (eqs _S1 _S2) (eq (rlrec z _S1 n) (rlrec z _S2 n)))
()
(rlreceq2d ((eqs _S1 _S2) z _S1 _S2 n)
  (id ((eqs _S1 _S2)))))

(local theorem rlreceq3d ((_G wff ()) (z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ()))
  ((_h (im _G (eq _n1 _n2))))
  (im _G (eq (rlrec z S _n1) (rlrec z S _n2)))
()
(rlreceqd (_G z z S S _n1 _n2)
  (eqidd (_G z))
  (eqsidd (_G S))
  _h))

(local theorem rlreceq3 ((z nat ()) (S set ()) (_n1 nat ()) (_n2 nat ())) ()
  (im (eq _n1 _n2) (eq (rlrec z S _n1) (rlrec z S _n2)))
()
(rlreceq3d ((eq _n1 _n2) z S _n1 _n2)
  (id ((eq _n1 _n2)))))

(local theorem rlrec0 ((S set ()) (z nat ())) ()
  (eq (rlrec z S (d0)) z)
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (d0)) z) (eq (rlrec z S (d0)) z))
  (ax_mp ((eq (rlrec z S (d0)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (d0))) (im (eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (d0)) z) (eq (rlrec z S (d0)) z)))
    (eqtr ((rlrec z S (d0)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (d0)) z))
    (ax_mp ((eq (rev (d0)) (d0)) (eq (rlrec z S (d0)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (d0))))
      (:conv (im (eq (rev (d0)) (d0)) (eq (rlrec z S (d0)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (d0))))
        (im
          (eq (rev (d0)) (d0))
          (eq
            (:unfold rlrec (z S (d0)) (x1 x3 x2)
              (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (rev (d0))))
            (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (d0))))
        (lreceq3 (z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (rev (d0)) (d0))))
      (rev0 ())))
  (lrec0 (z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3))))))))))

(local theorem rlrecS ((S set ()) (a nat ()) (l nat ()) (z nat ())) ()
  (eq (rlrec z S (snoc l a)) (app S (pr l (pr a (rlrec z S l)))))
((x1 nat) (x2 nat) (x3 nat))
(ax_mp ((eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app S (pr l (pr a (rlrec z S l))))) (eq (rlrec z S (snoc l a)) (app S (pr l (pr a (rlrec z S l))))))
  (ax_mp ((eq (rlrec z S (snoc l a)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l)))) (im (eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app S (pr l (pr a (rlrec z S l))))) (eq (rlrec z S (snoc l a)) (app S (pr l (pr a (rlrec z S l)))))))
    (eqtr ((rlrec z S (snoc l a)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app S (pr l (pr a (rlrec z S l))))))
    (ax_mp ((eq (rev (snoc l a)) (cons a (rev l))) (eq (rlrec z S (snoc l a)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l)))))
      (:conv (im (eq (rev (snoc l a)) (cons a (rev l))) (eq (rlrec z S (snoc l a)) (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l)))))
        (im
          (eq (rev (snoc l a)) (cons a (rev l)))
          (eq
            (:unfold rlrec (z S (snoc l a)) (x1 x3 x2)
              (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (rev (snoc l a))))
            (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l)))))
        (lreceq3 (z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (rev (snoc l a)) (cons a (rev l)))))
      (revsnoc (a l))))
  (ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (pr a (pr (rev l) (rlrec z S l)))) (app S (pr l (pr a (rlrec z S l))))) (eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app S (pr l (pr a (rlrec z S l))))))
    (ax_mp ((eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (pr a (pr (rev l) (rlrec z S l))))) (im (eq (app (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (pr a (pr (rev l) (rlrec z S l)))) (app S (pr l (pr a (rlrec z S l))))) (eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app S (pr l (pr a (rlrec z S l)))))))
      (eqtr ((lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (pr a (pr (rev l) (rlrec z S l)))) (app S (pr l (pr a (rlrec z S l))))))
      (:conv (eq (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l))) (app (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (pr a (pr (rev l) (rlrec z S l)))))
        (eq
          (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (cons a (rev l)))
          (app
            (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3))))))
            (pr
              a
              (pr
                (rev l)
                (:unfold rlrec (z S l) (x1 x3 x2)
                  (lrec z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) (rev l)))))))
        (lrecS (z (slam x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))) a (rev l)))))
    (appslame (a (pr (rev l) (rlrec z S l)) (app S (pr l (pr a (rlrec z S l)))) x1 (slam x2 (lam x3 (app S (pr (rev x2) (pr x1 x3))))))
      (appslamed ((eq x1 a) (rev l) (rlrec z S l) (app S (pr l (pr a (rlrec z S l)))) x2 (lam x3 (app S (pr (rev x2) (pr x1 x3)))))
        (applamed ((an (eq x1 a) (eq x2 (rev l))) (rlrec z S l) (app S (pr l (pr a (rlrec z S l)))) x3 (app S (pr (rev x2) (pr x1 x3))))
          (appeq2d ((an (an (eq x1 a) (eq x2 (rev l))) (eq x3 (rlrec z S l))) S (pr (rev x2) (pr x1 x3)) (pr l (pr a (rlrec z S l))))
            (preqd ((an (an (eq x1 a) (eq x2 (rev l))) (eq x3 (rlrec z S l))) (rev x2) l (pr x1 x3) (pr a (rlrec z S l)))
              (syl6eq ((an (an (eq x1 a) (eq x2 (rev l))) (eq x3 (rlrec z S l))) (rev x2) (rev (rev l)) l)
                (revrev (l))
                (reveqd ((an (an (eq x1 a) (eq x2 (rev l))) (eq x3 (rlrec z S l))) x2 (rev l))
                  (anlr ((eq x1 a) (eq x2 (rev l)) (eq x3 (rlrec z S l))))))
              (preqd ((an (an (eq x1 a) (eq x2 (rev l))) (eq x3 (rlrec z S l))) x1 a x3 (rlrec z S l))
                (anll ((eq x1 a) (eq x2 (rev l)) (eq x3 (rlrec z S l))))
                (anr ((an (eq x1 a) (eq x2 (rev l))) (eq x3 (rlrec z S l)))))))))))))

(local theorem rlistindd ((G wff ()) (x nat) (l nat) (a nat) (n nat ()) (px wff (x)) (p0 wff ()) (pn wff ()) (pl wff (l)) (ps wff (l a)))
  ((hn (im (eq x n) (iff px pn)))
   (h0 (im (eq x (d0)) (iff px p0)))
   (hl (im (eq x l) (iff px pl)))
   (hs (im (eq x (snoc l a)) (iff px ps)))
   (h1 (im G p0))
   (h2 (im (an G pl) ps)))
  (im G pn)
((w nat) (z nat))
(:let H1 (anr ((an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))))
(indstr (G z w n (sb z x px) pn (sb w x px))
  (syl6bb ((eq z n) (sb z x px) (sb n x px) pn)
    (sbe (x n px pn)
      hn)
    (sbeq1 (x z n px)))
  (sbeq1 (x z w px))
  (casesda ((an G (al z (im (lt z w) (sb z x px)))) (eq w (d0)) (sb w x px))
    (mpbird ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (d0))) (sb (d0) x px) (sb w x px))
      (sbeq1d (x (an (an G (al z (im (lt z w) (sb z x px)))) (eq w (d0))) w (d0) px)
        (anr ((an G (al z (im (lt z w) (sb z x px)))) (eq w (d0)))))
      (anwll (G (al z (im (lt z w) (sb z x px))) (eq w (d0)) (sb (d0) x px))
        (sylibr (G p0 (sb (d0) x px))
          (sbe (x (d0) px p0)
            h0)
          h1)))
    (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ex l (ex a (eq w (snoc l a)))) (sb w x px))
      (sylib ((an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ne w (d0)) (ex l (ex a (eq w (snoc l a)))))
        (exsnoc (a w l))
        (:conv (im (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ne w (d0)))
          (im
            (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0))))
            (:unfold ne (w (d0)) ()
              (not (eq w (d0)))))
          (anr ((an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))))))
      (eexd (l (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ex a (eq w (snoc l a))) (sb w x px))
        (eexd (a (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (eq w (snoc l a)) (sb w x px))
          (anwl ((an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0))) (im (eq w (snoc l a)) (sb w x px)))
            (exp ((an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a)) (sb w x px))
              (mpbird ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) ps (sb w x px))
                (syl6bb ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) (sb w x px) (sb (snoc l a) x px) ps)
                  (sbe (x (snoc l a) px ps)
                    hs)
                  (sbeq1d (x (an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) w (snoc l a) px)
                    H1))
                (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) pl ps)
                  (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) (lt l w) pl)
                    (mpbiri ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) (lt l (snoc l a)) (lt l w))
                      (snoclt (l a))
                      (lteq2d ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) l w (snoc l a))
                        H1))
                    (rsyl ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (snoc l a))) (al z (im (lt z w) (sb z x px))) (im (lt l w) pl))
                      (anlr (G (al z (im (lt z w) (sb z x px))) (eq w (snoc l a))))
                      (eale (z l (im (lt z w) (sb z x px)) (im (lt l w) pl))
                        (imeqd ((eq z l) (lt z w) (lt l w) (sb z x px) pl)
                          (lteq1 (z l w))
                          (syl6bb ((eq z l) (sb z x px) (sb l x px) pl)
                            (sbe (x l px pl)
                              hl)
                            (sbeq1 (x z l px)))))))
                  (anwll (G (al z (im (lt z w) (sb z x px))) (eq w (snoc l a)) (im pl ps))
                    (exp (G pl ps)
                      h2)))))))))))))

(local theorem rlistind ((x nat) (l nat) (a nat) (n nat ()) (px wff (x)) (p0 wff ()) (pn wff ()) (pl wff (l)) (ps wff (l a)))
  ((hn (im (eq x n) (iff px pn)))
   (h0 (im (eq x (d0)) (iff px p0)))
   (hl (im (eq x l) (iff px pl)))
   (hs (im (eq x (snoc l a)) (iff px ps)))
   (h1 p0)
   (h2 (im pl ps)))
  pn
()
(trud (pn)
  (rlistindd ((tru) x l a n px p0 pn pl ps)
    hn
    h0
    hl
    hs
    (a1i ((tru) p0)
      h1)
    (anwr ((tru) pl ps)
      h2))))

