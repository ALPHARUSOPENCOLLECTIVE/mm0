delimiter $ ( ) ~ { } , $;
strict provable sort wff;
term imp (ph ps: wff): wff; infixr imp: $->$ prec 25;
term neg (ph: wff): wff; prefix neg: $~$ prec 40;

axiom ax_1 (ph ps: wff): $ ph -> ps -> ph $;
axiom ax_2 (ph ps ch: wff): $ (ph -> ps -> ch) -> (ph -> ps) -> ph -> ch $;
axiom ax_3 (ph ps: wff): $ (~ph -> ~ps) -> ps -> ph $;
axiom ax_mp (ph ps: wff): $ ph $ > $ ph -> ps $ > $ ps $;

def iff (ph ps: wff): wff = $ ~((ph -> ps) -> ~(ps -> ph)) $;
infixl iff: $<->$ prec 20;

def and (ph ps: wff): wff = $ ~(ph -> ~ps) $;
infixl and: $/\$ prec 20;

def or (ph ps: wff): wff = $ ~ph -> ps $;
infixl or: $\/$ prec 30;

term wtru: wff; prefix wtru: $T.$ prec max;
axiom tru: $ T. $;
def fal: wff = $ ~T. $; prefix fal: $F.$ prec max;

sort nat;
term al {x: nat} (ph: wff x): wff; prefix al: $A.$ prec 30;

def ex {x: nat} (ph: wff x): wff = $ ~(A. x ~ph) $;
prefix ex: $E.$ prec 30;

axiom ax_gen (ph: wff) {x: nat}: $ ph $ > $ A. x ph $;
axiom ax_4 {x: nat} (ph ps: wff x): $ A. x (ph -> ps) -> A. x ph -> A. x ps $;
axiom ax_5 {x: nat} (ph: wff): $ ph -> A. x ph $;

term eq (a b: nat): wff; infixl eq: $=$ prec 50;

def ne (a b: nat): wff = $ ~ a = b $; infixl ne: $!=$ prec 50;

def sb (a: nat) {x .y: nat} (ph: wff x): wff =
  $ A. y (y = a -> A. x (x = y -> ph)) $;
notation sb (a: nat) {x: nat} (ph: wff x): wff =
  ($[$:30) a ($/$:0) x ($]$:0) ph;

axiom ax_6 (a: nat) {x: nat}: $ E. x x = a $;
axiom ax_7 (a b c: nat): $ a = b -> a = c -> b = c $;

axiom ax_10 {x: nat} (ph: wff x): $ ~(A. x ph) -> A. x ~ (A. x ph) $;
axiom ax_11 {x y: nat} (ph: wff x y): $ A. x A. y ph -> A. y A. x ph $;
axiom ax_12 {x y: nat} (ph: wff y): $ A. y ph -> [ y / x ] ph $;

strict sort set;
term ab {x: nat} (ph: wff x): set;
notation ab {x: nat} (ph: wff x): set = (${$:max) x ($|$:0) ph ($}$:0);
term el: nat > set > wff; infixl el: $e.$ prec 50;
axiom elab (a: nat) {x: nat} (ph: wff x):
  $ a e. {x | ph} <-> [ a / x ] ph $;

def eqs (A B: set) {.x: nat}: wff = $ A. x (x e. A <-> x e. B) $;
infixl eqs: $==$ prec 50;

term the: set > nat;
axiom the_eq {x: nat} (a: nat): $ the {x | x = a} = a $;
axiom eqthe (A B: set): $ A == B -> the A = the B $;

def Inter (A B: set) (.x: nat): set = $ {x | x e. A /\ x e. B} $;
infixl Inter: $i^i$ prec 70;

def Union (A B: set) (.x: nat): set = $ {x | x e. A \/ x e. B} $;
infixl Union: $u.$ prec 65;

def Univ (.x: nat): set = $ {x | T.} $; prefix Univ: $V$ prec max;

def sbs (a: nat) {x .y: nat} (A: set x): set = $ {y | [ a / x ] y e. A} $;
notation sbs (a: nat) {x: nat} (A: set x): set =
  ($S[$:70) a ($/$:0) x ($]$:0) A;

def sbn (a: nat) {x .y: nat} (b: nat x): nat = $ the(S[ a / x ] {y | y = b}) $;
notation sbn (a: nat) {x: nat} (b: nat x): nat =
  ($N[$:70) a ($/$:0) x ($]$:0) b;

term d0: nat; prefix d0: $0$ prec max;
term suc: nat > nat;

def d1:  nat = $suc 0$; prefix d1:  $1$  prec max;
def d2:  nat = $suc 1$; prefix d2:  $2$  prec max;
def d3:  nat = $suc 2$; prefix d3:  $3$  prec max;
def d4:  nat = $suc 3$; prefix d4:  $4$  prec max;
def d5:  nat = $suc 4$; prefix d5:  $5$  prec max;
def d6:  nat = $suc 5$; prefix d6:  $6$  prec max;
def d7:  nat = $suc 6$; prefix d7:  $7$  prec max;
def d8:  nat = $suc 7$; prefix d8:  $8$  prec max;
def d9:  nat = $suc 8$; prefix d9:  $9$  prec max;
def d10: nat = $suc 9$; prefix d10: $10$ prec max;

axiom peano1 (a: nat): $ ~(0 = suc a) $;
axiom peano2 (a b: nat): $ suc a = suc b <-> a = b $;
axiom peano5 {x: nat} (ph: wff x):
  $ [ 0 / x ] ph -> A. x (ph -> [ suc x / x ] ph) -> A. x ph $;

term add: nat > nat > nat; infixl add: $+$ prec 65;
term mul: nat > nat > nat; infixl add: $*$ prec 70;

axiom add0 (a: nat): $ a + 0 = a $;
axiom addS (a b: nat): $ a + suc b = suc (a + b) $;
axiom mul0 (a: nat): $ a * 0 = 0 $;
axiom mulS (a b: nat): $ a * suc b = a * b + a $;

def le (a b .x: nat): wff = $ E. x a + x = b $;
infixl le: $<=$ prec 50;

def lt (a b: nat): wff = $ suc a <= b $;
infixl lt: $<$ prec 50;

def if (ph: wff) (a b: nat): nat;
theorem iftrue (ph: wff) (a b: nat): $ ph -> if ph a b = a $;
theorem iffalse (ph: wff) (a b: nat): $ ~ph -> if ph a b = b $;

def true (n: nat): wff = $ n != 0 $;
def bool (n: nat): wff = $ n < 2 $;
def nat (ph: wff): nat = $ if ph 1 0 $;

def ifp (ph a b: wff): wff = $ true (if ph (nat a) (nat b)) $;

def min (a b: nat): nat = $ if (a < b) a b $;
def max (a b: nat): nat = $ if (a < b) b a $;

def pr (a b: nat): nat; infixr pr: $<>$ prec 54;
def fst (a: nat): nat;
def snd (a: nat): nat;

theorem fstpr (a b: nat): $ fst (a <> b) = a $;
theorem sndpr (a b: nat): $ snd (a <> b) = b $;
theorem fstsnd (a: nat): $ fst a <> snd a = a $;

theorem fst0: $ fst 0 = 0 $;
theorem snd0: $ snd 0 = 0 $;
theorem pr0: $ 0 <> 0 = 0 $;

def pi11 (n: nat): nat = $ fst (fst n) $;
def pi12 (n: nat): nat = $ snd (fst n) $;
def pi21 (n: nat): nat = $ fst (snd n) $;
def pi22 (n: nat): nat = $ snd (snd n) $;
def pi221 (n: nat): nat = $ fst (pi22 n) $;
def pi222 (n: nat): nat = $ snd (pi22 n) $;

def rec (z: nat) {x: nat} (s: nat x) (n: nat): nat;
theorem rec0 (z: nat) {x: nat} (s: nat x): $ rec z x s 0 = z $;
theorem recS (z: nat) {x: nat} (s: nat x) (n: nat):
  $ rec z x s (suc n) = N[ rec z x s n / x ] s $;

def sub (a b: nat): nat; infixl sub: $-$ prec 65;
theorem sub0 (a: nat): $ a - 0 = a $;
theorem subZ (b: nat): $ 0 - b = 0 $;
theorem subSS (a b: nat): $ suc a - suc b = a - b $;

def pow (a b: nat): nat; infixr pow: $^$ prec 80;
theorem pow0 (a: nat): $ a ^ 0 = 1 $;
theorem powS (a b: nat): $ a ^ suc b = a * a ^ b $;

def div (a b: nat): nat; infixl div: $//$ prec 70;
def mod (a b: nat): nat; infixl mod: $%$ prec 70;
theorem div0 (a: nat): $ a // 0 = 0 $;
theorem divmod (a b: nat): $ b * (a // b) + a % b = a $;
theorem modlt (a b: nat): $ b != 0 -> a % b < a $;

def b0 (n: nat): nat = $ n + n $;
def b1 (n: nat): nat = $ suc (b0 n) $;
def odd (n: nat): wff = $ n % 2 = 1 $;

def shl (a n: nat): nat = $ a * 2 ^ n $;
def shr (a n: nat): nat = $ a // 2 ^ n $;

def nel (a b: nat): wff = $ odd (shr a b) $;
def ns (a .x: nat): set = ${x | nel x a}$; coercion ns: nat > set;
theorem axext {x: nat} (a b: nat): $ a == b -> a = b $;
theorem extlt (a b: nat): $ a e. b -> a < b $;
theorem nel0 (a: nat): $ ~ a e. 0 $;

def finite (A: set) (.n: nat): wff = $ E. n n == A $;

def lower (A: set) (.n: nat): nat = $ the {n | n == A} $;

def sn (a: nat): nat;
theorem elsn (a b: nat): $ a e. sn b <-> a = b $;

def ins (a b: nat): nat; infixr ins: $;$ prec 84;
theorem elins (a b c: nat): $ a e. ins b c <-> a = b \/ a e. c $;

def upto (n: nat): nat = $ 2 ^ n - 1 $;
theorem elupto (k n: nat): $ k e. upto n <-> k < n $;

def Bool: nat = $ 0 ; sn 1 $;
def Option (A: set) (.n: nat): set = $ {n | n = 0 \/ n - 1 e. A} $;

def subset (A B: set) (.x: nat): wff = $ A. x (x e. A -> x e. B) $;
infixl subset: $C_$ prec 50;

def Power (A: set) (.x: nat): set = $ {x | x C_ A} $;
def power (a: nat): nat = $ lower (Power a) $;

def card (s: nat): nat;
theorem card0: $ card 0 = 0 $;
theorem cardS (a s: nat): $ ~a e. s -> card (a ; s) = suc (card s) $;

def cons (a b: nat): nat = $ suc (a <> b) $; infixr cons: $:$ prec 90;

def sep (n: nat) (A: set): nat;
theorem elsep (n: nat) (A: set) (a: nat):
  $ a e. sep n A <-> a e. n /\ a e. A $;

def isfun (A: set) (.a .b .b2: nat): wff =
$ A. a A. b A. b2 (a <> b e. A -> a <> b2 e. A -> b = b2) $;

def opab {x y .z: nat} (ph: wff x y): set =
$ {z | E. x E. y (z = x <> y /\ ph)} $;

def Xp (A B: set) (.x .y .z: nat): set = $ opab x y (x e. A /\ y e. B) $;

def Dom (A: set) (.x .y: nat): set = $ {x | E. y x <> y e. A} $;
def Ran (A: set) (.x .y: nat): set = $ {y | E. x x <> y e. A} $;

def Im (F A: set) (.x .y: nat): set = $ {y | E. x (x e. A /\ x <> y e. F)} $;
infixl Im: $''$ prec 80;

def cnv (A: set) (.x .y: nat): set = $ opab x y (y <> x e. A) $;

def comp (F G: set) (.x .y .z: nat): set =
$ opab x z (E. y x <> y e. G /\ y <> z e. F) $;
infixr comp: $o.$ prec 90;

def res (A: set) (n: nat): nat = $ sep (lower (Xp n V)) A $;
infixl res: $|`$ prec 55;
theorem elres (n a b: nat) (A: set):
  $ isfun A -> (a <> b e. A |` n <-> a e. n /\ a <> b e. A) $;

def Arrow (A B: set) (.f: nat): set =
$ {f | isfun f /\ Dom f == A /\ Ran f C_ B} $;

def lam {x .p: nat} (a: nat x): set = ${p | E. x p = x <> a}$;
notation lam {x: nat} (a: nat x): set = ($\$:30) x ($,$:0) a;

def app (F: set) (x .y: nat): nat = $ the {y | x <> y e. F} $;
infixl app: $@$ prec 200;

def write (f x y .a .b: nat): nat =
  $ lower (opab a b (a <> b e. f /\ a != x \/ a = x /\ b = y)) $;
theorem writeEq (f x y: nat): $ write f x y @ x = y $;
theorem writeNe (f x y a: nat): $ a != x -> write f x y @ a = f @ a $;

def srec {x: nat} (s: nat x): set;
theorem srecval {x y: nat} (s: nat x) (n: nat):
  $ srec x s @ n = N[ srec x s |` upto n / x ] s $;

def srecp (A: set): set;
theorem srecpval (A: set) (n: nat):
  $ n e. srecp A <-> n <> sep n (srecp A) e. A $;

def case (A B: set) (.n: nat): set =
  $ \ n, if (odd n) (B @ (n // 2)) (A @ (n // 2)) $;
theorem casel (A B: set) (n: nat): $ case A B @ (b0 n) = A @ n $;
theorem caser (A B: set) (n: nat): $ case A B @ (b1 n) = B @ n $;

def Sum (A B: set): set;
theorem Suml (A B: set) (n: nat): $ b0 n e. Sum A B <-> n e. A $;
theorem Sumr (A B: set) (n: nat): $ b1 n e. Sum A B <-> n e. B $;

def all (A: set) (n: nat): wff;
theorem all0 (A: set): $ all A 0 $;
theorem allS (A: set) (a b : nat): $ all A (a : b) <-> a e. A /\ all A b $;

def List (A: set) (.n: nat): set = $ {n | all A n} $;

def in (a l : nat): wff; infixl in: $IN$ prec 50;
theorem id0 (a: nat): $ ~ a IN 0 $;
theorem inS (a b l: nat): $ a IN (b : l) <-> a = b \/ a IN l $;

def lmems (l : nat): nat;
theorem ellmems (a l: nat): $ a e. lmems l <-> a IN l $;

def lrec (z: nat) (S: set) (n: nat): nat;
theorem lrec0 (z: nat) (S: set): $ lrec z S 0 = z $;
theorem lrecS (z: nat) (S: set) (a b: nat):
  $ lrec z S (a : b) = S @ (a <> lrec z S b) $;

def len (l: nat): nat;
theorem len0: $ len 0 = 0 $;
theorem lenS (a b: nat): $ len (a : b) = suc (len b) $;

def Array (A: set) (n .l: nat): set = $ {l | l e. List A /\ len l = n} $;

def snoc (l a: nat): nat; infixl snoc: $|>$ prec 85;
theorem snoc0 (a: nat): $ 0 |> a = a : 0 $;
theorem snocS (a b c: nat): $ (a : b) |> c = a : (b |> c) $;
theorem snoclt (a b: nat): $ a < a |> b $;

def append (l1 l2: nat): nat; infixl append: $++$ prec 85;
theorem append0 (a: nat): $ 0 ++ a = a $;
theorem appendS (a b c: nat): $ (a : b) ++ c = a : (b ++ c) $;

def nth (n l: nat): nat;
theorem nth0 (n: nat): $ nth n 0 = 0 $;
theorem nthZ (a l: nat): $ nth 0 (a : l) = suc a $;
theorem nthS (n a l: nat): $ nth (suc n) (a : l) = nth n l $;

--| #include "peano.mm0"

-- The string preamble. This is used for interfacing with
-- the real world, making concrete inputs and outputs.
strict free sort hex;
term x0: hex; term x1: hex; term x2: hex; term x3: hex;
term x4: hex; term x5: hex; term x6: hex; term x7: hex;
term x8: hex; term x9: hex; term xa: hex; term xb: hex;
term xc: hex; term xd: hex; term xe: hex; term xf: hex;

strict free sort char;
term ch: hex > hex > char;

strict free sort string;
term s0: string;
term s1: char > string;
term sadd: string > string > string; infixr sadd: $'+$ prec 50;

def scons (c: char) (s: string): string = $ s1 c '+ s $;
infixr scons: $':$ prec 51;

-- Peano translation functions. The sorts `hex`, `char`, `string`
-- are closed classes, but we can embed them in `nat` as lists
-- of numbers less than 256, and prove theorems on `nat` instead.
-- We have to introduce some axioms to deal with the coercion
-- functions though.

def d11: nat = $suc 10$; prefix d11: $11$ prec max;
def d12: nat = $suc 11$; prefix d12: $12$ prec max;
def d13: nat = $suc 12$; prefix d13: $13$ prec max;
def d14: nat = $suc 13$; prefix d14: $14$ prec max;
def d15: nat = $suc 14$; prefix d15: $15$ prec max;
def d16: nat = $suc 15$; prefix d16: $16$ prec max;

term h2n: hex > nat; coercion h2n: hex > nat;
axiom h2n0: $ x0 = 0 $;   axiom h2n1: $ x1 = 1 $;
axiom h2n2: $ x2 = 2 $;   axiom h2n3: $ x3 = 3 $;
axiom h2n4: $ x4 = 4 $;   axiom h2n5: $ x5 = 5 $;
axiom h2n6: $ x6 = 6 $;   axiom h2n7: $ x7 = 7 $;
axiom h2n8: $ x8 = 8 $;   axiom h2n9: $ x9 = 9 $;
axiom h2na: $ xa = 10 $;  axiom h2nb: $ xb = 11 $;
axiom h2nc: $ xc = 12 $;  axiom h2nd: $ xd = 13 $;
axiom h2ne: $ xe = 14 $;  axiom h2nf: $ xf = 15 $;

term c2n: char > nat; coercion c2n: char > nat;
axiom c2nch (h1 h2: hex): $ ch h1 h2 = h1 * 16 + h2 $;

term s2n: string > nat; coercion s2n: string > nat;
axiom s2ns0: $ s0 = 0 $;
axiom s2ns1 (c: char): $ s1 c = c : 0 $;
axiom s2nsadd (s t: string): $ s '+ t = s ++ t $;

--| #include "peano_hex.mm0"

def consBit (b: wff) (n: nat): nat = $ if b (b1 n) (b0 n) $;

def bit (n i: nat): nat = $ nat (i e. n) $;
theorem bitT (n i: nat): $ bool (bit n i) $;

def bitAnd (a b: nat): nat;
theorem bitAndEq (a b: nat): $ bitAnd a b == Inter a b $;

def bitOr (a b: nat): nat;
theorem bitOrEq (a b: nat): $ bitOr a b == Union a b $;

def bitDif (a b: nat): nat;
theorem bitDif_mem (a b i: nat): $ i e. bitDif a b <-> (i e. a /\ ~i e. b) $;

def bitXor (a b: nat): nat;
theorem bitXor_mem (a b i: nat): $ i e. bitXor a b <-> ~(i e. a <-> i e. b) $;

def d32: nat = $ 2 ^ 5 $; prefix d32: $32$ prec max;
def d64: nat = $ 2 ^ 6 $; prefix d64: $64$ prec max;
def d256: nat = $ 2 ^ 8 $; prefix d256: $256$ prec max;

def Bits (k: nat): nat = $ upto (2 ^ k) $;
def u8: nat = $ Bits 8 $;
def u32: nat = $ Bits 32 $;
def u64: nat = $ Bits 64 $;

-- little endian encoding
def toBytes (k n: nat): nat;
theorem toBytes0 (k n: nat): $ toBytes 0 n = 0 $;
theorem toBytesS (k n: nat):
  $ toBytes (suc k) n = (n // 256) : toBytes k (n % 256) $;
theorem toBytesT (k n: nat): $ toBytes k n e. Array u8 k $;

def u16Bytes (n: nat): nat = $ toBytes 2 n $;
def u32Bytes (n: nat): nat = $ toBytes 4 n $;
def u64Bytes (n: nat): nat = $ toBytes 8 n $;

-- sign extend (v: bitvec m) to length n
def sExt (m n v: nat): nat = $ if (m - 1 e. v) (2 ^ n - 2 ^ m + v) v $;
def sExtq (n v: nat): nat = $ sExt n 64 v $;
theorem sExtT (m n v: nat): $ m <= n /\ v e. Bits m -> sExt m n v e. Bits n $;
theorem sExtqT (n v: nat): $ n <= 64 /\ v e. Bits n -> sExtq n v e. u64 $;

-- get lower bits of a number
def chop (k n: nat): nat = $ n % 2 ^ k $;
theorem chopT (k n: nat): $ chop k n e. Bits k $;

-- write a e. Bits m to bits k thru k+m-1 of n
def bitsUpdate (k m a n: nat): nat = $ bitDif n (shl (upto m) k) + shl a k $;
theorem bitsUpdateT (k m l a n: nat):
  $ k + m <= l /\ a e. Bits m /\ n e. Bits l -> bitsUpdate k m a n e. Bits l $;

def bitsNot (k n: nat): nat = $ bitDif (upto k) n $;
theorem bitsNot_mem (k n i: nat): $ i e. bitsNot k n <-> i < k /\ ~i e. n $;

def bitsAdd (k a b: nat): nat = $ chop k (a + b) $;
def bitsNeg (k n: nat): nat = $ bitsAdd k (bitsNot k n) 1 $;
def bitsSub (k a b: nat): nat = $ bitsAdd k a (bitsNeg k b) $;

def bitsMSB (k n: nat): wff = $ k - 1 e. n $;
def bitsSar (k a b: nat): nat =
$ nat (bitsMSB k a) * (upto k - upto (k - b)) + shr a b $;
theorem bitsSarT (k a b: nat):
  $ a e. Bits k /\ b <= k -> bitsSar k a b e. Bits k $;

def add64 (a b: nat): nat = $ bitsAdd 64 a b $; infixl add64: $+_64$ prec 65;
def sub64 (a b: nat): nat = $ bitsSub 64 a b $; infixl sub64: $-_64$ prec 65;

def Bitvec {.n: nat}: set = $ {n | snd n < 2 ^ fst n} $;

def bvSize (bs: nat): nat;
theorem bvSize0 (n: nat): $ bvSize 0 = 0 $;
theorem bvSizeS (k bs n: nat): $ bvSize ((k <> bs) : n) = k + bvSize n $;

def isBitvecs (k bs: nat): wff = $ bs e. List Bitvec /\ bvSize bs = k $;

def ofBits (n: nat): nat;
theorem ofBits0 (n: nat): $ ofBits 0 = 0 $;
theorem ofBitsS (k bs n: nat):
  $ ofBits ((k <> bs) : n) = bs + shl (ofBits n) k $;
theorem ofBitsT (bs: nat): $ bs e. List Bitvec /\ ofBits 0 e. Bits 0 $;
theorem ofBitsT (k bs n m: nat):
  $ bs e. Bits k /\ ofBits n e. Bits m ->
    ofBits ((k <> bs) : n) e. Bits (k + m) $;

def splitBits (bs n: nat): wff = $ bs e. List Bitvec /\ ofBits bs = n $;
theorem splitBitsT (bs n k: nat):
  $ isBitvecs bs k /\ splitBits bs n -> n e. Bits k $;

----------------------------------------
-- x86-64 machine code decoding
----------------------------------------

def Regs: set = $ Bits 4 $;
def RAX: nat = $ 0 $; theorem RAXT: $ RAX e. Regs $;
def RCX: nat = $ 1 $; theorem RCXT: $ RCX e. Regs $;
def RDX: nat = $ 2 $; theorem RDXT: $ RDX e. Regs $;
def RBX: nat = $ 3 $; theorem RBXT: $ RBX e. Regs $;
def RSP: nat = $ 4 $; theorem RSPT: $ RSP e. Regs $;
def RBP: nat = $ 5 $; theorem RBPT: $ RBP e. Regs $;
def RSI: nat = $ 6 $; theorem RSIT: $ RSI e. Regs $;
def RDI: nat = $ 7 $; theorem RDIT: $ RDI e. Regs $;

def REX: set = $ Option (Bits 4) $;
def REX_val (r: nat): nat = $ r - 1 $;
def REX_W (r: nat): nat = $ bit (REX_val r) 3 $;
def REX_R (r: nat): nat = $ bit (REX_val r) 2 $;
def REX_X (r: nat): nat = $ bit (REX_val r) 1 $;
def REX_B (r: nat): nat = $ bit (REX_val r) 0 $;
theorem REX_valT (r: nat): $ r e. REX -> REX_val r e. Bits 4 $;
theorem REX_WT (r: nat): $ bool (REX_W r) $;
theorem REX_RT (r: nat): $ bool (REX_R r) $;
theorem REX_XT (r: nat): $ bool (REX_X r) $;
theorem REX_BT (r: nat): $ bool (REX_B r) $;

def rex_reg (r b: nat): nat = $ r + shl b 3 $;
theorem rex_regT (r b: nat): $ r e. Bits 3 /\ bool b -> rex_reg r b e. Regs $;

def Base: set = $ Option (Option Regs) $;
def base_RIP: nat = $ suc 0 $;
def base_reg (r: nat): nat = $ suc (suc r) $;
theorem base0T: $ 0 e. Base $;
theorem base_RIPT: $ base_RIP e. Base $;
theorem base_regT (r: nat): $ r e. Regs -> base_reg r e. Base $;

def ScaleIndex: set = $ Xp (Bits 2) Regs $;

def RM: set = $ Sum Regs (Xp (Option ScaleIndex) (Xp Base u64)) $;
def RM_reg (r: nat): nat = $ b0 r $;
def RM_mem (si base q: nat): nat = $ b1 (si <> base <> q) $;
theorem RM_regT (r: nat): $ r e. Regs -> RM_reg r e. RM $;
theorem RM_memT (si base q: nat):
  $ si e. Option ScaleIndex /\ base e. Base /\ q e. u64 ->
    RM_mem si base q e. RM $;

def RM_isMem (rm: nat): wff = $ odd rm $;

def readDisplacement (mod q l .b .w: nat): wff =
$ (mod = 0 /\ q = 0 /\ l = 0) \/
  (E. b (b e. u8 /\ mod = 1 /\ q = sExtq 8 b /\ l = b : 0)) \/
  (E. w (w e. u32 /\ mod = 2 /\ q = sExtq 32 w /\ l = u32Bytes w)) $;
theorem readDisplacementT (mod q l: nat):
  $ readDisplacement mod q l ->
    mod e. Bits 2 /\ mod != 3 /\ q e. u64 /\ l e. List u8 $;

def readSIBDisplacement (mod bbase q base l .b: nat): wff =
$ ifp (bbase = RBP /\ mod = 0)
    (E. b (b e. u8 /\ q = sExtq 8 b /\ base = 0 /\ l = b : 0))
    (readDisplacement mod q l /\ base = base_reg bbase) $;
theorem readSIBDisplacementT (mod bbase q base l: nat):
  $ bbase e. Regs /\ readSIBDisplacement mod bbase q base l ->
    mod e. Bits 2 /\ mod != 3 /\ q e. u64 /\ base e. Base /\ l e. List u8 $;

def readSIB (rex mod rm l .b .bs .ix .sc .disp .bbase .index: nat): wff =
$ E. b E. bs E. ix E. sc E. disp E. bbase E. index (
    splitBits ((3 <> bs) : (3 <> ix) : (2 <> sc) : 0) b /\
    index = rex_reg (REX_X rex) ix /\
    readSIBDisplacement mod (rex_reg (REX_B rex) bs) disp bbase l /\
    rm = RM_mem (if (index = RSP) 0 (suc (sc <> index))) bbase disp) $;
theorem readSIBT (rex mod rm l: nat):
  $ readSIB rex mod rm l ->
    mod e. Bits 2 /\ mod != 3 /\ rm e. RM /\ l e. List u8 $;

def readModRM (rex rn rm l .b .rm2 .opc .mod .i .l2 .disp: nat): wff =
$ E. b E. rm2 E. opc E. mod (
    splitBits ((3 <> rm2) : (3 <> opc) : (2 <> mod) : 0) b /\
    (rm2 = 5 /\ mod = 0 /\ E. i (i e. u32 /\
      rn = rex_reg (REX_R rex) opc /\
      rm = RM_mem 0 base_RIP (sExtq 32 i) /\
      l = b : u32Bytes i)) \/
    (mod = 3 /\
      rn = rex_reg (REX_R rex) opc /\
      rm = RM_reg (rex_reg (REX_B rex) rm2) /\
      l = b : 0) \/
    E. l2 (rn = rex_reg (REX_R rex) opc /\ l = b : l2 /\
      ifp (rm2 = 4) (readSIB rex mod rm l2)
        (E. disp (readDisplacement mod disp l2 /\
          rm = RM_mem 0 (base_reg (rex_reg (REX_B rex) rm2)) disp)))) $;
theorem readModRMT (rex rn rm l: nat):
  $ readModRM rex rn rm l -> rn e. Regs /\ rm e. RM /\ l e. List u8 $;

def readOpcodeModRM (rex v rm l .rn: nat): wff =
$ E. rn (readModRM rex rn rm l /\ v = chop 3 rn) $;
theorem readOpcodeModRMT (rex v rm l: nat):
  $ readOpcodeModRM rex v rm l -> v e. Bits 3 /\ rm e. RM /\ l e. List u8 $;

def readPrefixes (rex l .b .rex2: nat): wff =
$ (rex = 0 /\ l = 0) \/ (E. b E. rex2 (
    splitBits ((4 <> rex2) : (4 <> 4) : 0) b /\
    rex = suc rex2 /\ l = b : 0)) $;
theorem readPrefixesT (rex l: nat):
  $ readPrefixes rex l -> rex e. REX /\ l e. List u8 $;

def readImmN (k q l .w: nat): wff =
$ E. w (w e. Bits k /\ q = sExtq k w /\ l = toBytes (k // 8) w) $;
theorem readImmNT (k q l: nat):
  $ k <= 64 /\ readImmN k q l -> q e. u64 /\ l e. List u8 $;

def WSize (.n: nat): set = $ lower (
  Inter (Xp (8 ; 16 ; 32 ; sn 64) Bool) {n | fst n = 8 \/ snd n = 0}) $;
def wsizeBits (sz: nat): nat = $ fst sz $;
def wsizeBytes (sz: nat): nat = $ wsizeBits sz // 8 $;
def wSz8 (have_rex: wff): nat = $ 8 <> nat have_rex $;
def wSz16: nat = $ 16 <> 0 $;
def wSz32: nat = $ 32 <> 0 $;
def wSz64: nat = $ 64 <> 0 $;

def readFullImm (sz q l: nat): wff =
$ readImmN (wsizeBits sz) q l $;
theorem readFullImmT (sz q l: nat):
  $ sz e. WSize /\ readFullImm sz q l -> q e. u64 /\ l e. List u8 $;

def readImm (sz q l: nat): wff =
$ readFullImm sz q l /\ wsizeBytes sz < 8 $;
theorem readImmT (sz q l: nat):
  $ sz e. WSize /\ readImm sz q l -> q e. u64 /\ l e. List u8 $;

def opSize (have_rex: wff) (w v: nat): nat =
$ if (true v) (if (true w) wSz64 wSz32) (wSz8 have_rex) $;
theorem opSizeT (have_rex: wff) (w v: nat):
  $ bool v /\ bool w -> opSize have_rex w v e. WSize $;

def opSizeW (rex v: nat): nat = $ opSize (rex != 0) (REX_W rex) v $;

def DestSrc: set = $ Sum (Xp RM (Sum u64 Regs)) (Xp Regs RM) $;
def Rm_i (rm i: nat): nat = $ b0 (rm <> b0 i) $;
def Rm_r (rm r: nat): nat = $ b0 (rm <> b1 r) $;
def R_rm (r rm: nat): nat = $ b1 (r <> rm) $;
theorem Rm_iT (rm i: nat): $ rm e. RM /\ i e. u64 -> Rm_i rm i e. DestSrc $;
theorem Rm_rT (rm r: nat): $ rm e. RM /\ r e. Regs -> Rm_r rm r e. DestSrc $;
theorem R_rmT (r rm: nat): $ r e. Regs /\ rm e. RM -> R_rm r rm e. DestSrc $;

def ImmRM: set = $ Sum RM u64 $;
def immRM_rm (rm: nat): nat = $ b0 rm $;
def immRM_imm (i: nat): nat = $ b1 i $;
theorem immRM_rmT (rm: nat): $ rm e. RM -> immRM_rm rm e. ImmRM $;
theorem immRM_immT (i: nat): $ i e. RM -> immRM_imm i e. ImmRM $;

def Unop: nat = $ upto 4 $;
def unopInc: nat = $ 0 $;
def unopDec: nat = $ 1 $;
def unopNot: nat = $ 2 $;
def unopNeg: nat = $ 3 $;

def Binop: nat = $ Bits 4 $;
def binopAdd: nat = $ 0 $;
def binopOr:  nat = $ 1 $;
def binopAdc: nat = $ 2 $;
def binopSbb: nat = $ 3 $;
def binopAnd: nat = $ 4 $;
def binopSub: nat = $ 5 $;
def binopXor: nat = $ 6 $;
def binopCmp: nat = $ 7 $;
def binopRol: nat = $ 8 $;
def binopRor: nat = $ 9 $;
def binopRcl: nat = $ 10 $;
def binopRcr: nat = $ 11 $;
def binopShl: nat = $ 12 $;
def binopShr: nat = $ 13 $;
def binopTst: nat = $ 14 $;
def binopSar: nat = $ 15 $;

def BCond: nat = $ Bits 3 $;
def bcondO:  nat = $ 0 $;
def bcondB:  nat = $ 1 $;
def bcondE:  nat = $ 2 $;
def bcondNA: nat = $ 3 $;
def bcondS:  nat = $ 4 $;
def bcondL:  nat = $ 6 $;
def bcondNG: nat = $ 7 $;

def Cond: set = $ Option (Bits 4) $;
def condAlways: nat = $ 0 $;
def condPos (c: nat): nat = $ suc c $;
def condNeg (c: nat): nat = $ suc (c + 8) $;
theorem condAlwaysT: $ condAlways e. Cond $;
theorem condPosT (c: nat): $ c e. BCond -> condPos c e. Cond $;
theorem condNegT (c: nat): $ c e. BCond -> condNeg c e. Cond $;

def XASTArith: set =
$ Sum (Sum (Xp Unop (Xp WSize RM)) (Xp Binop (Xp WSize DestSrc)))
    (Sum (Xp Bool (Xp WSize RM)) (Xp WSize DestSrc)) $;
def xastUnop (unop sz rm: nat): nat = $ b0 (b0 (b0 (b0 (unop <> sz <> rm)))) $;
def xastBinop (binop sz rm: nat): nat = $ b0 (b0 (b0 (b1 (binop <> sz <> rm)))) $;
def xastMul (sz rm: nat): nat = $ b0 (b0 (b1 (b0 (0 <> sz <> rm)))) $;
def xastDiv (sz rm: nat): nat = $ b0 (b0 (b1 (b0 (1 <> sz <> rm)))) $;
def xastLea (sz ds: nat): nat = $ b0 (b0 (b1 (b0 (sz <> ds)))) $;

def XASTData: set =
$ Sum (Xp WSize (Sum (Xp Bool (Xp DestSrc WSize)) (Xp (upto 3) (Xp RM Regs))))
      (Xp Cond (Sum (Xp WSize DestSrc) (Xp Bool RM))) $;
def xastMovX (b sz ds sz2: nat): nat = $ b0 (b1 (b0 (sz <> b0 (b <> ds <> sz2)))) $;
def xastXchg (sz rm rn: nat): nat = $ b0 (b1 (b0 (sz <> b1 (0 <> rm <> rn)))) $;
def xastCmpXchg (sz rm rn: nat): nat = $ b0 (b1 (b0 (sz <> b1 (1 <> rm <> rn)))) $;
def xastXadd (sz rm rn: nat): nat = $ b0 (b1 (b0 (sz <> b1 (2 <> rm <> rn)))) $;
def xastCMov (c sz ds: nat): nat = $ b0 (b1 (b1 (c <> b0 (sz <> ds)))) $;
def xastSetCC (c b ds: nat): nat = $ b0 (b1 (b1 (c <> b1 (b <> ds)))) $;

def xastMov (sz ds: nat): nat = $ xastCMov condAlways sz ds $;
def xastMovZX (sz ds sz2: nat): nat = $ xastMovX 0 sz ds sz2 $;
def xastMovSX (sz ds sz2: nat): nat = $ xastMovX 1 sz ds sz2 $;

def XASTFlow: set =
$ Sum (Sum (Sum RM (Xp Cond u64)) (Sum ImmRM u64)) (Option (Sum ImmRM RM)) $;
def xastJump (rm: nat): nat = $ b1 (b0 (b0 (b0 (b0 rm)))) $;
def xastJCC (c q: nat): nat = $ b1 (b0 (b0 (b0 (b1 (c <> q))))) $;
def xastCall (irm: nat): nat = $ b1 (b0 (b0 (b1 (b0 irm)))) $;
def xastRet (q: nat): nat = $ b1 (b0 (b0 (b1 (b1 q)))) $;
def xastPush (irm: nat): nat = $ b1 (b0 (b1 (suc (b0 irm)))) $;
def xastPop (rm: nat): nat = $ b1 (b0 (b1 (suc (b1 rm)))) $;
def xastLeave: nat = $ b1 (b0 (b1 0)) $;

def XASTMisc: set = $ upto 4 $;
def xastCMC: nat = $ b1 (b1 0) $;
def xastCLC: nat = $ b1 (b1 1) $;
def xastSTC: nat = $ b1 (b1 2) $;
def xastSysCall: nat = $ b1 (b1 3) $;

def XAST: set = $ Sum (Sum XASTArith XASTData) (Sum XASTFlow XASTMisc) $;

-- some typechecking sanity checks
theorem xastUnopT (unop sz rm: nat):
  $ unop e. Unop /\ sz e. WSize /\ rm e. RM -> xastUnop unop sz rm e. XAST $;
theorem xastBinopT (bop sz rm: nat):
  $ bop e. Binop /\ sz e. WSize /\ rm e. RM -> xastBinop bop sz rm e. XAST $;
theorem xastMulT (sz rm: nat):
  $ sz e. WSize /\ rm e. RM -> xastMul sz rm e. XAST $;
theorem xastDivT (sz rm: nat):
  $ sz e. WSize /\ rm e. RM -> xastDiv sz rm e. XAST $;
theorem xastLeaT (sz ds: nat):
  $ sz e. WSize /\ ds e. DestSrc -> xastLea sz ds e. XAST $;

theorem xastMovXT (b sz ds sz2: nat):
  $ bool b /\ sz e. WSize /\ ds e. DestSrc /\ sz2 e. WSize ->
    xastMovX b sz ds sz2 e. XAST $;
theorem xastXchgT (sz rm rn: nat):
  $ sz e. WSize /\ rm e. RM /\ rn e. Regs -> xastXchg sz rm rn e. XAST $;
theorem xastCmpXchgT (sz rm rn: nat):
  $ sz e. WSize /\ rm e. RM /\ rn e. Regs -> xastCmpXchg sz rm rn e. XAST $;
theorem xastXaddT (sz rm rn: nat):
  $ sz e. WSize /\ rm e. RM /\ rn e. Regs -> xastXadd sz rm rn e. XAST $;
theorem xastCMovT (c sz ds: nat):
  $ c e. Cond /\ sz e. WSize /\ ds e. DestSrc -> xastCMov c sz ds e. XAST $;
theorem xastSetCCT (c b ds: nat):
  $ c e. Cond /\ bool b /\ ds e. DestSrc -> xastSetCC c b ds e. XAST $;
theorem xastMovSXT (sz ds sz2: nat):
  $ sz e. WSize /\ ds e. DestSrc /\ sz2 e. WSize -> xastMovSX sz ds sz2 e. XAST $;
theorem xastMovZXT (sz ds sz2: nat):
  $ sz e. WSize /\ ds e. DestSrc /\ sz2 e. WSize -> xastMovZX sz ds sz2 e. XAST $;
theorem xastMovT (sz ds: nat):
  $ sz e. WSize /\ ds e. DestSrc -> xastMov sz ds e. XAST $;

theorem xastJumpT (rm: nat): $ rm e. RM -> xastJump rm e. XAST $;
theorem xastJCCT (c q: nat): $ c e. Cond /\ q e. u64 -> xastJCC c q e. XAST $;
theorem xastCallT (irm: nat): $ irm e. ImmRM -> xastCall irm e. XAST $;
theorem xastRetT (q: nat): $ q e. u64 -> xastRet q e. XAST $;
theorem xastPushT (irm: nat): $ irm e. ImmRM -> xastPush irm e. XAST $;
theorem xastPopT (rm: nat): $ rm e. RM -> xastPop rm e. XAST $;
theorem xastLeaveT: $ xastLeave e. XAST $;

theorem xastCMCT: $ xastCMC e. XAST $;
theorem xastCLCT: $ xastCLC e. XAST $;
theorem xastSTCT: $ xastSTC e. XAST $;
theorem xastSysCallT: $ xastSysCall e. XAST $;

def decodeTwoCMov (rex ast b l .c .reg .r: nat): wff =
$ E. c E. reg E. r (splitBits ((4 <> c) : (4 <> 4) : 0) b /\
    readModRM rex reg r l /\
    ast = xastCMov (suc c) (opSize T. (REX_W rex) 1) (R_rm reg r)) $;
def decodeTwoJCC (rex ast b l .c .imm: nat): wff =
$ E. c E. imm (splitBits ((4 <> c) : (4 <> 8) : 0) b /\
    readImmN 32 imm l /\
    ast = xastJCC (suc c) imm) $;
def decodeTwoSetCC (rex ast b l .c .reg .r: nat): wff =
$ E. c E. reg E. r (splitBits ((4 <> c) : (4 <> 9) : 0) b /\
    readModRM rex reg r l /\
    ast = xastSetCC (suc c) (nat (rex != 0)) r) $;
def decodeTwoCmpXchg (rex ast b l .v .reg .r: nat): wff =
$ E. v E. reg E. r (splitBits ((1 <> v) : (3 <> 0) : (4 <> 11) : 0) b /\
    readModRM rex reg r l /\
    ast = xastCmpXchg (opSizeW rex v) r reg) $;
def decodeTwoMovX (rex ast b l .v .s .reg .r: nat): wff =
$ E. v E. s E. reg E. r (
    splitBits ((1 <> v) : (2 <> 3) : (1 <> s) : (4 <> 11) : 0) b /\
    readModRM rex reg r l /\
    ast = xastMovX s (if (bool v) wSz16 (wSz8 (rex != 0)))
      (R_rm reg r) (opSizeW rex 1)) $;
def decodeTwoXadd (rex ast b l .v .reg .r: nat): wff =
$ E. v E. reg E. r (
    splitBits ((1 <> v) : (3 <> 0) : (4 <> 12) : 0) b /\
    readModRM rex reg r l /\
    ast = xastXadd (opSizeW rex v) r reg) $;
def decodeTwoSysCall (rex ast b l .v .reg .r: nat): wff =
$ b = ch x0 x5 /\ l = 0 /\ ast = xastSysCall $;

def decodeTwo (rex ast b l .b2 .l2: nat): wff =
$ b = ch x0 xf /\ E. b2 E. l2 (l = b2 : l2 /\ (
    decodeTwoCMov rex ast b2 l2 \/ decodeTwoJCC rex ast b2 l2 \/
    decodeTwoSetCC rex ast b2 l2 \/ decodeTwoCmpXchg rex ast b2 l2 \/
    decodeTwoMovX rex ast b2 l2 \/ decodeTwoXadd rex ast b2 l2 \/
    decodeTwoSysCall rex ast b2 l2)) $;

def decodeBinopReg (rex ast b l .v .d .opc .reg .r: nat): wff =
$ E. v E. d E. opc E. reg E. r (
    splitBits ((1 <> v) : (1 <> d) : (1 <> 0) : (3 <> opc) : (2 <> 0) : 0) b /\
    readModRM rex reg r l /\
    ast = xastBinop opc (opSizeW rex v)
      (if (true d) (R_rm reg r) (Rm_r r reg))) $;

def decodeBinopRAX (rex ast b l .v .opc .imm .sz: nat): wff =
$ E. v E. opc E. imm (
    splitBits ((1 <> v) : (2 <> 2) : (3 <> opc) : (2 <> 0) : 0) b /\
    readImm (opSizeW rex v) imm l /\
    ast = xastBinop opc (opSizeW rex v) (Rm_i (RM_reg RAX) imm)) $;

def decodeBinopImm (rex ast b l .v .opc .r .l1 .imm .l2 .sz: nat): wff =
$ E. v E. opc E. r E. l1 E. imm E. l2 (l = l1 ++ l2 /\
    splitBits ((1 <> v) : (3 <> 0) : (4 <> 8) : 0) b /\
    readOpcodeModRM rex opc r l1 /\
    readImm (opSizeW rex v) imm l2 /\
    ast = xastBinop opc (opSizeW rex v) (Rm_i r imm)) $;

def decodeBinopImm8 (rex ast b l .opc .r .l1 .imm .l2: nat): wff =
$ E. opc E. r E. l1 E. l2 (l = l1 ++ l2 /\ b = ch x8 x3 /\
    readOpcodeModRM rex opc r l1 /\
    readImmN 8 imm l2 /\
    ast = xastBinop opc (opSizeW rex 1) (Rm_i r imm)) $;

def decodeBinopHi (rex ast b l .v .opc .r .imm .l1 .l2: nat): wff =
$ E. v E. opc E. r E. l1 E. l2 (l = l1 ++ l2 /\
    splitBits ((1 <> v) : (3 <> 0) : (4 <> 12) : 0) b /\
    readOpcodeModRM rex opc r l1 /\ opc != 6 /\
    readImmN 8 imm l2 /\
    ast = xastBinop (rex_reg opc 1)
      (opSizeW rex v) (Rm_i r imm)) $;

def decodeBinopHiReg (rex ast b l .v .x .opc .r: nat): wff =
$ E. v E. x E. opc E. r (
    splitBits ((1 <> v) : (1 <> x) : (2 <> 0) : (4 <> 13) : 0) b /\
    readOpcodeModRM rex opc r l /\ opc != 6 /\
    ast = xastBinop (rex_reg opc 1) (opSizeW rex v)
      (if (true x) (Rm_r r RCX) (Rm_i r 1))) $;

def decodeBinop (rex ast b l: nat): wff =
$ decodeBinopReg rex ast b l \/ decodeBinopRAX rex ast b l \/
  decodeBinopImm rex ast b l \/ decodeBinopImm8 rex ast b l \/
  decodeBinopHi rex ast b l \/ decodeBinopHiReg rex ast b l $;

def decodeMovSX (rex ast b l .reg .r: nat): wff =
$ E. reg E. r (l = ch x6 x3 /\
    readModRM rex reg r l /\ ast = xastMovSX wSz32 (R_rm reg r) wSz64) $;

def decodeMovReg (rex ast b l .v .d .reg .r: nat): wff =
$ E. v E. d E. reg E. r (l = ch x6 x3 /\
    splitBits ((1 <> v) : (1 <> d) : (2 <> 2) : (4 <> 8) : 0) b /\
    readModRM rex reg r l /\
    ast = xastMov (opSizeW rex v) (if (true d) (R_rm reg r) (Rm_r r reg))) $;

def decodeMov64 (rex ast b l .r .v .imm: nat): wff =
$ E. r E. v E. imm (l = ch x6 x3 /\
    splitBits ((3 <> r) : (1 <> v) : (4 <> 11) : 0) b /\
    readFullImm (opSizeW rex v) imm l /\
    ast = xastMov (opSizeW rex v) (Rm_i (RM_reg (rex_reg r (REX_B rex))) imm)) $;

def decodeMovImm (rex ast b l .v .opc .r .imm .l1 .l2: nat): wff =
$ E. v E. opc E. r E. imm E. l1 E. l2 (l = l1 ++ l2 /\
    splitBits ((1 <> v) : (3 <> 3) : (4 <> 12) : 0) b /\
    readOpcodeModRM rex opc r l1 /\
    readImm (opSizeW rex v) imm l2 /\
    ast = xastMov (opSizeW rex v) (Rm_i r imm)) $;

def decodeMov (rex ast b l: nat): wff =
$ decodeMovSX rex ast b l \/ decodeMovReg rex ast b l \/
  decodeMov64 rex ast b l \/ decodeMovImm rex ast b l $;

def decodePush (rex ast b l .x .imm .r: nat): wff =
$ (E. x E. imm (
    splitBits ((1 <> 0) : (1 <> x) : (2 <> 2) : (4 <> 6) : 0) b /\
    readImmN (if (true x) 8 32) imm l /\
    ast = xastPush (immRM_imm imm))) \/
  (l = 0 /\ E. r (
    splitBits ((3 <> r) : (1 <> 0) : (4 <> 5) : 0) b /\
    ast = xastPush (immRM_rm (rex_reg (REX_B rex) r)))) $;

def decodePop (rex ast b l .v .reg .r: nat): wff =
$ (l = 0 /\ E. r (
    splitBits ((3 <> r) : (1 <> 1) : (4 <> 5) : 0) b /\
    ast = xastPop (RM_reg (rex_reg (REX_B rex) r)))) \/
  (E. r (b = ch x8 xf /\ readOpcodeModRM rex 0 r l /\ ast = xastPop r)) $;

def decodeJump (rex ast b l .x .imm: nat): wff =
$ E. x E. imm (
    splitBits ((1 <> 1) : (1 <> x) : (2 <> 2) : (4 <> 14) : 0) b /\
    readImmN (if (true x) 8 32) imm l /\
    ast = xastJCC condAlways imm) $;

def decodeJCC8 (rex ast b l .c .imm: nat): wff =
$ E. c E. imm (splitBits ((4 <> c) : (4 <> 7) : 0) b /\
    readImmN 8 imm l /\ ast = xastJCC (suc c) imm) $;

def decodeCall (rex ast b l .imm: nat): wff =
$ E. imm (b = ch xe x8 /\
    readImmN 32 imm l /\ ast = xastCall (immRM_imm imm)) $;

def decodeRet (rex ast b l .v .imm: nat): wff =
$ E. v E. imm (
    splitBits ((1 <> v) : (3 <> 1) : (4 <> 12) : 0) b /\
    ifp (true v) (imm = 0 /\ l = 0) (readImmN 16 imm l) /\
    ast = xastRet imm) $;

def decodeLeave (rex ast b l: nat): wff =
$ b = ch xc x9 /\ l = 0 /\ ast = xastLeave $;

def decodeFlow (rex ast b l: nat): wff =
$ decodeJump rex ast b l \/ decodeJCC8 rex ast b l \/
  decodeCall rex ast b l \/ decodeRet rex ast b l \/ decodeLeave rex ast b l $;

def decodeXchg (rex ast b l .v .reg .r: nat): wff =
$ (E. v E. reg E. r (
    splitBits ((1 <> v) : (3 <> 3) : (4 <> 8) : 0) b /\
    readModRM rex reg r l /\
    ast = xastXchg (opSizeW rex v) r reg)) \/
  (l = 0 /\ E. r (
    splitBits ((3 <> r) : (1 <> 0) : (4 <> 9) : 0) b /\
    ast = xastXchg (opSizeW rex 1) (RM_reg RAX) (rex_reg (REX_B rex) r))) $;

def decodeLea (rex ast b l .reg .r: nat): wff =
$ E. reg E. r (b = ch x8 xd /\
    readModRM rex reg r l /\ RM_isMem r /\
    ast = xastLea (opSize T. (REX_W rex) 1) (R_rm reg r)) $;

def decodeTest (rex ast b l .v .reg .r: nat): wff =
$ E. v E. reg E. r (
    splitBits ((1 <> v) : (3 <> 2) : (4 <> 8) : 0) b /\
    readModRM rex reg r l /\
    ast = xastBinop binopTst (opSizeW rex 1) (Rm_r r reg)) $;

def decodeTestRAX (rex ast b l .v .imm .sz: nat): wff =
$ E. v E. imm E. sz (
    splitBits ((1 <> v) : (3 <> 4) : (4 <> 10) : 0) b /\
    sz = opSize T. (REX_W rex) v /\
    readImm sz imm l /\
    ast = xastBinop binopTst sz (Rm_i (RM_reg RAX) imm)) $;

def decodeFlag (rex ast b l: nat): wff =
$ (b = ch xf x5 /\ l = 0 /\ ast = xastCMC) \/
  (b = ch xf x8 /\ l = 0 /\ ast = xastCLC) \/
  (b = ch xf x9 /\ l = 0 /\ ast = xastSTC) $;

def decodeMisc (rex ast b l: nat): wff =
$ decodeXchg rex ast b l \/ decodeLea rex ast b l \/
  decodeTest rex ast b l \/ decodeTestRAX rex ast b l \/
  decodeFlag rex ast b l $;

def decodeHiAux (v sz r hi n ast l .imm: nat): wff =
$ ifp (true hi)
    (l = 0 /\ (
      n = 0 /\ ast = xastUnop unopInc sz r \/
      n = 1 /\ ast = xastUnop unopDec sz r \/
      true v /\ (
        n = 2 /\ ast = xastCall (immRM_rm r) \/
        n = 4 /\ ast = xastJump r \/
        n = 6 /\ ast = xastPush (immRM_rm r))))
    (n = 0 /\ E. imm (readImm sz imm l /\
        ast = xastBinop binopTst sz (Rm_i r imm)) \/
      (l = 0 /\ (
        n = 2 /\ ast = xastUnop unopNot sz r \/
        n = 3 /\ ast = xastUnop unopNeg sz r \/
        n = 4 /\ ast = xastMul sz r \/
        n = 6 /\ ast = xastDiv sz r))) $;

def decodeHi (rex ast b l .v .x .opc .r .l1 .l2: nat): wff =
$ E. v E. x E. opc E. r E. l1 E. l2 (l = l1 ++ l2 /\
    splitBits ((1 <> v) : (2 <> 3) : (1 <> x) : (4 <> 15) : 0) b /\
    readOpcodeModRM rex opc r l1 /\
    decodeHiAux v (opSizeW rex v) r x opc ast l2) $;

def decodeAux (rex ast b l: nat): wff =
$ decodeBinop rex ast b l \/ decodeMov rex ast b l \/
  decodePush rex ast b l \/ decodePop rex ast b l \/
  decodeFlow rex ast b l \/ decodeMisc rex ast b l \/
  decodeHi rex ast b l $;

def decode (ast l .rex .l1 .opc .l2: nat): wff =
$ E. rex E. l1 E. opc E. l2 (l = l1 ++ opc : l2 /\
    readPrefixes rex l1 /\ decodeAux rex ast opc l2) $;

----------------------------------------
-- Dynamic semantics
----------------------------------------

def Flags: nat = $ u64 $;
def CF (flags: nat): wff = $ 0 e. flags $;
def ZF (flags: nat): wff = $ 6 e. flags $;
def SF (flags: nat): wff = $ 7 e. flags $;
def OF (flags: nat): wff = $ 11 e. flags $;

def setCF (f: nat) (p: wff): nat = $ bitsUpdate 0 1 (nat p) f $;
def setZF (f: nat) (p: wff): nat = $ bitsUpdate 6 1 (nat p) f $;
def setSF (f: nat) (p: wff): nat = $ bitsUpdate 7 1 (nat p) f $;
def setOF (f: nat) (p: wff): nat = $ bitsUpdate 11 1 (nat p) f $;

def unpackFlags (f c z s o: nat): wff =
$ c = nat (CF f) /\ z = nat (ZF f) /\ s = nat (SF f) /\ o = nat (OF f) $;

def readBCond (f c: nat): wff;
theorem readBCondO (f: nat): $ readBCond f bcondO <-> OF f $;
theorem readBCondB (f: nat): $ readBCond f bcondB <-> CF f $;
theorem readBCondE (f: nat): $ readBCond f bcondE <-> ZF f $;
theorem readBCondNA (f: nat): $ readBCond f bcondNA <-> CF f \/ ZF f $;
theorem readBCondS (f: nat): $ readBCond f bcondS <-> SF f $;
theorem readBCondL (f: nat): $ readBCond f bcondL <-> ~(SF f <-> OF f) $;
theorem readBCondNG (f: nat): $ readBCond f bcondNG <-> ZF f \/ ~(SF f <-> OF f) $;

def readCondF (f c: nat): wff;
theorem readCondFAlways (f: nat): $ readCondF f condAlways $;
theorem readCondFPos (f c: nat): $ readCondF f (condPos c) <-> readBCond f c $;
theorem readCondFNeg (f c: nat): $ readCondF f (condNeg c) <-> ~readBCond f c $;

def Prot: set = $ Bits 3 $;
def PROT_READ: nat = $ 1 $;
def PROT_WRITE: nat = $ 2 $;
def PROT_EXEC: nat = $ 4 $;

def Memory: set = $ Arrow u64 (Xp Prot u8) $;

def Config: set = $ Xp u64 (Xp (Arrow Regs u64) (Xp Flags Memory)) $;
theorem finiteConfig: $ finite Config $;

def readRIP (k: nat): nat = $ fst k $;
def readReg (k r: nat): nat = $ pi21 k @ r $;
def readFlags (k: nat): nat = $ pi221 k $;
def readCond (k c: nat): wff = $ readCondF (readFlags k) c $;

def readMemory1 (ps m a b .prot: nat): wff =
$ E. prot (m @ a = prot <> b /\ ps C_ prot) $;
theorem readMemory1T (ps m a b: nat):
  $ ps e. Prot /\ m e. Memory /\ a e. u64 /\ readMemory1 ps m a b -> b e. u8 $;

def readMemory (ps m a l: nat): wff;
theorem readMemory0 (ps m a: nat): $ readMemory ps m a 0 $;
theorem readMemoryS (ps m a b l: nat):
  $ readMemory ps m a (b : l) <->
    readMemory1 ps m a b /\ readMemory ps m (a +_64 1) l $;
theorem readMemoryT (ps m a l: nat):
  $ ps e. Prot /\ m e. Memory /\ a e. u64 /\
    readMemory ps m a l -> l e. List u8 $;

def readMem (k a l: nat): wff = $ readMemory PROT_READ (pi222 k) a l $;
theorem readMemT (k a l: nat):
  $ k e. Config /\ a e. u64 /\ readMem k a l -> l e. List u8 $;

def readMemX (k a l: nat): wff =
$ readMemory (PROT_READ + PROT_EXEC) (pi222 k) a l $;
theorem readMemXT (k a l: nat):
  $ k e. Config /\ a e. u64 /\ readMemX k a l -> l e. List u8 $;

def writeMemory1 (m a b m2 .prot .b2: nat): wff =
$ E. prot E. b2 (PROT_READ + PROT_WRITE C_ prot /\
  m @ a = prot <> b2 /\ m2 = write m a (prot <> b)) $;

def writeMemory (m a l m2: nat): wff;
theorem writeMemory0 (m a l m2: nat): $ writeMemory m a l m2 <-> m2 = m $;
theorem writeMemoryS {m2: nat} (m a b l m3: nat):
  $ writeMemory m a (b : l) m3 <->
    E. m2 (writeMemory1 m a b m2 /\ writeMemory m2 (a +_64 1) l m3) $;
theorem writeMemoryT (m a l m2: nat):
  $ m e. Memory /\ a e. u64 /\ l e. List u8 /\
    writeMemory m a l m2 -> m2 e. Memory $;

def writeMem (k a l k2 .ip .r .f .m .m2: nat): wff =
$ E. ip E. r E. f E. m E. m2 (writeMemory m a l m2 /\
  k = ip <> r <> f <> m /\ k2 = ip <> r <> f <> m2) $;
theorem writeMemT (k a l k2: nat):
  $ k e. Config /\ a e. u64 /\ l e. List u8 /\
    writeMem k a l k2 -> k2 e. Config $;

def mapMemory1 (prot m a b m2: nat): wff = $ m2 = write m a (prot <> b) $;

def mapMemory (prot m a l m2: nat): wff;
theorem mapMemory0 (prot m a l m2: nat): $ mapMemory prot m a l m2 <-> m2 = m $;
theorem mapMemoryS {m2: nat} (prot m a b l m3: nat):
  $ mapMemory prot m a (b : l) m3 <->
    E. m2 (mapMemory1 prot m a b m2 /\ mapMemory prot m2 (a +_64 1) l m3) $;
theorem mapMemoryT (prot m a l m2: nat):
  $ prot e. Prot /\ m e. Memory /\ a e. u64 /\ l e. List u8 /\
    mapMemory prot m a l m2 -> m2 e. Memory $;

def mapMem (prot k a l k2 .ip .r .f .m .m2: nat): wff =
$ E. ip E. r E. f E. m E. m2 (mapMemory prot m a l m2 /\
  k = ip <> r <> f <> m /\ k2 = ip <> r <> f <> m2) $;
theorem mapMemT (prot k a l k2: nat):
  $ prot e. Prot /\ k e. Config /\ a e. u64 /\ l e. List u8 /\
    mapMem prot k a l k2 -> k2 e. Config $;

def EA: set = $ Sum Regs (Xp Bool u64) $;
def EA_i (q: nat): nat = $ b1 (0 <> q) $;
def EA_r (r: nat): nat = $ b0 r $;
def EA_m (q: nat): nat = $ b1 (1 <> q) $;
theorem EA_iT (q: nat): $ q e. u64 -> EA_i q e. EA $;
theorem EA_rT (r: nat): $ r e. Regs -> EA_r r e. EA $;
theorem EA_mT (q: nat): $ q e. u64 -> EA_m q e. EA $;

def EA_addr (ea: nat): nat;
theorem EA_addrm (a: nat): $ EA_addr (EA_m a) = a $;
theorem EA_addr0 {a: nat} (ea: nat): $ ~(E. a ea = EA_m a) -> EA_addr ea = 0 $;
theorem EA_addrT (ea: nat): $ ea e. EA -> EA_addr ea e. u64 $;

def readIndex (k si: nat): nat;
theorem readIndex0 (k: nat): $ readIndex k 0 = 0 $;
theorem readIndexS (k sc r: nat):
  $ readIndex k (suc (sc <> r)) = chop 64 (shl (readReg k r) sc) $;
theorem readIndexT (k si: nat):
  $ k e. Config /\ si e. Option ScaleIndex -> readIndex k si e. u64 $;

def readBase (k b: nat): nat;
theorem readBase0 (k: nat): $ readBase k 0 = 0 $;
theorem readBaseRIP (k: nat): $ readBase k base_RIP = readRIP k $;
theorem readBaseReg (k r: nat): $ readBase k (base_reg r) = readReg k r $;
theorem readBaseT (k b: nat):
  $ k e. Config /\ b e. Base -> readBase k b e. u64 $;

def RM_EA (k rm: nat): nat;
theorem RM_EAreg (k r: nat): $ RM_EA k (RM_reg r) = EA_r r $;
theorem RM_EAmem (k si base q: nat): $ RM_EA k (RM_mem si base q) =
  EA_m (readIndex k si +_64 readBase k base +_64 q) $;
theorem RM_EAT (k rm: nat):
  $ k e. Config /\ rm e. RM -> RM_EA k rm e. EA $;

def destEA (k ds: nat): nat;
theorem destEAm_i (k v q: nat): $ destEA k (Rm_i v q) = RM_EA k v $;
theorem destEAm_r (k v r: nat): $ destEA k (Rm_r v r) = RM_EA k v $;
theorem destEA_rm (k r rm: nat): $ destEA k (R_rm r rm) = EA_r r $;
theorem destEAT (k ds: nat):
  $ k e. Config /\ ds e. DestSrc -> destEA k ds e. EA $;

def srcEA (k ds: nat): nat;
theorem srcEAm_i (k v q: nat): $ srcEA k (Rm_i v q) = EA_i q $;
theorem srcEAm_r (k v r: nat): $ srcEA k (Rm_r v r) = EA_r r $;
theorem srcEA_rm (k r rm: nat): $ srcEA k (R_rm r rm) = RM_EA k rm $;
theorem srcEAT (k ds: nat):
  $ k e. Config /\ ds e. DestSrc -> srcEA k ds e. EA $;

def immRM_EA (k irm: nat): nat;
theorem immRM_EArm (k rm: nat): $ immRM_EA k (immRM_rm rm) = RM_EA k rm $;
theorem immRM_EAimm (k q: nat): $ immRM_EA k (immRM_imm q) = EA_i q $;
theorem immRM_EAT (k irm: nat):
  $ k e. Config /\ irm e. ImmRM -> immRM_EA k irm e. EA $;

def readRegSz (k sz r: nat): nat =
$ chop (wsizeBits sz)
    (if (sz = wSz8 F. /\ 2 e. r) (shr (readReg k (r - 4)) 8) (readReg k r)) $;
theorem readRegSzT (k sz r: nat):
  $ k e. Config /\ sz e. WSize /\ r e. Regs ->
    readRegSz k sz r e. Bits (wsizeBits sz) $;

def readEA (k sz ea v: nat): wff;
theorem readEA_i (k q sz v: nat):
  $ readEA k sz (EA_i q) v <-> v = chop (wsizeBits sz) q $;
theorem readEA_r (k sz r v: nat):
  $ readEA k sz (EA_r r) v <-> v = readRegSz k sz r $;
theorem readEA_m {l: nat} (k a sz v: nat): $ readEA k sz (EA_m a) v <->
  v e. Bits (wsizeBits sz) /\ readMem k a (toBytes (wsizeBits sz) v) $;
theorem readEAT (k sz ea v: nat): $ k e. Config /\ ea e. EA /\ sz e. WSize /\
  readEA k sz ea v -> v e. Bits (wsizeBits sz) $;

def readEA64 (k ea v: nat): wff = $ readEA k ea wSz64 v $;

def setReg (k r q: nat): nat;
theorem setRegVal (ip rs f m r q: nat):
  $ setReg (ip <> rs <> f <> m) r q = ip <> write rs r q <> f <> m $;
theorem setRegT (k r q: nat):
  $ k e. Config /\ r e. Regs /\ q e. u64 -> setReg k r q e. Config $;

def writeReg (k sz r v: nat): nat;
theorem writeReg8 (k r v: nat) (have_rex: wff):
  $ writeReg k (wSz8 have_rex) r v = if (~have_rex /\ 2 e. r)
      (setReg k (r - 4) (bitsUpdate 8 8 v (readReg k (r - 4))))
      (setReg k r (bitsUpdate 0 8 v (readReg k r))) $;
theorem writeReg16 (k r v: nat):
  $ writeReg k wSz16 r v = setReg k r (bitsUpdate 0 16 v (readReg k r)) $;
theorem writeReg32 (k r v: nat): $ writeReg k wSz32 r v = setReg k r v $;
theorem writeReg64 (k r v: nat): $ writeReg k wSz64 r v = setReg k r v $;
theorem writeRegT (k sz r v: nat): $ k e. Config /\ sz e. WSize /\
  r e. Regs /\ v e. Bits (wsizeBits sz) -> writeReg k sz r v e. Config $;

def writeEASz (k sz ea v k2: nat): wff;
theorem writeEASz_i (k sz i v k2: nat): $ ~ writeEASz k sz (EA_i i) v k2 $;
theorem writeEASz_r (k sz r v k2: nat):
  $ writeEASz k sz (EA_r r) v k2 <-> k2 = writeReg k sz r v $;
theorem writeEASz_m {l: nat} (k sz a v k2: nat):
  $ writeEASz k sz (EA_m a) v k2 <->
    writeMem k a (toBytes (wsizeBits sz) v) k2 $;
theorem writeEASzT (k sz ea v k2: nat):
  $ k e. Config /\ sz e. WSize /\ ea e. EA /\ v e. Bits (wsizeBits sz) /\
    writeEASz k sz ea v k2 -> k2 e. Config $;

def writeEA (k sz ea v k2: nat): wff =
$ writeEASz k sz ea (chop (wsizeBits sz) v) k2 $;
theorem writeEAT (k sz ea v k2: nat):
  $ k e. Config /\ sz e. WSize /\ ea e. EA /\
    writeEA k sz ea v k2 -> k2 e. Config $;

def writeRIP (k q: nat): nat;
theorem writeRIPVal (ip rs f m q: nat):
  $ writeRIP (ip <> rs <> f <> m) q = q <> rs <> f <> m $;
theorem writeRIPT (k q: nat):
  $ k e. Config /\ q e. u64 -> writeRIP k q e. Config $;

def EA_callDest (k ea v: nat): wff;
theorem EA_callDest_i (k i v: nat):
  $ EA_callDest k (EA_i i) v <-> v = readRIP k +_64 i $;
theorem EA_callDest_r (k r v: nat):
  $ EA_callDest k (EA_r r) v <-> v = readReg k r $;
theorem EA_callDest_m (k a v: nat):
  $ EA_callDest k (EA_m a) v <-> v e. u64 /\ readMem k a (u64Bytes v) $;
theorem EA_callDestT (k ea v: nat):
  $ k e. Config /\ ea e. EA /\ EA_callDest k ea v -> v e. u64 $;

def EA_jump (k ea k2 .v: nat): wff =
$ E. v (EA_callDest k ea v /\ k2 = writeRIP k v) $;
theorem EA_jumpT (k ea k2: nat):
  $ k e. Config /\ ea e. EA /\ EA_jump k ea k2 -> k2 e. Config $;

def readUnpackFlags (k c z s o: nat): wff =
$ unpackFlags (readFlags k) c z s o $;
theorem readUnpackFlagsT (k c z s o: nat):
$ k e. Config /\ readUnpackFlags k c z s o ->
  bool c /\ bool z /\ bool s /\ bool o $;

def writeFlags (k f: nat): nat;
theorem writeFlagsVal (ip rs f m f2: nat):
  $ writeFlags (ip <> rs <> f <> m) f2 = ip <> rs <> f2 <> m $;

def setCZSO (k: nat) (c z s o : wff): nat;
theorem setCZSOVal (ip rs f m : nat) (c z s o: wff):
  $ setCZSO (ip <> rs <> f <> m) c z s o =
    ip <> rs <> setOF (setSF (setZF (setCF f c) z) s) o <> m $;

def MSB (sz w: nat): wff = $ bitsMSB (wsizeBits sz) w $;

def writeResultFlags (k sz w : nat) (c o : wff): nat =
$ setCZSO k c (chop (wsizeBits sz) w = 0) (MSB sz w) o $;

def writeSFZF (k sz w : nat): nat =
$ writeResultFlags k sz w (CF (readFlags k)) (OF (readFlags k)) $;

def eraseFlags (k k2 .ip .rs .f .f2 .m: nat): wff =
$ E. ip E. rs E. f E. f2 E. m (f2 e. Flags /\
    k = ip <> rs <> f <> m /\ k2 = ip <> rs <> f2 <> m) $;
theorem eraseFlagsT (k k2: nat):
  $ k e. Config /\ eraseFlags k k2 -> k2 e. Config $;

def addCarry (sz a b w c o: nat): wff =
$ w = a +_64 b /\ c = nat (2 ^ wsizeBits sz <= a + b) /\
  o = nat (MSB sz a <-> MSB sz b /\ ~(MSB sz (a +_64 b) <-> MSB sz a)) $;
theorem addCarryT (sz a b w c o: nat):
  $ sz e. WSize /\ a e. u64 /\ b e. u64 /\ addCarry sz a b w c o ->
    w e. u64 /\ bool c /\ bool o $;

def subBorrow (sz a b w c o: nat): wff =
$ w = a -_64 b /\ c = nat (a < b) /\
  o = nat (~(MSB sz a <-> MSB sz b) /\ ~(MSB sz (a -_64 b) <-> MSB sz a)) $;
theorem subBorrowT (sz a b w c o: nat):
  $ sz e. WSize /\ a e. u64 /\ b e. u64 /\ subBorrow sz a b w c o ->
    w e. u64 /\ bool c /\ bool o $;

def writeCFOFResult (k sz ea w : nat) (c o : wff) (k2: nat): wff =
$ writeEA (writeResultFlags k sz w c o) sz ea w k2 $;

def maskShift (sz w: nat): nat = $ chop (if (wsizeBits sz = 64) 6 5) w $;

def writeBinop (k op sz ea a b k2: nat): wff;
theorem writeBinopAdd {w c o: nat} (k sz ea a b k2: nat):
  $ writeBinop k binopAdd sz ea a b k2 <-> E. w E. c E. o (
      addCarry sz a b w c o /\
      writeCFOFResult k sz ea w (true c) (true o) k2) $;
theorem writeBinopSub {w c o: nat} (k sz ea a b k2: nat):
  $ writeBinop k binopSub sz ea a b k2 <-> E. w E. c E. o (
      subBorrow sz a b w c o /\
      writeCFOFResult k sz ea w (true c) (true o) k2) $;
theorem writeBinopCmp {w c o: nat} (k sz ea a b k2: nat):
  $ writeBinop k binopCmp sz ea a b k2 <-> E. w E. c E. o (
      subBorrow sz a b w c o /\
      k2 = writeResultFlags k sz w (true c) (true o)) $;
theorem writeBinopTst (k sz ea a b k2: nat):
  $ writeBinop k binopTst sz ea a b k2 <->
    k2 = writeResultFlags k sz (bitAnd a b) F. F. $;
theorem writeBinopAnd (k sz ea a b k2: nat):
  $ writeBinop k binopAnd sz ea a b k2 <->
    writeCFOFResult k sz ea (bitAnd a b) F. F. k2 $;
theorem writeBinopXor (k sz ea a b k2: nat):
  $ writeBinop k binopXor sz ea a b k2 <->
    writeCFOFResult k sz ea (bitXor a b) F. F. k2 $;
theorem writeBinopOr (k sz ea a b k2: nat):
  $ writeBinop k binopOr sz ea a b k2 <->
    writeCFOFResult k sz ea (bitOr a b) F. F. k2 $;
theorem writeBinopShl {k2: nat} (k sz ea a b k3: nat):
  $ writeBinop k binopShl sz ea a b k3 <->
    E. k2 (eraseFlags k k2 /\ writeEA k2 sz ea (shl a (maskShift sz b)) k3) $;
theorem writeBinopShr {k2: nat} (k sz ea a b k3: nat):
  $ writeBinop k binopShr sz ea a b k3 <->
    E. k2 (eraseFlags k k2 /\ writeEA k2 sz ea (shr a (maskShift sz b)) k3) $;
theorem writeBinopSar {k2: nat} (k sz ea a b k3: nat):
  $ writeBinop k binopSar sz ea a b k3 <->
    E. k2 (eraseFlags k k2 /\
      writeEA k2 sz ea (bitsSar (wsizeBits sz) a (maskShift sz b)) k3) $;
theorem writeBinopAdc (k sz ea a b k2: nat): $ ~ writeBinop k binopAdc sz ea a b k2 $;
theorem writeBinopSbb (k sz ea a b k2: nat): $ ~ writeBinop k binopSbb sz ea a b k2 $;
theorem writeBinopRol (k sz ea a b k2: nat): $ ~ writeBinop k binopRol sz ea a b k2 $;
theorem writeBinopRor (k sz ea a b k2: nat): $ ~ writeBinop k binopRor sz ea a b k2 $;
theorem writeBinopRcl (k sz ea a b k2: nat): $ ~ writeBinop k binopRcl sz ea a b k2 $;
theorem writeBinopRcr (k sz ea a b k2: nat): $ ~ writeBinop k binopRcr sz ea a b k2 $;
theorem writeBinopT (k op sz ea a b k2: nat):
  $ k e. Config /\ sz e. WSize /\ a e. u64 /\ b e. u64 /\
    ea e. EA /\ writeBinop k op sz ea a b k2 -> op e. Binop /\ k2 e. Config $;

def writeUnop (k op sz ea a k2: nat): wff;
theorem writeUnopInc {w c o: nat} (k sz ea a k2: nat):
  $ writeUnop k unopInc sz ea a k2 <-> E. w E. c E. o (
      addCarry sz a 1 w c o /\
      writeCFOFResult k sz ea w (CF (readFlags k)) (true o) k2) $;
theorem writeUnopDec {w c o: nat} (k sz ea a k2: nat):
  $ writeUnop k unopDec sz ea a k2 <-> E. w E. c E. o (
      subBorrow sz a 1 w c o /\
      writeCFOFResult k sz ea w (CF (readFlags k)) (true o) k2) $;
theorem writeUnopNot (k sz ea a k2: nat):
  $ writeUnop k unopNot sz ea a k2 <->
    writeEA k sz ea (bitsNot (wsizeBits sz) a) k2 $;
theorem writeUnopNeg {b: nat} (k sz ea a k2: nat):
  $ writeUnop k unopNeg sz ea a k2 <->
    [ bitsNeg (wsizeBits sz) a / b ]
    writeCFOFResult k sz ea b (a != 0) (MSB sz a /\ ~MSB sz b) k2 $;

def popAux (k q k2: nat): wff =
$ readEA64 k (EA_m (readReg k RSP)) q /\
  k2 = setReg k RSP (readReg k RSP +_64 8) $;
theorem popAuxT (k q k2: nat):
  $ k e. Config /\ popAux k q k2 -> q e. u64 /\ k2 e. Config $;

def popWrite (k rm k3 .q .k2: nat): wff =
$ E. k2 E. q (popAux k q k2 /\ writeEA k2 (RM_EA k2 rm) wSz64 q k3) $;
theorem popWriteT (k rm k2: nat):
  $ k e. Config /\ rm e. RM /\ popWrite k rm k2 -> k2 e. Config $;

def popRIP (k k3 .q .k2: nat): wff =
$ E. k2 E. q (popAux k q k2 /\ k3 = writeRIP k2 q) $;
theorem popRIPT (k rm k2: nat):
  $ k e. Config /\ popRIP k k2 -> k2 e. Config $;

def pushAux (k q k2 .sp: nat): wff =
$ E. sp (sp = readReg k RSP -_64 8 /\
    writeEA (setReg k RSP sp) (EA_m sp) wSz64 q k2) $;
theorem pushAuxT (k q k2: nat):
  $ k e. Config /\ q e. u64 /\ pushAux k q k2 -> k2 e. Config $;

def pushImmRM (k irm k2 .q: nat): wff =
$ E. q (readEA64 k (immRM_EA k irm) q /\ pushAux k q k2) $;
theorem pushImmRMT (k irm k2: nat):
  $ k e. Config /\ irm e. ImmRM /\ pushImmRM k irm k2 -> k2 e. Config $;

def pushRIP (k k2 .q: nat): wff = $ pushAux k (readRIP k) k2 $;
theorem pushRIPT (k irm k2: nat):
  $ k e. Config /\ pushRIP k k2 -> k2 e. Config $;

def divModSz (sz a b d m: nat): wff =
$ b != 0 /\ d e. Bits (wsizeBits sz) /\ d = a // b /\ m = a % b $;

def execXAST (k ast k2: nat): wff;
theorem execXASTUnop {q: nat} (k op sz rm k2: nat):
  $ execXAST k (xastUnop op sz rm) k2 <-> E. q (
      readEA k sz (RM_EA k rm) q /\
      writeUnop k op sz (RM_EA k rm) q k2) $;
theorem execXASTBinop {d s: nat} (k op sz ds k2: nat):
  $ execXAST k (xastBinop op sz ds) k2 <-> E. d E. s (
      readEA k sz (destEA k ds) d /\
      readEA k sz (srcEA k ds) s /\
      writeBinop k op sz (destEA k ds) d s k2) $;
theorem execXASTMul {n src res lo hi: nat} (k sz rm k2: nat):
  $ execXAST k (xastMul sz rm) k2 <-> E. n E. src E. res (
      n = wsizeBits sz /\
      readEA k sz (RM_EA k rm) src /\
      res = readRegSz k sz RAX * src /\
      ifp (n = 8)
        (k2 = writeReg k wSz16 RAX res)
        (E. lo E. hi (
          splitBits ((n <> lo) : (n <> hi) : 0) res /\
          k2 = writeReg (writeReg k sz RAX lo) sz RDX hi))) $;
theorem execXASTDiv {n a b d m: nat} (k sz rm k2: nat):
  $ execXAST k (xastDiv sz rm) k2 <-> E. n E. a E. b E. d E. m (
      n = wsizeBits sz /\
      readEA k sz (RM_EA k rm) b /\
      divModSz sz a b d m /\
      ifp (n = 8)
        (a = readRegSz k wSz16 RAX /\
          eraseFlags (writeReg k sz RAX (shl m 8 + d)) k2)
        (splitBits ((n <> readRegSz k sz RAX) :
                    (n <> readRegSz k sz RDX) : 0) a /\
          eraseFlags (writeReg (writeReg k sz RAX d) sz RDX m) k2)) $;
theorem execXASTLea (k sz ds k2: nat):
  $ execXAST k (xastLea sz ds) k2 <->
    writeEA k sz (destEA k ds) (EA_addr (srcEA k ds)) k2 $;
theorem execXASTMovSX {src: nat} (k sz ds sz2 k2: nat):
  $ execXAST k (xastMovSX sz ds sz2) k2 <-> E. src (
      readEA k sz (srcEA k ds) src /\
      writeEA k sz2 (destEA k ds)
        (sExt (wsizeBits sz) (wsizeBits sz2) src) k2) $;
theorem execXASTMovZX {src: nat} (k sz ds sz2 k2: nat):
  $ execXAST k (xastMovZX sz ds sz2) k2 <-> E. src (
      readEA k sz (srcEA k ds) src /\
      writeEA k sz2 (destEA k ds) src k2) $;
theorem execXASTXchg {v: nat} (k sz rm r k2: nat):
  $ execXAST k (xastXchg sz rm r) k2 <-> E. v (
      readEA k sz (RM_EA k rm) v /\
      writeEA (writeReg k sz r v) sz (RM_EA k rm) (readRegSz k sz r) k2) $;
theorem execXASTCmpXchg {src acc dst k2: nat} (k sz rm r k3: nat):
  $ execXAST k (xastCmpXchg sz rm r) k3 <-> E. src E. acc E. dst E. k2 (
      acc = readRegSz k sz RAX /\
      readEA k sz (RM_EA k rm) dst /\
      writeBinop k binopCmp sz (EA_r r) acc dst k2 /\
      ifp (acc = dst)
        (writeEA k2 sz (RM_EA k rm) (readRegSz k sz r) k3)
        (writeEA k2 sz (EA_r RAX) dst k3)) $;
theorem execXASTXadd {v: nat} (k sz rm r k2: nat):
  $ execXAST k (xastXadd sz rm r) k2 <-> E. v (
      readEA k sz (RM_EA k rm) v /\
      writeBinop k binopAdd sz (RM_EA k rm) (readRegSz k sz r) v k2) $;
theorem execXASTCMov {v: nat} (k c sz ds k2: nat):
  $ execXAST k (xastCMov c sz ds) k2 <->
      ifp (readCond k c)
        (E. v (readEA k sz (srcEA k ds) v /\ writeEA k sz (destEA k ds) v k2))
        (k2 = k) $;
theorem execXASTSetCC {v: nat} (k c b rm k2: nat):
  $ execXAST k (xastSetCC c b rm) k2 <->
    writeEA k (wSz8 (true b)) (RM_EA k rm) (nat (readCond k c)) k2 $;
theorem execXASTJump {v: nat} (k rm k2: nat):
  $ execXAST k (xastJump rm) k2 <-> E. v (
      readEA k wSz64 (RM_EA k rm) v /\ k2 = writeRIP k v) $;
theorem execXASTJCC (k c q k2: nat):
  $ execXAST k (xastJCC c q) k2 <->
    k2 = if (readCond k c) (writeRIP k (readRIP k +_64 q)) k $;
theorem execXASTCall {k2: nat} (k irm k3: nat):
  $ execXAST k (xastCall irm) k3 <-> E. k2 (
    pushRIP k k2 /\ EA_jump k2 (immRM_EA k irm) k2) $;
theorem execXASTRet {k2: nat} (k q k3: nat):
  $ execXAST k (xastRet q) k3 <-> E. k2 (
    popRIP k k2 /\ k3 = setReg k RSP (readReg k RSP +_64 q)) $;
theorem execXASTPush (k irm k2: nat):
  $ execXAST k (xastPush irm) k2 <-> pushImmRM k irm k2 $;
theorem execXASTPop (k rm k2: nat):
  $ execXAST k (xastPop rm) k2 <-> popWrite k rm k2 $;
theorem execXASTLeave (k k2: nat):
  $ execXAST k xastLeave k2 <->
    popWrite (setReg k RSP (readReg k RBP)) (RM_reg RBP) k2 $;
theorem execXASTCLC (k k2: nat):
  $ execXAST k xastCLC k2 <-> k2 = writeFlags k (setCF (readFlags k) F.) $;
theorem execXASTSTC (k k2: nat):
  $ execXAST k xastSTC k2 <-> k2 = writeFlags k (setCF (readFlags k) T.) $;
theorem execXASTCMC (k k2: nat):
  $ execXAST k xastCMC k2 <->
    k2 = writeFlags k (setCF (readFlags k) (~ (CF (readFlags k)))) $;
theorem execXASTCMC (k k2: nat):
  $ execXAST k xastCMC k2 <->
    k2 = writeFlags k (setCF (readFlags k) (~ (CF (readFlags k)))) $;
theorem execXASTSysCall (k n k2: nat):
  $ ~ execXAST k xastSysCall k2 $; -- not handled here

theorem execXASTT (k ast k2: nat):
  $ k e. Config /\ execXAST k ast k2 -> ast e. XAST /\ k2 e. Config $;

-- This is the step relation for the x86 semantic model, excluding IO.
-- `step k k2` means that k2 is a possible next state after k. Multiple
-- next states may exist in the case of undefined/nondeterministic behavior,
-- and no next states means the state is either invalid or an IO call.
def step (k k2 .l .ast: nat): wff =
$ k e. Config /\ E. l E. ast (
  readMemX k (readRIP k) l /\
  decode ast l /\
  execXAST (writeRIP k (readRIP k +_64 len l)) ast k2) $;
theorem stepT (k k2: nat): $ step k k2 -> k e. Config /\ k2 e. Config $;

-- This is a valid terminating state - the state immediately before calling
-- a system call (we model the x86-64 SYSCALL instruction instead of INT).
-- Here k2 is the state that the kernel sees, with RCX and RIP set to
-- the point after the call.
def isIO (k k2 .l .rip: nat): wff =
$ k e. Config /\ E. l E. rip (
  readMemX k (readRIP k) l /\
  decode xastSysCall l /\
  rip = readRIP k +_64 len l /\
  k2 = setReg (writeRIP k rip) RCX rip) $;

----------------------------------------
-- IO semantics
----------------------------------------

-- Now we model enough of the Linux kernel to interpret a few IO system calls.
def KernelState: set = $ Xp (Xp (List u8) (List u8)) Config $;

def stdin: nat = $ 0 $;
def stdout: nat = $ 1 $;

def readCStr (k a s .c: nat): wff =
$ all {c | c != 0} s /\ readMem k a (s |> 0) $;
theorem readCStrT (k a s: nat):
  $ k e. Config /\ a e. u64 /\ readCStr k a s -> s e. List u8 $;

def O_RDONLY: nat = $ 0 $;
def O_WRONLY: nat = $ 1 $;
def O_CREAT: nat = $ shl 1 6 $;
def O_TRUNC: nat = $ shl 1 9 $;

def sys_open: nat = $ 2 $;
def execOpen (k ret .filename .flags: nat): wff =
$ readReg k RAX = sys_open /\ E. filename E. flags (
    readCStr k (readReg k RDI) filename /\
    flags = readReg k RSI /\ readReg k RDX = 0 /\
    (flags = O_RDONLY \/ flags = O_WRONLY + O_CREAT + O_TRUNC) /\
    ret e. u32) $;

-- we only track progress through stdin
def readFromFD (fd l l1 l2: nat): wff =
$ ifp (fd = stdin)
    (l = l1 ++ l2 /\ (l1 = 0 -> l2 = 0))
    (l = l2 /\ l1 e. List u8) $;

def sys_read: nat = $ 0 $;
def execRead (l k l2 k2 ret .fd .buf .count .l1: nat): wff =
$ readReg k RAX = sys_read /\ E. fd E. buf E. count (
    readReg k RDI = fd /\
    readMem k (readReg k RSI) buf /\ buf e. Array u8 count /\
    count = readReg k RDX /\
    ifp (MSB 32 ret)
      (l2 = l /\ k2 = k)
      (ret <= count /\ E. l1 (readFromFD fd l l1 l2 /\
        writeMem k (readReg k RSI) l1 k2))) $;

-- we only track printing to stdout
def writeToFD (fd l l1 l2: nat): wff =
$ l2 = if (fd = stdout) (l ++ l1) l $;

def sys_write: nat = $ 1 $;
def execWrite (l k l2 ret .fd .buf .count .l1: nat): wff =
$ readReg k RAX = sys_write /\ E. fd E. buf E. count (
    readReg k RDI = fd /\
    readMem k (readReg k RSI) buf /\ buf e. Array u8 count /\
    ifp (MSB 32 ret) (l2 = l)
      (ret <= count /\ E. l1 (writeToFD fd l l1 l2 /\
        readMem k (readReg k RSI) l1))) $;

def Stat: set = $ Array u8 (8 * 10) $;
def sys_fstat: nat = $ 5 $;
def execFStat (k k2 ret .fd .stat .stat2: nat): wff =
$ readReg k RAX = sys_fstat /\ E. fd E. stat E. stat2 (
    fd = readReg k RDI /\ fd e. u32 /\
    readMem k (readReg k RSI) stat /\
    stat e. Stat /\ stat2 e. Stat /\
    ret e. u32 /\ writeMem k (readReg k RSI) stat2 k2) $;

def sys_mmap: nat = $ 9 $;
def MAP_PRIVATE: nat = $ 2 $;
def MAP_ANONYMOUS: nat = $ 32 $;
def MAP_FAILED: nat = $ bitsNeg 64 1 $;
def execMMap (k k2 ret .len .prot .flags .fd .off .buf: nat): wff =
$ readReg k RAX = sys_mmap /\ E. len E. prot E. flags E. fd E. off (
    readReg k RDI = 0 /\ len = readReg k RSI /\
    prot = readReg k RDX /\ flags = readReg k 10 /\
    fd = readReg k 8 /\ off = readReg k 9 /\
    flags = MAP_PRIVATE + nat (fd = bitsNeg 32 1) * MAP_ANONYMOUS /\
    prot e. Prot /\ off = 0 /\ ret e. u64 /\
    ifp (ret = MAP_FAILED) (k2 = k)
      (E. buf (buf e. Array u8 len /\ (fd = bitsNeg 32 1 -> all (sn 0) buf) /\
        mapMem prot k ret buf k2))) $;

def execIO (i o k0 i2 o2 k3 .k .k2 .ret: nat): wff =
$ E. k E. k2 E. ret (isIO k0 k /\ k3 = setReg k2 RAX ret /\ (
    execOpen k ret /\ i2 = i /\ o2 = o /\ k2 = k \/
    execRead i k i2 k2 ret /\ o2 = o \/
    execWrite o k o2 ret /\ i2 = i /\ k2 = k \/
    execFStat k k2 ret /\ i2 = i /\ o2 = o \/
    execMMap k k2 ret /\ i2 = i /\ o2 = o)) $;
theorem execIOT (i o k i2 o2 k2: nat):
  $ i e. List u8 /\ o e. List u8 /\ k e. Config /\ execIO i o k i2 o2 k2 ->
    i2 e. List u8 /\ o2 e. List u8 /\ k2 e. Config $;

def sys_exit: nat = $ ch x3 xc $;
def execExit (k ret: nat): wff =
$ readReg k RAX = sys_exit /\ ret e. u32 /\ ret = readReg k RDI $;

-- This is the composite step relation for the extended state.
-- This mixes regular steps of the machine with IO steps where
-- we hand control to the (POSIX-compliant) Linux kernel and axiomatize
-- the behavior. (We could avoid this, but if we go any lower level than
-- this we won't be able to run the result as a normal program - we will have
-- to replace the bootloader and so on to make a single program OS.)
def ksStep (ks ks2: nat): wff;
theorem ksStepVal (i o k i2 o2 k2: nat):
  $ ksStep ((i <> o) <> k) ((i2 <> o2) <> k2) <->
    ((i <> o) <> k) e. KernelState /\
    ((i2 = i /\ o2 = o /\ step k k2) \/ execIO i o k i2 o2 k2) $;
theorem ksStepT (ks ks2: nat):
  $ ksStep ks ks2 -> ks e. KernelState /\ ks2 e. KernelState $;

def ksPath (ks l ks2: nat): wff;
theorem ksPath0 (ks l ks2: nat):
  $ ksPath ks 0 ks2 <-> ks e. KernelState /\ ks2 = ks $;
theorem ksPathS (ks ks2 l ks3: nat):
  $ ksPath ks (ks2 : l) ks3 <-> ksStep ks ks2 /\ ksPath ks2 l ks3 $;
theorem ksPathT (ks l ks2: nat):
  $ ksPath ks l ks2 ->
    ks e. KernelState /\ all KernelState l /\ ks2 e. KernelState $;

def ksReachable (ks ks2 .l: nat): wff = $ E. l ksPath ks l ks2 $;

-- `runToComplete k i o` asserts that starting from initial configuration k,
-- given `i` on standard input, with the ability to read more files as
-- necessary, the program always reaches the exit point and returns a value,
-- and moreover, if it returns 0, then it has consumed the entire input and
-- returned `o`. (Nondeterminism is not permitted to affect the output `o`.)
def alwaysTerminates (k i o .ks .k2 .i2 .o2 .ret: nat): wff =
$ A. ks (ksReachable ((i <> 0) <> k) ks ->
    E. k2 E. i2 E. o2 E. ret (ksReachable ks ((i2 <> o2) <> k2) /\
      execExit k2 ret /\ (ret = 0 -> i2 = 0 /\ o2 = o))) $;

-- `succeeds k i o` asserts that starting from initial configuration k,
-- given `i` on standard input, the program reaches the exit point and returns
-- success (exit code 0), and puts `o` on standard out.
def succeeds (k i o .i2 .k2: nat): wff =
$ E. i2 E. k2 (
    ksReachable ((i <> 0) <> k) ((i2 <> o) <> k2) /\
    execExit k2 0) $;
